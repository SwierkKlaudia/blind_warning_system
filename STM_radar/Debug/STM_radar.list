
STM_radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f354  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f34  0800f498  0800f498  0001f498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080143cc  080143cc  000243cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080143d4  080143d4  000243d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080143d8  080143d8  000243d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000300  20000004  080143dc  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004e8  20000304  080146dc  00030304  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200007ec  080146dc  000307ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005360d  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b141  00000000  00000000  00083941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029b0  00000000  00000000  0008ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00005918  00000000  00000000  00091438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000246ee  00000000  00000000  00096d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002854d  00000000  00000000  000bb43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e6d11  00000000  00000000  000e398b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000009c  00000000  00000000  001ca69c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000af84  00000000  00000000  001ca738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000178da  00000000  00000000  001d56bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000304 	.word	0x20000304
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f47c 	.word	0x0800f47c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000308 	.word	0x20000308
 800017c:	0800f47c 	.word	0x0800f47c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
	__disable_irq();
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000e72:	b662      	cpsie	i
}
 8000e74:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000e94:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e98:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f001 fa55 	bl	8002350 <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <acc_hal_integration_sensor_transfer+0x48>)
 8000eb6:	f003 fa33 	bl	8004320 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f001 fa45 	bl	8002350 <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000334 	.word	0x20000334

08000ed4 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2120      	movs	r1, #32
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f001 fa34 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2110      	movs	r1, #16
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 fa2e 	bl	8002350 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f000 ff6f 	bl	8001dd8 <HAL_Delay>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f001 fa1d 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f001 fa17 	bl	8002350 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f000 ff58 	bl	8001dd8 <HAL_Delay>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 8000f3a:	f000 ff35 	bl	8001da8 <HAL_GetTick>
 8000f3e:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f40:	e00d      	b.n	8000f5e <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8000f42:	f7ff ff8b 	bl	8000e5c <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f001 f9e7 	bl	8002320 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d000      	beq.n	8000f5a <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 8000f58:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8000f5a:	f7ff ff88 	bl	8000e6e <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 f9db 	bl	8002320 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d007      	beq.n	8000f80 <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000f70:	f000 ff1a 	bl	8001da8 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8e0      	bhi.n	8000f42 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8000f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f001 f9ca 	bl	8002320 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <acc_hal_integration_get_reference_frequency+0x18>)
 8000fa6:	ee07 3a90 	vmov	s15, r3
}
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	4bc65d40 	.word	0x4bc65d40

08000fbc <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	return &hal;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <acc_hal_integration_get_implementation+0x10>)
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	08010f7c 	.word	0x08010f7c

08000fd0 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8000fd0:	b40c      	push	{r2, r3}
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b0b4      	sub	sp, #208	; 0xd0
 8000fd6:	af04      	add	r7, sp, #16
 8000fd8:	4603      	mov	r3, r0
 8000fda:	6039      	str	r1, [r7, #0]
 8000fdc:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 8000fde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe2:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8000fe4:	f107 000c 	add.w	r0, r7, #12
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000fee:	2196      	movs	r1, #150	; 0x96
 8000ff0:	f00b ffd4 	bl	800cf9c <vsniprintf>
 8000ff4:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8000ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ffc:	2b95      	cmp	r3, #149	; 0x95
 8000ffe:	dd0b      	ble.n	8001018 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8001000:	232e      	movs	r3, #46	; 0x2e
 8001002:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8001006:	232e      	movs	r3, #46	; 0x2e
 8001008:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 800100c:	232e      	movs	r3, #46	; 0x2e
 800100e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8001018:	f000 f881 	bl	800111e <acc_integration_get_time>
 800101c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8001020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <acc_integration_log+0x11c>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0d5b      	lsrs	r3, r3, #21
 8001034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8001038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800103c:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <acc_integration_log+0x120>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0b9a      	lsrs	r2, r3, #14
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <acc_integration_log+0x124>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	0959      	lsrs	r1, r3, #5
 800104c:	460b      	mov	r3, r1
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800105a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <acc_integration_log+0x128>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	099a      	lsrs	r2, r3, #6
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <acc_integration_log+0x124>)
 8001068:	fba3 1302 	umull	r1, r3, r3, r2
 800106c:	0959      	lsrs	r1, r3, #5
 800106e:	460b      	mov	r3, r1
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	1a5b      	subs	r3, r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 800107c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <acc_integration_log+0x128>)
 8001082:	fba2 1203 	umull	r1, r2, r2, r3
 8001086:	0992      	lsrs	r2, r2, #6
 8001088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800108c:	fb01 f202 	mul.w	r2, r1, r2
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d803      	bhi.n	80010a4 <acc_integration_log+0xd4>
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <acc_integration_log+0x12c>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	e000      	b.n	80010a6 <acc_integration_log+0xd6>
 80010a4:	233f      	movs	r3, #63	; 0x3f
 80010a6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80010aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80010ae:	f107 020c 	add.w	r2, r7, #12
 80010b2:	9203      	str	r2, [sp, #12]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	9202      	str	r2, [sp, #8]
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80010c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <acc_integration_log+0x130>)
 80010ce:	f00b fe39 	bl	800cd44 <iprintf>

	fflush(stdout);
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <acc_integration_log+0x134>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4618      	mov	r0, r3
 80010da:	f00a ff79 	bl	800bfd0 <fflush>

	va_end(ap);
}
 80010de:	bf00      	nop
 80010e0:	37c0      	adds	r7, #192	; 0xc0
 80010e2:	46bd      	mov	sp, r7
 80010e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010e8:	b002      	add	sp, #8
 80010ea:	4770      	bx	lr
 80010ec:	95217cb1 	.word	0x95217cb1
 80010f0:	45e7b273 	.word	0x45e7b273
 80010f4:	88888889 	.word	0x88888889
 80010f8:	10624dd3 	.word	0x10624dd3
 80010fc:	0800f4bc 	.word	0x0800f4bc
 8001100:	0800f498 	.word	0x0800f498
 8001104:	20000134 	.word	0x20000134

08001108 <acc_integration_sleep_ms>:

#include "acc_integration.h"


void acc_integration_sleep_ms(uint32_t time_msec)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_msec);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fe61 	bl	8001dd8 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001122:	f000 fe41 	bl	8001da8 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}

0800112c <detector_init>:
acc_detector_presence_result_t result;

static void update_configuration(acc_detector_presence_configuration_t presence_configuration);

int detector_init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8001132:	f7ff ff43 	bl	8000fbc <acc_hal_integration_get_implementation>
 8001136:	6078      	str	r0, [r7, #4]

	if (!acc_rss_activate(hal))
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f005 f821 	bl	8006180 <acc_rss_activate>
 800113e:	4603      	mov	r3, r0
 8001140:	f083 0301 	eor.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <detector_init+0x28>
	{
		printf("Failed to activate RSS\n");
 800114a:	4825      	ldr	r0, [pc, #148]	; (80011e0 <detector_init+0xb4>)
 800114c:	f00b fe80 	bl	800ce50 <puts>
		return EXIT_FAILURE;
 8001150:	2301      	movs	r3, #1
 8001152:	e041      	b.n	80011d8 <detector_init+0xac>
	}

	acc_detector_presence_configuration_t presence_configuration = acc_detector_presence_configuration_create();
 8001154:	f004 faae 	bl	80056b4 <acc_detector_presence_configuration_create>
 8001158:	4603      	mov	r3, r0
 800115a:	603b      	str	r3, [r7, #0]
	if (presence_configuration == NULL)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <detector_init+0x44>
	{
		printf("Failed to create configuration\n");
 8001162:	4820      	ldr	r0, [pc, #128]	; (80011e4 <detector_init+0xb8>)
 8001164:	f00b fe74 	bl	800ce50 <puts>
		acc_rss_deactivate();
 8001168:	f005 f848 	bl	80061fc <acc_rss_deactivate>
		return EXIT_FAILURE;
 800116c:	2301      	movs	r3, #1
 800116e:	e033      	b.n	80011d8 <detector_init+0xac>
	}

	update_configuration(presence_configuration);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f89a 	bl	80012ac <update_configuration>

	handle = acc_detector_presence_create(presence_configuration);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f004 fb12 	bl	80057a4 <acc_detector_presence_create>
 8001180:	4603      	mov	r3, r0
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <detector_init+0xbc>)
 8001184:	6013      	str	r3, [r2, #0]
	if (handle == NULL)
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <detector_init+0xbc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10a      	bne.n	80011a4 <detector_init+0x78>
	{
		printf("Failed to create detector\n");
 800118e:	4817      	ldr	r0, [pc, #92]	; (80011ec <detector_init+0xc0>)
 8001190:	f00b fe5e 	bl	800ce50 <puts>
		acc_detector_presence_configuration_destroy(&presence_configuration);
 8001194:	463b      	mov	r3, r7
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fae0 	bl	800575c <acc_detector_presence_configuration_destroy>
		acc_rss_deactivate();
 800119c:	f005 f82e 	bl	80061fc <acc_rss_deactivate>
		return EXIT_FAILURE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e019      	b.n	80011d8 <detector_init+0xac>
	}

	acc_detector_presence_configuration_destroy(&presence_configuration);
 80011a4:	463b      	mov	r3, r7
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fad8 	bl	800575c <acc_detector_presence_configuration_destroy>

	if (!acc_detector_presence_activate(handle))
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <detector_init+0xbc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fb5b 	bl	800586c <acc_detector_presence_activate>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f083 0301 	eor.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <detector_init+0xaa>
	{
		printf("Failed to activate detector\n");
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <detector_init+0xc4>)
 80011c4:	f00b fe44 	bl	800ce50 <puts>
		acc_detector_presence_destroy(&handle);
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <detector_init+0xbc>)
 80011ca:	f004 fb29 	bl	8005820 <acc_detector_presence_destroy>
		acc_rss_deactivate();
 80011ce:	f005 f815 	bl	80061fc <acc_rss_deactivate>
		return EXIT_FAILURE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <detector_init+0xac>
	}

	return EXIT_SUCCESS;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0800f4c4 	.word	0x0800f4c4
 80011e4:	0800f4dc 	.word	0x0800f4dc
 80011e8:	20000320 	.word	0x20000320
 80011ec:	0800f4fc 	.word	0x0800f4fc
 80011f0:	0800f518 	.word	0x0800f518

080011f4 <detector_presence>:

int detector_presence(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	bool success = true;
 80011fa:	2301      	movs	r3, #1
 80011fc:	71fb      	strb	r3, [r7, #7]

	success = acc_detector_presence_get_next(handle, &result);
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <detector_presence+0x40>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <detector_presence+0x44>)
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fb73 	bl	80058f0 <acc_detector_presence_get_next>
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	if (!success)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f083 0301 	eor.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <detector_presence+0x30>
	{
		printf("acc_detector_presence_get_next() failed\n");
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <detector_presence+0x48>)
 800121c:	f00b fe18 	bl	800ce50 <puts>
		return EXIT_FAILURE;
 8001220:	2301      	movs	r3, #1
 8001222:	e003      	b.n	800122c <detector_presence+0x38>
	}

	acc_integration_sleep_ms(1000 / DEFAULT_UPDATE_RATE);
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f7ff ff6f 	bl	8001108 <acc_integration_sleep_ms>

	return EXIT_SUCCESS;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000320 	.word	0x20000320
 8001238:	20000324 	.word	0x20000324
 800123c:	0800f534 	.word	0x0800f534

08001240 <detector_deactivate>:

int detector_deactivate(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	bool deactivated = acc_detector_presence_deactivate(handle);
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <detector_deactivate+0x38>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fb2a 	bl	80058a4 <acc_detector_presence_deactivate>
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]

	acc_detector_presence_destroy(&handle);
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <detector_deactivate+0x38>)
 8001256:	f004 fae3 	bl	8005820 <acc_detector_presence_destroy>

	acc_rss_deactivate();
 800125a:	f004 ffcf 	bl	80061fc <acc_rss_deactivate>

	if (deactivated)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <detector_deactivate+0x2e>
	{
		printf("Application finished OK\n");
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <detector_deactivate+0x3c>)
 8001266:	f00b fdf3 	bl	800ce50 <puts>
		return EXIT_SUCCESS;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <detector_deactivate+0x30>
	}

	return EXIT_FAILURE;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000320 	.word	0x20000320
 800127c:	0800f55c 	.word	0x0800f55c

08001280 <get_detector_distance>:

float get_detector_distance(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	if (true == result.presence_detected)
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <get_detector_distance+0x24>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <get_detector_distance+0x12>
	{
		return result.presence_distance;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <get_detector_distance+0x24>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	e000      	b.n	8001294 <get_detector_distance+0x14>
	}
	else
	{
		return 9999;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <get_detector_distance+0x28>)
	}
}
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000324 	.word	0x20000324
 80012a8:	461c3c00 	.word	0x461c3c00

080012ac <update_configuration>:

static void update_configuration(acc_detector_presence_configuration_t presence_configuration)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	acc_detector_presence_configuration_update_rate_set(presence_configuration, DEFAULT_UPDATE_RATE);
 80012b4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f004 fb99 	bl	80059f0 <acc_detector_presence_configuration_update_rate_set>
	acc_detector_presence_configuration_detection_threshold_set(presence_configuration, DEFAULT_DETECTION_THRESHOLD);
 80012be:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f004 fb7e 	bl	80059c4 <acc_detector_presence_configuration_detection_threshold_set>
	acc_detector_presence_configuration_start_set(presence_configuration, DEFAULT_START_M);
 80012c8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80012f4 <update_configuration+0x48>
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f004 fb4d 	bl	800596c <acc_detector_presence_configuration_start_set>
	acc_detector_presence_configuration_length_set(presence_configuration, DEFAULT_LENGTH_M);
 80012d2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80012f8 <update_configuration+0x4c>
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f004 fb5e 	bl	8005998 <acc_detector_presence_configuration_length_set>
	acc_detector_presence_configuration_power_save_mode_set(presence_configuration, DEFAULT_POWER_SAVE_MODE);
 80012dc:	2101      	movs	r1, #1
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f004 fbb2 	bl	8005a48 <acc_detector_presence_configuration_power_save_mode_set>
	acc_detector_presence_configuration_nbr_removed_pc_set(presence_configuration, DEFAULT_NBR_REMOVED_PC);
 80012e4:	2100      	movs	r1, #0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f004 fb98 	bl	8005a1c <acc_detector_presence_configuration_nbr_removed_pc_set>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	3e4ccccd 	.word	0x3e4ccccd
 80012f8:	3fb33333 	.word	0x3fb33333

080012fc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130c:	f023 0218 	bic.w	r2, r3, #24
 8001310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4313      	orrs	r3, r2
 8001318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4313      	orrs	r3, r2
 800133e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800134c:	68fb      	ldr	r3, [r7, #12]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001360:	f000 fcb4 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001364:	f000 f830 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001368:	f000 f986 	bl	8001678 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800136c:	f000 f910 	bl	8001590 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001370:	f000 f95a 	bl	8001628 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8001374:	f000 f8ce 	bl	8001514 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  detector_result = detector_init();
 8001378:	f7ff fed8 	bl	800112c <detector_init>
 800137c:	4603      	mov	r3, r0
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <main+0x68>)
 8001380:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (EXIT_SUCCESS == detector_result)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <main+0x68>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <main+0x4a>
	  {
		  detector_result = detector_presence();
 800138a:	f7ff ff33 	bl	80011f4 <detector_presence>
 800138e:	4603      	mov	r3, r0
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <main+0x68>)
 8001392:	6013      	str	r3, [r2, #0]
		  send_distance_UART(get_detector_distance());
 8001394:	f7ff ff74 	bl	8001280 <get_detector_distance>
 8001398:	eef0 7a40 	vmov.f32	s15, s0
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	f000 f9de 	bl	8001760 <send_distance_UART>
 80013a4:	e7ed      	b.n	8001382 <main+0x26>
	  }
	  else
	  {
		  detector_result = detector_deactivate();
 80013a6:	f7ff ff4b 	bl	8001240 <detector_deactivate>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <main+0x68>)
 80013ae:	6013      	str	r3, [r2, #0]
		  if (EXIT_SUCCESS == detector_result)
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <main+0x68>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e4      	bne.n	8001382 <main+0x26>
		  {
			  detector_result = detector_init();
 80013b8:	f7ff feb8 	bl	800112c <detector_init>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a01      	ldr	r2, [pc, #4]	; (80013c4 <main+0x68>)
 80013c0:	6013      	str	r3, [r2, #0]
	  if (EXIT_SUCCESS == detector_result)
 80013c2:	e7de      	b.n	8001382 <main+0x26>
 80013c4:	20000004 	.word	0x20000004

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ae      	sub	sp, #184	; 0xb8
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d2:	2248      	movs	r2, #72	; 0x48
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00a ff62 	bl	800c2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2250      	movs	r2, #80	; 0x50
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00a ff52 	bl	800c2a0 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800140a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	f023 0303 	bic.w	r3, r3, #3
 8001416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001420:	f001 f8e0 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ff69 	bl	80012fc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142a:	4b39      	ldr	r3, [pc, #228]	; (8001510 <SystemClock_Config+0x148>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001432:	4a37      	ldr	r2, [pc, #220]	; (8001510 <SystemClock_Config+0x148>)
 8001434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <SystemClock_Config+0x148>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001446:	2327      	movs	r3, #39	; 0x27
 8001448:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001458:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800145a:	2301      	movs	r3, #1
 800145c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fc45 	bl	8002d0c <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001488:	f000 f9b6 	bl	80017f8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800148c:	236f      	movs	r3, #111	; 0x6f
 800148e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001490:	2302      	movs	r3, #2
 8001492:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 ffba 	bl	8003428 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80014ba:	f000 f99d 	bl	80017f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80014be:	f242 1301 	movw	r3, #8449	; 0x2101
 80014c2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80014c4:	2318      	movs	r3, #24
 80014c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80014c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80014ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80014d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80014da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014de:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80014ea:	2300      	movs	r3, #0
 80014ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fbe3 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8001500:	f000 f97a 	bl	80017f8 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001504:	f002 fd52 	bl	8003fac <HAL_RCCEx_EnableMSIPLLMode>
}
 8001508:	bf00      	nop
 800150a:	37b8      	adds	r7, #184	; 0xb8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	58000400 	.word	0x58000400

08001514 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_SPI1_Init+0x74>)
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <MX_SPI1_Init+0x78>)
 800151c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_SPI1_Init+0x74>)
 8001520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_SPI1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_SPI1_Init+0x74>)
 800152e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001532:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_SPI1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_SPI1_Init+0x74>)
 8001542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001546:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_SPI1_Init+0x74>)
 800154a:	2220      	movs	r2, #32
 800154c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_SPI1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_SPI1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_SPI1_Init+0x74>)
 8001562:	2207      	movs	r2, #7
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_SPI1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_SPI1_Init+0x74>)
 800156e:	2208      	movs	r2, #8
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_SPI1_Init+0x74>)
 8001574:	f002 fe31 	bl	80041da <HAL_SPI_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800157e:	f000 f93b 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000334 	.word	0x20000334
 800158c:	40013000 	.word	0x40013000

08001590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <MX_USART1_UART_Init+0x90>)
 8001596:	4a23      	ldr	r2, [pc, #140]	; (8001624 <MX_USART1_UART_Init+0x94>)
 8001598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <MX_USART1_UART_Init+0x90>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015da:	f003 fa31 	bl	8004a40 <HAL_UART_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015e4:	f000 f908 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e8:	2100      	movs	r1, #0
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015ec:	f003 fedc 	bl	80053a8 <HAL_UARTEx_SetTxFifoThreshold>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015f6:	f000 f8ff 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015fa:	2100      	movs	r1, #0
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015fe:	f003 ff11 	bl	8005424 <HAL_UARTEx_SetRxFifoThreshold>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001608:	f000 f8f6 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_USART1_UART_Init+0x90>)
 800160e:	f003 fe92 	bl	8005336 <HAL_UARTEx_DisableFifoMode>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001618:	f000 f8ee 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000398 	.word	0x20000398
 8001624:	40013800 	.word	0x40013800

08001628 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USB_PCD_Init+0x48>)
 800162e:	4a11      	ldr	r2, [pc, #68]	; (8001674 <MX_USB_PCD_Init+0x4c>)
 8001630:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001634:	2208      	movs	r2, #8
 8001636:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <MX_USB_PCD_Init+0x48>)
 800163a:	2202      	movs	r2, #2
 800163c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001640:	2202      	movs	r2, #2
 8001642:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USB_PCD_Init+0x48>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_USB_PCD_Init+0x48>)
 800165e:	f000 feb2 	bl	80023c6 <HAL_PCD_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001668:	f000 f8c6 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000428 	.word	0x20000428
 8001674:	40006800 	.word	0x40006800

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168c:	2004      	movs	r0, #4
 800168e:	f7ff fe4b 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff fe48 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	2002      	movs	r0, #2
 800169a:	f7ff fe45 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	2008      	movs	r0, #8
 80016a0:	f7ff fe42 	bl	8001328 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A111_CS_N_Pin|A111_ENABLE_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2130      	movs	r1, #48	; 0x30
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f000 fe50 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|SPEAKER_VCC_Pin|LD1_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2133      	movs	r1, #51	; 0x33
 80016b4:	4826      	ldr	r0, [pc, #152]	; (8001750 <MX_GPIO_Init+0xd8>)
 80016b6:	f000 fe4b 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A111_CS_N_Pin A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|A111_ENABLE_Pin;
 80016ba:	2330      	movs	r3, #48	; 0x30
 80016bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2302      	movs	r3, #2
 80016c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f000 fcb5 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 80016d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_GPIO_Init+0xdc>)
 80016de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f000 fca8 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f0:	2310      	movs	r3, #16
 80016f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4815      	ldr	r0, [pc, #84]	; (8001758 <MX_GPIO_Init+0xe0>)
 8001702:	f000 fc9d 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin SPEAKER_VCC_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|SPEAKER_VCC_Pin|LD1_Pin;
 8001706:	2333      	movs	r3, #51	; 0x33
 8001708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_GPIO_Init+0xd8>)
 800171c:	f000 fc90 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001720:	2303      	movs	r3, #3
 8001722:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <MX_GPIO_Init+0xe4>)
 8001732:	f000 fc85 	bl	8002040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2017      	movs	r0, #23
 800173c:	f000 fc4b 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001740:	2017      	movs	r0, #23
 8001742:	f000 fc62 	bl	800200a <HAL_NVIC_EnableIRQ>

}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	48000400 	.word	0x48000400
 8001754:	10110000 	.word	0x10110000
 8001758:	48000800 	.word	0x48000800
 800175c:	48000c00 	.word	0x48000c00

08001760 <send_distance_UART>:

/* USER CODE BEGIN 4 */
static void send_distance_UART(float distance)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
	if (distance < 9999)
 800176a:	edd7 7a01 	vldr	s15, [r7, #4]
 800176e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80017e8 <send_distance_UART+0x88>
 8001772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	d516      	bpl.n	80017aa <send_distance_UART+0x4a>
	{
		char uart_buf[23];
		sprintf(uart_buf, "Distance: %.3f [m]\r\n", (distance));
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7fe febb 	bl	80004f8 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	f107 0008 	add.w	r0, r7, #8
 800178a:	4918      	ldr	r1, [pc, #96]	; (80017ec <send_distance_UART+0x8c>)
 800178c:	f00b fb78 	bl	800ce80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fcf3 	bl	8000180 <strlen>
 800179a:	4603      	mov	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	f107 0108 	add.w	r1, r7, #8
 80017a2:	2364      	movs	r3, #100	; 0x64
 80017a4:	4812      	ldr	r0, [pc, #72]	; (80017f0 <send_distance_UART+0x90>)
 80017a6:	f003 f99b 	bl	8004ae0 <HAL_UART_Transmit>
	}

	if (distance < 0.4)
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7fe fea4 	bl	80004f8 <__aeabi_f2d>
 80017b0:	a30b      	add	r3, pc, #44	; (adr r3, 80017e0 <send_distance_UART+0x80>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7ff f969 	bl	8000a8c <__aeabi_dcmplt>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <send_distance_UART+0x6c>
	{
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2110      	movs	r1, #16
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <send_distance_UART+0x94>)
 80017c6:	f000 fdc3 	bl	8002350 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_RESET);
	}
}
 80017ca:	e004      	b.n	80017d6 <send_distance_UART+0x76>
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2110      	movs	r1, #16
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <send_distance_UART+0x94>)
 80017d2:	f000 fdbd 	bl	8002350 <HAL_GPIO_WritePin>
}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	9999999a 	.word	0x9999999a
 80017e4:	3fd99999 	.word	0x3fd99999
 80017e8:	461c3c00 	.word	0x461c3c00
 80017ec:	0800f574 	.word	0x0800f574
 80017f0:	20000398 	.word	0x20000398
 80017f4:	48000400 	.word	0x48000400

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>

08001802 <LL_AHB2_GRP1_EnableClock>:
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001810:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4313      	orrs	r3, r2
 8001818:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4013      	ands	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001872:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4313      	orrs	r3, r2
 800187c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001882:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_SPI_MspInit+0x5c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d117      	bne.n	80018fa <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018ce:	f7ff ffca 	bl	8001866 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff ff95 	bl	8001802 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 80018d8:	23c2      	movs	r3, #194	; 0xc2
 80018da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018e8:	2305      	movs	r3, #5
 80018ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f6:	f000 fba3 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40013000 	.word	0x40013000

08001908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_UART_MspInit+0x58>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d116      	bne.n	8001958 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800192e:	f7ff ff9a 	bl	8001866 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2002      	movs	r0, #2
 8001934:	f7ff ff65 	bl	8001802 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001938:	23c0      	movs	r3, #192	; 0xc0
 800193a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001940:	2301      	movs	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001948:	2307      	movs	r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4619      	mov	r1, r3
 8001952:	4804      	ldr	r0, [pc, #16]	; (8001964 <HAL_UART_MspInit+0x5c>)
 8001954:	f000 fb74 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40013800 	.word	0x40013800
 8001964:	48000400 	.word	0x48000400

08001968 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_PCD_MspInit+0x5c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d118      	bne.n	80019bc <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff ff39 	bl	8001802 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001990:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001994:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80019a2:	230a      	movs	r3, #10
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f000 fb46 	bl	8002040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019b4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80019b8:	f7ff ff3c 	bl	8001834 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40006800 	.word	0x40006800

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <NMI_Handler+0x4>

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a14:	f000 f9b4 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a24:	f000 fcac 	bl	8002380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
	return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_kill>:

int _kill(int pid, int sig)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a46:	f00a f9fb 	bl	800be40 <__errno>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2216      	movs	r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_exit>:

void _exit (int status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ffe7 	bl	8001a3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a6e:	e7fe      	b.n	8001a6e <_exit+0x12>

08001a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e00a      	b.n	8001a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a82:	f3af 8000 	nop.w
 8001a86:	4601      	mov	r1, r0
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	b2ca      	uxtb	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dbf0      	blt.n	8001a82 <_read+0x12>
	}

return len;
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e009      	b.n	8001ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf1      	blt.n	8001abc <_write+0x12>
	}
	return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_close>:

int _close(int file)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_isatty>:

int _isatty(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	return 1;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f00a f960 	bl	800be40 <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20030000 	.word	0x20030000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	2000071c 	.word	0x2000071c
 8001bb4:	200007f0 	.word	0x200007f0

08001bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <SystemInit+0x98>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a23      	ldr	r2, [pc, #140]	; (8001c50 <SystemInit+0x98>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001be4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <SystemInit+0x9c>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c02:	f023 0305 	bic.w	r3, r3, #5
 8001c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <SystemInit+0xa0>)
 8001c24:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <SystemInit+0xa0>)
 8001c2c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	faf6fefb 	.word	0xfaf6fefb
 8001c58:	22041000 	.word	0x22041000

08001c5c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001c5c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c60:	3304      	adds	r3, #4

08001c62 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c62:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c64:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001c66:	d3f9      	bcc.n	8001c5c <CopyDataInit>
  bx lr
 8001c68:	4770      	bx	lr

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001c6a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001c6c:	3004      	adds	r0, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001c6e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>
  bx lr
 8001c72:	4770      	bx	lr

08001c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001c76:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c78:	f7ff ff9e 	bl	8001bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <LoopForever+0x8>)
 8001c7e:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <LoopForever+0xc>)
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <LoopForever+0x10>)
 8001c82:	2300      	movs	r3, #0
 8001c84:	f7ff ffed 	bl	8001c62 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <LoopForever+0x14>)
 8001c8a:	490c      	ldr	r1, [pc, #48]	; (8001cbc <LoopForever+0x18>)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f7ff ffee 	bl	8001c6e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c92:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <LoopForever+0x1c>)
 8001c94:	490b      	ldr	r1, [pc, #44]	; (8001cc4 <LoopForever+0x20>)
 8001c96:	2300      	movs	r3, #0
 8001c98:	f7ff ffe9 	bl	8001c6e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c9c:	f00a faa0 	bl	800c1e0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001ca0:	f7ff fb5c 	bl	800135c <main>

08001ca4 <LoopForever>:

LoopForever:
  b LoopForever
 8001ca4:	e7fe      	b.n	8001ca4 <LoopForever>
 8001ca6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001ca8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	20000304 	.word	0x20000304
 8001cb4:	080143dc 	.word	0x080143dc
  INIT_BSS _sbss, _ebss
 8001cb8:	20000304 	.word	0x20000304
 8001cbc:	200007ec 	.word	0x200007ec
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001cc0:	20030000 	.word	0x20030000
 8001cc4:	20030000 	.word	0x20030000

08001cc8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC1_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_Init+0x3c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <HAL_Init+0x3c>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	f000 f96c 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f000 f80f 	bl	8001d0c <HAL_InitTick>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	71fb      	strb	r3, [r7, #7]
 8001cf8:	e001      	b.n	8001cfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cfa:	f7ff fdcd 	bl	8001898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	58004000 	.word	0x58004000

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_InitTick+0x6c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d024      	beq.n	8001d6a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d20:	f001 fd2e 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_InitTick+0x6c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d30:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f974 	bl	8002026 <HAL_SYSTICK_Config>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10f      	bne.n	8001d64 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	d809      	bhi.n	8001d5e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d52:	f000 f940 	bl	8001fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_InitTick+0x70>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e007      	b.n	8001d6e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e004      	b.n	8001d6e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e001      	b.n	8001d6e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000010 	.word	0x20000010
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000010 	.word	0x20000010
 8001da4:	20000720 	.word	0x20000720

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000720 	.word	0x20000720

08001dc0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_GetTickPrio+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	2000000c 	.word	0x2000000c

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff ffe2 	bl	8001da8 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001dfe:	bf00      	nop
 8001e00:	f7ff ffd2 	bl	8001da8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
    {
    }
  }
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000010 	.word	0x20000010

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff40 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff90 	bl	8001f14 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5f 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff33 	bl	8001e84 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa4 	bl	8001f7c <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e14c      	b.n	80022ea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 813e 	beq.w	80022e4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d00b      	beq.n	8002088 <HAL_GPIO_Init+0x48>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d007      	beq.n	8002088 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207c:	2b11      	cmp	r3, #17
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b12      	cmp	r3, #18
 8002086:	d130      	bne.n	80020ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020be:	2201      	movs	r2, #1
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 0201 	and.w	r2, r3, #1
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0xea>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b12      	cmp	r3, #18
 8002128:	d123      	bne.n	8002172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	6939      	ldr	r1, [r7, #16]
 800216e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0203 	and.w	r2, r3, #3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8098 	beq.w	80022e4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_GPIO_Init+0x2c8>)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021de:	d019      	beq.n	8002214 <HAL_GPIO_Init+0x1d4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a4a      	ldr	r2, [pc, #296]	; (800230c <HAL_GPIO_Init+0x2cc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_GPIO_Init+0x1d0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a49      	ldr	r2, [pc, #292]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00d      	beq.n	800220c <HAL_GPIO_Init+0x1cc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_GPIO_Init+0x2d4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d007      	beq.n	8002208 <HAL_GPIO_Init+0x1c8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a47      	ldr	r2, [pc, #284]	; (8002318 <HAL_GPIO_Init+0x2d8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_GPIO_Init+0x1c4>
 8002200:	2304      	movs	r3, #4
 8002202:	e008      	b.n	8002216 <HAL_GPIO_Init+0x1d6>
 8002204:	2307      	movs	r3, #7
 8002206:	e006      	b.n	8002216 <HAL_GPIO_Init+0x1d6>
 8002208:	2303      	movs	r3, #3
 800220a:	e004      	b.n	8002216 <HAL_GPIO_Init+0x1d6>
 800220c:	2302      	movs	r3, #2
 800220e:	e002      	b.n	8002216 <HAL_GPIO_Init+0x1d6>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_GPIO_Init+0x1d6>
 8002214:	2300      	movs	r3, #0
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	f002 0203 	and.w	r2, r2, #3
 800221c:	0092      	lsls	r2, r2, #2
 800221e:	4093      	lsls	r3, r2
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002226:	4938      	ldr	r1, [pc, #224]	; (8002308 <HAL_GPIO_Init+0x2c8>)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002234:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_GPIO_Init+0x2dc>)
 8002236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800225a:	4a30      	ldr	r2, [pc, #192]	; (800231c <HAL_GPIO_Init+0x2dc>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_GPIO_Init+0x2dc>)
 8002264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <HAL_GPIO_Init+0x2dc>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_GPIO_Init+0x2dc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_GPIO_Init+0x2dc>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_GPIO_Init+0x2dc>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_GPIO_Init+0x2dc>)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f47f aeab 	bne.w	8002050 <HAL_GPIO_Init+0x10>
  }
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40010000 	.word	0x40010000
 800230c:	48000400 	.word	0x48000400
 8002310:	48000800 	.word	0x48000800
 8002314:	48000c00 	.word	0x48000c00
 8002318:	48001000 	.word	0x48001000
 800231c:	58000800 	.word	0x58000800

08002320 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f806 	bl	80023b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58000800 	.word	0x58000800

080023b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c8:	b08b      	sub	sp, #44	; 0x2c
 80023ca:	af06      	add	r7, sp, #24
 80023cc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d7      	b.n	8002588 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fabb 	bl	8001968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 f89c 	bl	800553c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e04c      	b.n	80024a4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	3301      	adds	r3, #1
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	b298      	uxth	r0, r3
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	3336      	adds	r3, #54	; 0x36
 8002448:	4602      	mov	r2, r0
 800244a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	3303      	adds	r3, #3
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	3338      	adds	r3, #56	; 0x38
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	333c      	adds	r3, #60	; 0x3c
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3340      	adds	r3, #64	; 0x40
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	3301      	adds	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d3ad      	bcc.n	800240a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e044      	b.n	800253e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d3b5      	bcc.n	80024b4 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	687e      	ldr	r6, [r7, #4]
 8002550:	466d      	mov	r5, sp
 8002552:	f106 0410 	add.w	r4, r6, #16
 8002556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	602b      	str	r3, [r5, #0]
 800255e:	1d33      	adds	r3, r6, #4
 8002560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	f003 f805 	bl	8005572 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d102      	bne.n	8002586 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f805 	bl	8002590 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002590 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	58000400 	.word	0x58000400

08002604 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_PWREx_GetVoltageRange+0x18>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	58000400 	.word	0x58000400

08002620 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002632:	d101      	bne.n	8002638 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_RCC_HSE_Enable>:
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_RCC_HSE_Disable>:
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_RCC_HSE_IsReady>:
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002692:	d101      	bne.n	8002698 <LL_RCC_HSE_IsReady+0x18>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <LL_RCC_HSE_IsReady+0x1a>
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_RCC_HSI_Enable>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_HSI_Disable>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_RCC_HSI_IsReady>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f2:	d101      	bne.n	80026f8 <LL_RCC_HSI_IsReady+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <LL_RCC_HSI_IsReady+0x1a>
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_RCC_HSI48_Enable>:
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800273a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_RCC_HSI48_Disable>:
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800275c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_RCC_HSI48_IsReady>:
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d101      	bne.n	800278a <LL_RCC_HSI48_IsReady+0x18>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_RCC_HSI48_IsReady+0x1a>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_RCC_LSE_Enable>:
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_LSE_Disable>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_RCC_LSE_EnableBypass>:
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_RCC_LSE_DisableBypass>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d101      	bne.n	8002836 <LL_RCC_LSE_IsReady+0x18>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_RCC_LSE_IsReady+0x1a>
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b02      	cmp	r3, #2
 8002898:	d101      	bne.n	800289e <LL_RCC_LSI1_IsReady+0x18>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <LL_RCC_LSI1_IsReady+0x1a>
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028dc:	f023 0304 	bic.w	r3, r3, #4
 80028e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d101      	bne.n	8002906 <LL_RCC_LSI2_IsReady+0x18>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <LL_RCC_LSI2_IsReady+0x1a>
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002922:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6013      	str	r3, [r2, #0]
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d101      	bne.n	8002992 <LL_RCC_MSI_IsReady+0x16>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_RCC_MSI_IsReady+0x18>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2bb0      	cmp	r3, #176	; 0xb0
 80029dc:	d901      	bls.n	80029e2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80029de:	23b0      	movs	r3, #176	; 0xb0
 80029e0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80029e2:	687b      	ldr	r3, [r7, #4]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 0203 	bic.w	r2, r3, #3
 8002a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002abe:	f023 020f 	bic.w	r2, r3, #15
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc0:	6013      	str	r3, [r2, #0]
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bde:	d101      	bne.n	8002be4 <LL_RCC_PLL_IsReady+0x18>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <LL_RCC_PLL_IsReady+0x1a>
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0303 	and.w	r3, r3, #3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d101      	bne.n	8002c6a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c8a:	d101      	bne.n	8002c90 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d101      	bne.n	8002cb6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cd4:	d101      	bne.n	8002cda <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf8:	d101      	bne.n	8002cfe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b08d      	sub	sp, #52	; 0x34
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e37f      	b.n	800341e <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8092 	beq.w	8002e50 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2c:	f7ff fe89 	bl	8002a42 <LL_RCC_GetSysClkSource>
 8002d30:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d32:	f7ff ff82 	bl	8002c3a <LL_RCC_PLL_GetMainSource>
 8002d36:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_RCC_OscConfig+0x3e>
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d14c      	bne.n	8002dde <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d149      	bne.n	8002dde <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d4a:	f7ff fe17 	bl	800297c <LL_RCC_MSI_IsReady>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_OscConfig+0x54>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e35e      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d64:	f7ff fe2f 	bl	80029c6 <LL_RCC_MSI_GetRange>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	429c      	cmp	r4, r3
 8002d6c:	d914      	bls.n	8002d98 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fd44 	bl	8003800 <RCC_SetFlashLatencyFromMSIRange>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e34d      	b.n	800341e <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fe09 	bl	800299e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe2d 	bl	80029f0 <LL_RCC_MSI_SetCalibTrimming>
 8002d96:	e013      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fdfe 	bl	800299e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fe22 	bl	80029f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fd25 	bl	8003800 <RCC_SetFlashLatencyFromMSIRange>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e32e      	b.n	800341e <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dc0:	f000 fcde 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4aa5      	ldr	r2, [pc, #660]	; (800305c <HAL_RCC_OscConfig+0x350>)
 8002dc8:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dca:	4ba5      	ldr	r3, [pc, #660]	; (8003060 <HAL_RCC_OscConfig+0x354>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe ff9c 	bl	8001d0c <HAL_InitTick>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d039      	beq.n	8002e4e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e31f      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01e      	beq.n	8002e24 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002de6:	f7ff fdab 	bl	8002940 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dea:	f7fe ffdd 	bl	8001da8 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002df2:	f7fe ffd9 	bl	8001da8 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e30c      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e04:	f7ff fdba 	bl	800297c <LL_RCC_MSI_IsReady>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f1      	beq.n	8002df2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fdc3 	bl	800299e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fde7 	bl	80029f0 <LL_RCC_MSI_SetCalibTrimming>
 8002e22:	e015      	b.n	8002e50 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e24:	f7ff fd9b 	bl	800295e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e28:	f7fe ffbe 	bl	8001da8 <HAL_GetTick>
 8002e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e30:	f7fe ffba 	bl	8001da8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e2ed      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e42:	f7ff fd9b 	bl	800297c <LL_RCC_MSI_IsReady>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f1      	bne.n	8002e30 <HAL_RCC_OscConfig+0x124>
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d04e      	beq.n	8002efa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5c:	f7ff fdf1 	bl	8002a42 <LL_RCC_GetSysClkSource>
 8002e60:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e62:	f7ff feea 	bl	8002c3a <LL_RCC_PLL_GetMainSource>
 8002e66:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d005      	beq.n	8002e7a <HAL_RCC_OscConfig+0x16e>
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d10a      	bne.n	8002e90 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7a:	f7ff fc01 	bl	8002680 <LL_RCC_HSE_IsReady>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d039      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x1ec>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d135      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e2c6      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d102      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x194>
 8002e9a:	f7ff fbd3 	bl	8002644 <LL_RCC_HSE_Enable>
 8002e9e:	e001      	b.n	8002ea4 <HAL_RCC_OscConfig+0x198>
 8002ea0:	f7ff fbdf 	bl	8002662 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe ff7c 	bl	8001da8 <HAL_GetTick>
 8002eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe ff78 	bl	8001da8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e2ab      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ec6:	f7ff fbdb 	bl	8002680 <LL_RCC_HSE_IsReady>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f1      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x1a8>
 8002ed0:	e013      	b.n	8002efa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe ff69 	bl	8001da8 <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eda:	f7fe ff65 	bl	8001da8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e298      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002eec:	f7ff fbc8 	bl	8002680 <LL_RCC_HSE_IsReady>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f1      	bne.n	8002eda <HAL_RCC_OscConfig+0x1ce>
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d051      	beq.n	8002faa <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f06:	f7ff fd9c 	bl	8002a42 <LL_RCC_GetSysClkSource>
 8002f0a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0c:	f7ff fe95 	bl	8002c3a <LL_RCC_PLL_GetMainSource>
 8002f10:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_OscConfig+0x218>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b0c      	cmp	r3, #12
 8002f1c:	d113      	bne.n	8002f46 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d110      	bne.n	8002f46 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f24:	f7ff fbdc 	bl	80026e0 <LL_RCC_HSI_IsReady>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x22e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e271      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fbe0 	bl	8002704 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f44:	e031      	b.n	8002faa <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d019      	beq.n	8002f82 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4e:	f7ff fba9 	bl	80026a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f52:	f7fe ff29 	bl	8001da8 <HAL_GetTick>
 8002f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5a:	f7fe ff25 	bl	8001da8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e258      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f6c:	f7ff fbb8 	bl	80026e0 <LL_RCC_HSI_IsReady>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f1      	beq.n	8002f5a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fbc2 	bl	8002704 <LL_RCC_HSI_SetCalibTrimming>
 8002f80:	e013      	b.n	8002faa <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	f7ff fb9e 	bl	80026c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe ff0f 	bl	8001da8 <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe ff0b 	bl	8001da8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e23e      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fa0:	f7ff fb9e 	bl	80026e0 <LL_RCC_HSI_IsReady>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f1      	bne.n	8002f8e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80a4 	beq.w	800310c <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d077      	beq.n	80030bc <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d04b      	beq.n	8003070 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002fd8:	f7ff fc55 	bl	8002886 <LL_RCC_LSI1_IsReady>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d113      	bne.n	800300a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002fe2:	f7ff fc2e 	bl	8002842 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe6:	f7fe fedf 	bl	8001da8 <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002fee:	f7fe fedb 	bl	8001da8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e20e      	b.n	800341e <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003000:	f7ff fc41 	bl	8002886 <LL_RCC_LSI1_IsReady>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f1      	beq.n	8002fee <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800300a:	f7ff fc4e 	bl	80028aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fecb 	bl	8001da8 <HAL_GetTick>
 8003012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003016:	f7fe fec7 	bl	8001da8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b03      	cmp	r3, #3
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1fa      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003028:	f7ff fc61 	bl	80028ee <LL_RCC_LSI2_IsReady>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f1      	beq.n	8003016 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fc6b 	bl	8002912 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800303c:	f7ff fc12 	bl	8002864 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe feb2 	bl	8001da8 <HAL_GetTick>
 8003044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003046:	e00d      	b.n	8003064 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003048:	f7fe feae 	bl	8001da8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d906      	bls.n	8003064 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1e1      	b.n	800341e <HAL_RCC_OscConfig+0x712>
 800305a:	bf00      	nop
 800305c:	20000008 	.word	0x20000008
 8003060:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003064:	f7ff fc0f 	bl	8002886 <LL_RCC_LSI1_IsReady>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ec      	bne.n	8003048 <HAL_RCC_OscConfig+0x33c>
 800306e:	e04d      	b.n	800310c <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003070:	f7ff fbe7 	bl	8002842 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fe98 	bl	8001da8 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800307c:	f7fe fe94 	bl	8001da8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1c7      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800308e:	f7ff fbfa 	bl	8002886 <LL_RCC_LSI1_IsReady>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f1      	beq.n	800307c <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003098:	f7ff fc18 	bl	80028cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800309e:	f7fe fe83 	bl	8001da8 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1b6      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030b0:	f7ff fc1d 	bl	80028ee <LL_RCC_LSI2_IsReady>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f1      	bne.n	800309e <HAL_RCC_OscConfig+0x392>
 80030ba:	e027      	b.n	800310c <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80030bc:	f7ff fc06 	bl	80028cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe fe72 	bl	8001da8 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030c8:	f7fe fe6e 	bl	8001da8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1a1      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030da:	f7ff fc08 	bl	80028ee <LL_RCC_LSI2_IsReady>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f1      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80030e4:	f7ff fbbe 	bl	8002864 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe fe5e 	bl	8001da8 <HAL_GetTick>
 80030ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030f0:	f7fe fe5a 	bl	8001da8 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e18d      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003102:	f7ff fbc0 	bl	8002886 <LL_RCC_LSI1_IsReady>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f1      	bne.n	80030f0 <HAL_RCC_OscConfig+0x3e4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05b      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003118:	4ba7      	ldr	r3, [pc, #668]	; (80033b8 <HAL_RCC_OscConfig+0x6ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d114      	bne.n	800314e <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003124:	f7ff fa5e 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003128:	f7fe fe3e 	bl	8001da8 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fe fe3a 	bl	8001da8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e16d      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	4b9d      	ldr	r3, [pc, #628]	; (80033b8 <HAL_RCC_OscConfig+0x6ac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_RCC_OscConfig+0x450>
 8003156:	f7ff fb1e 	bl	8002796 <LL_RCC_LSE_Enable>
 800315a:	e00c      	b.n	8003176 <HAL_RCC_OscConfig+0x46a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d104      	bne.n	800316e <HAL_RCC_OscConfig+0x462>
 8003164:	f7ff fb39 	bl	80027da <LL_RCC_LSE_EnableBypass>
 8003168:	f7ff fb15 	bl	8002796 <LL_RCC_LSE_Enable>
 800316c:	e003      	b.n	8003176 <HAL_RCC_OscConfig+0x46a>
 800316e:	f7ff fb23 	bl	80027b8 <LL_RCC_LSE_Disable>
 8003172:	f7ff fb43 	bl	80027fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d014      	beq.n	80031a8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fe13 	bl	8001da8 <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe fe0f 	bl	8001da8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e140      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 800319c:	f7ff fb3f 	bl	800281e <LL_RCC_LSE_IsReady>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ef      	beq.n	8003186 <HAL_RCC_OscConfig+0x47a>
 80031a6:	e013      	b.n	80031d0 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe fdfe 	bl	8001da8 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe fdfa 	bl	8001da8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e12b      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 80031c6:	f7ff fb2a 	bl	800281e <LL_RCC_LSE_IsReady>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ef      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02c      	beq.n	8003236 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d014      	beq.n	800320e <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031e4:	f7ff faa3 	bl	800272e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe fdde 	bl	8001da8 <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f0:	f7fe fdda 	bl	8001da8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e10d      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003202:	f7ff fab6 	bl	8002772 <LL_RCC_HSI48_IsReady>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f1      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4e4>
 800320c:	e013      	b.n	8003236 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800320e:	f7ff fa9f 	bl	8002750 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe fdc9 	bl	8001da8 <HAL_GetTick>
 8003216:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800321a:	f7fe fdc5 	bl	8001da8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0f8      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800322c:	f7ff faa1 	bl	8002772 <LL_RCC_HSI48_IsReady>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f1      	bne.n	800321a <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80ee 	beq.w	800341c <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003240:	f7ff fbff 	bl	8002a42 <LL_RCC_GetSysClkSource>
 8003244:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	2b02      	cmp	r3, #2
 8003254:	f040 80b4 	bne.w	80033c0 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0203 	and.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	429a      	cmp	r2, r3
 8003264:	d123      	bne.n	80032ae <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d11c      	bne.n	80032ae <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d114      	bne.n	80032ae <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d10d      	bne.n	80032ae <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d05d      	beq.n	800336a <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	d058      	beq.n	8003366 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0ab      	b.n	800341e <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032c6:	f7ff fc72 	bl	8002bae <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ca:	f7fe fd6d 	bl	8001da8 <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d2:	f7fe fd69 	bl	8001da8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e09c      	b.n	800341e <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ef      	bne.n	80032d2 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4b30      	ldr	r3, [pc, #192]	; (80033bc <HAL_RCC_OscConfig+0x6b0>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003304:	4311      	orrs	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800330a:	0212      	lsls	r2, r2, #8
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800331e:	430a      	orrs	r2, r1
 8003320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003324:	4313      	orrs	r3, r2
 8003326:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003328:	f7ff fc32 	bl	8002b90 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800333c:	f7fe fd34 	bl	8001da8 <HAL_GetTick>
 8003340:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fe fd30 	bl	8001da8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e063      	b.n	800341e <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003364:	e05a      	b.n	800341c <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e059      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d151      	bne.n	800341c <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003378:	f7ff fc0a 	bl	8002b90 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800338c:	f7fe fd0c 	bl	8001da8 <HAL_GetTick>
 8003390:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fd08 	bl	8001da8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e03b      	b.n	800341e <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ef      	beq.n	8003394 <HAL_RCC_OscConfig+0x688>
 80033b4:	e032      	b.n	800341c <HAL_RCC_OscConfig+0x710>
 80033b6:	bf00      	nop
 80033b8:	58000400 	.word	0x58000400
 80033bc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d028      	beq.n	8003418 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	f7ff fbf2 	bl	8002bae <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033d4:	f023 0303 	bic.w	r3, r3, #3
 80033d8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ee:	f7fe fcdb 	bl	8001da8 <HAL_GetTick>
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f6:	f7fe fcd7 	bl	8001da8 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ef      	bne.n	80033f6 <HAL_RCC_OscConfig+0x6ea>
 8003416:	e001      	b.n	800341c <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3734      	adds	r7, #52	; 0x34
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	bf00      	nop

08003428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e12d      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b98      	ldr	r3, [pc, #608]	; (80036a0 <HAL_RCC_ClockConfig+0x278>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d91b      	bls.n	8003482 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b95      	ldr	r3, [pc, #596]	; (80036a0 <HAL_RCC_ClockConfig+0x278>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 0207 	bic.w	r2, r3, #7
 8003452:	4993      	ldr	r1, [pc, #588]	; (80036a0 <HAL_RCC_ClockConfig+0x278>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345a:	f7fe fca5 	bl	8001da8 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003460:	e008      	b.n	8003474 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003462:	f7fe fca1 	bl	8001da8 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e111      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003474:	4b8a      	ldr	r3, [pc, #552]	; (80036a0 <HAL_RCC_ClockConfig+0x278>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d1ef      	bne.n	8003462 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fae1 	bl	8002a5a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003498:	f7fe fc86 	bl	8001da8 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034a0:	f7fe fc82 	bl	8001da8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0f2      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034b2:	f7ff fbce 	bl	8002c52 <LL_RCC_IsActiveFlag_HPRE>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f1      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d016      	beq.n	80034f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fad8 	bl	8002a82 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034d2:	f7fe fc69 	bl	8001da8 <HAL_GetTick>
 80034d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034da:	f7fe fc65 	bl	8001da8 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0d5      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034ec:	f7ff fbc3 	bl	8002c76 <LL_RCC_IsActiveFlag_C2HPRE>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f1      	beq.n	80034da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fad1 	bl	8002aae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800350c:	f7fe fc4c 	bl	8001da8 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003514:	f7fe fc48 	bl	8001da8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0b8      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003526:	f7ff fbb9 	bl	8002c9c <LL_RCC_IsActiveFlag_SHDHPRE>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f1      	beq.n	8003514 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d016      	beq.n	800356a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff facb 	bl	8002adc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003546:	f7fe fc2f 	bl	8001da8 <HAL_GetTick>
 800354a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800354e:	f7fe fc2b 	bl	8001da8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e09b      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003560:	f7ff fbaf 	bl	8002cc2 <LL_RCC_IsActiveFlag_PPRE1>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f1      	beq.n	800354e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fac1 	bl	8002b04 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003582:	f7fe fc11 	bl	8001da8 <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800358a:	f7fe fc0d 	bl	8001da8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e07d      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800359c:	f7ff fba3 	bl	8002ce6 <LL_RCC_IsActiveFlag_PPRE2>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f1      	beq.n	800358a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d043      	beq.n	800363a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d106      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035ba:	f7ff f861 	bl	8002680 <LL_RCC_HSE_IsReady>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11e      	bne.n	8003602 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e067      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d106      	bne.n	80035de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035d0:	f7ff fafc 	bl	8002bcc <LL_RCC_PLL_IsReady>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d113      	bne.n	8003602 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e05c      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035e6:	f7ff f9c9 	bl	800297c <LL_RCC_MSI_IsReady>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d108      	bne.n	8003602 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e051      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035f4:	f7ff f874 	bl	80026e0 <LL_RCC_HSI_IsReady>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e04a      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fa07 	bl	8002a1a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fe fbcc 	bl	8001da8 <HAL_GetTick>
 8003610:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	e00a      	b.n	800362a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fe fbc8 	bl	8001da8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e036      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	f7ff fa0a 	bl	8002a42 <LL_RCC_GetSysClkSource>
 800362e:	4602      	mov	r2, r0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	429a      	cmp	r2, r3
 8003638:	d1ec      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_ClockConfig+0x278>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d21b      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_RCC_ClockConfig+0x278>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 0207 	bic.w	r2, r3, #7
 8003650:	4913      	ldr	r1, [pc, #76]	; (80036a0 <HAL_RCC_ClockConfig+0x278>)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fe fba6 	bl	8001da8 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	e008      	b.n	8003672 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003660:	f7fe fba2 	bl	8001da8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e012      	b.n	8003698 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x278>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d1ef      	bne.n	8003660 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003680:	f000 f87e 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 8003684:	4603      	mov	r3, r0
 8003686:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <HAL_RCC_ClockConfig+0x27c>)
 8003688:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800368a:	f7fe fb99 	bl	8001dc0 <HAL_GetTickPrio>
 800368e:	4603      	mov	r3, r0
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe fb3b 	bl	8001d0c <HAL_InitTick>
 8003696:	4603      	mov	r3, r0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	58004000 	.word	0x58004000
 80036a4:	20000008 	.word	0x20000008

080036a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ae:	f7ff f9c8 	bl	8002a42 <LL_RCC_GetSysClkSource>
 80036b2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036ba:	f7ff f984 	bl	80029c6 <LL_RCC_MSI_GetRange>
 80036be:	4603      	mov	r3, r0
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e04b      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d102      	bne.n	80036dc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036d6:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e045      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d10a      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036e2:	f7fe ff9d 	bl	8002620 <LL_RCC_HSE_IsEnabledDiv2>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d102      	bne.n	80036f2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e03a      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036f2:	4b22      	ldr	r3, [pc, #136]	; (800377c <HAL_RCC_GetSysClockFreq+0xd4>)
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e037      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036f8:	f7ff fa9f 	bl	8002c3a <LL_RCC_PLL_GetMainSource>
 80036fc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d003      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x64>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x6a>
 800370a:	e00d      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCC_GetSysClockFreq+0xd0>)
 800370e:	60bb      	str	r3, [r7, #8]
        break;
 8003710:	e015      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003712:	f7fe ff85 	bl	8002620 <LL_RCC_HSE_IsEnabledDiv2>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_RCC_GetSysClockFreq+0xd0>)
 800371e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003720:	e00d      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003722:	4b16      	ldr	r3, [pc, #88]	; (800377c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003724:	60bb      	str	r3, [r7, #8]
        break;
 8003726:	e00a      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003728:	f7ff f94d 	bl	80029c6 <LL_RCC_MSI_GetRange>
 800372c:	4603      	mov	r3, r0
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373a:	60bb      	str	r3, [r7, #8]
        break;
 800373c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800373e:	f7ff fa57 	bl	8002bf0 <LL_RCC_PLL_GetN>
 8003742:	4602      	mov	r2, r0
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	fb03 f402 	mul.w	r4, r3, r2
 800374a:	f7ff fa6a 	bl	8002c22 <LL_RCC_PLL_GetDivider>
 800374e:	4603      	mov	r3, r0
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	3301      	adds	r3, #1
 8003754:	fbb4 f4f3 	udiv	r4, r4, r3
 8003758:	f7ff fa57 	bl	8002c0a <LL_RCC_PLL_GetR>
 800375c:	4603      	mov	r3, r0
 800375e:	0f5b      	lsrs	r3, r3, #29
 8003760:	3301      	adds	r3, #1
 8003762:	fbb4 f3f3 	udiv	r3, r4, r3
 8003766:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003768:	68fb      	ldr	r3, [r7, #12]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bd90      	pop	{r4, r7, pc}
 8003772:	bf00      	nop
 8003774:	08011018 	.word	0x08011018
 8003778:	00f42400 	.word	0x00f42400
 800377c:	01e84800 	.word	0x01e84800

08003780 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b598      	push	{r3, r4, r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003784:	f7ff ff90 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8003788:	4604      	mov	r4, r0
 800378a:	f7ff f9cf 	bl	8002b2c <LL_RCC_GetAHBPrescaler>
 800378e:	4603      	mov	r3, r0
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	4a03      	ldr	r2, [pc, #12]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd98      	pop	{r3, r4, r7, pc}
 80037a4:	08010fb8 	.word	0x08010fb8

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b598      	push	{r3, r4, r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037ac:	f7ff ffe8 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037b0:	4604      	mov	r4, r0
 80037b2:	f7ff f9d5 	bl	8002b60 <LL_RCC_GetAPB1Prescaler>
 80037b6:	4603      	mov	r3, r0
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd98      	pop	{r3, r4, r7, pc}
 80037d0:	08010ff8 	.word	0x08010ff8

080037d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d4:	b598      	push	{r3, r4, r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037d8:	f7ff ffd2 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037dc:	4604      	mov	r4, r0
 80037de:	f7ff f9cb 	bl	8002b78 <LL_RCC_GetAPB2Prescaler>
 80037e2:	4603      	mov	r3, r0
 80037e4:	0adb      	lsrs	r3, r3, #11
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd98      	pop	{r3, r4, r7, pc}
 80037fc:	08010ff8 	.word	0x08010ff8

08003800 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2bb0      	cmp	r3, #176	; 0xb0
 800380c:	d903      	bls.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e007      	b.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	4a11      	ldr	r2, [pc, #68]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003824:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003826:	f7ff f98d 	bl	8002b44 <LL_RCC_GetAHB4Prescaler>
 800382a:	4603      	mov	r3, r0
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	0c9c      	lsrs	r4, r3, #18
 800384a:	f7fe fedb 	bl	8002604 <HAL_PWREx_GetVoltageRange>
 800384e:	4603      	mov	r3, r0
 8003850:	4619      	mov	r1, r3
 8003852:	4620      	mov	r0, r4
 8003854:	f000 f80c 	bl	8003870 <RCC_SetFlashLatency>
 8003858:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bd90      	pop	{r4, r7, pc}
 8003862:	bf00      	nop
 8003864:	08011018 	.word	0x08011018
 8003868:	08010fb8 	.word	0x08010fb8
 800386c:	431bde83 	.word	0x431bde83

08003870 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b093      	sub	sp, #76	; 0x4c
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <RCC_SetFlashLatency+0xe8>)
 800387c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003886:	4a35      	ldr	r2, [pc, #212]	; (800395c <RCC_SetFlashLatency+0xec>)
 8003888:	f107 031c 	add.w	r3, r7, #28
 800388c:	ca07      	ldmia	r2, {r0, r1, r2}
 800388e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003892:	4b33      	ldr	r3, [pc, #204]	; (8003960 <RCC_SetFlashLatency+0xf0>)
 8003894:	f107 040c 	add.w	r4, r7, #12
 8003898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800389a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800389e:	2300      	movs	r3, #0
 80038a0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d11a      	bne.n	80038e0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	643b      	str	r3, [r7, #64]	; 0x40
 80038ae:	e013      	b.n	80038d8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	3348      	adds	r3, #72	; 0x48
 80038b6:	443b      	add	r3, r7
 80038b8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d807      	bhi.n	80038d2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	3348      	adds	r3, #72	; 0x48
 80038c8:	443b      	add	r3, r7
 80038ca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80038d0:	e020      	b.n	8003914 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d4:	3301      	adds	r3, #1
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40
 80038d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d9e8      	bls.n	80038b0 <RCC_SetFlashLatency+0x40>
 80038de:	e019      	b.n	8003914 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e4:	e013      	b.n	800390e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	3348      	adds	r3, #72	; 0x48
 80038ec:	443b      	add	r3, r7
 80038ee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d807      	bhi.n	8003908 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	3348      	adds	r3, #72	; 0x48
 80038fe:	443b      	add	r3, r7
 8003900:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003906:	e005      	b.n	8003914 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390a:	3301      	adds	r3, #1
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800390e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003910:	2b02      	cmp	r3, #2
 8003912:	d9e8      	bls.n	80038e6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <RCC_SetFlashLatency+0xf4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 0207 	bic.w	r2, r3, #7
 800391c:	4911      	ldr	r1, [pc, #68]	; (8003964 <RCC_SetFlashLatency+0xf4>)
 800391e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003924:	f7fe fa40 	bl	8001da8 <HAL_GetTick>
 8003928:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800392a:	e008      	b.n	800393e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800392c:	f7fe fa3c 	bl	8001da8 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e007      	b.n	800394e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <RCC_SetFlashLatency+0xf4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003948:	429a      	cmp	r2, r3
 800394a:	d1ef      	bne.n	800392c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	374c      	adds	r7, #76	; 0x4c
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop
 8003958:	0800f58c 	.word	0x0800f58c
 800395c:	0800f59c 	.word	0x0800f59c
 8003960:	0800f5a8 	.word	0x0800f5a8
 8003964:	58004000 	.word	0x58004000

08003968 <LL_RCC_LSE_IsEnabled>:
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <LL_RCC_LSE_IsEnabled+0x18>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <LL_RCC_LSE_IsEnabled+0x1a>
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_RCC_LSE_IsReady>:
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d101      	bne.n	80039a4 <LL_RCC_LSE_IsReady+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_RCC_LSE_IsReady+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <LL_RCC_MSI_EnablePLLMode>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039be:	f043 0304 	orr.w	r3, r3, #4
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <LL_RCC_SetRFWKPClockSource>:
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_RCC_SetSMPSClockSource>:
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	f023 0203 	bic.w	r2, r3, #3
 8003a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_RCC_SetSMPSPrescaler>:
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_RCC_SetUSARTClockSource>:
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_RCC_SetLPUARTClockSource>:
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_SetI2CClockSource>:
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003aba:	43db      	mvns	r3, r3
 8003abc:	401a      	ands	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_RCC_SetLPTIMClockSource>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	43db      	mvns	r3, r3
 8003af4:	401a      	ands	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_RCC_SetSAIClockSource>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_RCC_SetRNGClockSource>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_SetCLK48ClockSource>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_RCC_SetUSBClockSource>:
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ffe3 	bl	8003b68 <LL_RCC_SetCLK48ClockSource>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <LL_RCC_SetADCClockSource>:
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_RCC_SetRTCClockSource>:
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_RCC_GetRTCClockSource>:
{
 8003c02:	b480      	push	{r7}
 8003c04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_RCC_ForceBackupDomainReset>:
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c56:	bf00      	nop
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_RCC_PLLSAI1_Enable>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c72:	6013      	str	r3, [r2, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_RCC_PLLSAI1_Disable>:
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c90:	6013      	str	r3, [r2, #0]
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_PLLSAI1_IsReady>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cae:	d101      	bne.n	8003cb4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003cc8:	2300      	movs	r3, #0
 8003cca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ccc:	2300      	movs	r3, #0
 8003cce:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d034      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ce4:	d021      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003ce6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cea:	d81b      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cf0:	d01d      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cf6:	d815      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d00:	d110      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d12:	e00d      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f94d 	bl	8003fb8 <RCCEx_PLLSAI1_ConfigNP>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d22:	e005      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]
        break;
 8003d28:	e002      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d30:	7ffb      	ldrb	r3, [r7, #31]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff fee8 	bl	8003b10 <LL_RCC_SetSAIClockSource>
 8003d40:	e001      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
 8003d44:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d046      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003d52:	f7ff ff56 	bl	8003c02 <LL_RCC_GetRTCClockSource>
 8003d56:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d03c      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d62:	f7fe fc3f 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff30 	bl	8003bd6 <LL_RCC_SetRTCClockSource>
 8003d76:	e02e      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003d82:	f7ff ff4b 	bl	8003c1c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d86:	f7ff ff5a 	bl	8003c3e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003da2:	f7ff fde1 	bl	8003968 <LL_RCC_LSE_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d114      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dac:	f7fd fffc 	bl	8001da8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003db2:	e00b      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db4:	f7fd fff8 	bl	8001da8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d902      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	77fb      	strb	r3, [r7, #31]
              break;
 8003dca:	e004      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003dcc:	f7ff fdde 	bl	800398c <LL_RCC_LSE_IsReady>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d1ee      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	77bb      	strb	r3, [r7, #30]
 8003dda:	e001      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7ffb      	ldrb	r3, [r7, #31]
 8003dde:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fe2a 	bl	8003a4a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fe35 	bl	8003a76 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fe5d 	bl	8003adc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fe52 	bl	8003adc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fe2a 	bl	8003aa2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fe1f 	bl	8003aa2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d022      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fe8d 	bl	8003b94 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e82:	d107      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f8e3 	bl	800406e <RCCEx_PLLSAI1_ConfigNQ>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003eac:	7ffb      	ldrb	r3, [r7, #31]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003eb2:	7ffb      	ldrb	r3, [r7, #31]
 8003eb4:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02b      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d008      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ed4:	d003      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fe2a 	bl	8003b3c <LL_RCC_SetRNGClockSource>
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f7ff fe21 	bl	8003b3c <LL_RCC_SetRNGClockSource>
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fe34 	bl	8003b68 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003f08:	d107      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f18:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d022      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fe3d 	bl	8003baa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f38:	d107      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f8e3 	bl	8004124 <RCCEx_PLLSAI1_ConfigNR>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003f62:	7ffb      	ldrb	r3, [r7, #31]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fd26 	bl	80039ce <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fd45 	bl	8003a22 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fd2c 	bl	80039fa <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003fa2:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003fb0:	f7ff fcfe 	bl	80039b0 <LL_RCC_MSI_EnablePLLMode>
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fc4:	f7ff fe5b 	bl	8003c7e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fc8:	f7fd feee 	bl	8001da8 <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fce:	e009      	b.n	8003fe4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd0:	f7fd feea 	bl	8001da8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d902      	bls.n	8003fe4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe2:	e004      	b.n	8003fee <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fe4:	f7ff fe5a 	bl	8003c9c <LL_RCC_PLLSAI1_IsReady>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d137      	bne.n	8004064 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004008:	4313      	orrs	r3, r2
 800400a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800401e:	4313      	orrs	r3, r2
 8004020:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004022:	f7ff fe1d 	bl	8003c60 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004026:	f7fd febf 	bl	8001da8 <HAL_GetTick>
 800402a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800402c:	e009      	b.n	8004042 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800402e:	f7fd febb 	bl	8001da8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d902      	bls.n	8004042 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	73fb      	strb	r3, [r7, #15]
        break;
 8004040:	e004      	b.n	800404c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004042:	f7ff fe2b 	bl	8003c9c <LL_RCC_PLLSAI1_IsReady>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d1f0      	bne.n	800402e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004060:	4313      	orrs	r3, r2
 8004062:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800407a:	f7ff fe00 	bl	8003c7e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800407e:	f7fd fe93 	bl	8001da8 <HAL_GetTick>
 8004082:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004084:	e009      	b.n	800409a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004086:	f7fd fe8f 	bl	8001da8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d902      	bls.n	800409a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	73fb      	strb	r3, [r7, #15]
      break;
 8004098:	e004      	b.n	80040a4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800409a:	f7ff fdff 	bl	8003c9c <LL_RCC_PLLSAI1_IsReady>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d137      	bne.n	800411a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80040c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d4:	4313      	orrs	r3, r2
 80040d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040d8:	f7ff fdc2 	bl	8003c60 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040dc:	f7fd fe64 	bl	8001da8 <HAL_GetTick>
 80040e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040e2:	e009      	b.n	80040f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e4:	f7fd fe60 	bl	8001da8 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d902      	bls.n	80040f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	73fb      	strb	r3, [r7, #15]
        break;
 80040f6:	e004      	b.n	8004102 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040f8:	f7ff fdd0 	bl	8003c9c <LL_RCC_PLLSAI1_IsReady>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d1f0      	bne.n	80040e4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d108      	bne.n	800411a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004116:	4313      	orrs	r3, r2
 8004118:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004130:	f7ff fda5 	bl	8003c7e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004134:	f7fd fe38 	bl	8001da8 <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800413a:	e009      	b.n	8004150 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800413c:	f7fd fe34 	bl	8001da8 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d902      	bls.n	8004150 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	73fb      	strb	r3, [r7, #15]
      break;
 800414e:	e004      	b.n	800415a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004150:	f7ff fda4 	bl	8003c9c <LL_RCC_PLLSAI1_IsReady>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d137      	bne.n	80041d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004174:	4313      	orrs	r3, r2
 8004176:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800418a:	4313      	orrs	r3, r2
 800418c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800418e:	f7ff fd67 	bl	8003c60 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004192:	f7fd fe09 	bl	8001da8 <HAL_GetTick>
 8004196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004198:	e009      	b.n	80041ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800419a:	f7fd fe05 	bl	8001da8 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d902      	bls.n	80041ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	73fb      	strb	r3, [r7, #15]
        break;
 80041ac:	e004      	b.n	80041b8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041ae:	f7ff fd75 	bl	8003c9c <LL_RCC_PLLSAI1_IsReady>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d1f0      	bne.n	800419a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e095      	b.n	8004318 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d108      	bne.n	8004206 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fc:	d009      	beq.n	8004212 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	61da      	str	r2, [r3, #28]
 8004204:	e005      	b.n	8004212 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fd fb3b 	bl	80018a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004248:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004252:	d902      	bls.n	800425a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e002      	b.n	8004260 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800425a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004268:	d007      	beq.n	800427a <HAL_SPI_Init+0xa0>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004272:	d002      	beq.n	800427a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	ea42 0103 	orr.w	r1, r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0204 	and.w	r2, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042f6:	ea42 0103 	orr.w	r1, r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800432e:	2301      	movs	r3, #1
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x26>
 8004342:	2302      	movs	r3, #2
 8004344:	e1fb      	b.n	800473e <HAL_SPI_TransmitReceive+0x41e>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800434e:	f7fd fd2b 	bl	8001da8 <HAL_GetTick>
 8004352:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800435a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800436a:	7efb      	ldrb	r3, [r7, #27]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d00e      	beq.n	800438e <HAL_SPI_TransmitReceive+0x6e>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004376:	d106      	bne.n	8004386 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <HAL_SPI_TransmitReceive+0x66>
 8004380:	7efb      	ldrb	r3, [r7, #27]
 8004382:	2b04      	cmp	r3, #4
 8004384:	d003      	beq.n	800438e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004386:	2302      	movs	r3, #2
 8004388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800438c:	e1cd      	b.n	800472a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x80>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x80>
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d103      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043a6:	e1c0      	b.n	800472a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d003      	beq.n	80043bc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2205      	movs	r2, #5
 80043b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043fe:	d802      	bhi.n	8004406 <HAL_SPI_TransmitReceive+0xe6>
 8004400:	8a3b      	ldrh	r3, [r7, #16]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d908      	bls.n	8004418 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e007      	b.n	8004428 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004426:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d007      	beq.n	8004446 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800444e:	d97c      	bls.n	800454a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_SPI_TransmitReceive+0x13e>
 8004458:	8a7b      	ldrh	r3, [r7, #18]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d169      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	881a      	ldrh	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004482:	e056      	b.n	8004532 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d11b      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x1aa>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d016      	beq.n	80044ca <HAL_SPI_TransmitReceive+0x1aa>
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d113      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	881a      	ldrh	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	1c9a      	adds	r2, r3, #2
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d11c      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x1f2>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d016      	beq.n	8004512 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	b292      	uxth	r2, r2
 80044f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	1c9a      	adds	r2, r3, #2
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800450e:	2301      	movs	r3, #1
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004512:	f7fd fc49 	bl	8001da8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	429a      	cmp	r2, r3
 8004520:	d807      	bhi.n	8004532 <HAL_SPI_TransmitReceive+0x212>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d003      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004530:	e0fb      	b.n	800472a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1a3      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x164>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d19d      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x164>
 8004548:	e0df      	b.n	800470a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_SPI_TransmitReceive+0x23a>
 8004552:	8a7b      	ldrh	r3, [r7, #18]
 8004554:	2b01      	cmp	r3, #1
 8004556:	f040 80cb 	bne.w	80046f0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d912      	bls.n	800458a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	881a      	ldrh	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	1c9a      	adds	r2, r3, #2
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b02      	subs	r3, #2
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004588:	e0b2      	b.n	80046f0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	7812      	ldrb	r2, [r2, #0]
 8004596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b0:	e09e      	b.n	80046f0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d134      	bne.n	800462a <HAL_SPI_TransmitReceive+0x30a>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d02f      	beq.n	800462a <HAL_SPI_TransmitReceive+0x30a>
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d12c      	bne.n	800462a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d912      	bls.n	8004600 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	881a      	ldrh	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	1c9a      	adds	r2, r3, #2
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b02      	subs	r3, #2
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045fe:	e012      	b.n	8004626 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	7812      	ldrb	r2, [r2, #0]
 800460c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d148      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x3aa>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d042      	beq.n	80046ca <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d923      	bls.n	8004698 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	b292      	uxth	r2, r2
 800465c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	1c9a      	adds	r2, r3, #2
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b02      	subs	r3, #2
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d81f      	bhi.n	80046c6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	e016      	b.n	80046c6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f103 020c 	add.w	r2, r3, #12
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c6:	2301      	movs	r3, #1
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046ca:	f7fd fb6d 	bl	8001da8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d803      	bhi.n	80046e2 <HAL_SPI_TransmitReceive+0x3c2>
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d102      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x3c8>
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046ee:	e01c      	b.n	800472a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f47f af5b 	bne.w	80045b2 <HAL_SPI_TransmitReceive+0x292>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	f47f af54 	bne.w	80045b2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f930 	bl	8004974 <SPI_EndRxTxTransaction>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	661a      	str	r2, [r3, #96]	; 0x60
 8004726:	e000      	b.n	800472a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004728:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800473a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800473e:	4618      	mov	r0, r3
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004758:	f7fd fb26 	bl	8001da8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	4413      	add	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004768:	f7fd fb1e 	bl	8001da8 <HAL_GetTick>
 800476c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800476e:	4b39      	ldr	r3, [pc, #228]	; (8004854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	015b      	lsls	r3, r3, #5
 8004774:	0d1b      	lsrs	r3, r3, #20
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	fb02 f303 	mul.w	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800477e:	e054      	b.n	800482a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004786:	d050      	beq.n	800482a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004788:	f7fd fb0e 	bl	8001da8 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	429a      	cmp	r2, r3
 8004796:	d902      	bls.n	800479e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d13d      	bne.n	800481a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b6:	d111      	bne.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c0:	d004      	beq.n	80047cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ca:	d107      	bne.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e4:	d10f      	bne.n	8004806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e017      	b.n	800484a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3b01      	subs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d19b      	bne.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000008 	.word	0x20000008

08004858 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004866:	f7fd fa9f 	bl	8001da8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	4413      	add	r3, r2
 8004874:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004876:	f7fd fa97 	bl	8001da8 <HAL_GetTick>
 800487a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800487c:	4b3c      	ldr	r3, [pc, #240]	; (8004970 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	00da      	lsls	r2, r3, #3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	0d1b      	lsrs	r3, r3, #20
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004894:	e05f      	b.n	8004956 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800489c:	d106      	bne.n	80048ac <SPI_WaitFifoStateUntilTimeout+0x54>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d103      	bne.n	80048ac <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d050      	beq.n	8004956 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048b4:	f7fd fa78 	bl	8001da8 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d902      	bls.n	80048ca <SPI_WaitFifoStateUntilTimeout+0x72>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d13d      	bne.n	8004946 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e2:	d111      	bne.n	8004908 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ec:	d004      	beq.n	80048f8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f6:	d107      	bne.n	8004908 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004910:	d10f      	bne.n	8004932 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e010      	b.n	8004968 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	3b01      	subs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d197      	bne.n	8004896 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000008 	.word	0x20000008

08004974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff ff63 	bl	8004858 <SPI_WaitFifoStateUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e027      	b.n	80049f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2200      	movs	r2, #0
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff fec8 	bl	8004748 <SPI_WaitFlagStateUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e014      	b.n	80049f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff ff3c 	bl	8004858 <SPI_WaitFifoStateUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e000      	b.n	80049f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <LL_RCC_GetUSARTClockSource>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4013      	ands	r3, r2
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_RCC_GetLPUARTClockSource>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4013      	ands	r3, r2
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e042      	b.n	8004ad8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fc ff4f 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2224      	movs	r2, #36	; 0x24
 8004a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8c2 	bl	8004c0c <UART_SetConfig>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e022      	b.n	8004ad8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fade 	bl	800505c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fb65 	bl	80051a0 <UART_CheckIdleState>
 8004ad6:	4603      	mov	r3, r0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	f040 8083 	bne.w	8004c02 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_UART_Transmit+0x28>
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e07b      	b.n	8004c04 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Transmit+0x3a>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e074      	b.n	8004c04 <HAL_UART_Transmit+0x124>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2221      	movs	r2, #33	; 0x21
 8004b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b32:	f7fd f939 	bl	8001da8 <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b50:	d108      	bne.n	8004b64 <HAL_UART_Transmit+0x84>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e003      	b.n	8004b6c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b74:	e02c      	b.n	8004bd0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2180      	movs	r1, #128	; 0x80
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fb58 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e039      	b.n	8004c04 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10b      	bne.n	8004bae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	3302      	adds	r3, #2
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	e007      	b.n	8004bbe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1cc      	bne.n	8004b76 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2140      	movs	r1, #64	; 0x40
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fb25 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e006      	b.n	8004c04 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c10:	b08c      	sub	sp, #48	; 0x30
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4baf      	ldr	r3, [pc, #700]	; (8004ef8 <UART_SetConfig+0x2ec>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4aa4      	ldr	r2, [pc, #656]	; (8004efc <UART_SetConfig+0x2f0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	4313      	orrs	r3, r2
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f023 010f 	bic.w	r1, r3, #15
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a95      	ldr	r2, [pc, #596]	; (8004f00 <UART_SetConfig+0x2f4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d125      	bne.n	8004cfc <UART_SetConfig+0xf0>
 8004cb0:	2003      	movs	r0, #3
 8004cb2:	f7ff fea5 	bl	8004a00 <LL_RCC_GetUSARTClockSource>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d81b      	bhi.n	8004cf4 <UART_SetConfig+0xe8>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0xb8>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004ce5 	.word	0x08004ce5
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004ced 	.word	0x08004ced
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cda:	e042      	b.n	8004d62 <UART_SetConfig+0x156>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce2:	e03e      	b.n	8004d62 <UART_SetConfig+0x156>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cea:	e03a      	b.n	8004d62 <UART_SetConfig+0x156>
 8004cec:	2308      	movs	r3, #8
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf2:	e036      	b.n	8004d62 <UART_SetConfig+0x156>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfa:	e032      	b.n	8004d62 <UART_SetConfig+0x156>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a7e      	ldr	r2, [pc, #504]	; (8004efc <UART_SetConfig+0x2f0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d12a      	bne.n	8004d5c <UART_SetConfig+0x150>
 8004d06:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004d0a:	f7ff fe89 	bl	8004a20 <LL_RCC_GetLPUARTClockSource>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d14:	d01a      	beq.n	8004d4c <UART_SetConfig+0x140>
 8004d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d1a:	d81b      	bhi.n	8004d54 <UART_SetConfig+0x148>
 8004d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d20:	d00c      	beq.n	8004d3c <UART_SetConfig+0x130>
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d26:	d815      	bhi.n	8004d54 <UART_SetConfig+0x148>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <UART_SetConfig+0x128>
 8004d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d30:	d008      	beq.n	8004d44 <UART_SetConfig+0x138>
 8004d32:	e00f      	b.n	8004d54 <UART_SetConfig+0x148>
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3a:	e012      	b.n	8004d62 <UART_SetConfig+0x156>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d42:	e00e      	b.n	8004d62 <UART_SetConfig+0x156>
 8004d44:	2304      	movs	r3, #4
 8004d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4a:	e00a      	b.n	8004d62 <UART_SetConfig+0x156>
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d52:	e006      	b.n	8004d62 <UART_SetConfig+0x156>
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5a:	e002      	b.n	8004d62 <UART_SetConfig+0x156>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a65      	ldr	r2, [pc, #404]	; (8004efc <UART_SetConfig+0x2f0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	f040 8097 	bne.w	8004e9c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d823      	bhi.n	8004dbe <UART_SetConfig+0x1b2>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <UART_SetConfig+0x170>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004dbf 	.word	0x08004dbf
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004dbf 	.word	0x08004dbf
 8004d8c:	08004daf 	.word	0x08004daf
 8004d90:	08004dbf 	.word	0x08004dbf
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004dbf 	.word	0x08004dbf
 8004d9c:	08004db7 	.word	0x08004db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da0:	f7fe fd02 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8004da4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004da6:	e010      	b.n	8004dca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da8:	4b56      	ldr	r3, [pc, #344]	; (8004f04 <UART_SetConfig+0x2f8>)
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dac:	e00d      	b.n	8004dca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dae:	f7fe fc7b 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004db2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004db4:	e009      	b.n	8004dca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dbc:	e005      	b.n	8004dca <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 812b 	beq.w	8005028 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	4a4c      	ldr	r2, [pc, #304]	; (8004f08 <UART_SetConfig+0x2fc>)
 8004dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d305      	bcc.n	8004e02 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d903      	bls.n	8004e0a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e08:	e10e      	b.n	8005028 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	60fa      	str	r2, [r7, #12]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	4a3c      	ldr	r2, [pc, #240]	; (8004f08 <UART_SetConfig+0x2fc>)
 8004e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2200      	movs	r2, #0
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e2c:	f7fb fe94 	bl	8000b58 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4610      	mov	r0, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	020b      	lsls	r3, r1, #8
 8004e42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e46:	0202      	lsls	r2, r0, #8
 8004e48:	6979      	ldr	r1, [r7, #20]
 8004e4a:	6849      	ldr	r1, [r1, #4]
 8004e4c:	0849      	lsrs	r1, r1, #1
 8004e4e:	2000      	movs	r0, #0
 8004e50:	460c      	mov	r4, r1
 8004e52:	4605      	mov	r5, r0
 8004e54:	eb12 0804 	adds.w	r8, r2, r4
 8004e58:	eb43 0905 	adc.w	r9, r3, r5
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	469a      	mov	sl, r3
 8004e64:	4693      	mov	fp, r2
 8004e66:	4652      	mov	r2, sl
 8004e68:	465b      	mov	r3, fp
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	f7fb fe73 	bl	8000b58 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4613      	mov	r3, r2
 8004e78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e80:	d308      	bcc.n	8004e94 <UART_SetConfig+0x288>
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e88:	d204      	bcs.n	8004e94 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a3a      	ldr	r2, [r7, #32]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e0c9      	b.n	8005028 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e9a:	e0c5      	b.n	8005028 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea4:	d16e      	bne.n	8004f84 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	2b07      	cmp	r3, #7
 8004eae:	d82d      	bhi.n	8004f0c <UART_SetConfig+0x300>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x2ac>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004ed9 	.word	0x08004ed9
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004f0d 	.word	0x08004f0d
 8004ec4:	08004ee7 	.word	0x08004ee7
 8004ec8:	08004f0d 	.word	0x08004f0d
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004f0d 	.word	0x08004f0d
 8004ed4:	08004eef 	.word	0x08004eef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed8:	f7fe fc7c 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ede:	e01b      	b.n	8004f18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee0:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <UART_SetConfig+0x2f8>)
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ee4:	e018      	b.n	8004f18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee6:	f7fe fbdf 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eec:	e014      	b.n	8004f18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef4:	e010      	b.n	8004f18 <UART_SetConfig+0x30c>
 8004ef6:	bf00      	nop
 8004ef8:	cfff69f3 	.word	0xcfff69f3
 8004efc:	40008000 	.word	0x40008000
 8004f00:	40013800 	.word	0x40013800
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	08011058 	.word	0x08011058
      default:
        pclk = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8084 	beq.w	8005028 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	4a4b      	ldr	r2, [pc, #300]	; (8005054 <UART_SetConfig+0x448>)
 8004f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f32:	005a      	lsls	r2, r3, #1
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	441a      	add	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2b0f      	cmp	r3, #15
 8004f4c:	d916      	bls.n	8004f7c <UART_SetConfig+0x370>
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d212      	bcs.n	8004f7c <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f023 030f 	bic.w	r3, r3, #15
 8004f5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	8bfb      	ldrh	r3, [r7, #30]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	8bfa      	ldrh	r2, [r7, #30]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	e055      	b.n	8005028 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f82:	e051      	b.n	8005028 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	2b07      	cmp	r3, #7
 8004f8c:	d821      	bhi.n	8004fd2 <UART_SetConfig+0x3c6>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0x388>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fb5 	.word	0x08004fb5
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fd3 	.word	0x08004fd3
 8004fa0:	08004fc3 	.word	0x08004fc3
 8004fa4:	08004fd3 	.word	0x08004fd3
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fd3 	.word	0x08004fd3
 8004fb0:	08004fcb 	.word	0x08004fcb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7fe fc0e 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fba:	e010      	b.n	8004fde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fbc:	4b26      	ldr	r3, [pc, #152]	; (8005058 <UART_SetConfig+0x44c>)
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fc0:	e00d      	b.n	8004fde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc2:	f7fe fb71 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004fc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fc8:	e009      	b.n	8004fde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fd0:	e005      	b.n	8004fde <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d021      	beq.n	8005028 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <UART_SetConfig+0x448>)
 8004fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	441a      	add	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	b29b      	uxth	r3, r3
 8005008:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	2b0f      	cmp	r3, #15
 800500e:	d908      	bls.n	8005022 <UART_SetConfig+0x416>
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005016:	d204      	bcs.n	8005022 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a3a      	ldr	r2, [r7, #32]
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	e002      	b.n	8005028 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2201      	movs	r2, #1
 800502c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2201      	movs	r2, #1
 8005034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2200      	movs	r2, #0
 800503c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005044:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005048:	4618      	mov	r0, r3
 800504a:	3730      	adds	r7, #48	; 0x30
 800504c:	46bd      	mov	sp, r7
 800504e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005052:	bf00      	nop
 8005054:	08011058 	.word	0x08011058
 8005058:	00f42400 	.word	0x00f42400

0800505c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01a      	beq.n	8005172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515a:	d10a      	bne.n	8005172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b0:	f7fc fdfa 	bl	8001da8 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d10e      	bne.n	80051e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f82f 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e025      	b.n	800522e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d10e      	bne.n	800520e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f819 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e00f      	b.n	800522e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	603b      	str	r3, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005246:	e062      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d05e      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005250:	f7fc fdaa 	bl	8001da8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	429a      	cmp	r2, r3
 800525e:	d302      	bcc.n	8005266 <UART_WaitOnFlagUntilTimeout+0x30>
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11d      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005274:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e045      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02e      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052be:	d126      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e00f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d08d      	beq.n	8005248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_UARTEx_DisableFifoMode+0x16>
 8005348:	2302      	movs	r3, #2
 800534a:	e027      	b.n	800539c <HAL_UARTEx_DisableFifoMode+0x66>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2224      	movs	r2, #36	; 0x24
 8005358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800537a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e02d      	b.n	800541c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2224      	movs	r2, #36	; 0x24
 80053cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f84f 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e02d      	b.n	8005498 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	; 0x24
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f811 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054c0:	e031      	b.n	8005526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054c2:	2308      	movs	r3, #8
 80054c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054c6:	2308      	movs	r3, #8
 80054c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	0e5b      	lsrs	r3, r3, #25
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	0f5b      	lsrs	r3, r3, #29
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	7b3a      	ldrb	r2, [r7, #12]
 80054ee:	4911      	ldr	r1, [pc, #68]	; (8005534 <UARTEx_SetNbDataToProcess+0x94>)
 80054f0:	5c8a      	ldrb	r2, [r1, r2]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054f6:	7b3a      	ldrb	r2, [r7, #12]
 80054f8:	490f      	ldr	r1, [pc, #60]	; (8005538 <UARTEx_SetNbDataToProcess+0x98>)
 80054fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	7b7a      	ldrb	r2, [r7, #13]
 800550c:	4909      	ldr	r1, [pc, #36]	; (8005534 <UARTEx_SetNbDataToProcess+0x94>)
 800550e:	5c8a      	ldrb	r2, [r1, r2]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005514:	7b7a      	ldrb	r2, [r7, #13]
 8005516:	4908      	ldr	r1, [pc, #32]	; (8005538 <UARTEx_SetNbDataToProcess+0x98>)
 8005518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800551a:	fb93 f3f2 	sdiv	r3, r3, r2
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	08011070 	.word	0x08011070
 8005538:	08011078 	.word	0x08011078

0800553c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005544:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005548:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	b29b      	uxth	r3, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	b29b      	uxth	r3, r3
 800555a:	4013      	ands	r3, r2
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005572:	b084      	sub	sp, #16
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	f107 0014 	add.w	r0, r7, #20
 8005580:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	b004      	add	sp, #16
 80055b2:	4770      	bx	lr

080055b4 <get_sparse_data>:
 80055b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b6:	4606      	mov	r6, r0
 80055b8:	b087      	sub	sp, #28
 80055ba:	6840      	ldr	r0, [r0, #4]
 80055bc:	460f      	mov	r7, r1
 80055be:	4615      	mov	r5, r2
 80055c0:	f001 fb22 	bl	8006c08 <acc_service_sparse_get_next_by_reference>
 80055c4:	4604      	mov	r4, r0
 80055c6:	b1f0      	cbz	r0, 8005606 <get_sparse_data+0x52>
 80055c8:	782b      	ldrb	r3, [r5, #0]
 80055ca:	b15b      	cbz	r3, 80055e4 <get_sparse_data+0x30>
 80055cc:	4c1c      	ldr	r4, [pc, #112]	; (8005640 <get_sparse_data+0x8c>)
 80055ce:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <get_sparse_data+0x90>)
 80055d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055d2:	491d      	ldr	r1, [pc, #116]	; (8005648 <get_sparse_data+0x94>)
 80055d4:	2000      	movs	r0, #0
 80055d6:	4798      	blx	r3
 80055d8:	786b      	ldrb	r3, [r5, #1]
 80055da:	b9e3      	cbnz	r3, 8005616 <get_sparse_data+0x62>
 80055dc:	2400      	movs	r4, #0
 80055de:	4620      	mov	r0, r4
 80055e0:	b007      	add	sp, #28
 80055e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e4:	786b      	ldrb	r3, [r5, #1]
 80055e6:	68f5      	ldr	r5, [r6, #12]
 80055e8:	b9fb      	cbnz	r3, 800562a <get_sparse_data+0x76>
 80055ea:	b14d      	cbz	r5, 8005600 <get_sparse_data+0x4c>
 80055ec:	6870      	ldr	r0, [r6, #4]
 80055ee:	a901      	add	r1, sp, #4
 80055f0:	f001 fae6 	bl	8006bc0 <acc_service_sparse_get_metadata>
 80055f4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80055f8:	6932      	ldr	r2, [r6, #16]
 80055fa:	6838      	ldr	r0, [r7, #0]
 80055fc:	0049      	lsls	r1, r1, #1
 80055fe:	47a8      	blx	r5
 8005600:	4620      	mov	r0, r4
 8005602:	b007      	add	sp, #28
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005606:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <get_sparse_data+0x8c>)
 8005608:	4a10      	ldr	r2, [pc, #64]	; (800564c <get_sparse_data+0x98>)
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	490e      	ldr	r1, [pc, #56]	; (8005648 <get_sparse_data+0x94>)
 800560e:	4798      	blx	r3
 8005610:	4620      	mov	r0, r4
 8005612:	b007      	add	sp, #28
 8005614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005616:	f002 f9e3 	bl	80079e0 <acc_rss_integration_log_level>
 800561a:	2800      	cmp	r0, #0
 800561c:	d0de      	beq.n	80055dc <get_sparse_data+0x28>
 800561e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005620:	4a0b      	ldr	r2, [pc, #44]	; (8005650 <get_sparse_data+0x9c>)
 8005622:	4909      	ldr	r1, [pc, #36]	; (8005648 <get_sparse_data+0x94>)
 8005624:	2001      	movs	r0, #1
 8005626:	4798      	blx	r3
 8005628:	e7d8      	b.n	80055dc <get_sparse_data+0x28>
 800562a:	f002 f9d9 	bl	80079e0 <acc_rss_integration_log_level>
 800562e:	2800      	cmp	r0, #0
 8005630:	d0db      	beq.n	80055ea <get_sparse_data+0x36>
 8005632:	4b03      	ldr	r3, [pc, #12]	; (8005640 <get_sparse_data+0x8c>)
 8005634:	4a06      	ldr	r2, [pc, #24]	; (8005650 <get_sparse_data+0x9c>)
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005638:	4903      	ldr	r1, [pc, #12]	; (8005648 <get_sparse_data+0x94>)
 800563a:	2001      	movs	r0, #1
 800563c:	4798      	blx	r3
 800563e:	e7d4      	b.n	80055ea <get_sparse_data+0x36>
 8005640:	200007b0 	.word	0x200007b0
 8005644:	08011080 	.word	0x08011080
 8005648:	08011094 	.word	0x08011094
 800564c:	080110b8 	.word	0x080110b8
 8005650:	080110a8 	.word	0x080110a8

08005654 <presence_service_setup.isra.0>:
 8005654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005656:	4606      	mov	r6, r0
 8005658:	b087      	sub	sp, #28
 800565a:	6850      	ldr	r0, [r2, #4]
 800565c:	460f      	mov	r7, r1
 800565e:	4615      	mov	r5, r2
 8005660:	f001 f884 	bl	800676c <acc_service_create>
 8005664:	6038      	str	r0, [r7, #0]
 8005666:	b198      	cbz	r0, 8005690 <presence_service_setup.isra.0+0x3c>
 8005668:	2300      	movs	r3, #0
 800566a:	a901      	add	r1, sp, #4
 800566c:	ac01      	add	r4, sp, #4
 800566e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005672:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005676:	9305      	str	r3, [sp, #20]
 8005678:	f001 faa2 	bl	8006bc0 <acc_service_sparse_get_metadata>
 800567c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800567e:	3534      	adds	r5, #52	; 0x34
 8005680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <presence_service_setup.isra.0+0x50>)
 8005686:	602a      	str	r2, [r5, #0]
 8005688:	2001      	movs	r0, #1
 800568a:	6033      	str	r3, [r6, #0]
 800568c:	b007      	add	sp, #28
 800568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <presence_service_setup.isra.0+0x54>)
 8005692:	4a06      	ldr	r2, [pc, #24]	; (80056ac <presence_service_setup.isra.0+0x58>)
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	4906      	ldr	r1, [pc, #24]	; (80056b0 <presence_service_setup.isra.0+0x5c>)
 8005698:	4604      	mov	r4, r0
 800569a:	4798      	blx	r3
 800569c:	4620      	mov	r0, r4
 800569e:	b007      	add	sp, #28
 80056a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a2:	bf00      	nop
 80056a4:	acc54323 	.word	0xacc54323
 80056a8:	200007b0 	.word	0x200007b0
 80056ac:	080110d0 	.word	0x080110d0
 80056b0:	08011094 	.word	0x08011094

080056b4 <acc_detector_presence_configuration_create>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	4920      	ldr	r1, [pc, #128]	; (8005738 <acc_detector_presence_configuration_create+0x84>)
 80056b8:	2259      	movs	r2, #89	; 0x59
 80056ba:	2050      	movs	r0, #80	; 0x50
 80056bc:	f002 f93a 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 80056c0:	4604      	mov	r4, r0
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d030      	beq.n	8005728 <acc_detector_presence_configuration_create+0x74>
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <acc_detector_presence_configuration_create+0x88>)
 80056c8:	6003      	str	r3, [r0, #0]
 80056ca:	f001 f9cf 	bl	8006a6c <acc_service_sparse_configuration_create>
 80056ce:	2103      	movs	r1, #3
 80056d0:	6060      	str	r0, [r4, #4]
 80056d2:	f000 ffc5 	bl	8006660 <acc_service_profile_set>
 80056d6:	6860      	ldr	r0, [r4, #4]
 80056d8:	4e19      	ldr	r6, [pc, #100]	; (8005740 <acc_detector_presence_configuration_create+0x8c>)
 80056da:	2110      	movs	r1, #16
 80056dc:	f001 fa62 	bl	8006ba4 <acc_service_sparse_configuration_sweeps_per_frame_set>
 80056e0:	6860      	ldr	r0, [r4, #4]
 80056e2:	f000 fea1 	bl	8006428 <acc_service_repetition_mode_on_demand_set>
 80056e6:	2300      	movs	r3, #0
 80056e8:	4916      	ldr	r1, [pc, #88]	; (8005744 <acc_detector_presence_configuration_create+0x90>)
 80056ea:	4817      	ldr	r0, [pc, #92]	; (8005748 <acc_detector_presence_configuration_create+0x94>)
 80056ec:	4a17      	ldr	r2, [pc, #92]	; (800574c <acc_detector_presence_configuration_create+0x98>)
 80056ee:	61e1      	str	r1, [r4, #28]
 80056f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80056f2:	2110      	movs	r1, #16
 80056f4:	6363      	str	r3, [r4, #52]	; 0x34
 80056f6:	6463      	str	r3, [r4, #68]	; 0x44
 80056f8:	6423      	str	r3, [r4, #64]	; 0x40
 80056fa:	2300      	movs	r3, #0
 80056fc:	6220      	str	r0, [r4, #32]
 80056fe:	f04f 557f 	mov.w	r5, #1069547520	; 0x3fc00000
 8005702:	4813      	ldr	r0, [pc, #76]	; (8005750 <acc_detector_presence_configuration_create+0x9c>)
 8005704:	6262      	str	r2, [r4, #36]	; 0x24
 8005706:	8121      	strh	r1, [r4, #8]
 8005708:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800570c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005710:	8623      	strh	r3, [r4, #48]	; 0x30
 8005712:	61a0      	str	r0, [r4, #24]
 8005714:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005718:	60e6      	str	r6, [r4, #12]
 800571a:	6125      	str	r5, [r4, #16]
 800571c:	6162      	str	r2, [r4, #20]
 800571e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005720:	62a1      	str	r1, [r4, #40]	; 0x28
 8005722:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005724:	4620      	mov	r0, r4
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <acc_detector_presence_configuration_create+0xa0>)
 800572a:	4a0b      	ldr	r2, [pc, #44]	; (8005758 <acc_detector_presence_configuration_create+0xa4>)
 800572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572e:	4902      	ldr	r1, [pc, #8]	; (8005738 <acc_detector_presence_configuration_create+0x84>)
 8005730:	4798      	blx	r3
 8005732:	4620      	mov	r0, r4
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	bf00      	nop
 8005738:	08011094 	.word	0x08011094
 800573c:	acc12ad9 	.word	0xacc12ad9
 8005740:	41200000 	.word	0x41200000
 8005744:	3e4ccccd 	.word	0x3e4ccccd
 8005748:	3e19999a 	.word	0x3e19999a
 800574c:	3f19999a 	.word	0x3f19999a
 8005750:	41a00000 	.word	0x41a00000
 8005754:	200007b0 	.word	0x200007b0
 8005758:	080110f0 	.word	0x080110f0

0800575c <acc_detector_presence_configuration_destroy>:
 800575c:	b1c0      	cbz	r0, 8005790 <acc_detector_presence_configuration_destroy+0x34>
 800575e:	b510      	push	{r4, lr}
 8005760:	4604      	mov	r4, r0
 8005762:	6800      	ldr	r0, [r0, #0]
 8005764:	b118      	cbz	r0, 800576e <acc_detector_presence_configuration_destroy+0x12>
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <acc_detector_presence_configuration_destroy+0x38>)
 8005768:	6802      	ldr	r2, [r0, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d007      	beq.n	800577e <acc_detector_presence_configuration_destroy+0x22>
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <acc_detector_presence_configuration_destroy+0x3c>)
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <acc_detector_presence_configuration_destroy+0x40>)
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	490a      	ldr	r1, [pc, #40]	; (80057a0 <acc_detector_presence_configuration_destroy+0x44>)
 8005776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577a:	2000      	movs	r0, #0
 800577c:	4718      	bx	r3
 800577e:	3004      	adds	r0, #4
 8005780:	f001 f9fe 	bl	8006b80 <acc_service_sparse_configuration_destroy>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	f002 f919 	bl	80079bc <acc_rss_integration_mem_free>
 800578a:	2300      	movs	r3, #0
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd10      	pop	{r4, pc}
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	acc12ad9 	.word	0xacc12ad9
 8005798:	200007b0 	.word	0x200007b0
 800579c:	08011110 	.word	0x08011110
 80057a0:	08011094 	.word	0x08011094

080057a4 <acc_detector_presence_create>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	4606      	mov	r6, r0
 80057a8:	b1d0      	cbz	r0, 80057e0 <acc_detector_presence_create+0x3c>
 80057aa:	4919      	ldr	r1, [pc, #100]	; (8005810 <acc_detector_presence_create+0x6c>)
 80057ac:	22a1      	movs	r2, #161	; 0xa1
 80057ae:	2014      	movs	r0, #20
 80057b0:	f002 f8c0 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 80057b4:	4604      	mov	r4, r0
 80057b6:	b320      	cbz	r0, 8005802 <acc_detector_presence_create+0x5e>
 80057b8:	1d07      	adds	r7, r0, #4
 80057ba:	4639      	mov	r1, r7
 80057bc:	4632      	mov	r2, r6
 80057be:	f7ff ff49 	bl	8005654 <presence_service_setup.isra.0>
 80057c2:	4605      	mov	r5, r0
 80057c4:	b1b8      	cbz	r0, 80057f6 <acc_detector_presence_create+0x52>
 80057c6:	f106 0008 	add.w	r0, r6, #8
 80057ca:	f000 fb79 	bl	8005ec0 <acc_detector_presence_processing_create>
 80057ce:	4605      	mov	r5, r0
 80057d0:	60a0      	str	r0, [r4, #8]
 80057d2:	b168      	cbz	r0, 80057f0 <acc_detector_presence_create+0x4c>
 80057d4:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
 80057d8:	4620      	mov	r0, r4
 80057da:	e9c4 2303 	strd	r2, r3, [r4, #12]
 80057de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <acc_detector_presence_create+0x70>)
 80057e2:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <acc_detector_presence_create+0x74>)
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e6:	490a      	ldr	r1, [pc, #40]	; (8005810 <acc_detector_presence_create+0x6c>)
 80057e8:	4604      	mov	r4, r0
 80057ea:	4798      	blx	r3
 80057ec:	4620      	mov	r0, r4
 80057ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f0:	4638      	mov	r0, r7
 80057f2:	f001 f82f 	bl	8006854 <acc_service_destroy>
 80057f6:	4620      	mov	r0, r4
 80057f8:	462c      	mov	r4, r5
 80057fa:	f002 f8df 	bl	80079bc <acc_rss_integration_mem_free>
 80057fe:	4620      	mov	r0, r4
 8005800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005802:	4b04      	ldr	r3, [pc, #16]	; (8005814 <acc_detector_presence_create+0x70>)
 8005804:	4a05      	ldr	r2, [pc, #20]	; (800581c <acc_detector_presence_create+0x78>)
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	4901      	ldr	r1, [pc, #4]	; (8005810 <acc_detector_presence_create+0x6c>)
 800580a:	4798      	blx	r3
 800580c:	4620      	mov	r0, r4
 800580e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005810:	08011094 	.word	0x08011094
 8005814:	200007b0 	.word	0x200007b0
 8005818:	08011128 	.word	0x08011128
 800581c:	08011140 	.word	0x08011140

08005820 <acc_detector_presence_destroy>:
 8005820:	b510      	push	{r4, lr}
 8005822:	4604      	mov	r4, r0
 8005824:	6800      	ldr	r0, [r0, #0]
 8005826:	b118      	cbz	r0, 8005830 <acc_detector_presence_destroy+0x10>
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <acc_detector_presence_destroy+0x3c>)
 800582a:	6802      	ldr	r2, [r0, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d007      	beq.n	8005840 <acc_detector_presence_destroy+0x20>
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <acc_detector_presence_destroy+0x40>)
 8005832:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <acc_detector_presence_destroy+0x44>)
 8005834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005836:	490c      	ldr	r1, [pc, #48]	; (8005868 <acc_detector_presence_destroy+0x48>)
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583c:	2000      	movs	r0, #0
 800583e:	4718      	bx	r3
 8005840:	3008      	adds	r0, #8
 8005842:	f000 fb6b 	bl	8005f1c <acc_detector_presence_processing_destroy>
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	3004      	adds	r0, #4
 800584a:	f001 f803 	bl	8006854 <acc_service_destroy>
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	f002 f8b4 	bl	80079bc <acc_rss_integration_mem_free>
 8005854:	2300      	movs	r3, #0
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	bd10      	pop	{r4, pc}
 800585a:	bf00      	nop
 800585c:	acc54323 	.word	0xacc54323
 8005860:	200007b0 	.word	0x200007b0
 8005864:	08011158 	.word	0x08011158
 8005868:	08011094 	.word	0x08011094

0800586c <acc_detector_presence_activate>:
 800586c:	b508      	push	{r3, lr}
 800586e:	b118      	cbz	r0, 8005878 <acc_detector_presence_activate+0xc>
 8005870:	4b08      	ldr	r3, [pc, #32]	; (8005894 <acc_detector_presence_activate+0x28>)
 8005872:	6802      	ldr	r2, [r0, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d007      	beq.n	8005888 <acc_detector_presence_activate+0x1c>
 8005878:	4b07      	ldr	r3, [pc, #28]	; (8005898 <acc_detector_presence_activate+0x2c>)
 800587a:	4a08      	ldr	r2, [pc, #32]	; (800589c <acc_detector_presence_activate+0x30>)
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	4908      	ldr	r1, [pc, #32]	; (80058a0 <acc_detector_presence_activate+0x34>)
 8005880:	2000      	movs	r0, #0
 8005882:	4798      	blx	r3
 8005884:	2000      	movs	r0, #0
 8005886:	bd08      	pop	{r3, pc}
 8005888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800588c:	6840      	ldr	r0, [r0, #4]
 800588e:	f000 bd17 	b.w	80062c0 <acc_service_activate>
 8005892:	bf00      	nop
 8005894:	acc54323 	.word	0xacc54323
 8005898:	200007b0 	.word	0x200007b0
 800589c:	08011158 	.word	0x08011158
 80058a0:	08011094 	.word	0x08011094

080058a4 <acc_detector_presence_deactivate>:
 80058a4:	b510      	push	{r4, lr}
 80058a6:	b118      	cbz	r0, 80058b0 <acc_detector_presence_deactivate+0xc>
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <acc_detector_presence_deactivate+0x38>)
 80058aa:	6802      	ldr	r2, [r0, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d008      	beq.n	80058c2 <acc_detector_presence_deactivate+0x1e>
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <acc_detector_presence_deactivate+0x3c>)
 80058b2:	4a0c      	ldr	r2, [pc, #48]	; (80058e4 <acc_detector_presence_deactivate+0x40>)
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	490c      	ldr	r1, [pc, #48]	; (80058e8 <acc_detector_presence_deactivate+0x44>)
 80058b8:	2000      	movs	r0, #0
 80058ba:	4798      	blx	r3
 80058bc:	2400      	movs	r4, #0
 80058be:	4620      	mov	r0, r4
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	6840      	ldr	r0, [r0, #4]
 80058c4:	f000 fd4a 	bl	800635c <acc_service_deactivate>
 80058c8:	4604      	mov	r4, r0
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d1f7      	bne.n	80058be <acc_detector_presence_deactivate+0x1a>
 80058ce:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <acc_detector_presence_deactivate+0x3c>)
 80058d0:	4a06      	ldr	r2, [pc, #24]	; (80058ec <acc_detector_presence_deactivate+0x48>)
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	4904      	ldr	r1, [pc, #16]	; (80058e8 <acc_detector_presence_deactivate+0x44>)
 80058d6:	4798      	blx	r3
 80058d8:	e7f1      	b.n	80058be <acc_detector_presence_deactivate+0x1a>
 80058da:	bf00      	nop
 80058dc:	acc54323 	.word	0xacc54323
 80058e0:	200007b0 	.word	0x200007b0
 80058e4:	08011158 	.word	0x08011158
 80058e8:	08011094 	.word	0x08011094
 80058ec:	08011168 	.word	0x08011168

080058f0 <acc_detector_presence_get_next>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	b120      	cbz	r0, 8005900 <acc_detector_presence_get_next+0x10>
 80058f6:	4b19      	ldr	r3, [pc, #100]	; (800595c <acc_detector_presence_get_next+0x6c>)
 80058f8:	6802      	ldr	r2, [r0, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	4604      	mov	r4, r0
 80058fe:	d009      	beq.n	8005914 <acc_detector_presence_get_next+0x24>
 8005900:	4b17      	ldr	r3, [pc, #92]	; (8005960 <acc_detector_presence_get_next+0x70>)
 8005902:	4a18      	ldr	r2, [pc, #96]	; (8005964 <acc_detector_presence_get_next+0x74>)
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	4918      	ldr	r1, [pc, #96]	; (8005968 <acc_detector_presence_get_next+0x78>)
 8005908:	2000      	movs	r0, #0
 800590a:	4798      	blx	r3
 800590c:	2500      	movs	r5, #0
 800590e:	4628      	mov	r0, r5
 8005910:	b008      	add	sp, #32
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	460e      	mov	r6, r1
 8005916:	2100      	movs	r1, #0
 8005918:	2300      	movs	r3, #0
 800591a:	9104      	str	r1, [sp, #16]
 800591c:	9105      	str	r1, [sp, #20]
 800591e:	aa01      	add	r2, sp, #4
 8005920:	a902      	add	r1, sp, #8
 8005922:	f88d 300c 	strb.w	r3, [sp, #12]
 8005926:	9307      	str	r3, [sp, #28]
 8005928:	f8ad 3018 	strh.w	r3, [sp, #24]
 800592c:	f7ff fe42 	bl	80055b4 <get_sparse_data>
 8005930:	4605      	mov	r5, r0
 8005932:	2800      	cmp	r0, #0
 8005934:	d0eb      	beq.n	800590e <acc_detector_presence_get_next+0x1e>
 8005936:	68a0      	ldr	r0, [r4, #8]
 8005938:	9902      	ldr	r1, [sp, #8]
 800593a:	aa03      	add	r2, sp, #12
 800593c:	f000 fb0e 	bl	8005f5c <acc_detector_presence_processing_next>
 8005940:	2e00      	cmp	r6, #0
 8005942:	d0e4      	beq.n	800590e <acc_detector_presence_get_next+0x1e>
 8005944:	9804      	ldr	r0, [sp, #16]
 8005946:	9905      	ldr	r1, [sp, #20]
 8005948:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800594c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005950:	6070      	str	r0, [r6, #4]
 8005952:	60b1      	str	r1, [r6, #8]
 8005954:	7032      	strb	r2, [r6, #0]
 8005956:	81b3      	strh	r3, [r6, #12]
 8005958:	e7d9      	b.n	800590e <acc_detector_presence_get_next+0x1e>
 800595a:	bf00      	nop
 800595c:	acc54323 	.word	0xacc54323
 8005960:	200007b0 	.word	0x200007b0
 8005964:	08011158 	.word	0x08011158
 8005968:	08011094 	.word	0x08011094

0800596c <acc_detector_presence_configuration_start_set>:
 800596c:	b118      	cbz	r0, 8005976 <acc_detector_presence_configuration_start_set+0xa>
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <acc_detector_presence_configuration_start_set+0x1c>)
 8005970:	6802      	ldr	r2, [r0, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d005      	beq.n	8005982 <acc_detector_presence_configuration_start_set+0x16>
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <acc_detector_presence_configuration_start_set+0x20>)
 8005978:	4a05      	ldr	r2, [pc, #20]	; (8005990 <acc_detector_presence_configuration_start_set+0x24>)
 800597a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597c:	4905      	ldr	r1, [pc, #20]	; (8005994 <acc_detector_presence_configuration_start_set+0x28>)
 800597e:	2000      	movs	r0, #0
 8005980:	4718      	bx	r3
 8005982:	6840      	ldr	r0, [r0, #4]
 8005984:	f000 bd34 	b.w	80063f0 <acc_service_requested_start_set>
 8005988:	acc12ad9 	.word	0xacc12ad9
 800598c:	200007b0 	.word	0x200007b0
 8005990:	08011110 	.word	0x08011110
 8005994:	08011094 	.word	0x08011094

08005998 <acc_detector_presence_configuration_length_set>:
 8005998:	b118      	cbz	r0, 80059a2 <acc_detector_presence_configuration_length_set+0xa>
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <acc_detector_presence_configuration_length_set+0x1c>)
 800599c:	6802      	ldr	r2, [r0, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d005      	beq.n	80059ae <acc_detector_presence_configuration_length_set+0x16>
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <acc_detector_presence_configuration_length_set+0x20>)
 80059a4:	4a05      	ldr	r2, [pc, #20]	; (80059bc <acc_detector_presence_configuration_length_set+0x24>)
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	4905      	ldr	r1, [pc, #20]	; (80059c0 <acc_detector_presence_configuration_length_set+0x28>)
 80059aa:	2000      	movs	r0, #0
 80059ac:	4718      	bx	r3
 80059ae:	6840      	ldr	r0, [r0, #4]
 80059b0:	f000 bd2c 	b.w	800640c <acc_service_requested_length_set>
 80059b4:	acc12ad9 	.word	0xacc12ad9
 80059b8:	200007b0 	.word	0x200007b0
 80059bc:	08011110 	.word	0x08011110
 80059c0:	08011094 	.word	0x08011094

080059c4 <acc_detector_presence_configuration_detection_threshold_set>:
 80059c4:	b118      	cbz	r0, 80059ce <acc_detector_presence_configuration_detection_threshold_set+0xa>
 80059c6:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <acc_detector_presence_configuration_detection_threshold_set+0x1c>)
 80059c8:	6802      	ldr	r2, [r0, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d005      	beq.n	80059da <acc_detector_presence_configuration_detection_threshold_set+0x16>
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <acc_detector_presence_configuration_detection_threshold_set+0x20>)
 80059d0:	4a05      	ldr	r2, [pc, #20]	; (80059e8 <acc_detector_presence_configuration_detection_threshold_set+0x24>)
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	4905      	ldr	r1, [pc, #20]	; (80059ec <acc_detector_presence_configuration_detection_threshold_set+0x28>)
 80059d6:	2000      	movs	r0, #0
 80059d8:	4718      	bx	r3
 80059da:	ed80 0a04 	vstr	s0, [r0, #16]
 80059de:	4770      	bx	lr
 80059e0:	acc12ad9 	.word	0xacc12ad9
 80059e4:	200007b0 	.word	0x200007b0
 80059e8:	08011110 	.word	0x08011110
 80059ec:	08011094 	.word	0x08011094

080059f0 <acc_detector_presence_configuration_update_rate_set>:
 80059f0:	b118      	cbz	r0, 80059fa <acc_detector_presence_configuration_update_rate_set+0xa>
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <acc_detector_presence_configuration_update_rate_set+0x1c>)
 80059f4:	6802      	ldr	r2, [r0, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d005      	beq.n	8005a06 <acc_detector_presence_configuration_update_rate_set+0x16>
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <acc_detector_presence_configuration_update_rate_set+0x20>)
 80059fc:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <acc_detector_presence_configuration_update_rate_set+0x24>)
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	4905      	ldr	r1, [pc, #20]	; (8005a18 <acc_detector_presence_configuration_update_rate_set+0x28>)
 8005a02:	2000      	movs	r0, #0
 8005a04:	4718      	bx	r3
 8005a06:	ed80 0a03 	vstr	s0, [r0, #12]
 8005a0a:	4770      	bx	lr
 8005a0c:	acc12ad9 	.word	0xacc12ad9
 8005a10:	200007b0 	.word	0x200007b0
 8005a14:	08011110 	.word	0x08011110
 8005a18:	08011094 	.word	0x08011094

08005a1c <acc_detector_presence_configuration_nbr_removed_pc_set>:
 8005a1c:	b118      	cbz	r0, 8005a26 <acc_detector_presence_configuration_nbr_removed_pc_set+0xa>
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <acc_detector_presence_configuration_nbr_removed_pc_set+0x1c>)
 8005a20:	6802      	ldr	r2, [r0, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d005      	beq.n	8005a32 <acc_detector_presence_configuration_nbr_removed_pc_set+0x16>
 8005a26:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <acc_detector_presence_configuration_nbr_removed_pc_set+0x20>)
 8005a28:	4a05      	ldr	r2, [pc, #20]	; (8005a40 <acc_detector_presence_configuration_nbr_removed_pc_set+0x24>)
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	4905      	ldr	r1, [pc, #20]	; (8005a44 <acc_detector_presence_configuration_nbr_removed_pc_set+0x28>)
 8005a2e:	2000      	movs	r0, #0
 8005a30:	4718      	bx	r3
 8005a32:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 8005a36:	4770      	bx	lr
 8005a38:	acc12ad9 	.word	0xacc12ad9
 8005a3c:	200007b0 	.word	0x200007b0
 8005a40:	08011110 	.word	0x08011110
 8005a44:	08011094 	.word	0x08011094

08005a48 <acc_detector_presence_configuration_power_save_mode_set>:
 8005a48:	b118      	cbz	r0, 8005a52 <acc_detector_presence_configuration_power_save_mode_set+0xa>
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <acc_detector_presence_configuration_power_save_mode_set+0x1c>)
 8005a4c:	6802      	ldr	r2, [r0, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d005      	beq.n	8005a5e <acc_detector_presence_configuration_power_save_mode_set+0x16>
 8005a52:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <acc_detector_presence_configuration_power_save_mode_set+0x20>)
 8005a54:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <acc_detector_presence_configuration_power_save_mode_set+0x24>)
 8005a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a58:	4905      	ldr	r1, [pc, #20]	; (8005a70 <acc_detector_presence_configuration_power_save_mode_set+0x28>)
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	4718      	bx	r3
 8005a5e:	6840      	ldr	r0, [r0, #4]
 8005a60:	f000 bcea 	b.w	8006438 <acc_service_power_save_mode_set>
 8005a64:	acc12ad9 	.word	0xacc12ad9
 8005a68:	200007b0 	.word	0x200007b0
 8005a6c:	08011110 	.word	0x08011110
 8005a70:	08011094 	.word	0x08011094

08005a74 <processing_buffers_teardown>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	4604      	mov	r4, r0
 8005a78:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005a7a:	b118      	cbz	r0, 8005a84 <processing_buffers_teardown+0x10>
 8005a7c:	f001 ff9e 	bl	80079bc <acc_rss_integration_mem_free>
 8005a80:	2300      	movs	r3, #0
 8005a82:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d035      	beq.n	8005af6 <processing_buffers_teardown+0x82>
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	b120      	cbz	r0, 8005a98 <processing_buffers_teardown+0x24>
 8005a8e:	f001 ff95 	bl	80079bc <acc_rss_integration_mem_free>
 8005a92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	6858      	ldr	r0, [r3, #4]
 8005a9a:	b120      	cbz	r0, 8005aa6 <processing_buffers_teardown+0x32>
 8005a9c:	f001 ff8e 	bl	80079bc <acc_rss_integration_mem_free>
 8005aa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	6898      	ldr	r0, [r3, #8]
 8005aa8:	b120      	cbz	r0, 8005ab4 <processing_buffers_teardown+0x40>
 8005aaa:	f001 ff87 	bl	80079bc <acc_rss_integration_mem_free>
 8005aae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	68d8      	ldr	r0, [r3, #12]
 8005ab6:	b120      	cbz	r0, 8005ac2 <processing_buffers_teardown+0x4e>
 8005ab8:	f001 ff80 	bl	80079bc <acc_rss_integration_mem_free>
 8005abc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005abe:	2200      	movs	r2, #0
 8005ac0:	60da      	str	r2, [r3, #12]
 8005ac2:	6918      	ldr	r0, [r3, #16]
 8005ac4:	b120      	cbz	r0, 8005ad0 <processing_buffers_teardown+0x5c>
 8005ac6:	f001 ff79 	bl	80079bc <acc_rss_integration_mem_free>
 8005aca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]
 8005ad0:	6958      	ldr	r0, [r3, #20]
 8005ad2:	b120      	cbz	r0, 8005ade <processing_buffers_teardown+0x6a>
 8005ad4:	f001 ff72 	bl	80079bc <acc_rss_integration_mem_free>
 8005ad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ada:	2200      	movs	r2, #0
 8005adc:	615a      	str	r2, [r3, #20]
 8005ade:	6998      	ldr	r0, [r3, #24]
 8005ae0:	b120      	cbz	r0, 8005aec <processing_buffers_teardown+0x78>
 8005ae2:	f001 ff6b 	bl	80079bc <acc_rss_integration_mem_free>
 8005ae6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ae8:	2200      	movs	r2, #0
 8005aea:	619a      	str	r2, [r3, #24]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 ff65 	bl	80079bc <acc_rss_integration_mem_free>
 8005af2:	2300      	movs	r3, #0
 8005af4:	6563      	str	r3, [r4, #84]	; 0x54
 8005af6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005af8:	b118      	cbz	r0, 8005b02 <processing_buffers_teardown+0x8e>
 8005afa:	f001 ff5f 	bl	80079bc <acc_rss_integration_mem_free>
 8005afe:	2300      	movs	r3, #0
 8005b00:	6523      	str	r3, [r4, #80]	; 0x50
 8005b02:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005b04:	b118      	cbz	r0, 8005b0e <processing_buffers_teardown+0x9a>
 8005b06:	f001 ff59 	bl	80079bc <acc_rss_integration_mem_free>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005b0e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005b10:	b118      	cbz	r0, 8005b1a <processing_buffers_teardown+0xa6>
 8005b12:	f001 ff53 	bl	80079bc <acc_rss_integration_mem_free>
 8005b16:	2300      	movs	r3, #0
 8005b18:	6623      	str	r3, [r4, #96]	; 0x60
 8005b1a:	bd10      	pop	{r4, pc}

08005b1c <smoothing_factor_from_low_pass_cutoff>:
 8005b1c:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8005b20:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005b64 <smoothing_factor_from_low_pass_cutoff+0x48>
 8005b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2c:	dd02      	ble.n	8005b34 <smoothing_factor_from_low_pass_cutoff+0x18>
 8005b2e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005b68 <smoothing_factor_from_low_pass_cutoff+0x4c>
 8005b32:	4770      	bx	lr
 8005b34:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005b6c <smoothing_factor_from_low_pass_cutoff+0x50>
 8005b38:	b508      	push	{r3, lr}
 8005b3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005b3e:	f001 f8e5 	bl	8006d0c <acc_alg_basic_math_restricted_sin_f32>
 8005b42:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005b46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005b4a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b4e:	ee30 7a00 	vadd.f32	s14, s0, s0
 8005b52:	eef1 6ac6 	vsqrt.f32	s13, s12
 8005b56:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8005b5a:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005b5e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005b62:	bd08      	pop	{r3, pc}
 8005b64:	3f0000a8 	.word	0x3f0000a8
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	40490fdb 	.word	0x40490fdb

08005b70 <setup_processing_parameters>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	880e      	ldrh	r6, [r1, #0]
 8005b74:	f8b1 c034 	ldrh.w	ip, [r1, #52]	; 0x34
 8005b78:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8005d08 <setup_processing_parameters+0x198>
 8005b7c:	fbbc fcf6 	udiv	ip, ip, r6
 8005b80:	ed2d 8b02 	vpush	{d8}
 8005b84:	f101 072c 	add.w	r7, r1, #44	; 0x2c
 8005b88:	7206      	strb	r6, [r0, #8]
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005b90:	69e6      	ldr	r6, [r4, #28]
 8005b92:	f8c5 e000 	str.w	lr, [r5]
 8005b96:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005b9a:	62ae      	str	r6, [r5, #40]	; 0x28
 8005b9c:	f105 062c 	add.w	r6, r5, #44	; 0x2c
 8005ba0:	f8c5 e00c 	str.w	lr, [r5, #12]
 8005ba4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005ba6:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005bb0:	ed94 8a01 	vldr	s16, [r4, #4]
 8005bb4:	6032      	str	r2, [r6, #0]
 8005bb6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	f8c5 c004 	str.w	ip, [r5, #4]
 8005bc2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8005bc6:	f240 8088 	bls.w	8005cda <setup_processing_parameters+0x16a>
 8005bca:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005bce:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8005bd2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005bd6:	f009 f9a1 	bl	800ef1c <expf>
 8005bda:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 8005bde:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8005be2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d909      	bls.n	8005bfe <setup_processing_parameters+0x8e>
 8005bea:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <setup_processing_parameters+0x184>)
 8005bec:	4a42      	ldr	r2, [pc, #264]	; (8005cf8 <setup_processing_parameters+0x188>)
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	4942      	ldr	r1, [pc, #264]	; (8005cfc <setup_processing_parameters+0x18c>)
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	4798      	blx	r3
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	ecbd 8b02 	vpop	{d8}
 8005bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c06:	d965      	bls.n	8005cd4 <setup_processing_parameters+0x164>
 8005c08:	ed94 0a04 	vldr	s0, [r4, #16]
 8005c0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c14:	d45e      	bmi.n	8005cd4 <setup_processing_parameters+0x164>
 8005c16:	edd4 7a05 	vldr	s15, [r4, #20]
 8005c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c22:	d457      	bmi.n	8005cd4 <setup_processing_parameters+0x164>
 8005c24:	edd4 7a03 	vldr	s15, [r4, #12]
 8005c28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	d450      	bmi.n	8005cd4 <setup_processing_parameters+0x164>
 8005c32:	edd4 7a06 	vldr	s15, [r4, #24]
 8005c36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3e:	d449      	bmi.n	8005cd4 <setup_processing_parameters+0x164>
 8005c40:	edd4 7a08 	vldr	s15, [r4, #32]
 8005c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4c:	d442      	bmi.n	8005cd4 <setup_processing_parameters+0x164>
 8005c4e:	eef0 0a48 	vmov.f32	s1, s16
 8005c52:	f7ff ff63 	bl	8005b1c <smoothing_factor_from_low_pass_cutoff>
 8005c56:	eef0 0a48 	vmov.f32	s1, s16
 8005c5a:	ed85 0a04 	vstr	s0, [r5, #16]
 8005c5e:	ed94 0a05 	vldr	s0, [r4, #20]
 8005c62:	f7ff ff5b 	bl	8005b1c <smoothing_factor_from_low_pass_cutoff>
 8005c66:	edd4 7a03 	vldr	s15, [r4, #12]
 8005c6a:	ed85 0a05 	vstr	s0, [r5, #20]
 8005c6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	d933      	bls.n	8005ce0 <setup_processing_parameters+0x170>
 8005c78:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005c7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005c80:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005c84:	f009 f94a 	bl	800ef1c <expf>
 8005c88:	edd4 7a06 	vldr	s15, [r4, #24]
 8005c8c:	ed85 0a06 	vstr	s0, [r5, #24]
 8005c90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c98:	d928      	bls.n	8005cec <setup_processing_parameters+0x17c>
 8005c9a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005c9e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005ca2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005ca6:	f009 f939 	bl	800ef1c <expf>
 8005caa:	edd4 0a08 	vldr	s1, [r4, #32]
 8005cae:	ed85 0a07 	vstr	s0, [r5, #28]
 8005cb2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cba:	d914      	bls.n	8005ce6 <setup_processing_parameters+0x176>
 8005cbc:	ee28 8a20 	vmul.f32	s16, s16, s1
 8005cc0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005cc4:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8005cc8:	f009 f928 	bl	800ef1c <expf>
 8005ccc:	2001      	movs	r0, #1
 8005cce:	ed85 0a08 	vstr	s0, [r5, #32]
 8005cd2:	e791      	b.n	8005bf8 <setup_processing_parameters+0x88>
 8005cd4:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <setup_processing_parameters+0x184>)
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <setup_processing_parameters+0x190>)
 8005cd8:	e789      	b.n	8005bee <setup_processing_parameters+0x7e>
 8005cda:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8005d04 <setup_processing_parameters+0x194>
 8005cde:	e77c      	b.n	8005bda <setup_processing_parameters+0x6a>
 8005ce0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005d04 <setup_processing_parameters+0x194>
 8005ce4:	e7d0      	b.n	8005c88 <setup_processing_parameters+0x118>
 8005ce6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8005d04 <setup_processing_parameters+0x194>
 8005cea:	e7ef      	b.n	8005ccc <setup_processing_parameters+0x15c>
 8005cec:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005d04 <setup_processing_parameters+0x194>
 8005cf0:	e7db      	b.n	8005caa <setup_processing_parameters+0x13a>
 8005cf2:	bf00      	nop
 8005cf4:	200007b0 	.word	0x200007b0
 8005cf8:	08011184 	.word	0x08011184
 8005cfc:	080111a0 	.word	0x080111a0
 8005d00:	080111c0 	.word	0x080111c0
 8005d04:	00000000 	.word	0x00000000
 8005d08:	acc12ad1 	.word	0xacc12ad1

08005d0c <processing_buffers_setup>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005d12:	4604      	mov	r4, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f040 80ad 	bne.w	8005e74 <processing_buffers_setup+0x168>
 8005d1a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d06c      	beq.n	8005dfc <processing_buffers_setup+0xf0>
 8005d22:	4961      	ldr	r1, [pc, #388]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005d24:	f44f 729b 	mov.w	r2, #310	; 0x136
 8005d28:	2034      	movs	r0, #52	; 0x34
 8005d2a:	f001 fe03 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005d2e:	4605      	mov	r5, r0
 8005d30:	6560      	str	r0, [r4, #84]	; 0x54
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f000 80b4 	beq.w	8005ea0 <processing_buffers_setup+0x194>
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005d3e:	495a      	ldr	r1, [pc, #360]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	fb03 f002 	mul.w	r0, r3, r2
 8005d46:	e9c5 0007 	strd	r0, r0, [r5, #28]
 8005d4a:	7a26      	ldrb	r6, [r4, #8]
 8005d4c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005d4e:	fb12 f206 	smulbb	r2, r2, r6
 8005d52:	0092      	lsls	r2, r2, #2
 8005d54:	632a      	str	r2, [r5, #48]	; 0x30
 8005d56:	1ef2      	subs	r2, r6, #3
 8005d58:	fb03 f202 	mul.w	r2, r3, r2
 8005d5c:	fb03 f306 	mul.w	r3, r3, r6
 8005d60:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 8005d64:	f240 124d 	movw	r2, #333	; 0x14d
 8005d68:	f001 fde4 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005d6c:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005d6e:	494e      	ldr	r1, [pc, #312]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005d70:	6028      	str	r0, [r5, #0]
 8005d72:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8005d76:	6a38      	ldr	r0, [r7, #32]
 8005d78:	f001 fddc 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005d7c:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005d7e:	494a      	ldr	r1, [pc, #296]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	f240 124f 	movw	r2, #335	; 0x14f
 8005d86:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8005d88:	f001 fdd4 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005d8c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005d8e:	4946      	ldr	r1, [pc, #280]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005d90:	60b0      	str	r0, [r6, #8]
 8005d92:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8005d96:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8005d98:	f001 fdcc 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005d9c:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005d9e:	4942      	ldr	r1, [pc, #264]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005da0:	60e8      	str	r0, [r5, #12]
 8005da2:	f240 1251 	movw	r2, #337	; 0x151
 8005da6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005da8:	f001 fdc4 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005dac:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005dae:	493e      	ldr	r1, [pc, #248]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005db0:	6130      	str	r0, [r6, #16]
 8005db2:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005db6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005db8:	f001 fdbc 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005dbc:	6863      	ldr	r3, [r4, #4]
 8005dbe:	493a      	ldr	r1, [pc, #232]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005dc0:	6168      	str	r0, [r5, #20]
 8005dc2:	f240 1253 	movw	r2, #339	; 0x153
 8005dc6:	0098      	lsls	r0, r3, #2
 8005dc8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005dca:	f001 fdb3 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005dce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005dd0:	61a8      	str	r0, [r5, #24]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	d04a      	beq.n	8005e6e <processing_buffers_setup+0x162>
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d047      	beq.n	8005e6e <processing_buffers_setup+0x162>
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	d044      	beq.n	8005e6e <processing_buffers_setup+0x162>
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	2a00      	cmp	r2, #0
 8005de8:	d041      	beq.n	8005e6e <processing_buffers_setup+0x162>
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	d03e      	beq.n	8005e6e <processing_buffers_setup+0x162>
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	d03b      	beq.n	8005e6e <processing_buffers_setup+0x162>
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d038      	beq.n	8005e6e <processing_buffers_setup+0x162>
 8005dfc:	6860      	ldr	r0, [r4, #4]
 8005dfe:	492a      	ldr	r1, [pc, #168]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005e00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e04:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005e08:	0080      	lsls	r0, r0, #2
 8005e0a:	f001 fd93 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005e0e:	6863      	ldr	r3, [r4, #4]
 8005e10:	4925      	ldr	r1, [pc, #148]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005e12:	6520      	str	r0, [r4, #80]	; 0x50
 8005e14:	f240 1261 	movw	r2, #353	; 0x161
 8005e18:	0098      	lsls	r0, r3, #2
 8005e1a:	f001 fd8b 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	65e0      	str	r0, [r4, #92]	; 0x5c
 8005e22:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005e26:	4920      	ldr	r1, [pc, #128]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005e28:	0098      	lsls	r0, r3, #2
 8005e2a:	f001 fd83 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005e2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005e30:	6620      	str	r0, [r4, #96]	; 0x60
 8005e32:	b18a      	cbz	r2, 8005e58 <processing_buffers_setup+0x14c>
 8005e34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005e36:	b17b      	cbz	r3, 8005e58 <processing_buffers_setup+0x14c>
 8005e38:	b170      	cbz	r0, 8005e58 <processing_buffers_setup+0x14c>
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	6461      	str	r1, [r4, #68]	; 0x44
 8005e40:	4610      	mov	r0, r2
 8005e42:	64a1      	str	r1, [r4, #72]	; 0x48
 8005e44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005e48:	88a2      	ldrh	r2, [r4, #4]
 8005e4a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005e4c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 8005e50:	f001 f828 	bl	8006ea4 <acc_alg_sparse_frame_abs_deviation_accumulator_reset>
 8005e54:	2001      	movs	r0, #1
 8005e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e58:	4b14      	ldr	r3, [pc, #80]	; (8005eac <processing_buffers_setup+0x1a0>)
 8005e5a:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <processing_buffers_setup+0x1a4>)
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	4912      	ldr	r1, [pc, #72]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005e60:	2000      	movs	r0, #0
 8005e62:	4798      	blx	r3
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7ff fe05 	bl	8005a74 <processing_buffers_teardown>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <processing_buffers_setup+0x1a0>)
 8005e70:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <processing_buffers_setup+0x1a8>)
 8005e72:	e7f3      	b.n	8005e5c <processing_buffers_setup+0x150>
 8005e74:	6840      	ldr	r0, [r0, #4]
 8005e76:	490c      	ldr	r1, [pc, #48]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005e78:	0080      	lsls	r0, r0, #2
 8005e7a:	f240 1229 	movw	r2, #297	; 0x129
 8005e7e:	f001 fd59 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005e82:	4605      	mov	r5, r0
 8005e84:	65a0      	str	r0, [r4, #88]	; 0x58
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f47f af47 	bne.w	8005d1a <processing_buffers_setup+0xe>
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <processing_buffers_setup+0x1a0>)
 8005e8e:	4a0a      	ldr	r2, [pc, #40]	; (8005eb8 <processing_buffers_setup+0x1ac>)
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e92:	4905      	ldr	r1, [pc, #20]	; (8005ea8 <processing_buffers_setup+0x19c>)
 8005e94:	4798      	blx	r3
 8005e96:	4620      	mov	r0, r4
 8005e98:	f7ff fdec 	bl	8005a74 <processing_buffers_teardown>
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <processing_buffers_setup+0x1a0>)
 8005ea2:	4a06      	ldr	r2, [pc, #24]	; (8005ebc <processing_buffers_setup+0x1b0>)
 8005ea4:	e7f4      	b.n	8005e90 <processing_buffers_setup+0x184>
 8005ea6:	bf00      	nop
 8005ea8:	080111a0 	.word	0x080111a0
 8005eac:	200007b0 	.word	0x200007b0
 8005eb0:	08011240 	.word	0x08011240
 8005eb4:	08011224 	.word	0x08011224
 8005eb8:	080111e4 	.word	0x080111e4
 8005ebc:	08011208 	.word	0x08011208

08005ec0 <acc_detector_presence_processing_create>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4913      	ldr	r1, [pc, #76]	; (8005f10 <acc_detector_presence_processing_create+0x50>)
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	225b      	movs	r2, #91	; 0x5b
 8005ec8:	2064      	movs	r0, #100	; 0x64
 8005eca:	f001 fd33 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	b1b0      	cbz	r0, 8005f00 <acc_detector_presence_processing_create+0x40>
 8005ed2:	2264      	movs	r2, #100	; 0x64
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f006 f9e3 	bl	800c2a0 <memset>
 8005eda:	4629      	mov	r1, r5
 8005edc:	4620      	mov	r0, r4
 8005ede:	f7ff fe47 	bl	8005b70 <setup_processing_parameters>
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	b135      	cbz	r5, 8005ef6 <acc_detector_presence_processing_create+0x36>
 8005ee8:	f7ff ff10 	bl	8005d0c <processing_buffers_setup>
 8005eec:	4605      	mov	r5, r0
 8005eee:	b108      	cbz	r0, 8005ef4 <acc_detector_presence_processing_create+0x34>
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	462c      	mov	r4, r5
 8005ef8:	f001 fd60 	bl	80079bc <acc_rss_integration_mem_free>
 8005efc:	4620      	mov	r0, r4
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <acc_detector_presence_processing_create+0x54>)
 8005f02:	4a05      	ldr	r2, [pc, #20]	; (8005f18 <acc_detector_presence_processing_create+0x58>)
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	4902      	ldr	r1, [pc, #8]	; (8005f10 <acc_detector_presence_processing_create+0x50>)
 8005f08:	4798      	blx	r3
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	bd38      	pop	{r3, r4, r5, pc}
 8005f0e:	bf00      	nop
 8005f10:	080111a0 	.word	0x080111a0
 8005f14:	200007b0 	.word	0x200007b0
 8005f18:	08011258 	.word	0x08011258

08005f1c <acc_detector_presence_processing_destroy>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	4604      	mov	r4, r0
 8005f20:	6800      	ldr	r0, [r0, #0]
 8005f22:	b118      	cbz	r0, 8005f2c <acc_detector_presence_processing_destroy+0x10>
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <acc_detector_presence_processing_destroy+0x30>)
 8005f26:	6802      	ldr	r2, [r0, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d007      	beq.n	8005f3c <acc_detector_presence_processing_destroy+0x20>
 8005f2c:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <acc_detector_presence_processing_destroy+0x34>)
 8005f2e:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <acc_detector_presence_processing_destroy+0x38>)
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f32:	4909      	ldr	r1, [pc, #36]	; (8005f58 <acc_detector_presence_processing_destroy+0x3c>)
 8005f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f38:	2000      	movs	r0, #0
 8005f3a:	4718      	bx	r3
 8005f3c:	f7ff fd9a 	bl	8005a74 <processing_buffers_teardown>
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	f001 fd3b 	bl	80079bc <acc_rss_integration_mem_free>
 8005f46:	2300      	movs	r3, #0
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd10      	pop	{r4, pc}
 8005f4c:	acc12ad1 	.word	0xacc12ad1
 8005f50:	200007b0 	.word	0x200007b0
 8005f54:	08011278 	.word	0x08011278
 8005f58:	080111a0 	.word	0x080111a0

08005f5c <acc_detector_presence_processing_next>:
 8005f5c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 8005f60:	ed90 0a04 	vldr	s0, [r0, #16]
 8005f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f68:	3301      	adds	r3, #1
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f72:	ed2d 8b04 	vpush	{d8-d9}
 8005f76:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005f7a:	eec8 0a27 	vdiv.f32	s1, s16, s15
 8005f7e:	b08b      	sub	sp, #44	; 0x2c
 8005f80:	4604      	mov	r4, r0
 8005f82:	460d      	mov	r5, r1
 8005f84:	4616      	mov	r6, r2
 8005f86:	ee38 8a60 	vsub.f32	s16, s16, s1
 8005f8a:	eef0 0a48 	vmov.f32	s1, s16
 8005f8e:	f008 ff6a 	bl	800ee66 <fminf>
 8005f92:	eef0 0a48 	vmov.f32	s1, s16
 8005f96:	eef0 7a40 	vmov.f32	s15, s0
 8005f9a:	ed94 0a05 	vldr	s0, [r4, #20]
 8005f9e:	edcd 7a05 	vstr	s15, [sp, #20]
 8005fa2:	f008 ff60 	bl	800ee66 <fminf>
 8005fa6:	eef0 0a48 	vmov.f32	s1, s16
 8005faa:	eef0 7a40 	vmov.f32	s15, s0
 8005fae:	ed94 0a06 	vldr	s0, [r4, #24]
 8005fb2:	edcd 7a06 	vstr	s15, [sp, #24]
 8005fb6:	f008 ff56 	bl	800ee66 <fminf>
 8005fba:	eef0 0a48 	vmov.f32	s1, s16
 8005fbe:	eef0 7a40 	vmov.f32	s15, s0
 8005fc2:	ed94 0a07 	vldr	s0, [r4, #28]
 8005fc6:	edcd 7a07 	vstr	s15, [sp, #28]
 8005fca:	f008 ff4c 	bl	800ee66 <fminf>
 8005fce:	eef0 0a48 	vmov.f32	s1, s16
 8005fd2:	eef0 7a40 	vmov.f32	s15, s0
 8005fd6:	ed94 0a08 	vldr	s0, [r4, #32]
 8005fda:	edcd 7a08 	vstr	s15, [sp, #32]
 8005fde:	f008 ff42 	bl	800ee66 <fminf>
 8005fe2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005fe6:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8005fea:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8005fee:	b1ab      	cbz	r3, 800601c <acc_detector_presence_processing_next+0xc0>
 8005ff0:	88a1      	ldrh	r1, [r4, #4]
 8005ff2:	9100      	str	r1, [sp, #0]
 8005ff4:	a805      	add	r0, sp, #20
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	9002      	str	r0, [sp, #8]
 8005ffa:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8005ffe:	7a23      	ldrb	r3, [r4, #8]
 8006000:	462a      	mov	r2, r5
 8006002:	f001 f84b 	bl	800709c <acc_alg_sparse_frame_abs_deviation_accumulate_pca>
 8006006:	b998      	cbnz	r0, 8006030 <acc_detector_presence_processing_next+0xd4>
 8006008:	4b58      	ldr	r3, [pc, #352]	; (800616c <acc_detector_presence_processing_next+0x210>)
 800600a:	4a59      	ldr	r2, [pc, #356]	; (8006170 <acc_detector_presence_processing_next+0x214>)
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	4959      	ldr	r1, [pc, #356]	; (8006174 <acc_detector_presence_processing_next+0x218>)
 8006010:	4798      	blx	r3
 8006012:	b00b      	add	sp, #44	; 0x2c
 8006014:	ecbd 8b04 	vpop	{d8-d9}
 8006018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800601c:	ab05      	add	r3, sp, #20
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	88a3      	ldrh	r3, [r4, #4]
 8006022:	7a22      	ldrb	r2, [r4, #8]
 8006024:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006026:	4629      	mov	r1, r5
 8006028:	f000 ff74 	bl	8006f14 <acc_alg_sparse_frame_abs_deviation_accumulate>
 800602c:	2800      	cmp	r0, #0
 800602e:	d0eb      	beq.n	8006008 <acc_detector_presence_processing_next+0xac>
 8006030:	e9d4 3217 	ldrd	r3, r2, [r4, #92]	; 0x5c
 8006034:	88a1      	ldrh	r1, [r4, #4]
 8006036:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006038:	f001 fb6a 	bl	8007710 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio>
 800603c:	2800      	cmp	r0, #0
 800603e:	f000 8085 	beq.w	800614c <acc_detector_presence_processing_next+0x1f0>
 8006042:	6867      	ldr	r7, [r4, #4]
 8006044:	2f00      	cmp	r7, #0
 8006046:	f000 808b 	beq.w	8006160 <acc_detector_presence_processing_next+0x204>
 800604a:	e9d4 ec17 	ldrd	lr, ip, [r4, #92]	; 0x5c
 800604e:	2300      	movs	r3, #0
 8006050:	f894 8040 	ldrb.w	r8, [r4, #64]	; 0x40
 8006054:	eddf 8a48 	vldr	s17, [pc, #288]	; 8006178 <acc_detector_presence_processing_next+0x21c>
 8006058:	4699      	mov	r9, r3
 800605a:	4619      	mov	r1, r3
 800605c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006060:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8006064:	eb0e 0281 	add.w	r2, lr, r1, lsl #2
 8006068:	eb0c 0081 	add.w	r0, ip, r1, lsl #2
 800606c:	ee75 7ac7 	vsub.f32	s15, s11, s14
 8006070:	ed92 6a00 	vldr	s12, [r2]
 8006074:	edd0 6a00 	vldr	s13, [r0]
 8006078:	ee67 7a86 	vmul.f32	s15, s15, s12
 800607c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006080:	1c5d      	adds	r5, r3, #1
 8006082:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006086:	008a      	lsls	r2, r1, #2
 8006088:	eef4 7ae8 	vcmpe.f32	s15, s17
 800608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006090:	bfc8      	it	gt
 8006092:	4699      	movgt	r9, r3
 8006094:	b2ab      	uxth	r3, r5
 8006096:	bfc8      	it	gt
 8006098:	eef0 8a67 	vmovgt.f32	s17, s15
 800609c:	4619      	mov	r1, r3
 800609e:	f1b8 0f00 	cmp.w	r8, #0
 80060a2:	d003      	beq.n	80060ac <acc_detector_presence_processing_next+0x150>
 80060a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a6:	4410      	add	r0, r2
 80060a8:	edc0 7a00 	vstr	s15, [r0]
 80060ac:	42bb      	cmp	r3, r7
 80060ae:	d3d7      	bcc.n	8006060 <acc_detector_presence_processing_next+0x104>
 80060b0:	edd4 9a03 	vldr	s19, [r4, #12]
 80060b4:	eef4 9ae8 	vcmpe.f32	s19, s17
 80060b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060bc:	d80d      	bhi.n	80060da <acc_detector_presence_processing_next+0x17e>
 80060be:	ee07 9a90 	vmov	s15, r9
 80060c2:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80060c6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 80060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060d6:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 80060da:	eeb0 0a49 	vmov.f32	s0, s18
 80060de:	eef0 0a48 	vmov.f32	s1, s16
 80060e2:	f008 fec0 	bl	800ee66 <fminf>
 80060e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80060ea:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 80060ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80060f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80060f6:	ee67 8aa8 	vmul.f32	s17, s15, s17
 80060fa:	ee70 8a28 	vadd.f32	s17, s0, s17
 80060fe:	eef4 9ae8 	vcmpe.f32	s19, s17
 8006102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006106:	bf94      	ite	ls
 8006108:	2301      	movls	r3, #1
 800610a:	2300      	movhi	r3, #0
 800610c:	edc4 8a11 	vstr	s17, [r4, #68]	; 0x44
 8006110:	edc6 8a01 	vstr	s17, [r6, #4]
 8006114:	7033      	strb	r3, [r6, #0]
 8006116:	f1b8 0f00 	cmp.w	r8, #0
 800611a:	d002      	beq.n	8006122 <acc_detector_presence_processing_next+0x1c6>
 800611c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800611e:	6133      	str	r3, [r6, #16]
 8006120:	81b7      	strh	r7, [r6, #12]
 8006122:	eef4 9ae8 	vcmpe.f32	s19, s17
 8006126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612a:	bf9c      	itt	ls
 800612c:	6ca3      	ldrls	r3, [r4, #72]	; 0x48
 800612e:	60b3      	strls	r3, [r6, #8]
 8006130:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8006134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006138:	4293      	cmp	r3, r2
 800613a:	bf1c      	itt	ne
 800613c:	3301      	addne	r3, #1
 800613e:	f8a4 304c 	strhne.w	r3, [r4, #76]	; 0x4c
 8006142:	b00b      	add	sp, #44	; 0x2c
 8006144:	ecbd 8b04 	vpop	{d8-d9}
 8006148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800614c:	4b07      	ldr	r3, [pc, #28]	; (800616c <acc_detector_presence_processing_next+0x210>)
 800614e:	4a0b      	ldr	r2, [pc, #44]	; (800617c <acc_detector_presence_processing_next+0x220>)
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	4908      	ldr	r1, [pc, #32]	; (8006174 <acc_detector_presence_processing_next+0x218>)
 8006154:	4798      	blx	r3
 8006156:	b00b      	add	sp, #44	; 0x2c
 8006158:	ecbd 8b04 	vpop	{d8-d9}
 800615c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006160:	f894 8040 	ldrb.w	r8, [r4, #64]	; 0x40
 8006164:	eddf 8a04 	vldr	s17, [pc, #16]	; 8006178 <acc_detector_presence_processing_next+0x21c>
 8006168:	46b9      	mov	r9, r7
 800616a:	e7a1      	b.n	80060b0 <acc_detector_presence_processing_next+0x154>
 800616c:	200007b0 	.word	0x200007b0
 8006170:	08011294 	.word	0x08011294
 8006174:	080111a0 	.word	0x080111a0
 8006178:	00000000 	.word	0x00000000
 800617c:	080112cc 	.word	0x080112cc

08006180 <acc_rss_activate>:
 8006180:	b510      	push	{r4, lr}
 8006182:	4c18      	ldr	r4, [pc, #96]	; (80061e4 <acc_rss_activate+0x64>)
 8006184:	7823      	ldrb	r3, [r4, #0]
 8006186:	b9c3      	cbnz	r3, 80061ba <acc_rss_activate+0x3a>
 8006188:	b1a8      	cbz	r0, 80061b6 <acc_rss_activate+0x36>
 800618a:	f001 fb29 	bl	80077e0 <acc_rss_integration_register>
 800618e:	b188      	cbz	r0, 80061b4 <acc_rss_activate+0x34>
 8006190:	f000 fade 	bl	8006750 <acc_service_manager_activate>
 8006194:	b1e8      	cbz	r0, 80061d2 <acc_rss_activate+0x52>
 8006196:	f003 fab1 	bl	80096fc <acc_sensor_manager_activate>
 800619a:	b1d0      	cbz	r0, 80061d2 <acc_rss_activate+0x52>
 800619c:	2301      	movs	r3, #1
 800619e:	7023      	strb	r3, [r4, #0]
 80061a0:	f001 fc1e 	bl	80079e0 <acc_rss_integration_log_level>
 80061a4:	2801      	cmp	r0, #1
 80061a6:	d905      	bls.n	80061b4 <acc_rss_activate+0x34>
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <acc_rss_activate+0x68>)
 80061aa:	4a10      	ldr	r2, [pc, #64]	; (80061ec <acc_rss_activate+0x6c>)
 80061ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ae:	4910      	ldr	r1, [pc, #64]	; (80061f0 <acc_rss_activate+0x70>)
 80061b0:	2002      	movs	r0, #2
 80061b2:	4798      	blx	r3
 80061b4:	7823      	ldrb	r3, [r4, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	f001 fc11 	bl	80079e0 <acc_rss_integration_log_level>
 80061be:	2801      	cmp	r0, #1
 80061c0:	d9f8      	bls.n	80061b4 <acc_rss_activate+0x34>
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <acc_rss_activate+0x68>)
 80061c4:	4a0b      	ldr	r2, [pc, #44]	; (80061f4 <acc_rss_activate+0x74>)
 80061c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c8:	4909      	ldr	r1, [pc, #36]	; (80061f0 <acc_rss_activate+0x70>)
 80061ca:	2002      	movs	r0, #2
 80061cc:	4798      	blx	r3
 80061ce:	7823      	ldrb	r3, [r4, #0]
 80061d0:	e7f1      	b.n	80061b6 <acc_rss_activate+0x36>
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <acc_rss_activate+0x68>)
 80061d4:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <acc_rss_activate+0x78>)
 80061d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d8:	4905      	ldr	r1, [pc, #20]	; (80061f0 <acc_rss_activate+0x70>)
 80061da:	2000      	movs	r0, #0
 80061dc:	4798      	blx	r3
 80061de:	7823      	ldrb	r3, [r4, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	bd10      	pop	{r4, pc}
 80061e4:	20000724 	.word	0x20000724
 80061e8:	200007b0 	.word	0x200007b0
 80061ec:	08011308 	.word	0x08011308
 80061f0:	08011328 	.word	0x08011328
 80061f4:	08011344 	.word	0x08011344
 80061f8:	0801132c 	.word	0x0801132c

080061fc <acc_rss_deactivate>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	4c0b      	ldr	r4, [pc, #44]	; (800622c <acc_rss_deactivate+0x30>)
 8006200:	7823      	ldrb	r3, [r4, #0]
 8006202:	b903      	cbnz	r3, 8006206 <acc_rss_deactivate+0xa>
 8006204:	bd10      	pop	{r4, pc}
 8006206:	f000 fb51 	bl	80068ac <acc_service_manager_deactivate>
 800620a:	f003 fab3 	bl	8009774 <acc_sensor_manager_deactivate>
 800620e:	f001 fbe7 	bl	80079e0 <acc_rss_integration_log_level>
 8006212:	2801      	cmp	r0, #1
 8006214:	d905      	bls.n	8006222 <acc_rss_deactivate+0x26>
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <acc_rss_deactivate+0x34>)
 8006218:	4a06      	ldr	r2, [pc, #24]	; (8006234 <acc_rss_deactivate+0x38>)
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	4906      	ldr	r1, [pc, #24]	; (8006238 <acc_rss_deactivate+0x3c>)
 800621e:	2002      	movs	r0, #2
 8006220:	4798      	blx	r3
 8006222:	f001 fb1d 	bl	8007860 <acc_rss_integration_unregister>
 8006226:	2300      	movs	r3, #0
 8006228:	7023      	strb	r3, [r4, #0]
 800622a:	bd10      	pop	{r4, pc}
 800622c:	20000724 	.word	0x20000724
 8006230:	200007b0 	.word	0x200007b0
 8006234:	0801136c 	.word	0x0801136c
 8006238:	08011328 	.word	0x08011328

0800623c <acc_service_maximize_signal_attenuation_set.part.0>:
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <acc_service_maximize_signal_attenuation_set.part.0+0xc>)
 800623e:	4a03      	ldr	r2, [pc, #12]	; (800624c <acc_service_maximize_signal_attenuation_set.part.0+0x10>)
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	4903      	ldr	r1, [pc, #12]	; (8006250 <acc_service_maximize_signal_attenuation_set.part.0+0x14>)
 8006244:	2001      	movs	r0, #1
 8006246:	4718      	bx	r3
 8006248:	200007b0 	.word	0x200007b0
 800624c:	08011110 	.word	0x08011110
 8006250:	08011390 	.word	0x08011390

08006254 <acc_service_get_base_configuration>:
 8006254:	b510      	push	{r4, lr}
 8006256:	4604      	mov	r4, r0
 8006258:	b108      	cbz	r0, 800625e <acc_service_get_base_configuration+0xa>
 800625a:	6900      	ldr	r0, [r0, #16]
 800625c:	bd10      	pop	{r4, pc}
 800625e:	f001 fbbf 	bl	80079e0 <acc_rss_integration_log_level>
 8006262:	2800      	cmp	r0, #0
 8006264:	d0fa      	beq.n	800625c <acc_service_get_base_configuration+0x8>
 8006266:	4b04      	ldr	r3, [pc, #16]	; (8006278 <acc_service_get_base_configuration+0x24>)
 8006268:	4a04      	ldr	r2, [pc, #16]	; (800627c <acc_service_get_base_configuration+0x28>)
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	4904      	ldr	r1, [pc, #16]	; (8006280 <acc_service_get_base_configuration+0x2c>)
 800626e:	2001      	movs	r0, #1
 8006270:	4798      	blx	r3
 8006272:	4620      	mov	r0, r4
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	200007b0 	.word	0x200007b0
 800627c:	08011110 	.word	0x08011110
 8006280:	08011390 	.word	0x08011390

08006284 <set_maximize_signal_attenuation>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	460d      	mov	r5, r1
 8006288:	4606      	mov	r6, r0
 800628a:	f7ff ffe3 	bl	8006254 <acc_service_get_base_configuration>
 800628e:	b158      	cbz	r0, 80062a8 <set_maximize_signal_attenuation+0x24>
 8006290:	4629      	mov	r1, r5
 8006292:	4604      	mov	r4, r0
 8006294:	f001 fe9c 	bl	8007fd0 <acc_base_configuration_maximize_signal_attenuation_set>
 8006298:	b93d      	cbnz	r5, 80062aa <set_maximize_signal_attenuation+0x26>
 800629a:	68b3      	ldr	r3, [r6, #8]
 800629c:	b123      	cbz	r3, 80062a8 <set_maximize_signal_attenuation+0x24>
 800629e:	7971      	ldrb	r1, [r6, #5]
 80062a0:	4630      	mov	r0, r6
 80062a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062a6:	4718      	bx	r3
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	4620      	mov	r0, r4
 80062ac:	210f      	movs	r1, #15
 80062ae:	f001 fd4d 	bl	8007d4c <acc_base_configuration_integrator_set>
 80062b2:	4620      	mov	r0, r4
 80062b4:	2101      	movs	r1, #1
 80062b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062ba:	f001 bd77 	b.w	8007dac <acc_base_configuration_integrator_ramp_up_set>
 80062be:	bf00      	nop

080062c0 <acc_service_activate>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	b120      	cbz	r0, 80062ce <acc_service_activate+0xe>
 80062c4:	4b1e      	ldr	r3, [pc, #120]	; (8006340 <acc_service_activate+0x80>)
 80062c6:	6802      	ldr	r2, [r0, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	4604      	mov	r4, r0
 80062cc:	d00c      	beq.n	80062e8 <acc_service_activate+0x28>
 80062ce:	4c1d      	ldr	r4, [pc, #116]	; (8006344 <acc_service_activate+0x84>)
 80062d0:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <acc_service_activate+0x88>)
 80062d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062d4:	491d      	ldr	r1, [pc, #116]	; (800634c <acc_service_activate+0x8c>)
 80062d6:	2000      	movs	r0, #0
 80062d8:	4798      	blx	r3
 80062da:	2000      	movs	r0, #0
 80062dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062de:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <acc_service_activate+0x90>)
 80062e0:	491a      	ldr	r1, [pc, #104]	; (800634c <acc_service_activate+0x8c>)
 80062e2:	4798      	blx	r3
 80062e4:	2000      	movs	r0, #0
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <acc_service_activate+0x94>)
 80062ea:	7818      	ldrb	r0, [r3, #0]
 80062ec:	b198      	cbz	r0, 8006316 <acc_service_activate+0x56>
 80062ee:	7a63      	ldrb	r3, [r4, #9]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f8      	beq.n	80062e6 <acc_service_activate+0x26>
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	2b2a      	cmp	r3, #42	; 0x2a
 80062f8:	d80d      	bhi.n	8006316 <acc_service_activate+0x56>
 80062fa:	4d17      	ldr	r5, [pc, #92]	; (8006358 <acc_service_activate+0x98>)
 80062fc:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 8006300:	b94a      	cbnz	r2, 8006316 <acc_service_activate+0x56>
 8006302:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8006306:	2101      	movs	r1, #1
 8006308:	7856      	ldrb	r6, [r2, #1]
 800630a:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 800630e:	b126      	cbz	r6, 800631a <acc_service_activate+0x5a>
 8006310:	2200      	movs	r2, #0
 8006312:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 8006316:	4c0b      	ldr	r4, [pc, #44]	; (8006344 <acc_service_activate+0x84>)
 8006318:	e7df      	b.n	80062da <acc_service_activate+0x1a>
 800631a:	f104 0018 	add.w	r0, r4, #24
 800631e:	f003 fb93 	bl	8009a48 <acc_sensor_manager_start_measurement>
 8006322:	6863      	ldr	r3, [r4, #4]
 8006324:	b138      	cbz	r0, 8006336 <acc_service_activate+0x76>
 8006326:	2b2a      	cmp	r3, #42	; 0x2a
 8006328:	d808      	bhi.n	800633c <acc_service_activate+0x7c>
 800632a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800632e:	7266      	strb	r6, [r4, #9]
 8006330:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 8006334:	bd70      	pop	{r4, r5, r6, pc}
 8006336:	2b2a      	cmp	r3, #42	; 0x2a
 8006338:	d8ed      	bhi.n	8006316 <acc_service_activate+0x56>
 800633a:	e7e9      	b.n	8006310 <acc_service_activate+0x50>
 800633c:	7266      	strb	r6, [r4, #9]
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	acc09ee8 	.word	0xacc09ee8
 8006344:	200007b0 	.word	0x200007b0
 8006348:	08011158 	.word	0x08011158
 800634c:	08011390 	.word	0x08011390
 8006350:	08011398 	.word	0x08011398
 8006354:	20000725 	.word	0x20000725
 8006358:	20000728 	.word	0x20000728

0800635c <acc_service_deactivate>:
 800635c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006360:	b120      	cbz	r0, 800636c <acc_service_deactivate+0x10>
 8006362:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <acc_service_deactivate+0x78>)
 8006364:	6802      	ldr	r2, [r0, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	4604      	mov	r4, r0
 800636a:	d00e      	beq.n	800638a <acc_service_deactivate+0x2e>
 800636c:	4c1a      	ldr	r4, [pc, #104]	; (80063d8 <acc_service_deactivate+0x7c>)
 800636e:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <acc_service_deactivate+0x80>)
 8006370:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006372:	491b      	ldr	r1, [pc, #108]	; (80063e0 <acc_service_deactivate+0x84>)
 8006374:	2000      	movs	r0, #0
 8006376:	4798      	blx	r3
 8006378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800637a:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <acc_service_deactivate+0x88>)
 800637c:	4918      	ldr	r1, [pc, #96]	; (80063e0 <acc_service_deactivate+0x84>)
 800637e:	2000      	movs	r0, #0
 8006380:	4798      	blx	r3
 8006382:	2500      	movs	r5, #0
 8006384:	4628      	mov	r0, r5
 8006386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800638a:	4b17      	ldr	r3, [pc, #92]	; (80063e8 <acc_service_deactivate+0x8c>)
 800638c:	781d      	ldrb	r5, [r3, #0]
 800638e:	b1dd      	cbz	r5, 80063c8 <acc_service_deactivate+0x6c>
 8006390:	7a43      	ldrb	r3, [r0, #9]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f6      	bne.n	8006384 <acc_service_deactivate+0x28>
 8006396:	6843      	ldr	r3, [r0, #4]
 8006398:	2b2a      	cmp	r3, #42	; 0x2a
 800639a:	d815      	bhi.n	80063c8 <acc_service_deactivate+0x6c>
 800639c:	4e13      	ldr	r6, [pc, #76]	; (80063ec <acc_service_deactivate+0x90>)
 800639e:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 80063a2:	b98f      	cbnz	r7, 80063c8 <acc_service_deactivate+0x6c>
 80063a4:	f04f 0801 	mov.w	r8, #1
 80063a8:	3018      	adds	r0, #24
 80063aa:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 80063ae:	f003 fb85 	bl	8009abc <acc_sensor_manager_stop_measurement>
 80063b2:	6863      	ldr	r3, [r4, #4]
 80063b4:	2b2a      	cmp	r3, #42	; 0x2a
 80063b6:	d809      	bhi.n	80063cc <acc_service_deactivate+0x70>
 80063b8:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 80063bc:	7057      	strb	r7, [r2, #1]
 80063be:	f884 8009 	strb.w	r8, [r4, #9]
 80063c2:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 80063c6:	e7dd      	b.n	8006384 <acc_service_deactivate+0x28>
 80063c8:	4c03      	ldr	r4, [pc, #12]	; (80063d8 <acc_service_deactivate+0x7c>)
 80063ca:	e7d5      	b.n	8006378 <acc_service_deactivate+0x1c>
 80063cc:	f884 8009 	strb.w	r8, [r4, #9]
 80063d0:	e7d8      	b.n	8006384 <acc_service_deactivate+0x28>
 80063d2:	bf00      	nop
 80063d4:	acc09ee8 	.word	0xacc09ee8
 80063d8:	200007b0 	.word	0x200007b0
 80063dc:	08011158 	.word	0x08011158
 80063e0:	08011390 	.word	0x08011390
 80063e4:	080113b4 	.word	0x080113b4
 80063e8:	20000725 	.word	0x20000725
 80063ec:	20000728 	.word	0x20000728

080063f0 <acc_service_requested_start_set>:
 80063f0:	b500      	push	{lr}
 80063f2:	b083      	sub	sp, #12
 80063f4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80063f8:	f7ff ff2c 	bl	8006254 <acc_service_get_base_configuration>
 80063fc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006400:	b003      	add	sp, #12
 8006402:	f85d eb04 	ldr.w	lr, [sp], #4
 8006406:	f001 bb99 	b.w	8007b3c <acc_base_configuration_requested_start_set>
 800640a:	bf00      	nop

0800640c <acc_service_requested_length_set>:
 800640c:	b500      	push	{lr}
 800640e:	b083      	sub	sp, #12
 8006410:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006414:	f7ff ff1e 	bl	8006254 <acc_service_get_base_configuration>
 8006418:	ed9d 0a01 	vldr	s0, [sp, #4]
 800641c:	b003      	add	sp, #12
 800641e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006422:	f001 bbad 	b.w	8007b80 <acc_base_configuration_requested_length_set>
 8006426:	bf00      	nop

08006428 <acc_service_repetition_mode_on_demand_set>:
 8006428:	b508      	push	{r3, lr}
 800642a:	f7ff ff13 	bl	8006254 <acc_service_get_base_configuration>
 800642e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006432:	f001 bbb7 	b.w	8007ba4 <acc_base_configuration_repetition_mode_on_demand_set>
 8006436:	bf00      	nop

08006438 <acc_service_power_save_mode_set>:
 8006438:	b500      	push	{lr}
 800643a:	b083      	sub	sp, #12
 800643c:	9101      	str	r1, [sp, #4]
 800643e:	f7ff ff09 	bl	8006254 <acc_service_get_base_configuration>
 8006442:	9901      	ldr	r1, [sp, #4]
 8006444:	b003      	add	sp, #12
 8006446:	f85d eb04 	ldr.w	lr, [sp], #4
 800644a:	f001 bbc1 	b.w	8007bd0 <acc_base_configuration_power_save_mode_set>
 800644e:	bf00      	nop

08006450 <acc_service_pipeline_destroy>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4604      	mov	r4, r0
 8006454:	6900      	ldr	r0, [r0, #16]
 8006456:	b118      	cbz	r0, 8006460 <acc_service_pipeline_destroy+0x10>
 8006458:	68c3      	ldr	r3, [r0, #12]
 800645a:	4798      	blx	r3
 800645c:	2300      	movs	r3, #0
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	bd10      	pop	{r4, pc}
 8006462:	bf00      	nop

08006464 <acc_service_get_next>:
 8006464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006468:	460e      	mov	r6, r1
 800646a:	b082      	sub	sp, #8
 800646c:	4604      	mov	r4, r0
 800646e:	b118      	cbz	r0, 8006478 <acc_service_get_next+0x14>
 8006470:	4b32      	ldr	r3, [pc, #200]	; (800653c <acc_service_get_next+0xd8>)
 8006472:	6802      	ldr	r2, [r0, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d02c      	beq.n	80064d2 <acc_service_get_next+0x6e>
 8006478:	4b31      	ldr	r3, [pc, #196]	; (8006540 <acc_service_get_next+0xdc>)
 800647a:	4a32      	ldr	r2, [pc, #200]	; (8006544 <acc_service_get_next+0xe0>)
 800647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647e:	4932      	ldr	r1, [pc, #200]	; (8006548 <acc_service_get_next+0xe4>)
 8006480:	2000      	movs	r0, #0
 8006482:	4798      	blx	r3
 8006484:	2300      	movs	r3, #0
 8006486:	7eb5      	ldrb	r5, [r6, #26]
 8006488:	b175      	cbz	r5, 80064a8 <acc_service_get_next+0x44>
 800648a:	6872      	ldr	r2, [r6, #4]
 800648c:	b10a      	cbz	r2, 8006492 <acc_service_get_next+0x2e>
 800648e:	68f2      	ldr	r2, [r6, #12]
 8006490:	b96a      	cbnz	r2, 80064ae <acc_service_get_next+0x4a>
 8006492:	4b2b      	ldr	r3, [pc, #172]	; (8006540 <acc_service_get_next+0xdc>)
 8006494:	4a2d      	ldr	r2, [pc, #180]	; (800654c <acc_service_get_next+0xe8>)
 8006496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006498:	492b      	ldr	r1, [pc, #172]	; (8006548 <acc_service_get_next+0xe4>)
 800649a:	2000      	movs	r0, #0
 800649c:	4798      	blx	r3
 800649e:	2500      	movs	r5, #0
 80064a0:	4628      	mov	r0, r5
 80064a2:	b002      	add	sp, #8
 80064a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a8:	68b2      	ldr	r2, [r6, #8]
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	d035      	beq.n	800651a <acc_service_get_next+0xb6>
 80064ae:	b923      	cbnz	r3, 80064ba <acc_service_get_next+0x56>
 80064b0:	2500      	movs	r5, #0
 80064b2:	4628      	mov	r0, r5
 80064b4:	b002      	add	sp, #8
 80064b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064ba:	7a23      	ldrb	r3, [r4, #8]
 80064bc:	7832      	ldrb	r2, [r6, #0]
 80064be:	4293      	cmp	r3, r2
 80064c0:	d009      	beq.n	80064d6 <acc_service_get_next+0x72>
 80064c2:	491f      	ldr	r1, [pc, #124]	; (8006540 <acc_service_get_next+0xdc>)
 80064c4:	9200      	str	r2, [sp, #0]
 80064c6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80064c8:	4a21      	ldr	r2, [pc, #132]	; (8006550 <acc_service_get_next+0xec>)
 80064ca:	491f      	ldr	r1, [pc, #124]	; (8006548 <acc_service_get_next+0xe4>)
 80064cc:	2000      	movs	r0, #0
 80064ce:	47a0      	blx	r4
 80064d0:	e7ee      	b.n	80064b0 <acc_service_get_next+0x4c>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e7d7      	b.n	8006486 <acc_service_get_next+0x22>
 80064d6:	7e37      	ldrb	r7, [r6, #24]
 80064d8:	bb4f      	cbnz	r7, 800652e <acc_service_get_next+0xca>
 80064da:	f894 8009 	ldrb.w	r8, [r4, #9]
 80064de:	f1b8 0f00 	cmp.w	r8, #0
 80064e2:	d00f      	beq.n	8006504 <acc_service_get_next+0xa0>
 80064e4:	4b16      	ldr	r3, [pc, #88]	; (8006540 <acc_service_get_next+0xdc>)
 80064e6:	4a1b      	ldr	r2, [pc, #108]	; (8006554 <acc_service_get_next+0xf0>)
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	4917      	ldr	r1, [pc, #92]	; (8006548 <acc_service_get_next+0xe4>)
 80064ec:	2000      	movs	r0, #0
 80064ee:	4798      	blx	r3
 80064f0:	2500      	movs	r5, #0
 80064f2:	2f00      	cmp	r7, #0
 80064f4:	d0dd      	beq.n	80064b2 <acc_service_get_next+0x4e>
 80064f6:	4620      	mov	r0, r4
 80064f8:	f7ff ff30 	bl	800635c <acc_service_deactivate>
 80064fc:	4628      	mov	r0, r5
 80064fe:	b002      	add	sp, #8
 8006500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	6166      	str	r6, [r4, #20]
 8006508:	e9d3 0200 	ldrd	r0, r2, [r3]
 800650c:	4790      	blx	r2
 800650e:	7e75      	ldrb	r5, [r6, #25]
 8006510:	f8c4 8014 	str.w	r8, [r4, #20]
 8006514:	f085 0501 	eor.w	r5, r5, #1
 8006518:	e7eb      	b.n	80064f2 <acc_service_get_next+0x8e>
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <acc_service_get_next+0xdc>)
 800651c:	4a0e      	ldr	r2, [pc, #56]	; (8006558 <acc_service_get_next+0xf4>)
 800651e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006520:	4909      	ldr	r1, [pc, #36]	; (8006548 <acc_service_get_next+0xe4>)
 8006522:	4628      	mov	r0, r5
 8006524:	4798      	blx	r3
 8006526:	4628      	mov	r0, r5
 8006528:	b002      	add	sp, #8
 800652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff fec6 	bl	80062c0 <acc_service_activate>
 8006534:	4607      	mov	r7, r0
 8006536:	2800      	cmp	r0, #0
 8006538:	d1cf      	bne.n	80064da <acc_service_get_next+0x76>
 800653a:	e7b9      	b.n	80064b0 <acc_service_get_next+0x4c>
 800653c:	acc09ee8 	.word	0xacc09ee8
 8006540:	200007b0 	.word	0x200007b0
 8006544:	08011158 	.word	0x08011158
 8006548:	08011390 	.word	0x08011390
 800654c:	080113d0 	.word	0x080113d0
 8006550:	08011408 	.word	0x08011408
 8006554:	08011424 	.word	0x08011424
 8006558:	080113f0 	.word	0x080113f0

0800655c <acc_service_send_data>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	9e06      	ldr	r6, [sp, #24]
 8006560:	6944      	ldr	r4, [r0, #20]
 8006562:	7835      	ldrb	r5, [r6, #0]
 8006564:	461f      	mov	r7, r3
 8006566:	b91d      	cbnz	r5, 8006570 <acc_service_send_data+0x14>
 8006568:	7ea5      	ldrb	r5, [r4, #26]
 800656a:	b95d      	cbnz	r5, 8006584 <acc_service_send_data+0x28>
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	6019      	str	r1, [r3, #0]
 8006570:	6920      	ldr	r0, [r4, #16]
 8006572:	7665      	strb	r5, [r4, #25]
 8006574:	b128      	cbz	r0, 8006582 <acc_service_send_data+0x26>
 8006576:	6962      	ldr	r2, [r4, #20]
 8006578:	4639      	mov	r1, r7
 800657a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800657e:	f005 be67 	b.w	800c250 <memcpy>
 8006582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006584:	68e3      	ldr	r3, [r4, #12]
 8006586:	6860      	ldr	r0, [r4, #4]
 8006588:	429a      	cmp	r2, r3
 800658a:	bf28      	it	cs
 800658c:	461a      	movcs	r2, r3
 800658e:	f005 fe5f 	bl	800c250 <memcpy>
 8006592:	7835      	ldrb	r5, [r6, #0]
 8006594:	e7ec      	b.n	8006570 <acc_service_send_data+0x14>
 8006596:	bf00      	nop

08006598 <acc_service_set_module_active>:
 8006598:	4b01      	ldr	r3, [pc, #4]	; (80065a0 <acc_service_set_module_active+0x8>)
 800659a:	7018      	strb	r0, [r3, #0]
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000725 	.word	0x20000725

080065a4 <acc_service_handle_valid>:
 80065a4:	b508      	push	{r3, lr}
 80065a6:	b118      	cbz	r0, 80065b0 <acc_service_handle_valid+0xc>
 80065a8:	6802      	ldr	r2, [r0, #0]
 80065aa:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <acc_service_handle_valid+0x20>)
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d007      	beq.n	80065c0 <acc_service_handle_valid+0x1c>
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <acc_service_handle_valid+0x24>)
 80065b2:	4a06      	ldr	r2, [pc, #24]	; (80065cc <acc_service_handle_valid+0x28>)
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	4906      	ldr	r1, [pc, #24]	; (80065d0 <acc_service_handle_valid+0x2c>)
 80065b8:	2000      	movs	r0, #0
 80065ba:	4798      	blx	r3
 80065bc:	2000      	movs	r0, #0
 80065be:	bd08      	pop	{r3, pc}
 80065c0:	2001      	movs	r0, #1
 80065c2:	bd08      	pop	{r3, pc}
 80065c4:	acc09ee8 	.word	0xacc09ee8
 80065c8:	200007b0 	.word	0x200007b0
 80065cc:	08011158 	.word	0x08011158
 80065d0:	08011390 	.word	0x08011390

080065d4 <acc_service_configuration_valid>:
 80065d4:	b508      	push	{r3, lr}
 80065d6:	b118      	cbz	r0, 80065e0 <acc_service_configuration_valid+0xc>
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <acc_service_configuration_valid+0x2c>)
 80065da:	6802      	ldr	r2, [r0, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d007      	beq.n	80065f0 <acc_service_configuration_valid+0x1c>
 80065e0:	4b08      	ldr	r3, [pc, #32]	; (8006604 <acc_service_configuration_valid+0x30>)
 80065e2:	4a09      	ldr	r2, [pc, #36]	; (8006608 <acc_service_configuration_valid+0x34>)
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	4909      	ldr	r1, [pc, #36]	; (800660c <acc_service_configuration_valid+0x38>)
 80065e8:	2000      	movs	r0, #0
 80065ea:	4798      	blx	r3
 80065ec:	2000      	movs	r0, #0
 80065ee:	bd08      	pop	{r3, pc}
 80065f0:	8b03      	ldrh	r3, [r0, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f4      	beq.n	80065e0 <acc_service_configuration_valid+0xc>
 80065f6:	6943      	ldr	r3, [r0, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f1      	beq.n	80065e0 <acc_service_configuration_valid+0xc>
 80065fc:	2001      	movs	r0, #1
 80065fe:	bd08      	pop	{r3, pc}
 8006600:	acc09dd7 	.word	0xacc09dd7
 8006604:	200007b0 	.word	0x200007b0
 8006608:	08011110 	.word	0x08011110
 800660c:	08011390 	.word	0x08011390

08006610 <acc_service_configuration_check>:
 8006610:	b508      	push	{r3, lr}
 8006612:	b118      	cbz	r0, 800661c <acc_service_configuration_check+0xc>
 8006614:	4b0d      	ldr	r3, [pc, #52]	; (800664c <acc_service_configuration_check+0x3c>)
 8006616:	6802      	ldr	r2, [r0, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d007      	beq.n	800662c <acc_service_configuration_check+0x1c>
 800661c:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <acc_service_configuration_check+0x40>)
 800661e:	4a0d      	ldr	r2, [pc, #52]	; (8006654 <acc_service_configuration_check+0x44>)
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	490d      	ldr	r1, [pc, #52]	; (8006658 <acc_service_configuration_check+0x48>)
 8006624:	2000      	movs	r0, #0
 8006626:	4798      	blx	r3
 8006628:	2000      	movs	r0, #0
 800662a:	bd08      	pop	{r3, pc}
 800662c:	8b03      	ldrh	r3, [r0, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0f4      	beq.n	800661c <acc_service_configuration_check+0xc>
 8006632:	6943      	ldr	r3, [r0, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f1      	beq.n	800661c <acc_service_configuration_check+0xc>
 8006638:	7943      	ldrb	r3, [r0, #5]
 800663a:	3b01      	subs	r3, #1
 800663c:	2b04      	cmp	r3, #4
 800663e:	d801      	bhi.n	8006644 <acc_service_configuration_check+0x34>
 8006640:	2001      	movs	r0, #1
 8006642:	bd08      	pop	{r3, pc}
 8006644:	4b02      	ldr	r3, [pc, #8]	; (8006650 <acc_service_configuration_check+0x40>)
 8006646:	4a05      	ldr	r2, [pc, #20]	; (800665c <acc_service_configuration_check+0x4c>)
 8006648:	e7ea      	b.n	8006620 <acc_service_configuration_check+0x10>
 800664a:	bf00      	nop
 800664c:	acc09dd7 	.word	0xacc09dd7
 8006650:	200007b0 	.word	0x200007b0
 8006654:	08011110 	.word	0x08011110
 8006658:	08011390 	.word	0x08011390
 800665c:	0801143c 	.word	0x0801143c

08006660 <acc_service_profile_set>:
 8006660:	b510      	push	{r4, lr}
 8006662:	b138      	cbz	r0, 8006674 <acc_service_profile_set+0x14>
 8006664:	6882      	ldr	r2, [r0, #8]
 8006666:	4604      	mov	r4, r0
 8006668:	b122      	cbz	r2, 8006674 <acc_service_profile_set+0x14>
 800666a:	7141      	strb	r1, [r0, #5]
 800666c:	4790      	blx	r2
 800666e:	7b23      	ldrb	r3, [r4, #12]
 8006670:	b943      	cbnz	r3, 8006684 <acc_service_profile_set+0x24>
 8006672:	bd10      	pop	{r4, pc}
 8006674:	f001 f9b4 	bl	80079e0 <acc_rss_integration_log_level>
 8006678:	2800      	cmp	r0, #0
 800667a:	d0fa      	beq.n	8006672 <acc_service_profile_set+0x12>
 800667c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006680:	f7ff bddc 	b.w	800623c <acc_service_maximize_signal_attenuation_set.part.0>
 8006684:	4620      	mov	r0, r4
 8006686:	2101      	movs	r1, #1
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f7ff bdfa 	b.w	8006284 <set_maximize_signal_attenuation>

08006690 <acc_service_maximize_signal_attenuation_set>:
 8006690:	b508      	push	{r3, lr}
 8006692:	b120      	cbz	r0, 800669e <acc_service_maximize_signal_attenuation_set+0xe>
 8006694:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006698:	7301      	strb	r1, [r0, #12]
 800669a:	f7ff bdf3 	b.w	8006284 <set_maximize_signal_attenuation>
 800669e:	f001 f99f 	bl	80079e0 <acc_rss_integration_log_level>
 80066a2:	b118      	cbz	r0, 80066ac <acc_service_maximize_signal_attenuation_set+0x1c>
 80066a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066a8:	f7ff bdc8 	b.w	800623c <acc_service_maximize_signal_attenuation_set.part.0>
 80066ac:	bd08      	pop	{r3, pc}
 80066ae:	bf00      	nop

080066b0 <acc_service_initialize_service_configuration>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	7101      	strb	r1, [r0, #4]
 80066b4:	6102      	str	r2, [r0, #16]
 80066b6:	9905      	ldr	r1, [sp, #20]
 80066b8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80066bc:	4d07      	ldr	r5, [pc, #28]	; (80066dc <acc_service_initialize_service_configuration+0x2c>)
 80066be:	6143      	str	r3, [r0, #20]
 80066c0:	4604      	mov	r4, r0
 80066c2:	6005      	str	r5, [r0, #0]
 80066c4:	6081      	str	r1, [r0, #8]
 80066c6:	8302      	strh	r2, [r0, #24]
 80066c8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80066cc:	f7ff ffc8 	bl	8006660 <acc_service_profile_set>
 80066d0:	4620      	mov	r0, r4
 80066d2:	2100      	movs	r1, #0
 80066d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d8:	f7ff bfda 	b.w	8006690 <acc_service_maximize_signal_attenuation_set>
 80066dc:	acc09dd7 	.word	0xacc09dd7

080066e0 <destroy_handle>:
 80066e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e4:	4e15      	ldr	r6, [pc, #84]	; (800673c <destroy_handle+0x5c>)
 80066e6:	4605      	mov	r5, r0
 80066e8:	6874      	ldr	r4, [r6, #4]
 80066ea:	f001 f979 	bl	80079e0 <acc_rss_integration_log_level>
 80066ee:	2803      	cmp	r0, #3
 80066f0:	d906      	bls.n	8006700 <destroy_handle+0x20>
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <destroy_handle+0x60>)
 80066f4:	686b      	ldr	r3, [r5, #4]
 80066f6:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80066f8:	4912      	ldr	r1, [pc, #72]	; (8006744 <destroy_handle+0x64>)
 80066fa:	4a13      	ldr	r2, [pc, #76]	; (8006748 <destroy_handle+0x68>)
 80066fc:	2004      	movs	r0, #4
 80066fe:	47b8      	blx	r7
 8006700:	b144      	cbz	r4, 8006714 <destroy_handle+0x34>
 8006702:	42ac      	cmp	r4, r5
 8006704:	d102      	bne.n	800670c <destroy_handle+0x2c>
 8006706:	e016      	b.n	8006736 <destroy_handle+0x56>
 8006708:	42a5      	cmp	r5, r4
 800670a:	d00d      	beq.n	8006728 <destroy_handle+0x48>
 800670c:	4623      	mov	r3, r4
 800670e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8006710:	2c00      	cmp	r4, #0
 8006712:	d1f9      	bne.n	8006708 <destroy_handle+0x28>
 8006714:	4a0a      	ldr	r2, [pc, #40]	; (8006740 <destroy_handle+0x60>)
 8006716:	686b      	ldr	r3, [r5, #4]
 8006718:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800671a:	490a      	ldr	r1, [pc, #40]	; (8006744 <destroy_handle+0x64>)
 800671c:	4a0b      	ldr	r2, [pc, #44]	; (800674c <destroy_handle+0x6c>)
 800671e:	46a4      	mov	ip, r4
 8006720:	2000      	movs	r0, #0
 8006722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	4760      	bx	ip
 8006728:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800672a:	655a      	str	r2, [r3, #84]	; 0x54
 800672c:	4628      	mov	r0, r5
 800672e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006732:	f001 b943 	b.w	80079bc <acc_rss_integration_mem_free>
 8006736:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006738:	6073      	str	r3, [r6, #4]
 800673a:	e7f7      	b.n	800672c <destroy_handle+0x4c>
 800673c:	20000780 	.word	0x20000780
 8006740:	200007b0 	.word	0x200007b0
 8006744:	08011478 	.word	0x08011478
 8006748:	08011454 	.word	0x08011454
 800674c:	08011488 	.word	0x08011488

08006750 <acc_service_manager_activate>:
 8006750:	b510      	push	{r4, lr}
 8006752:	4c05      	ldr	r4, [pc, #20]	; (8006768 <acc_service_manager_activate+0x18>)
 8006754:	7820      	ldrb	r0, [r4, #0]
 8006756:	b100      	cbz	r0, 800675a <acc_service_manager_activate+0xa>
 8006758:	bd10      	pop	{r4, pc}
 800675a:	2001      	movs	r0, #1
 800675c:	7020      	strb	r0, [r4, #0]
 800675e:	f7ff ff1b 	bl	8006598 <acc_service_set_module_active>
 8006762:	7820      	ldrb	r0, [r4, #0]
 8006764:	bd10      	pop	{r4, pc}
 8006766:	bf00      	nop
 8006768:	20000780 	.word	0x20000780

0800676c <acc_service_create>:
 800676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006770:	4e30      	ldr	r6, [pc, #192]	; (8006834 <acc_service_create+0xc8>)
 8006772:	7834      	ldrb	r4, [r6, #0]
 8006774:	2c00      	cmp	r4, #0
 8006776:	d041      	beq.n	80067fc <acc_service_create+0x90>
 8006778:	4605      	mov	r5, r0
 800677a:	f7ff ff2b 	bl	80065d4 <acc_service_configuration_valid>
 800677e:	b1a0      	cbz	r0, 80067aa <acc_service_create+0x3e>
 8006780:	692b      	ldr	r3, [r5, #16]
 8006782:	68df      	ldr	r7, [r3, #12]
 8006784:	1e7b      	subs	r3, r7, #1
 8006786:	2b29      	cmp	r3, #41	; 0x29
 8006788:	d84a      	bhi.n	8006820 <acc_service_create+0xb4>
 800678a:	7873      	ldrb	r3, [r6, #1]
 800678c:	b98b      	cbnz	r3, 80067b2 <acc_service_create+0x46>
 800678e:	6873      	ldr	r3, [r6, #4]
 8006790:	b913      	cbnz	r3, 8006798 <acc_service_create+0x2c>
 8006792:	e00e      	b.n	80067b2 <acc_service_create+0x46>
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	b163      	cbz	r3, 80067b2 <acc_service_create+0x46>
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	4297      	cmp	r7, r2
 800679c:	d1fa      	bne.n	8006794 <acc_service_create+0x28>
 800679e:	4b26      	ldr	r3, [pc, #152]	; (8006838 <acc_service_create+0xcc>)
 80067a0:	4a26      	ldr	r2, [pc, #152]	; (800683c <acc_service_create+0xd0>)
 80067a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a4:	4926      	ldr	r1, [pc, #152]	; (8006840 <acc_service_create+0xd4>)
 80067a6:	2000      	movs	r0, #0
 80067a8:	4798      	blx	r3
 80067aa:	2400      	movs	r4, #0
 80067ac:	4620      	mov	r0, r4
 80067ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b2:	8b2c      	ldrh	r4, [r5, #24]
 80067b4:	f001 f914 	bl	80079e0 <acc_rss_integration_log_level>
 80067b8:	2803      	cmp	r0, #3
 80067ba:	d907      	bls.n	80067cc <acc_service_create+0x60>
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <acc_service_create+0xcc>)
 80067be:	4a21      	ldr	r2, [pc, #132]	; (8006844 <acc_service_create+0xd8>)
 80067c0:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80067c4:	491e      	ldr	r1, [pc, #120]	; (8006840 <acc_service_create+0xd4>)
 80067c6:	463b      	mov	r3, r7
 80067c8:	2004      	movs	r0, #4
 80067ca:	47c0      	blx	r8
 80067cc:	4621      	mov	r1, r4
 80067ce:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <acc_service_create+0xd4>)
 80067d0:	23bd      	movs	r3, #189	; 0xbd
 80067d2:	2001      	movs	r0, #1
 80067d4:	f001 f8d2 	bl	800797c <acc_rss_integration_mem_calloc_debug>
 80067d8:	4604      	mov	r4, r0
 80067da:	2800      	cmp	r0, #0
 80067dc:	d0e5      	beq.n	80067aa <acc_service_create+0x3e>
 80067de:	6873      	ldr	r3, [r6, #4]
 80067e0:	4a19      	ldr	r2, [pc, #100]	; (8006848 <acc_service_create+0xdc>)
 80067e2:	6047      	str	r7, [r0, #4]
 80067e4:	6002      	str	r2, [r0, #0]
 80067e6:	6543      	str	r3, [r0, #84]	; 0x54
 80067e8:	6070      	str	r0, [r6, #4]
 80067ea:	696b      	ldr	r3, [r5, #20]
 80067ec:	4629      	mov	r1, r5
 80067ee:	4798      	blx	r3
 80067f0:	b168      	cbz	r0, 800680e <acc_service_create+0xa2>
 80067f2:	2301      	movs	r3, #1
 80067f4:	7263      	strb	r3, [r4, #9]
 80067f6:	4620      	mov	r0, r4
 80067f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067fc:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <acc_service_create+0xcc>)
 80067fe:	4a13      	ldr	r2, [pc, #76]	; (800684c <acc_service_create+0xe0>)
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	490f      	ldr	r1, [pc, #60]	; (8006840 <acc_service_create+0xd4>)
 8006804:	4620      	mov	r0, r4
 8006806:	4798      	blx	r3
 8006808:	4620      	mov	r0, r4
 800680a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	b10b      	cbz	r3, 8006816 <acc_service_create+0xaa>
 8006812:	4620      	mov	r0, r4
 8006814:	4798      	blx	r3
 8006816:	4620      	mov	r0, r4
 8006818:	f7ff ff62 	bl	80066e0 <destroy_handle>
 800681c:	2400      	movs	r4, #0
 800681e:	e7c5      	b.n	80067ac <acc_service_create+0x40>
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <acc_service_create+0xcc>)
 8006822:	4a0b      	ldr	r2, [pc, #44]	; (8006850 <acc_service_create+0xe4>)
 8006824:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006826:	4906      	ldr	r1, [pc, #24]	; (8006840 <acc_service_create+0xd4>)
 8006828:	232a      	movs	r3, #42	; 0x2a
 800682a:	2000      	movs	r0, #0
 800682c:	47a0      	blx	r4
 800682e:	2400      	movs	r4, #0
 8006830:	e7bc      	b.n	80067ac <acc_service_create+0x40>
 8006832:	bf00      	nop
 8006834:	20000780 	.word	0x20000780
 8006838:	200007b0 	.word	0x200007b0
 800683c:	0801151c 	.word	0x0801151c
 8006840:	08011478 	.word	0x08011478
 8006844:	080114e8 	.word	0x080114e8
 8006848:	acc09ee8 	.word	0xacc09ee8
 800684c:	08011508 	.word	0x08011508
 8006850:	080114bc 	.word	0x080114bc

08006854 <acc_service_destroy>:
 8006854:	4b11      	ldr	r3, [pc, #68]	; (800689c <acc_service_destroy+0x48>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	b510      	push	{r4, lr}
 800685a:	b133      	cbz	r3, 800686a <acc_service_destroy+0x16>
 800685c:	4604      	mov	r4, r0
 800685e:	b118      	cbz	r0, 8006868 <acc_service_destroy+0x14>
 8006860:	6800      	ldr	r0, [r0, #0]
 8006862:	f7ff fe9f 	bl	80065a4 <acc_service_handle_valid>
 8006866:	b960      	cbnz	r0, 8006882 <acc_service_destroy+0x2e>
 8006868:	bd10      	pop	{r4, pc}
 800686a:	f001 f8b9 	bl	80079e0 <acc_rss_integration_log_level>
 800686e:	2800      	cmp	r0, #0
 8006870:	d0fa      	beq.n	8006868 <acc_service_destroy+0x14>
 8006872:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <acc_service_destroy+0x4c>)
 8006874:	4a0b      	ldr	r2, [pc, #44]	; (80068a4 <acc_service_destroy+0x50>)
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	490b      	ldr	r1, [pc, #44]	; (80068a8 <acc_service_destroy+0x54>)
 800687a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800687e:	2001      	movs	r0, #1
 8006880:	4718      	bx	r3
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	f7ff fd6a 	bl	800635c <acc_service_deactivate>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	68c3      	ldr	r3, [r0, #12]
 800688c:	b10b      	cbz	r3, 8006892 <acc_service_destroy+0x3e>
 800688e:	4798      	blx	r3
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	f7ff ff25 	bl	80066e0 <destroy_handle>
 8006896:	2300      	movs	r3, #0
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd10      	pop	{r4, pc}
 800689c:	20000780 	.word	0x20000780
 80068a0:	200007b0 	.word	0x200007b0
 80068a4:	08011508 	.word	0x08011508
 80068a8:	08011478 	.word	0x08011478

080068ac <acc_service_manager_deactivate>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4c0e      	ldr	r4, [pc, #56]	; (80068e8 <acc_service_manager_deactivate+0x3c>)
 80068b0:	7823      	ldrb	r3, [r4, #0]
 80068b2:	b1bb      	cbz	r3, 80068e4 <acc_service_manager_deactivate+0x38>
 80068b4:	6863      	ldr	r3, [r4, #4]
 80068b6:	b17b      	cbz	r3, 80068d8 <acc_service_manager_deactivate+0x2c>
 80068b8:	1d25      	adds	r5, r4, #4
 80068ba:	4628      	mov	r0, r5
 80068bc:	f7ff ffca 	bl	8006854 <acc_service_destroy>
 80068c0:	6863      	ldr	r3, [r4, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f9      	bne.n	80068ba <acc_service_manager_deactivate+0xe>
 80068c6:	f001 f88b 	bl	80079e0 <acc_rss_integration_log_level>
 80068ca:	b128      	cbz	r0, 80068d8 <acc_service_manager_deactivate+0x2c>
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <acc_service_manager_deactivate+0x40>)
 80068ce:	4a08      	ldr	r2, [pc, #32]	; (80068f0 <acc_service_manager_deactivate+0x44>)
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	4908      	ldr	r1, [pc, #32]	; (80068f4 <acc_service_manager_deactivate+0x48>)
 80068d4:	2001      	movs	r0, #1
 80068d6:	4798      	blx	r3
 80068d8:	2000      	movs	r0, #0
 80068da:	7020      	strb	r0, [r4, #0]
 80068dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068e0:	f7ff be5a 	b.w	8006598 <acc_service_set_module_active>
 80068e4:	bd38      	pop	{r3, r4, r5, pc}
 80068e6:	bf00      	nop
 80068e8:	20000780 	.word	0x20000780
 80068ec:	200007b0 	.word	0x200007b0
 80068f0:	08011544 	.word	0x08011544
 80068f4:	08011478 	.word	0x08011478

080068f8 <sparse_send_data>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	460b      	mov	r3, r1
 80068fc:	b084      	sub	sp, #16
 80068fe:	ad02      	add	r5, sp, #8
 8006900:	795c      	ldrb	r4, [r3, #5]
 8006902:	9500      	str	r5, [sp, #0]
 8006904:	791e      	ldrb	r6, [r3, #4]
 8006906:	799d      	ldrb	r5, [r3, #6]
 8006908:	f88d 400c 	strb.w	r4, [sp, #12]
 800690c:	4601      	mov	r1, r0
 800690e:	4610      	mov	r0, r2
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	f88d 4008 	strb.w	r4, [sp, #8]
 8006916:	ab03      	add	r3, sp, #12
 8006918:	f88d 600d 	strb.w	r6, [sp, #13]
 800691c:	f88d 500e 	strb.w	r5, [sp, #14]
 8006920:	f7ff fe1c 	bl	800655c <acc_service_send_data>
 8006924:	b004      	add	sp, #16
 8006926:	bd70      	pop	{r4, r5, r6, pc}

08006928 <sparse_create_service>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	b0a2      	sub	sp, #136	; 0x88
 800692c:	4605      	mov	r5, r0
 800692e:	2284      	movs	r2, #132	; 0x84
 8006930:	a801      	add	r0, sp, #4
 8006932:	460e      	mov	r6, r1
 8006934:	f005 fc8c 	bl	800c250 <memcpy>
 8006938:	a801      	add	r0, sp, #4
 800693a:	f7ff fe69 	bl	8006610 <acc_service_configuration_check>
 800693e:	b910      	cbnz	r0, 8006946 <sparse_create_service+0x1e>
 8006940:	2000      	movs	r0, #0
 8006942:	b022      	add	sp, #136	; 0x88
 8006944:	bd70      	pop	{r4, r5, r6, pc}
 8006946:	a808      	add	r0, sp, #32
 8006948:	f001 fc54 	bl	80081f4 <acc_base_configuration_check>
 800694c:	2800      	cmp	r0, #0
 800694e:	d0f7      	beq.n	8006940 <sparse_create_service+0x18>
 8006950:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 8006954:	b1ec      	cbz	r4, 8006992 <sparse_create_service+0x6a>
 8006956:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800695a:	2b01      	cmp	r3, #1
 800695c:	d012      	beq.n	8006984 <sparse_create_service+0x5c>
 800695e:	7933      	ldrb	r3, [r6, #4]
 8006960:	722b      	strb	r3, [r5, #8]
 8006962:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <sparse_create_service+0x78>)
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	aa08      	add	r2, sp, #32
 8006968:	462b      	mov	r3, r5
 800696a:	4669      	mov	r1, sp
 800696c:	f105 0018 	add.w	r0, r5, #24
 8006970:	f001 fcde 	bl	8008330 <acc_pipeline_direct_assemble>
 8006974:	4a0b      	ldr	r2, [pc, #44]	; (80069a4 <sparse_create_service+0x7c>)
 8006976:	6128      	str	r0, [r5, #16]
 8006978:	3800      	subs	r0, #0
 800697a:	bf18      	it	ne
 800697c:	2001      	movne	r0, #1
 800697e:	60ea      	str	r2, [r5, #12]
 8006980:	b022      	add	sp, #136	; 0x88
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	d9e8      	bls.n	800695e <sparse_create_service+0x36>
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <sparse_create_service+0x80>)
 800698e:	4a07      	ldr	r2, [pc, #28]	; (80069ac <sparse_create_service+0x84>)
 8006990:	e001      	b.n	8006996 <sparse_create_service+0x6e>
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <sparse_create_service+0x80>)
 8006994:	4a06      	ldr	r2, [pc, #24]	; (80069b0 <sparse_create_service+0x88>)
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	4906      	ldr	r1, [pc, #24]	; (80069b4 <sparse_create_service+0x8c>)
 800699a:	2000      	movs	r0, #0
 800699c:	4798      	blx	r3
 800699e:	e7cf      	b.n	8006940 <sparse_create_service+0x18>
 80069a0:	080068f9 	.word	0x080068f9
 80069a4:	08006451 	.word	0x08006451
 80069a8:	200007b0 	.word	0x200007b0
 80069ac:	080115d0 	.word	0x080115d0
 80069b0:	08011590 	.word	0x08011590
 80069b4:	080115c0 	.word	0x080115c0

080069b8 <get_sparse_configuration>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	b120      	cbz	r0, 80069c8 <get_sparse_configuration+0x10>
 80069be:	7903      	ldrb	r3, [r0, #4]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d000      	beq.n	80069c6 <get_sparse_configuration+0xe>
 80069c4:	2000      	movs	r0, #0
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	f001 f80a 	bl	80079e0 <acc_rss_integration_log_level>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d0f9      	beq.n	80069c4 <get_sparse_configuration+0xc>
 80069d0:	4b03      	ldr	r3, [pc, #12]	; (80069e0 <get_sparse_configuration+0x28>)
 80069d2:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <get_sparse_configuration+0x2c>)
 80069d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d6:	4904      	ldr	r1, [pc, #16]	; (80069e8 <get_sparse_configuration+0x30>)
 80069d8:	2001      	movs	r0, #1
 80069da:	4798      	blx	r3
 80069dc:	4620      	mov	r0, r4
 80069de:	bd10      	pop	{r4, pc}
 80069e0:	200007b0 	.word	0x200007b0
 80069e4:	08011110 	.word	0x08011110
 80069e8:	080115c0 	.word	0x080115c0

080069ec <set_configuration_for_profile>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	460c      	mov	r4, r1
 80069f2:	f7ff ffe1 	bl	80069b8 <get_sparse_configuration>
 80069f6:	b140      	cbz	r0, 8006a0a <set_configuration_for_profile+0x1e>
 80069f8:	1e61      	subs	r1, r4, #1
 80069fa:	301c      	adds	r0, #28
 80069fc:	2904      	cmp	r1, #4
 80069fe:	d804      	bhi.n	8006a0a <set_configuration_for_profile+0x1e>
 8006a00:	e8df f001 	tbb	[pc, r1]
 8006a04:	31261b10 	.word	0x31261b10
 8006a08:	05          	.byte	0x05
 8006a09:	00          	.byte	0x00
 8006a0a:	b002      	add	sp, #8
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	2110      	movs	r1, #16
 8006a10:	9001      	str	r0, [sp, #4]
 8006a12:	f001 f9b3 	bl	8007d7c <acc_base_configuration_wg_duration_set>
 8006a16:	9801      	ldr	r0, [sp, #4]
 8006a18:	2106      	movs	r1, #6
 8006a1a:	b002      	add	sp, #8
 8006a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a20:	f001 b994 	b.w	8007d4c <acc_base_configuration_integrator_set>
 8006a24:	2100      	movs	r1, #0
 8006a26:	9001      	str	r0, [sp, #4]
 8006a28:	f001 f9a8 	bl	8007d7c <acc_base_configuration_wg_duration_set>
 8006a2c:	9801      	ldr	r0, [sp, #4]
 8006a2e:	2100      	movs	r1, #0
 8006a30:	b002      	add	sp, #8
 8006a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a36:	f001 b989 	b.w	8007d4c <acc_base_configuration_integrator_set>
 8006a3a:	2107      	movs	r1, #7
 8006a3c:	9001      	str	r0, [sp, #4]
 8006a3e:	f001 f99d 	bl	8007d7c <acc_base_configuration_wg_duration_set>
 8006a42:	9801      	ldr	r0, [sp, #4]
 8006a44:	2100      	movs	r1, #0
 8006a46:	b002      	add	sp, #8
 8006a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a4c:	f001 b97e 	b.w	8007d4c <acc_base_configuration_integrator_set>
 8006a50:	2109      	movs	r1, #9
 8006a52:	9001      	str	r0, [sp, #4]
 8006a54:	f001 f992 	bl	8007d7c <acc_base_configuration_wg_duration_set>
 8006a58:	9801      	ldr	r0, [sp, #4]
 8006a5a:	2103      	movs	r1, #3
 8006a5c:	b002      	add	sp, #8
 8006a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a62:	f001 b973 	b.w	8007d4c <acc_base_configuration_integrator_set>
 8006a66:	210c      	movs	r1, #12
 8006a68:	e7d2      	b.n	8006a10 <set_configuration_for_profile+0x24>
 8006a6a:	bf00      	nop

08006a6c <acc_service_sparse_configuration_create>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4a3d      	ldr	r2, [pc, #244]	; (8006b64 <acc_service_sparse_configuration_create+0xf8>)
 8006a70:	b084      	sub	sp, #16
 8006a72:	2360      	movs	r3, #96	; 0x60
 8006a74:	2184      	movs	r1, #132	; 0x84
 8006a76:	2001      	movs	r0, #1
 8006a78:	f000 ff80 	bl	800797c <acc_rss_integration_mem_calloc_debug>
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d06d      	beq.n	8006b5e <acc_service_sparse_configuration_create+0xf2>
 8006a82:	4939      	ldr	r1, [pc, #228]	; (8006b68 <acc_service_sparse_configuration_create+0xfc>)
 8006a84:	f100 041c 	add.w	r4, r0, #28
 8006a88:	2602      	movs	r6, #2
 8006a8a:	2358      	movs	r3, #88	; 0x58
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	e9cd 3100 	strd	r3, r1, [sp]
 8006a92:	9602      	str	r6, [sp, #8]
 8006a94:	4b35      	ldr	r3, [pc, #212]	; (8006b6c <acc_service_sparse_configuration_create+0x100>)
 8006a96:	2103      	movs	r1, #3
 8006a98:	f7ff fe0a 	bl	80066b0 <acc_service_initialize_service_configuration>
 8006a9c:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8006b70 <acc_service_sparse_configuration_create+0x104>
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f001 f84b 	bl	8007b3c <acc_base_configuration_requested_start_set>
 8006aa6:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8006b74 <acc_service_sparse_configuration_create+0x108>
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f001 f868 	bl	8007b80 <acc_base_configuration_requested_length_set>
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	2106      	movs	r1, #6
 8006ab4:	f001 fac0 	bl	8008038 <acc_base_configuration_mur_set>
 8006ab8:	2101      	movs	r1, #1
 8006aba:	4620      	mov	r0, r4
 8006abc:	f001 f822 	bl	8007b04 <acc_base_configuration_sensor_set>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f001 f86f 	bl	8007ba4 <acc_base_configuration_repetition_mode_on_demand_set>
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f001 f881 	bl	8007bd0 <acc_base_configuration_power_save_mode_set>
 8006ace:	4620      	mov	r0, r4
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	f001 f99b 	bl	8007e0c <acc_base_configuration_use_point_range_set>
 8006ad6:	2110      	movs	r1, #16
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f001 f9d3 	bl	8007e84 <acc_base_configuration_sparse_sweeps_per_frame_set>
 8006ade:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8006b78 <acc_service_sparse_configuration_create+0x10c>
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f001 f9e6 	bl	8007eb4 <acc_base_configuration_sparse_sweep_rate_set>
 8006ae8:	4620      	mov	r0, r4
 8006aea:	2100      	movs	r1, #0
 8006aec:	f001 f982 	bl	8007df4 <acc_base_configuration_sweep_type_debug_set>
 8006af0:	4620      	mov	r0, r4
 8006af2:	2100      	movs	r1, #0
 8006af4:	f001 f884 	bl	8007c00 <acc_base_configuration_tx_disable_set>
 8006af8:	4620      	mov	r0, r4
 8006afa:	2100      	movs	r1, #0
 8006afc:	f001 f898 	bl	8007c30 <acc_base_configuration_decrease_tx_emission_set>
 8006b00:	2200      	movs	r2, #0
 8006b02:	4611      	mov	r1, r2
 8006b04:	2340      	movs	r3, #64	; 0x40
 8006b06:	4620      	mov	r0, r4
 8006b08:	f001 fa84 	bl	8008014 <acc_base_configuration_cca_set>
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	21ff      	movs	r1, #255	; 0xff
 8006b10:	f001 f9a0 	bl	8007e54 <acc_base_configuration_staggered_vga_stabilization_time_set>
 8006b14:	4620      	mov	r0, r4
 8006b16:	2100      	movs	r1, #0
 8006b18:	f001 f990 	bl	8007e3c <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	2101      	movs	r1, #1
 8006b20:	f001 f9f6 	bl	8007f10 <acc_base_configuration_downsampling_factor_set>
 8006b24:	4620      	mov	r0, r4
 8006b26:	2101      	movs	r1, #1
 8006b28:	f001 f958 	bl	8007ddc <acc_base_configuration_sampling_mode_set>
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	210b      	movs	r1, #11
 8006b30:	f001 f8f4 	bl	8007d1c <acc_base_configuration_gain_set>
 8006b34:	4620      	mov	r0, r4
 8006b36:	210a      	movs	r1, #10
 8006b38:	f001 f892 	bl	8007c60 <acc_base_configuration_hw_accelerated_average_samples_set>
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	2100      	movs	r1, #0
 8006b40:	f001 f9fe 	bl	8007f40 <acc_base_configuration_noise_level_normalization_set>
 8006b44:	4620      	mov	r0, r4
 8006b46:	2101      	movs	r1, #1
 8006b48:	f001 fa1e 	bl	8007f88 <acc_base_configuration_asynchronous_measurement_set>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b52:	f001 fa31 	bl	8007fb8 <acc_base_configuration_min_pipeline_memory_size_set>
 8006b56:	4909      	ldr	r1, [pc, #36]	; (8006b7c <acc_service_sparse_configuration_create+0x110>)
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f001 f88d 	bl	8007c78 <acc_base_configuration_radar_engine_creation_set>
 8006b5e:	4628      	mov	r0, r5
 8006b60:	b004      	add	sp, #16
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	080115c0 	.word	0x080115c0
 8006b68:	080069ed 	.word	0x080069ed
 8006b6c:	08006929 	.word	0x08006929
 8006b70:	3e4ccccd 	.word	0x3e4ccccd
 8006b74:	3e99999a 	.word	0x3e99999a
 8006b78:	00000000 	.word	0x00000000
 8006b7c:	08009365 	.word	0x08009365

08006b80 <acc_service_sparse_configuration_destroy>:
 8006b80:	b130      	cbz	r0, 8006b90 <acc_service_sparse_configuration_destroy+0x10>
 8006b82:	b510      	push	{r4, lr}
 8006b84:	4604      	mov	r4, r0
 8006b86:	6800      	ldr	r0, [r0, #0]
 8006b88:	f7ff fd24 	bl	80065d4 <acc_service_configuration_valid>
 8006b8c:	b908      	cbnz	r0, 8006b92 <acc_service_sparse_configuration_destroy+0x12>
 8006b8e:	bd10      	pop	{r4, pc}
 8006b90:	4770      	bx	lr
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	f7ff ff10 	bl	80069b8 <get_sparse_configuration>
 8006b98:	f000 ff10 	bl	80079bc <acc_rss_integration_mem_free>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	bd10      	pop	{r4, pc}
 8006ba2:	bf00      	nop

08006ba4 <acc_service_sparse_configuration_sweeps_per_frame_set>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	4604      	mov	r4, r0
 8006baa:	f7ff fd13 	bl	80065d4 <acc_service_configuration_valid>
 8006bae:	b900      	cbnz	r0, 8006bb2 <acc_service_sparse_configuration_sweeps_per_frame_set+0xe>
 8006bb0:	bd38      	pop	{r3, r4, r5, pc}
 8006bb2:	6920      	ldr	r0, [r4, #16]
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bba:	f001 b963 	b.w	8007e84 <acc_base_configuration_sparse_sweeps_per_frame_set>
 8006bbe:	bf00      	nop

08006bc0 <acc_service_sparse_get_metadata>:
 8006bc0:	b110      	cbz	r0, 8006bc8 <acc_service_sparse_get_metadata+0x8>
 8006bc2:	7a03      	ldrb	r3, [r0, #8]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d000      	beq.n	8006bca <acc_service_sparse_get_metadata+0xa>
 8006bc8:	4770      	bx	lr
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	d0fc      	beq.n	8006bc8 <acc_service_sparse_get_metadata+0x8>
 8006bce:	6903      	ldr	r3, [r0, #16]
 8006bd0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006c04 <acc_service_sparse_get_metadata+0x44>
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	edd3 7a08 	vldr	s15, [r3, #32]
 8006bda:	6998      	ldr	r0, [r3, #24]
 8006bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006be2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bea:	b410      	push	{r4}
 8006bec:	695c      	ldr	r4, [r3, #20]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf0:	810b      	strh	r3, [r1, #8]
 8006bf2:	600c      	str	r4, [r1, #0]
 8006bf4:	6048      	str	r0, [r1, #4]
 8006bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bfa:	edc1 7a04 	vstr	s15, [r1, #16]
 8006bfe:	60ca      	str	r2, [r1, #12]
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	4d8ef3c2 	.word	0x4d8ef3c2

08006c08 <acc_service_sparse_get_next_by_reference>:
 8006c08:	b909      	cbnz	r1, 8006c0e <acc_service_sparse_get_next_by_reference+0x6>
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4770      	bx	lr
 8006c0e:	b530      	push	{r4, r5, lr}
 8006c10:	b089      	sub	sp, #36	; 0x24
 8006c12:	2300      	movs	r3, #0
 8006c14:	680d      	ldr	r5, [r1, #0]
 8006c16:	9103      	str	r1, [sp, #12]
 8006c18:	2403      	movs	r4, #3
 8006c1a:	a901      	add	r1, sp, #4
 8006c1c:	9502      	str	r5, [sp, #8]
 8006c1e:	9205      	str	r2, [sp, #20]
 8006c20:	f88d 4004 	strb.w	r4, [sp, #4]
 8006c24:	9406      	str	r4, [sp, #24]
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006c2c:	f88d 301e 	strb.w	r3, [sp, #30]
 8006c30:	f7ff fc18 	bl	8006464 <acc_service_get_next>
 8006c34:	b009      	add	sp, #36	; 0x24
 8006c36:	bd30      	pop	{r4, r5, pc}

08006c38 <quarter_pi_cos_sin_f32>:
 8006c38:	eddf 7a20 	vldr	s15, [pc, #128]	; 8006cbc <quarter_pi_cos_sin_f32+0x84>
 8006c3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c44:	d436      	bmi.n	8006cb4 <quarter_pi_cos_sin_f32+0x7c>
 8006c46:	b1e0      	cbz	r0, 8006c82 <quarter_pi_cos_sin_f32+0x4a>
 8006c48:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c4c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006cc0 <quarter_pi_cos_sin_f32+0x88>
 8006c50:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006cc4 <quarter_pi_cos_sin_f32+0x8c>
 8006c54:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8006cc8 <quarter_pi_cos_sin_f32+0x90>
 8006c58:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006c5c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006c68:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006c6c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006c70:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006c74:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006c78:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006c7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c80:	4770      	bx	lr
 8006c82:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006c86:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006ccc <quarter_pi_cos_sin_f32+0x94>
 8006c8a:	eddf 5a11 	vldr	s11, [pc, #68]	; 8006cd0 <quarter_pi_cos_sin_f32+0x98>
 8006c8e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8006cd4 <quarter_pi_cos_sin_f32+0x9c>
 8006c92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ca2:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006cb2:	4770      	bx	lr
 8006cb4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006cd8 <quarter_pi_cos_sin_f32+0xa0>
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	bf490fdb 	.word	0xbf490fdb
 8006cc0:	37cd1800 	.word	0x37cd1800
 8006cc4:	3ab606a0 	.word	0x3ab606a0
 8006cc8:	3d2aaaa6 	.word	0x3d2aaaa6
 8006ccc:	b94c909b 	.word	0xb94c909b
 8006cd0:	3c088366 	.word	0x3c088366
 8006cd4:	3e2aaaa2 	.word	0x3e2aaaa2
 8006cd8:	7fc00000 	.word	0x7fc00000

08006cdc <restricted_cos_sin_f32>:
 8006cdc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006d04 <restricted_cos_sin_f32+0x28>
 8006ce0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006d08 <restricted_cos_sin_f32+0x2c>
 8006ce4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006ce8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf4:	bf5c      	itt	pl
 8006cf6:	f080 0001 	eorpl.w	r0, r0, #1
 8006cfa:	eeb0 0a67 	vmovpl.f32	s0, s15
 8006cfe:	f7ff bf9b 	b.w	8006c38 <quarter_pi_cos_sin_f32>
 8006d02:	bf00      	nop
 8006d04:	3fc90fdb 	.word	0x3fc90fdb
 8006d08:	333bbd2e 	.word	0x333bbd2e

08006d0c <acc_alg_basic_math_restricted_sin_f32>:
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f7ff bfe5 	b.w	8006cdc <restricted_cos_sin_f32>
 8006d12:	bf00      	nop

08006d14 <apply_spatial_smoothing>:
 8006d14:	b931      	cbnz	r1, 8006d24 <apply_spatial_smoothing+0x10>
 8006d16:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006d88 <apply_spatial_smoothing+0x74>
 8006d1a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006d1e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006d22:	4770      	bx	lr
 8006d24:	b410      	push	{r4}
 8006d26:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006d88 <apply_spatial_smoothing+0x74>
 8006d2a:	edd0 7a00 	vldr	s15, [r0]
 8006d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d32:	1f03      	subs	r3, r0, #4
 8006d34:	eef0 6a47 	vmov.f32	s13, s14
 8006d38:	2200      	movs	r2, #0
 8006d3a:	1c54      	adds	r4, r2, #1
 8006d3c:	42a1      	cmp	r1, r4
 8006d3e:	bfc4      	itt	gt
 8006d40:	ed93 7a02 	vldrgt	s14, [r3, #8]
 8006d44:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8006d48:	b18a      	cbz	r2, 8006d6e <apply_spatial_smoothing+0x5a>
 8006d4a:	ed93 7a00 	vldr	s14, [r3]
 8006d4e:	edc3 6a00 	vstr	s13, [r3]
 8006d52:	b2a2      	uxth	r2, r4
 8006d54:	4291      	cmp	r1, r2
 8006d56:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006d5a:	f103 0304 	add.w	r3, r3, #4
 8006d5e:	d80d      	bhi.n	8006d7c <apply_spatial_smoothing+0x68>
 8006d60:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d68:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006d6c:	4770      	bx	lr
 8006d6e:	b2a2      	uxth	r2, r4
 8006d70:	4291      	cmp	r1, r2
 8006d72:	eeb0 7a67 	vmov.f32	s14, s15
 8006d76:	f103 0304 	add.w	r3, r3, #4
 8006d7a:	d9f1      	bls.n	8006d60 <apply_spatial_smoothing+0x4c>
 8006d7c:	eef0 6a67 	vmov.f32	s13, s15
 8006d80:	4622      	mov	r2, r4
 8006d82:	eef0 7a47 	vmov.f32	s15, s14
 8006d86:	e7d8      	b.n	8006d3a <apply_spatial_smoothing+0x26>
 8006d88:	00000000 	.word	0x00000000

08006d8c <calculate_l2_norm>:
 8006d8c:	b470      	push	{r4, r5, r6}
 8006d8e:	2500      	movs	r5, #0
 8006d90:	b085      	sub	sp, #20
 8006d92:	e9cd 5500 	strd	r5, r5, [sp]
 8006d96:	2900      	cmp	r1, #0
 8006d98:	d046      	beq.n	8006e28 <calculate_l2_norm+0x9c>
 8006d9a:	b19a      	cbz	r2, 8006dc4 <calculate_l2_norm+0x38>
 8006d9c:	fb02 f605 	mul.w	r6, r2, r5
 8006da0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006da4:	466c      	mov	r4, sp
 8006da6:	2300      	movs	r3, #0
 8006da8:	ecf6 7a01 	vldmia	r6!, {s15}
 8006dac:	ed94 7a00 	vldr	s14, [r4]
 8006db0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006db4:	3301      	adds	r3, #1
 8006db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	ece4 7a01 	vstmia	r4!, {s15}
 8006dc2:	d1f1      	bne.n	8006da8 <calculate_l2_norm+0x1c>
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	b2ad      	uxth	r5, r5
 8006dc8:	42a9      	cmp	r1, r5
 8006dca:	d8e6      	bhi.n	8006d9a <calculate_l2_norm+0xe>
 8006dcc:	b172      	cbz	r2, 8006dec <calculate_l2_norm+0x60>
 8006dce:	ed9d 7a00 	vldr	s14, [sp]
 8006dd2:	eef1 7ac7 	vsqrt.f32	s15, s14
 8006dd6:	2a01      	cmp	r2, #1
 8006dd8:	edcd 7a02 	vstr	s15, [sp, #8]
 8006ddc:	d905      	bls.n	8006dea <calculate_l2_norm+0x5e>
 8006dde:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006de2:	eef1 7ac7 	vsqrt.f32	s15, s14
 8006de6:	edcd 7a03 	vstr	s15, [sp, #12]
 8006dea:	b1d1      	cbz	r1, 8006e22 <calculate_l2_norm+0x96>
 8006dec:	eddd 6a02 	vldr	s13, [sp, #8]
 8006df0:	ed9d 6a03 	vldr	s12, [sp, #12]
 8006df4:	1d03      	adds	r3, r0, #4
 8006df6:	0095      	lsls	r5, r2, #2
 8006df8:	2000      	movs	r0, #0
 8006dfa:	b16a      	cbz	r2, 8006e18 <calculate_l2_norm+0x8c>
 8006dfc:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e04:	2a01      	cmp	r2, #1
 8006e06:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006e0a:	d905      	bls.n	8006e18 <calculate_l2_norm+0x8c>
 8006e0c:	ed93 7a00 	vldr	s14, [r3]
 8006e10:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8006e14:	edc3 7a00 	vstr	s15, [r3]
 8006e18:	3001      	adds	r0, #1
 8006e1a:	b284      	uxth	r4, r0
 8006e1c:	42a1      	cmp	r1, r4
 8006e1e:	442b      	add	r3, r5
 8006e20:	d8eb      	bhi.n	8006dfa <calculate_l2_norm+0x6e>
 8006e22:	b005      	add	sp, #20
 8006e24:	bc70      	pop	{r4, r5, r6}
 8006e26:	4770      	bx	lr
 8006e28:	2a00      	cmp	r2, #0
 8006e2a:	d1d0      	bne.n	8006dce <calculate_l2_norm+0x42>
 8006e2c:	e7f9      	b.n	8006e22 <calculate_l2_norm+0x96>
 8006e2e:	bf00      	nop

08006e30 <calculate_accumulation_factors>:
 8006e30:	ee07 1a90 	vmov	s15, r1
 8006e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e38:	b410      	push	{r4}
 8006e3a:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8006e3e:	1e4c      	subs	r4, r1, #1
 8006e40:	fb01 f404 	mul.w	r4, r1, r4
 8006e44:	3903      	subs	r1, #3
 8006e46:	ee07 4a10 	vmov	s14, r4
 8006e4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006e4e:	edd0 6a02 	vldr	s13, [r0, #8]
 8006e52:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006ea0 <calculate_accumulation_factors+0x70>
 8006e56:	eef1 5ac7 	vsqrt.f32	s11, s14
 8006e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e5e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006e62:	ee07 1a90 	vmov	s15, r1
 8006e66:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e6e:	edc2 6a00 	vstr	s13, [r2]
 8006e72:	edd0 6a03 	vldr	s13, [r0, #12]
 8006e76:	9901      	ldr	r1, [sp, #4]
 8006e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e7c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006e80:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006e84:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8006e88:	ed83 6a00 	vstr	s12, [r3]
 8006e8c:	edd0 6a04 	vldr	s13, [r0, #16]
 8006e90:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006e94:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e98:	edc1 6a00 	vstr	s13, [r1]
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	408f1bbd 	.word	0x408f1bbd

08006ea4 <acc_alg_sparse_frame_abs_deviation_accumulator_reset>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	4617      	mov	r7, r2
 8006ea8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006eac:	461e      	mov	r6, r3
 8006eae:	460c      	mov	r4, r1
 8006eb0:	0092      	lsls	r2, r2, #2
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f005 f9f4 	bl	800c2a0 <memset>
 8006eb8:	b35e      	cbz	r6, 8006f12 <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x6e>
 8006eba:	6820      	ldr	r0, [r4, #0]
 8006ebc:	b31f      	cbz	r7, 8006f06 <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x62>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4684      	mov	ip, r0
 8006ec2:	1d02      	adds	r2, r0, #4
 8006ec4:	461d      	mov	r5, r3
 8006ec6:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8006eca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006ece:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8006ed2:	edcc 7a00 	vstr	s15, [ip]
 8006ed6:	f005 0501 	and.w	r5, r5, #1
 8006eda:	4614      	mov	r4, r2
 8006edc:	2100      	movs	r1, #0
 8006ede:	e008      	b.n	8006ef2 <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x4e>
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	bf0c      	ite	eq
 8006ee4:	eeb0 7a66 	vmoveq.f32	s14, s13
 8006ee8:	eeb0 7a67 	vmovne.f32	s14, s15
 8006eec:	ed84 7a00 	vstr	s14, [r4]
 8006ef0:	3404      	adds	r4, #4
 8006ef2:	3101      	adds	r1, #1
 8006ef4:	b2c9      	uxtb	r1, r1
 8006ef6:	428e      	cmp	r6, r1
 8006ef8:	d1f2      	bne.n	8006ee0 <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x3c>
 8006efa:	3301      	adds	r3, #1
 8006efc:	b29d      	uxth	r5, r3
 8006efe:	42af      	cmp	r7, r5
 8006f00:	44f4      	add	ip, lr
 8006f02:	4472      	add	r2, lr
 8006f04:	d8e5      	bhi.n	8006ed2 <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x2e>
 8006f06:	4632      	mov	r2, r6
 8006f08:	4639      	mov	r1, r7
 8006f0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f0e:	f7ff bf3d 	b.w	8006d8c <calculate_l2_norm>
 8006f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f14 <acc_alg_sparse_frame_abs_deviation_accumulate>:
 8006f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	ed2d 8b02 	vpush	{d8}
 8006f1c:	b089      	sub	sp, #36	; 0x24
 8006f1e:	2a05      	cmp	r2, #5
 8006f20:	4681      	mov	r9, r0
 8006f22:	9302      	str	r3, [sp, #8]
 8006f24:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006f26:	f240 80b2 	bls.w	800708e <acc_alg_sparse_frame_abs_deviation_accumulate+0x17a>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f000 80aa 	beq.w	8007084 <acc_alg_sparse_frame_abs_deviation_accumulate+0x170>
 8006f30:	4690      	mov	r8, r2
 8006f32:	461c      	mov	r4, r3
 8006f34:	ab07      	add	r3, sp, #28
 8006f36:	468a      	mov	sl, r1
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	aa05      	add	r2, sp, #20
 8006f3c:	ab06      	add	r3, sp, #24
 8006f3e:	4641      	mov	r1, r8
 8006f40:	f7ff ff76 	bl	8006e30 <calculate_accumulation_factors>
 8006f44:	2c00      	cmp	r4, #0
 8006f46:	f000 809c 	beq.w	8007082 <acc_alg_sparse_frame_abs_deviation_accumulate+0x16e>
 8006f4a:	ea4f 0358 	mov.w	r3, r8, lsr #1
 8006f4e:	ed90 3a00 	vldr	s6, [r0]
 8006f52:	edd0 3a01 	vldr	s7, [r0, #4]
 8006f56:	9303      	str	r3, [sp, #12]
 8006f58:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	ed9d 8a05 	vldr	s16, [sp, #20]
 8006f62:	ed9d 0a06 	vldr	s0, [sp, #24]
 8006f66:	eddd 0a07 	vldr	s1, [sp, #28]
 8006f6a:	ed90 1a02 	vldr	s2, [r0, #8]
 8006f6e:	edd0 1a03 	vldr	s3, [r0, #12]
 8006f72:	ed90 2a04 	vldr	s4, [r0, #16]
 8006f76:	ee74 2a43 	vsub.f32	s5, s8, s6
 8006f7a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8006f7e:	005a      	lsls	r2, r3, #1
 8006f80:	f04f 0b00 	mov.w	fp, #0
 8006f84:	2300      	movs	r3, #0
 8006f86:	461f      	mov	r7, r3
 8006f88:	461e      	mov	r6, r3
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	461c      	mov	r4, r3
 8006f90:	4655      	mov	r5, sl
 8006f92:	4601      	mov	r1, r0
 8006f94:	8828      	ldrh	r0, [r5, #0]
 8006f96:	46b4      	mov	ip, r6
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	eba0 0601 	sub.w	r6, r0, r1
 8006f9e:	f103 0301 	add.w	r3, r3, #1
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4404      	add	r4, r0
 8006fa6:	eba6 070c 	sub.w	r7, r6, ip
 8006faa:	4415      	add	r5, r2
 8006fac:	fa1f fc83 	uxth.w	ip, r3
 8006fb0:	d904      	bls.n	8006fbc <acc_alg_sparse_frame_abs_deviation_accumulate+0xa8>
 8006fb2:	1a79      	subs	r1, r7, r1
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	bfb8      	it	lt
 8006fb8:	4249      	neglt	r1, r1
 8006fba:	448e      	add	lr, r1
 8006fbc:	45e0      	cmp	r8, ip
 8006fbe:	d8e8      	bhi.n	8006f92 <acc_alg_sparse_frame_abs_deviation_accumulate+0x7e>
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	4650      	mov	r0, sl
 8006fc8:	441c      	add	r4, r3
 8006fca:	fbb4 f4f8 	udiv	r4, r4, r8
 8006fce:	8803      	ldrh	r3, [r0, #0]
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	1b1b      	subs	r3, r3, r4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	b28e      	uxth	r6, r1
 8006fd8:	bfb8      	it	lt
 8006fda:	425b      	neglt	r3, r3
 8006fdc:	45b0      	cmp	r8, r6
 8006fde:	441d      	add	r5, r3
 8006fe0:	4410      	add	r0, r2
 8006fe2:	d8f4      	bhi.n	8006fce <acc_alg_sparse_frame_abs_deviation_accumulate+0xba>
 8006fe4:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
 8006fe8:	ee07 4a90 	vmov	s15, r4
 8006fec:	edd9 5a00 	vldr	s11, [r9]
 8006ff0:	ed99 6a01 	vldr	s12, [r9, #4]
 8006ff4:	edd9 8a02 	vldr	s17, [r9, #8]
 8006ff8:	edd9 4a03 	vldr	s9, [r9, #12]
 8006ffc:	ed99 5a04 	vldr	s10, [r9, #16]
 8007000:	9902      	ldr	r1, [sp, #8]
 8007002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007006:	ee63 5a25 	vmul.f32	s11, s6, s11
 800700a:	ee27 7aa2 	vmul.f32	s14, s15, s5
 800700e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007012:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007016:	ee75 5a87 	vadd.f32	s11, s11, s14
 800701a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800701e:	ee07 ea10 	vmov	s14, lr
 8007022:	ee07 5a90 	vmov	s15, r5
 8007026:	ee75 6ac6 	vsub.f32	s13, s11, s12
 800702a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800702e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007032:	eef0 6ae6 	vabs.f32	s13, s13
 8007036:	ee66 6a88 	vmul.f32	s13, s13, s16
 800703a:	ee61 8a28 	vmul.f32	s17, s2, s17
 800703e:	ee61 4aa4 	vmul.f32	s9, s3, s9
 8007042:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007046:	ee22 5a05 	vmul.f32	s10, s4, s10
 800704a:	ee27 7a20 	vmul.f32	s14, s14, s1
 800704e:	f10b 0b01 	add.w	fp, fp, #1
 8007052:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8007056:	ee74 7aa7 	vadd.f32	s15, s9, s15
 800705a:	ee35 7a07 	vadd.f32	s14, s10, s14
 800705e:	fa1f f38b 	uxth.w	r3, fp
 8007062:	4299      	cmp	r1, r3
 8007064:	edc9 5a00 	vstr	s11, [r9]
 8007068:	ed89 6a01 	vstr	s12, [r9, #4]
 800706c:	edc9 6a02 	vstr	s13, [r9, #8]
 8007070:	edc9 7a03 	vstr	s15, [r9, #12]
 8007074:	ed89 7a04 	vstr	s14, [r9, #16]
 8007078:	f10a 0a02 	add.w	sl, sl, #2
 800707c:	f109 0914 	add.w	r9, r9, #20
 8007080:	d880      	bhi.n	8006f84 <acc_alg_sparse_frame_abs_deviation_accumulate+0x70>
 8007082:	2001      	movs	r0, #1
 8007084:	b009      	add	sp, #36	; 0x24
 8007086:	ecbd 8b02 	vpop	{d8}
 800708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708e:	2000      	movs	r0, #0
 8007090:	b009      	add	sp, #36	; 0x24
 8007092:	ecbd 8b02 	vpop	{d8}
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	bf00      	nop

0800709c <acc_alg_sparse_frame_abs_deviation_accumulate_pca>:
 800709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	b09d      	sub	sp, #116	; 0x74
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
 80070a8:	f8bd b098 	ldrh.w	fp, [sp, #152]	; 0x98
 80070ac:	f89d 409c 	ldrb.w	r4, [sp, #156]	; 0x9c
 80070b0:	f240 8082 	bls.w	80071b8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x11c>
 80070b4:	461e      	mov	r6, r3
 80070b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d07d      	beq.n	80071b8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x11c>
 80070bc:	460d      	mov	r5, r1
 80070be:	ab17      	add	r3, sp, #92	; 0x5c
 80070c0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	aa15      	add	r2, sp, #84	; 0x54
 80070c6:	4631      	mov	r1, r6
 80070c8:	ab16      	add	r3, sp, #88	; 0x58
 80070ca:	f7ff feb1 	bl	8006e30 <calculate_accumulation_factors>
 80070ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80070d0:	6968      	ldr	r0, [r5, #20]
 80070d2:	2100      	movs	r1, #0
 80070d4:	f005 f8e4 	bl	800c2a0 <memset>
 80070d8:	f1bb 0f00 	cmp.w	fp, #0
 80070dc:	f000 830d 	beq.w	80076fa <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x65e>
 80070e0:	1e63      	subs	r3, r4, #1
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	6969      	ldr	r1, [r5, #20]
 80070e6:	69a8      	ldr	r0, [r5, #24]
 80070e8:	68ef      	ldr	r7, [r5, #12]
 80070ea:	9706      	str	r7, [sp, #24]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	9312      	str	r3, [sp, #72]	; 0x48
 80070f0:	3304      	adds	r3, #4
 80070f2:	9310      	str	r3, [sp, #64]	; 0x40
 80070f4:	440b      	add	r3, r1
 80070f6:	ee07 6a90 	vmov	s15, r6
 80070fa:	9308      	str	r3, [sp, #32]
 80070fc:	b223      	sxth	r3, r4
 80070fe:	930d      	str	r3, [sp, #52]	; 0x34
 8007100:	00a3      	lsls	r3, r4, #2
 8007102:	2700      	movs	r7, #0
 8007104:	9303      	str	r3, [sp, #12]
 8007106:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800710a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800710c:	9102      	str	r1, [sp, #8]
 800710e:	9009      	str	r0, [sp, #36]	; 0x24
 8007110:	9705      	str	r7, [sp, #20]
 8007112:	4680      	mov	r8, r0
 8007114:	9707      	str	r7, [sp, #28]
 8007116:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800711a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800711e:	9304      	str	r3, [sp, #16]
 8007120:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007124:	2300      	movs	r3, #0
 8007126:	9a04      	ldr	r2, [sp, #16]
 8007128:	4619      	mov	r1, r3
 800712a:	3301      	adds	r3, #1
 800712c:	8817      	ldrh	r7, [r2, #0]
 800712e:	b298      	uxth	r0, r3
 8007130:	4286      	cmp	r6, r0
 8007132:	4439      	add	r1, r7
 8007134:	444a      	add	r2, r9
 8007136:	d8f8      	bhi.n	800712a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x8e>
 8007138:	ee07 1a90 	vmov	s15, r1
 800713c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007140:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007144:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007148:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800714c:	9b05      	ldr	r3, [sp, #20]
 800714e:	9808      	ldr	r0, [sp, #32]
 8007150:	9f04      	ldr	r7, [sp, #16]
 8007152:	f04f 0e00 	mov.w	lr, #0
 8007156:	46f4      	mov	ip, lr
 8007158:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800715c:	eca8 7a01 	vstmia	r8!, {s14}
 8007160:	883b      	ldrh	r3, [r7, #0]
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800716e:	edc1 7a00 	vstr	s15, [r1]
 8007172:	b19c      	cbz	r4, 800719c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x100>
 8007174:	682a      	ldr	r2, [r5, #0]
 8007176:	9b02      	ldr	r3, [sp, #8]
 8007178:	445a      	add	r2, fp
 800717a:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 800717e:	e001      	b.n	8007184 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xe8>
 8007180:	edd1 7a00 	vldr	s15, [r1]
 8007184:	ecb2 7a01 	vldmia	r2!, {s14}
 8007188:	edd3 6a00 	vldr	s13, [r3]
 800718c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007194:	ece3 7a01 	vstmia	r3!, {s15}
 8007198:	4298      	cmp	r0, r3
 800719a:	d1f1      	bne.n	8007180 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xe4>
 800719c:	f10c 0c01 	add.w	ip, ip, #1
 80071a0:	9a03      	ldr	r2, [sp, #12]
 80071a2:	fa1f f38c 	uxth.w	r3, ip
 80071a6:	429e      	cmp	r6, r3
 80071a8:	444f      	add	r7, r9
 80071aa:	4451      	add	r1, sl
 80071ac:	44a6      	add	lr, r4
 80071ae:	4410      	add	r0, r2
 80071b0:	d906      	bls.n	80071c0 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x124>
 80071b2:	ed18 7a01 	vldr	s14, [r8, #-4]
 80071b6:	e7d3      	b.n	8007160 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xc4>
 80071b8:	2000      	movs	r0, #0
 80071ba:	b01d      	add	sp, #116	; 0x74
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	9a04      	ldr	r2, [sp, #16]
 80071c2:	9b07      	ldr	r3, [sp, #28]
 80071c4:	3202      	adds	r2, #2
 80071c6:	9204      	str	r2, [sp, #16]
 80071c8:	9a05      	ldr	r2, [sp, #20]
 80071ca:	4422      	add	r2, r4
 80071cc:	3301      	adds	r3, #1
 80071ce:	9205      	str	r2, [sp, #20]
 80071d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071d2:	9307      	str	r3, [sp, #28]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d8a4      	bhi.n	8007124 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x88>
 80071da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071dc:	f8cd 9014 	str.w	r9, [sp, #20]
 80071e0:	e9dd 9802 	ldrd	r9, r8, [sp, #8]
 80071e4:	f04f 0c00 	mov.w	ip, #0
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800740c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 80071ee:	930a      	str	r3, [sp, #40]	; 0x28
 80071f0:	46e6      	mov	lr, ip
 80071f2:	9204      	str	r2, [sp, #16]
 80071f4:	9b06      	ldr	r3, [sp, #24]
 80071f6:	9a08      	ldr	r2, [sp, #32]
 80071f8:	2700      	movs	r7, #0
 80071fa:	4638      	mov	r0, r7
 80071fc:	eb03 018e 	add.w	r1, r3, lr, lsl #2
 8007200:	eeb0 7a46 	vmov.f32	s14, s12
 8007204:	b194      	cbz	r4, 800722c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x190>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800740c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 800720c:	eb03 0b0c 	add.w	fp, r3, ip
 8007210:	eb09 0387 	add.w	r3, r9, r7, lsl #2
 8007214:	ecf3 7a01 	vldmia	r3!, {s15}
 8007218:	ecfb 6a01 	vldmia	fp!, {s13}
 800721c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007220:	429a      	cmp	r2, r3
 8007222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007226:	d1f5      	bne.n	8007214 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x178>
 8007228:	eeb0 7ac7 	vabs.f32	s14, s14
 800722c:	edd1 7a00 	vldr	s15, [r1]
 8007230:	eef0 7ae7 	vabs.f32	s15, s15
 8007234:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007238:	3001      	adds	r0, #1
 800723a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	b283      	uxth	r3, r0
 8007244:	bfd8      	it	le
 8007246:	eeb0 7a46 	vmovle.f32	s14, s12
 800724a:	429e      	cmp	r6, r3
 800724c:	ed81 7a00 	vstr	s14, [r1]
 8007250:	4427      	add	r7, r4
 8007252:	4451      	add	r1, sl
 8007254:	4442      	add	r2, r8
 8007256:	d8d3      	bhi.n	8007200 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x164>
 8007258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800725a:	f10e 0e01 	add.w	lr, lr, #1
 800725e:	4494      	add	ip, r2
 8007260:	9a04      	ldr	r2, [sp, #16]
 8007262:	fa1f f38e 	uxth.w	r3, lr
 8007266:	429a      	cmp	r2, r3
 8007268:	d8c4      	bhi.n	80071f4 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x158>
 800726a:	e9dd b904 	ldrd	fp, r9, [sp, #16]
 800726e:	692a      	ldr	r2, [r5, #16]
 8007270:	920f      	str	r2, [sp, #60]	; 0x3c
 8007272:	9208      	str	r2, [sp, #32]
 8007274:	9a06      	ldr	r2, [sp, #24]
 8007276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007278:	9111      	str	r1, [sp, #68]	; 0x44
 800727a:	ebab 030a 	sub.w	r3, fp, sl
 800727e:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	2300      	movs	r3, #0
 8007286:	e9cd b90d 	strd	fp, r9, [sp, #52]	; 0x34
 800728a:	9307      	str	r3, [sp, #28]
 800728c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007290:	468b      	mov	fp, r1
 8007292:	9413      	str	r4, [sp, #76]	; 0x4c
 8007294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007296:	9906      	ldr	r1, [sp, #24]
 8007298:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800729c:	4618      	mov	r0, r3
 800729e:	9b07      	ldr	r3, [sp, #28]
 80072a0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800740c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 80072a4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80072a8:	9504      	str	r5, [sp, #16]
 80072aa:	2200      	movs	r2, #0
 80072ac:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 80072b0:	4696      	mov	lr, r2
 80072b2:	4694      	mov	ip, r2
 80072b4:	4617      	mov	r7, r2
 80072b6:	4691      	mov	r9, r2
 80072b8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80072bc:	463b      	mov	r3, r7
 80072be:	8827      	ldrh	r7, [r4, #0]
 80072c0:	edd0 7a00 	vldr	s15, [r0]
 80072c4:	4661      	mov	r1, ip
 80072c6:	eba7 0c03 	sub.w	ip, r7, r3
 80072ca:	eef0 7ae7 	vabs.f32	s15, s15
 80072ce:	4673      	mov	r3, lr
 80072d0:	2a02      	cmp	r2, #2
 80072d2:	ebac 0e01 	sub.w	lr, ip, r1
 80072d6:	f102 0201 	add.w	r2, r2, #1
 80072da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072de:	fa1f f882 	uxth.w	r8, r2
 80072e2:	445c      	add	r4, fp
 80072e4:	ebae 0303 	sub.w	r3, lr, r3
 80072e8:	d90f      	bls.n	800730a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x26e>
 80072ea:	9904      	ldr	r1, [sp, #16]
 80072ec:	688d      	ldr	r5, [r1, #8]
 80072ee:	9905      	ldr	r1, [sp, #20]
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	440d      	add	r5, r1
 80072f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072fa:	4629      	mov	r1, r5
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	4401      	add	r1, r0
 8007300:	bfb8      	it	lt
 8007302:	425b      	neglt	r3, r3
 8007304:	edc1 7a00 	vstr	s15, [r1]
 8007308:	4499      	add	r9, r3
 800730a:	4546      	cmp	r6, r8
 800730c:	4450      	add	r0, sl
 800730e:	d8d5      	bhi.n	80072bc <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x220>
 8007310:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007312:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8007316:	edd3 7a00 	vldr	s15, [r3]
 800731a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800731c:	eddb 6a00 	vldr	s13, [fp]
 8007320:	edd2 5a00 	vldr	s11, [r2]
 8007324:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8007326:	ed9b 4a01 	vldr	s8, [fp, #4]
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	9d04      	ldr	r5, [sp, #16]
 800732e:	ee35 6a67 	vsub.f32	s12, s10, s15
 8007332:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007336:	ee26 6a25 	vmul.f32	s12, s12, s11
 800733a:	ee07 9a90 	vmov	s15, r9
 800733e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007346:	edcb 6a00 	vstr	s13, [fp]
 800734a:	edd1 5a01 	vldr	s11, [r1, #4]
 800734e:	ecf2 4a01 	vldmia	r2!, {s9}
 8007352:	ee35 6a65 	vsub.f32	s12, s10, s11
 8007356:	ee65 5a84 	vmul.f32	s11, s11, s8
 800735a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800735e:	9209      	str	r2, [sp, #36]	; 0x24
 8007360:	ee36 6a25 	vadd.f32	s12, s12, s11
 8007364:	9a08      	ldr	r2, [sp, #32]
 8007366:	ed8b 6a01 	vstr	s12, [fp, #4]
 800736a:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800736e:	3301      	adds	r3, #1
 8007370:	ece2 6a01 	vstmia	r2!, {s13}
 8007374:	edd1 6a03 	vldr	s13, [r1, #12]
 8007378:	ed9b 4a03 	vldr	s8, [fp, #12]
 800737c:	eddd 4a16 	vldr	s9, [sp, #88]	; 0x58
 8007380:	ed9b 6a04 	vldr	s12, [fp, #16]
 8007384:	eddd 5a17 	vldr	s11, [sp, #92]	; 0x5c
 8007388:	9208      	str	r2, [sp, #32]
 800738a:	ee66 6a84 	vmul.f32	s13, s13, s8
 800738e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007392:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007396:	ee36 7a87 	vadd.f32	s14, s13, s14
 800739a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800739c:	ed8b 7a03 	vstr	s14, [fp, #12]
 80073a0:	ed91 7a04 	vldr	s14, [r1, #16]
 80073a4:	9307      	str	r3, [sp, #28]
 80073a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073b0:	4293      	cmp	r3, r2
 80073b2:	edcb 7a04 	vstr	s15, [fp, #16]
 80073b6:	f10b 0b14 	add.w	fp, fp, #20
 80073ba:	f4ff af6b 	bcc.w	8007294 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x1f8>
 80073be:	2000      	movs	r0, #0
 80073c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80073c4:	1e57      	subs	r7, r2, #1
 80073c6:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 80073ca:	b2bf      	uxth	r7, r7
 80073cc:	4693      	mov	fp, r2
 80073ce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80073d2:	b1a4      	cbz	r4, 80073fe <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x362>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	edd1 6a00 	vldr	s13, [r1]
 80073da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073de:	aa18      	add	r2, sp, #96	; 0x60
 80073e0:	2300      	movs	r3, #0
 80073e2:	ecfc 7a01 	vldmia	ip!, {s15}
 80073e6:	ed92 7a00 	vldr	s14, [r2]
 80073ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073ee:	3301      	adds	r3, #1
 80073f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	429c      	cmp	r4, r3
 80073f8:	ece2 7a01 	vstmia	r2!, {s15}
 80073fc:	d1f1      	bne.n	80073e2 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x346>
 80073fe:	428f      	cmp	r7, r1
 8007400:	4420      	add	r0, r4
 8007402:	f101 0304 	add.w	r3, r1, #4
 8007406:	d003      	beq.n	8007410 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x374>
 8007408:	4619      	mov	r1, r3
 800740a:	e7e2      	b.n	80073d2 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x336>
 800740c:	00000000 	.word	0x00000000
 8007410:	2000      	movs	r0, #0
 8007412:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 8007416:	eddd 5a19 	vldr	s11, [sp, #100]	; 0x64
 800741a:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 800740c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 800741e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007420:	9f03      	ldr	r7, [sp, #12]
 8007422:	4601      	mov	r1, r0
 8007424:	2c00      	cmp	r4, #0
 8007426:	f000 8161 	beq.w	80076ec <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x650>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	4403      	add	r3, r0
 800742e:	edd3 7a00 	vldr	s15, [r3]
 8007432:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007436:	2c01      	cmp	r4, #1
 8007438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743c:	d905      	bls.n	800744a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3ae>
 800743e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007442:	ee25 7a87 	vmul.f32	s14, s11, s14
 8007446:	ee77 7a87 	vadd.f32	s15, s15, s14
 800744a:	eeb0 7ae7 	vabs.f32	s14, s15
 800744e:	edd2 7a00 	vldr	s15, [r2]
 8007452:	eef0 7ae7 	vabs.f32	s15, s15
 8007456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800745a:	3101      	adds	r1, #1
 800745c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	b28b      	uxth	r3, r1
 8007466:	bfd8      	it	le
 8007468:	eef0 7a66 	vmovle.f32	s15, s13
 800746c:	459b      	cmp	fp, r3
 800746e:	4438      	add	r0, r7
 8007470:	ece2 7a01 	vstmia	r2!, {s15}
 8007474:	d8d6      	bhi.n	8007424 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x388>
 8007476:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007478:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800747c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800747e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007480:	ed93 6a02 	vldr	s12, [r3, #8]
 8007484:	2300      	movs	r3, #0
 8007486:	edd2 7a02 	vldr	s15, [r2, #8]
 800748a:	ecb1 7a01 	vldmia	r1!, {s14}
 800748e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007492:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007496:	3301      	adds	r3, #1
 8007498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800749c:	b298      	uxth	r0, r3
 800749e:	4583      	cmp	fp, r0
 80074a0:	edc2 7a02 	vstr	s15, [r2, #8]
 80074a4:	f102 0214 	add.w	r2, r2, #20
 80074a8:	d8ed      	bhi.n	8007486 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3ea>
 80074aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80074ac:	9802      	ldr	r0, [sp, #8]
 80074ae:	2100      	movs	r1, #0
 80074b0:	f004 fef6 	bl	800c2a0 <memset>
 80074b4:	2300      	movs	r3, #0
 80074b6:	1e62      	subs	r2, r4, #1
 80074b8:	f1a6 0e03 	sub.w	lr, r6, #3
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	9205      	str	r2, [sp, #20]
 80074c0:	4698      	mov	r8, r3
 80074c2:	fa1f fa82 	uxth.w	sl, r2
 80074c6:	b2a6      	uxth	r6, r4
 80074c8:	9b04      	ldr	r3, [sp, #16]
 80074ca:	2700      	movs	r7, #0
 80074cc:	4639      	mov	r1, r7
 80074ce:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80074d2:	b306      	cbz	r6, 8007516 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x47a>
 80074d4:	682a      	ldr	r2, [r5, #0]
 80074d6:	9202      	str	r2, [sp, #8]
 80074d8:	68aa      	ldr	r2, [r5, #8]
 80074da:	696b      	ldr	r3, [r5, #20]
 80074dc:	fb04 f001 	mul.w	r0, r4, r1
 80074e0:	fb0b 8101 	mla	r1, fp, r1, r8
 80074e4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80074e8:	9a02      	ldr	r2, [sp, #8]
 80074ea:	f103 0c04 	add.w	ip, r3, #4
 80074ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80074f2:	4450      	add	r0, sl
 80074f4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 80074f8:	444a      	add	r2, r9
 80074fa:	ecf2 7a01 	vldmia	r2!, {s15}
 80074fe:	edd1 6a00 	vldr	s13, [r1]
 8007502:	ed93 7a00 	vldr	s14, [r3]
 8007506:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800750a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800750e:	ece3 7a01 	vstmia	r3!, {s15}
 8007512:	4298      	cmp	r0, r3
 8007514:	d1f1      	bne.n	80074fa <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x45e>
 8007516:	3701      	adds	r7, #1
 8007518:	b2bf      	uxth	r7, r7
 800751a:	4577      	cmp	r7, lr
 800751c:	4639      	mov	r1, r7
 800751e:	dbd8      	blt.n	80074d2 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x436>
 8007520:	9a04      	ldr	r2, [sp, #16]
 8007522:	f108 0801 	add.w	r8, r8, #1
 8007526:	fa1f f388 	uxth.w	r3, r8
 800752a:	4422      	add	r2, r4
 800752c:	459b      	cmp	fp, r3
 800752e:	9204      	str	r2, [sp, #16]
 8007530:	d8ca      	bhi.n	80074c8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x42c>
 8007532:	686b      	ldr	r3, [r5, #4]
 8007534:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8007538:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800753a:	ed1f 6a4c 	vldr	s12, [pc, #-304]	; 800740c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	2100      	movs	r1, #0
 8007542:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007546:	4691      	mov	r9, r2
 8007548:	3004      	adds	r0, #4
 800754a:	4499      	add	r9, r3
 800754c:	469a      	mov	sl, r3
 800754e:	4688      	mov	r8, r1
 8007550:	468c      	mov	ip, r1
 8007552:	b134      	cbz	r4, 8007562 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4c6>
 8007554:	9b04      	ldr	r3, [sp, #16]
 8007556:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800755a:	eca3 6a01 	vstmia	r3!, {s12}
 800755e:	4599      	cmp	r9, r3
 8007560:	d1fb      	bne.n	800755a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4be>
 8007562:	2100      	movs	r1, #0
 8007564:	460f      	mov	r7, r1
 8007566:	b1d6      	cbz	r6, 800759e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x502>
 8007568:	696b      	ldr	r3, [r5, #20]
 800756a:	9302      	str	r3, [sp, #8]
 800756c:	68ab      	ldr	r3, [r5, #8]
 800756e:	fb0b 8207 	mla	r2, fp, r7, r8
 8007572:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007576:	9b02      	ldr	r3, [sp, #8]
 8007578:	fb04 f707 	mul.w	r7, r4, r7
 800757c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007580:	4657      	mov	r7, sl
 8007582:	ecf3 7a01 	vldmia	r3!, {s15}
 8007586:	edd2 6a00 	vldr	s13, [r2]
 800758a:	ed97 7a00 	vldr	s14, [r7]
 800758e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007596:	ece7 7a01 	vstmia	r7!, {s15}
 800759a:	42b8      	cmp	r0, r7
 800759c:	d1f1      	bne.n	8007582 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4e6>
 800759e:	3101      	adds	r1, #1
 80075a0:	b289      	uxth	r1, r1
 80075a2:	4571      	cmp	r1, lr
 80075a4:	460f      	mov	r7, r1
 80075a6:	dbde      	blt.n	8007566 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4ca>
 80075a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075aa:	f108 0801 	add.w	r8, r8, #1
 80075ae:	fa1f f388 	uxth.w	r3, r8
 80075b2:	4492      	add	sl, r2
 80075b4:	4410      	add	r0, r2
 80075b6:	9a03      	ldr	r2, [sp, #12]
 80075b8:	459b      	cmp	fp, r3
 80075ba:	44a4      	add	ip, r4
 80075bc:	4491      	add	r9, r2
 80075be:	d8c8      	bhi.n	8007552 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4b6>
 80075c0:	9804      	ldr	r0, [sp, #16]
 80075c2:	4622      	mov	r2, r4
 80075c4:	4659      	mov	r1, fp
 80075c6:	f7ff fbe1 	bl	8006d8c <calculate_l2_norm>
 80075ca:	2600      	movs	r6, #0
 80075cc:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80075d0:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80075d4:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 80075d8:	4637      	mov	r7, r6
 80075da:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80075de:	b1cc      	cbz	r4, 8007614 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x578>
 80075e0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80075e4:	eb06 0108 	add.w	r1, r6, r8
 80075e8:	1d18      	adds	r0, r3, #4
 80075ea:	4401      	add	r1, r0
 80075ec:	4433      	add	r3, r6
 80075ee:	4432      	add	r2, r6
 80075f0:	ed9c 7a04 	vldr	s14, [ip, #16]
 80075f4:	ecf2 6a01 	vldmia	r2!, {s13}
 80075f8:	ed93 6a00 	vldr	s12, [r3]
 80075fc:	ee75 7ac7 	vsub.f32	s15, s11, s14
 8007600:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007604:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007608:	ee77 7a87 	vadd.f32	s15, s15, s14
 800760c:	ece3 7a01 	vstmia	r3!, {s15}
 8007610:	4299      	cmp	r1, r3
 8007612:	d1ed      	bne.n	80075f0 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x554>
 8007614:	3701      	adds	r7, #1
 8007616:	b2bb      	uxth	r3, r7
 8007618:	459b      	cmp	fp, r3
 800761a:	4476      	add	r6, lr
 800761c:	d8df      	bhi.n	80075de <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x542>
 800761e:	2600      	movs	r6, #0
 8007620:	e9cd 661a 	strd	r6, r6, [sp, #104]	; 0x68
 8007624:	2c00      	cmp	r4, #0
 8007626:	d064      	beq.n	80076f2 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x656>
 8007628:	f104 3cff 	add.w	ip, r4, #4294967295
 800762c:	af1a      	add	r7, sp, #104	; 0x68
 800762e:	fa5f fc8c 	uxtb.w	ip, ip
 8007632:	00a4      	lsls	r4, r4, #2
 8007634:	4658      	mov	r0, fp
 8007636:	bb66      	cbnz	r6, 8007692 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5f6>
 8007638:	b310      	cbz	r0, 8007680 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5e4>
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	46b0      	mov	r8, r6
 800763e:	4443      	add	r3, r8
 8007640:	ed97 7a00 	vldr	s14, [r7]
 8007644:	4619      	mov	r1, r3
 8007646:	2200      	movs	r2, #0
 8007648:	edd1 7a00 	vldr	s15, [r1]
 800764c:	3201      	adds	r2, #1
 800764e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007652:	fa1f fe82 	uxth.w	lr, r2
 8007656:	4570      	cmp	r0, lr
 8007658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800765c:	4421      	add	r1, r4
 800765e:	d8f3      	bhi.n	8007648 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5ac>
 8007660:	eef1 6ac7 	vsqrt.f32	s13, s14
 8007664:	2200      	movs	r2, #0
 8007666:	ed87 7a00 	vstr	s14, [r7]
 800766a:	ed93 7a00 	vldr	s14, [r3]
 800766e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007672:	3201      	adds	r2, #1
 8007674:	b291      	uxth	r1, r2
 8007676:	4288      	cmp	r0, r1
 8007678:	edc3 7a00 	vstr	s15, [r3]
 800767c:	4423      	add	r3, r4
 800767e:	d8f4      	bhi.n	800766a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5ce>
 8007680:	45b4      	cmp	ip, r6
 8007682:	f107 0704 	add.w	r7, r7, #4
 8007686:	f106 0301 	add.w	r3, r6, #1
 800768a:	d032      	beq.n	80076f2 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x656>
 800768c:	461e      	mov	r6, r3
 800768e:	2e00      	cmp	r6, #0
 8007690:	d0d2      	beq.n	8007638 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x59c>
 8007692:	2800      	cmp	r0, #0
 8007694:	d0f4      	beq.n	8007680 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5e4>
 8007696:	682b      	ldr	r3, [r5, #0]
 8007698:	ed5f 6aa4 	vldr	s13, [pc, #-656]	; 800740c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 800769c:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 80076a0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80076a4:	2100      	movs	r1, #0
 80076a6:	edd2 7a00 	vldr	s15, [r2]
 80076aa:	ed12 7a01 	vldr	s14, [r2, #-4]
 80076ae:	3101      	adds	r1, #1
 80076b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076b4:	fa1f fe81 	uxth.w	lr, r1
 80076b8:	4570      	cmp	r0, lr
 80076ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80076be:	4422      	add	r2, r4
 80076c0:	d8f1      	bhi.n	80076a6 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x60a>
 80076c2:	f1a8 0204 	sub.w	r2, r8, #4
 80076c6:	441a      	add	r2, r3
 80076c8:	2100      	movs	r1, #0
 80076ca:	ed92 7a00 	vldr	s14, [r2]
 80076ce:	edd2 7a01 	vldr	s15, [r2, #4]
 80076d2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80076d6:	3101      	adds	r1, #1
 80076d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076dc:	fa1f fe81 	uxth.w	lr, r1
 80076e0:	4570      	cmp	r0, lr
 80076e2:	edc2 7a01 	vstr	s15, [r2, #4]
 80076e6:	4422      	add	r2, r4
 80076e8:	d8ef      	bhi.n	80076ca <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x62e>
 80076ea:	e7a8      	b.n	800763e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5a2>
 80076ec:	eeb0 7a66 	vmov.f32	s14, s13
 80076f0:	e6ad      	b.n	800744e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3b2>
 80076f2:	2001      	movs	r0, #1
 80076f4:	b01d      	add	sp, #116	; 0x74
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80076fc:	6968      	ldr	r0, [r5, #20]
 80076fe:	4659      	mov	r1, fp
 8007700:	f004 fdce 	bl	800c2a0 <memset>
 8007704:	6868      	ldr	r0, [r5, #4]
 8007706:	4622      	mov	r2, r4
 8007708:	4659      	mov	r1, fp
 800770a:	f7ff fb3f 	bl	8006d8c <calculate_l2_norm>
 800770e:	e786      	b.n	800761e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x582>

08007710 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio>:
 8007710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007712:	4604      	mov	r4, r0
 8007714:	b083      	sub	sp, #12
 8007716:	2a00      	cmp	r2, #0
 8007718:	d041      	beq.n	800779e <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x8e>
 800771a:	b389      	cbz	r1, 8007780 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x70>
 800771c:	ed9f 5a23 	vldr	s10, [pc, #140]	; 80077ac <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x9c>
 8007720:	461f      	mov	r7, r3
 8007722:	4616      	mov	r6, r2
 8007724:	2500      	movs	r5, #0
 8007726:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800772a:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800772e:	edd4 7a04 	vldr	s15, [r4, #16]
 8007732:	eef4 7ac6 	vcmpe.f32	s15, s12
 8007736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773a:	bfc8      	it	gt
 800773c:	ee67 7aa5 	vmulgt.f32	s15, s15, s11
 8007740:	f105 0501 	add.w	r5, r5, #1
 8007744:	bfc8      	it	gt
 8007746:	eec6 6a27 	vdivgt.f32	s13, s12, s15
 800774a:	fa1f fc85 	uxth.w	ip, r5
 800774e:	bfd8      	it	le
 8007750:	eef0 6a45 	vmovle.f32	s13, s10
 8007754:	b12a      	cbz	r2, 8007762 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x52>
 8007756:	ed94 7a03 	vldr	s14, [r4, #12]
 800775a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800775e:	ed86 7a00 	vstr	s14, [r6]
 8007762:	3604      	adds	r6, #4
 8007764:	b12b      	cbz	r3, 8007772 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x62>
 8007766:	edd4 7a02 	vldr	s15, [r4, #8]
 800776a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800776e:	edc7 7a00 	vstr	s15, [r7]
 8007772:	4561      	cmp	r1, ip
 8007774:	f104 0414 	add.w	r4, r4, #20
 8007778:	f107 0704 	add.w	r7, r7, #4
 800777c:	d8d7      	bhi.n	800772e <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x1e>
 800777e:	b122      	cbz	r2, 800778a <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x7a>
 8007780:	4610      	mov	r0, r2
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	f7ff fac6 	bl	8006d14 <apply_spatial_smoothing>
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	b12b      	cbz	r3, 8007798 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x88>
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff fac1 	bl	8006d14 <apply_spatial_smoothing>
 8007792:	2001      	movs	r0, #1
 8007794:	b003      	add	sp, #12
 8007796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007798:	2001      	movs	r0, #1
 800779a:	b003      	add	sp, #12
 800779c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779e:	b113      	cbz	r3, 80077a6 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x96>
 80077a0:	2900      	cmp	r1, #0
 80077a2:	d1bb      	bne.n	800771c <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0xc>
 80077a4:	e7f2      	b.n	800778c <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x7c>
 80077a6:	4618      	mov	r0, r3
 80077a8:	e7f4      	b.n	8007794 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x84>
 80077aa:	bf00      	nop
 80077ac:	00000000 	.word	0x00000000

080077b0 <acc_assert_fail>:
 80077b0:	b500      	push	{lr}
 80077b2:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <acc_assert_fail+0x20>)
 80077b4:	4a07      	ldr	r2, [pc, #28]	; (80077d4 <acc_assert_fail+0x24>)
 80077b6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80077b8:	b083      	sub	sp, #12
 80077ba:	4603      	mov	r3, r0
 80077bc:	9100      	str	r1, [sp, #0]
 80077be:	2000      	movs	r0, #0
 80077c0:	4905      	ldr	r1, [pc, #20]	; (80077d8 <acc_assert_fail+0x28>)
 80077c2:	47a0      	blx	r4
 80077c4:	4b05      	ldr	r3, [pc, #20]	; (80077dc <acc_assert_fail+0x2c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	b103      	cbz	r3, 80077cc <acc_assert_fail+0x1c>
 80077ca:	4798      	blx	r3
 80077cc:	e7fe      	b.n	80077cc <acc_assert_fail+0x1c>
 80077ce:	bf00      	nop
 80077d0:	200007b0 	.word	0x200007b0
 80077d4:	080115fc 	.word	0x080115fc
 80077d8:	08011614 	.word	0x08011614
 80077dc:	20000788 	.word	0x20000788

080077e0 <acc_rss_integration_register>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	6943      	ldr	r3, [r0, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d02b      	beq.n	8007840 <acc_rss_integration_register+0x60>
 80077e8:	6983      	ldr	r3, [r0, #24]
 80077ea:	b34b      	cbz	r3, 8007840 <acc_rss_integration_register+0x60>
 80077ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80077ee:	b323      	cbz	r3, 800783a <acc_rss_integration_register+0x5a>
 80077f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077f2:	b32b      	cbz	r3, 8007840 <acc_rss_integration_register+0x60>
 80077f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80077f6:	b31b      	cbz	r3, 8007840 <acc_rss_integration_register+0x60>
 80077f8:	6883      	ldr	r3, [r0, #8]
 80077fa:	b30b      	cbz	r3, 8007840 <acc_rss_integration_register+0x60>
 80077fc:	68c3      	ldr	r3, [r0, #12]
 80077fe:	b1fb      	cbz	r3, 8007840 <acc_rss_integration_register+0x60>
 8007800:	6903      	ldr	r3, [r0, #16]
 8007802:	b1eb      	cbz	r3, 8007840 <acc_rss_integration_register+0x60>
 8007804:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007806:	b313      	cbz	r3, 800784e <acc_rss_integration_register+0x6e>
 8007808:	6802      	ldr	r2, [r0, #0]
 800780a:	2a2a      	cmp	r2, #42	; 0x2a
 800780c:	d81a      	bhi.n	8007844 <acc_rss_integration_register+0x64>
 800780e:	6842      	ldr	r2, [r0, #4]
 8007810:	2a0f      	cmp	r2, #15
 8007812:	d917      	bls.n	8007844 <acc_rss_integration_register+0x64>
 8007814:	69c2      	ldr	r2, [r0, #28]
 8007816:	b10a      	cbz	r2, 800781c <acc_rss_integration_register+0x3c>
 8007818:	6a02      	ldr	r2, [r0, #32]
 800781a:	b19a      	cbz	r2, 8007844 <acc_rss_integration_register+0x64>
 800781c:	4605      	mov	r5, r0
 800781e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007820:	4c0c      	ldr	r4, [pc, #48]	; (8007854 <acc_rss_integration_register+0x74>)
 8007822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800782a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800782c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007830:	2301      	movs	r3, #1
 8007832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007836:	4618      	mov	r0, r3
 8007838:	bd38      	pop	{r3, r4, r5, pc}
 800783a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1d7      	bne.n	80077f0 <acc_rss_integration_register+0x10>
 8007840:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007842:	b123      	cbz	r3, 800784e <acc_rss_integration_register+0x6e>
 8007844:	4a04      	ldr	r2, [pc, #16]	; (8007858 <acc_rss_integration_register+0x78>)
 8007846:	4905      	ldr	r1, [pc, #20]	; (800785c <acc_rss_integration_register+0x7c>)
 8007848:	2000      	movs	r0, #0
 800784a:	4798      	blx	r3
 800784c:	2300      	movs	r3, #0
 800784e:	4618      	mov	r0, r3
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	bf00      	nop
 8007854:	200007b0 	.word	0x200007b0
 8007858:	0801161c 	.word	0x0801161c
 800785c:	08011630 	.word	0x08011630

08007860 <acc_rss_integration_unregister>:
 8007860:	4802      	ldr	r0, [pc, #8]	; (800786c <acc_rss_integration_unregister+0xc>)
 8007862:	223c      	movs	r2, #60	; 0x3c
 8007864:	2100      	movs	r1, #0
 8007866:	f004 bd1b 	b.w	800c2a0 <memset>
 800786a:	bf00      	nop
 800786c:	200007b0 	.word	0x200007b0

08007870 <acc_rss_integration_get_sensor_count>:
 8007870:	4b01      	ldr	r3, [pc, #4]	; (8007878 <acc_rss_integration_get_sensor_count+0x8>)
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	200007b0 	.word	0x200007b0

0800787c <acc_rss_integration_get_sensor_reference_frequency>:
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	4718      	bx	r3
 8007882:	bf00      	nop
 8007884:	200007b0 	.word	0x200007b0

08007888 <acc_rss_integration_get_max_spi_transfer_size>:
 8007888:	4b01      	ldr	r3, [pc, #4]	; (8007890 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800788a:	6858      	ldr	r0, [r3, #4]
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	200007b0 	.word	0x200007b0

08007894 <acc_rss_integration_sensor_device_power_on>:
 8007894:	4b01      	ldr	r3, [pc, #4]	; (800789c <acc_rss_integration_sensor_device_power_on+0x8>)
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	4718      	bx	r3
 800789a:	bf00      	nop
 800789c:	200007b0 	.word	0x200007b0

080078a0 <acc_rss_integration_sensor_device_power_off>:
 80078a0:	4b01      	ldr	r3, [pc, #4]	; (80078a8 <acc_rss_integration_sensor_device_power_off+0x8>)
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	4718      	bx	r3
 80078a6:	bf00      	nop
 80078a8:	200007b0 	.word	0x200007b0

080078ac <acc_rss_integration_sensor_device_hibernate_enter>:
 80078ac:	4b02      	ldr	r3, [pc, #8]	; (80078b8 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	b103      	cbz	r3, 80078b4 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 80078b2:	4718      	bx	r3
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	200007b0 	.word	0x200007b0

080078bc <acc_rss_integration_sensor_device_hibernate_exit>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	b103      	cbz	r3, 80078c4 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 80078c2:	4718      	bx	r3
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	200007b0 	.word	0x200007b0

080078cc <acc_rss_integration_is_hibernate_capable>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <acc_rss_integration_is_hibernate_capable+0xc>)
 80078ce:	69d8      	ldr	r0, [r3, #28]
 80078d0:	3800      	subs	r0, #0
 80078d2:	bf18      	it	ne
 80078d4:	2001      	movne	r0, #1
 80078d6:	4770      	bx	lr
 80078d8:	200007b0 	.word	0x200007b0

080078dc <acc_rss_integration_wait_for_sensor_interrupt>:
 80078dc:	4b01      	ldr	r3, [pc, #4]	; (80078e4 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	4718      	bx	r3
 80078e2:	bf00      	nop
 80078e4:	200007b0 	.word	0x200007b0

080078e8 <acc_rss_integration_sensor_device_transfer>:
 80078e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ec:	4f10      	ldr	r7, [pc, #64]	; (8007930 <acc_rss_integration_sensor_device_transfer+0x48>)
 80078ee:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 80078f2:	f1be 0f00 	cmp.w	lr, #0
 80078f6:	d003      	beq.n	8007900 <acc_rss_integration_sensor_device_transfer+0x18>
 80078f8:	4673      	mov	r3, lr
 80078fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fe:	4718      	bx	r3
 8007900:	460c      	mov	r4, r1
 8007902:	4606      	mov	r6, r0
 8007904:	4611      	mov	r1, r2
 8007906:	4615      	mov	r5, r2
 8007908:	4620      	mov	r0, r4
 800790a:	4698      	mov	r8, r3
 800790c:	f000 f8b4 	bl	8007a78 <acc_utils_swap16_array>
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	4630      	mov	r0, r6
 8007914:	006a      	lsls	r2, r5, #1
 8007916:	4621      	mov	r1, r4
 8007918:	4798      	blx	r3
 800791a:	f1b8 0f00 	cmp.w	r8, #0
 800791e:	d101      	bne.n	8007924 <acc_rss_integration_sensor_device_transfer+0x3c>
 8007920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007924:	4629      	mov	r1, r5
 8007926:	4620      	mov	r0, r4
 8007928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800792c:	f000 b8a4 	b.w	8007a78 <acc_utils_swap16_array>
 8007930:	200007b0 	.word	0x200007b0

08007934 <acc_rss_integration_mem_alloc_debug>:
 8007934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007938:	4f0c      	ldr	r7, [pc, #48]	; (800796c <acc_rss_integration_mem_alloc_debug+0x38>)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	4688      	mov	r8, r1
 800793e:	4616      	mov	r6, r2
 8007940:	4605      	mov	r5, r0
 8007942:	4798      	blx	r3
 8007944:	4604      	mov	r4, r0
 8007946:	b150      	cbz	r0, 800795e <acc_rss_integration_mem_alloc_debug+0x2a>
 8007948:	4b09      	ldr	r3, [pc, #36]	; (8007970 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	b123      	cbz	r3, 8007958 <acc_rss_integration_mem_alloc_debug+0x24>
 800794e:	681f      	ldr	r7, [r3, #0]
 8007950:	4642      	mov	r2, r8
 8007952:	4633      	mov	r3, r6
 8007954:	4629      	mov	r1, r5
 8007956:	47b8      	blx	r7
 8007958:	4620      	mov	r0, r4
 800795a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007960:	4a04      	ldr	r2, [pc, #16]	; (8007974 <acc_rss_integration_mem_alloc_debug+0x40>)
 8007962:	4905      	ldr	r1, [pc, #20]	; (8007978 <acc_rss_integration_mem_alloc_debug+0x44>)
 8007964:	4798      	blx	r3
 8007966:	4620      	mov	r0, r4
 8007968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800796c:	200007b0 	.word	0x200007b0
 8007970:	2000078c 	.word	0x2000078c
 8007974:	08011640 	.word	0x08011640
 8007978:	08011630 	.word	0x08011630

0800797c <acc_rss_integration_mem_calloc_debug>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	b190      	cbz	r0, 80079a6 <acc_rss_integration_mem_calloc_debug+0x2a>
 8007980:	460c      	mov	r4, r1
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	fba0 3604 	umull	r3, r6, r0, r4
 800798a:	b97e      	cbnz	r6, 80079ac <acc_rss_integration_mem_calloc_debug+0x30>
 800798c:	fb04 f500 	mul.w	r5, r4, r0
 8007990:	4628      	mov	r0, r5
 8007992:	f7ff ffcf 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8007996:	4604      	mov	r4, r0
 8007998:	b118      	cbz	r0, 80079a2 <acc_rss_integration_mem_calloc_debug+0x26>
 800799a:	462a      	mov	r2, r5
 800799c:	4631      	mov	r1, r6
 800799e:	f004 fc7f 	bl	800c2a0 <memset>
 80079a2:	4620      	mov	r0, r4
 80079a4:	bd70      	pop	{r4, r5, r6, pc}
 80079a6:	4604      	mov	r4, r0
 80079a8:	4620      	mov	r0, r4
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	4802      	ldr	r0, [pc, #8]	; (80079b8 <acc_rss_integration_mem_calloc_debug+0x3c>)
 80079ae:	f240 1115 	movw	r1, #277	; 0x115
 80079b2:	f7ff fefd 	bl	80077b0 <acc_assert_fail>
 80079b6:	bf00      	nop
 80079b8:	08011630 	.word	0x08011630

080079bc <acc_rss_integration_mem_free>:
 80079bc:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <acc_rss_integration_mem_free+0x1c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	b510      	push	{r4, lr}
 80079c2:	4604      	mov	r4, r0
 80079c4:	b10b      	cbz	r3, 80079ca <acc_rss_integration_mem_free+0xe>
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4798      	blx	r3
 80079ca:	4b04      	ldr	r3, [pc, #16]	; (80079dc <acc_rss_integration_mem_free+0x20>)
 80079cc:	4620      	mov	r0, r4
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d4:	4718      	bx	r3
 80079d6:	bf00      	nop
 80079d8:	2000078c 	.word	0x2000078c
 80079dc:	200007b0 	.word	0x200007b0

080079e0 <acc_rss_integration_log_level>:
 80079e0:	4b01      	ldr	r3, [pc, #4]	; (80079e8 <acc_rss_integration_log_level+0x8>)
 80079e2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 80079e6:	4770      	bx	lr
 80079e8:	200007b0 	.word	0x200007b0

080079ec <acc_probes_execute_uint16>:
 80079ec:	b530      	push	{r4, r5, lr}
 80079ee:	b085      	sub	sp, #20
 80079f0:	4c09      	ldr	r4, [pc, #36]	; (8007a18 <acc_probes_execute_uint16+0x2c>)
 80079f2:	f88d 0004 	strb.w	r0, [sp, #4]
 80079f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80079fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80079fe:	2501      	movs	r5, #1
 8007a00:	6844      	ldr	r4, [r0, #4]
 8007a02:	9102      	str	r1, [sp, #8]
 8007a04:	9503      	str	r5, [sp, #12]
 8007a06:	b12c      	cbz	r4, 8007a14 <acc_probes_execute_uint16+0x28>
 8007a08:	4611      	mov	r1, r2
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	40aa      	lsls	r2, r5
 8007a0e:	6883      	ldr	r3, [r0, #8]
 8007a10:	a801      	add	r0, sp, #4
 8007a12:	47a0      	blx	r4
 8007a14:	b005      	add	sp, #20
 8007a16:	bd30      	pop	{r4, r5, pc}
 8007a18:	20000014 	.word	0x20000014

08007a1c <acc_probes_execute_struct>:
 8007a1c:	b530      	push	{r4, r5, lr}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	4c09      	ldr	r4, [pc, #36]	; (8007a48 <acc_probes_execute_struct+0x2c>)
 8007a22:	f88d 0004 	strb.w	r0, [sp, #4]
 8007a26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007a2a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007a2e:	2507      	movs	r5, #7
 8007a30:	6844      	ldr	r4, [r0, #4]
 8007a32:	9102      	str	r1, [sp, #8]
 8007a34:	9503      	str	r5, [sp, #12]
 8007a36:	b124      	cbz	r4, 8007a42 <acc_probes_execute_struct+0x26>
 8007a38:	4611      	mov	r1, r2
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6883      	ldr	r3, [r0, #8]
 8007a3e:	a801      	add	r0, sp, #4
 8007a40:	47a0      	blx	r4
 8007a42:	b005      	add	sp, #20
 8007a44:	bd30      	pop	{r4, r5, pc}
 8007a46:	bf00      	nop
 8007a48:	20000014 	.word	0x20000014

08007a4c <acc_probes_execute_primitive_probe>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <acc_probes_execute_primitive_probe+0x28>)
 8007a52:	f88d 0004 	strb.w	r0, [sp, #4]
 8007a56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007a5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	6844      	ldr	r4, [r0, #4]
 8007a62:	9102      	str	r1, [sp, #8]
 8007a64:	9203      	str	r2, [sp, #12]
 8007a66:	b11c      	cbz	r4, 8007a70 <acc_probes_execute_primitive_probe+0x24>
 8007a68:	6883      	ldr	r3, [r0, #8]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	a801      	add	r0, sp, #4
 8007a6e:	47a0      	blx	r4
 8007a70:	b004      	add	sp, #16
 8007a72:	bd10      	pop	{r4, pc}
 8007a74:	20000014 	.word	0x20000014

08007a78 <acc_utils_swap16_array>:
 8007a78:	1e4a      	subs	r2, r1, #1
 8007a7a:	b131      	cbz	r1, 8007a8a <acc_utils_swap16_array+0x12>
 8007a7c:	8803      	ldrh	r3, [r0, #0]
 8007a7e:	3a01      	subs	r2, #1
 8007a80:	ba5b      	rev16	r3, r3
 8007a82:	f820 3b02 	strh.w	r3, [r0], #2
 8007a86:	1c53      	adds	r3, r2, #1
 8007a88:	d1f8      	bne.n	8007a7c <acc_utils_swap16_array+0x4>
 8007a8a:	4770      	bx	lr

08007a8c <acc_utils_uint32_to_transfer_buffer>:
 8007a8c:	b152      	cbz	r2, 8007aa4 <acc_utils_uint32_to_transfer_buffer+0x18>
 8007a8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007a92:	3804      	subs	r0, #4
 8007a94:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8007a98:	804b      	strh	r3, [r1, #2]
 8007a9a:	0c1b      	lsrs	r3, r3, #16
 8007a9c:	800b      	strh	r3, [r1, #0]
 8007a9e:	3104      	adds	r1, #4
 8007aa0:	4291      	cmp	r1, r2
 8007aa2:	d1f7      	bne.n	8007a94 <acc_utils_uint32_to_transfer_buffer+0x8>
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop

08007aa8 <acc_utils_transfer_buffer_to_uint32>:
 8007aa8:	b17a      	cbz	r2, 8007aca <acc_utils_transfer_buffer_to_uint32+0x22>
 8007aaa:	b410      	push	{r4}
 8007aac:	3904      	subs	r1, #4
 8007aae:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8007ab2:	8802      	ldrh	r2, [r0, #0]
 8007ab4:	8843      	ldrh	r3, [r0, #2]
 8007ab6:	3004      	adds	r0, #4
 8007ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007abc:	4284      	cmp	r4, r0
 8007abe:	f841 3f04 	str.w	r3, [r1, #4]!
 8007ac2:	d1f6      	bne.n	8007ab2 <acc_utils_transfer_buffer_to_uint32+0xa>
 8007ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	4770      	bx	lr

08007acc <configuration_is_valid.part.0>:
 8007acc:	b508      	push	{r3, lr}
 8007ace:	f7ff ff87 	bl	80079e0 <acc_rss_integration_log_level>
 8007ad2:	b128      	cbz	r0, 8007ae0 <configuration_is_valid.part.0+0x14>
 8007ad4:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <configuration_is_valid.part.0+0x18>)
 8007ad6:	4a04      	ldr	r2, [pc, #16]	; (8007ae8 <configuration_is_valid.part.0+0x1c>)
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ada:	4904      	ldr	r1, [pc, #16]	; (8007aec <configuration_is_valid.part.0+0x20>)
 8007adc:	2001      	movs	r0, #1
 8007ade:	4798      	blx	r3
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	bd08      	pop	{r3, pc}
 8007ae4:	200007b0 	.word	0x200007b0
 8007ae8:	08011650 	.word	0x08011650
 8007aec:	0801166c 	.word	0x0801166c

08007af0 <acc_base_configuration_sensor_get>:
 8007af0:	b510      	push	{r4, lr}
 8007af2:	4604      	mov	r4, r0
 8007af4:	b108      	cbz	r0, 8007afa <acc_base_configuration_sensor_get+0xa>
 8007af6:	68e0      	ldr	r0, [r4, #12]
 8007af8:	bd10      	pop	{r4, pc}
 8007afa:	f7ff ffe7 	bl	8007acc <configuration_is_valid.part.0>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d1f9      	bne.n	8007af6 <acc_base_configuration_sensor_get+0x6>
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <acc_base_configuration_sensor_set>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	460d      	mov	r5, r1
 8007b08:	4604      	mov	r4, r0
 8007b0a:	b108      	cbz	r0, 8007b10 <acc_base_configuration_sensor_set+0xc>
 8007b0c:	60e5      	str	r5, [r4, #12]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	f7ff ffdc 	bl	8007acc <configuration_is_valid.part.0>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1f9      	bne.n	8007b0c <acc_base_configuration_sensor_set+0x8>
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
 8007b1a:	bf00      	nop

08007b1c <acc_base_configuration_requested_start_get>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	4604      	mov	r4, r0
 8007b20:	b110      	cbz	r0, 8007b28 <acc_base_configuration_requested_start_get+0xc>
 8007b22:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8007b26:	bd10      	pop	{r4, pc}
 8007b28:	f7ff ffd0 	bl	8007acc <configuration_is_valid.part.0>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d1f8      	bne.n	8007b22 <acc_base_configuration_requested_start_get+0x6>
 8007b30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b38 <acc_base_configuration_requested_start_get+0x1c>
 8007b34:	bd10      	pop	{r4, pc}
 8007b36:	bf00      	nop
 8007b38:	00000000 	.word	0x00000000

08007b3c <acc_base_configuration_requested_start_set>:
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	4604      	mov	r4, r0
 8007b40:	ed2d 8b02 	vpush	{d8}
 8007b44:	eeb0 8a40 	vmov.f32	s16, s0
 8007b48:	b120      	cbz	r0, 8007b54 <acc_base_configuration_requested_start_set+0x18>
 8007b4a:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8007b4e:	ecbd 8b02 	vpop	{d8}
 8007b52:	bd10      	pop	{r4, pc}
 8007b54:	f7ff ffba 	bl	8007acc <configuration_is_valid.part.0>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1f6      	bne.n	8007b4a <acc_base_configuration_requested_start_set+0xe>
 8007b5c:	e7f7      	b.n	8007b4e <acc_base_configuration_requested_start_set+0x12>
 8007b5e:	bf00      	nop

08007b60 <acc_base_configuration_requested_length_get>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	4604      	mov	r4, r0
 8007b64:	b110      	cbz	r0, 8007b6c <acc_base_configuration_requested_length_get+0xc>
 8007b66:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8007b6a:	bd10      	pop	{r4, pc}
 8007b6c:	f7ff ffae 	bl	8007acc <configuration_is_valid.part.0>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1f8      	bne.n	8007b66 <acc_base_configuration_requested_length_get+0x6>
 8007b74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b7c <acc_base_configuration_requested_length_get+0x1c>
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	bf00      	nop
 8007b7c:	00000000 	.word	0x00000000

08007b80 <acc_base_configuration_requested_length_set>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	4604      	mov	r4, r0
 8007b84:	ed2d 8b02 	vpush	{d8}
 8007b88:	eeb0 8a40 	vmov.f32	s16, s0
 8007b8c:	b120      	cbz	r0, 8007b98 <acc_base_configuration_requested_length_set+0x18>
 8007b8e:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8007b92:	ecbd 8b02 	vpop	{d8}
 8007b96:	bd10      	pop	{r4, pc}
 8007b98:	f7ff ff98 	bl	8007acc <configuration_is_valid.part.0>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d1f6      	bne.n	8007b8e <acc_base_configuration_requested_length_set+0xe>
 8007ba0:	e7f7      	b.n	8007b92 <acc_base_configuration_requested_length_set+0x12>
 8007ba2:	bf00      	nop

08007ba4 <acc_base_configuration_repetition_mode_on_demand_set>:
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	b110      	cbz	r0, 8007bb0 <acc_base_configuration_repetition_mode_on_demand_set+0xc>
 8007baa:	2301      	movs	r3, #1
 8007bac:	7123      	strb	r3, [r4, #4]
 8007bae:	bd10      	pop	{r4, pc}
 8007bb0:	f7ff ff8c 	bl	8007acc <configuration_is_valid.part.0>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d1f8      	bne.n	8007baa <acc_base_configuration_repetition_mode_on_demand_set+0x6>
 8007bb8:	bd10      	pop	{r4, pc}
 8007bba:	bf00      	nop

08007bbc <acc_base_configuration_power_save_mode_get>:
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	b108      	cbz	r0, 8007bc6 <acc_base_configuration_power_save_mode_get+0xa>
 8007bc2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	f7ff ff81 	bl	8007acc <configuration_is_valid.part.0>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1f9      	bne.n	8007bc2 <acc_base_configuration_power_save_mode_get+0x6>
 8007bce:	bd10      	pop	{r4, pc}

08007bd0 <acc_base_configuration_power_save_mode_set>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	b108      	cbz	r0, 8007bdc <acc_base_configuration_power_save_mode_set+0xc>
 8007bd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8007bda:	bd38      	pop	{r3, r4, r5, pc}
 8007bdc:	f7ff ff76 	bl	8007acc <configuration_is_valid.part.0>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d1f9      	bne.n	8007bd8 <acc_base_configuration_power_save_mode_set+0x8>
 8007be4:	bd38      	pop	{r3, r4, r5, pc}
 8007be6:	bf00      	nop

08007be8 <acc_base_configuration_tx_disable_get>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	4604      	mov	r4, r0
 8007bec:	b110      	cbz	r0, 8007bf4 <acc_base_configuration_tx_disable_get+0xc>
 8007bee:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8007bf2:	bd10      	pop	{r4, pc}
 8007bf4:	f7ff ff6a 	bl	8007acc <configuration_is_valid.part.0>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d1f8      	bne.n	8007bee <acc_base_configuration_tx_disable_get+0x6>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop

08007c00 <acc_base_configuration_tx_disable_set>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	460d      	mov	r5, r1
 8007c04:	4604      	mov	r4, r0
 8007c06:	b110      	cbz	r0, 8007c0e <acc_base_configuration_tx_disable_set+0xe>
 8007c08:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8007c0c:	bd38      	pop	{r3, r4, r5, pc}
 8007c0e:	f7ff ff5d 	bl	8007acc <configuration_is_valid.part.0>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d1f8      	bne.n	8007c08 <acc_base_configuration_tx_disable_set+0x8>
 8007c16:	bd38      	pop	{r3, r4, r5, pc}

08007c18 <acc_base_configuration_decrease_tx_emission_get>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	b110      	cbz	r0, 8007c24 <acc_base_configuration_decrease_tx_emission_get+0xc>
 8007c1e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8007c22:	bd10      	pop	{r4, pc}
 8007c24:	f7ff ff52 	bl	8007acc <configuration_is_valid.part.0>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d1f8      	bne.n	8007c1e <acc_base_configuration_decrease_tx_emission_get+0x6>
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	bf00      	nop

08007c30 <acc_base_configuration_decrease_tx_emission_set>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	460d      	mov	r5, r1
 8007c34:	4604      	mov	r4, r0
 8007c36:	b110      	cbz	r0, 8007c3e <acc_base_configuration_decrease_tx_emission_set+0xe>
 8007c38:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8007c3c:	bd38      	pop	{r3, r4, r5, pc}
 8007c3e:	f7ff ff45 	bl	8007acc <configuration_is_valid.part.0>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d1f8      	bne.n	8007c38 <acc_base_configuration_decrease_tx_emission_set+0x8>
 8007c46:	bd38      	pop	{r3, r4, r5, pc}

08007c48 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	b110      	cbz	r0, 8007c54 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8007c4e:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8007c52:	bd10      	pop	{r4, pc}
 8007c54:	f7ff ff3a 	bl	8007acc <configuration_is_valid.part.0>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d1f8      	bne.n	8007c4e <acc_base_configuration_hw_accelerated_average_samples_get+0x6>
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	bf00      	nop

08007c60 <acc_base_configuration_hw_accelerated_average_samples_set>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	460d      	mov	r5, r1
 8007c64:	4604      	mov	r4, r0
 8007c66:	b108      	cbz	r0, 8007c6c <acc_base_configuration_hw_accelerated_average_samples_set+0xc>
 8007c68:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	f7ff ff2e 	bl	8007acc <configuration_is_valid.part.0>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d1f9      	bne.n	8007c68 <acc_base_configuration_hw_accelerated_average_samples_set+0x8>
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop

08007c78 <acc_base_configuration_radar_engine_creation_set>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	460d      	mov	r5, r1
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	b108      	cbz	r0, 8007c84 <acc_base_configuration_radar_engine_creation_set+0xc>
 8007c80:	6025      	str	r5, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	f7ff ff22 	bl	8007acc <configuration_is_valid.part.0>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d1f9      	bne.n	8007c80 <acc_base_configuration_radar_engine_creation_set+0x8>
 8007c8c:	bd38      	pop	{r3, r4, r5, pc}
 8007c8e:	bf00      	nop

08007c90 <acc_base_configuration_point_start_get>:
 8007c90:	b510      	push	{r4, lr}
 8007c92:	4604      	mov	r4, r0
 8007c94:	b110      	cbz	r0, 8007c9c <acc_base_configuration_point_start_get+0xc>
 8007c96:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8007c9a:	bd10      	pop	{r4, pc}
 8007c9c:	f7ff ff16 	bl	8007acc <configuration_is_valid.part.0>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d1f8      	bne.n	8007c96 <acc_base_configuration_point_start_get+0x6>
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	bf00      	nop

08007ca8 <acc_base_configuration_point_length_get>:
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	4604      	mov	r4, r0
 8007cac:	b110      	cbz	r0, 8007cb4 <acc_base_configuration_point_length_get+0xc>
 8007cae:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8007cb2:	bd10      	pop	{r4, pc}
 8007cb4:	f7ff ff0a 	bl	8007acc <configuration_is_valid.part.0>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d1f8      	bne.n	8007cae <acc_base_configuration_point_length_get+0x6>
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	bf00      	nop

08007cc0 <acc_base_configuration_repetition_mode_get>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	b108      	cbz	r0, 8007cca <acc_base_configuration_repetition_mode_get+0xa>
 8007cc6:	7920      	ldrb	r0, [r4, #4]
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	f7ff feff 	bl	8007acc <configuration_is_valid.part.0>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d1f9      	bne.n	8007cc6 <acc_base_configuration_repetition_mode_get+0x6>
 8007cd2:	bd10      	pop	{r4, pc}

08007cd4 <acc_base_configuration_update_rate_get>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	b158      	cbz	r0, 8007cf2 <acc_base_configuration_update_rate_get+0x1e>
 8007cda:	7923      	ldrb	r3, [r4, #4]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d002      	beq.n	8007ce6 <acc_base_configuration_update_rate_get+0x12>
 8007ce0:	d904      	bls.n	8007cec <acc_base_configuration_update_rate_get+0x18>
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d109      	bne.n	8007cfa <acc_base_configuration_update_rate_get+0x26>
 8007ce6:	ed94 0a02 	vldr	s0, [r4, #8]
 8007cea:	bd10      	pop	{r4, pc}
 8007cec:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8007d00 <acc_base_configuration_update_rate_get+0x2c>
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	f7ff feeb 	bl	8007acc <configuration_is_valid.part.0>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d1ef      	bne.n	8007cda <acc_base_configuration_update_rate_get+0x6>
 8007cfa:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8007d04 <acc_base_configuration_update_rate_get+0x30>
 8007cfe:	bd10      	pop	{r4, pc}
 8007d00:	7f800000 	.word	0x7f800000
 8007d04:	7fc00000 	.word	0x7fc00000

08007d08 <acc_base_configuration_gain_get>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	b108      	cbz	r0, 8007d12 <acc_base_configuration_gain_get+0xa>
 8007d0e:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8007d10:	bd10      	pop	{r4, pc}
 8007d12:	f7ff fedb 	bl	8007acc <configuration_is_valid.part.0>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d1f9      	bne.n	8007d0e <acc_base_configuration_gain_get+0x6>
 8007d1a:	bd10      	pop	{r4, pc}

08007d1c <acc_base_configuration_gain_set>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	460d      	mov	r5, r1
 8007d20:	4604      	mov	r4, r0
 8007d22:	b108      	cbz	r0, 8007d28 <acc_base_configuration_gain_set+0xc>
 8007d24:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	f7ff fed0 	bl	8007acc <configuration_is_valid.part.0>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1f9      	bne.n	8007d24 <acc_base_configuration_gain_set+0x8>
 8007d30:	bd38      	pop	{r3, r4, r5, pc}
 8007d32:	bf00      	nop

08007d34 <acc_base_configuration_integrator_get>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	4604      	mov	r4, r0
 8007d38:	b110      	cbz	r0, 8007d40 <acc_base_configuration_integrator_get+0xc>
 8007d3a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8007d3e:	bd10      	pop	{r4, pc}
 8007d40:	f7ff fec4 	bl	8007acc <configuration_is_valid.part.0>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1f8      	bne.n	8007d3a <acc_base_configuration_integrator_get+0x6>
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	bf00      	nop

08007d4c <acc_base_configuration_integrator_set>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	460d      	mov	r5, r1
 8007d50:	4604      	mov	r4, r0
 8007d52:	b110      	cbz	r0, 8007d5a <acc_base_configuration_integrator_set+0xe>
 8007d54:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8007d58:	bd38      	pop	{r3, r4, r5, pc}
 8007d5a:	f7ff feb7 	bl	8007acc <configuration_is_valid.part.0>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d1f8      	bne.n	8007d54 <acc_base_configuration_integrator_set+0x8>
 8007d62:	bd38      	pop	{r3, r4, r5, pc}

08007d64 <acc_base_configuration_wg_duration_get>:
 8007d64:	b510      	push	{r4, lr}
 8007d66:	4604      	mov	r4, r0
 8007d68:	b110      	cbz	r0, 8007d70 <acc_base_configuration_wg_duration_get+0xc>
 8007d6a:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8007d6e:	bd10      	pop	{r4, pc}
 8007d70:	f7ff feac 	bl	8007acc <configuration_is_valid.part.0>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d1f8      	bne.n	8007d6a <acc_base_configuration_wg_duration_get+0x6>
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	bf00      	nop

08007d7c <acc_base_configuration_wg_duration_set>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	460d      	mov	r5, r1
 8007d80:	4604      	mov	r4, r0
 8007d82:	b110      	cbz	r0, 8007d8a <acc_base_configuration_wg_duration_set+0xe>
 8007d84:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	f7ff fe9f 	bl	8007acc <configuration_is_valid.part.0>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d1f8      	bne.n	8007d84 <acc_base_configuration_wg_duration_set+0x8>
 8007d92:	bd38      	pop	{r3, r4, r5, pc}

08007d94 <acc_base_configuration_integrator_ramp_up_get>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4604      	mov	r4, r0
 8007d98:	b110      	cbz	r0, 8007da0 <acc_base_configuration_integrator_ramp_up_get+0xc>
 8007d9a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8007d9e:	bd10      	pop	{r4, pc}
 8007da0:	f7ff fe94 	bl	8007acc <configuration_is_valid.part.0>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d1f8      	bne.n	8007d9a <acc_base_configuration_integrator_ramp_up_get+0x6>
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop

08007dac <acc_base_configuration_integrator_ramp_up_set>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	460d      	mov	r5, r1
 8007db0:	4604      	mov	r4, r0
 8007db2:	b110      	cbz	r0, 8007dba <acc_base_configuration_integrator_ramp_up_set+0xe>
 8007db4:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8007db8:	bd38      	pop	{r3, r4, r5, pc}
 8007dba:	f7ff fe87 	bl	8007acc <configuration_is_valid.part.0>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d1f8      	bne.n	8007db4 <acc_base_configuration_integrator_ramp_up_set+0x8>
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}

08007dc4 <acc_base_configuration_sampling_mode_get>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	b110      	cbz	r0, 8007dd0 <acc_base_configuration_sampling_mode_get+0xc>
 8007dca:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 8007dce:	bd10      	pop	{r4, pc}
 8007dd0:	f7ff fe7c 	bl	8007acc <configuration_is_valid.part.0>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d1f8      	bne.n	8007dca <acc_base_configuration_sampling_mode_get+0x6>
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	bf00      	nop

08007ddc <acc_base_configuration_sampling_mode_set>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	460d      	mov	r5, r1
 8007de0:	4604      	mov	r4, r0
 8007de2:	b110      	cbz	r0, 8007dea <acc_base_configuration_sampling_mode_set+0xe>
 8007de4:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
 8007dea:	f7ff fe6f 	bl	8007acc <configuration_is_valid.part.0>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d1f8      	bne.n	8007de4 <acc_base_configuration_sampling_mode_set+0x8>
 8007df2:	bd38      	pop	{r3, r4, r5, pc}

08007df4 <acc_base_configuration_sweep_type_debug_set>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	460d      	mov	r5, r1
 8007df8:	4604      	mov	r4, r0
 8007dfa:	b110      	cbz	r0, 8007e02 <acc_base_configuration_sweep_type_debug_set+0xe>
 8007dfc:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8007e00:	bd38      	pop	{r3, r4, r5, pc}
 8007e02:	f7ff fe63 	bl	8007acc <configuration_is_valid.part.0>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d1f8      	bne.n	8007dfc <acc_base_configuration_sweep_type_debug_set+0x8>
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}

08007e0c <acc_base_configuration_use_point_range_set>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	460d      	mov	r5, r1
 8007e10:	4604      	mov	r4, r0
 8007e12:	b110      	cbz	r0, 8007e1a <acc_base_configuration_use_point_range_set+0xe>
 8007e14:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
 8007e1a:	f7ff fe57 	bl	8007acc <configuration_is_valid.part.0>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1f8      	bne.n	8007e14 <acc_base_configuration_use_point_range_set+0x8>
 8007e22:	bd38      	pop	{r3, r4, r5, pc}

08007e24 <acc_base_configuration_use_point_range_get>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	4604      	mov	r4, r0
 8007e28:	b110      	cbz	r0, 8007e30 <acc_base_configuration_use_point_range_get+0xc>
 8007e2a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8007e2e:	bd10      	pop	{r4, pc}
 8007e30:	f7ff fe4c 	bl	8007acc <configuration_is_valid.part.0>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d1f8      	bne.n	8007e2a <acc_base_configuration_use_point_range_get+0x6>
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	bf00      	nop

08007e3c <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	460d      	mov	r5, r1
 8007e40:	4604      	mov	r4, r0
 8007e42:	b110      	cbz	r0, 8007e4a <acc_base_configuration_use_fast_dll_refresh_routine_set+0xe>
 8007e44:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8007e48:	bd38      	pop	{r3, r4, r5, pc}
 8007e4a:	f7ff fe3f 	bl	8007acc <configuration_is_valid.part.0>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d1f8      	bne.n	8007e44 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x8>
 8007e52:	bd38      	pop	{r3, r4, r5, pc}

08007e54 <acc_base_configuration_staggered_vga_stabilization_time_set>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	460d      	mov	r5, r1
 8007e58:	4604      	mov	r4, r0
 8007e5a:	b110      	cbz	r0, 8007e62 <acc_base_configuration_staggered_vga_stabilization_time_set+0xe>
 8007e5c:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
 8007e62:	f7ff fe33 	bl	8007acc <configuration_is_valid.part.0>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d1f8      	bne.n	8007e5c <acc_base_configuration_staggered_vga_stabilization_time_set+0x8>
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}

08007e6c <acc_base_configuration_ignore_range_limits_get>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	b110      	cbz	r0, 8007e78 <acc_base_configuration_ignore_range_limits_get+0xc>
 8007e72:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 8007e76:	bd10      	pop	{r4, pc}
 8007e78:	f7ff fe28 	bl	8007acc <configuration_is_valid.part.0>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d1f8      	bne.n	8007e72 <acc_base_configuration_ignore_range_limits_get+0x6>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	bf00      	nop

08007e84 <acc_base_configuration_sparse_sweeps_per_frame_set>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	460d      	mov	r5, r1
 8007e88:	4604      	mov	r4, r0
 8007e8a:	b110      	cbz	r0, 8007e92 <acc_base_configuration_sparse_sweeps_per_frame_set+0xe>
 8007e8c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8007e90:	bd38      	pop	{r3, r4, r5, pc}
 8007e92:	f7ff fe1b 	bl	8007acc <configuration_is_valid.part.0>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d1f8      	bne.n	8007e8c <acc_base_configuration_sparse_sweeps_per_frame_set+0x8>
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}

08007e9c <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	b110      	cbz	r0, 8007ea8 <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 8007ea2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8007ea6:	bd10      	pop	{r4, pc}
 8007ea8:	f7ff fe10 	bl	8007acc <configuration_is_valid.part.0>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d1f8      	bne.n	8007ea2 <acc_base_configuration_sparse_sweeps_per_frame_get+0x6>
 8007eb0:	bd10      	pop	{r4, pc}
 8007eb2:	bf00      	nop

08007eb4 <acc_base_configuration_sparse_sweep_rate_set>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	ed2d 8b02 	vpush	{d8}
 8007ebc:	eeb0 8a40 	vmov.f32	s16, s0
 8007ec0:	b120      	cbz	r0, 8007ecc <acc_base_configuration_sparse_sweep_rate_set+0x18>
 8007ec2:	ed84 8a17 	vstr	s16, [r4, #92]	; 0x5c
 8007ec6:	ecbd 8b02 	vpop	{d8}
 8007eca:	bd10      	pop	{r4, pc}
 8007ecc:	f7ff fdfe 	bl	8007acc <configuration_is_valid.part.0>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d1f6      	bne.n	8007ec2 <acc_base_configuration_sparse_sweep_rate_set+0xe>
 8007ed4:	e7f7      	b.n	8007ec6 <acc_base_configuration_sparse_sweep_rate_set+0x12>
 8007ed6:	bf00      	nop

08007ed8 <acc_base_configuration_sparse_sweep_rate_get>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	4604      	mov	r4, r0
 8007edc:	b110      	cbz	r0, 8007ee4 <acc_base_configuration_sparse_sweep_rate_get+0xc>
 8007ede:	ed94 0a17 	vldr	s0, [r4, #92]	; 0x5c
 8007ee2:	bd10      	pop	{r4, pc}
 8007ee4:	f7ff fdf2 	bl	8007acc <configuration_is_valid.part.0>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1f8      	bne.n	8007ede <acc_base_configuration_sparse_sweep_rate_get+0x6>
 8007eec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007ef4 <acc_base_configuration_sparse_sweep_rate_get+0x1c>
 8007ef0:	bd10      	pop	{r4, pc}
 8007ef2:	bf00      	nop
 8007ef4:	00000000 	.word	0x00000000

08007ef8 <acc_base_configuration_downsampling_factor_get>:
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	4604      	mov	r4, r0
 8007efc:	b110      	cbz	r0, 8007f04 <acc_base_configuration_downsampling_factor_get+0xc>
 8007efe:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 8007f02:	bd10      	pop	{r4, pc}
 8007f04:	f7ff fde2 	bl	8007acc <configuration_is_valid.part.0>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d1f8      	bne.n	8007efe <acc_base_configuration_downsampling_factor_get+0x6>
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	bf00      	nop

08007f10 <acc_base_configuration_downsampling_factor_set>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	460d      	mov	r5, r1
 8007f14:	4604      	mov	r4, r0
 8007f16:	b110      	cbz	r0, 8007f1e <acc_base_configuration_downsampling_factor_set+0xe>
 8007f18:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	f7ff fdd5 	bl	8007acc <configuration_is_valid.part.0>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d1f8      	bne.n	8007f18 <acc_base_configuration_downsampling_factor_set+0x8>
 8007f26:	bd38      	pop	{r3, r4, r5, pc}

08007f28 <acc_base_configuration_noise_level_normalization_get>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	b110      	cbz	r0, 8007f34 <acc_base_configuration_noise_level_normalization_get+0xc>
 8007f2e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 8007f32:	bd10      	pop	{r4, pc}
 8007f34:	f7ff fdca 	bl	8007acc <configuration_is_valid.part.0>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d1f8      	bne.n	8007f2e <acc_base_configuration_noise_level_normalization_get+0x6>
 8007f3c:	bd10      	pop	{r4, pc}
 8007f3e:	bf00      	nop

08007f40 <acc_base_configuration_noise_level_normalization_set>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	460d      	mov	r5, r1
 8007f44:	4604      	mov	r4, r0
 8007f46:	b110      	cbz	r0, 8007f4e <acc_base_configuration_noise_level_normalization_set+0xe>
 8007f48:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	f7ff fdbd 	bl	8007acc <configuration_is_valid.part.0>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d1f8      	bne.n	8007f48 <acc_base_configuration_noise_level_normalization_set+0x8>
 8007f56:	bd38      	pop	{r3, r4, r5, pc}

08007f58 <acc_base_configuration_noise_deviation_override_get>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	b110      	cbz	r0, 8007f64 <acc_base_configuration_noise_deviation_override_get+0xc>
 8007f5e:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 8007f62:	bd10      	pop	{r4, pc}
 8007f64:	f7ff fdb2 	bl	8007acc <configuration_is_valid.part.0>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d1f8      	bne.n	8007f5e <acc_base_configuration_noise_deviation_override_get+0x6>
 8007f6c:	bd10      	pop	{r4, pc}
 8007f6e:	bf00      	nop

08007f70 <acc_base_configuration_asynchronous_measurement_get>:
 8007f70:	b510      	push	{r4, lr}
 8007f72:	4604      	mov	r4, r0
 8007f74:	b110      	cbz	r0, 8007f7c <acc_base_configuration_asynchronous_measurement_get+0xc>
 8007f76:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	f7ff fda6 	bl	8007acc <configuration_is_valid.part.0>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d1f8      	bne.n	8007f76 <acc_base_configuration_asynchronous_measurement_get+0x6>
 8007f84:	bd10      	pop	{r4, pc}
 8007f86:	bf00      	nop

08007f88 <acc_base_configuration_asynchronous_measurement_set>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	460d      	mov	r5, r1
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	b110      	cbz	r0, 8007f96 <acc_base_configuration_asynchronous_measurement_set+0xe>
 8007f90:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 8007f94:	bd38      	pop	{r3, r4, r5, pc}
 8007f96:	f7ff fd99 	bl	8007acc <configuration_is_valid.part.0>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d1f8      	bne.n	8007f90 <acc_base_configuration_asynchronous_measurement_set+0x8>
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}

08007fa0 <acc_base_configuration_min_pipeline_memory_size_get>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	b110      	cbz	r0, 8007fac <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 8007fa6:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8007faa:	bd10      	pop	{r4, pc}
 8007fac:	f7ff fd8e 	bl	8007acc <configuration_is_valid.part.0>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d1f8      	bne.n	8007fa6 <acc_base_configuration_min_pipeline_memory_size_get+0x6>
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	bf00      	nop

08007fb8 <acc_base_configuration_min_pipeline_memory_size_set>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	460d      	mov	r5, r1
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	b110      	cbz	r0, 8007fc6 <acc_base_configuration_min_pipeline_memory_size_set+0xe>
 8007fc0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8007fc4:	bd38      	pop	{r3, r4, r5, pc}
 8007fc6:	f7ff fd81 	bl	8007acc <configuration_is_valid.part.0>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1f8      	bne.n	8007fc0 <acc_base_configuration_min_pipeline_memory_size_set+0x8>
 8007fce:	bd38      	pop	{r3, r4, r5, pc}

08007fd0 <acc_base_configuration_maximize_signal_attenuation_set>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	b110      	cbz	r0, 8007fde <acc_base_configuration_maximize_signal_attenuation_set+0xe>
 8007fd8:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 8007fdc:	bd38      	pop	{r3, r4, r5, pc}
 8007fde:	f7ff fd75 	bl	8007acc <configuration_is_valid.part.0>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d1f8      	bne.n	8007fd8 <acc_base_configuration_maximize_signal_attenuation_set+0x8>
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}

08007fe8 <acc_base_configuration_cca_get>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	460e      	mov	r6, r1
 8007fec:	4615      	mov	r5, r2
 8007fee:	4604      	mov	r4, r0
 8007ff0:	b150      	cbz	r0, 8008008 <acc_base_configuration_cca_get+0x20>
 8007ff2:	b116      	cbz	r6, 8007ffa <acc_base_configuration_cca_get+0x12>
 8007ff4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007ff8:	7033      	strb	r3, [r6, #0]
 8007ffa:	b115      	cbz	r5, 8008002 <acc_base_configuration_cca_get+0x1a>
 8007ffc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8008000:	802b      	strh	r3, [r5, #0]
 8008002:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	f7ff fd60 	bl	8007acc <configuration_is_valid.part.0>
 800800c:	2800      	cmp	r0, #0
 800800e:	d1f0      	bne.n	8007ff2 <acc_base_configuration_cca_get+0xa>
 8008010:	bd70      	pop	{r4, r5, r6, pc}
 8008012:	bf00      	nop

08008014 <acc_base_configuration_cca_set>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	460d      	mov	r5, r1
 8008018:	4616      	mov	r6, r2
 800801a:	461f      	mov	r7, r3
 800801c:	4604      	mov	r4, r0
 800801e:	b130      	cbz	r0, 800802e <acc_base_configuration_cca_set+0x1a>
 8008020:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
 8008024:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8008028:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 800802c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800802e:	f7ff fd4d 	bl	8007acc <configuration_is_valid.part.0>
 8008032:	2800      	cmp	r0, #0
 8008034:	d1f4      	bne.n	8008020 <acc_base_configuration_cca_set+0xc>
 8008036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008038 <acc_base_configuration_mur_set>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	460d      	mov	r5, r1
 800803c:	4604      	mov	r4, r0
 800803e:	b110      	cbz	r0, 8008046 <acc_base_configuration_mur_set+0xe>
 8008040:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8008044:	bd38      	pop	{r3, r4, r5, pc}
 8008046:	f7ff fd41 	bl	8007acc <configuration_is_valid.part.0>
 800804a:	2800      	cmp	r0, #0
 800804c:	d1f8      	bne.n	8008040 <acc_base_configuration_mur_set+0x8>
 800804e:	bd38      	pop	{r3, r4, r5, pc}

08008050 <acc_base_configuration_mur_get>:
 8008050:	b510      	push	{r4, lr}
 8008052:	4604      	mov	r4, r0
 8008054:	b110      	cbz	r0, 800805c <acc_base_configuration_mur_get+0xc>
 8008056:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800805a:	bd10      	pop	{r4, pc}
 800805c:	f7ff fd36 	bl	8007acc <configuration_is_valid.part.0>
 8008060:	2800      	cmp	r0, #0
 8008062:	d1f8      	bne.n	8008056 <acc_base_configuration_mur_get+0x6>
 8008064:	2006      	movs	r0, #6
 8008066:	bd10      	pop	{r4, pc}

08008068 <acc_base_configuration_print>:
 8008068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	b08a      	sub	sp, #40	; 0x28
 800806e:	4604      	mov	r4, r0
 8008070:	f7ff fcb6 	bl	80079e0 <acc_rss_integration_log_level>
 8008074:	2801      	cmp	r0, #1
 8008076:	d92e      	bls.n	80080d6 <acc_base_configuration_print+0x6e>
 8008078:	4b56      	ldr	r3, [pc, #344]	; (80081d4 <acc_base_configuration_print+0x16c>)
 800807a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800807c:	2c00      	cmp	r4, #0
 800807e:	d036      	beq.n	80080ee <acc_base_configuration_print+0x86>
 8008080:	68e3      	ldr	r3, [r4, #12]
 8008082:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 8008086:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
 8008088:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
 800808c:	f8b4 e042 	ldrh.w	lr, [r4, #66]	; 0x42
 8008090:	f8b4 8044 	ldrh.w	r8, [r4, #68]	; 0x44
 8008094:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008096:	2a04      	cmp	r2, #4
 8008098:	d920      	bls.n	80080dc <acc_base_configuration_print+0x74>
 800809a:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 800809e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80081d8 <acc_base_configuration_print+0x170>
 80080a2:	b311      	cbz	r1, 80080ea <acc_base_configuration_print+0x82>
 80080a4:	4a4c      	ldr	r2, [pc, #304]	; (80081d8 <acc_base_configuration_print+0x170>)
 80080a6:	484d      	ldr	r0, [pc, #308]	; (80081dc <acc_base_configuration_print+0x174>)
 80080a8:	2901      	cmp	r1, #1
 80080aa:	bf08      	it	eq
 80080ac:	4602      	moveq	r2, r0
 80080ae:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 80080b2:	f8b4 a05a 	ldrh.w	sl, [r4, #90]	; 0x5a
 80080b6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80080ba:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80080be:	e9cd a008 	strd	sl, r0, [sp, #32]
 80080c2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80080c6:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80080ca:	e9cd 6700 	strd	r6, r7, [sp]
 80080ce:	4a44      	ldr	r2, [pc, #272]	; (80081e0 <acc_base_configuration_print+0x178>)
 80080d0:	4944      	ldr	r1, [pc, #272]	; (80081e4 <acc_base_configuration_print+0x17c>)
 80080d2:	2002      	movs	r0, #2
 80080d4:	47a8      	blx	r5
 80080d6:	b00a      	add	sp, #40	; 0x28
 80080d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080dc:	4942      	ldr	r1, [pc, #264]	; (80081e8 <acc_base_configuration_print+0x180>)
 80080de:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]
 80080e2:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 80080e6:	2900      	cmp	r1, #0
 80080e8:	d1dc      	bne.n	80080a4 <acc_base_configuration_print+0x3c>
 80080ea:	4a40      	ldr	r2, [pc, #256]	; (80081ec <acc_base_configuration_print+0x184>)
 80080ec:	e7df      	b.n	80080ae <acc_base_configuration_print+0x46>
 80080ee:	f7ff fced 	bl	8007acc <configuration_is_valid.part.0>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d1c4      	bne.n	8008080 <acc_base_configuration_print+0x18>
 80080f6:	f7ff fce9 	bl	8007acc <configuration_is_valid.part.0>
 80080fa:	bb68      	cbnz	r0, 8008158 <acc_base_configuration_print+0xf0>
 80080fc:	f7ff fce6 	bl	8007acc <configuration_is_valid.part.0>
 8008100:	2800      	cmp	r0, #0
 8008102:	d164      	bne.n	80081ce <acc_base_configuration_print+0x166>
 8008104:	f7ff fce2 	bl	8007acc <configuration_is_valid.part.0>
 8008108:	2800      	cmp	r0, #0
 800810a:	d15c      	bne.n	80081c6 <acc_base_configuration_print+0x15e>
 800810c:	f7ff fcde 	bl	8007acc <configuration_is_valid.part.0>
 8008110:	2800      	cmp	r0, #0
 8008112:	d153      	bne.n	80081bc <acc_base_configuration_print+0x154>
 8008114:	f7ff fcda 	bl	8007acc <configuration_is_valid.part.0>
 8008118:	2800      	cmp	r0, #0
 800811a:	d149      	bne.n	80081b0 <acc_base_configuration_print+0x148>
 800811c:	f7ff fcd6 	bl	8007acc <configuration_is_valid.part.0>
 8008120:	2800      	cmp	r0, #0
 8008122:	d13e      	bne.n	80081a2 <acc_base_configuration_print+0x13a>
 8008124:	f7ff fcd2 	bl	8007acc <configuration_is_valid.part.0>
 8008128:	bbb8      	cbnz	r0, 800819a <acc_base_configuration_print+0x132>
 800812a:	f7ff fccf 	bl	8007acc <configuration_is_valid.part.0>
 800812e:	4606      	mov	r6, r0
 8008130:	bb48      	cbnz	r0, 8008186 <acc_base_configuration_print+0x11e>
 8008132:	f7ff fccb 	bl	8007acc <configuration_is_valid.part.0>
 8008136:	4607      	mov	r7, r0
 8008138:	b9d8      	cbnz	r0, 8008172 <acc_base_configuration_print+0x10a>
 800813a:	f7ff fcc7 	bl	8007acc <configuration_is_valid.part.0>
 800813e:	b968      	cbnz	r0, 800815c <acc_base_configuration_print+0xf4>
 8008140:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80081f0 <acc_base_configuration_print+0x188>
 8008144:	4a29      	ldr	r2, [pc, #164]	; (80081ec <acc_base_configuration_print+0x184>)
 8008146:	4603      	mov	r3, r0
 8008148:	4682      	mov	sl, r0
 800814a:	4601      	mov	r1, r0
 800814c:	4680      	mov	r8, r0
 800814e:	4686      	mov	lr, r0
 8008150:	4684      	mov	ip, r0
 8008152:	4607      	mov	r7, r0
 8008154:	4606      	mov	r6, r0
 8008156:	e7b0      	b.n	80080ba <acc_base_configuration_print+0x52>
 8008158:	4623      	mov	r3, r4
 800815a:	e792      	b.n	8008082 <acc_base_configuration_print+0x1a>
 800815c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80081f0 <acc_base_configuration_print+0x188>
 8008160:	4a22      	ldr	r2, [pc, #136]	; (80081ec <acc_base_configuration_print+0x184>)
 8008162:	463b      	mov	r3, r7
 8008164:	46ba      	mov	sl, r7
 8008166:	4639      	mov	r1, r7
 8008168:	46b8      	mov	r8, r7
 800816a:	46be      	mov	lr, r7
 800816c:	46bc      	mov	ip, r7
 800816e:	463e      	mov	r6, r7
 8008170:	e7a1      	b.n	80080b6 <acc_base_configuration_print+0x4e>
 8008172:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80081f0 <acc_base_configuration_print+0x188>
 8008176:	4a1d      	ldr	r2, [pc, #116]	; (80081ec <acc_base_configuration_print+0x184>)
 8008178:	4633      	mov	r3, r6
 800817a:	4631      	mov	r1, r6
 800817c:	46b0      	mov	r8, r6
 800817e:	46b6      	mov	lr, r6
 8008180:	46b4      	mov	ip, r6
 8008182:	4637      	mov	r7, r6
 8008184:	e795      	b.n	80080b2 <acc_base_configuration_print+0x4a>
 8008186:	2300      	movs	r3, #0
 8008188:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80081f0 <acc_base_configuration_print+0x188>
 800818c:	4a17      	ldr	r2, [pc, #92]	; (80081ec <acc_base_configuration_print+0x184>)
 800818e:	4698      	mov	r8, r3
 8008190:	469e      	mov	lr, r3
 8008192:	469c      	mov	ip, r3
 8008194:	461f      	mov	r7, r3
 8008196:	461e      	mov	r6, r3
 8008198:	e789      	b.n	80080ae <acc_base_configuration_print+0x46>
 800819a:	2300      	movs	r3, #0
 800819c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80081a0:	deff      	udf	#255	; 0xff
 80081a2:	4623      	mov	r3, r4
 80081a4:	46a0      	mov	r8, r4
 80081a6:	46a6      	mov	lr, r4
 80081a8:	46a4      	mov	ip, r4
 80081aa:	4627      	mov	r7, r4
 80081ac:	4626      	mov	r6, r4
 80081ae:	e771      	b.n	8008094 <acc_base_configuration_print+0x2c>
 80081b0:	4623      	mov	r3, r4
 80081b2:	46a6      	mov	lr, r4
 80081b4:	46a4      	mov	ip, r4
 80081b6:	4627      	mov	r7, r4
 80081b8:	4626      	mov	r6, r4
 80081ba:	e769      	b.n	8008090 <acc_base_configuration_print+0x28>
 80081bc:	4623      	mov	r3, r4
 80081be:	46a4      	mov	ip, r4
 80081c0:	4627      	mov	r7, r4
 80081c2:	4626      	mov	r6, r4
 80081c4:	e762      	b.n	800808c <acc_base_configuration_print+0x24>
 80081c6:	4623      	mov	r3, r4
 80081c8:	4627      	mov	r7, r4
 80081ca:	4626      	mov	r6, r4
 80081cc:	e75c      	b.n	8008088 <acc_base_configuration_print+0x20>
 80081ce:	4623      	mov	r3, r4
 80081d0:	4626      	mov	r6, r4
 80081d2:	e758      	b.n	8008086 <acc_base_configuration_print+0x1e>
 80081d4:	200007b0 	.word	0x200007b0
 80081d8:	08012a78 	.word	0x08012a78
 80081dc:	08011684 	.word	0x08011684
 80081e0:	0801168c 	.word	0x0801168c
 80081e4:	0801166c 	.word	0x0801166c
 80081e8:	0801189c 	.word	0x0801189c
 80081ec:	08011680 	.word	0x08011680
 80081f0:	08011688 	.word	0x08011688

080081f4 <acc_base_configuration_check>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	4604      	mov	r4, r0
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d038      	beq.n	800826e <acc_base_configuration_check+0x7a>
 80081fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d819      	bhi.n	8008236 <acc_base_configuration_check+0x42>
 8008202:	d024      	beq.n	800824e <acc_base_configuration_check+0x5a>
 8008204:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008206:	2b16      	cmp	r3, #22
 8008208:	d81e      	bhi.n	8008248 <acc_base_configuration_check+0x54>
 800820a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800820c:	3b01      	subs	r3, #1
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b3e      	cmp	r3, #62	; 0x3e
 8008212:	d835      	bhi.n	8008280 <acc_base_configuration_check+0x8c>
 8008214:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008216:	7923      	ldrb	r3, [r4, #4]
 8008218:	b31e      	cbz	r6, 8008262 <acc_base_configuration_check+0x6e>
 800821a:	2b03      	cmp	r3, #3
 800821c:	d033      	beq.n	8008286 <acc_base_configuration_check+0x92>
 800821e:	f036 0304 	bics.w	r3, r6, #4
 8008222:	d020      	beq.n	8008266 <acc_base_configuration_check+0x72>
 8008224:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8008228:	2b06      	cmp	r3, #6
 800822a:	d026      	beq.n	800827a <acc_base_configuration_check+0x86>
 800822c:	2b09      	cmp	r3, #9
 800822e:	d024      	beq.n	800827a <acc_base_configuration_check+0x86>
 8008230:	4b1f      	ldr	r3, [pc, #124]	; (80082b0 <acc_base_configuration_check+0xbc>)
 8008232:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <acc_base_configuration_check+0xc0>)
 8008234:	e001      	b.n	800823a <acc_base_configuration_check+0x46>
 8008236:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <acc_base_configuration_check+0xbc>)
 8008238:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <acc_base_configuration_check+0xc4>)
 800823a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823c:	491f      	ldr	r1, [pc, #124]	; (80082bc <acc_base_configuration_check+0xc8>)
 800823e:	2000      	movs	r0, #0
 8008240:	4798      	blx	r3
 8008242:	2500      	movs	r5, #0
 8008244:	4628      	mov	r0, r5
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	4b19      	ldr	r3, [pc, #100]	; (80082b0 <acc_base_configuration_check+0xbc>)
 800824a:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <acc_base_configuration_check+0xcc>)
 800824c:	e7f5      	b.n	800823a <acc_base_configuration_check+0x46>
 800824e:	f7ff fb3d 	bl	80078cc <acc_rss_integration_is_hibernate_capable>
 8008252:	4605      	mov	r5, r0
 8008254:	b310      	cbz	r0, 800829c <acc_base_configuration_check+0xa8>
 8008256:	7923      	ldrb	r3, [r4, #4]
 8008258:	2b03      	cmp	r3, #3
 800825a:	d1d3      	bne.n	8008204 <acc_base_configuration_check+0x10>
 800825c:	4b14      	ldr	r3, [pc, #80]	; (80082b0 <acc_base_configuration_check+0xbc>)
 800825e:	4a19      	ldr	r2, [pc, #100]	; (80082c4 <acc_base_configuration_check+0xd0>)
 8008260:	e7eb      	b.n	800823a <acc_base_configuration_check+0x46>
 8008262:	2b03      	cmp	r3, #3
 8008264:	d020      	beq.n	80082a8 <acc_base_configuration_check+0xb4>
 8008266:	2301      	movs	r3, #1
 8008268:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 800826c:	e7da      	b.n	8008224 <acc_base_configuration_check+0x30>
 800826e:	f7ff fc2d 	bl	8007acc <configuration_is_valid.part.0>
 8008272:	4605      	mov	r5, r0
 8008274:	2800      	cmp	r0, #0
 8008276:	d1c1      	bne.n	80081fc <acc_base_configuration_check+0x8>
 8008278:	e7e4      	b.n	8008244 <acc_base_configuration_check+0x50>
 800827a:	2501      	movs	r5, #1
 800827c:	4628      	mov	r0, r5
 800827e:	bd70      	pop	{r4, r5, r6, pc}
 8008280:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <acc_base_configuration_check+0xbc>)
 8008282:	4a11      	ldr	r2, [pc, #68]	; (80082c8 <acc_base_configuration_check+0xd4>)
 8008284:	e7d9      	b.n	800823a <acc_base_configuration_check+0x46>
 8008286:	f894 504e 	ldrb.w	r5, [r4, #78]	; 0x4e
 800828a:	2d00      	cmp	r5, #0
 800828c:	d1c7      	bne.n	800821e <acc_base_configuration_check+0x2a>
 800828e:	4b08      	ldr	r3, [pc, #32]	; (80082b0 <acc_base_configuration_check+0xbc>)
 8008290:	4a0e      	ldr	r2, [pc, #56]	; (80082cc <acc_base_configuration_check+0xd8>)
 8008292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008294:	4909      	ldr	r1, [pc, #36]	; (80082bc <acc_base_configuration_check+0xc8>)
 8008296:	4628      	mov	r0, r5
 8008298:	4798      	blx	r3
 800829a:	e7d3      	b.n	8008244 <acc_base_configuration_check+0x50>
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <acc_base_configuration_check+0xbc>)
 800829e:	4a0c      	ldr	r2, [pc, #48]	; (80082d0 <acc_base_configuration_check+0xdc>)
 80082a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a2:	4906      	ldr	r1, [pc, #24]	; (80082bc <acc_base_configuration_check+0xc8>)
 80082a4:	4798      	blx	r3
 80082a6:	e7cd      	b.n	8008244 <acc_base_configuration_check+0x50>
 80082a8:	4b01      	ldr	r3, [pc, #4]	; (80082b0 <acc_base_configuration_check+0xbc>)
 80082aa:	4a0a      	ldr	r2, [pc, #40]	; (80082d4 <acc_base_configuration_check+0xe0>)
 80082ac:	e7c5      	b.n	800823a <acc_base_configuration_check+0x46>
 80082ae:	bf00      	nop
 80082b0:	200007b0 	.word	0x200007b0
 80082b4:	08011864 	.word	0x08011864
 80082b8:	080116c4 	.word	0x080116c4
 80082bc:	0801166c 	.word	0x0801166c
 80082c0:	08011760 	.word	0x08011760
 80082c4:	0801171c 	.word	0x0801171c
 80082c8:	08011794 	.word	0x08011794
 80082cc:	08011824 	.word	0x08011824
 80082d0:	080116dc 	.word	0x080116dc
 80082d4:	080117e8 	.word	0x080117e8

080082d8 <inject_data>:
 80082d8:	3034      	adds	r0, #52	; 0x34
 80082da:	f002 ba21 	b.w	800a720 <acc_element_source_adc_inject_data>
 80082de:	bf00      	nop

080082e0 <disassemble>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	6805      	ldr	r5, [r0, #0]
 80082e4:	4604      	mov	r4, r0
 80082e6:	b155      	cbz	r5, 80082fe <disassemble+0x1e>
 80082e8:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80082ec:	f002 f9c8 	bl	800a680 <acc_element_source_adc_release>
 80082f0:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 80082f4:	f7ff fb62 	bl	80079bc <acc_rss_integration_mem_free>
 80082f8:	4628      	mov	r0, r5
 80082fa:	f7ff fb5f 	bl	80079bc <acc_rss_integration_mem_free>
 80082fe:	4620      	mov	r0, r4
 8008300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008304:	f7ff bb5a 	b.w	80079bc <acc_rss_integration_mem_free>

08008308 <produce>:
 8008308:	b510      	push	{r4, lr}
 800830a:	4604      	mov	r4, r0
 800830c:	3034      	adds	r0, #52	; 0x34
 800830e:	f002 f9c5 	bl	800a69c <acc_element_source_adc_produce>
 8008312:	b960      	cbnz	r0, 800832e <produce+0x26>
 8008314:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8008318:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 800831c:	6118      	str	r0, [r3, #16]
 800831e:	2101      	movs	r1, #1
 8008320:	7198      	strb	r0, [r3, #6]
 8008322:	7159      	strb	r1, [r3, #5]
 8008324:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8008328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800832c:	4710      	bx	r2
 800832e:	bd10      	pop	{r4, pc}

08008330 <acc_pipeline_direct_assemble>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	b085      	sub	sp, #20
 8008336:	469b      	mov	fp, r3
 8008338:	4606      	mov	r6, r0
 800833a:	23ec      	movs	r3, #236	; 0xec
 800833c:	4689      	mov	r9, r1
 800833e:	4617      	mov	r7, r2
 8008340:	2110      	movs	r1, #16
 8008342:	4a58      	ldr	r2, [pc, #352]	; (80084a4 <acc_pipeline_direct_assemble+0x174>)
 8008344:	f8cd b00c 	str.w	fp, [sp, #12]
 8008348:	2001      	movs	r0, #1
 800834a:	f7ff fb17 	bl	800797c <acc_rss_integration_mem_calloc_debug>
 800834e:	4a55      	ldr	r2, [pc, #340]	; (80084a4 <acc_pipeline_direct_assemble+0x174>)
 8008350:	4605      	mov	r5, r0
 8008352:	23ed      	movs	r3, #237	; 0xed
 8008354:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008358:	2001      	movs	r0, #1
 800835a:	f7ff fb0f 	bl	800797c <acc_rss_integration_mem_calloc_debug>
 800835e:	4604      	mov	r4, r0
 8008360:	2d00      	cmp	r5, #0
 8008362:	f000 8094 	beq.w	800848e <acc_pipeline_direct_assemble+0x15e>
 8008366:	2800      	cmp	r0, #0
 8008368:	f000 8091 	beq.w	800848e <acc_pipeline_direct_assemble+0x15e>
 800836c:	f100 02f8 	add.w	r2, r0, #248	; 0xf8
 8008370:	f100 0b14 	add.w	fp, r0, #20
 8008374:	f100 0834 	add.w	r8, r0, #52	; 0x34
 8008378:	6028      	str	r0, [r5, #0]
 800837a:	4631      	mov	r1, r6
 800837c:	9200      	str	r2, [sp, #0]
 800837e:	4640      	mov	r0, r8
 8008380:	465b      	mov	r3, fp
 8008382:	463a      	mov	r2, r7
 8008384:	f002 f95c 	bl	800a640 <acc_element_source_adc_init_radar_engine>
 8008388:	4606      	mov	r6, r0
 800838a:	2800      	cmp	r0, #0
 800838c:	d045      	beq.n	800841a <acc_pipeline_direct_assemble+0xea>
 800838e:	f8b4 a106 	ldrh.w	sl, [r4, #262]	; 0x106
 8008392:	f8b4 6102 	ldrh.w	r6, [r4, #258]	; 0x102
 8008396:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
 800839a:	4456      	add	r6, sl
 800839c:	0076      	lsls	r6, r6, #1
 800839e:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 80083a2:	45b2      	cmp	sl, r6
 80083a4:	4638      	mov	r0, r7
 80083a6:	bf38      	it	cc
 80083a8:	46b2      	movcc	sl, r6
 80083aa:	f7ff fdf9 	bl	8007fa0 <acc_base_configuration_min_pipeline_memory_size_get>
 80083ae:	4582      	cmp	sl, r0
 80083b0:	bf38      	it	cc
 80083b2:	4682      	movcc	sl, r0
 80083b4:	493b      	ldr	r1, [pc, #236]	; (80084a4 <acc_pipeline_direct_assemble+0x174>)
 80083b6:	4650      	mov	r0, sl
 80083b8:	f44f 7298 	mov.w	r2, #304	; 0x130
 80083bc:	f7ff faba 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 80083c0:	4606      	mov	r6, r0
 80083c2:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80083c6:	b340      	cbz	r0, 800841a <acc_pipeline_direct_assemble+0xea>
 80083c8:	f104 0010 	add.w	r0, r4, #16
 80083cc:	f104 0e06 	add.w	lr, r4, #6
 80083d0:	64a6      	str	r6, [r4, #72]	; 0x48
 80083d2:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 80083d6:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
 80083da:	f104 0c07 	add.w	ip, r4, #7
 80083de:	65a0      	str	r0, [r4, #88]	; 0x58
 80083e0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 80083e4:	f104 060c 	add.w	r6, r4, #12
 80083e8:	f104 0008 	add.w	r0, r4, #8
 80083ec:	1d23      	adds	r3, r4, #4
 80083ee:	e9c4 6019 	strd	r6, r0, [r4, #100]	; 0x64
 80083f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80083f6:	f8c4 a118 	str.w	sl, [r4, #280]	; 0x118
 80083fa:	6564      	str	r4, [r4, #84]	; 0x54
 80083fc:	f8c4 40ec 	str.w	r4, [r4, #236]	; 0xec
 8008400:	465a      	mov	r2, fp
 8008402:	4639      	mov	r1, r7
 8008404:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
 8008408:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 800840c:	f504 738a 	add.w	r3, r4, #276	; 0x114
 8008410:	4640      	mov	r0, r8
 8008412:	f002 f923 	bl	800a65c <acc_element_source_adc_init>
 8008416:	4606      	mov	r6, r0
 8008418:	b938      	cbnz	r0, 800842a <acc_pipeline_direct_assemble+0xfa>
 800841a:	4628      	mov	r0, r5
 800841c:	f7ff ff60 	bl	80082e0 <disassemble>
 8008420:	4635      	mov	r5, r6
 8008422:	4628      	mov	r0, r5
 8008424:	b005      	add	sp, #20
 8008426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842a:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800842e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8008432:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
 8008436:	2102      	movs	r1, #2
 8008438:	4638      	mov	r0, r7
 800843a:	f001 ff79 	bl	800a330 <acc_element_saturation_check_init>
 800843e:	4630      	mov	r0, r6
 8008440:	f8d9 1000 	ldr.w	r1, [r9]
 8008444:	f001 ffe4 	bl	800a410 <acc_element_sink_callback_init>
 8008448:	4639      	mov	r1, r7
 800844a:	4640      	mov	r0, r8
 800844c:	f001 ff2e 	bl	800a2ac <acc_element_connect>
 8008450:	4631      	mov	r1, r6
 8008452:	4638      	mov	r0, r7
 8008454:	f001 ff2a 	bl	800a2ac <acc_element_connect>
 8008458:	4640      	mov	r0, r8
 800845a:	f002 f91b 	bl	800a694 <acc_element_source_adc_validate>
 800845e:	4606      	mov	r6, r0
 8008460:	b178      	cbz	r0, 8008482 <acc_pipeline_direct_assemble+0x152>
 8008462:	4640      	mov	r0, r8
 8008464:	f002 f912 	bl	800a68c <acc_element_source_adc_reset>
 8008468:	9803      	ldr	r0, [sp, #12]
 800846a:	490f      	ldr	r1, [pc, #60]	; (80084a8 <acc_pipeline_direct_assemble+0x178>)
 800846c:	4a0f      	ldr	r2, [pc, #60]	; (80084ac <acc_pipeline_direct_assemble+0x17c>)
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <acc_pipeline_direct_assemble+0x180>)
 8008470:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
 8008474:	4628      	mov	r0, r5
 8008476:	e9c5 1201 	strd	r1, r2, [r5, #4]
 800847a:	60eb      	str	r3, [r5, #12]
 800847c:	b005      	add	sp, #20
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	4b0c      	ldr	r3, [pc, #48]	; (80084b4 <acc_pipeline_direct_assemble+0x184>)
 8008484:	4a0c      	ldr	r2, [pc, #48]	; (80084b8 <acc_pipeline_direct_assemble+0x188>)
 8008486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008488:	4906      	ldr	r1, [pc, #24]	; (80084a4 <acc_pipeline_direct_assemble+0x174>)
 800848a:	4798      	blx	r3
 800848c:	e7c5      	b.n	800841a <acc_pipeline_direct_assemble+0xea>
 800848e:	4628      	mov	r0, r5
 8008490:	f7ff fa94 	bl	80079bc <acc_rss_integration_mem_free>
 8008494:	4620      	mov	r0, r4
 8008496:	f7ff fa91 	bl	80079bc <acc_rss_integration_mem_free>
 800849a:	2500      	movs	r5, #0
 800849c:	4628      	mov	r0, r5
 800849e:	b005      	add	sp, #20
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	080118b0 	.word	0x080118b0
 80084a8:	08008309 	.word	0x08008309
 80084ac:	080082d9 	.word	0x080082d9
 80084b0:	080082e1 	.word	0x080082e1
 80084b4:	200007b0 	.word	0x200007b0
 80084b8:	080118c0 	.word	0x080118c0

080084bc <measure_noise>:
 80084bc:	2000      	movs	r0, #0
 80084be:	4770      	bx	lr

080084c0 <destroy>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	4604      	mov	r4, r0
 80084c4:	6940      	ldr	r0, [r0, #20]
 80084c6:	b118      	cbz	r0, 80084d0 <destroy+0x10>
 80084c8:	f7ff fa78 	bl	80079bc <acc_rss_integration_mem_free>
 80084cc:	2300      	movs	r3, #0
 80084ce:	6163      	str	r3, [r4, #20]
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	bf00      	nop

080084d4 <update_program>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	6944      	ldr	r4, [r0, #20]
 80084d8:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 80084dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084de:	b082      	sub	sp, #8
 80084e0:	b9b2      	cbnz	r2, 8008510 <update_program+0x3c>
 80084e2:	b979      	cbnz	r1, 8008504 <update_program+0x30>
 80084e4:	fab3 f383 	clz	r3, r3
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	f88d 3000 	strb.w	r3, [sp]
 80084ee:	2201      	movs	r2, #1
 80084f0:	6800      	ldr	r0, [r0, #0]
 80084f2:	9201      	str	r2, [sp, #4]
 80084f4:	4669      	mov	r1, sp
 80084f6:	f002 ff19 	bl	800b32c <acc_cpd_sparse_sweep_update_program>
 80084fa:	b108      	cbz	r0, 8008500 <update_program+0x2c>
 80084fc:	9b01      	ldr	r3, [sp, #4]
 80084fe:	6423      	str	r3, [r4, #64]	; 0x40
 8008500:	b002      	add	sp, #8
 8008502:	bd10      	pop	{r4, pc}
 8008504:	3b00      	subs	r3, #0
 8008506:	bf18      	it	ne
 8008508:	2301      	movne	r3, #1
 800850a:	f88d 3000 	strb.w	r3, [sp]
 800850e:	e7ef      	b.n	80084f0 <update_program+0x1c>
 8008510:	3b00      	subs	r3, #0
 8008512:	bf18      	it	ne
 8008514:	2301      	movne	r3, #1
 8008516:	f88d 3000 	strb.w	r3, [sp]
 800851a:	2200      	movs	r2, #0
 800851c:	e7e8      	b.n	80084f0 <update_program+0x1c>
 800851e:	bf00      	nop

08008520 <process_data>:
 8008520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008524:	6946      	ldr	r6, [r0, #20]
 8008526:	f8b6 40b8 	ldrh.w	r4, [r6, #184]	; 0xb8
 800852a:	b914      	cbnz	r4, 8008532 <process_data+0x12>
 800852c:	2001      	movs	r0, #1
 800852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008532:	f8b6 80b4 	ldrh.w	r8, [r6, #180]	; 0xb4
 8008536:	4617      	mov	r7, r2
 8008538:	680a      	ldr	r2, [r1, #0]
 800853a:	6801      	ldr	r1, [r0, #0]
 800853c:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 8008540:	4642      	mov	r2, r8
 8008542:	461d      	mov	r5, r3
 8008544:	2001      	movs	r0, #1
 8008546:	4623      	mov	r3, r4
 8008548:	f7ff fa50 	bl	80079ec <acc_probes_execute_uint16>
 800854c:	f8b6 10b8 	ldrh.w	r1, [r6, #184]	; 0xb8
 8008550:	4640      	mov	r0, r8
 8008552:	f001 fe7f 	bl	800a254 <acc_alg_cca_calculate>
 8008556:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800858c <process_data+0x6c>
 800855a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800855c:	ed85 0a01 	vstr	s0, [r5, #4]
 8008560:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008568:	bfcc      	ite	gt
 800856a:	2201      	movgt	r2, #1
 800856c:	2200      	movle	r2, #0
 800856e:	702a      	strb	r2, [r5, #0]
 8008570:	b13b      	cbz	r3, 8008582 <process_data+0x62>
 8008572:	2300      	movs	r3, #0
 8008574:	f8b6 20b4 	ldrh.w	r2, [r6, #180]	; 0xb4
 8008578:	722b      	strb	r3, [r5, #8]
 800857a:	2001      	movs	r0, #1
 800857c:	603a      	str	r2, [r7, #0]
 800857e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008582:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
 8008586:	f083 0301 	eor.w	r3, r3, #1
 800858a:	e7f3      	b.n	8008574 <process_data+0x54>
 800858c:	42640000 	.word	0x42640000

08008590 <transfer_data>:
 8008590:	6943      	ldr	r3, [r0, #20]
 8008592:	6800      	ldr	r0, [r0, #0]
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	f8b3 60b8 	ldrh.w	r6, [r3, #184]	; 0xb8
 800859a:	f8b3 40b4 	ldrh.w	r4, [r3, #180]	; 0xb4
 800859e:	2300      	movs	r3, #0
 80085a0:	4434      	add	r4, r6
 80085a2:	7013      	strb	r3, [r2, #0]
 80085a4:	460d      	mov	r5, r1
 80085a6:	4622      	mov	r2, r4
 80085a8:	6809      	ldr	r1, [r1, #0]
 80085aa:	f001 fd15 	bl	8009fd8 <acc_sensor_protocol_r2_transfer_data>
 80085ae:	0062      	lsls	r2, r4, #1
 80085b0:	4601      	mov	r1, r0
 80085b2:	6828      	ldr	r0, [r5, #0]
 80085b4:	f003 fe5a 	bl	800c26c <memmove>
 80085b8:	4620      	mov	r0, r4
 80085ba:	bd70      	pop	{r4, r5, r6, pc}

080085bc <start>:
 80085bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085c0:	f8d0 9014 	ldr.w	r9, [r0, #20]
 80085c4:	f8d9 6084 	ldr.w	r6, [r9, #132]	; 0x84
 80085c8:	f8d9 707c 	ldr.w	r7, [r9, #124]	; 0x7c
 80085cc:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
 80085d0:	b083      	sub	sp, #12
 80085d2:	4605      	mov	r5, r0
 80085d4:	b106      	cbz	r6, 80085d8 <start+0x1c>
 80085d6:	b987      	cbnz	r7, 80085fa <start+0x3e>
 80085d8:	e9d1 1200 	ldrd	r1, r2, [r1]
 80085dc:	6828      	ldr	r0, [r5, #0]
 80085de:	464b      	mov	r3, r9
 80085e0:	f002 fa90 	bl	800ab04 <acc_cpd_sparse_sweep_load_program>
 80085e4:	4604      	mov	r4, r0
 80085e6:	b960      	cbnz	r0, 8008602 <start+0x46>
 80085e8:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <start+0x9c>)
 80085ea:	4a1c      	ldr	r2, [pc, #112]	; (800865c <start+0xa0>)
 80085ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ee:	491c      	ldr	r1, [pc, #112]	; (8008660 <start+0xa4>)
 80085f0:	4798      	blx	r3
 80085f2:	4620      	mov	r0, r4
 80085f4:	b003      	add	sp, #12
 80085f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085fa:	2300      	movs	r3, #0
 80085fc:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8008600:	e7ea      	b.n	80085d8 <start+0x1c>
 8008602:	6828      	ldr	r0, [r5, #0]
 8008604:	f002 fe8e 	bl	800b324 <acc_cpd_sparse_sweep_run_program>
 8008608:	4604      	mov	r4, r0
 800860a:	b1f8      	cbz	r0, 800864c <start+0x90>
 800860c:	2f00      	cmp	r7, #0
 800860e:	d0f0      	beq.n	80085f2 <start+0x36>
 8008610:	6929      	ldr	r1, [r5, #16]
 8008612:	6828      	ldr	r0, [r5, #0]
 8008614:	f001 fcb6 	bl	8009f84 <acc_sensor_protocol_r2_wait_for_sync_start>
 8008618:	b1c0      	cbz	r0, 800864c <start+0x90>
 800861a:	f7ff f9e1 	bl	80079e0 <acc_rss_integration_log_level>
 800861e:	2801      	cmp	r0, #1
 8008620:	d905      	bls.n	800862e <start+0x72>
 8008622:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <start+0x9c>)
 8008624:	4a0f      	ldr	r2, [pc, #60]	; (8008664 <start+0xa8>)
 8008626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008628:	490d      	ldr	r1, [pc, #52]	; (8008660 <start+0xa4>)
 800862a:	2002      	movs	r0, #2
 800862c:	4798      	blx	r3
 800862e:	2e00      	cmp	r6, #0
 8008630:	d0df      	beq.n	80085f2 <start+0x36>
 8008632:	2301      	movs	r3, #1
 8008634:	6828      	ldr	r0, [r5, #0]
 8008636:	f8c9 8040 	str.w	r8, [r9, #64]	; 0x40
 800863a:	4669      	mov	r1, sp
 800863c:	f8cd 8004 	str.w	r8, [sp, #4]
 8008640:	f88d 3000 	strb.w	r3, [sp]
 8008644:	f002 fe72 	bl	800b32c <acc_cpd_sparse_sweep_update_program>
 8008648:	4604      	mov	r4, r0
 800864a:	e7d2      	b.n	80085f2 <start+0x36>
 800864c:	2400      	movs	r4, #0
 800864e:	4620      	mov	r0, r4
 8008650:	b003      	add	sp, #12
 8008652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008656:	bf00      	nop
 8008658:	200007b0 	.word	0x200007b0
 800865c:	080118e0 	.word	0x080118e0
 8008660:	08011900 	.word	0x08011900
 8008664:	08011914 	.word	0x08011914

08008668 <calibrate>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	6806      	ldr	r6, [r0, #0]
 800866e:	460c      	mov	r4, r1
 8008670:	4615      	mov	r5, r2
 8008672:	f7ff f903 	bl	800787c <acc_rss_integration_get_sensor_reference_frequency>
 8008676:	a805      	add	r0, sp, #20
 8008678:	a902      	add	r1, sp, #8
 800867a:	ed8d 0a05 	vstr	s0, [sp, #20]
 800867e:	f001 ff49 	bl	800a514 <acc_cpd_pll_divisors_calculate>
 8008682:	b918      	cbnz	r0, 800868c <calibrate+0x24>
 8008684:	2400      	movs	r4, #0
 8008686:	4620      	mov	r0, r4
 8008688:	b00a      	add	sp, #40	; 0x28
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8008690:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008694:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8008698:	9605      	str	r6, [sp, #20]
 800869a:	9006      	str	r0, [sp, #24]
 800869c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80086a0:	9307      	str	r3, [sp, #28]
 80086a2:	9108      	str	r1, [sp, #32]
 80086a4:	aa05      	add	r2, sp, #20
 80086a6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80086aa:	466b      	mov	r3, sp
 80086ac:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80086b0:	f002 f84c 	bl	800a74c <acc_cpd_cbank_and_vana_calibration>
 80086b4:	4604      	mov	r4, r0
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d0e4      	beq.n	8008684 <calibrate+0x1c>
 80086ba:	9b00      	ldr	r3, [sp, #0]
 80086bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80086c0:	80ab      	strh	r3, [r5, #4]
 80086c2:	2306      	movs	r3, #6
 80086c4:	80ea      	strh	r2, [r5, #6]
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	f7ff f98a 	bl	80079e0 <acc_rss_integration_log_level>
 80086cc:	2801      	cmp	r0, #1
 80086ce:	d9da      	bls.n	8008686 <calibrate+0x1e>
 80086d0:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <calibrate+0x7c>)
 80086d2:	4a05      	ldr	r2, [pc, #20]	; (80086e8 <calibrate+0x80>)
 80086d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d6:	4905      	ldr	r1, [pc, #20]	; (80086ec <calibrate+0x84>)
 80086d8:	2002      	movs	r0, #2
 80086da:	4798      	blx	r3
 80086dc:	4620      	mov	r0, r4
 80086de:	b00a      	add	sp, #40	; 0x28
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	bf00      	nop
 80086e4:	200007b0 	.word	0x200007b0
 80086e8:	08011938 	.word	0x08011938
 80086ec:	08011900 	.word	0x08011900

080086f0 <set_calibration_context>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	680b      	ldr	r3, [r1, #0]
 80086f4:	2b06      	cmp	r3, #6
 80086f6:	b086      	sub	sp, #24
 80086f8:	d00a      	beq.n	8008710 <set_calibration_context+0x20>
 80086fa:	4914      	ldr	r1, [pc, #80]	; (800874c <set_calibration_context+0x5c>)
 80086fc:	4a14      	ldr	r2, [pc, #80]	; (8008750 <set_calibration_context+0x60>)
 80086fe:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008700:	4914      	ldr	r1, [pc, #80]	; (8008754 <set_calibration_context+0x64>)
 8008702:	2006      	movs	r0, #6
 8008704:	9000      	str	r0, [sp, #0]
 8008706:	2000      	movs	r0, #0
 8008708:	47a0      	blx	r4
 800870a:	2000      	movs	r0, #0
 800870c:	b006      	add	sp, #24
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	460c      	mov	r4, r1
 8008712:	4605      	mov	r5, r0
 8008714:	f7ff f8b2 	bl	800787c <acc_rss_integration_get_sensor_reference_frequency>
 8008718:	a903      	add	r1, sp, #12
 800871a:	a802      	add	r0, sp, #8
 800871c:	ed8d 0a02 	vstr	s0, [sp, #8]
 8008720:	f001 fef8 	bl	800a514 <acc_cpd_pll_divisors_calculate>
 8008724:	2800      	cmp	r0, #0
 8008726:	d0f1      	beq.n	800870c <set_calibration_context+0x1c>
 8008728:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800872c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008730:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 8008734:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8008738:	606a      	str	r2, [r5, #4]
 800873a:	60ab      	str	r3, [r5, #8]
 800873c:	88a2      	ldrh	r2, [r4, #4]
 800873e:	88e3      	ldrh	r3, [r4, #6]
 8008740:	602e      	str	r6, [r5, #0]
 8008742:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8008746:	81a9      	strh	r1, [r5, #12]
 8008748:	b006      	add	sp, #24
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	200007b0 	.word	0x200007b0
 8008750:	08011958 	.word	0x08011958
 8008754:	08011900 	.word	0x08011900

08008758 <get_dt>:
 8008758:	b508      	push	{r3, lr}
 800875a:	ed2d 8b02 	vpush	{d8}
 800875e:	f7ff f88d 	bl	800787c <acc_rss_integration_get_sensor_reference_frequency>
 8008762:	eeb0 8a40 	vmov.f32	s16, s0
 8008766:	f001 ff63 	bl	800a630 <acc_cpd_pll_divisors_ref_divisor>
 800876a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800876e:	ecbd 8b02 	vpop	{d8}
 8008772:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008776:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800877a:	bd08      	pop	{r3, pc}

0800877c <initialize>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	ed2d 8b06 	vpush	{d8-d10}
 8008784:	460c      	mov	r4, r1
 8008786:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 800878a:	2906      	cmp	r1, #6
 800878c:	b095      	sub	sp, #84	; 0x54
 800878e:	4607      	mov	r7, r0
 8008790:	4691      	mov	r9, r2
 8008792:	4698      	mov	r8, r3
 8008794:	d00f      	beq.n	80087b6 <initialize+0x3a>
 8008796:	2909      	cmp	r1, #9
 8008798:	d00d      	beq.n	80087b6 <initialize+0x3a>
 800879a:	4b63      	ldr	r3, [pc, #396]	; (8008928 <initialize+0x1ac>)
 800879c:	4a63      	ldr	r2, [pc, #396]	; (800892c <initialize+0x1b0>)
 800879e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a0:	4963      	ldr	r1, [pc, #396]	; (8008930 <initialize+0x1b4>)
 80087a2:	2000      	movs	r0, #0
 80087a4:	4798      	blx	r3
 80087a6:	f04f 0a00 	mov.w	sl, #0
 80087aa:	4650      	mov	r0, sl
 80087ac:	b015      	add	sp, #84	; 0x54
 80087ae:	ecbd 8b06 	vpop	{d8-d10}
 80087b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b6:	4620      	mov	r0, r4
 80087b8:	f8d7 b014 	ldr.w	fp, [r7, #20]
 80087bc:	f7ff fb32 	bl	8007e24 <acc_base_configuration_use_point_range_get>
 80087c0:	b1d8      	cbz	r0, 80087fa <initialize+0x7e>
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff fa64 	bl	8007c90 <acc_base_configuration_point_start_get>
 80087c8:	4606      	mov	r6, r0
 80087ca:	4620      	mov	r0, r4
 80087cc:	f7ff fa6c 	bl	8007ca8 <acc_base_configuration_point_length_get>
 80087d0:	4430      	add	r0, r6
 80087d2:	b205      	sxth	r5, r0
 80087d4:	b236      	sxth	r6, r6
 80087d6:	4620      	mov	r0, r4
 80087d8:	f7ff fb8e 	bl	8007ef8 <acc_base_configuration_downsampling_factor_get>
 80087dc:	eba5 0a06 	sub.w	sl, r5, r6
 80087e0:	fb9a f3f0 	sdiv	r3, sl, r0
 80087e4:	fb03 aa10 	mls	sl, r3, r0, sl
 80087e8:	f1ba 0f00 	cmp.w	sl, #0
 80087ec:	f300 808d 	bgt.w	800890a <initialize+0x18e>
 80087f0:	42b5      	cmp	r5, r6
 80087f2:	da41      	bge.n	8008878 <initialize+0xfc>
 80087f4:	4b4c      	ldr	r3, [pc, #304]	; (8008928 <initialize+0x1ac>)
 80087f6:	4a4f      	ldr	r2, [pc, #316]	; (8008934 <initialize+0x1b8>)
 80087f8:	e7d1      	b.n	800879e <initialize+0x22>
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7ff f98e 	bl	8007b1c <acc_base_configuration_requested_start_get>
 8008800:	4620      	mov	r0, r4
 8008802:	eeb0 8a40 	vmov.f32	s16, s0
 8008806:	f7ff f9ab 	bl	8007b60 <acc_base_configuration_requested_length_get>
 800880a:	ee78 8a00 	vadd.f32	s17, s16, s0
 800880e:	f7ff ffa3 	bl	8008758 <get_dt>
 8008812:	eddf 9a49 	vldr	s19, [pc, #292]	; 8008938 <initialize+0x1bc>
 8008816:	ee78 7a08 	vadd.f32	s15, s16, s16
 800881a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800881e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008822:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8008826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882a:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800882e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008832:	bf54      	ite	pl
 8008834:	eef0 7a49 	vmovpl.f32	s15, s18
 8008838:	eef0 7a48 	vmovmi.f32	s15, s16
 800883c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008840:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8008844:	ee17 3a10 	vmov	r3, s14
 8008848:	b21e      	sxth	r6, r3
 800884a:	f7ff ff85 	bl	8008758 <get_dt>
 800884e:	ee38 7aa8 	vadd.f32	s14, s17, s17
 8008852:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008856:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800885a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800885e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008862:	bf58      	it	pl
 8008864:	eeb0 8a49 	vmovpl.f32	s16, s18
 8008868:	ee77 7a88 	vadd.f32	s15, s15, s16
 800886c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008870:	ee17 3a90 	vmov	r3, s15
 8008874:	b21d      	sxth	r5, r3
 8008876:	e7ae      	b.n	80087d6 <initialize+0x5a>
 8008878:	4620      	mov	r0, r4
 800887a:	f7ff faf7 	bl	8007e6c <acc_base_configuration_ignore_range_limits_get>
 800887e:	4682      	mov	sl, r0
 8008880:	b9f0      	cbnz	r0, 80088c0 <initialize+0x144>
 8008882:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 818f 	beq.w	8008baa <initialize+0x42e>
 800888c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800888e:	b21a      	sxth	r2, r3
 8008890:	015b      	lsls	r3, r3, #5
 8008892:	3b1a      	subs	r3, #26
 8008894:	b21b      	sxth	r3, r3
 8008896:	3a01      	subs	r2, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800889e:	b292      	uxth	r2, r2
 80088a0:	bfb8      	it	lt
 80088a2:	3307      	addlt	r3, #7
 80088a4:	f1a2 010f 	sub.w	r1, r2, #15
 80088a8:	f023 0307 	bic.w	r3, r3, #7
 80088ac:	1acb      	subs	r3, r1, r3
 80088ae:	b219      	sxth	r1, r3
 80088b0:	3a30      	subs	r2, #48	; 0x30
 80088b2:	42b1      	cmp	r1, r6
 80088b4:	b212      	sxth	r2, r2
 80088b6:	f300 83e7 	bgt.w	8009088 <initialize+0x90c>
 80088ba:	42aa      	cmp	r2, r5
 80088bc:	f2c0 8186 	blt.w	8008bcc <initialize+0x450>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7ff fb19 	bl	8007ef8 <acc_base_configuration_downsampling_factor_get>
 80088c6:	1bab      	subs	r3, r5, r6
 80088c8:	4602      	mov	r2, r0
 80088ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80088ce:	3301      	adds	r3, #1
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	9008      	str	r0, [sp, #32]
 80088d4:	4620      	mov	r0, r4
 80088d6:	9306      	str	r3, [sp, #24]
 80088d8:	f7ff fae0 	bl	8007e9c <acc_base_configuration_sparse_sweeps_per_frame_get>
 80088dc:	9b06      	ldr	r3, [sp, #24]
 80088de:	fb13 f300 	smulbb	r3, r3, r0
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	aa11      	add	r2, sp, #68	; 0x44
 80088e6:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 80088ea:	4620      	mov	r0, r4
 80088ec:	9307      	str	r3, [sp, #28]
 80088ee:	f7ff fb7b 	bl	8007fe8 <acc_base_configuration_cca_get>
 80088f2:	bb48      	cbnz	r0, 8008948 <initialize+0x1cc>
 80088f4:	9a07      	ldr	r2, [sp, #28]
 80088f6:	4603      	mov	r3, r0
 80088f8:	4410      	add	r0, r2
 80088fa:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80088fe:	f8ab 30b8 	strh.w	r3, [fp, #184]	; 0xb8
 8008902:	dd2b      	ble.n	800895c <initialize+0x1e0>
 8008904:	4b08      	ldr	r3, [pc, #32]	; (8008928 <initialize+0x1ac>)
 8008906:	4a0d      	ldr	r2, [pc, #52]	; (800893c <initialize+0x1c0>)
 8008908:	e749      	b.n	800879e <initialize+0x22>
 800890a:	f7ff f869 	bl	80079e0 <acc_rss_integration_log_level>
 800890e:	2801      	cmp	r0, #1
 8008910:	d905      	bls.n	800891e <initialize+0x1a2>
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <initialize+0x1ac>)
 8008914:	4a0a      	ldr	r2, [pc, #40]	; (8008940 <initialize+0x1c4>)
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008918:	4905      	ldr	r1, [pc, #20]	; (8008930 <initialize+0x1b4>)
 800891a:	2002      	movs	r0, #2
 800891c:	4798      	blx	r3
 800891e:	eba5 050a 	sub.w	r5, r5, sl
 8008922:	b22d      	sxth	r5, r5
 8008924:	e764      	b.n	80087f0 <initialize+0x74>
 8008926:	bf00      	nop
 8008928:	200007b0 	.word	0x200007b0
 800892c:	08011b40 	.word	0x08011b40
 8008930:	08011900 	.word	0x08011900
 8008934:	080119d0 	.word	0x080119d0
 8008938:	4d8ef3c2 	.word	0x4d8ef3c2
 800893c:	08011a80 	.word	0x08011a80
 8008940:	0801199c 	.word	0x0801199c
 8008944:	3d000000 	.word	0x3d000000
 8008948:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800894c:	9a07      	ldr	r2, [sp, #28]
 800894e:	f8ab 30b8 	strh.w	r3, [fp, #184]	; 0xb8
 8008952:	4618      	mov	r0, r3
 8008954:	4410      	add	r0, r2
 8008956:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800895a:	dcd3      	bgt.n	8008904 <initialize+0x188>
 800895c:	4620      	mov	r0, r4
 800895e:	f7ff f973 	bl	8007c48 <acc_base_configuration_hw_accelerated_average_samples_get>
 8008962:	4603      	mov	r3, r0
 8008964:	4620      	mov	r0, r4
 8008966:	9309      	str	r3, [sp, #36]	; 0x24
 8008968:	f7ff fb72 	bl	8008050 <acc_base_configuration_mur_get>
 800896c:	4682      	mov	sl, r0
 800896e:	4620      	mov	r0, r4
 8008970:	f7ff fa28 	bl	8007dc4 <acc_base_configuration_sampling_mode_get>
 8008974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008976:	2800      	cmp	r0, #0
 8008978:	f040 811a 	bne.w	8008bb0 <initialize+0x434>
 800897c:	9906      	ldr	r1, [sp, #24]
 800897e:	2007      	movs	r0, #7
 8008980:	f04f 0c0d 	mov.w	ip, #13
 8008984:	fb0a fa01 	mul.w	sl, sl, r1
 8008988:	fb10 c003 	smlabb	r0, r0, r3, ip
 800898c:	fb00 f00a 	mul.w	r0, r0, sl
 8008990:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
 8008994:	eb00 030a 	add.w	r3, r0, sl
 8008998:	ee08 3a10 	vmov	s16, r3
 800899c:	f7fe ff6e 	bl	800787c <acc_rss_integration_get_sensor_reference_frequency>
 80089a0:	eef0 8a40 	vmov.f32	s17, s0
 80089a4:	f001 fe44 	bl	800a630 <acc_cpd_pll_divisors_ref_divisor>
 80089a8:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8008944 <initialize+0x1c8>
 80089ac:	ee28 0a80 	vmul.f32	s0, s17, s0
 80089b0:	4620      	mov	r0, r4
 80089b2:	ee60 8a27 	vmul.f32	s17, s0, s15
 80089b6:	f7ff fa8f 	bl	8007ed8 <acc_base_configuration_sparse_sweep_rate_get>
 80089ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80089be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c2:	f340 8358 	ble.w	8009076 <initialize+0x8fa>
 80089c6:	eec8 6a80 	vdiv.f32	s13, s17, s0
 80089ca:	eef8 7a48 	vcvt.f32.u32	s15, s16
 80089ce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80089d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80089d6:	ee07 aa90 	vmov	s15, sl
 80089da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80089e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089ea:	ee17 3a90 	vmov	r3, s15
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f2c0 845e 	blt.w	80092b0 <initialize+0xb34>
 80089f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089f8:	4293      	cmp	r3, r2
 80089fa:	f300 8202 	bgt.w	8008e02 <initialize+0x686>
 80089fe:	ee18 2a10 	vmov	r2, s16
 8008a02:	fb0a 2203 	mla	r2, sl, r3, r2
 8008a06:	ee08 2a10 	vmov	s16, r2
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	f8ab 30b6 	strh.w	r3, [fp, #182]	; 0xb6
 8008a10:	4620      	mov	r0, r4
 8008a12:	f7ff f8e9 	bl	8007be8 <acc_base_configuration_tx_disable_get>
 8008a16:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8008a1a:	9a07      	ldr	r2, [sp, #28]
 8008a1c:	f88b 00ba 	strb.w	r0, [fp, #186]	; 0xba
 8008a20:	f8ab 20b4 	strh.w	r2, [fp, #180]	; 0xb4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 832c 	beq.w	8009082 <initialize+0x906>
 8008a2a:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8008a2e:	9808      	ldr	r0, [sp, #32]
 8008a30:	9906      	ldr	r1, [sp, #24]
 8008a32:	f8a7 c004 	strh.w	ip, [r7, #4]
 8008a36:	1e42      	subs	r2, r0, #1
 8008a38:	b292      	uxth	r2, r2
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	2a07      	cmp	r2, #7
 8008a3e:	81bb      	strh	r3, [r7, #12]
 8008a40:	813e      	strh	r6, [r7, #8]
 8008a42:	8179      	strh	r1, [r7, #10]
 8008a44:	4633      	mov	r3, r6
 8008a46:	f200 8318 	bhi.w	800907a <initialize+0x8fe>
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	fbb2 f2f0 	udiv	r2, r2, r0
 8008a50:	fb00 f202 	mul.w	r2, r0, r2
 8008a54:	2a08      	cmp	r2, #8
 8008a56:	f040 8310 	bne.w	800907a <initialize+0x8fe>
 8008a5a:	fa0f f18c 	sxth.w	r1, ip
 8008a5e:	3901      	subs	r1, #1
 8008a60:	0149      	lsls	r1, r1, #5
 8008a62:	b28a      	uxth	r2, r1
 8008a64:	f1a2 0e0f 	sub.w	lr, r2, #15
 8008a68:	fa1f fe8e 	uxth.w	lr, lr
 8008a6c:	eba3 030e 	sub.w	r3, r3, lr
 8008a70:	b21b      	sxth	r3, r3
 8008a72:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a74:	10da      	asrs	r2, r3, #3
 8008a76:	4611      	mov	r1, r2
 8008a78:	920c      	str	r2, [sp, #48]	; 0x30
 8008a7a:	425a      	negs	r2, r3
 8008a7c:	f002 0207 	and.w	r2, r2, #7
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	9808      	ldr	r0, [sp, #32]
 8008a86:	bf58      	it	pl
 8008a88:	4253      	negpl	r3, r2
 8008a8a:	eba5 0e0e 	sub.w	lr, r5, lr
 8008a8e:	2208      	movs	r2, #8
 8008a90:	fbb2 f2f0 	udiv	r2, r2, r0
 8008a94:	9808      	ldr	r0, [sp, #32]
 8008a96:	fa0f fe8e 	sxth.w	lr, lr
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008aa0:	bfb8      	it	lt
 8008aa2:	3308      	addlt	r3, #8
 8008aa4:	920d      	str	r2, [sp, #52]	; 0x34
 8008aa6:	f1de 0a00 	rsbs	sl, lr, #0
 8008aaa:	fb12 f200 	smulbb	r2, r2, r0
 8008aae:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8008ab2:	f00a 0a07 	and.w	sl, sl, #7
 8008ab6:	f00e 0e07 	and.w	lr, lr, #7
 8008aba:	f1c1 0101 	rsb	r1, r1, #1
 8008abe:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac0:	4461      	add	r1, ip
 8008ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ac4:	fbb3 fcf0 	udiv	ip, r3, r0
 8008ac8:	fb00 3c1c 	mls	ip, r0, ip, r3
 8008acc:	4670      	mov	r0, lr
 8008ace:	bf58      	it	pl
 8008ad0:	f1ca 0000 	rsbpl	r0, sl, #0
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	b289      	uxth	r1, r1
 8008ad8:	4462      	add	r2, ip
 8008ada:	bfb8      	it	lt
 8008adc:	3008      	addlt	r0, #8
 8008ade:	2901      	cmp	r1, #1
 8008ae0:	fa1f fa82 	uxth.w	sl, r2
 8008ae4:	fa0f fe8c 	sxth.w	lr, ip
 8008ae8:	b212      	sxth	r2, r2
 8008aea:	f000 83f5 	beq.w	80092d8 <initialize+0xb5c>
 8008aee:	1a12      	subs	r2, r2, r0
 8008af0:	bf18      	it	ne
 8008af2:	2201      	movne	r2, #1
 8008af4:	4573      	cmp	r3, lr
 8008af6:	bf14      	ite	ne
 8008af8:	f04f 0e01 	movne.w	lr, #1
 8008afc:	f04f 0e00 	moveq.w	lr, #0
 8008b00:	eba1 010e 	sub.w	r1, r1, lr
 8008b04:	eba1 0102 	sub.w	r1, r1, r2
 8008b08:	b209      	sxth	r1, r1
 8008b0a:	9109      	str	r1, [sp, #36]	; 0x24
 8008b0c:	f040 83f7 	bne.w	80092fe <initialize+0xb82>
 8008b10:	f04f 0a00 	mov.w	sl, #0
 8008b14:	4551      	cmp	r1, sl
 8008b16:	e9cd a20e 	strd	sl, r2, [sp, #56]	; 0x38
 8008b1a:	bfd4      	ite	le
 8008b1c:	2200      	movle	r2, #0
 8008b1e:	2201      	movgt	r2, #1
 8008b20:	920a      	str	r2, [sp, #40]	; 0x28
 8008b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b24:	f1a2 0132 	sub.w	r1, r2, #50	; 0x32
 8008b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b2a:	b209      	sxth	r1, r1
 8008b2c:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	440b      	add	r3, r1
 8008b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b38:	4461      	add	r1, ip
 8008b3a:	9b08      	ldr	r3, [sp, #32]
 8008b3c:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8008b40:	eba0 0c0c 	sub.w	ip, r0, ip
 8008b44:	fb9c f3f3 	sdiv	r3, ip, r3
 8008b48:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8008b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8008b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b5a:	e9c2 3a28 	strd	r3, sl, [r2, #160]	; 0xa0
 8008b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b60:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8008b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bfcc      	ite	gt
 8008b6a:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8008b6e:	2300      	movle	r3, #0
 8008b70:	f1ce 0e05 	rsb	lr, lr, #5
 8008b74:	f8c2 e08c 	str.w	lr, [r2, #140]	; 0x8c
 8008b78:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff f921 	bl	8007dc4 <acc_base_configuration_sampling_mode_get>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	f040 8398 	bne.w	80092b8 <initialize+0xb3c>
 8008b88:	232e      	movs	r3, #46	; 0x2e
 8008b8a:	f88b 0070 	strb.w	r0, [fp, #112]	; 0x70
 8008b8e:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7ff f894 	bl	8007cc0 <acc_base_configuration_repetition_mode_get>
 8008b98:	2803      	cmp	r0, #3
 8008b9a:	f200 8256 	bhi.w	800904a <initialize+0x8ce>
 8008b9e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008ba2:	024f      	.short	0x024f
 8008ba4:	02300244 	.word	0x02300244
 8008ba8:	0133      	.short	0x0133
 8008baa:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8008bae:	e66e      	b.n	800888e <initialize+0x112>
 8008bb0:	9a06      	ldr	r2, [sp, #24]
 8008bb2:	fb03 f302 	mul.w	r3, r3, r2
 8008bb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008bba:	f103 000f 	add.w	r0, r3, #15
 8008bbe:	fb0a fa00 	mul.w	sl, sl, r0
 8008bc2:	f10a 00d4 	add.w	r0, sl, #212	; 0xd4
 8008bc6:	f04f 0a03 	mov.w	sl, #3
 8008bca:	e6e3      	b.n	8008994 <initialize+0x218>
 8008bcc:	ee07 5a90 	vmov	s15, r5
 8008bd0:	4b9b      	ldr	r3, [pc, #620]	; (8008e40 <initialize+0x6c4>)
 8008bd2:	9206      	str	r2, [sp, #24]
 8008bd4:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8008bd8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8008bda:	eddf 9aa1 	vldr	s19, [pc, #644]	; 8008e60 <initialize+0x6e4>
 8008bde:	ed9f aaa0 	vldr	s20, [pc, #640]	; 8008e60 <initialize+0x6e4>
 8008be2:	f7ff fdb9 	bl	8008758 <get_dt>
 8008be6:	ee29 7a00 	vmul.f32	s14, s18, s0
 8008bea:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8008bee:	ee27 7a29 	vmul.f32	s14, s14, s19
 8008bf2:	4994      	ldr	r1, [pc, #592]	; (8008e44 <initialize+0x6c8>)
 8008bf4:	4b94      	ldr	r3, [pc, #592]	; (8008e48 <initialize+0x6cc>)
 8008bf6:	ee27 7a28 	vmul.f32	s14, s14, s17
 8008bfa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c02:	bf4c      	ite	mi
 8008c04:	4688      	movmi	r8, r1
 8008c06:	4698      	movpl	r8, r3
 8008c08:	f7ff fda6 	bl	8008758 <get_dt>
 8008c0c:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008c10:	f7ff fda2 	bl	8008758 <get_dt>
 8008c14:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008c18:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008c1c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008c20:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008c24:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008c28:	9a06      	ldr	r2, [sp, #24]
 8008c2a:	9206      	str	r2, [sp, #24]
 8008c2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c34:	eddf 7a85 	vldr	s15, [pc, #532]	; 8008e4c <initialize+0x6d0>
 8008c38:	eddf 9a89 	vldr	s19, [pc, #548]	; 8008e60 <initialize+0x6e4>
 8008c3c:	bf48      	it	mi
 8008c3e:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008c42:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008c46:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8008c4a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8008c4e:	ee17 6a90 	vmov	r6, s15
 8008c52:	f7ff fd81 	bl	8008758 <get_dt>
 8008c56:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008c5a:	f7ff fd7d 	bl	8008758 <get_dt>
 8008c5e:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008c62:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008c66:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008c6a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008c6e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008c72:	9a06      	ldr	r2, [sp, #24]
 8008c74:	9206      	str	r2, [sp, #24]
 8008c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7e:	bf48      	it	mi
 8008c80:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008c84:	f7ff fd68 	bl	8008758 <get_dt>
 8008c88:	eddf 8a70 	vldr	s17, [pc, #448]	; 8008e4c <initialize+0x6d0>
 8008c8c:	ee78 8a28 	vadd.f32	s17, s16, s17
 8008c90:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008c94:	f7ff fd60 	bl	8008758 <get_dt>
 8008c98:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008c9c:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008ca0:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8008ca4:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8008ca8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008cac:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb8:	eddf 7a64 	vldr	s15, [pc, #400]	; 8008e4c <initialize+0x6d0>
 8008cbc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8008e50 <initialize+0x6d4>
 8008cc0:	9a06      	ldr	r2, [sp, #24]
 8008cc2:	ed9f 9a67 	vldr	s18, [pc, #412]	; 8008e60 <initialize+0x6e4>
 8008cc6:	ed9f aa66 	vldr	s20, [pc, #408]	; 8008e60 <initialize+0x6e4>
 8008cca:	bf48      	it	mi
 8008ccc:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008cd0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008cd4:	ee06 2a90 	vmov	s13, r2
 8008cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cdc:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 8008ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce4:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008ce8:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8008cec:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008cf0:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8008cf4:	ee17 4a90 	vmov	r4, s15
 8008cf8:	f7ff fd2e 	bl	8008758 <get_dt>
 8008cfc:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008d00:	4b50      	ldr	r3, [pc, #320]	; (8008e44 <initialize+0x6c8>)
 8008d02:	4a51      	ldr	r2, [pc, #324]	; (8008e48 <initialize+0x6cc>)
 8008d04:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008d08:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d14:	bf4c      	ite	mi
 8008d16:	4699      	movmi	r9, r3
 8008d18:	4691      	movpl	r9, r2
 8008d1a:	f7ff fd1d 	bl	8008758 <get_dt>
 8008d1e:	ee68 8a00 	vmul.f32	s17, s16, s0
 8008d22:	f7ff fd19 	bl	8008758 <get_dt>
 8008d26:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008d2a:	ee68 8a89 	vmul.f32	s17, s17, s18
 8008d2e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008d32:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8008d36:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008d3a:	eddf 9a49 	vldr	s19, [pc, #292]	; 8008e60 <initialize+0x6e4>
 8008d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d46:	eddf 7a41 	vldr	s15, [pc, #260]	; 8008e4c <initialize+0x6d0>
 8008d4a:	bf48      	it	mi
 8008d4c:	eef1 8a68 	vnegmi.f32	s17, s17
 8008d50:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8008d54:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008d58:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8008d5c:	ee17 5a90 	vmov	r5, s15
 8008d60:	f7ff fcfa 	bl	8008758 <get_dt>
 8008d64:	ee68 8a00 	vmul.f32	s17, s16, s0
 8008d68:	f7ff fcf6 	bl	8008758 <get_dt>
 8008d6c:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008d70:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8008d74:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008d78:	ee68 8a89 	vmul.f32	s17, s17, s18
 8008d7c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008d80:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8c:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8008e4c <initialize+0x6d0>
 8008d90:	bf48      	it	mi
 8008d92:	eef1 8a68 	vnegmi.f32	s17, s17
 8008d96:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8008d9a:	f7ff fcdd 	bl	8008758 <get_dt>
 8008d9e:	ee28 9a00 	vmul.f32	s18, s16, s0
 8008da2:	f7ff fcd9 	bl	8008758 <get_dt>
 8008da6:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008daa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008dae:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8008db2:	ee29 9a29 	vmul.f32	s18, s18, s19
 8008db6:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008dba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008e50 <initialize+0x6d4>
 8008dbe:	4a25      	ldr	r2, [pc, #148]	; (8008e54 <initialize+0x6d8>)
 8008dc0:	9503      	str	r5, [sp, #12]
 8008dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dca:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008e4c <initialize+0x6d0>
 8008dce:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dd2:	bf48      	it	mi
 8008dd4:	eeb1 9a49 	vnegmi.f32	s18, s18
 8008dd8:	ee79 7a27 	vadd.f32	s15, s18, s15
 8008ddc:	9401      	str	r4, [sp, #4]
 8008dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de2:	9600      	str	r6, [sp, #0]
 8008de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de8:	4643      	mov	r3, r8
 8008dea:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8008dee:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008df2:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 8008df6:	4918      	ldr	r1, [pc, #96]	; (8008e58 <initialize+0x6dc>)
 8008df8:	edcd 8a04 	vstr	s17, [sp, #16]
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	47b8      	blx	r7
 8008e00:	e4d3      	b.n	80087aa <initialize+0x2e>
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <initialize+0x6c4>)
 8008e04:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <initialize+0x6e0>)
 8008e06:	e4ca      	b.n	800879e <initialize+0x22>
 8008e08:	ab13      	add	r3, sp, #76	; 0x4c
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0e:	f7fe ff61 	bl	8007cd4 <acc_base_configuration_update_rate_get>
 8008e12:	a912      	add	r1, sp, #72	; 0x48
 8008e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e16:	f000 fae7 	bl	80093e8 <acc_radar_engine_common_frequency_to_main_clk>
 8008e1a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e9cb 3309 	strd	r3, r3, [fp, #36]	; 0x24
 8008e24:	e9cb 120b 	strd	r1, r2, [fp, #44]	; 0x2c
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f7fe fec7 	bl	8007bbc <acc_base_configuration_power_save_mode_get>
 8008e2e:	2804      	cmp	r0, #4
 8008e30:	d81e      	bhi.n	8008e70 <initialize+0x6f4>
 8008e32:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008e36:	0017      	.short	0x0017
 8008e38:	01190017 	.word	0x01190017
 8008e3c:	010d0113 	.word	0x010d0113
 8008e40:	200007b0 	.word	0x200007b0
 8008e44:	08011998 	.word	0x08011998
 8008e48:	08012a78 	.word	0x08012a78
 8008e4c:	350637bd 	.word	0x350637bd
 8008e50:	49742400 	.word	0x49742400
 8008e54:	08011a40 	.word	0x08011a40
 8008e58:	08011900 	.word	0x08011900
 8008e5c:	08011b04 	.word	0x08011b04
 8008e60:	4d8ef3c2 	.word	0x4d8ef3c2
 8008e64:	2301      	movs	r3, #1
 8008e66:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
 8008e70:	f10d 0246 	add.w	r2, sp, #70	; 0x46
 8008e74:	f10d 0143 	add.w	r1, sp, #67	; 0x43
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f7ff f8b5 	bl	8007fe8 <acc_base_configuration_cca_get>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f000 8221 	beq.w	80092c6 <initialize+0xb4a>
 8008e84:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8008e88:	2201      	movs	r2, #1
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	e9cb 2321 	strd	r2, r3, [fp, #132]	; 0x84
 8008e90:	4620      	mov	r0, r4
 8008e92:	f7fe fea9 	bl	8007be8 <acc_base_configuration_tx_disable_get>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f000 8239 	beq.w	800930e <initialize+0xb92>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f7fe feb8 	bl	8007c18 <acc_base_configuration_decrease_tx_emission_get>
 8008ea8:	f080 0001 	eor.w	r0, r0, #1
 8008eac:	f04f 0a01 	mov.w	sl, #1
 8008eb0:	b2c0      	uxtb	r0, r0
 8008eb2:	e9cb 0a11 	strd	r0, sl, [fp, #68]	; 0x44
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7fe fec6 	bl	8007c48 <acc_base_configuration_hw_accelerated_average_samples_get>
 8008ebc:	4550      	cmp	r0, sl
 8008ebe:	bf8b      	itete	hi
 8008ec0:	3802      	subhi	r0, #2
 8008ec2:	2300      	movls	r3, #0
 8008ec4:	e9cb a013 	strdhi	sl, r0, [fp, #76]	; 0x4c
 8008ec8:	e9cb 3313 	strdls	r3, r3, [fp, #76]	; 0x4c
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7fe ff1b 	bl	8007d08 <acc_base_configuration_gain_get>
 8008ed2:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f7fe ff2c 	bl	8007d34 <acc_base_configuration_integrator_get>
 8008edc:	f8cb 0058 	str.w	r0, [fp, #88]	; 0x58
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f7fe ff3f 	bl	8007d64 <acc_base_configuration_wg_duration_get>
 8008ee6:	f8cb 005c 	str.w	r0, [fp, #92]	; 0x5c
 8008eea:	4620      	mov	r0, r4
 8008eec:	f7fe ffd6 	bl	8007e9c <acc_base_configuration_sparse_sweeps_per_frame_get>
 8008ef0:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f7fe ffff 	bl	8007ef8 <acc_base_configuration_downsampling_factor_get>
 8008efa:	f8cb 0078 	str.w	r0, [fp, #120]	; 0x78
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7ff f836 	bl	8007f70 <acc_base_configuration_asynchronous_measurement_get>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	897a      	ldrh	r2, [r7, #10]
 8008f08:	f8b3 10b6 	ldrh.w	r1, [r3, #182]	; 0xb6
 8008f0c:	88bb      	ldrh	r3, [r7, #4]
 8008f0e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 8008f12:	f080 0001 	eor.w	r0, r0, #1
 8008f16:	b2c0      	uxtb	r0, r0
 8008f18:	3a01      	subs	r2, #1
 8008f1a:	f8cb 007c 	str.w	r0, [fp, #124]	; 0x7c
 8008f1e:	f8cb 206c 	str.w	r2, [fp, #108]	; 0x6c
 8008f22:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
 8008f26:	f7fe fca9 	bl	800787c <acc_rss_integration_get_sensor_reference_frequency>
 8008f2a:	ed8b 0a20 	vstr	s0, [fp, #128]	; 0x80
 8008f2e:	f7ff fc13 	bl	8008758 <get_dt>
 8008f32:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8008f36:	eddd 7a08 	vldr	s15, [sp, #32]
 8008f3a:	ed1f 9a37 	vldr	s18, [pc, #-220]	; 8008e60 <initialize+0x6e4>
 8008f3e:	ee88 7a88 	vdiv.f32	s14, s17, s16
 8008f42:	2401      	movs	r4, #1
 8008f44:	46a2      	mov	sl, r4
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	ed89 7a04 	vstr	s14, [r9, #16]
 8008f4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008f52:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008f56:	ed89 0a03 	vstr	s0, [r9, #12]
 8008f5a:	f7ff fbfd 	bl	8008758 <get_dt>
 8008f5e:	ee07 6a90 	vmov	s15, r6
 8008f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f66:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008f6a:	ee27 7a09 	vmul.f32	s14, s14, s18
 8008f6e:	ee27 7a08 	vmul.f32	s14, s14, s16
 8008f72:	ed89 7a00 	vstr	s14, [r9]
 8008f76:	f7ff fbef 	bl	8008758 <get_dt>
 8008f7a:	ee07 5a90 	vmov	s15, r5
 8008f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f82:	edd9 6a00 	vldr	s13, [r9]
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	9807      	ldr	r0, [sp, #28]
 8008f8a:	f8a9 0016 	strh.w	r0, [r9, #22]
 8008f8e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008f92:	2500      	movs	r5, #0
 8008f94:	ee60 7a09 	vmul.f32	s15, s0, s18
 8008f98:	f8a9 4018 	strh.w	r4, [r9, #24]
 8008f9c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8008fa0:	f8a9 5014 	strh.w	r5, [r9, #20]
 8008fa4:	edc9 7a02 	vstr	s15, [r9, #8]
 8008fa8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008fac:	4623      	mov	r3, r4
 8008fae:	edc9 7a01 	vstr	s15, [r9, #4]
 8008fb2:	f8a8 4006 	strh.w	r4, [r8, #6]
 8008fb6:	f8a8 4010 	strh.w	r4, [r8, #16]
 8008fba:	9c06      	ldr	r4, [sp, #24]
 8008fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fbe:	f8a8 000a 	strh.w	r0, [r8, #10]
 8008fc2:	f8a8 0000 	strh.w	r0, [r8]
 8008fc6:	f8a8 0004 	strh.w	r0, [r8, #4]
 8008fca:	f8a8 5002 	strh.w	r5, [r8, #2]
 8008fce:	2013      	movs	r0, #19
 8008fd0:	f8a8 5018 	strh.w	r5, [r8, #24]
 8008fd4:	f8a8 4008 	strh.w	r4, [r8, #8]
 8008fd8:	f8a8 4014 	strh.w	r4, [r8, #20]
 8008fdc:	f8a8 4016 	strh.w	r4, [r8, #22]
 8008fe0:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c
 8008fe4:	f7fe fd02 	bl	80079ec <acc_probes_execute_uint16>
 8008fe8:	f000 fa6a 	bl	80094c0 <acc_sensor_r2_get_max_header_length>
 8008fec:	f8bb 20b8 	ldrh.w	r2, [fp, #184]	; 0xb8
 8008ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ff4:	4410      	add	r0, r2
 8008ff6:	f8a8 000e 	strh.w	r0, [r8, #14]
 8008ffa:	f8a8 300c 	strh.w	r3, [r8, #12]
 8008ffe:	f7ff bbd4 	b.w	80087aa <initialize+0x2e>
 8009002:	ab13      	add	r3, sp, #76	; 0x4c
 8009004:	4620      	mov	r0, r4
 8009006:	9309      	str	r3, [sp, #36]	; 0x24
 8009008:	f7fe fe64 	bl	8007cd4 <acc_base_configuration_update_rate_get>
 800900c:	a912      	add	r1, sp, #72	; 0x48
 800900e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009010:	f000 f9ea 	bl	80093e8 <acc_radar_engine_common_frequency_to_main_clk>
 8009014:	2301      	movs	r3, #1
 8009016:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009018:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800901c:	2100      	movs	r1, #0
 800901e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009020:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8009024:	e9cb 120a 	strd	r1, r2, [fp, #40]	; 0x28
 8009028:	e6fe      	b.n	8008e28 <initialize+0x6ac>
 800902a:	2300      	movs	r3, #0
 800902c:	e9cb 330b 	strd	r3, r3, [fp, #44]	; 0x2c
 8009030:	2201      	movs	r2, #1
 8009032:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8009036:	ab13      	add	r3, sp, #76	; 0x4c
 8009038:	f8cb 2028 	str.w	r2, [fp, #40]	; 0x28
 800903c:	9309      	str	r3, [sp, #36]	; 0x24
 800903e:	e6f3      	b.n	8008e28 <initialize+0x6ac>
 8009040:	2300      	movs	r3, #0
 8009042:	e9cb 3309 	strd	r3, r3, [fp, #36]	; 0x24
 8009046:	e9cb 330b 	strd	r3, r3, [fp, #44]	; 0x2c
 800904a:	ab13      	add	r3, sp, #76	; 0x4c
 800904c:	9309      	str	r3, [sp, #36]	; 0x24
 800904e:	e6eb      	b.n	8008e28 <initialize+0x6ac>
 8009050:	2301      	movs	r3, #1
 8009052:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 8009056:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800905a:	e709      	b.n	8008e70 <initialize+0x6f4>
 800905c:	2300      	movs	r3, #0
 800905e:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 8009062:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8009066:	e703      	b.n	8008e70 <initialize+0x6f4>
 8009068:	2300      	movs	r3, #0
 800906a:	2201      	movs	r2, #1
 800906c:	e9cb 230d 	strd	r2, r3, [fp, #52]	; 0x34
 8009070:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8009074:	e6fc      	b.n	8008e70 <initialize+0x6f4>
 8009076:	2300      	movs	r3, #0
 8009078:	e4c8      	b.n	8008a0c <initialize+0x290>
 800907a:	4bb1      	ldr	r3, [pc, #708]	; (8009340 <initialize+0xbc4>)
 800907c:	4ab1      	ldr	r2, [pc, #708]	; (8009344 <initialize+0xbc8>)
 800907e:	f7ff bb8e 	b.w	800879e <initialize+0x22>
 8009082:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 8009086:	e4d2      	b.n	8008a2e <initialize+0x2b2>
 8009088:	ee07 6a90 	vmov	s15, r6
 800908c:	4bac      	ldr	r3, [pc, #688]	; (8009340 <initialize+0xbc4>)
 800908e:	9106      	str	r1, [sp, #24]
 8009090:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8009094:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8009096:	eddf 9aac 	vldr	s19, [pc, #688]	; 8009348 <initialize+0xbcc>
 800909a:	ed9f aaab 	vldr	s20, [pc, #684]	; 8009348 <initialize+0xbcc>
 800909e:	f7ff fb5b 	bl	8008758 <get_dt>
 80090a2:	ee29 7a00 	vmul.f32	s14, s18, s0
 80090a6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80090aa:	ee27 7a29 	vmul.f32	s14, s14, s19
 80090ae:	4aa7      	ldr	r2, [pc, #668]	; (800934c <initialize+0xbd0>)
 80090b0:	4ba7      	ldr	r3, [pc, #668]	; (8009350 <initialize+0xbd4>)
 80090b2:	ee27 7a28 	vmul.f32	s14, s14, s17
 80090b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80090ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090be:	bf4c      	ite	mi
 80090c0:	4690      	movmi	r8, r2
 80090c2:	4698      	movpl	r8, r3
 80090c4:	f7ff fb48 	bl	8008758 <get_dt>
 80090c8:	ee29 8a00 	vmul.f32	s16, s18, s0
 80090cc:	f7ff fb44 	bl	8008758 <get_dt>
 80090d0:	ee69 7a00 	vmul.f32	s15, s18, s0
 80090d4:	ee28 8a29 	vmul.f32	s16, s16, s19
 80090d8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80090dc:	ee28 8a28 	vmul.f32	s16, s16, s17
 80090e0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80090e4:	9906      	ldr	r1, [sp, #24]
 80090e6:	9106      	str	r1, [sp, #24]
 80090e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f0:	eddf 7a98 	vldr	s15, [pc, #608]	; 8009354 <initialize+0xbd8>
 80090f4:	eddf 9a94 	vldr	s19, [pc, #592]	; 8009348 <initialize+0xbcc>
 80090f8:	bf48      	it	mi
 80090fa:	eeb1 8a48 	vnegmi.f32	s16, s16
 80090fe:	ee38 8a27 	vadd.f32	s16, s16, s15
 8009102:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8009106:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800910a:	ee17 6a90 	vmov	r6, s15
 800910e:	f7ff fb23 	bl	8008758 <get_dt>
 8009112:	ee29 8a00 	vmul.f32	s16, s18, s0
 8009116:	f7ff fb1f 	bl	8008758 <get_dt>
 800911a:	ee69 7a00 	vmul.f32	s15, s18, s0
 800911e:	ee28 8a29 	vmul.f32	s16, s16, s19
 8009122:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009126:	ee28 8a28 	vmul.f32	s16, s16, s17
 800912a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800912e:	9906      	ldr	r1, [sp, #24]
 8009130:	9106      	str	r1, [sp, #24]
 8009132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913a:	bf48      	it	mi
 800913c:	eeb1 8a48 	vnegmi.f32	s16, s16
 8009140:	f7ff fb0a 	bl	8008758 <get_dt>
 8009144:	eddf 8a83 	vldr	s17, [pc, #524]	; 8009354 <initialize+0xbd8>
 8009148:	ee78 8a28 	vadd.f32	s17, s16, s17
 800914c:	ee29 8a00 	vmul.f32	s16, s18, s0
 8009150:	f7ff fb02 	bl	8008758 <get_dt>
 8009154:	ee69 7a00 	vmul.f32	s15, s18, s0
 8009158:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800915c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8009160:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8009164:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009168:	ee28 8a29 	vmul.f32	s16, s16, s19
 800916c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009174:	eddf 7a77 	vldr	s15, [pc, #476]	; 8009354 <initialize+0xbd8>
 8009178:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8009358 <initialize+0xbdc>
 800917c:	9906      	ldr	r1, [sp, #24]
 800917e:	ed9f 9a72 	vldr	s18, [pc, #456]	; 8009348 <initialize+0xbcc>
 8009182:	ed9f aa71 	vldr	s20, [pc, #452]	; 8009348 <initialize+0xbcc>
 8009186:	bf48      	it	mi
 8009188:	eeb1 8a48 	vnegmi.f32	s16, s16
 800918c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009190:	ee06 1a90 	vmov	s13, r1
 8009194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009198:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 800919c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a0:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80091a4:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80091a8:	ee68 8a87 	vmul.f32	s17, s17, s14
 80091ac:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80091b0:	ee17 4a90 	vmov	r4, s15
 80091b4:	f7ff fad0 	bl	8008758 <get_dt>
 80091b8:	ee68 7a00 	vmul.f32	s15, s16, s0
 80091bc:	4b63      	ldr	r3, [pc, #396]	; (800934c <initialize+0xbd0>)
 80091be:	4a64      	ldr	r2, [pc, #400]	; (8009350 <initialize+0xbd4>)
 80091c0:	ee67 7a89 	vmul.f32	s15, s15, s18
 80091c4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80091c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d0:	bf4c      	ite	mi
 80091d2:	4699      	movmi	r9, r3
 80091d4:	4691      	movpl	r9, r2
 80091d6:	f7ff fabf 	bl	8008758 <get_dt>
 80091da:	ee68 8a00 	vmul.f32	s17, s16, s0
 80091de:	f7ff fabb 	bl	8008758 <get_dt>
 80091e2:	ee68 7a00 	vmul.f32	s15, s16, s0
 80091e6:	ee68 8a89 	vmul.f32	s17, s17, s18
 80091ea:	ee67 7a89 	vmul.f32	s15, s15, s18
 80091ee:	ee68 8aa9 	vmul.f32	s17, s17, s19
 80091f2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80091f6:	eddf 9a54 	vldr	s19, [pc, #336]	; 8009348 <initialize+0xbcc>
 80091fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009202:	eddf 7a54 	vldr	s15, [pc, #336]	; 8009354 <initialize+0xbd8>
 8009206:	bf48      	it	mi
 8009208:	eef1 8a68 	vnegmi.f32	s17, s17
 800920c:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8009210:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8009214:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8009218:	ee17 5a90 	vmov	r5, s15
 800921c:	f7ff fa9c 	bl	8008758 <get_dt>
 8009220:	ee68 8a00 	vmul.f32	s17, s16, s0
 8009224:	f7ff fa98 	bl	8008758 <get_dt>
 8009228:	ee68 7a00 	vmul.f32	s15, s16, s0
 800922c:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8009230:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009234:	ee68 8a89 	vmul.f32	s17, s17, s18
 8009238:	ee67 7a89 	vmul.f32	s15, s15, s18
 800923c:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8009240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009248:	eddf 7a42 	vldr	s15, [pc, #264]	; 8009354 <initialize+0xbd8>
 800924c:	bf48      	it	mi
 800924e:	eef1 8a68 	vnegmi.f32	s17, s17
 8009252:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8009256:	f7ff fa7f 	bl	8008758 <get_dt>
 800925a:	ee28 9a00 	vmul.f32	s18, s16, s0
 800925e:	f7ff fa7b 	bl	8008758 <get_dt>
 8009262:	ee68 7a00 	vmul.f32	s15, s16, s0
 8009266:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800926a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800926e:	ee29 9a29 	vmul.f32	s18, s18, s19
 8009272:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009276:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009358 <initialize+0xbdc>
 800927a:	4a38      	ldr	r2, [pc, #224]	; (800935c <initialize+0xbe0>)
 800927c:	9503      	str	r5, [sp, #12]
 800927e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009286:	eddf 7a33 	vldr	s15, [pc, #204]	; 8009354 <initialize+0xbd8>
 800928a:	f8cd 9008 	str.w	r9, [sp, #8]
 800928e:	bf48      	it	mi
 8009290:	eeb1 9a49 	vnegmi.f32	s18, s18
 8009294:	ee79 7a27 	vadd.f32	s15, s18, s15
 8009298:	9401      	str	r4, [sp, #4]
 800929a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800929e:	9600      	str	r6, [sp, #0]
 80092a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a4:	4643      	mov	r3, r8
 80092a6:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80092aa:	ee68 8a87 	vmul.f32	s17, s17, s14
 80092ae:	e5a0      	b.n	8008df2 <initialize+0x676>
 80092b0:	4b23      	ldr	r3, [pc, #140]	; (8009340 <initialize+0xbc4>)
 80092b2:	4a2b      	ldr	r2, [pc, #172]	; (8009360 <initialize+0xbe4>)
 80092b4:	f7ff ba73 	b.w	800879e <initialize+0x22>
 80092b8:	2201      	movs	r2, #1
 80092ba:	232e      	movs	r3, #46	; 0x2e
 80092bc:	f88b 2070 	strb.w	r2, [fp, #112]	; 0x70
 80092c0:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
 80092c4:	e465      	b.n	8008b92 <initialize+0x416>
 80092c6:	f8cb 0084 	str.w	r0, [fp, #132]	; 0x84
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7fe fc8c 	bl	8007be8 <acc_base_configuration_tx_disable_get>
 80092d0:	f080 0001 	eor.w	r0, r0, #1
 80092d4:	b2c3      	uxtb	r3, r0
 80092d6:	e5e2      	b.n	8008e9e <initialize+0x722>
 80092d8:	4573      	cmp	r3, lr
 80092da:	d01d      	beq.n	8009318 <initialize+0xb9c>
 80092dc:	2200      	movs	r2, #0
 80092de:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 80092e2:	2200      	movs	r2, #0
 80092e4:	fa1f fa80 	uxth.w	sl, r0
 80092e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80092ea:	2101      	movs	r1, #1
 80092ec:	ebaa 0203 	sub.w	r2, sl, r3
 80092f0:	910e      	str	r1, [sp, #56]	; 0x38
 80092f2:	9908      	ldr	r1, [sp, #32]
 80092f4:	fb92 f2f1 	sdiv	r2, r2, r1
 80092f8:	fa1f fa82 	uxth.w	sl, r2
 80092fc:	e411      	b.n	8008b22 <initialize+0x3a6>
 80092fe:	920f      	str	r2, [sp, #60]	; 0x3c
 8009300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009302:	2a00      	cmp	r2, #0
 8009304:	bfd4      	ite	le
 8009306:	2200      	movle	r2, #0
 8009308:	2201      	movgt	r2, #1
 800930a:	920a      	str	r2, [sp, #40]	; 0x28
 800930c:	e7ed      	b.n	80092ea <initialize+0xb6e>
 800930e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8009312:	f083 0301 	eor.w	r3, r3, #1
 8009316:	e5c2      	b.n	8008e9e <initialize+0x722>
 8009318:	4282      	cmp	r2, r0
 800931a:	bf0c      	ite	eq
 800931c:	2201      	moveq	r2, #1
 800931e:	2200      	movne	r2, #0
 8009320:	9209      	str	r2, [sp, #36]	; 0x24
 8009322:	d106      	bne.n	8009332 <initialize+0xbb6>
 8009324:	f04f 0a00 	mov.w	sl, #0
 8009328:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
 800932c:	920a      	str	r2, [sp, #40]	; 0x28
 800932e:	f7ff bbf8 	b.w	8008b22 <initialize+0x3a6>
 8009332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009334:	2a00      	cmp	r2, #0
 8009336:	bfd4      	ite	le
 8009338:	2200      	movle	r2, #0
 800933a:	2201      	movgt	r2, #1
 800933c:	920a      	str	r2, [sp, #40]	; 0x28
 800933e:	e7d0      	b.n	80092e2 <initialize+0xb66>
 8009340:	200007b0 	.word	0x200007b0
 8009344:	08011b24 	.word	0x08011b24
 8009348:	4d8ef3c2 	.word	0x4d8ef3c2
 800934c:	08011998 	.word	0x08011998
 8009350:	08012a78 	.word	0x08012a78
 8009354:	350637bd 	.word	0x350637bd
 8009358:	49742400 	.word	0x49742400
 800935c:	08011a00 	.word	0x08011a00
 8009360:	08011ae0 	.word	0x08011ae0

08009364 <acc_radar_engine_sparse_create>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4a11      	ldr	r2, [pc, #68]	; (80093ac <acc_radar_engine_sparse_create+0x48>)
 8009368:	4604      	mov	r4, r0
 800936a:	460d      	mov	r5, r1
 800936c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8009370:	21bc      	movs	r1, #188	; 0xbc
 8009372:	2001      	movs	r0, #1
 8009374:	f7fe fb02 	bl	800797c <acc_rss_integration_mem_calloc_debug>
 8009378:	6160      	str	r0, [r4, #20]
 800937a:	b1a8      	cbz	r0, 80093a8 <acc_radar_engine_sparse_create+0x44>
 800937c:	4628      	mov	r0, r5
 800937e:	f7fe fbb7 	bl	8007af0 <acc_base_configuration_sensor_get>
 8009382:	6020      	str	r0, [r4, #0]
 8009384:	4628      	mov	r0, r5
 8009386:	f7fe fdf3 	bl	8007f70 <acc_base_configuration_asynchronous_measurement_get>
 800938a:	73a0      	strb	r0, [r4, #14]
 800938c:	4628      	mov	r0, r5
 800938e:	f7fe fc15 	bl	8007bbc <acc_base_configuration_power_save_mode_get>
 8009392:	fab0 f080 	clz	r0, r0
 8009396:	0940      	lsrs	r0, r0, #5
 8009398:	73e0      	strb	r0, [r4, #15]
 800939a:	4628      	mov	r0, r5
 800939c:	f000 f80a 	bl	80093b4 <acc_radar_engine_common_get_timeout_ms>
 80093a0:	4b03      	ldr	r3, [pc, #12]	; (80093b0 <acc_radar_engine_sparse_create+0x4c>)
 80093a2:	6120      	str	r0, [r4, #16]
 80093a4:	61a3      	str	r3, [r4, #24]
 80093a6:	2001      	movs	r0, #1
 80093a8:	bd38      	pop	{r3, r4, r5, pc}
 80093aa:	bf00      	nop
 80093ac:	08011900 	.word	0x08011900
 80093b0:	08011b6c 	.word	0x08011b6c

080093b4 <acc_radar_engine_common_get_timeout_ms>:
 80093b4:	b510      	push	{r4, lr}
 80093b6:	4604      	mov	r4, r0
 80093b8:	f7fe fc82 	bl	8007cc0 <acc_base_configuration_repetition_mode_get>
 80093bc:	2801      	cmp	r0, #1
 80093be:	d00d      	beq.n	80093dc <acc_radar_engine_common_get_timeout_ms+0x28>
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7fe fc87 	bl	8007cd4 <acc_base_configuration_update_rate_get>
 80093c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80093e4 <acc_radar_engine_common_get_timeout_ms+0x30>
 80093ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093d6:	ee17 0a90 	vmov	r0, s15
 80093da:	bd10      	pop	{r4, pc}
 80093dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80093e0:	bd10      	pop	{r4, pc}
 80093e2:	bf00      	nop
 80093e4:	44fa0000 	.word	0x44fa0000

080093e8 <acc_radar_engine_common_frequency_to_main_clk>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	ed2d 8b02 	vpush	{d8}
 80093ee:	4604      	mov	r4, r0
 80093f0:	eeb0 8a40 	vmov.f32	s16, s0
 80093f4:	460d      	mov	r5, r1
 80093f6:	f7fe fa41 	bl	800787c <acc_rss_integration_get_sensor_reference_frequency>
 80093fa:	eec0 7a08 	vdiv.f32	s15, s0, s16
 80093fe:	ecbd 8b02 	vpop	{d8}
 8009402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009406:	ee17 3a90 	vmov	r3, s15
 800940a:	0c1a      	lsrs	r2, r3, #16
 800940c:	b29b      	uxth	r3, r3
 800940e:	602a      	str	r2, [r5, #0]
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}

08009414 <internal_buffer_processed_read>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	b085      	sub	sp, #20
 800941a:	461f      	mov	r7, r3
 800941c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8009420:	9101      	str	r1, [sp, #4]
 8009422:	4682      	mov	sl, r0
 8009424:	4689      	mov	r9, r1
 8009426:	4615      	mov	r5, r2
 8009428:	f7fe fa2e 	bl	8007888 <acc_rss_integration_get_max_spi_transfer_size>
 800942c:	2300      	movs	r3, #0
 800942e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009432:	9302      	str	r3, [sp, #8]
 8009434:	2f00      	cmp	r7, #0
 8009436:	d03d      	beq.n	80094b4 <internal_buffer_processed_read+0xa0>
 8009438:	429c      	cmp	r4, r3
 800943a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800943e:	bf14      	ite	ne
 8009440:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8009444:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8009448:	f1a0 0803 	sub.w	r8, r0, #3
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	fa0f fb8b 	sxth.w	fp, fp
 8009452:	e024      	b.n	800949e <internal_buffer_processed_read+0x8a>
 8009454:	b2a6      	uxth	r6, r4
 8009456:	9900      	ldr	r1, [sp, #0]
 8009458:	f8a9 1004 	strh.w	r1, [r9, #4]
 800945c:	1e72      	subs	r2, r6, #1
 800945e:	ea4b 0305 	orr.w	r3, fp, r5
 8009462:	f8a9 2002 	strh.w	r2, [r9, #2]
 8009466:	f8a9 3000 	strh.w	r3, [r9]
 800946a:	4649      	mov	r1, r9
 800946c:	2301      	movs	r3, #1
 800946e:	4650      	mov	r0, sl
 8009470:	1ce2      	adds	r2, r4, #3
 8009472:	f7fe fa39 	bl	80078e8 <acc_rss_integration_sensor_device_transfer>
 8009476:	9802      	ldr	r0, [sp, #8]
 8009478:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800947c:	f8c9 0000 	str.w	r0, [r9]
 8009480:	f8a9 3004 	strh.w	r3, [r9, #4]
 8009484:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8009488:	442e      	add	r6, r5
 800948a:	f8d9 0000 	ldr.w	r0, [r9]
 800948e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8009492:	9002      	str	r0, [sp, #8]
 8009494:	1b3f      	subs	r7, r7, r4
 8009496:	b2b5      	uxth	r5, r6
 8009498:	f8ad 300c 	strh.w	r3, [sp, #12]
 800949c:	d00a      	beq.n	80094b4 <internal_buffer_processed_read+0xa0>
 800949e:	45b8      	cmp	r8, r7
 80094a0:	4644      	mov	r4, r8
 80094a2:	bf28      	it	cs
 80094a4:	463c      	movcs	r4, r7
 80094a6:	45b8      	cmp	r8, r7
 80094a8:	d2d4      	bcs.n	8009454 <internal_buffer_processed_read+0x40>
 80094aa:	e000      	b.n	80094ae <internal_buffer_processed_read+0x9a>
 80094ac:	3c01      	subs	r4, #1
 80094ae:	07e3      	lsls	r3, r4, #31
 80094b0:	d4fc      	bmi.n	80094ac <internal_buffer_processed_read+0x98>
 80094b2:	e7cf      	b.n	8009454 <internal_buffer_processed_read+0x40>
 80094b4:	9801      	ldr	r0, [sp, #4]
 80094b6:	3006      	adds	r0, #6
 80094b8:	b005      	add	sp, #20
 80094ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094be:	bf00      	nop

080094c0 <acc_sensor_r2_get_max_header_length>:
 80094c0:	2003      	movs	r0, #3
 80094c2:	4770      	bx	lr

080094c4 <acc_sensor_r2_conf_write_instr>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 80094cc:	4604      	mov	r4, r0
 80094ce:	9201      	str	r2, [sp, #4]
 80094d0:	f10d 010a 	add.w	r1, sp, #10
 80094d4:	a801      	add	r0, sp, #4
 80094d6:	2201      	movs	r2, #1
 80094d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80094dc:	f7fe fad6 	bl	8007a8c <acc_utils_uint32_to_transfer_buffer>
 80094e0:	4620      	mov	r0, r4
 80094e2:	a902      	add	r1, sp, #8
 80094e4:	2300      	movs	r3, #0
 80094e6:	2203      	movs	r2, #3
 80094e8:	f7fe f9fe 	bl	80078e8 <acc_rss_integration_sensor_device_transfer>
 80094ec:	b004      	add	sp, #16
 80094ee:	bd10      	pop	{r4, pc}

080094f0 <acc_sensor_r2_prepare_load_confmem>:
 80094f0:	0849      	lsrs	r1, r1, #1
 80094f2:	b538      	push	{r3, r4, r5, lr}
 80094f4:	6010      	str	r0, [r2, #0]
 80094f6:	461c      	mov	r4, r3
 80094f8:	6019      	str	r1, [r3, #0]
 80094fa:	4615      	mov	r5, r2
 80094fc:	f7fe f9c4 	bl	8007888 <acc_rss_integration_get_max_spi_transfer_size>
 8009500:	6821      	ldr	r1, [r4, #0]
 8009502:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8009506:	d807      	bhi.n	8009518 <acc_sensor_r2_prepare_load_confmem+0x28>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	3901      	subs	r1, #1
 800950c:	f021 0101 	bic.w	r1, r1, #1
 8009510:	3302      	adds	r3, #2
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	6021      	str	r1, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	f7fe f9b6 	bl	8007888 <acc_rss_integration_get_max_spi_transfer_size>
 800951c:	0841      	lsrs	r1, r0, #1
 800951e:	e7f3      	b.n	8009508 <acc_sensor_r2_prepare_load_confmem+0x18>

08009520 <acc_sensor_r2_load_confmem>:
 8009520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009524:	b083      	sub	sp, #12
 8009526:	1c5d      	adds	r5, r3, #1
 8009528:	4606      	mov	r6, r0
 800952a:	460c      	mov	r4, r1
 800952c:	4617      	mov	r7, r2
 800952e:	f7fe fa57 	bl	80079e0 <acc_rss_integration_log_level>
 8009532:	2803      	cmp	r0, #3
 8009534:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8009538:	d908      	bls.n	800954c <acc_sensor_r2_load_confmem+0x2c>
 800953a:	4b11      	ldr	r3, [pc, #68]	; (8009580 <acc_sensor_r2_load_confmem+0x60>)
 800953c:	9400      	str	r4, [sp, #0]
 800953e:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8009542:	4a10      	ldr	r2, [pc, #64]	; (8009584 <acc_sensor_r2_load_confmem+0x64>)
 8009544:	4910      	ldr	r1, [pc, #64]	; (8009588 <acc_sensor_r2_load_confmem+0x68>)
 8009546:	4633      	mov	r3, r6
 8009548:	2004      	movs	r0, #4
 800954a:	47c8      	blx	r9
 800954c:	f7fe f99c 	bl	8007888 <acc_rss_integration_get_max_spi_transfer_size>
 8009550:	4540      	cmp	r0, r8
 8009552:	d208      	bcs.n	8009566 <acc_sensor_r2_load_confmem+0x46>
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <acc_sensor_r2_load_confmem+0x60>)
 8009556:	4a0d      	ldr	r2, [pc, #52]	; (800958c <acc_sensor_r2_load_confmem+0x6c>)
 8009558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955a:	490b      	ldr	r1, [pc, #44]	; (8009588 <acc_sensor_r2_load_confmem+0x68>)
 800955c:	2000      	movs	r0, #0
 800955e:	b003      	add	sp, #12
 8009560:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009564:	4718      	bx	r3
 8009566:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 800956a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800956e:	4639      	mov	r1, r7
 8009570:	4630      	mov	r0, r6
 8009572:	2300      	movs	r3, #0
 8009574:	803c      	strh	r4, [r7, #0]
 8009576:	b003      	add	sp, #12
 8009578:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800957c:	f7fe b9b4 	b.w	80078e8 <acc_rss_integration_sensor_device_transfer>
 8009580:	200007b0 	.word	0x200007b0
 8009584:	08011ba0 	.word	0x08011ba0
 8009588:	08011b90 	.word	0x08011b90
 800958c:	08011bc8 	.word	0x08011bc8

08009590 <acc_sensor_r2_buffer_processed_verify_size>:
 8009590:	3103      	adds	r1, #3
 8009592:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8009596:	bf2c      	ite	cs
 8009598:	2001      	movcs	r0, #1
 800959a:	2000      	movcc	r0, #0
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop

080095a0 <acc_sensor_r2_buffer_processed_read>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	2400      	movs	r4, #0
 80095a6:	9400      	str	r4, [sp, #0]
 80095a8:	f7ff ff34 	bl	8009414 <internal_buffer_processed_read>
 80095ac:	b002      	add	sp, #8
 80095ae:	bd10      	pop	{r4, pc}

080095b0 <acc_sensor_manager_power_on_and_start_sensor>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	6986      	ldr	r6, [r0, #24]
 80095b4:	4604      	mov	r4, r0
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7fe f96c 	bl	8007894 <acc_rss_integration_sensor_device_power_on>
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 80095be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80095c0:	6819      	ldr	r1, [r3, #0]
 80095c2:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	3b48      	subs	r3, #72	; 0x48
 80095ca:	4419      	add	r1, r3
 80095cc:	1d20      	adds	r0, r4, #4
 80095ce:	f000 fe03 	bl	800a1d8 <acc_sweep_manager_start>
 80095d2:	4605      	mov	r5, r0
 80095d4:	b118      	cbz	r0, 80095de <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 80095d6:	2301      	movs	r3, #1
 80095d8:	70e3      	strb	r3, [r4, #3]
 80095da:	4628      	mov	r0, r5
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
 80095de:	4630      	mov	r0, r6
 80095e0:	f7fe f95e 	bl	80078a0 <acc_rss_integration_sensor_device_power_off>
 80095e4:	4628      	mov	r0, r5
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	20000798 	.word	0x20000798

080095ec <calibrate_sensor>:
 80095ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80096c0 <calibrate_sensor+0xd4>
 80095f4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80096c4 <calibrate_sensor+0xd8>
 80095f8:	f8d8 3000 	ldr.w	r3, [r8]
 80095fc:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 8009600:	00e4      	lsls	r4, r4, #3
 8009602:	3c48      	subs	r4, #72	; 0x48
 8009604:	4423      	add	r3, r4
 8009606:	f04f 0900 	mov.w	r9, #0
 800960a:	b085      	sub	sp, #20
 800960c:	460e      	mov	r6, r1
 800960e:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 8009612:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8009616:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 800961a:	4607      	mov	r7, r0
 800961c:	4692      	mov	sl, r2
 800961e:	f7fe f939 	bl	8007894 <acc_rss_integration_sensor_device_power_on>
 8009622:	4630      	mov	r0, r6
 8009624:	f000 fdb4 	bl	800a190 <acc_sweep_manager_is_sensor_connected>
 8009628:	b968      	cbnz	r0, 8009646 <calibrate_sensor+0x5a>
 800962a:	4b21      	ldr	r3, [pc, #132]	; (80096b0 <calibrate_sensor+0xc4>)
 800962c:	4a21      	ldr	r2, [pc, #132]	; (80096b4 <calibrate_sensor+0xc8>)
 800962e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009630:	4921      	ldr	r1, [pc, #132]	; (80096b8 <calibrate_sensor+0xcc>)
 8009632:	463b      	mov	r3, r7
 8009634:	4605      	mov	r5, r0
 8009636:	47a0      	blx	r4
 8009638:	4638      	mov	r0, r7
 800963a:	f7fe f931 	bl	80078a0 <acc_rss_integration_sensor_device_power_off>
 800963e:	4628      	mov	r0, r5
 8009640:	b005      	add	sp, #20
 8009642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009646:	4639      	mov	r1, r7
 8009648:	200b      	movs	r0, #11
 800964a:	f7fe f9ff 	bl	8007a4c <acc_probes_execute_primitive_probe>
 800964e:	f8d8 2000 	ldr.w	r2, [r8]
 8009652:	f8cd 9004 	str.w	r9, [sp, #4]
 8009656:	4651      	mov	r1, sl
 8009658:	4630      	mov	r0, r6
 800965a:	4422      	add	r2, r4
 800965c:	ab01      	add	r3, sp, #4
 800965e:	f8cd b008 	str.w	fp, [sp, #8]
 8009662:	f8cd 900c 	str.w	r9, [sp, #12]
 8009666:	f000 fd97 	bl	800a198 <acc_sweep_manager_calibrate>
 800966a:	4605      	mov	r5, r0
 800966c:	b9c8      	cbnz	r0, 80096a2 <calibrate_sensor+0xb6>
 800966e:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <calibrate_sensor+0xc4>)
 8009670:	4a12      	ldr	r2, [pc, #72]	; (80096bc <calibrate_sensor+0xd0>)
 8009672:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009674:	4910      	ldr	r1, [pc, #64]	; (80096b8 <calibrate_sensor+0xcc>)
 8009676:	463b      	mov	r3, r7
 8009678:	47b0      	blx	r6
 800967a:	f8d8 3000 	ldr.w	r3, [r8]
 800967e:	441c      	add	r4, r3
 8009680:	9a02      	ldr	r2, [sp, #8]
 8009682:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009686:	6462      	str	r2, [r4, #68]	; 0x44
 8009688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800968c:	4639      	mov	r1, r7
 800968e:	200c      	movs	r0, #12
 8009690:	f7fe f9dc 	bl	8007a4c <acc_probes_execute_primitive_probe>
 8009694:	4638      	mov	r0, r7
 8009696:	f7fe f903 	bl	80078a0 <acc_rss_integration_sensor_device_power_off>
 800969a:	4628      	mov	r0, r5
 800969c:	b005      	add	sp, #20
 800969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a2:	f8d8 3000 	ldr.w	r3, [r8]
 80096a6:	441c      	add	r4, r3
 80096a8:	2301      	movs	r3, #1
 80096aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80096ae:	e7e7      	b.n	8009680 <calibrate_sensor+0x94>
 80096b0:	200007b0 	.word	0x200007b0
 80096b4:	08011be8 	.word	0x08011be8
 80096b8:	08011c24 	.word	0x08011c24
 80096bc:	08011c34 	.word	0x08011c34
 80096c0:	20000798 	.word	0x20000798
 80096c4:	ff800000 	.word	0xff800000

080096c8 <acc_sensor_manager_hibernate_enter>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4603      	mov	r3, r0
 80096cc:	3004      	adds	r0, #4
 80096ce:	699d      	ldr	r5, [r3, #24]
 80096d0:	f000 fd9a 	bl	800a208 <acc_sweep_manager_wait_for_hibernate_ready>
 80096d4:	4604      	mov	r4, r0
 80096d6:	b930      	cbnz	r0, 80096e6 <acc_sensor_manager_hibernate_enter+0x1e>
 80096d8:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <acc_sensor_manager_hibernate_enter+0x28>)
 80096da:	4a06      	ldr	r2, [pc, #24]	; (80096f4 <acc_sensor_manager_hibernate_enter+0x2c>)
 80096dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096de:	4906      	ldr	r1, [pc, #24]	; (80096f8 <acc_sensor_manager_hibernate_enter+0x30>)
 80096e0:	4798      	blx	r3
 80096e2:	4620      	mov	r0, r4
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7fe f8e0 	bl	80078ac <acc_rss_integration_sensor_device_hibernate_enter>
 80096ec:	4620      	mov	r0, r4
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	200007b0 	.word	0x200007b0
 80096f4:	08011c58 	.word	0x08011c58
 80096f8:	08011c24 	.word	0x08011c24

080096fc <acc_sensor_manager_activate>:
 80096fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009700:	4e18      	ldr	r6, [pc, #96]	; (8009764 <acc_sensor_manager_activate+0x68>)
 8009702:	7834      	ldrb	r4, [r6, #0]
 8009704:	b114      	cbz	r4, 800970c <acc_sensor_manager_activate+0x10>
 8009706:	4620      	mov	r0, r4
 8009708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800970c:	f7fe f8b0 	bl	8007870 <acc_rss_integration_get_sensor_count>
 8009710:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8009714:	4914      	ldr	r1, [pc, #80]	; (8009768 <acc_sensor_manager_activate+0x6c>)
 8009716:	4f15      	ldr	r7, [pc, #84]	; (800976c <acc_sensor_manager_activate+0x70>)
 8009718:	00c0      	lsls	r0, r0, #3
 800971a:	f240 1253 	movw	r2, #339	; 0x153
 800971e:	f7fe f909 	bl	8007934 <acc_rss_integration_mem_alloc_debug>
 8009722:	6038      	str	r0, [r7, #0]
 8009724:	2800      	cmp	r0, #0
 8009726:	d0ee      	beq.n	8009706 <acc_sensor_manager_activate+0xa>
 8009728:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8009770 <acc_sensor_manager_activate+0x74>
 800972c:	4625      	mov	r5, r4
 800972e:	e00e      	b.n	800974e <acc_sensor_manager_activate+0x52>
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009736:	4618      	mov	r0, r3
 8009738:	2248      	movs	r2, #72	; 0x48
 800973a:	2100      	movs	r1, #0
 800973c:	f002 fdb0 	bl	800c2a0 <memset>
 8009740:	3401      	adds	r4, #1
 8009742:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8009746:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 800974a:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 800974e:	f7fe f88f 	bl	8007870 <acc_rss_integration_get_sensor_count>
 8009752:	42a0      	cmp	r0, r4
 8009754:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8009758:	d8ea      	bhi.n	8009730 <acc_sensor_manager_activate+0x34>
 800975a:	2401      	movs	r4, #1
 800975c:	7034      	strb	r4, [r6, #0]
 800975e:	4620      	mov	r0, r4
 8009760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009764:	20000790 	.word	0x20000790
 8009768:	08011c24 	.word	0x08011c24
 800976c:	20000798 	.word	0x20000798
 8009770:	ff800000 	.word	0xff800000

08009774 <acc_sensor_manager_deactivate>:
 8009774:	b510      	push	{r4, lr}
 8009776:	4c05      	ldr	r4, [pc, #20]	; (800978c <acc_sensor_manager_deactivate+0x18>)
 8009778:	7823      	ldrb	r3, [r4, #0]
 800977a:	b903      	cbnz	r3, 800977e <acc_sensor_manager_deactivate+0xa>
 800977c:	bd10      	pop	{r4, pc}
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <acc_sensor_manager_deactivate+0x1c>)
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	f7fe f91b 	bl	80079bc <acc_rss_integration_mem_free>
 8009786:	2300      	movs	r3, #0
 8009788:	7023      	strb	r3, [r4, #0]
 800978a:	bd10      	pop	{r4, pc}
 800978c:	20000790 	.word	0x20000790
 8009790:	20000798 	.word	0x20000798

08009794 <acc_sensor_manager_acquire_adc_data>:
 8009794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009798:	7846      	ldrb	r6, [r0, #1]
 800979a:	461c      	mov	r4, r3
 800979c:	b13e      	cbz	r6, 80097ae <acc_sensor_manager_acquire_adc_data+0x1a>
 800979e:	2300      	movs	r3, #0
 80097a0:	7023      	strb	r3, [r4, #0]
 80097a2:	7063      	strb	r3, [r4, #1]
 80097a4:	70a3      	strb	r3, [r4, #2]
 80097a6:	70e3      	strb	r3, [r4, #3]
 80097a8:	4630      	mov	r0, r6
 80097aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ae:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80098ac <acc_sensor_manager_acquire_adc_data+0x118>
 80097b2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80097b6:	f8dc c000 	ldr.w	ip, [ip]
 80097ba:	4605      	mov	r5, r0
 80097bc:	4688      	mov	r8, r1
 80097be:	4617      	mov	r7, r2
 80097c0:	f1bc 0f00 	cmp.w	ip, #0
 80097c4:	d014      	beq.n	80097f0 <acc_sensor_manager_acquire_adc_data+0x5c>
 80097c6:	f8dc a00c 	ldr.w	sl, [ip, #12]
 80097ca:	f1ba 0f00 	cmp.w	sl, #0
 80097ce:	d00f      	beq.n	80097f0 <acc_sensor_manager_acquire_adc_data+0x5c>
 80097d0:	47d0      	blx	sl
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d0e8      	beq.n	80097a8 <acc_sensor_manager_acquire_adc_data+0x14>
 80097d6:	786e      	ldrb	r6, [r5, #1]
 80097d8:	2e00      	cmp	r6, #0
 80097da:	d1e5      	bne.n	80097a8 <acc_sensor_manager_acquire_adc_data+0x14>
 80097dc:	463b      	mov	r3, r7
 80097de:	4642      	mov	r2, r8
 80097e0:	4649      	mov	r1, r9
 80097e2:	2002      	movs	r0, #2
 80097e4:	2601      	movs	r6, #1
 80097e6:	f7fe f901 	bl	80079ec <acc_probes_execute_uint16>
 80097ea:	4630      	mov	r0, r6
 80097ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f0:	2300      	movs	r3, #0
 80097f2:	7023      	strb	r3, [r4, #0]
 80097f4:	7063      	strb	r3, [r4, #1]
 80097f6:	70a3      	strb	r3, [r4, #2]
 80097f8:	70e3      	strb	r3, [r4, #3]
 80097fa:	f895 a000 	ldrb.w	sl, [r5]
 80097fe:	f1ba 0f02 	cmp.w	sl, #2
 8009802:	d031      	beq.n	8009868 <acc_sensor_manager_acquire_adc_data+0xd4>
 8009804:	f1ba 0f01 	cmp.w	sl, #1
 8009808:	d034      	beq.n	8009874 <acc_sensor_manager_acquire_adc_data+0xe0>
 800980a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800980c:	1d28      	adds	r0, r5, #4
 800980e:	f000 fd03 	bl	800a218 <acc_sweep_manager_acquire_adc_data>
 8009812:	6843      	ldr	r3, [r0, #4]
 8009814:	b30b      	cbz	r3, 800985a <acc_sensor_manager_acquire_adc_data+0xc6>
 8009816:	4543      	cmp	r3, r8
 8009818:	d13b      	bne.n	8009892 <acc_sensor_manager_acquire_adc_data+0xfe>
 800981a:	8843      	ldrh	r3, [r0, #2]
 800981c:	42bb      	cmp	r3, r7
 800981e:	d133      	bne.n	8009888 <acc_sensor_manager_acquire_adc_data+0xf4>
 8009820:	4b1e      	ldr	r3, [pc, #120]	; (800989c <acc_sensor_manager_acquire_adc_data+0x108>)
 8009822:	68c1      	ldr	r1, [r0, #12]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	7a06      	ldrb	r6, [r0, #8]
 8009828:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	3b48      	subs	r3, #72	; 0x48
 8009830:	4413      	add	r3, r2
 8009832:	7802      	ldrb	r2, [r0, #0]
 8009834:	7022      	strb	r2, [r4, #0]
 8009836:	7842      	ldrb	r2, [r0, #1]
 8009838:	7062      	strb	r2, [r4, #1]
 800983a:	f1ba 0f02 	cmp.w	sl, #2
 800983e:	7a42      	ldrb	r2, [r0, #9]
 8009840:	70e2      	strb	r2, [r4, #3]
 8009842:	70a6      	strb	r6, [r4, #2]
 8009844:	6459      	str	r1, [r3, #68]	; 0x44
 8009846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800984a:	d017      	beq.n	800987c <acc_sensor_manager_acquire_adc_data+0xe8>
 800984c:	f1ba 0f01 	cmp.w	sl, #1
 8009850:	d1c1      	bne.n	80097d6 <acc_sensor_manager_acquire_adc_data+0x42>
 8009852:	4628      	mov	r0, r5
 8009854:	f7ff ff38 	bl	80096c8 <acc_sensor_manager_hibernate_enter>
 8009858:	e7bd      	b.n	80097d6 <acc_sensor_manager_acquire_adc_data+0x42>
 800985a:	4911      	ldr	r1, [pc, #68]	; (80098a0 <acc_sensor_manager_acquire_adc_data+0x10c>)
 800985c:	4a11      	ldr	r2, [pc, #68]	; (80098a4 <acc_sensor_manager_acquire_adc_data+0x110>)
 800985e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009860:	4911      	ldr	r1, [pc, #68]	; (80098a8 <acc_sensor_manager_acquire_adc_data+0x114>)
 8009862:	4618      	mov	r0, r3
 8009864:	47a0      	blx	r4
 8009866:	e79f      	b.n	80097a8 <acc_sensor_manager_acquire_adc_data+0x14>
 8009868:	4628      	mov	r0, r5
 800986a:	f7ff fea1 	bl	80095b0 <acc_sensor_manager_power_on_and_start_sensor>
 800986e:	2800      	cmp	r0, #0
 8009870:	d1cb      	bne.n	800980a <acc_sensor_manager_acquire_adc_data+0x76>
 8009872:	e799      	b.n	80097a8 <acc_sensor_manager_acquire_adc_data+0x14>
 8009874:	4648      	mov	r0, r9
 8009876:	f7fe f821 	bl	80078bc <acc_rss_integration_sensor_device_hibernate_exit>
 800987a:	e7c6      	b.n	800980a <acc_sensor_manager_acquire_adc_data+0x76>
 800987c:	4648      	mov	r0, r9
 800987e:	f7fe f80f 	bl	80078a0 <acc_rss_integration_sensor_device_power_off>
 8009882:	2300      	movs	r3, #0
 8009884:	70eb      	strb	r3, [r5, #3]
 8009886:	e7a6      	b.n	80097d6 <acc_sensor_manager_acquire_adc_data+0x42>
 8009888:	4807      	ldr	r0, [pc, #28]	; (80098a8 <acc_sensor_manager_acquire_adc_data+0x114>)
 800988a:	f240 11c9 	movw	r1, #457	; 0x1c9
 800988e:	f7fd ff8f 	bl	80077b0 <acc_assert_fail>
 8009892:	4805      	ldr	r0, [pc, #20]	; (80098a8 <acc_sensor_manager_acquire_adc_data+0x114>)
 8009894:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8009898:	f7fd ff8a 	bl	80077b0 <acc_assert_fail>
 800989c:	20000798 	.word	0x20000798
 80098a0:	200007b0 	.word	0x200007b0
 80098a4:	08011c78 	.word	0x08011c78
 80098a8:	08011c24 	.word	0x08011c24
 80098ac:	20000794 	.word	0x20000794

080098b0 <acc_sensor_manager_prepare_radar_engine>:
 80098b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b4:	f100 0804 	add.w	r8, r0, #4
 80098b8:	4617      	mov	r7, r2
 80098ba:	4605      	mov	r5, r0
 80098bc:	2234      	movs	r2, #52	; 0x34
 80098be:	460c      	mov	r4, r1
 80098c0:	4640      	mov	r0, r8
 80098c2:	2100      	movs	r1, #0
 80098c4:	461e      	mov	r6, r3
 80098c6:	f002 fceb 	bl	800c2a0 <memset>
 80098ca:	4b1e      	ldr	r3, [pc, #120]	; (8009944 <acc_sensor_manager_prepare_radar_engine+0x94>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	463a      	mov	r2, r7
 80098d0:	4640      	mov	r0, r8
 80098d2:	b33b      	cbz	r3, 8009924 <acc_sensor_manager_prepare_radar_engine+0x74>
 80098d4:	f8d3 9000 	ldr.w	r9, [r3]
 80098d8:	f1b9 0f00 	cmp.w	r9, #0
 80098dc:	d022      	beq.n	8009924 <acc_sensor_manager_prepare_radar_engine+0x74>
 80098de:	4633      	mov	r3, r6
 80098e0:	4621      	mov	r1, r4
 80098e2:	47c8      	blx	r9
 80098e4:	4607      	mov	r7, r0
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7fe f968 	bl	8007bbc <acc_base_configuration_power_save_mode_get>
 80098ec:	b320      	cbz	r0, 8009938 <acc_sensor_manager_prepare_radar_engine+0x88>
 80098ee:	2804      	cmp	r0, #4
 80098f0:	d025      	beq.n	800993e <acc_sensor_manager_prepare_radar_engine+0x8e>
 80098f2:	2300      	movs	r3, #0
 80098f4:	702b      	strb	r3, [r5, #0]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7fe f9e2 	bl	8007cc0 <acc_base_configuration_repetition_mode_get>
 80098fc:	fab0 f280 	clz	r2, r0
 8009900:	0952      	lsrs	r2, r2, #5
 8009902:	706a      	strb	r2, [r5, #1]
 8009904:	4620      	mov	r0, r4
 8009906:	f7fe fb33 	bl	8007f70 <acc_base_configuration_asynchronous_measurement_get>
 800990a:	70a8      	strb	r0, [r5, #2]
 800990c:	4620      	mov	r0, r4
 800990e:	f7fe f8ef 	bl	8007af0 <acc_base_configuration_sensor_get>
 8009912:	4632      	mov	r2, r6
 8009914:	4601      	mov	r1, r0
 8009916:	231a      	movs	r3, #26
 8009918:	2005      	movs	r0, #5
 800991a:	f7fe f87f 	bl	8007a1c <acc_probes_execute_struct>
 800991e:	4638      	mov	r0, r7
 8009920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009924:	4633      	mov	r3, r6
 8009926:	4621      	mov	r1, r4
 8009928:	f000 fb90 	bl	800a04c <acc_sweep_manager_prepare>
 800992c:	4607      	mov	r7, r0
 800992e:	4620      	mov	r0, r4
 8009930:	f7fe f944 	bl	8007bbc <acc_base_configuration_power_save_mode_get>
 8009934:	2800      	cmp	r0, #0
 8009936:	d1da      	bne.n	80098ee <acc_sensor_manager_prepare_radar_engine+0x3e>
 8009938:	2302      	movs	r3, #2
 800993a:	702b      	strb	r3, [r5, #0]
 800993c:	e7db      	b.n	80098f6 <acc_sensor_manager_prepare_radar_engine+0x46>
 800993e:	2301      	movs	r3, #1
 8009940:	702b      	strb	r3, [r5, #0]
 8009942:	e7d8      	b.n	80098f6 <acc_sensor_manager_prepare_radar_engine+0x46>
 8009944:	20000794 	.word	0x20000794

08009948 <acc_sensor_manager_prepare_measurement>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	4680      	mov	r8, r0
 800994e:	b083      	sub	sp, #12
 8009950:	4608      	mov	r0, r1
 8009952:	460e      	mov	r6, r1
 8009954:	4617      	mov	r7, r2
 8009956:	469a      	mov	sl, r3
 8009958:	f7fe f8ca 	bl	8007af0 <acc_base_configuration_sensor_get>
 800995c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009a44 <acc_sensor_manager_prepare_measurement+0xfc>
 8009960:	4605      	mov	r5, r0
 8009962:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 8009966:	4630      	mov	r0, r6
 8009968:	f7fe faf6 	bl	8007f58 <acc_base_configuration_noise_deviation_override_get>
 800996c:	00e4      	lsls	r4, r4, #3
 800996e:	f8d9 1000 	ldr.w	r1, [r9]
 8009972:	4b32      	ldr	r3, [pc, #200]	; (8009a3c <acc_sensor_manager_prepare_measurement+0xf4>)
 8009974:	4a32      	ldr	r2, [pc, #200]	; (8009a40 <acc_sensor_manager_prepare_measurement+0xf8>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3c48      	subs	r4, #72	; 0x48
 800997a:	440c      	add	r4, r1
 800997c:	2100      	movs	r1, #0
 800997e:	4683      	mov	fp, r0
 8009980:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009984:	6462      	str	r2, [r4, #68]	; 0x44
 8009986:	b163      	cbz	r3, 80099a2 <acc_sensor_manager_prepare_measurement+0x5a>
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b153      	cbz	r3, 80099a2 <acc_sensor_manager_prepare_measurement+0x5a>
 800998c:	4652      	mov	r2, sl
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	4798      	blx	r3
 8009994:	4604      	mov	r4, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	d14b      	bne.n	8009a32 <acc_sensor_manager_prepare_measurement+0xea>
 800999a:	4620      	mov	r0, r4
 800999c:	b003      	add	sp, #12
 800999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80099a6:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 80099aa:	b17b      	cbz	r3, 80099cc <acc_sensor_manager_prepare_measurement+0x84>
 80099ac:	f1bb 0f00 	cmp.w	fp, #0
 80099b0:	d01b      	beq.n	80099ea <acc_sensor_manager_prepare_measurement+0xa2>
 80099b2:	f8a7 b014 	strh.w	fp, [r7, #20]
 80099b6:	463a      	mov	r2, r7
 80099b8:	4629      	mov	r1, r5
 80099ba:	2320      	movs	r3, #32
 80099bc:	200e      	movs	r0, #14
 80099be:	f7fe f82d 	bl	8007a1c <acc_probes_execute_struct>
 80099c2:	2401      	movs	r4, #1
 80099c4:	4620      	mov	r0, r4
 80099c6:	b003      	add	sp, #12
 80099c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099cc:	f108 0104 	add.w	r1, r8, #4
 80099d0:	4652      	mov	r2, sl
 80099d2:	4628      	mov	r0, r5
 80099d4:	9101      	str	r1, [sp, #4]
 80099d6:	f7ff fe09 	bl	80095ec <calibrate_sensor>
 80099da:	9901      	ldr	r1, [sp, #4]
 80099dc:	4604      	mov	r4, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	d1e4      	bne.n	80099ac <acc_sensor_manager_prepare_measurement+0x64>
 80099e2:	4608      	mov	r0, r1
 80099e4:	f000 fbcc 	bl	800a180 <acc_sweep_manager_release>
 80099e8:	e7d7      	b.n	800999a <acc_sensor_manager_prepare_measurement+0x52>
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7fe fa9c 	bl	8007f28 <acc_base_configuration_noise_level_normalization_get>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d0e0      	beq.n	80099b6 <acc_sensor_manager_prepare_measurement+0x6e>
 80099f4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80099f8:	4630      	mov	r0, r6
 80099fa:	f7fd ff4b 	bl	8007894 <acc_rss_integration_sensor_device_power_on>
 80099fe:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8009a02:	f8d9 1000 	ldr.w	r1, [r9]
 8009a06:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	3b48      	subs	r3, #72	; 0x48
 8009a0e:	f108 0804 	add.w	r8, r8, #4
 8009a12:	4419      	add	r1, r3
 8009a14:	4640      	mov	r0, r8
 8009a16:	f107 0314 	add.w	r3, r7, #20
 8009a1a:	f000 fbc7 	bl	800a1ac <acc_sweep_manager_measure_noise>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7fd ff3d 	bl	80078a0 <acc_rss_integration_sensor_device_power_off>
 8009a26:	2c00      	cmp	r4, #0
 8009a28:	d1c5      	bne.n	80099b6 <acc_sensor_manager_prepare_measurement+0x6e>
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	f000 fba8 	bl	800a180 <acc_sweep_manager_release>
 8009a30:	e7b3      	b.n	800999a <acc_sensor_manager_prepare_measurement+0x52>
 8009a32:	f1bb 0f00 	cmp.w	fp, #0
 8009a36:	d0be      	beq.n	80099b6 <acc_sensor_manager_prepare_measurement+0x6e>
 8009a38:	e7bb      	b.n	80099b2 <acc_sensor_manager_prepare_measurement+0x6a>
 8009a3a:	bf00      	nop
 8009a3c:	20000794 	.word	0x20000794
 8009a40:	ff800000 	.word	0xff800000
 8009a44:	20000798 	.word	0x20000798

08009a48 <acc_sensor_manager_start_measurement>:
 8009a48:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <acc_sensor_manager_start_measurement+0x70>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	4604      	mov	r4, r0
 8009a50:	b123      	cbz	r3, 8009a5c <acc_sensor_manager_start_measurement+0x14>
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	b113      	cbz	r3, 8009a5c <acc_sensor_manager_start_measurement+0x14>
 8009a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a5a:	4718      	bx	r3
 8009a5c:	7823      	ldrb	r3, [r4, #0]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d008      	beq.n	8009a74 <acc_sensor_manager_start_measurement+0x2c>
 8009a62:	4620      	mov	r0, r4
 8009a64:	f7ff fda4 	bl	80095b0 <acc_sensor_manager_power_on_and_start_sensor>
 8009a68:	b160      	cbz	r0, 8009a84 <acc_sensor_manager_start_measurement+0x3c>
 8009a6a:	78a3      	ldrb	r3, [r4, #2]
 8009a6c:	b12b      	cbz	r3, 8009a7a <acc_sensor_manager_start_measurement+0x32>
 8009a6e:	7823      	ldrb	r3, [r4, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d010      	beq.n	8009a96 <acc_sensor_manager_start_measurement+0x4e>
 8009a74:	2501      	movs	r5, #1
 8009a76:	4628      	mov	r0, r5
 8009a78:	bd70      	pop	{r4, r5, r6, pc}
 8009a7a:	1d25      	adds	r5, r4, #4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f000 fbc7 	bl	800a210 <acc_sweep_manager_measure>
 8009a82:	b910      	cbnz	r0, 8009a8a <acc_sensor_manager_start_measurement+0x42>
 8009a84:	2500      	movs	r5, #0
 8009a86:	4628      	mov	r0, r5
 8009a88:	bd70      	pop	{r4, r5, r6, pc}
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 fbb6 	bl	800a1fc <acc_sweep_manager_wait_for_data>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d1ec      	bne.n	8009a6e <acc_sensor_manager_start_measurement+0x26>
 8009a94:	e7f6      	b.n	8009a84 <acc_sensor_manager_start_measurement+0x3c>
 8009a96:	1d25      	adds	r5, r4, #4
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f000 fbaf 	bl	800a1fc <acc_sweep_manager_wait_for_data>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d0f0      	beq.n	8009a84 <acc_sensor_manager_start_measurement+0x3c>
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	f000 fbb4 	bl	800a210 <acc_sweep_manager_measure>
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d0ea      	beq.n	8009a84 <acc_sensor_manager_start_measurement+0x3c>
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f7ff fe0a 	bl	80096c8 <acc_sensor_manager_hibernate_enter>
 8009ab4:	e7df      	b.n	8009a76 <acc_sensor_manager_start_measurement+0x2e>
 8009ab6:	bf00      	nop
 8009ab8:	20000794 	.word	0x20000794

08009abc <acc_sensor_manager_stop_measurement>:
 8009abc:	78c3      	ldrb	r3, [r0, #3]
 8009abe:	b903      	cbnz	r3, 8009ac2 <acc_sensor_manager_stop_measurement+0x6>
 8009ac0:	4770      	bx	lr
 8009ac2:	b510      	push	{r4, lr}
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	6980      	ldr	r0, [r0, #24]
 8009ac8:	f7fd feea 	bl	80078a0 <acc_rss_integration_sensor_device_power_off>
 8009acc:	2300      	movs	r3, #0
 8009ace:	70e3      	strb	r3, [r4, #3]
 8009ad0:	bd10      	pop	{r4, pc}
 8009ad2:	bf00      	nop

08009ad4 <acc_sensor_manager_release_measurement>:
 8009ad4:	6983      	ldr	r3, [r0, #24]
 8009ad6:	b173      	cbz	r3, 8009af6 <acc_sensor_manager_release_measurement+0x22>
 8009ad8:	4a07      	ldr	r2, [pc, #28]	; (8009af8 <acc_sensor_manager_release_measurement+0x24>)
 8009ada:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009ade:	6812      	ldr	r2, [r2, #0]
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	3b48      	subs	r3, #72	; 0x48
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009aea:	b90a      	cbnz	r2, 8009af0 <acc_sensor_manager_release_measurement+0x1c>
 8009aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009af0:	3004      	adds	r0, #4
 8009af2:	f000 bb45 	b.w	800a180 <acc_sweep_manager_release>
 8009af6:	4770      	bx	lr
 8009af8:	20000798 	.word	0x20000798

08009afc <acc_sensor_manager_get_sensor_id>:
 8009afc:	6980      	ldr	r0, [r0, #24]
 8009afe:	4770      	bx	lr

08009b00 <acc_sensor_protocol_r2_prepare_load>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	4604      	mov	r4, r0
 8009b06:	4608      	mov	r0, r1
 8009b08:	4611      	mov	r1, r2
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	9b08      	ldr	r3, [sp, #32]
 8009b0e:	f7ff fcef 	bl	80094f0 <acc_sensor_r2_prepare_load_confmem>
 8009b12:	2300      	movs	r3, #0
 8009b14:	4620      	mov	r0, r4
 8009b16:	f10d 020e 	add.w	r2, sp, #14
 8009b1a:	212a      	movs	r1, #42	; 0x2a
 8009b1c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b20:	f000 fc88 	bl	800a434 <acc_sensor_reg_read>
 8009b24:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009b28:	065b      	lsls	r3, r3, #25
 8009b2a:	d436      	bmi.n	8009b9a <acc_sensor_protocol_r2_prepare_load+0x9a>
 8009b2c:	f10d 020e 	add.w	r2, sp, #14
 8009b30:	2500      	movs	r5, #0
 8009b32:	2111      	movs	r1, #17
 8009b34:	4620      	mov	r0, r4
 8009b36:	f8ad 500e 	strh.w	r5, [sp, #14]
 8009b3a:	f000 fc7b 	bl	800a434 <acc_sensor_reg_read>
 8009b3e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009b42:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 8009b46:	d00c      	beq.n	8009b62 <acc_sensor_protocol_r2_prepare_load+0x62>
 8009b48:	4b1b      	ldr	r3, [pc, #108]	; (8009bb8 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8009b4a:	4a1c      	ldr	r2, [pc, #112]	; (8009bbc <acc_sensor_protocol_r2_prepare_load+0xbc>)
 8009b4c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009b4e:	491c      	ldr	r1, [pc, #112]	; (8009bc0 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8009b50:	4623      	mov	r3, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b0      	blx	r6
 8009b56:	4620      	mov	r0, r4
 8009b58:	f001 fcaa 	bl	800b4b0 <acc_sensor_diagnostics_r2_sensor_status>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	b004      	add	sp, #16
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
 8009b62:	2501      	movs	r5, #1
 8009b64:	4629      	mov	r1, r5
 8009b66:	4620      	mov	r0, r4
 8009b68:	9500      	str	r5, [sp, #0]
 8009b6a:	2380      	movs	r3, #128	; 0x80
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	f000 fc87 	bl	800a480 <acc_sensor_reg_field_write>
 8009b72:	2380      	movs	r3, #128	; 0x80
 8009b74:	461a      	mov	r2, r3
 8009b76:	4620      	mov	r0, r4
 8009b78:	9600      	str	r6, [sp, #0]
 8009b7a:	2107      	movs	r1, #7
 8009b7c:	f000 fc80 	bl	800a480 <acc_sensor_reg_field_write>
 8009b80:	462a      	mov	r2, r5
 8009b82:	4620      	mov	r0, r4
 8009b84:	2105      	movs	r1, #5
 8009b86:	f000 fc6b 	bl	800a460 <acc_sensor_reg_write>
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	217a      	movs	r1, #122	; 0x7a
 8009b90:	f000 fc66 	bl	800a460 <acc_sensor_reg_write>
 8009b94:	4628      	mov	r0, r5
 8009b96:	b004      	add	sp, #16
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	f7fd ff21 	bl	80079e0 <acc_rss_integration_log_level>
 8009b9e:	b130      	cbz	r0, 8009bae <acc_sensor_protocol_r2_prepare_load+0xae>
 8009ba0:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8009ba2:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 8009ba4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009ba6:	4906      	ldr	r1, [pc, #24]	; (8009bc0 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8009ba8:	4623      	mov	r3, r4
 8009baa:	2001      	movs	r0, #1
 8009bac:	47a8      	blx	r5
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f001 fc7e 	bl	800b4b0 <acc_sensor_diagnostics_r2_sensor_status>
 8009bb4:	e7ba      	b.n	8009b2c <acc_sensor_protocol_r2_prepare_load+0x2c>
 8009bb6:	bf00      	nop
 8009bb8:	200007b0 	.word	0x200007b0
 8009bbc:	08011cd0 	.word	0x08011cd0
 8009bc0:	08011cbc 	.word	0x08011cbc
 8009bc4:	08011c90 	.word	0x08011c90

08009bc8 <acc_sensor_protocol_r2_run_program>:
 8009bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	4604      	mov	r4, r0
 8009bce:	460e      	mov	r6, r1
 8009bd0:	f7fd ff06 	bl	80079e0 <acc_rss_integration_log_level>
 8009bd4:	2803      	cmp	r0, #3
 8009bd6:	d907      	bls.n	8009be8 <acc_sensor_protocol_r2_run_program+0x20>
 8009bd8:	4b1e      	ldr	r3, [pc, #120]	; (8009c54 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009bda:	9600      	str	r6, [sp, #0]
 8009bdc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009bde:	4a1e      	ldr	r2, [pc, #120]	; (8009c58 <acc_sensor_protocol_r2_run_program+0x90>)
 8009be0:	491e      	ldr	r1, [pc, #120]	; (8009c5c <acc_sensor_protocol_r2_run_program+0x94>)
 8009be2:	4623      	mov	r3, r4
 8009be4:	2004      	movs	r0, #4
 8009be6:	47a8      	blx	r5
 8009be8:	f10d 020e 	add.w	r2, sp, #14
 8009bec:	2700      	movs	r7, #0
 8009bee:	2111      	movs	r1, #17
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f8ad 700e 	strh.w	r7, [sp, #14]
 8009bf6:	f000 fc1d 	bl	800a434 <acc_sensor_reg_read>
 8009bfa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009bfe:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 8009c02:	d11a      	bne.n	8009c3a <acc_sensor_protocol_r2_run_program+0x72>
 8009c04:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009c08:	d309      	bcc.n	8009c1e <acc_sensor_protocol_r2_run_program+0x56>
 8009c0a:	4b12      	ldr	r3, [pc, #72]	; (8009c54 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009c0c:	4a14      	ldr	r2, [pc, #80]	; (8009c60 <acc_sensor_protocol_r2_run_program+0x98>)
 8009c0e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009c10:	4912      	ldr	r1, [pc, #72]	; (8009c5c <acc_sensor_protocol_r2_run_program+0x94>)
 8009c12:	4628      	mov	r0, r5
 8009c14:	4633      	mov	r3, r6
 8009c16:	47a0      	blx	r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	b005      	add	sp, #20
 8009c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c1e:	462a      	mov	r2, r5
 8009c20:	4620      	mov	r0, r4
 8009c22:	2110      	movs	r1, #16
 8009c24:	f000 fc1c 	bl	800a460 <acc_sensor_reg_write>
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 8009c2e:	2110      	movs	r1, #16
 8009c30:	f000 fc16 	bl	800a460 <acc_sensor_reg_write>
 8009c34:	2001      	movs	r0, #1
 8009c36:	b005      	add	sp, #20
 8009c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3a:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009c3c:	4a09      	ldr	r2, [pc, #36]	; (8009c64 <acc_sensor_protocol_r2_run_program+0x9c>)
 8009c3e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009c40:	4906      	ldr	r1, [pc, #24]	; (8009c5c <acc_sensor_protocol_r2_run_program+0x94>)
 8009c42:	4623      	mov	r3, r4
 8009c44:	4638      	mov	r0, r7
 8009c46:	47a8      	blx	r5
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f001 fc31 	bl	800b4b0 <acc_sensor_diagnostics_r2_sensor_status>
 8009c4e:	4638      	mov	r0, r7
 8009c50:	b005      	add	sp, #20
 8009c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c54:	200007b0 	.word	0x200007b0
 8009c58:	08011d00 	.word	0x08011d00
 8009c5c:	08011cbc 	.word	0x08011cbc
 8009c60:	08011d54 	.word	0x08011d54
 8009c64:	08011d24 	.word	0x08011d24

08009c68 <acc_sensor_protocol_r2_is_sensor_running>:
 8009c68:	b500      	push	{lr}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f10d 0206 	add.w	r2, sp, #6
 8009c72:	2111      	movs	r1, #17
 8009c74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009c78:	f000 fbdc 	bl	800a434 <acc_sensor_reg_read>
 8009c7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8009c80:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8009c84:	b003      	add	sp, #12
 8009c86:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c8a:	bf00      	nop

08009c8c <acc_sensor_protocol_r2_ack_event>:
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	2300      	movs	r3, #0
 8009c92:	f10d 0206 	add.w	r2, sp, #6
 8009c96:	2138      	movs	r1, #56	; 0x38
 8009c98:	4605      	mov	r5, r0
 8009c9a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009c9e:	f000 fbc9 	bl	800a434 <acc_sensor_reg_read>
 8009ca2:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8009ca6:	b114      	cbz	r4, 8009cae <acc_sensor_protocol_r2_ack_event+0x22>
 8009ca8:	2001      	movs	r0, #1
 8009caa:	b002      	add	sp, #8
 8009cac:	bd70      	pop	{r4, r5, r6, pc}
 8009cae:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8009cb0:	4a06      	ldr	r2, [pc, #24]	; (8009ccc <acc_sensor_protocol_r2_ack_event+0x40>)
 8009cb2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009cb4:	4906      	ldr	r1, [pc, #24]	; (8009cd0 <acc_sensor_protocol_r2_ack_event+0x44>)
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	4620      	mov	r0, r4
 8009cba:	47b0      	blx	r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f001 fbf7 	bl	800b4b0 <acc_sensor_diagnostics_r2_sensor_status>
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	b002      	add	sp, #8
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	200007b0 	.word	0x200007b0
 8009ccc:	08011d70 	.word	0x08011d70
 8009cd0:	08011cbc 	.word	0x08011cbc

08009cd4 <acc_sensor_protocol_r2_get_event>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	b084      	sub	sp, #16
 8009cda:	b301      	cbz	r1, 8009d1e <acc_sensor_protocol_r2_get_event+0x4a>
 8009cdc:	f10d 020e 	add.w	r2, sp, #14
 8009ce0:	2128      	movs	r1, #40	; 0x28
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	f000 fba6 	bl	800a434 <acc_sensor_reg_read>
 8009ce8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009cec:	8062      	strh	r2, [r4, #2]
 8009cee:	b2d3      	uxtb	r3, r2
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	7023      	strb	r3, [r4, #0]
 8009cf4:	d026      	beq.n	8009d44 <acc_sensor_protocol_r2_get_event+0x70>
 8009cf6:	d80c      	bhi.n	8009d12 <acc_sensor_protocol_r2_get_event+0x3e>
 8009cf8:	4b22      	ldr	r3, [pc, #136]	; (8009d84 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009cfa:	4a23      	ldr	r2, [pc, #140]	; (8009d88 <acc_sensor_protocol_r2_get_event+0xb4>)
 8009cfc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009cfe:	4923      	ldr	r1, [pc, #140]	; (8009d8c <acc_sensor_protocol_r2_get_event+0xb8>)
 8009d00:	462b      	mov	r3, r5
 8009d02:	2000      	movs	r0, #0
 8009d04:	47a0      	blx	r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	f001 fbd2 	bl	800b4b0 <acc_sensor_diagnostics_r2_sensor_status>
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	b004      	add	sp, #16
 8009d10:	bd70      	pop	{r4, r5, r6, pc}
 8009d12:	1e9a      	subs	r2, r3, #2
 8009d14:	2a09      	cmp	r2, #9
 8009d16:	d80b      	bhi.n	8009d30 <acc_sensor_protocol_r2_get_event+0x5c>
 8009d18:	2001      	movs	r0, #1
 8009d1a:	b004      	add	sp, #16
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
 8009d1e:	4b19      	ldr	r3, [pc, #100]	; (8009d84 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d20:	4a1b      	ldr	r2, [pc, #108]	; (8009d90 <acc_sensor_protocol_r2_get_event+0xbc>)
 8009d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d24:	4919      	ldr	r1, [pc, #100]	; (8009d8c <acc_sensor_protocol_r2_get_event+0xb8>)
 8009d26:	4620      	mov	r0, r4
 8009d28:	4798      	blx	r3
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	b004      	add	sp, #16
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	4a14      	ldr	r2, [pc, #80]	; (8009d84 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d32:	9500      	str	r5, [sp, #0]
 8009d34:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009d36:	4915      	ldr	r1, [pc, #84]	; (8009d8c <acc_sensor_protocol_r2_get_event+0xb8>)
 8009d38:	4a16      	ldr	r2, [pc, #88]	; (8009d94 <acc_sensor_protocol_r2_get_event+0xc0>)
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	47b0      	blx	r6
 8009d3e:	2300      	movs	r3, #0
 8009d40:	7023      	strb	r3, [r4, #0]
 8009d42:	e7e0      	b.n	8009d06 <acc_sensor_protocol_r2_get_event+0x32>
 8009d44:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 8009d48:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8009d4c:	d203      	bcs.n	8009d56 <acc_sensor_protocol_r2_get_event+0x82>
 8009d4e:	4a12      	ldr	r2, [pc, #72]	; (8009d98 <acc_sensor_protocol_r2_get_event+0xc4>)
 8009d50:	408b      	lsls	r3, r1
 8009d52:	401a      	ands	r2, r3
 8009d54:	b96a      	cbnz	r2, 8009d72 <acc_sensor_protocol_r2_get_event+0x9e>
 8009d56:	4a0b      	ldr	r2, [pc, #44]	; (8009d84 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d58:	f242 1301 	movw	r3, #8449	; 0x2101
 8009d5c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009d5e:	8063      	strh	r3, [r4, #2]
 8009d60:	2320      	movs	r3, #32
 8009d62:	4a0e      	ldr	r2, [pc, #56]	; (8009d9c <acc_sensor_protocol_r2_get_event+0xc8>)
 8009d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d68:	4a0d      	ldr	r2, [pc, #52]	; (8009da0 <acc_sensor_protocol_r2_get_event+0xcc>)
 8009d6a:	4908      	ldr	r1, [pc, #32]	; (8009d8c <acc_sensor_protocol_r2_get_event+0xb8>)
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	47b0      	blx	r6
 8009d70:	e7c9      	b.n	8009d06 <acc_sensor_protocol_r2_get_event+0x32>
 8009d72:	1e4b      	subs	r3, r1, #1
 8009d74:	4a03      	ldr	r2, [pc, #12]	; (8009d84 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b20      	cmp	r3, #32
 8009d7a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009d7c:	d9f1      	bls.n	8009d62 <acc_sensor_protocol_r2_get_event+0x8e>
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <acc_sensor_protocol_r2_get_event+0xd0>)
 8009d80:	e7f2      	b.n	8009d68 <acc_sensor_protocol_r2_get_event+0x94>
 8009d82:	bf00      	nop
 8009d84:	200007b0 	.word	0x200007b0
 8009d88:	08011dc8 	.word	0x08011dc8
 8009d8c:	08011cbc 	.word	0x08011cbc
 8009d90:	08011db4 	.word	0x08011db4
 8009d94:	08011e0c 	.word	0x08011e0c
 8009d98:	00010016 	.word	0x00010016
 8009d9c:	080120c8 	.word	0x080120c8
 8009da0:	08011dec 	.word	0x08011dec
 8009da4:	08011da4 	.word	0x08011da4

08009da8 <acc_sensor_protocol_r2_wait_for_event>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	b087      	sub	sp, #28
 8009dae:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8009e64 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 8009db2:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e78 <acc_sensor_protocol_r2_wait_for_event+0xd0>
 8009db6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009e6c <acc_sensor_protocol_r2_wait_for_event+0xc4>
 8009dba:	9303      	str	r3, [sp, #12]
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	460e      	mov	r6, r1
 8009dc0:	4690      	mov	r8, r2
 8009dc2:	2500      	movs	r5, #0
 8009dc4:	e018      	b.n	8009df8 <acc_sensor_protocol_r2_wait_for_event+0x50>
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009dcc:	f000 fb32 	bl	800a434 <acc_sensor_reg_read>
 8009dd0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8009dd4:	065b      	lsls	r3, r3, #25
 8009dd6:	d434      	bmi.n	8009e42 <acc_sensor_protocol_r2_wait_for_event+0x9a>
 8009dd8:	f7fd fe02 	bl	80079e0 <acc_rss_integration_log_level>
 8009ddc:	4607      	mov	r7, r0
 8009dde:	4623      	mov	r3, r4
 8009de0:	4652      	mov	r2, sl
 8009de2:	4649      	mov	r1, r9
 8009de4:	2001      	movs	r0, #1
 8009de6:	b117      	cbz	r7, 8009dee <acc_sensor_protocol_r2_wait_for_event+0x46>
 8009de8:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 8009dec:	47b8      	blx	r7
 8009dee:	4545      	cmp	r5, r8
 8009df0:	f105 0301 	add.w	r3, r5, #1
 8009df4:	d018      	beq.n	8009e28 <acc_sensor_protocol_r2_wait_for_event+0x80>
 8009df6:	461d      	mov	r5, r3
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f7fd fd6e 	bl	80078dc <acc_rss_integration_wait_for_sensor_interrupt>
 8009e00:	f10d 0216 	add.w	r2, sp, #22
 8009e04:	212a      	movs	r1, #42	; 0x2a
 8009e06:	2300      	movs	r3, #0
 8009e08:	4607      	mov	r7, r0
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d1db      	bne.n	8009dc6 <acc_sensor_protocol_r2_wait_for_event+0x1e>
 8009e0e:	4b15      	ldr	r3, [pc, #84]	; (8009e64 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009e10:	4a15      	ldr	r2, [pc, #84]	; (8009e68 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 8009e12:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009e14:	4915      	ldr	r1, [pc, #84]	; (8009e6c <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009e16:	4623      	mov	r3, r4
 8009e18:	47a8      	blx	r5
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f001 fb48 	bl	800b4b0 <acc_sensor_diagnostics_r2_sensor_status>
 8009e20:	4638      	mov	r0, r7
 8009e22:	b007      	add	sp, #28
 8009e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e28:	4a0e      	ldr	r2, [pc, #56]	; (8009e64 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009e2a:	9400      	str	r4, [sp, #0]
 8009e2c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009e2e:	490f      	ldr	r1, [pc, #60]	; (8009e6c <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009e30:	4a0f      	ldr	r2, [pc, #60]	; (8009e70 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 8009e32:	462b      	mov	r3, r5
 8009e34:	2000      	movs	r0, #0
 8009e36:	47a0      	blx	r4
 8009e38:	2700      	movs	r7, #0
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	b007      	add	sp, #28
 8009e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e42:	9903      	ldr	r1, [sp, #12]
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7ff ff45 	bl	8009cd4 <acc_sensor_protocol_r2_get_event>
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d1e7      	bne.n	8009e20 <acc_sensor_protocol_r2_wait_for_event+0x78>
 8009e50:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009e52:	4a08      	ldr	r2, [pc, #32]	; (8009e74 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 8009e54:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009e56:	4905      	ldr	r1, [pc, #20]	; (8009e6c <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009e58:	4623      	mov	r3, r4
 8009e5a:	47a8      	blx	r5
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	b007      	add	sp, #28
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	200007b0 	.word	0x200007b0
 8009e68:	08011e3c 	.word	0x08011e3c
 8009e6c:	08011cbc 	.word	0x08011cbc
 8009e70:	08011e88 	.word	0x08011e88
 8009e74:	08011ec4 	.word	0x08011ec4
 8009e78:	08011e64 	.word	0x08011e64

08009e7c <acc_sensor_protocol_r2_wait_for_specific_event>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	4616      	mov	r6, r2
 8009e82:	461c      	mov	r4, r3
 8009e84:	2264      	movs	r2, #100	; 0x64
 8009e86:	ab03      	add	r3, sp, #12
 8009e88:	4605      	mov	r5, r0
 8009e8a:	f7ff ff8d 	bl	8009da8 <acc_sensor_protocol_r2_wait_for_event>
 8009e8e:	b168      	cbz	r0, 8009eac <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8009e90:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009e94:	42b3      	cmp	r3, r6
 8009e96:	d00b      	beq.n	8009eb0 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 8009e98:	e9cd 3600 	strd	r3, r6, [sp]
 8009e9c:	4a08      	ldr	r2, [pc, #32]	; (8009ec0 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8009e9e:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8009ea0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009ea2:	4909      	ldr	r1, [pc, #36]	; (8009ec8 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	47a0      	blx	r4
 8009eaa:	2000      	movs	r0, #0
 8009eac:	b004      	add	sp, #16
 8009eae:	bd70      	pop	{r4, r5, r6, pc}
 8009eb0:	2c00      	cmp	r4, #0
 8009eb2:	d0fb      	beq.n	8009eac <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f7ff fee9 	bl	8009c8c <acc_sensor_protocol_r2_ack_event>
 8009eba:	b004      	add	sp, #16
 8009ebc:	bd70      	pop	{r4, r5, r6, pc}
 8009ebe:	bf00      	nop
 8009ec0:	200007b0 	.word	0x200007b0
 8009ec4:	0801214c 	.word	0x0801214c
 8009ec8:	08011cbc 	.word	0x08011cbc
 8009ecc:	08011eec 	.word	0x08011eec

08009ed0 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	220b      	movs	r2, #11
 8009ed4:	f7ff bfd2 	b.w	8009e7c <acc_sensor_protocol_r2_wait_for_specific_event>

08009ed8 <acc_sensor_protocol_r2_wait_for_radar_data>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	4616      	mov	r6, r2
 8009ede:	ab03      	add	r3, sp, #12
 8009ee0:	2264      	movs	r2, #100	; 0x64
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	f7ff ff60 	bl	8009da8 <acc_sensor_protocol_r2_wait_for_event>
 8009ee8:	4604      	mov	r4, r0
 8009eea:	b180      	cbz	r0, 8009f0e <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8009eec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009ef0:	2b06      	cmp	r3, #6
 8009ef2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009ef6:	d10d      	bne.n	8009f14 <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8009ef8:	0519      	lsls	r1, r3, #20
 8009efa:	d50b      	bpl.n	8009f14 <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8009efc:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 8009f00:	d114      	bne.n	8009f2c <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 8009f02:	b106      	cbz	r6, 8009f06 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8009f04:	7032      	strb	r2, [r6, #0]
 8009f06:	05da      	lsls	r2, r3, #23
 8009f08:	d425      	bmi.n	8009f56 <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 8009f0a:	059b      	lsls	r3, r3, #22
 8009f0c:	d418      	bmi.n	8009f40 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8009f0e:	4620      	mov	r0, r4
 8009f10:	b004      	add	sp, #16
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
 8009f14:	4a16      	ldr	r2, [pc, #88]	; (8009f70 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009f1a:	4916      	ldr	r1, [pc, #88]	; (8009f74 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8009f1c:	4a16      	ldr	r2, [pc, #88]	; (8009f78 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 8009f1e:	462b      	mov	r3, r5
 8009f20:	2000      	movs	r0, #0
 8009f22:	47a0      	blx	r4
 8009f24:	2400      	movs	r4, #0
 8009f26:	4620      	mov	r0, r4
 8009f28:	b004      	add	sp, #16
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	200f      	movs	r0, #15
 8009f30:	f7fd fd8c 	bl	8007a4c <acc_probes_execute_primitive_probe>
 8009f34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009f38:	4622      	mov	r2, r4
 8009f3a:	2e00      	cmp	r6, #0
 8009f3c:	d1e2      	bne.n	8009f04 <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 8009f3e:	e7e2      	b.n	8009f06 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8009f40:	f7fd fd4e 	bl	80079e0 <acc_rss_integration_log_level>
 8009f44:	2803      	cmp	r0, #3
 8009f46:	d9e2      	bls.n	8009f0e <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8009f48:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8009f4a:	4a0c      	ldr	r2, [pc, #48]	; (8009f7c <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4e:	4909      	ldr	r1, [pc, #36]	; (8009f74 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8009f50:	2004      	movs	r0, #4
 8009f52:	4798      	blx	r3
 8009f54:	e7db      	b.n	8009f0e <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8009f56:	f7fd fd43 	bl	80079e0 <acc_rss_integration_log_level>
 8009f5a:	2803      	cmp	r0, #3
 8009f5c:	d905      	bls.n	8009f6a <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 8009f5e:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8009f60:	4a07      	ldr	r2, [pc, #28]	; (8009f80 <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 8009f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f64:	4903      	ldr	r1, [pc, #12]	; (8009f74 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8009f66:	2004      	movs	r0, #4
 8009f68:	4798      	blx	r3
 8009f6a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009f6e:	e7cc      	b.n	8009f0a <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 8009f70:	200007b0 	.word	0x200007b0
 8009f74:	08011cbc 	.word	0x08011cbc
 8009f78:	08011f18 	.word	0x08011f18
 8009f7c:	08011f64 	.word	0x08011f64
 8009f80:	08011f48 	.word	0x08011f48

08009f84 <acc_sensor_protocol_r2_wait_for_sync_start>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	ab03      	add	r3, sp, #12
 8009f8a:	2264      	movs	r2, #100	; 0x64
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	f7ff ff0b 	bl	8009da8 <acc_sensor_protocol_r2_wait_for_event>
 8009f92:	4604      	mov	r4, r0
 8009f94:	b178      	cbz	r0, 8009fb6 <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 8009f96:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009f9a:	2b06      	cmp	r3, #6
 8009f9c:	d008      	beq.n	8009fb0 <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 8009f9e:	4a0a      	ldr	r2, [pc, #40]	; (8009fc8 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009fa4:	4909      	ldr	r1, [pc, #36]	; (8009fcc <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8009fa6:	4a0a      	ldr	r2, [pc, #40]	; (8009fd0 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 8009fa8:	462b      	mov	r3, r5
 8009faa:	2000      	movs	r0, #0
 8009fac:	47a0      	blx	r4
 8009fae:	2400      	movs	r4, #0
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	b004      	add	sp, #16
 8009fb4:	bd70      	pop	{r4, r5, r6, pc}
 8009fb6:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8009fb8:	4a06      	ldr	r2, [pc, #24]	; (8009fd4 <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 8009fba:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009fbc:	4903      	ldr	r1, [pc, #12]	; (8009fcc <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8009fbe:	462b      	mov	r3, r5
 8009fc0:	47b0      	blx	r6
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	b004      	add	sp, #16
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	200007b0 	.word	0x200007b0
 8009fcc:	08011cbc 	.word	0x08011cbc
 8009fd0:	08011fb0 	.word	0x08011fb0
 8009fd4:	08011f7c 	.word	0x08011f7c

08009fd8 <acc_sensor_protocol_r2_transfer_data>:
 8009fd8:	b530      	push	{r4, r5, lr}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	4613      	mov	r3, r2
 8009fde:	9201      	str	r2, [sp, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	f7ff fadc 	bl	80095a0 <acc_sensor_r2_buffer_processed_read>
 8009fe8:	9b01      	ldr	r3, [sp, #4]
 8009fea:	4604      	mov	r4, r0
 8009fec:	4602      	mov	r2, r0
 8009fee:	4629      	mov	r1, r5
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f7fd fcfb 	bl	80079ec <acc_probes_execute_uint16>
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	b003      	add	sp, #12
 8009ffa:	bd30      	pop	{r4, r5, pc}

08009ffc <acc_sensor_protocol_r2_check_asic_id>:
 8009ffc:	b530      	push	{r4, r5, lr}
 8009ffe:	2400      	movs	r4, #0
 800a000:	b085      	sub	sp, #20
 800a002:	f10d 020e 	add.w	r2, sp, #14
 800a006:	460d      	mov	r5, r1
 800a008:	4621      	mov	r1, r4
 800a00a:	f8ad 400e 	strh.w	r4, [sp, #14]
 800a00e:	f000 fa11 	bl	800a434 <acc_sensor_reg_read>
 800a012:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a016:	f241 1312 	movw	r3, #4370	; 0x1112
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d00a      	beq.n	800a034 <acc_sensor_protocol_r2_check_asic_id+0x38>
 800a01e:	b965      	cbnz	r5, 800a03a <acc_sensor_protocol_r2_check_asic_id+0x3e>
 800a020:	4907      	ldr	r1, [pc, #28]	; (800a040 <acc_sensor_protocol_r2_check_asic_id+0x44>)
 800a022:	9200      	str	r2, [sp, #0]
 800a024:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800a026:	4a07      	ldr	r2, [pc, #28]	; (800a044 <acc_sensor_protocol_r2_check_asic_id+0x48>)
 800a028:	4907      	ldr	r1, [pc, #28]	; (800a048 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 800a02a:	4628      	mov	r0, r5
 800a02c:	47a0      	blx	r4
 800a02e:	4628      	mov	r0, r5
 800a030:	b005      	add	sp, #20
 800a032:	bd30      	pop	{r4, r5, pc}
 800a034:	2001      	movs	r0, #1
 800a036:	b005      	add	sp, #20
 800a038:	bd30      	pop	{r4, r5, pc}
 800a03a:	4620      	mov	r0, r4
 800a03c:	b005      	add	sp, #20
 800a03e:	bd30      	pop	{r4, r5, pc}
 800a040:	200007b0 	.word	0x200007b0
 800a044:	08011fec 	.word	0x08011fec
 800a048:	08011cbc 	.word	0x08011cbc

0800a04c <acc_sweep_manager_prepare>:
 800a04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a050:	4680      	mov	r8, r0
 800a052:	b095      	sub	sp, #84	; 0x54
 800a054:	4608      	mov	r0, r1
 800a056:	460c      	mov	r4, r1
 800a058:	4617      	mov	r7, r2
 800a05a:	4699      	mov	r9, r3
 800a05c:	f7fd fd48 	bl	8007af0 <acc_base_configuration_sensor_get>
 800a060:	4601      	mov	r1, r0
 800a062:	4620      	mov	r0, r4
 800a064:	9101      	str	r1, [sp, #4]
 800a066:	f7fd fe7d 	bl	8007d64 <acc_base_configuration_wg_duration_get>
 800a06a:	4603      	mov	r3, r0
 800a06c:	4620      	mov	r0, r4
 800a06e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a072:	f7fd fe5f 	bl	8007d34 <acc_base_configuration_integrator_get>
 800a076:	4603      	mov	r3, r0
 800a078:	4620      	mov	r0, r4
 800a07a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a07e:	f7fd fe89 	bl	8007d94 <acc_base_configuration_integrator_ramp_up_get>
 800a082:	4603      	mov	r3, r0
 800a084:	4620      	mov	r0, r4
 800a086:	f8ad 3010 	strh.w	r3, [sp, #16]
 800a08a:	f7fd fdc5 	bl	8007c18 <acc_base_configuration_decrease_tx_emission_get>
 800a08e:	4605      	mov	r5, r0
 800a090:	2304      	movs	r3, #4
 800a092:	9901      	ldr	r1, [sp, #4]
 800a094:	f8ad 5012 	strh.w	r5, [sp, #18]
 800a098:	aa03      	add	r2, sp, #12
 800a09a:	2012      	movs	r0, #18
 800a09c:	f108 0514 	add.w	r5, r8, #20
 800a0a0:	f7fd fca4 	bl	80079ec <acc_probes_execute_uint16>
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f002 f8f9 	bl	800c2a0 <memset>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4798      	blx	r3
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d04e      	beq.n	800a15a <acc_sweep_manager_prepare+0x10e>
 800a0bc:	2220      	movs	r2, #32
 800a0be:	2100      	movs	r1, #0
 800a0c0:	a80c      	add	r0, sp, #48	; 0x30
 800a0c2:	f002 f8ed 	bl	800c2a0 <memset>
 800a0c6:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	6806      	ldr	r6, [r0, #0]
 800a0ce:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800a0d2:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800a0d6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800a0da:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 800a0de:	aa0c      	add	r2, sp, #48	; 0x30
 800a0e0:	ab05      	add	r3, sp, #20
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	47b0      	blx	r6
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d039      	beq.n	800a162 <acc_sweep_manager_prepare+0x116>
 800a0ee:	b137      	cbz	r7, 800a0fe <acc_sweep_manager_prepare+0xb2>
 800a0f0:	ad0c      	add	r5, sp, #48	; 0x30
 800a0f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0f4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a0f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a0fa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800a0fe:	f1b9 0f00 	cmp.w	r9, #0
 800a102:	d011      	beq.n	800a128 <acc_sweep_manager_prepare+0xdc>
 800a104:	ad05      	add	r5, sp, #20
 800a106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a108:	f8c9 0000 	str.w	r0, [r9]
 800a10c:	f8c9 1004 	str.w	r1, [r9, #4]
 800a110:	cd03      	ldmia	r5!, {r0, r1}
 800a112:	882d      	ldrh	r5, [r5, #0]
 800a114:	f8c9 2008 	str.w	r2, [r9, #8]
 800a118:	f8c9 300c 	str.w	r3, [r9, #12]
 800a11c:	f8a9 5018 	strh.w	r5, [r9, #24]
 800a120:	f8c9 0010 	str.w	r0, [r9, #16]
 800a124:	f8c9 1014 	str.w	r1, [r9, #20]
 800a128:	4620      	mov	r0, r4
 800a12a:	f7fd fdc9 	bl	8007cc0 <acc_base_configuration_repetition_mode_get>
 800a12e:	2801      	cmp	r0, #1
 800a130:	d020      	beq.n	800a174 <acc_sweep_manager_prepare+0x128>
 800a132:	4620      	mov	r0, r4
 800a134:	f7fd fdce 	bl	8007cd4 <acc_base_configuration_update_rate_get>
 800a138:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a17c <acc_sweep_manager_prepare+0x130>
 800a13c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a140:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a148:	ee17 3a90 	vmov	r3, s15
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8c8 3000 	str.w	r3, [r8]
 800a152:	f8c8 2008 	str.w	r2, [r8, #8]
 800a156:	f8a8 2006 	strh.w	r2, [r8, #6]
 800a15a:	4630      	mov	r0, r6
 800a15c:	b015      	add	sp, #84	; 0x54
 800a15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a162:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800a166:	4628      	mov	r0, r5
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	4798      	blx	r3
 800a16c:	4630      	mov	r0, r6
 800a16e:	b015      	add	sp, #84	; 0x54
 800a170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a174:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a178:	e7e8      	b.n	800a14c <acc_sweep_manager_prepare+0x100>
 800a17a:	bf00      	nop
 800a17c:	44fa0000 	.word	0x44fa0000

0800a180 <acc_sweep_manager_release>:
 800a180:	b120      	cbz	r0, 800a18c <acc_sweep_manager_release+0xc>
 800a182:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a184:	b113      	cbz	r3, 800a18c <acc_sweep_manager_release+0xc>
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	3014      	adds	r0, #20
 800a18a:	4718      	bx	r3
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop

0800a190 <acc_sweep_manager_is_sensor_connected>:
 800a190:	3014      	adds	r0, #20
 800a192:	f001 b8e7 	b.w	800b364 <acc_radar_engine_check_asic_id>
 800a196:	bf00      	nop

0800a198 <acc_sweep_manager_calibrate>:
 800a198:	b410      	push	{r4}
 800a19a:	4604      	mov	r4, r0
 800a19c:	3014      	adds	r0, #20
 800a19e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800a1a0:	68a4      	ldr	r4, [r4, #8]
 800a1a2:	46a4      	mov	ip, r4
 800a1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1a8:	4760      	bx	ip
 800a1aa:	bf00      	nop

0800a1ac <acc_sweep_manager_measure_noise>:
 800a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 800a1b6:	686f      	ldr	r7, [r5, #4]
 800a1b8:	461e      	mov	r6, r3
 800a1ba:	4615      	mov	r5, r2
 800a1bc:	47b8      	blx	r7
 800a1be:	b140      	cbz	r0, 800a1d2 <acc_sweep_manager_measure_noise+0x26>
 800a1c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f104 0014 	add.w	r0, r4, #20
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d0:	4718      	bx	r3
 800a1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d6:	bf00      	nop

0800a1d8 <acc_sweep_manager_start>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	4604      	mov	r4, r0
 800a1dc:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	4615      	mov	r5, r2
 800a1e4:	4798      	blx	r3
 800a1e6:	b138      	cbz	r0, 800a1f8 <acc_sweep_manager_start+0x20>
 800a1e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	f104 0014 	add.w	r0, r4, #20
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1f6:	4718      	bx	r3
 800a1f8:	bd70      	pop	{r4, r5, r6, pc}
 800a1fa:	bf00      	nop

0800a1fc <acc_sweep_manager_wait_for_data>:
 800a1fc:	f850 1b14 	ldr.w	r1, [r0], #20
 800a200:	2200      	movs	r2, #0
 800a202:	f001 b8b3 	b.w	800b36c <acc_radar_engine_wait_for_radar_data>
 800a206:	bf00      	nop

0800a208 <acc_sweep_manager_wait_for_hibernate_ready>:
 800a208:	f850 1b14 	ldr.w	r1, [r0], #20
 800a20c:	f001 b8b6 	b.w	800b37c <acc_radar_engine_wait_for_hibernate_ready>

0800a210 <acc_sweep_manager_measure>:
 800a210:	3014      	adds	r0, #20
 800a212:	f001 b8af 	b.w	800b374 <acc_radar_engine_measure>
 800a216:	bf00      	nop

0800a218 <acc_sweep_manager_acquire_adc_data>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	2300      	movs	r3, #0
 800a21c:	b084      	sub	sp, #16
 800a21e:	4604      	mov	r4, r0
 800a220:	6043      	str	r3, [r0, #4]
 800a222:	6083      	str	r3, [r0, #8]
 800a224:	60c3      	str	r3, [r0, #12]
 800a226:	6103      	str	r3, [r0, #16]
 800a228:	466a      	mov	r2, sp
 800a22a:	3014      	adds	r0, #20
 800a22c:	f001 f8aa 	bl	800b384 <acc_radar_engine_acquire_adc_data>
 800a230:	9b02      	ldr	r3, [sp, #8]
 800a232:	f8bd 6000 	ldrh.w	r6, [sp]
 800a236:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800a23a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800a23e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a242:	60a0      	str	r0, [r4, #8]
 800a244:	1d20      	adds	r0, r4, #4
 800a246:	80e6      	strh	r6, [r4, #6]
 800a248:	80a5      	strh	r5, [r4, #4]
 800a24a:	7321      	strb	r1, [r4, #12]
 800a24c:	7362      	strb	r2, [r4, #13]
 800a24e:	6123      	str	r3, [r4, #16]
 800a250:	b004      	add	sp, #16
 800a252:	bd70      	pop	{r4, r5, r6, pc}

0800a254 <acc_alg_cca_calculate>:
 800a254:	2901      	cmp	r1, #1
 800a256:	b538      	push	{r3, r4, r5, lr}
 800a258:	d922      	bls.n	800a2a0 <acc_alg_cca_calculate+0x4c>
 800a25a:	1e8d      	subs	r5, r1, #2
 800a25c:	1c83      	adds	r3, r0, #2
 800a25e:	b2ad      	uxth	r5, r5
 800a260:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800a264:	2400      	movs	r4, #0
 800a266:	4602      	mov	r2, r0
 800a268:	3002      	adds	r0, #2
 800a26a:	8853      	ldrh	r3, [r2, #2]
 800a26c:	8812      	ldrh	r2, [r2, #0]
 800a26e:	1a9b      	subs	r3, r3, r2
 800a270:	2b00      	cmp	r3, #0
 800a272:	bfb8      	it	lt
 800a274:	425b      	neglt	r3, r3
 800a276:	4285      	cmp	r5, r0
 800a278:	441c      	add	r4, r3
 800a27a:	d1f4      	bne.n	800a266 <acc_alg_cca_calculate+0x12>
 800a27c:	ee07 4a90 	vmov	s15, r4
 800a280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a284:	3901      	subs	r1, #1
 800a286:	ee07 1a10 	vmov	s14, r1
 800a28a:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800a28e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a292:	f004 fe79 	bl	800ef88 <log10f>
 800a296:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800a29a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	eddf 7a01 	vldr	s15, [pc, #4]	; 800a2a8 <acc_alg_cca_calculate+0x54>
 800a2a4:	e7ee      	b.n	800a284 <acc_alg_cca_calculate+0x30>
 800a2a6:	bf00      	nop
 800a2a8:	00000000 	.word	0x00000000

0800a2ac <acc_element_connect>:
 800a2ac:	6001      	str	r1, [r0, #0]
 800a2ae:	4770      	bx	lr

0800a2b0 <event>:
 800a2b0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a2b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a2b4:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 800a2b8:	6811      	ldr	r1, [r2, #0]
 800a2ba:	b570      	push	{r4, r5, r6, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 800a2c2:	4798      	blx	r3
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	7028      	strb	r0, [r5, #0]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	4710      	bx	r2
 800a2d2:	bf00      	nop

0800a2d4 <reset>:
 800a2d4:	6800      	ldr	r0, [r0, #0]
 800a2d6:	68c3      	ldr	r3, [r0, #12]
 800a2d8:	4718      	bx	r3
 800a2da:	bf00      	nop

0800a2dc <validate>:
 800a2dc:	6983      	ldr	r3, [r0, #24]
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	b113      	cbz	r3, 800a2ea <validate+0xe>
 800a2e4:	f7fd fb7c 	bl	80079e0 <acc_rss_integration_log_level>
 800a2e8:	b978      	cbnz	r0, 800a30a <validate+0x2e>
 800a2ea:	69e3      	ldr	r3, [r4, #28]
 800a2ec:	b143      	cbz	r3, 800a300 <validate+0x24>
 800a2ee:	f7fd fb77 	bl	80079e0 <acc_rss_integration_log_level>
 800a2f2:	b128      	cbz	r0, 800a300 <validate+0x24>
 800a2f4:	4b08      	ldr	r3, [pc, #32]	; (800a318 <validate+0x3c>)
 800a2f6:	4a09      	ldr	r2, [pc, #36]	; (800a31c <validate+0x40>)
 800a2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fa:	4909      	ldr	r1, [pc, #36]	; (800a320 <validate+0x44>)
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	4798      	blx	r3
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a306:	6883      	ldr	r3, [r0, #8]
 800a308:	4718      	bx	r3
 800a30a:	4b03      	ldr	r3, [pc, #12]	; (800a318 <validate+0x3c>)
 800a30c:	4a05      	ldr	r2, [pc, #20]	; (800a324 <validate+0x48>)
 800a30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a310:	4903      	ldr	r1, [pc, #12]	; (800a320 <validate+0x44>)
 800a312:	2001      	movs	r0, #1
 800a314:	4798      	blx	r3
 800a316:	e7e8      	b.n	800a2ea <validate+0xe>
 800a318:	200007b0 	.word	0x200007b0
 800a31c:	080121ac 	.word	0x080121ac
 800a320:	08012190 	.word	0x08012190
 800a324:	0801217c 	.word	0x0801217c

0800a328 <saturation_check_i16>:
 800a328:	f001 bb32 	b.w	800b990 <acc_alg_basic_saturation_check_i16>

0800a32c <saturation_check_u16>:
 800a32c:	f001 bafc 	b.w	800b928 <acc_alg_basic_saturation_check_u16>

0800a330 <acc_element_saturation_check_init>:
 800a330:	2903      	cmp	r1, #3
 800a332:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 800a336:	d00e      	beq.n	800a356 <acc_element_saturation_check_init+0x26>
 800a338:	2905      	cmp	r1, #5
 800a33a:	d016      	beq.n	800a36a <acc_element_saturation_check_init+0x3a>
 800a33c:	2902      	cmp	r1, #2
 800a33e:	d014      	beq.n	800a36a <acc_element_saturation_check_init+0x3a>
 800a340:	b510      	push	{r4, lr}
 800a342:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <acc_element_saturation_check_init+0x40>)
 800a344:	4a0b      	ldr	r2, [pc, #44]	; (800a374 <acc_element_saturation_check_init+0x44>)
 800a346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a348:	490b      	ldr	r1, [pc, #44]	; (800a378 <acc_element_saturation_check_init+0x48>)
 800a34a:	2400      	movs	r4, #0
 800a34c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800a34e:	4620      	mov	r0, r4
 800a350:	4798      	blx	r3
 800a352:	4620      	mov	r0, r4
 800a354:	bd10      	pop	{r4, pc}
 800a356:	4b09      	ldr	r3, [pc, #36]	; (800a37c <acc_element_saturation_check_init+0x4c>)
 800a358:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a35a:	4909      	ldr	r1, [pc, #36]	; (800a380 <acc_element_saturation_check_init+0x50>)
 800a35c:	4a09      	ldr	r2, [pc, #36]	; (800a384 <acc_element_saturation_check_init+0x54>)
 800a35e:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <acc_element_saturation_check_init+0x58>)
 800a360:	60c3      	str	r3, [r0, #12]
 800a362:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a366:	2001      	movs	r0, #1
 800a368:	4770      	bx	lr
 800a36a:	4b08      	ldr	r3, [pc, #32]	; (800a38c <acc_element_saturation_check_init+0x5c>)
 800a36c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a36e:	e7f4      	b.n	800a35a <acc_element_saturation_check_init+0x2a>
 800a370:	200007b0 	.word	0x200007b0
 800a374:	080121bc 	.word	0x080121bc
 800a378:	08012190 	.word	0x08012190
 800a37c:	0800a329 	.word	0x0800a329
 800a380:	0800a2b1 	.word	0x0800a2b1
 800a384:	0800a2dd 	.word	0x0800a2dd
 800a388:	0800a2d5 	.word	0x0800a2d5
 800a38c:	0800a32d 	.word	0x0800a32d

0800a390 <consume>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4604      	mov	r4, r0
 800a394:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 800a398:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a39a:	6900      	ldr	r0, [r0, #16]
 800a39c:	4798      	blx	r3
 800a39e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	611a      	str	r2, [r3, #16]
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	bf00      	nop

0800a3a8 <reset>:
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop

0800a3ac <validate>:
 800a3ac:	6983      	ldr	r3, [r0, #24]
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	b113      	cbz	r3, 800a3ba <validate+0xe>
 800a3b4:	f7fd fb14 	bl	80079e0 <acc_rss_integration_log_level>
 800a3b8:	b9c8      	cbnz	r0, 800a3ee <validate+0x42>
 800a3ba:	69e3      	ldr	r3, [r4, #28]
 800a3bc:	b113      	cbz	r3, 800a3c4 <validate+0x18>
 800a3be:	f7fd fb0f 	bl	80079e0 <acc_rss_integration_log_level>
 800a3c2:	b948      	cbnz	r0, 800a3d8 <validate+0x2c>
 800a3c4:	6963      	ldr	r3, [r4, #20]
 800a3c6:	b183      	cbz	r3, 800a3ea <validate+0x3e>
 800a3c8:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <validate+0x50>)
 800a3ca:	4a0d      	ldr	r2, [pc, #52]	; (800a400 <validate+0x54>)
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	490d      	ldr	r1, [pc, #52]	; (800a404 <validate+0x58>)
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	4798      	blx	r3
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	bd10      	pop	{r4, pc}
 800a3d8:	4b08      	ldr	r3, [pc, #32]	; (800a3fc <validate+0x50>)
 800a3da:	4a0b      	ldr	r2, [pc, #44]	; (800a408 <validate+0x5c>)
 800a3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3de:	4909      	ldr	r1, [pc, #36]	; (800a404 <validate+0x58>)
 800a3e0:	2001      	movs	r0, #1
 800a3e2:	4798      	blx	r3
 800a3e4:	6963      	ldr	r3, [r4, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1ee      	bne.n	800a3c8 <validate+0x1c>
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	bd10      	pop	{r4, pc}
 800a3ee:	4b03      	ldr	r3, [pc, #12]	; (800a3fc <validate+0x50>)
 800a3f0:	4a06      	ldr	r2, [pc, #24]	; (800a40c <validate+0x60>)
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f4:	4903      	ldr	r1, [pc, #12]	; (800a404 <validate+0x58>)
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	4798      	blx	r3
 800a3fa:	e7de      	b.n	800a3ba <validate+0xe>
 800a3fc:	200007b0 	.word	0x200007b0
 800a400:	080121e8 	.word	0x080121e8
 800a404:	080121d0 	.word	0x080121d0
 800a408:	080121ac 	.word	0x080121ac
 800a40c:	0801217c 	.word	0x0801217c

0800a410 <acc_element_sink_callback_init>:
 800a410:	b410      	push	{r4}
 800a412:	4a05      	ldr	r2, [pc, #20]	; (800a428 <acc_element_sink_callback_init+0x18>)
 800a414:	4c05      	ldr	r4, [pc, #20]	; (800a42c <acc_element_sink_callback_init+0x1c>)
 800a416:	4b06      	ldr	r3, [pc, #24]	; (800a430 <acc_element_sink_callback_init+0x20>)
 800a418:	6401      	str	r1, [r0, #64]	; 0x40
 800a41a:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800a41e:	60c3      	str	r3, [r0, #12]
 800a420:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	0800a3ad 	.word	0x0800a3ad
 800a42c:	0800a391 	.word	0x0800a391
 800a430:	0800a3a9 	.word	0x0800a3a9

0800a434 <acc_sensor_reg_read>:
 800a434:	b530      	push	{r4, r5, lr}
 800a436:	b083      	sub	sp, #12
 800a438:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 800a43c:	4614      	mov	r4, r2
 800a43e:	2500      	movs	r5, #0
 800a440:	f8ad 1000 	strh.w	r1, [sp]
 800a444:	2301      	movs	r3, #1
 800a446:	2203      	movs	r2, #3
 800a448:	4669      	mov	r1, sp
 800a44a:	f8ad 5002 	strh.w	r5, [sp, #2]
 800a44e:	f8ad 5004 	strh.w	r5, [sp, #4]
 800a452:	f7fd fa49 	bl	80078e8 <acc_rss_integration_sensor_device_transfer>
 800a456:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a45a:	8023      	strh	r3, [r4, #0]
 800a45c:	b003      	add	sp, #12
 800a45e:	bd30      	pop	{r4, r5, pc}

0800a460 <acc_sensor_reg_write>:
 800a460:	b530      	push	{r4, r5, lr}
 800a462:	b083      	sub	sp, #12
 800a464:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 800a468:	4615      	mov	r5, r2
 800a46a:	2300      	movs	r3, #0
 800a46c:	2202      	movs	r2, #2
 800a46e:	a901      	add	r1, sp, #4
 800a470:	f8ad 4004 	strh.w	r4, [sp, #4]
 800a474:	f8ad 5006 	strh.w	r5, [sp, #6]
 800a478:	f7fd fa36 	bl	80078e8 <acc_rss_integration_sensor_device_transfer>
 800a47c:	b003      	add	sp, #12
 800a47e:	bd30      	pop	{r4, r5, pc}

0800a480 <acc_sensor_reg_field_write>:
 800a480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	461d      	mov	r5, r3
 800a488:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a48c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 800a490:	f8ad 3000 	strh.w	r3, [sp]
 800a494:	2700      	movs	r7, #0
 800a496:	468a      	mov	sl, r1
 800a498:	4691      	mov	r9, r2
 800a49a:	4669      	mov	r1, sp
 800a49c:	2301      	movs	r3, #1
 800a49e:	2203      	movs	r2, #3
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	f8ad 7002 	strh.w	r7, [sp, #2]
 800a4a6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800a4aa:	f7fd fa1d 	bl	80078e8 <acc_rss_integration_sensor_device_transfer>
 800a4ae:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800a4b2:	fa04 f10a 	lsl.w	r1, r4, sl
 800a4b6:	4071      	eors	r1, r6
 800a4b8:	ea01 0409 	and.w	r4, r1, r9
 800a4bc:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	4669      	mov	r1, sp
 800a4c6:	4074      	eors	r4, r6
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	f8ad 5000 	strh.w	r5, [sp]
 800a4ce:	f8ad 4002 	strh.w	r4, [sp, #2]
 800a4d2:	f7fd fa09 	bl	80078e8 <acc_rss_integration_sensor_device_transfer>
 800a4d6:	b002      	add	sp, #8
 800a4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a4dc <acc_sensor_conf_read_instr>:
 800a4dc:	b530      	push	{r4, r5, lr}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	2401      	movs	r4, #1
 800a4e2:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 800a4e6:	4623      	mov	r3, r4
 800a4e8:	2500      	movs	r5, #0
 800a4ea:	f8ad 1004 	strh.w	r1, [sp, #4]
 800a4ee:	2205      	movs	r2, #5
 800a4f0:	a901      	add	r1, sp, #4
 800a4f2:	f8ad 4006 	strh.w	r4, [sp, #6]
 800a4f6:	f8ad 5008 	strh.w	r5, [sp, #8]
 800a4fa:	f8cd 500a 	str.w	r5, [sp, #10]
 800a4fe:	f7fd f9f3 	bl	80078e8 <acc_rss_integration_sensor_device_transfer>
 800a502:	f10d 000a 	add.w	r0, sp, #10
 800a506:	4622      	mov	r2, r4
 800a508:	4669      	mov	r1, sp
 800a50a:	f7fd facd 	bl	8007aa8 <acc_utils_transfer_buffer_to_uint32>
 800a50e:	9800      	ldr	r0, [sp, #0]
 800a510:	b005      	add	sp, #20
 800a512:	bd30      	pop	{r4, r5, pc}

0800a514 <acc_cpd_pll_divisors_calculate>:
 800a514:	b510      	push	{r4, lr}
 800a516:	edd0 7a00 	vldr	s15, [r0]
 800a51a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a600 <acc_cpd_pll_divisors_calculate+0xec>
 800a51e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a526:	b082      	sub	sp, #8
 800a528:	dc3c      	bgt.n	800a5a4 <acc_cpd_pll_divisors_calculate+0x90>
 800a52a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a604 <acc_cpd_pll_divisors_calculate+0xf0>
 800a52e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a536:	d435      	bmi.n	800a5a4 <acc_cpd_pll_divisors_calculate+0x90>
 800a538:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800a608 <acc_cpd_pll_divisors_calculate+0xf4>
 800a53c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a60c <acc_cpd_pll_divisors_calculate+0xf8>
 800a540:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800a610 <acc_cpd_pll_divisors_calculate+0xfc>
 800a544:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a548:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800a54c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a550:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a554:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a558:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a55c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a560:	ee16 3a90 	vmov	r3, s13
 800a564:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a568:	b29b      	uxth	r3, r3
 800a56a:	f1a3 0210 	sub.w	r2, r3, #16
 800a56e:	ee17 0a10 	vmov	r0, s14
 800a572:	b292      	uxth	r2, r2
 800a574:	2aef      	cmp	r2, #239	; 0xef
 800a576:	8108      	strh	r0, [r1, #8]
 800a578:	d814      	bhi.n	800a5a4 <acc_cpd_pll_divisors_calculate+0x90>
 800a57a:	2b3f      	cmp	r3, #63	; 0x3f
 800a57c:	d938      	bls.n	800a5f0 <acc_cpd_pll_divisors_calculate+0xdc>
 800a57e:	2bbf      	cmp	r3, #191	; 0xbf
 800a580:	f04f 0201 	mov.w	r2, #1
 800a584:	bf98      	it	ls
 800a586:	f1a3 0040 	subls.w	r0, r3, #64	; 0x40
 800a58a:	804a      	strh	r2, [r1, #2]
 800a58c:	bf8c      	ite	hi
 800a58e:	08d8      	lsrhi	r0, r3, #3
 800a590:	f3c0 00cf 	ubfxls	r0, r0, #3, #16
 800a594:	f003 0207 	and.w	r2, r3, #7
 800a598:	8088      	strh	r0, [r1, #4]
 800a59a:	80ca      	strh	r2, [r1, #6]
 800a59c:	2001      	movs	r0, #1
 800a59e:	800b      	strh	r3, [r1, #0]
 800a5a0:	b002      	add	sp, #8
 800a5a2:	bd10      	pop	{r4, pc}
 800a5a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a614 <acc_cpd_pll_divisors_calculate+0x100>
 800a5b0:	eddf 6a19 	vldr	s13, [pc, #100]	; 800a618 <acc_cpd_pll_divisors_calculate+0x104>
 800a5b4:	4b19      	ldr	r3, [pc, #100]	; (800a61c <acc_cpd_pll_divisors_calculate+0x108>)
 800a5b6:	4a1a      	ldr	r2, [pc, #104]	; (800a620 <acc_cpd_pll_divisors_calculate+0x10c>)
 800a5b8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a5ba:	491a      	ldr	r1, [pc, #104]	; (800a624 <acc_cpd_pll_divisors_calculate+0x110>)
 800a5bc:	bf4a      	itet	mi
 800a5be:	4b1a      	ldrmi	r3, [pc, #104]	; (800a628 <acc_cpd_pll_divisors_calculate+0x114>)
 800a5c0:	4b1a      	ldrpl	r3, [pc, #104]	; (800a62c <acc_cpd_pll_divisors_calculate+0x118>)
 800a5c2:	eef1 7a67 	vnegmi.f32	s15, s15
 800a5c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a5d0:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a5d4:	ed8d 7a00 	vstr	s14, [sp]
 800a5d8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a5dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e4:	edcd 7a01 	vstr	s15, [sp, #4]
 800a5e8:	47a0      	blx	r4
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	b002      	add	sp, #8
 800a5ee:	bd10      	pop	{r4, pc}
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	2b2f      	cmp	r3, #47	; 0x2f
 800a5f4:	bf88      	it	hi
 800a5f6:	461a      	movhi	r2, r3
 800a5f8:	808a      	strh	r2, [r1, #4]
 800a5fa:	8048      	strh	r0, [r1, #2]
 800a5fc:	80c8      	strh	r0, [r1, #6]
 800a5fe:	e7cd      	b.n	800a59c <acc_cpd_pll_divisors_calculate+0x88>
 800a600:	4c989680 	.word	0x4c989680
 800a604:	4b989680 	.word	0x4b989680
 800a608:	4f1502f9 	.word	0x4f1502f9
 800a60c:	b55b38e8 	.word	0xb55b38e8
 800a610:	427c0000 	.word	0x427c0000
 800a614:	350637bd 	.word	0x350637bd
 800a618:	49742400 	.word	0x49742400
 800a61c:	200007b0 	.word	0x200007b0
 800a620:	08012210 	.word	0x08012210
 800a624:	0801223c 	.word	0x0801223c
 800a628:	08011998 	.word	0x08011998
 800a62c:	08012a78 	.word	0x08012a78

0800a630 <acc_cpd_pll_divisors_ref_divisor>:
 800a630:	eddf 7a02 	vldr	s15, [pc, #8]	; 800a63c <acc_cpd_pll_divisors_ref_divisor+0xc>
 800a634:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a638:	f004 bc4c 	b.w	800eed4 <roundf>
 800a63c:	4f1502f9 	.word	0x4f1502f9

0800a640 <acc_element_source_adc_init_radar_engine>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	9d04      	ldr	r5, [sp, #16]
 800a644:	4604      	mov	r4, r0
 800a646:	4608      	mov	r0, r1
 800a648:	63e1      	str	r1, [r4, #60]	; 0x3c
 800a64a:	4611      	mov	r1, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	462b      	mov	r3, r5
 800a650:	f7ff f92e 	bl	80098b0 <acc_sensor_manager_prepare_radar_engine>
 800a654:	896b      	ldrh	r3, [r5, #10]
 800a656:	8723      	strh	r3, [r4, #56]	; 0x38
 800a658:	bd38      	pop	{r3, r4, r5, pc}
 800a65a:	bf00      	nop

0800a65c <acc_element_source_adc_init>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	4604      	mov	r4, r0
 800a662:	4608      	mov	r0, r1
 800a664:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a668:	9101      	str	r1, [sp, #4]
 800a66a:	f7fd fcfd 	bl	8008068 <acc_base_configuration_print>
 800a66e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a672:	9901      	ldr	r1, [sp, #4]
 800a674:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a676:	b004      	add	sp, #16
 800a678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a67c:	f7ff b964 	b.w	8009948 <acc_sensor_manager_prepare_measurement>

0800a680 <acc_element_source_adc_release>:
 800a680:	b110      	cbz	r0, 800a688 <acc_element_source_adc_release+0x8>
 800a682:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a684:	f7ff ba26 	b.w	8009ad4 <acc_sensor_manager_release_measurement>
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop

0800a68c <acc_element_source_adc_reset>:
 800a68c:	6800      	ldr	r0, [r0, #0]
 800a68e:	68c3      	ldr	r3, [r0, #12]
 800a690:	4718      	bx	r3
 800a692:	bf00      	nop

0800a694 <acc_element_source_adc_validate>:
 800a694:	6800      	ldr	r0, [r0, #0]
 800a696:	6883      	ldr	r3, [r0, #8]
 800a698:	4718      	bx	r3
 800a69a:	bf00      	nop

0800a69c <acc_element_source_adc_produce>:
 800a69c:	b530      	push	{r4, r5, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d02f      	beq.n	800a708 <acc_element_source_adc_produce+0x6c>
 800a6a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a6aa:	4a19      	ldr	r2, [pc, #100]	; (800a710 <acc_element_source_adc_produce+0x74>)
 800a6ac:	6a25      	ldr	r5, [r4, #32]
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	f7ff fa24 	bl	8009afc <acc_sensor_manager_get_sensor_id>
 800a6b4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800a6b6:	6028      	str	r0, [r5, #0]
 800a6b8:	6961      	ldr	r1, [r4, #20]
 800a6ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a6bc:	ab01      	add	r3, sp, #4
 800a6be:	f7ff f869 	bl	8009794 <acc_sensor_manager_acquire_adc_data>
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	b1c0      	cbz	r0, 800a6f8 <acc_element_source_adc_produce+0x5c>
 800a6c6:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800a6ca:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800a6cc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a6d0:	005b      	lsls	r3, r3, #1
 800a6d2:	6003      	str	r3, [r0, #0]
 800a6d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a6d6:	7011      	strb	r1, [r2, #0]
 800a6d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a6dc:	701a      	strb	r2, [r3, #0]
 800a6de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a6e2:	b90b      	cbnz	r3, 800a6e8 <acc_element_source_adc_produce+0x4c>
 800a6e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a6e8:	6820      	ldr	r0, [r4, #0]
 800a6ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a6ec:	7013      	strb	r3, [r2, #0]
 800a6ee:	6843      	ldr	r3, [r0, #4]
 800a6f0:	4798      	blx	r3
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	b003      	add	sp, #12
 800a6f6:	bd30      	pop	{r4, r5, pc}
 800a6f8:	4b06      	ldr	r3, [pc, #24]	; (800a714 <acc_element_source_adc_produce+0x78>)
 800a6fa:	4a07      	ldr	r2, [pc, #28]	; (800a718 <acc_element_source_adc_produce+0x7c>)
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	4907      	ldr	r1, [pc, #28]	; (800a71c <acc_element_source_adc_produce+0x80>)
 800a700:	4798      	blx	r3
 800a702:	4628      	mov	r0, r5
 800a704:	b003      	add	sp, #12
 800a706:	bd30      	pop	{r4, r5, pc}
 800a708:	4605      	mov	r5, r0
 800a70a:	4628      	mov	r0, r5
 800a70c:	b003      	add	sp, #12
 800a70e:	bd30      	pop	{r4, r5, pc}
 800a710:	51645c3c 	.word	0x51645c3c
 800a714:	200007b0 	.word	0x200007b0
 800a718:	08012250 	.word	0x08012250
 800a71c:	08012270 	.word	0x08012270

0800a720 <acc_element_source_adc_inject_data>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	4604      	mov	r4, r0
 800a724:	6940      	ldr	r0, [r0, #20]
 800a726:	4e08      	ldr	r6, [pc, #32]	; (800a748 <acc_element_source_adc_inject_data+0x28>)
 800a728:	4615      	mov	r5, r2
 800a72a:	f001 fd91 	bl	800c250 <memcpy>
 800a72e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a730:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a732:	6820      	ldr	r0, [r4, #0]
 800a734:	6a22      	ldr	r2, [r4, #32]
 800a736:	600d      	str	r5, [r1, #0]
 800a738:	2100      	movs	r1, #0
 800a73a:	601e      	str	r6, [r3, #0]
 800a73c:	6843      	ldr	r3, [r0, #4]
 800a73e:	6011      	str	r1, [r2, #0]
 800a740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a744:	4718      	bx	r3
 800a746:	bf00      	nop
 800a748:	51645c3c 	.word	0x51645c3c

0800a74c <acc_cpd_cbank_and_vana_calibration>:
 800a74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	ed2d 8b02 	vpush	{d8}
 800a754:	4615      	mov	r5, r2
 800a756:	b08b      	sub	sp, #44	; 0x2c
 800a758:	461e      	mov	r6, r3
 800a75a:	ab09      	add	r3, sp, #36	; 0x24
 800a75c:	2400      	movs	r4, #0
 800a75e:	ee08 1a10 	vmov	s16, r1
 800a762:	4683      	mov	fp, r0
 800a764:	460a      	mov	r2, r1
 800a766:	4601      	mov	r1, r0
 800a768:	6828      	ldr	r0, [r5, #0]
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	ab08      	add	r3, sp, #32
 800a76e:	e9cd 6407 	strd	r6, r4, [sp, #28]
 800a772:	9409      	str	r4, [sp, #36]	; 0x24
 800a774:	f7ff f9c4 	bl	8009b00 <acc_sensor_protocol_r2_prepare_load>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d067      	beq.n	800a84c <acc_cpd_cbank_and_vana_calibration+0x100>
 800a77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a77e:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800aa9c <acc_cpd_cbank_and_vana_calibration+0x350>
 800a782:	461e      	mov	r6, r3
 800a784:	f5c4 63ae 	rsb	r3, r4, #1392	; 0x570
 800a788:	3304      	adds	r3, #4
 800a78a:	429e      	cmp	r6, r3
 800a78c:	bf28      	it	cs
 800a78e:	461e      	movcs	r6, r3
 800a790:	9f08      	ldr	r7, [sp, #32]
 800a792:	4bb6      	ldr	r3, [pc, #728]	; (800aa6c <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a794:	ea4f 0954 	mov.w	r9, r4, lsr #1
 800a798:	0872      	lsrs	r2, r6, #1
 800a79a:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f001 fb10 	bl	800bdc4 <acc_confprogram_copy>
 800a7a4:	686b      	ldr	r3, [r5, #4]
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	201b      	movs	r0, #27
 800a7aa:	b2b2      	uxth	r2, r6
 800a7ac:	b2a1      	uxth	r1, r4
 800a7ae:	9000      	str	r0, [sp, #0]
 800a7b0:	4643      	mov	r3, r8
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	9206      	str	r2, [sp, #24]
 800a7b6:	9105      	str	r1, [sp, #20]
 800a7b8:	f04f 0a19 	mov.w	sl, #25
 800a7bc:	f001 fa0a 	bl	800bbd4 <acc_confprogram_patch_offset>
 800a7c0:	68ab      	ldr	r3, [r5, #8]
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	4643      	mov	r3, r8
 800a7cc:	f8cd a000 	str.w	sl, [sp]
 800a7d0:	f001 fa00 	bl	800bbd4 <acc_confprogram_patch_offset>
 800a7d4:	68eb      	ldr	r3, [r5, #12]
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	231a      	movs	r3, #26
 800a7da:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a7de:	4638      	mov	r0, r7
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	4643      	mov	r3, r8
 800a7e4:	f001 f9f6 	bl	800bbd4 <acc_confprogram_patch_offset>
 800a7e8:	8a2b      	ldrh	r3, [r5, #16]
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	2317      	movs	r3, #23
 800a7ee:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4643      	mov	r3, r8
 800a7f8:	f001 f9ec 	bl	800bbd4 <acc_confprogram_patch_offset>
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	2300      	movs	r3, #0
 800a802:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a806:	4638      	mov	r0, r7
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	4643      	mov	r3, r8
 800a80c:	f001 f9e2 	bl	800bbd4 <acc_confprogram_patch_offset>
 800a810:	4633      	mov	r3, r6
 800a812:	6828      	ldr	r0, [r5, #0]
 800a814:	465a      	mov	r2, fp
 800a816:	fa1f f189 	uxth.w	r1, r9
 800a81a:	f7fe fe81 	bl	8009520 <acc_sensor_r2_load_confmem>
 800a81e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a820:	f240 5373 	movw	r3, #1395	; 0x573
 800a824:	4434      	add	r4, r6
 800a826:	429c      	cmp	r4, r3
 800a828:	d9ac      	bls.n	800a784 <acc_cpd_cbank_and_vana_calibration+0x38>
 800a82a:	6828      	ldr	r0, [r5, #0]
 800a82c:	4651      	mov	r1, sl
 800a82e:	f7ff f9cb 	bl	8009bc8 <acc_sensor_protocol_r2_run_program>
 800a832:	4606      	mov	r6, r0
 800a834:	b9b0      	cbnz	r0, 800a864 <acc_cpd_cbank_and_vana_calibration+0x118>
 800a836:	4b8e      	ldr	r3, [pc, #568]	; (800aa70 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a838:	4a8e      	ldr	r2, [pc, #568]	; (800aa74 <acc_cpd_cbank_and_vana_calibration+0x328>)
 800a83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83c:	498e      	ldr	r1, [pc, #568]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a83e:	4798      	blx	r3
 800a840:	4630      	mov	r0, r6
 800a842:	b00b      	add	sp, #44	; 0x2c
 800a844:	ecbd 8b02 	vpop	{d8}
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84c:	4b88      	ldr	r3, [pc, #544]	; (800aa70 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a84e:	4a8b      	ldr	r2, [pc, #556]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x330>)
 800a850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a852:	4989      	ldr	r1, [pc, #548]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a854:	4606      	mov	r6, r0
 800a856:	4798      	blx	r3
 800a858:	4630      	mov	r0, r6
 800a85a:	b00b      	add	sp, #44	; 0x2c
 800a85c:	ecbd 8b02 	vpop	{d8}
 800a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a864:	4886      	ldr	r0, [pc, #536]	; (800aa80 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800a866:	f001 fabb 	bl	800bde0 <acc_diagnostic_log_set_scope>
 800a86a:	6829      	ldr	r1, [r5, #0]
 800a86c:	4885      	ldr	r0, [pc, #532]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x338>)
 800a86e:	f001 fad7 	bl	800be20 <acc_diagnostic_log_scalar>
 800a872:	4885      	ldr	r0, [pc, #532]	; (800aa88 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800a874:	2203      	movs	r2, #3
 800a876:	2100      	movs	r1, #0
 800a878:	f001 faba 	bl	800bdf0 <acc_diagnostic_log_declare_parameter>
 800a87c:	682c      	ldr	r4, [r5, #0]
 800a87e:	2300      	movs	r3, #0
 800a880:	4620      	mov	r0, r4
 800a882:	2203      	movs	r2, #3
 800a884:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a888:	f7ff faf8 	bl	8009e7c <acc_sensor_protocol_r2_wait_for_specific_event>
 800a88c:	b960      	cbnz	r0, 800a8a8 <acc_cpd_cbank_and_vana_calibration+0x15c>
 800a88e:	4b78      	ldr	r3, [pc, #480]	; (800aa70 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a890:	4a7e      	ldr	r2, [pc, #504]	; (800aa8c <acc_cpd_cbank_and_vana_calibration+0x340>)
 800a892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a894:	4978      	ldr	r1, [pc, #480]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a896:	2000      	movs	r0, #0
 800a898:	4798      	blx	r3
 800a89a:	2600      	movs	r6, #0
 800a89c:	4630      	mov	r0, r6
 800a89e:	b00b      	add	sp, #44	; 0x2c
 800a8a0:	ecbd 8b02 	vpop	{d8}
 800a8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a8:	aa09      	add	r2, sp, #36	; 0x24
 800a8aa:	219d      	movs	r1, #157	; 0x9d
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f7ff fdc1 	bl	800a434 <acc_sensor_reg_read>
 800a8b2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800a8b6:	2006      	movs	r0, #6
 800a8b8:	aa09      	add	r2, sp, #36	; 0x24
 800a8ba:	f006 0607 	and.w	r6, r6, #7
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800a8c6:	f7fd f891 	bl	80079ec <acc_probes_execute_uint16>
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f7ff f9de 	bl	8009c8c <acc_sensor_protocol_r2_ack_event>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d0dc      	beq.n	800a88e <acc_cpd_cbank_and_vana_calibration+0x142>
 800a8d4:	682c      	ldr	r4, [r5, #0]
 800a8d6:	9b07      	ldr	r3, [sp, #28]
 800a8d8:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800a8dc:	601e      	str	r6, [r3, #0]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8e4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800a8e8:	f7ff f9be 	bl	8009c68 <acc_sensor_protocol_r2_is_sensor_running>
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	b168      	cbz	r0, 800a90c <acc_cpd_cbank_and_vana_calibration+0x1c0>
 800a8f0:	4e5f      	ldr	r6, [pc, #380]	; (800aa70 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a8f2:	4a67      	ldr	r2, [pc, #412]	; (800aa90 <acc_cpd_cbank_and_vana_calibration+0x344>)
 800a8f4:	6b75      	ldr	r5, [r6, #52]	; 0x34
 800a8f6:	4960      	ldr	r1, [pc, #384]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a8f8:	4623      	mov	r3, r4
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	47a8      	blx	r5
 800a8fe:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a900:	4a64      	ldr	r2, [pc, #400]	; (800aa94 <acc_cpd_cbank_and_vana_calibration+0x348>)
 800a902:	495d      	ldr	r1, [pc, #372]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a904:	2000      	movs	r0, #0
 800a906:	4798      	blx	r3
 800a908:	2600      	movs	r6, #0
 800a90a:	e7a5      	b.n	800a858 <acc_cpd_cbank_and_vana_calibration+0x10c>
 800a90c:	9601      	str	r6, [sp, #4]
 800a90e:	2311      	movs	r3, #17
 800a910:	4e61      	ldr	r6, [pc, #388]	; (800aa98 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800a912:	4956      	ldr	r1, [pc, #344]	; (800aa6c <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a914:	9602      	str	r6, [sp, #8]
 800a916:	4602      	mov	r2, r0
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	4620      	mov	r0, r4
 800a91c:	4b5f      	ldr	r3, [pc, #380]	; (800aa9c <acc_cpd_cbank_and_vana_calibration+0x350>)
 800a91e:	f001 f9e1 	bl	800bce4 <acc_confprogram_live_patch>
 800a922:	2301      	movs	r3, #1
 800a924:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	4950      	ldr	r1, [pc, #320]	; (800aa6c <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a92c:	4b5b      	ldr	r3, [pc, #364]	; (800aa9c <acc_cpd_cbank_and_vana_calibration+0x350>)
 800a92e:	462a      	mov	r2, r5
 800a930:	4620      	mov	r0, r4
 800a932:	f001 f9d7 	bl	800bce4 <acc_confprogram_live_patch>
 800a936:	462e      	mov	r6, r5
 800a938:	4853      	ldr	r0, [pc, #332]	; (800aa88 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800a93a:	4629      	mov	r1, r5
 800a93c:	f001 fa60 	bl	800be00 <acc_diagnostic_log_set_parameter>
 800a940:	4a55      	ldr	r2, [pc, #340]	; (800aa98 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800a942:	494a      	ldr	r1, [pc, #296]	; (800aa6c <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a944:	231f      	movs	r3, #31
 800a946:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4620      	mov	r0, r4
 800a94e:	4b53      	ldr	r3, [pc, #332]	; (800aa9c <acc_cpd_cbank_and_vana_calibration+0x350>)
 800a950:	2200      	movs	r2, #0
 800a952:	f001 f9c7 	bl	800bce4 <acc_confprogram_live_patch>
 800a956:	f240 11d1 	movw	r1, #465	; 0x1d1
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7ff f934 	bl	8009bc8 <acc_sensor_protocol_r2_run_program>
 800a960:	2800      	cmp	r0, #0
 800a962:	f000 80bf 	beq.w	800aae4 <acc_cpd_cbank_and_vana_calibration+0x398>
 800a966:	2300      	movs	r3, #0
 800a968:	2209      	movs	r2, #9
 800a96a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a96e:	4620      	mov	r0, r4
 800a970:	f7ff fa84 	bl	8009e7c <acc_sensor_protocol_r2_wait_for_specific_event>
 800a974:	b938      	cbnz	r0, 800a986 <acc_cpd_cbank_and_vana_calibration+0x23a>
 800a976:	4e3e      	ldr	r6, [pc, #248]	; (800aa70 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a978:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800a97a:	4a49      	ldr	r2, [pc, #292]	; (800aaa0 <acc_cpd_cbank_and_vana_calibration+0x354>)
 800a97c:	493e      	ldr	r1, [pc, #248]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a97e:	462b      	mov	r3, r5
 800a980:	2000      	movs	r0, #0
 800a982:	47a0      	blx	r4
 800a984:	e7bb      	b.n	800a8fe <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800a986:	ee18 0a10 	vmov	r0, s16
 800a98a:	2110      	movs	r1, #16
 800a98c:	f7fe fe00 	bl	8009590 <acc_sensor_r2_buffer_processed_verify_size>
 800a990:	b928      	cbnz	r0, 800a99e <acc_cpd_cbank_and_vana_calibration+0x252>
 800a992:	4e37      	ldr	r6, [pc, #220]	; (800aa70 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a994:	4a43      	ldr	r2, [pc, #268]	; (800aaa4 <acc_cpd_cbank_and_vana_calibration+0x358>)
 800a996:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a998:	4937      	ldr	r1, [pc, #220]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a99a:	4798      	blx	r3
 800a99c:	e7ec      	b.n	800a978 <acc_cpd_cbank_and_vana_calibration+0x22c>
 800a99e:	2310      	movs	r3, #16
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f7fe fdfb 	bl	80095a0 <acc_sensor_r2_buffer_processed_read>
 800a9aa:	2310      	movs	r3, #16
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	f7fd f81a 	bl	80079ec <acc_probes_execute_uint16>
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f7ff f967 	bl	8009c8c <acc_sensor_protocol_r2_ack_event>
 800a9be:	4680      	mov	r8, r0
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d0d8      	beq.n	800a976 <acc_cpd_cbank_and_vana_calibration+0x22a>
 800a9c4:	2700      	movs	r7, #0
 800a9c6:	46b9      	mov	r9, r7
 800a9c8:	4651      	mov	r1, sl
 800a9ca:	f10a 0c1e 	add.w	ip, sl, #30
 800a9ce:	884b      	ldrh	r3, [r1, #2]
 800a9d0:	f831 2b02 	ldrh.w	r2, [r1], #2
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	4499      	add	r9, r3
 800a9d8:	bf34      	ite	cc
 800a9da:	1ad3      	subcc	r3, r2, r3
 800a9dc:	1a9b      	subcs	r3, r3, r2
 800a9de:	429f      	cmp	r7, r3
 800a9e0:	bf38      	it	cc
 800a9e2:	461f      	movcc	r7, r3
 800a9e4:	458c      	cmp	ip, r1
 800a9e6:	d1f2      	bne.n	800a9ce <acc_cpd_cbank_and_vana_calibration+0x282>
 800a9e8:	4927      	ldr	r1, [pc, #156]	; (800aa88 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800a9ea:	482f      	ldr	r0, [pc, #188]	; (800aaa8 <acc_cpd_cbank_and_vana_calibration+0x35c>)
 800a9ec:	f001 fa10 	bl	800be10 <acc_diagnostic_log_array>
 800a9f0:	2110      	movs	r1, #16
 800a9f2:	4650      	mov	r0, sl
 800a9f4:	f001 fa1c 	bl	800be30 <acc_diagnostic_log_data_u16>
 800a9f8:	f8ba 3000 	ldrh.w	r3, [sl]
 800a9fc:	4499      	add	r9, r3
 800a9fe:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800aa02:	f5a9 43f2 	sub.w	r3, r9, #30976	; 0x7900
 800aa06:	3b18      	subs	r3, #24
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800aa0e:	428b      	cmp	r3, r1
 800aa10:	d852      	bhi.n	800aab8 <acc_cpd_cbank_and_vana_calibration+0x36c>
 800aa12:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 800aa16:	d84f      	bhi.n	800aab8 <acc_cpd_cbank_and_vana_calibration+0x36c>
 800aa18:	f7fc ffe2 	bl	80079e0 <acc_rss_integration_log_level>
 800aa1c:	2803      	cmp	r0, #3
 800aa1e:	4646      	mov	r6, r8
 800aa20:	d90a      	bls.n	800aa38 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800aa22:	4a13      	ldr	r2, [pc, #76]	; (800aa70 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800aa24:	9701      	str	r7, [sp, #4]
 800aa26:	fa1f f389 	uxth.w	r3, r9
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	4912      	ldr	r1, [pc, #72]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800aa2e:	4623      	mov	r3, r4
 800aa30:	2004      	movs	r0, #4
 800aa32:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800aa34:	4a1d      	ldr	r2, [pc, #116]	; (800aaac <acc_cpd_cbank_and_vana_calibration+0x360>)
 800aa36:	47a0      	blx	r4
 800aa38:	9b07      	ldr	r3, [sp, #28]
 800aa3a:	711d      	strb	r5, [r3, #4]
 800aa3c:	f7fc ffd0 	bl	80079e0 <acc_rss_integration_log_level>
 800aa40:	2801      	cmp	r0, #1
 800aa42:	d909      	bls.n	800aa58 <acc_cpd_cbank_and_vana_calibration+0x30c>
 800aa44:	9907      	ldr	r1, [sp, #28]
 800aa46:	4a0a      	ldr	r2, [pc, #40]	; (800aa70 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800aa48:	790b      	ldrb	r3, [r1, #4]
 800aa4a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	680b      	ldr	r3, [r1, #0]
 800aa50:	4a17      	ldr	r2, [pc, #92]	; (800aab0 <acc_cpd_cbank_and_vana_calibration+0x364>)
 800aa52:	4909      	ldr	r1, [pc, #36]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800aa54:	2002      	movs	r0, #2
 800aa56:	47a0      	blx	r4
 800aa58:	9c07      	ldr	r4, [sp, #28]
 800aa5a:	4816      	ldr	r0, [pc, #88]	; (800aab4 <acc_cpd_cbank_and_vana_calibration+0x368>)
 800aa5c:	6821      	ldr	r1, [r4, #0]
 800aa5e:	f001 f9df 	bl	800be20 <acc_diagnostic_log_scalar>
 800aa62:	7921      	ldrb	r1, [r4, #4]
 800aa64:	4808      	ldr	r0, [pc, #32]	; (800aa88 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800aa66:	f001 f9db 	bl	800be20 <acc_diagnostic_log_scalar>
 800aa6a:	e6f5      	b.n	800a858 <acc_cpd_cbank_and_vana_calibration+0x10c>
 800aa6c:	0800f5b8 	.word	0x0800f5b8
 800aa70:	200007b0 	.word	0x200007b0
 800aa74:	080122e8 	.word	0x080122e8
 800aa78:	080122c8 	.word	0x080122c8
 800aa7c:	08012284 	.word	0x08012284
 800aa80:	080122cc 	.word	0x080122cc
 800aa84:	0801231c 	.word	0x0801231c
 800aa88:	08012328 	.word	0x08012328
 800aa8c:	08012334 	.word	0x08012334
 800aa90:	0801234c 	.word	0x0801234c
 800aa94:	08012414 	.word	0x08012414
 800aa98:	080094c5 	.word	0x080094c5
 800aa9c:	08012c60 	.word	0x08012c60
 800aaa0:	080123e8 	.word	0x080123e8
 800aaa4:	080123c0 	.word	0x080123c0
 800aaa8:	080123d8 	.word	0x080123d8
 800aaac:	0801244c 	.word	0x0801244c
 800aab0:	0801242c 	.word	0x0801242c
 800aab4:	08012440 	.word	0x08012440
 800aab8:	f7fc ff92 	bl	80079e0 <acc_rss_integration_log_level>
 800aabc:	2803      	cmp	r0, #3
 800aabe:	d90a      	bls.n	800aad6 <acc_cpd_cbank_and_vana_calibration+0x38a>
 800aac0:	4b0c      	ldr	r3, [pc, #48]	; (800aaf4 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800aac2:	9701      	str	r7, [sp, #4]
 800aac4:	fa1f f289 	uxth.w	r2, r9
 800aac8:	9200      	str	r2, [sp, #0]
 800aaca:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800aacc:	4a0a      	ldr	r2, [pc, #40]	; (800aaf8 <acc_cpd_cbank_and_vana_calibration+0x3ac>)
 800aace:	490b      	ldr	r1, [pc, #44]	; (800aafc <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 800aad0:	4623      	mov	r3, r4
 800aad2:	2004      	movs	r0, #4
 800aad4:	47a8      	blx	r5
 800aad6:	b10e      	cbz	r6, 800aadc <acc_cpd_cbank_and_vana_calibration+0x390>
 800aad8:	4e06      	ldr	r6, [pc, #24]	; (800aaf4 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800aada:	e710      	b.n	800a8fe <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800aadc:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800aae0:	2601      	movs	r6, #1
 800aae2:	e729      	b.n	800a938 <acc_cpd_cbank_and_vana_calibration+0x1ec>
 800aae4:	4e03      	ldr	r6, [pc, #12]	; (800aaf4 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800aae6:	4a06      	ldr	r2, [pc, #24]	; (800ab00 <acc_cpd_cbank_and_vana_calibration+0x3b4>)
 800aae8:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800aaea:	4904      	ldr	r1, [pc, #16]	; (800aafc <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 800aaec:	462b      	mov	r3, r5
 800aaee:	47a0      	blx	r4
 800aaf0:	e705      	b.n	800a8fe <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800aaf2:	bf00      	nop
 800aaf4:	200007b0 	.word	0x200007b0
 800aaf8:	0801244c 	.word	0x0801244c
 800aafc:	080122c8 	.word	0x080122c8
 800ab00:	08012380 	.word	0x08012380

0800ab04 <acc_cpd_sparse_sweep_load_program>:
 800ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	ed2d 8b04 	vpush	{d8-d9}
 800ab0c:	4614      	mov	r4, r2
 800ab0e:	b08f      	sub	sp, #60	; 0x3c
 800ab10:	461a      	mov	r2, r3
 800ab12:	4606      	mov	r6, r0
 800ab14:	460d      	mov	r5, r1
 800ab16:	ee08 0a90 	vmov	s17, r0
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	4698      	mov	r8, r3
 800ab1e:	2015      	movs	r0, #21
 800ab20:	23b4      	movs	r3, #180	; 0xb4
 800ab22:	f7fc ff7b 	bl	8007a1c <acc_probes_execute_struct>
 800ab26:	ab0d      	add	r3, sp, #52	; 0x34
 800ab28:	4622      	mov	r2, r4
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4630      	mov	r0, r6
 800ab30:	2400      	movs	r4, #0
 800ab32:	ab0c      	add	r3, sp, #48	; 0x30
 800ab34:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800ab38:	f7fe ffe2 	bl	8009b00 <acc_sensor_protocol_r2_prepare_load>
 800ab3c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f000 83e6 	beq.w	800b310 <acc_cpd_sparse_sweep_load_program+0x80c>
 800ab44:	ee09 5a10 	vmov	s18, r5
 800ab48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab4a:	f8df b010 	ldr.w	fp, [pc, #16]	; 800ab5c <acc_cpd_sparse_sweep_load_program+0x58>
 800ab4e:	ed9f 8a02 	vldr	s16, [pc, #8]	; 800ab58 <acc_cpd_sparse_sweep_load_program+0x54>
 800ab52:	9403      	str	r4, [sp, #12]
 800ab54:	e130      	b.n	800adb8 <acc_cpd_sparse_sweep_load_program+0x2b4>
 800ab56:	bf00      	nop
 800ab58:	3751b717 	.word	0x3751b717
 800ab5c:	080137dc 	.word	0x080137dc
 800ab60:	1f9f      	subs	r7, r3, #6
 800ab62:	2303      	movs	r3, #3
 800ab64:	4699      	mov	r9, r3
 800ab66:	2274      	movs	r2, #116	; 0x74
 800ab68:	e9cd 2300 	strd	r2, r3, [sp]
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	465b      	mov	r3, fp
 800ab70:	4632      	mov	r2, r6
 800ab72:	4620      	mov	r0, r4
 800ab74:	f001 f82e 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ab78:	2375      	movs	r3, #117	; 0x75
 800ab7a:	e9cd 3900 	strd	r3, r9, [sp]
 800ab7e:	4632      	mov	r2, r6
 800ab80:	465b      	mov	r3, fp
 800ab82:	4629      	mov	r1, r5
 800ab84:	4620      	mov	r0, r4
 800ab86:	f001 f825 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ab8a:	2376      	movs	r3, #118	; 0x76
 800ab8c:	e9cd 3700 	strd	r3, r7, [sp]
 800ab90:	4632      	mov	r2, r6
 800ab92:	465b      	mov	r3, fp
 800ab94:	4629      	mov	r1, r5
 800ab96:	4620      	mov	r0, r4
 800ab98:	f001 f81c 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ab9c:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	2305      	movs	r3, #5
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	4632      	mov	r2, r6
 800aba8:	465b      	mov	r3, fp
 800abaa:	4629      	mov	r1, r5
 800abac:	4620      	mov	r0, r4
 800abae:	f001 f811 	bl	800bbd4 <acc_confprogram_patch_offset>
 800abb2:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800abb6:	015b      	lsls	r3, r3, #5
 800abb8:	3b03      	subs	r3, #3
 800abba:	2263      	movs	r2, #99	; 0x63
 800abbc:	e9cd 2300 	strd	r2, r3, [sp]
 800abc0:	4629      	mov	r1, r5
 800abc2:	465b      	mov	r3, fp
 800abc4:	4632      	mov	r2, r6
 800abc6:	4620      	mov	r0, r4
 800abc8:	f001 f804 	bl	800bbd4 <acc_confprogram_patch_offset>
 800abcc:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800abd0:	015b      	lsls	r3, r3, #5
 800abd2:	085b      	lsrs	r3, r3, #1
 800abd4:	3b03      	subs	r3, #3
 800abd6:	2264      	movs	r2, #100	; 0x64
 800abd8:	e9cd 2300 	strd	r2, r3, [sp]
 800abdc:	4629      	mov	r1, r5
 800abde:	465b      	mov	r3, fp
 800abe0:	4632      	mov	r2, r6
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 fff6 	bl	800bbd4 <acc_confprogram_patch_offset>
 800abe8:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	23e1      	movs	r3, #225	; 0xe1
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	4632      	mov	r2, r6
 800abf4:	465b      	mov	r3, fp
 800abf6:	4629      	mov	r1, r5
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 ffeb 	bl	800bbd4 <acc_confprogram_patch_offset>
 800abfe:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	23f1      	movs	r3, #241	; 0xf1
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	4632      	mov	r2, r6
 800ac0a:	465b      	mov	r3, fp
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 ffe0 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ac14:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	2381      	movs	r3, #129	; 0x81
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	4632      	mov	r2, r6
 800ac20:	465b      	mov	r3, fp
 800ac22:	4629      	mov	r1, r5
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 ffd5 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ac2a:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	23e7      	movs	r3, #231	; 0xe7
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	4632      	mov	r2, r6
 800ac36:	465b      	mov	r3, fp
 800ac38:	4629      	mov	r1, r5
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 ffca 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ac40:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	237f      	movs	r3, #127	; 0x7f
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	4632      	mov	r2, r6
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 ffbf 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ac56:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	23cc      	movs	r3, #204	; 0xcc
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	4632      	mov	r2, r6
 800ac62:	465b      	mov	r3, fp
 800ac64:	4629      	mov	r1, r5
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 ffb4 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ac6c:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	2387      	movs	r3, #135	; 0x87
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	4632      	mov	r2, r6
 800ac78:	465b      	mov	r3, fp
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 ffa9 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ac82:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	237e      	movs	r3, #126	; 0x7e
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	465b      	mov	r3, fp
 800ac90:	4629      	mov	r1, r5
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 ff9e 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ac98:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	23ca      	movs	r3, #202	; 0xca
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	4632      	mov	r2, r6
 800aca4:	465b      	mov	r3, fp
 800aca6:	4629      	mov	r1, r5
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 ff93 	bl	800bbd4 <acc_confprogram_patch_offset>
 800acae:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	2386      	movs	r3, #134	; 0x86
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	4632      	mov	r2, r6
 800acba:	465b      	mov	r3, fp
 800acbc:	4629      	mov	r1, r5
 800acbe:	4620      	mov	r0, r4
 800acc0:	f000 ff88 	bl	800bbd4 <acc_confprogram_patch_offset>
 800acc4:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	23cb      	movs	r3, #203	; 0xcb
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	4632      	mov	r2, r6
 800acd0:	465b      	mov	r3, fp
 800acd2:	4629      	mov	r1, r5
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 ff7d 	bl	800bbd4 <acc_confprogram_patch_offset>
 800acda:	f898 7070 	ldrb.w	r7, [r8, #112]	; 0x70
 800acde:	2f00      	cmp	r7, #0
 800ace0:	f040 8237 	bne.w	800b152 <acc_cpd_sparse_sweep_load_program+0x64e>
 800ace4:	23da      	movs	r3, #218	; 0xda
 800ace6:	2201      	movs	r2, #1
 800ace8:	e9cd 3200 	strd	r3, r2, [sp]
 800acec:	4629      	mov	r1, r5
 800acee:	465b      	mov	r3, fp
 800acf0:	4632      	mov	r2, r6
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 ff6e 	bl	800bbd4 <acc_confprogram_patch_offset>
 800acf8:	23db      	movs	r3, #219	; 0xdb
 800acfa:	e9cd 3700 	strd	r3, r7, [sp]
 800acfe:	4632      	mov	r2, r6
 800ad00:	465b      	mov	r3, fp
 800ad02:	4629      	mov	r1, r5
 800ad04:	4620      	mov	r0, r4
 800ad06:	f000 ff65 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ad0a:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 800ad0e:	22e6      	movs	r2, #230	; 0xe6
 800ad10:	3b01      	subs	r3, #1
 800ad12:	e9cd 2300 	strd	r2, r3, [sp]
 800ad16:	4629      	mov	r1, r5
 800ad18:	465b      	mov	r3, fp
 800ad1a:	4632      	mov	r2, r6
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 ff59 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ad22:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	23d7      	movs	r3, #215	; 0xd7
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	465b      	mov	r3, fp
 800ad30:	4629      	mov	r1, r5
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 ff4e 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ad38:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	2378      	movs	r3, #120	; 0x78
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	4632      	mov	r2, r6
 800ad44:	465b      	mov	r3, fp
 800ad46:	4629      	mov	r1, r5
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 ff43 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ad4e:	edd8 7a20 	vldr	s15, [r8, #128]	; 0x80
 800ad52:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ad56:	22e8      	movs	r2, #232	; 0xe8
 800ad58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad5c:	9200      	str	r2, [sp, #0]
 800ad5e:	ee17 3a90 	vmov	r3, s15
 800ad62:	3b01      	subs	r3, #1
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	4632      	mov	r2, r6
 800ad6a:	465b      	mov	r3, fp
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 ff30 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ad74:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	23d8      	movs	r3, #216	; 0xd8
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	4632      	mov	r2, r6
 800ad80:	465b      	mov	r3, fp
 800ad82:	4629      	mov	r1, r5
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 ff25 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ad8a:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f040 82af 	bne.w	800b2f2 <acc_cpd_sparse_sweep_load_program+0x7ee>
 800ad94:	9b04      	ldr	r3, [sp, #16]
 800ad96:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ad9a:	ee19 2a10 	vmov	r2, s18
 800ad9e:	ee18 0a90 	vmov	r0, s17
 800ada2:	f7fe fbbd 	bl	8009520 <acc_sensor_r2_load_confmem>
 800ada6:	9903      	ldr	r1, [sp, #12]
 800ada8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adaa:	f240 726d 	movw	r2, #1901	; 0x76d
 800adae:	4419      	add	r1, r3
 800adb0:	4291      	cmp	r1, r2
 800adb2:	9103      	str	r1, [sp, #12]
 800adb4:	f200 82ac 	bhi.w	800b310 <acc_cpd_sparse_sweep_load_program+0x80c>
 800adb8:	9d03      	ldr	r5, [sp, #12]
 800adba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800adbc:	4868      	ldr	r0, [pc, #416]	; (800af60 <acc_cpd_sparse_sweep_load_program+0x45c>)
 800adbe:	f5c5 62ed 	rsb	r2, r5, #1896	; 0x768
 800adc2:	3206      	adds	r2, #6
 800adc4:	429a      	cmp	r2, r3
 800adc6:	4616      	mov	r6, r2
 800adc8:	bf28      	it	cs
 800adca:	461e      	movcs	r6, r3
 800adcc:	086b      	lsrs	r3, r5, #1
 800adce:	0872      	lsrs	r2, r6, #1
 800add0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800add4:	4621      	mov	r1, r4
 800add6:	9604      	str	r6, [sp, #16]
 800add8:	9305      	str	r3, [sp, #20]
 800adda:	f000 fff3 	bl	800bdc4 <acc_confprogram_copy>
 800adde:	f8d8 3000 	ldr.w	r3, [r8]
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	b2b6      	uxth	r6, r6
 800ade6:	b2ad      	uxth	r5, r5
 800ade8:	23d5      	movs	r3, #213	; 0xd5
 800adea:	4632      	mov	r2, r6
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	465b      	mov	r3, fp
 800adf4:	f000 feee 	bl	800bbd4 <acc_confprogram_patch_offset>
 800adf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	23d3      	movs	r3, #211	; 0xd3
 800ae00:	4632      	mov	r2, r6
 800ae02:	4629      	mov	r1, r5
 800ae04:	4620      	mov	r0, r4
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	465b      	mov	r3, fp
 800ae0a:	f000 fee3 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ae0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae12:	9301      	str	r3, [sp, #4]
 800ae14:	23d4      	movs	r3, #212	; 0xd4
 800ae16:	4632      	mov	r2, r6
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	465b      	mov	r3, fp
 800ae20:	f000 fed8 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ae24:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	23d1      	movs	r3, #209	; 0xd1
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4620      	mov	r0, r4
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	465b      	mov	r3, fp
 800ae36:	f000 fecd 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ae3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	2365      	movs	r3, #101	; 0x65
 800ae42:	4632      	mov	r2, r6
 800ae44:	4629      	mov	r1, r5
 800ae46:	4620      	mov	r0, r4
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	465b      	mov	r3, fp
 800ae4c:	f000 fec2 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ae50:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	23f3      	movs	r3, #243	; 0xf3
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	465b      	mov	r3, fp
 800ae62:	f000 feb7 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ae66:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800ae6a:	9301      	str	r3, [sp, #4]
 800ae6c:	23eb      	movs	r3, #235	; 0xeb
 800ae6e:	4632      	mov	r2, r6
 800ae70:	4629      	mov	r1, r5
 800ae72:	4620      	mov	r0, r4
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	465b      	mov	r3, fp
 800ae78:	f000 feac 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ae7c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	23ff      	movs	r3, #255	; 0xff
 800ae84:	4632      	mov	r2, r6
 800ae86:	4629      	mov	r1, r5
 800ae88:	4620      	mov	r0, r4
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	465b      	mov	r3, fp
 800ae8e:	f000 fea1 	bl	800bbd4 <acc_confprogram_patch_offset>
 800ae92:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	23e3      	movs	r3, #227	; 0xe3
 800ae9a:	4632      	mov	r2, r6
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	4620      	mov	r0, r4
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	465b      	mov	r3, fp
 800aea4:	f000 fe96 	bl	800bbd4 <acc_confprogram_patch_offset>
 800aea8:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	23e4      	movs	r3, #228	; 0xe4
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	465b      	mov	r3, fp
 800aeba:	f000 fe8b 	bl	800bbd4 <acc_confprogram_patch_offset>
 800aebe:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	2383      	movs	r3, #131	; 0x83
 800aec6:	4632      	mov	r2, r6
 800aec8:	4629      	mov	r1, r5
 800aeca:	4620      	mov	r0, r4
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	465b      	mov	r3, fp
 800aed0:	f000 fe80 	bl	800bbd4 <acc_confprogram_patch_offset>
 800aed4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	2384      	movs	r3, #132	; 0x84
 800aedc:	4632      	mov	r2, r6
 800aede:	4629      	mov	r1, r5
 800aee0:	4620      	mov	r0, r4
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	465b      	mov	r3, fp
 800aee6:	f000 fe75 	bl	800bbd4 <acc_confprogram_patch_offset>
 800aeea:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800aeee:	9301      	str	r3, [sp, #4]
 800aef0:	2382      	movs	r3, #130	; 0x82
 800aef2:	4632      	mov	r2, r6
 800aef4:	4629      	mov	r1, r5
 800aef6:	4620      	mov	r0, r4
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	2700      	movs	r7, #0
 800aefc:	465b      	mov	r3, fp
 800aefe:	f000 fe69 	bl	800bbd4 <acc_confprogram_patch_offset>
 800af02:	4632      	mov	r2, r6
 800af04:	4629      	mov	r1, r5
 800af06:	4620      	mov	r0, r4
 800af08:	465b      	mov	r3, fp
 800af0a:	e9cd 7700 	strd	r7, r7, [sp]
 800af0e:	f000 fe61 	bl	800bbd4 <acc_confprogram_patch_offset>
 800af12:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	23f2      	movs	r3, #242	; 0xf2
 800af1a:	4632      	mov	r2, r6
 800af1c:	4629      	mov	r1, r5
 800af1e:	4620      	mov	r0, r4
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	465b      	mov	r3, fp
 800af24:	f000 fe56 	bl	800bbd4 <acc_confprogram_patch_offset>
 800af28:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	23d9      	movs	r3, #217	; 0xd9
 800af30:	4632      	mov	r2, r6
 800af32:	4629      	mov	r1, r5
 800af34:	4620      	mov	r0, r4
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	465b      	mov	r3, fp
 800af3a:	f000 fe4b 	bl	800bbd4 <acc_confprogram_patch_offset>
 800af3e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	237b      	movs	r3, #123	; 0x7b
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	4632      	mov	r2, r6
 800af4a:	465b      	mov	r3, fp
 800af4c:	4629      	mov	r1, r5
 800af4e:	4620      	mov	r0, r4
 800af50:	f000 fe40 	bl	800bbd4 <acc_confprogram_patch_offset>
 800af54:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f040 815b 	bne.w	800b214 <acc_cpd_sparse_sweep_load_program+0x710>
 800af5e:	e001      	b.n	800af64 <acc_cpd_sparse_sweep_load_program+0x460>
 800af60:	080100a0 	.word	0x080100a0
 800af64:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	2389      	movs	r3, #137	; 0x89
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	4632      	mov	r2, r6
 800af70:	465b      	mov	r3, fp
 800af72:	4629      	mov	r1, r5
 800af74:	4620      	mov	r0, r4
 800af76:	f000 fe2d 	bl	800bbd4 <acc_confprogram_patch_offset>
 800af7a:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 800af7e:	9301      	str	r3, [sp, #4]
 800af80:	23d6      	movs	r3, #214	; 0xd6
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	4632      	mov	r2, r6
 800af86:	465b      	mov	r3, fp
 800af88:	4629      	mov	r1, r5
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 fe22 	bl	800bbd4 <acc_confprogram_patch_offset>
 800af90:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	23f6      	movs	r3, #246	; 0xf6
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	4632      	mov	r2, r6
 800af9c:	465b      	mov	r3, fp
 800af9e:	4629      	mov	r1, r5
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 fe17 	bl	800bbd4 <acc_confprogram_patch_offset>
 800afa6:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800afaa:	9301      	str	r3, [sp, #4]
 800afac:	2385      	movs	r3, #133	; 0x85
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	4632      	mov	r2, r6
 800afb2:	465b      	mov	r3, fp
 800afb4:	4629      	mov	r1, r5
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 fe0c 	bl	800bbd4 <acc_confprogram_patch_offset>
 800afbc:	f8d8 705c 	ldr.w	r7, [r8, #92]	; 0x5c
 800afc0:	b2bb      	uxth	r3, r7
 800afc2:	2b08      	cmp	r3, #8
 800afc4:	f200 8110 	bhi.w	800b1e8 <acc_cpd_sparse_sweep_load_program+0x6e4>
 800afc8:	4699      	mov	r9, r3
 800afca:	2700      	movs	r7, #0
 800afcc:	23ec      	movs	r3, #236	; 0xec
 800afce:	e9cd 3900 	strd	r3, r9, [sp]
 800afd2:	4632      	mov	r2, r6
 800afd4:	465b      	mov	r3, fp
 800afd6:	4629      	mov	r1, r5
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fdfb 	bl	800bbd4 <acc_confprogram_patch_offset>
 800afde:	23dc      	movs	r3, #220	; 0xdc
 800afe0:	4632      	mov	r2, r6
 800afe2:	e9cd 3900 	strd	r3, r9, [sp]
 800afe6:	4629      	mov	r1, r5
 800afe8:	465b      	mov	r3, fp
 800afea:	4620      	mov	r0, r4
 800afec:	f000 fdf2 	bl	800bbd4 <acc_confprogram_patch_offset>
 800aff0:	21ee      	movs	r1, #238	; 0xee
 800aff2:	4658      	mov	r0, fp
 800aff4:	f000 fee2 	bl	800bdbc <acc_confprogram_get_default_value>
 800aff8:	21f0      	movs	r1, #240	; 0xf0
 800affa:	4603      	mov	r3, r0
 800affc:	4658      	mov	r0, fp
 800affe:	930a      	str	r3, [sp, #40]	; 0x28
 800b000:	f000 fedc 	bl	800bdbc <acc_confprogram_get_default_value>
 800b004:	21ef      	movs	r1, #239	; 0xef
 800b006:	4682      	mov	sl, r0
 800b008:	4658      	mov	r0, fp
 800b00a:	f000 fed7 	bl	800bdbc <acc_confprogram_get_default_value>
 800b00e:	21de      	movs	r1, #222	; 0xde
 800b010:	4681      	mov	r9, r0
 800b012:	4658      	mov	r0, fp
 800b014:	f000 fed2 	bl	800bdbc <acc_confprogram_get_default_value>
 800b018:	21e0      	movs	r1, #224	; 0xe0
 800b01a:	4602      	mov	r2, r0
 800b01c:	4658      	mov	r0, fp
 800b01e:	9202      	str	r2, [sp, #8]
 800b020:	f000 fecc 	bl	800bdbc <acc_confprogram_get_default_value>
 800b024:	21df      	movs	r1, #223	; 0xdf
 800b026:	4602      	mov	r2, r0
 800b028:	4658      	mov	r0, fp
 800b02a:	9206      	str	r2, [sp, #24]
 800b02c:	f000 fec6 	bl	800bdbc <acc_confprogram_get_default_value>
 800b030:	21d0      	movs	r1, #208	; 0xd0
 800b032:	4602      	mov	r2, r0
 800b034:	4658      	mov	r0, fp
 800b036:	9207      	str	r2, [sp, #28]
 800b038:	f000 fec0 	bl	800bdbc <acc_confprogram_get_default_value>
 800b03c:	2188      	movs	r1, #136	; 0x88
 800b03e:	4602      	mov	r2, r0
 800b040:	4658      	mov	r0, fp
 800b042:	9208      	str	r2, [sp, #32]
 800b044:	f000 feba 	bl	800bdbc <acc_confprogram_get_default_value>
 800b048:	2121      	movs	r1, #33	; 0x21
 800b04a:	4602      	mov	r2, r0
 800b04c:	4658      	mov	r0, fp
 800b04e:	9209      	str	r2, [sp, #36]	; 0x24
 800b050:	f000 feb4 	bl	800bdbc <acc_confprogram_get_default_value>
 800b054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b056:	21ee      	movs	r1, #238	; 0xee
 800b058:	433b      	orrs	r3, r7
 800b05a:	4684      	mov	ip, r0
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	9100      	str	r1, [sp, #0]
 800b060:	465b      	mov	r3, fp
 800b062:	4632      	mov	r2, r6
 800b064:	4629      	mov	r1, r5
 800b066:	4620      	mov	r0, r4
 800b068:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800b06c:	f000 fdb2 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b070:	ea47 030a 	orr.w	r3, r7, sl
 800b074:	21f0      	movs	r1, #240	; 0xf0
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	9100      	str	r1, [sp, #0]
 800b07a:	465b      	mov	r3, fp
 800b07c:	4632      	mov	r2, r6
 800b07e:	4629      	mov	r1, r5
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fda7 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b086:	ea47 0309 	orr.w	r3, r7, r9
 800b08a:	22ef      	movs	r2, #239	; 0xef
 800b08c:	e9cd 2300 	strd	r2, r3, [sp]
 800b090:	4629      	mov	r1, r5
 800b092:	465b      	mov	r3, fp
 800b094:	4632      	mov	r2, r6
 800b096:	4620      	mov	r0, r4
 800b098:	f000 fd9c 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b09c:	9b02      	ldr	r3, [sp, #8]
 800b09e:	22de      	movs	r2, #222	; 0xde
 800b0a0:	433b      	orrs	r3, r7
 800b0a2:	e9cd 2300 	strd	r2, r3, [sp]
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	465b      	mov	r3, fp
 800b0aa:	4632      	mov	r2, r6
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fd91 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b0b2:	9b06      	ldr	r3, [sp, #24]
 800b0b4:	22e0      	movs	r2, #224	; 0xe0
 800b0b6:	433b      	orrs	r3, r7
 800b0b8:	e9cd 2300 	strd	r2, r3, [sp]
 800b0bc:	4629      	mov	r1, r5
 800b0be:	465b      	mov	r3, fp
 800b0c0:	4632      	mov	r2, r6
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fd86 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b0c8:	9b07      	ldr	r3, [sp, #28]
 800b0ca:	22df      	movs	r2, #223	; 0xdf
 800b0cc:	433b      	orrs	r3, r7
 800b0ce:	e9cd 2300 	strd	r2, r3, [sp]
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fd7b 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b0de:	9b08      	ldr	r3, [sp, #32]
 800b0e0:	22d0      	movs	r2, #208	; 0xd0
 800b0e2:	433b      	orrs	r3, r7
 800b0e4:	e9cd 2300 	strd	r2, r3, [sp]
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	465b      	mov	r3, fp
 800b0ec:	4632      	mov	r2, r6
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 fd70 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f6:	2288      	movs	r2, #136	; 0x88
 800b0f8:	433b      	orrs	r3, r7
 800b0fa:	e9cd 2300 	strd	r2, r3, [sp]
 800b0fe:	4629      	mov	r1, r5
 800b100:	465b      	mov	r3, fp
 800b102:	4632      	mov	r2, r6
 800b104:	4620      	mov	r0, r4
 800b106:	f000 fd65 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10c:	431f      	orrs	r7, r3
 800b10e:	2321      	movs	r3, #33	; 0x21
 800b110:	e9cd 3700 	strd	r3, r7, [sp]
 800b114:	4632      	mov	r2, r6
 800b116:	465b      	mov	r3, fp
 800b118:	4629      	mov	r1, r5
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fd5a 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b120:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800b124:	2277      	movs	r2, #119	; 0x77
 800b126:	3b01      	subs	r3, #1
 800b128:	e9cd 2300 	strd	r2, r3, [sp]
 800b12c:	4629      	mov	r1, r5
 800b12e:	465b      	mov	r3, fp
 800b130:	4632      	mov	r2, r6
 800b132:	4620      	mov	r0, r4
 800b134:	f000 fd4e 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b138:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800b13c:	2b06      	cmp	r3, #6
 800b13e:	f63f ad0f 	bhi.w	800ab60 <acc_cpd_sparse_sweep_load_program+0x5c>
 800b142:	2b03      	cmp	r3, #3
 800b144:	f240 80e1 	bls.w	800b30a <acc_cpd_sparse_sweep_load_program+0x806>
 800b148:	f1a3 0903 	sub.w	r9, r3, #3
 800b14c:	2700      	movs	r7, #0
 800b14e:	2303      	movs	r3, #3
 800b150:	e509      	b.n	800ab66 <acc_cpd_sparse_sweep_load_program+0x62>
 800b152:	2700      	movs	r7, #0
 800b154:	23da      	movs	r3, #218	; 0xda
 800b156:	e9cd 3700 	strd	r3, r7, [sp]
 800b15a:	4632      	mov	r2, r6
 800b15c:	465b      	mov	r3, fp
 800b15e:	4629      	mov	r1, r5
 800b160:	4620      	mov	r0, r4
 800b162:	f000 fd37 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b166:	23db      	movs	r3, #219	; 0xdb
 800b168:	2201      	movs	r2, #1
 800b16a:	e9cd 3200 	strd	r3, r2, [sp]
 800b16e:	4629      	mov	r1, r5
 800b170:	465b      	mov	r3, fp
 800b172:	4632      	mov	r2, r6
 800b174:	4620      	mov	r0, r4
 800b176:	f000 fd2d 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b17a:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b17e:	4a67      	ldr	r2, [pc, #412]	; (800b31c <acc_cpd_sparse_sweep_load_program+0x818>)
 800b180:	46b9      	mov	r9, r7
 800b182:	46ba      	mov	sl, r7
 800b184:	3301      	adds	r3, #1
 800b186:	278a      	movs	r7, #138	; 0x8a
 800b188:	f8cd 9008 	str.w	r9, [sp, #8]
 800b18c:	9306      	str	r3, [sp, #24]
 800b18e:	46bc      	mov	ip, r7
 800b190:	4691      	mov	r9, r2
 800b192:	e01b      	b.n	800b1cc <acc_cpd_sparse_sweep_load_program+0x6c8>
 800b194:	e9cd ce00 	strd	ip, lr, [sp]
 800b198:	f000 fd1c 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b19c:	4b60      	ldr	r3, [pc, #384]	; (800b320 <acc_cpd_sparse_sweep_load_program+0x81c>)
 800b19e:	9a02      	ldr	r2, [sp, #8]
 800b1a0:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800b1a4:	e9cd 3200 	strd	r3, r2, [sp]
 800b1a8:	465b      	mov	r3, fp
 800b1aa:	4632      	mov	r2, r6
 800b1ac:	4629      	mov	r1, r5
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 fd10 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b1b4:	9a02      	ldr	r2, [sp, #8]
 800b1b6:	9b06      	ldr	r3, [sp, #24]
 800b1b8:	f10a 0a01 	add.w	sl, sl, #1
 800b1bc:	441a      	add	r2, r3
 800b1be:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800b1c2:	9202      	str	r2, [sp, #8]
 800b1c4:	f43f adad 	beq.w	800ad22 <acc_cpd_sparse_sweep_load_program+0x21e>
 800b1c8:	f839 cf02 	ldrh.w	ip, [r9, #2]!
 800b1cc:	f8d8 7060 	ldr.w	r7, [r8, #96]	; 0x60
 800b1d0:	4557      	cmp	r7, sl
 800b1d2:	f04f 0e01 	mov.w	lr, #1
 800b1d6:	465b      	mov	r3, fp
 800b1d8:	4632      	mov	r2, r6
 800b1da:	4629      	mov	r1, r5
 800b1dc:	4620      	mov	r0, r4
 800b1de:	d8d9      	bhi.n	800b194 <acc_cpd_sparse_sweep_load_program+0x690>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e9cd c300 	strd	ip, r3, [sp]
 800b1e6:	e7df      	b.n	800b1a8 <acc_cpd_sparse_sweep_load_program+0x6a4>
 800b1e8:	fa1f f987 	uxth.w	r9, r7
 800b1ec:	23e5      	movs	r3, #229	; 0xe5
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f1a9 0908 	sub.w	r9, r9, #8
 800b1f4:	27ff      	movs	r7, #255	; 0xff
 800b1f6:	e9cd 3200 	strd	r3, r2, [sp]
 800b1fa:	fa07 f709 	lsl.w	r7, r7, r9
 800b1fe:	465b      	mov	r3, fp
 800b200:	4632      	mov	r2, r6
 800b202:	4629      	mov	r1, r5
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fce5 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b20a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800b20e:	f04f 0908 	mov.w	r9, #8
 800b212:	e6db      	b.n	800afcc <acc_cpd_sparse_sweep_load_program+0x4c8>
 800b214:	230f      	movs	r3, #15
 800b216:	2201      	movs	r2, #1
 800b218:	e9cd 3200 	strd	r3, r2, [sp]
 800b21c:	4629      	mov	r1, r5
 800b21e:	465b      	mov	r3, fp
 800b220:	4632      	mov	r2, r6
 800b222:	4620      	mov	r0, r4
 800b224:	f000 fcd6 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b228:	f64f 7a80 	movw	sl, #65408	; 0xff80
 800b22c:	2311      	movs	r3, #17
 800b22e:	e9cd 3a00 	strd	r3, sl, [sp]
 800b232:	4632      	mov	r2, r6
 800b234:	465b      	mov	r3, fp
 800b236:	4629      	mov	r1, r5
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fccb 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b23e:	f04f 0907 	mov.w	r9, #7
 800b242:	2313      	movs	r3, #19
 800b244:	e9cd 3900 	strd	r3, r9, [sp]
 800b248:	4632      	mov	r2, r6
 800b24a:	465b      	mov	r3, fp
 800b24c:	4629      	mov	r1, r5
 800b24e:	4620      	mov	r0, r4
 800b250:	f000 fcc0 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b254:	2310      	movs	r3, #16
 800b256:	e9cd 3a00 	strd	r3, sl, [sp]
 800b25a:	4632      	mov	r2, r6
 800b25c:	465b      	mov	r3, fp
 800b25e:	4629      	mov	r1, r5
 800b260:	4620      	mov	r0, r4
 800b262:	f000 fcb7 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b266:	2312      	movs	r3, #18
 800b268:	e9cd 3700 	strd	r3, r7, [sp]
 800b26c:	4632      	mov	r2, r6
 800b26e:	465b      	mov	r3, fp
 800b270:	4629      	mov	r1, r5
 800b272:	4620      	mov	r0, r4
 800b274:	f000 fcae 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b278:	2314      	movs	r3, #20
 800b27a:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 800b27e:	e9cd 3200 	strd	r3, r2, [sp]
 800b282:	4629      	mov	r1, r5
 800b284:	465b      	mov	r3, fp
 800b286:	4632      	mov	r2, r6
 800b288:	4620      	mov	r0, r4
 800b28a:	f000 fca3 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b28e:	2315      	movs	r3, #21
 800b290:	e9cd 3900 	strd	r3, r9, [sp]
 800b294:	4632      	mov	r2, r6
 800b296:	465b      	mov	r3, fp
 800b298:	4629      	mov	r1, r5
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 fc9a 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b2a0:	230d      	movs	r3, #13
 800b2a2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800b2a6:	e9cd 3200 	strd	r3, r2, [sp]
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	465b      	mov	r3, fp
 800b2ae:	4632      	mov	r2, r6
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fc8f 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b2b6:	230e      	movs	r3, #14
 800b2b8:	e9cd 3900 	strd	r3, r9, [sp]
 800b2bc:	4632      	mov	r2, r6
 800b2be:	465b      	mov	r3, fp
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 fc86 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b2c8:	2316      	movs	r3, #22
 800b2ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2ce:	e9cd 3200 	strd	r3, r2, [sp]
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	465b      	mov	r3, fp
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 fc7b 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b2de:	2317      	movs	r3, #23
 800b2e0:	e9cd 3900 	strd	r3, r9, [sp]
 800b2e4:	4632      	mov	r2, r6
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fc72 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b2f0:	e638      	b.n	800af64 <acc_cpd_sparse_sweep_load_program+0x460>
 800b2f2:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 800b2f6:	9301      	str	r3, [sp, #4]
 800b2f8:	2371      	movs	r3, #113	; 0x71
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	4632      	mov	r2, r6
 800b2fe:	4629      	mov	r1, r5
 800b300:	4620      	mov	r0, r4
 800b302:	465b      	mov	r3, fp
 800b304:	f000 fc66 	bl	800bbd4 <acc_confprogram_patch_offset>
 800b308:	e544      	b.n	800ad94 <acc_cpd_sparse_sweep_load_program+0x290>
 800b30a:	2700      	movs	r7, #0
 800b30c:	46b9      	mov	r9, r7
 800b30e:	e42a      	b.n	800ab66 <acc_cpd_sparse_sweep_load_program+0x62>
 800b310:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b312:	b00f      	add	sp, #60	; 0x3c
 800b314:	ecbd 8b04 	vpop	{d8-d9}
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31c:	080124ec 	.word	0x080124ec
 800b320:	0801246c 	.word	0x0801246c

0800b324 <acc_cpd_sparse_sweep_run_program>:
 800b324:	f240 11e9 	movw	r1, #489	; 0x1e9
 800b328:	f7fe bc4e 	b.w	8009bc8 <acc_sensor_protocol_r2_run_program>

0800b32c <acc_cpd_sparse_sweep_update_program>:
 800b32c:	780b      	ldrb	r3, [r1, #0]
 800b32e:	b90b      	cbnz	r3, 800b334 <acc_cpd_sparse_sweep_update_program+0x8>
 800b330:	2001      	movs	r0, #1
 800b332:	4770      	bx	lr
 800b334:	b500      	push	{lr}
 800b336:	b085      	sub	sp, #20
 800b338:	684b      	ldr	r3, [r1, #4]
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	4a06      	ldr	r2, [pc, #24]	; (800b358 <acc_cpd_sparse_sweep_update_program+0x2c>)
 800b33e:	9202      	str	r2, [sp, #8]
 800b340:	23f2      	movs	r3, #242	; 0xf2
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	4905      	ldr	r1, [pc, #20]	; (800b35c <acc_cpd_sparse_sweep_update_program+0x30>)
 800b346:	4b06      	ldr	r3, [pc, #24]	; (800b360 <acc_cpd_sparse_sweep_update_program+0x34>)
 800b348:	2200      	movs	r2, #0
 800b34a:	f000 fccb 	bl	800bce4 <acc_confprogram_live_patch>
 800b34e:	2001      	movs	r0, #1
 800b350:	b005      	add	sp, #20
 800b352:	f85d fb04 	ldr.w	pc, [sp], #4
 800b356:	bf00      	nop
 800b358:	080094c5 	.word	0x080094c5
 800b35c:	080100a0 	.word	0x080100a0
 800b360:	080137dc 	.word	0x080137dc

0800b364 <acc_radar_engine_check_asic_id>:
 800b364:	6800      	ldr	r0, [r0, #0]
 800b366:	2100      	movs	r1, #0
 800b368:	f7fe be48 	b.w	8009ffc <acc_sensor_protocol_r2_check_asic_id>

0800b36c <acc_radar_engine_wait_for_radar_data>:
 800b36c:	6800      	ldr	r0, [r0, #0]
 800b36e:	f7fe bdb3 	b.w	8009ed8 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b372:	bf00      	nop

0800b374 <acc_radar_engine_measure>:
 800b374:	6800      	ldr	r0, [r0, #0]
 800b376:	f7fe bc89 	b.w	8009c8c <acc_sensor_protocol_r2_ack_event>
 800b37a:	bf00      	nop

0800b37c <acc_radar_engine_wait_for_hibernate_ready>:
 800b37c:	6800      	ldr	r0, [r0, #0]
 800b37e:	f7fe bda7 	b.w	8009ed0 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800b382:	bf00      	nop

0800b384 <acc_radar_engine_acquire_adc_data>:
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	ed2d 8b02 	vpush	{d8}
 800b38c:	2600      	movs	r6, #0
 800b38e:	6016      	str	r6, [r2, #0]
 800b390:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800b394:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800b4ac <acc_radar_engine_acquire_adc_data+0x128>
 800b398:	7bc3      	ldrb	r3, [r0, #15]
 800b39a:	f890 800e 	ldrb.w	r8, [r0, #14]
 800b39e:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800b3a2:	7316      	strb	r6, [r2, #12]
 800b3a4:	b089      	sub	sp, #36	; 0x24
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	7116      	strb	r6, [r2, #4]
 800b3aa:	f88d 600e 	strb.w	r6, [sp, #14]
 800b3ae:	f88d 600f 	strb.w	r6, [sp, #15]
 800b3b2:	9301      	str	r3, [sp, #4]
 800b3b4:	ed82 8a02 	vstr	s16, [r2, #8]
 800b3b8:	f1ba 0f00 	cmp.w	sl, #0
 800b3bc:	d05b      	beq.n	800b476 <acc_radar_engine_acquire_adc_data+0xf2>
 800b3be:	4647      	mov	r7, r8
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	4688      	mov	r8, r1
 800b3c6:	b927      	cbnz	r7, 800b3d2 <acc_radar_engine_acquire_adc_data+0x4e>
 800b3c8:	6828      	ldr	r0, [r5, #0]
 800b3ca:	f7fe fc5f 	bl	8009c8c <acc_sensor_protocol_r2_ack_event>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d05e      	beq.n	800b490 <acc_radar_engine_acquire_adc_data+0x10c>
 800b3d2:	6828      	ldr	r0, [r5, #0]
 800b3d4:	f10d 020e 	add.w	r2, sp, #14
 800b3d8:	4659      	mov	r1, fp
 800b3da:	f7fe fd7d 	bl	8009ed8 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d056      	beq.n	800b490 <acc_radar_engine_acquire_adc_data+0x10c>
 800b3e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b3e6:	b903      	cbnz	r3, 800b3ea <acc_radar_engine_acquire_adc_data+0x66>
 800b3e8:	78a3      	ldrb	r3, [r4, #2]
 800b3ea:	69aa      	ldr	r2, [r5, #24]
 800b3ec:	70a3      	strb	r3, [r4, #2]
 800b3ee:	4641      	mov	r1, r8
 800b3f0:	6953      	ldr	r3, [r2, #20]
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f10d 020f 	add.w	r2, sp, #15
 800b3f8:	4798      	blx	r3
 800b3fa:	69aa      	ldr	r2, [r5, #24]
 800b3fc:	9004      	str	r0, [sp, #16]
 800b3fe:	2300      	movs	r3, #0
 800b400:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b404:	f88d 3014 	strb.w	r3, [sp, #20]
 800b408:	f88d 301c 	strb.w	r3, [sp, #28]
 800b40c:	ed8d 8a06 	vstr	s16, [sp, #24]
 800b410:	ab05      	add	r3, sp, #20
 800b412:	aa04      	add	r2, sp, #16
 800b414:	4641      	mov	r1, r8
 800b416:	4628      	mov	r0, r5
 800b418:	47c8      	blx	r9
 800b41a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b41e:	b903      	cbnz	r3, 800b422 <acc_radar_engine_acquire_adc_data+0x9e>
 800b420:	7b23      	ldrb	r3, [r4, #12]
 800b422:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800b426:	7323      	strb	r3, [r4, #12]
 800b428:	f1b9 0f00 	cmp.w	r9, #0
 800b42c:	d129      	bne.n	800b482 <acc_radar_engine_acquire_adc_data+0xfe>
 800b42e:	7923      	ldrb	r3, [r4, #4]
 800b430:	edd4 0a02 	vldr	s1, [r4, #8]
 800b434:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b438:	7123      	strb	r3, [r4, #4]
 800b43a:	f003 fcf9 	bl	800ee30 <fmaxf>
 800b43e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b442:	ed84 0a02 	vstr	s0, [r4, #8]
 800b446:	b902      	cbnz	r2, 800b44a <acc_radar_engine_acquire_adc_data+0xc6>
 800b448:	78e2      	ldrb	r2, [r4, #3]
 800b44a:	8821      	ldrh	r1, [r4, #0]
 800b44c:	9b04      	ldr	r3, [sp, #16]
 800b44e:	70e2      	strb	r2, [r4, #3]
 800b450:	69aa      	ldr	r2, [r5, #24]
 800b452:	440b      	add	r3, r1
 800b454:	8023      	strh	r3, [r4, #0]
 800b456:	4649      	mov	r1, r9
 800b458:	69d3      	ldr	r3, [r2, #28]
 800b45a:	4628      	mov	r0, r5
 800b45c:	4798      	blx	r3
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	b11b      	cbz	r3, 800b46a <acc_radar_engine_acquire_adc_data+0xe6>
 800b462:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b466:	42b3      	cmp	r3, r6
 800b468:	d018      	beq.n	800b49c <acc_radar_engine_acquire_adc_data+0x118>
 800b46a:	b967      	cbnz	r7, 800b486 <acc_radar_engine_acquire_adc_data+0x102>
 800b46c:	3601      	adds	r6, #1
 800b46e:	b2b3      	uxth	r3, r6
 800b470:	4553      	cmp	r3, sl
 800b472:	d3a8      	bcc.n	800b3c6 <acc_radar_engine_acquire_adc_data+0x42>
 800b474:	4647      	mov	r7, r8
 800b476:	6838      	ldr	r0, [r7, #0]
 800b478:	b009      	add	sp, #36	; 0x24
 800b47a:	ecbd 8b02 	vpop	{d8}
 800b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b482:	464b      	mov	r3, r9
 800b484:	e7d4      	b.n	800b430 <acc_radar_engine_acquire_adc_data+0xac>
 800b486:	6828      	ldr	r0, [r5, #0]
 800b488:	f7fe fc00 	bl	8009c8c <acc_sensor_protocol_r2_ack_event>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d1ed      	bne.n	800b46c <acc_radar_engine_acquire_adc_data+0xe8>
 800b490:	2000      	movs	r0, #0
 800b492:	b009      	add	sp, #36	; 0x24
 800b494:	ecbd 8b02 	vpop	{d8}
 800b498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49c:	f8d8 0000 	ldr.w	r0, [r8]
 800b4a0:	b009      	add	sp, #36	; 0x24
 800b4a2:	ecbd 8b02 	vpop	{d8}
 800b4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4aa:	bf00      	nop
 800b4ac:	ff800000 	.word	0xff800000

0800b4b0 <acc_sensor_diagnostics_r2_sensor_status>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	b094      	sub	sp, #80	; 0x50
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	f7fc fa92 	bl	80079e0 <acc_rss_integration_log_level>
 800b4bc:	2801      	cmp	r0, #1
 800b4be:	d905      	bls.n	800b4cc <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800b4c0:	4b9c      	ldr	r3, [pc, #624]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b4c2:	4a9d      	ldr	r2, [pc, #628]	; (800b738 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c6:	499d      	ldr	r1, [pc, #628]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b4c8:	2002      	movs	r0, #2
 800b4ca:	4798      	blx	r3
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	21b2      	movs	r1, #178	; 0xb2
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7fe ffc5 	bl	800a460 <acc_sensor_reg_write>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f8df a258 	ldr.w	sl, [pc, #600]	; 800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800b4dc:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800b768 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800b4e0:	4f96      	ldr	r7, [pc, #600]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b4e2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800b4e6:	2564      	movs	r5, #100	; 0x64
 800b4e8:	e013      	b.n	800b512 <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800b4ea:	f7fc fa79 	bl	80079e0 <acc_rss_integration_log_level>
 800b4ee:	2801      	cmp	r0, #1
 800b4f0:	4623      	mov	r3, r4
 800b4f2:	464a      	mov	r2, r9
 800b4f4:	4639      	mov	r1, r7
 800b4f6:	f04f 0002 	mov.w	r0, #2
 800b4fa:	d907      	bls.n	800b50c <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800b4fc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800b500:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b504:	9600      	str	r6, [sp, #0]
 800b506:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800b50a:	47b0      	blx	r6
 800b50c:	3d01      	subs	r5, #1
 800b50e:	b2ad      	uxth	r5, r5
 800b510:	b1c5      	cbz	r5, 800b544 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b512:	aa0c      	add	r2, sp, #48	; 0x30
 800b514:	2111      	movs	r1, #17
 800b516:	4620      	mov	r0, r4
 800b518:	f7fe ff8c 	bl	800a434 <acc_sensor_reg_read>
 800b51c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b520:	055b      	lsls	r3, r3, #21
 800b522:	d4e2      	bmi.n	800b4ea <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800b524:	f7fc fa5c 	bl	80079e0 <acc_rss_integration_log_level>
 800b528:	2801      	cmp	r0, #1
 800b52a:	d90b      	bls.n	800b544 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b52c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b530:	4980      	ldr	r1, [pc, #512]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b532:	4a83      	ldr	r2, [pc, #524]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800b534:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b536:	4981      	ldr	r1, [pc, #516]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	2002      	movs	r0, #2
 800b540:	4623      	mov	r3, r4
 800b542:	47a8      	blx	r5
 800b544:	2600      	movs	r6, #0
 800b546:	4631      	mov	r1, r6
 800b548:	aa09      	add	r2, sp, #36	; 0x24
 800b54a:	4620      	mov	r0, r4
 800b54c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800b550:	4d7c      	ldr	r5, [pc, #496]	; (800b744 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800b552:	f7fe ff6f 	bl	800a434 <acc_sensor_reg_read>
 800b556:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b55a:	212a      	movs	r1, #42	; 0x2a
 800b55c:	4620      	mov	r0, r4
 800b55e:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800b562:	f7fe ff67 	bl	800a434 <acc_sensor_reg_read>
 800b566:	2128      	movs	r1, #40	; 0x28
 800b568:	aa0a      	add	r2, sp, #40	; 0x28
 800b56a:	4620      	mov	r0, r4
 800b56c:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800b570:	f105 071e 	add.w	r7, r5, #30
 800b574:	f7fe ff5e 	bl	800a434 <acc_sensor_reg_read>
 800b578:	ae0c      	add	r6, sp, #48	; 0x30
 800b57a:	2163      	movs	r1, #99	; 0x63
 800b57c:	e001      	b.n	800b582 <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800b57e:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b582:	4632      	mov	r2, r6
 800b584:	4620      	mov	r0, r4
 800b586:	f7fe ff55 	bl	800a434 <acc_sensor_reg_read>
 800b58a:	42af      	cmp	r7, r5
 800b58c:	f106 0602 	add.w	r6, r6, #2
 800b590:	d1f5      	bne.n	800b57e <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800b592:	f7fc fa25 	bl	80079e0 <acc_rss_integration_log_level>
 800b596:	2801      	cmp	r0, #1
 800b598:	d91e      	bls.n	800b5d8 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800b59a:	4d66      	ldr	r5, [pc, #408]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b59c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800b5a0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800b5a4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b5a6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800b5aa:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b5ae:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800b5b2:	9107      	str	r1, [sp, #28]
 800b5b4:	9206      	str	r2, [sp, #24]
 800b5b6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b5ba:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b5be:	9305      	str	r3, [sp, #20]
 800b5c0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b5ca:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b5ce:	4a5e      	ldr	r2, [pc, #376]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800b5d0:	495a      	ldr	r1, [pc, #360]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b5d2:	4623      	mov	r3, r4
 800b5d4:	2002      	movs	r0, #2
 800b5d6:	47a8      	blx	r5
 800b5d8:	f7fc fa02 	bl	80079e0 <acc_rss_integration_log_level>
 800b5dc:	2801      	cmp	r0, #1
 800b5de:	d91e      	bls.n	800b61e <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800b5e0:	4d54      	ldr	r5, [pc, #336]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b5e2:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800b5e6:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800b5ea:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b5ec:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800b5f0:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800b5f4:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800b5f8:	9107      	str	r1, [sp, #28]
 800b5fa:	9206      	str	r2, [sp, #24]
 800b5fc:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800b600:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800b604:	9305      	str	r3, [sp, #20]
 800b606:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b610:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b614:	4a4d      	ldr	r2, [pc, #308]	; (800b74c <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800b616:	4949      	ldr	r1, [pc, #292]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b618:	4623      	mov	r3, r4
 800b61a:	2002      	movs	r0, #2
 800b61c:	47a8      	blx	r5
 800b61e:	aa0c      	add	r2, sp, #48	; 0x30
 800b620:	2168      	movs	r1, #104	; 0x68
 800b622:	4620      	mov	r0, r4
 800b624:	f7fe ff06 	bl	800a434 <acc_sensor_reg_read>
 800b628:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800b62c:	2167      	movs	r1, #103	; 0x67
 800b62e:	4620      	mov	r0, r4
 800b630:	f7fe ff00 	bl	800a434 <acc_sensor_reg_read>
 800b634:	aa0d      	add	r2, sp, #52	; 0x34
 800b636:	2166      	movs	r1, #102	; 0x66
 800b638:	4620      	mov	r0, r4
 800b63a:	f7fe fefb 	bl	800a434 <acc_sensor_reg_read>
 800b63e:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800b642:	2165      	movs	r1, #101	; 0x65
 800b644:	4620      	mov	r0, r4
 800b646:	f7fe fef5 	bl	800a434 <acc_sensor_reg_read>
 800b64a:	f7fc f9c9 	bl	80079e0 <acc_rss_integration_log_level>
 800b64e:	2801      	cmp	r0, #1
 800b650:	d912      	bls.n	800b678 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800b652:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b656:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b65a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b65e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b662:	4d34      	ldr	r5, [pc, #208]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b664:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b666:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800b66a:	e9cd 3200 	strd	r3, r2, [sp]
 800b66e:	4933      	ldr	r1, [pc, #204]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b670:	4a37      	ldr	r2, [pc, #220]	; (800b750 <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800b672:	4623      	mov	r3, r4
 800b674:	2002      	movs	r0, #2
 800b676:	47a8      	blx	r5
 800b678:	2500      	movs	r5, #0
 800b67a:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800b67e:	2153      	movs	r1, #83	; 0x53
 800b680:	4620      	mov	r0, r4
 800b682:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800b686:	f7fe fed5 	bl	800a434 <acc_sensor_reg_read>
 800b68a:	aa0c      	add	r2, sp, #48	; 0x30
 800b68c:	2140      	movs	r1, #64	; 0x40
 800b68e:	4620      	mov	r0, r4
 800b690:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b694:	f7fe fece 	bl	800a434 <acc_sensor_reg_read>
 800b698:	f7fc f9a2 	bl	80079e0 <acc_rss_integration_log_level>
 800b69c:	2801      	cmp	r0, #1
 800b69e:	d909      	bls.n	800b6b4 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800b6a0:	4a24      	ldr	r2, [pc, #144]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6a2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6a6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b6a8:	4924      	ldr	r1, [pc, #144]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	4a29      	ldr	r2, [pc, #164]	; (800b754 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800b6ae:	4623      	mov	r3, r4
 800b6b0:	2002      	movs	r0, #2
 800b6b2:	47a8      	blx	r5
 800b6b4:	f7fc f994 	bl	80079e0 <acc_rss_integration_log_level>
 800b6b8:	2801      	cmp	r0, #1
 800b6ba:	d90e      	bls.n	800b6da <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800b6bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6c0:	491c      	ldr	r1, [pc, #112]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6c2:	4a25      	ldr	r2, [pc, #148]	; (800b758 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800b6c4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b6c6:	491d      	ldr	r1, [pc, #116]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6c8:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800b6cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d0:	e9cd 3000 	strd	r3, r0, [sp]
 800b6d4:	4623      	mov	r3, r4
 800b6d6:	2002      	movs	r0, #2
 800b6d8:	47a8      	blx	r5
 800b6da:	f7fc f981 	bl	80079e0 <acc_rss_integration_log_level>
 800b6de:	2801      	cmp	r0, #1
 800b6e0:	d90e      	bls.n	800b700 <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800b6e2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6e6:	4913      	ldr	r1, [pc, #76]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6e8:	4a1c      	ldr	r2, [pc, #112]	; (800b75c <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800b6ea:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b6ec:	4913      	ldr	r1, [pc, #76]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6ee:	f003 0010 	and.w	r0, r3, #16
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	e9cd 3000 	strd	r3, r0, [sp]
 800b6fa:	4623      	mov	r3, r4
 800b6fc:	2002      	movs	r0, #2
 800b6fe:	47a8      	blx	r5
 800b700:	f7fc f96e 	bl	80079e0 <acc_rss_integration_log_level>
 800b704:	2801      	cmp	r0, #1
 800b706:	d90e      	bls.n	800b726 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800b708:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b70c:	4909      	ldr	r1, [pc, #36]	; (800b734 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b70e:	4a14      	ldr	r2, [pc, #80]	; (800b760 <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800b710:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b712:	490a      	ldr	r1, [pc, #40]	; (800b73c <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b714:	f003 0004 	and.w	r0, r3, #4
 800b718:	f003 0308 	and.w	r3, r3, #8
 800b71c:	e9cd 3000 	strd	r3, r0, [sp]
 800b720:	4623      	mov	r3, r4
 800b722:	2002      	movs	r0, #2
 800b724:	47a8      	blx	r5
 800b726:	4d0f      	ldr	r5, [pc, #60]	; (800b764 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800b728:	ae0c      	add	r6, sp, #48	; 0x30
 800b72a:	f105 071e 	add.w	r7, r5, #30
 800b72e:	21f0      	movs	r1, #240	; 0xf0
 800b730:	e01e      	b.n	800b770 <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800b732:	bf00      	nop
 800b734:	200007b0 	.word	0x200007b0
 800b738:	0801256c 	.word	0x0801256c
 800b73c:	080125ac 	.word	0x080125ac
 800b740:	080125e4 	.word	0x080125e4
 800b744:	080128f4 	.word	0x080128f4
 800b748:	08012604 	.word	0x08012604
 800b74c:	0801264c 	.word	0x0801264c
 800b750:	08012698 	.word	0x08012698
 800b754:	080126cc 	.word	0x080126cc
 800b758:	080126ec 	.word	0x080126ec
 800b75c:	08012718 	.word	0x08012718
 800b760:	0801274c 	.word	0x0801274c
 800b764:	08012914 	.word	0x08012914
 800b768:	080125c4 	.word	0x080125c4
 800b76c:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b770:	4632      	mov	r2, r6
 800b772:	4620      	mov	r0, r4
 800b774:	f7fe fe5e 	bl	800a434 <acc_sensor_reg_read>
 800b778:	42bd      	cmp	r5, r7
 800b77a:	f106 0602 	add.w	r6, r6, #2
 800b77e:	d1f5      	bne.n	800b76c <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800b780:	f7fc f92e 	bl	80079e0 <acc_rss_integration_log_level>
 800b784:	2801      	cmp	r0, #1
 800b786:	f240 80b6 	bls.w	800b8f6 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800b78a:	4a5c      	ldr	r2, [pc, #368]	; (800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b78c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b790:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b792:	495b      	ldr	r1, [pc, #364]	; (800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	4a5b      	ldr	r2, [pc, #364]	; (800b904 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800b798:	4623      	mov	r3, r4
 800b79a:	2002      	movs	r0, #2
 800b79c:	47a8      	blx	r5
 800b79e:	2501      	movs	r5, #1
 800b7a0:	f7fc f91e 	bl	80079e0 <acc_rss_integration_log_level>
 800b7a4:	2801      	cmp	r0, #1
 800b7a6:	d90e      	bls.n	800b7c6 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800b7a8:	ab14      	add	r3, sp, #80	; 0x50
 800b7aa:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800b7ae:	4b53      	ldr	r3, [pc, #332]	; (800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b7b0:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800b7b4:	9200      	str	r2, [sp, #0]
 800b7b6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b7b8:	4a53      	ldr	r2, [pc, #332]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800b7ba:	4951      	ldr	r1, [pc, #324]	; (800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b7bc:	3501      	adds	r5, #1
 800b7be:	4623      	mov	r3, r4
 800b7c0:	2002      	movs	r0, #2
 800b7c2:	b2ed      	uxtb	r5, r5
 800b7c4:	47b0      	blx	r6
 800b7c6:	f8df a134 	ldr.w	sl, [pc, #308]	; 800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800b7ca:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800b924 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800b7ce:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800b7d2:	2601      	movs	r6, #1
 800b7d4:	f7fc f904 	bl	80079e0 <acc_rss_integration_log_level>
 800b7d8:	ab14      	add	r3, sp, #80	; 0x50
 800b7da:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800b7de:	2801      	cmp	r0, #1
 800b7e0:	4667      	mov	r7, ip
 800b7e2:	4623      	mov	r3, r4
 800b7e4:	464a      	mov	r2, r9
 800b7e6:	4641      	mov	r1, r8
 800b7e8:	f04f 0002 	mov.w	r0, #2
 800b7ec:	d909      	bls.n	800b802 <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800b7ee:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800b7f2:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800b7f6:	9600      	str	r6, [sp, #0]
 800b7f8:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800b7fc:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800b800:	47b8      	blx	r7
 800b802:	3601      	adds	r6, #1
 800b804:	3502      	adds	r5, #2
 800b806:	2e08      	cmp	r6, #8
 800b808:	b2ed      	uxtb	r5, r5
 800b80a:	d1e3      	bne.n	800b7d4 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800b80c:	2500      	movs	r5, #0
 800b80e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b810:	219d      	movs	r1, #157	; 0x9d
 800b812:	4620      	mov	r0, r4
 800b814:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800b818:	f7fe fe0c 	bl	800a434 <acc_sensor_reg_read>
 800b81c:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800b820:	2199      	movs	r1, #153	; 0x99
 800b822:	4620      	mov	r0, r4
 800b824:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800b828:	f7fe fe04 	bl	800a434 <acc_sensor_reg_read>
 800b82c:	aa0c      	add	r2, sp, #48	; 0x30
 800b82e:	2196      	movs	r1, #150	; 0x96
 800b830:	4620      	mov	r0, r4
 800b832:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b836:	f7fe fdfd 	bl	800a434 <acc_sensor_reg_read>
 800b83a:	462a      	mov	r2, r5
 800b83c:	21b2      	movs	r1, #178	; 0xb2
 800b83e:	4620      	mov	r0, r4
 800b840:	f7fe fe0e 	bl	800a460 <acc_sensor_reg_write>
 800b844:	f7fc f8cc 	bl	80079e0 <acc_rss_integration_log_level>
 800b848:	2801      	cmp	r0, #1
 800b84a:	d90f      	bls.n	800b86c <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800b84c:	482b      	ldr	r0, [pc, #172]	; (800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b84e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800b852:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b856:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b85a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b862:	4623      	mov	r3, r4
 800b864:	4a29      	ldr	r2, [pc, #164]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800b866:	4926      	ldr	r1, [pc, #152]	; (800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b868:	2002      	movs	r0, #2
 800b86a:	47a8      	blx	r5
 800b86c:	f7fc f8b8 	bl	80079e0 <acc_rss_integration_log_level>
 800b870:	2801      	cmp	r0, #1
 800b872:	d909      	bls.n	800b888 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800b874:	4a21      	ldr	r2, [pc, #132]	; (800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b876:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800b87a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b87c:	4920      	ldr	r1, [pc, #128]	; (800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	4a23      	ldr	r2, [pc, #140]	; (800b910 <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800b882:	4623      	mov	r3, r4
 800b884:	2002      	movs	r0, #2
 800b886:	47a8      	blx	r5
 800b888:	f7fc f8aa 	bl	80079e0 <acc_rss_integration_log_level>
 800b88c:	2801      	cmp	r0, #1
 800b88e:	d909      	bls.n	800b8a4 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800b890:	4a1a      	ldr	r2, [pc, #104]	; (800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b892:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b896:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b898:	4919      	ldr	r1, [pc, #100]	; (800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	4a1d      	ldr	r2, [pc, #116]	; (800b914 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800b89e:	4623      	mov	r3, r4
 800b8a0:	2002      	movs	r0, #2
 800b8a2:	47a8      	blx	r5
 800b8a4:	f7fc f89c 	bl	80079e0 <acc_rss_integration_log_level>
 800b8a8:	2801      	cmp	r0, #1
 800b8aa:	d909      	bls.n	800b8c0 <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800b8ac:	4a13      	ldr	r2, [pc, #76]	; (800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8ae:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800b8b2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b8b4:	4912      	ldr	r1, [pc, #72]	; (800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	4a17      	ldr	r2, [pc, #92]	; (800b918 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800b8ba:	4623      	mov	r3, r4
 800b8bc:	2002      	movs	r0, #2
 800b8be:	47a8      	blx	r5
 800b8c0:	f7fc f88e 	bl	80079e0 <acc_rss_integration_log_level>
 800b8c4:	2801      	cmp	r0, #1
 800b8c6:	d909      	bls.n	800b8dc <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800b8c8:	4a0c      	ldr	r2, [pc, #48]	; (800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8ca:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b8ce:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b8d0:	490b      	ldr	r1, [pc, #44]	; (800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	4a11      	ldr	r2, [pc, #68]	; (800b91c <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800b8d6:	4623      	mov	r3, r4
 800b8d8:	2002      	movs	r0, #2
 800b8da:	47a8      	blx	r5
 800b8dc:	f7fc f880 	bl	80079e0 <acc_rss_integration_log_level>
 800b8e0:	2801      	cmp	r0, #1
 800b8e2:	d905      	bls.n	800b8f0 <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800b8e4:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8e6:	4a0e      	ldr	r2, [pc, #56]	; (800b920 <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800b8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ea:	4905      	ldr	r1, [pc, #20]	; (800b900 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8ec:	2002      	movs	r0, #2
 800b8ee:	4798      	blx	r3
 800b8f0:	b014      	add	sp, #80	; 0x50
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	2500      	movs	r5, #0
 800b8f8:	e752      	b.n	800b7a0 <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800b8fa:	bf00      	nop
 800b8fc:	200007b0 	.word	0x200007b0
 800b900:	080125ac 	.word	0x080125ac
 800b904:	0801277c 	.word	0x0801277c
 800b908:	080127a4 	.word	0x080127a4
 800b90c:	080127ec 	.word	0x080127ec
 800b910:	08012840 	.word	0x08012840
 800b914:	08012864 	.word	0x08012864
 800b918:	08012880 	.word	0x08012880
 800b91c:	08012898 	.word	0x08012898
 800b920:	080128b4 	.word	0x080128b4
 800b924:	080127c4 	.word	0x080127c4

0800b928 <acc_alg_basic_saturation_check_u16>:
 800b928:	eddf 6a17 	vldr	s13, [pc, #92]	; 800b988 <acc_alg_basic_saturation_check_u16+0x60>
 800b92c:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800b98c <acc_alg_basic_saturation_check_u16+0x64>
 800b930:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b934:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800b938:	0849      	lsrs	r1, r1, #1
 800b93a:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800b93e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b942:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b946:	d01c      	beq.n	800b982 <acc_alg_basic_saturation_check_u16+0x5a>
 800b948:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b94c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b950:	ee17 3a10 	vmov	r3, s14
 800b954:	b430      	push	{r4, r5}
 800b956:	b29d      	uxth	r5, r3
 800b958:	ee17 3a90 	vmov	r3, s15
 800b95c:	b29c      	uxth	r4, r3
 800b95e:	1e83      	subs	r3, r0, #2
 800b960:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800b964:	e003      	b.n	800b96e <acc_alg_basic_saturation_check_u16+0x46>
 800b966:	42aa      	cmp	r2, r5
 800b968:	d905      	bls.n	800b976 <acc_alg_basic_saturation_check_u16+0x4e>
 800b96a:	428b      	cmp	r3, r1
 800b96c:	d006      	beq.n	800b97c <acc_alg_basic_saturation_check_u16+0x54>
 800b96e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800b972:	42a2      	cmp	r2, r4
 800b974:	d3f7      	bcc.n	800b966 <acc_alg_basic_saturation_check_u16+0x3e>
 800b976:	2001      	movs	r0, #1
 800b978:	bc30      	pop	{r4, r5}
 800b97a:	4770      	bx	lr
 800b97c:	2000      	movs	r0, #0
 800b97e:	bc30      	pop	{r4, r5}
 800b980:	4770      	bx	lr
 800b982:	4608      	mov	r0, r1
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	42c80000 	.word	0x42c80000
 800b98c:	477fff00 	.word	0x477fff00

0800b990 <acc_alg_basic_saturation_check_i16>:
 800b990:	eddf 6a17 	vldr	s13, [pc, #92]	; 800b9f0 <acc_alg_basic_saturation_check_i16+0x60>
 800b994:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b9f4 <acc_alg_basic_saturation_check_i16+0x64>
 800b998:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800b9f8 <acc_alg_basic_saturation_check_i16+0x68>
 800b99c:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800b9a0:	0849      	lsrs	r1, r1, #1
 800b9a2:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800b9a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b9aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b9ae:	d01c      	beq.n	800b9ea <acc_alg_basic_saturation_check_i16+0x5a>
 800b9b0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b9b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9b8:	ee17 3a10 	vmov	r3, s14
 800b9bc:	b430      	push	{r4, r5}
 800b9be:	b21d      	sxth	r5, r3
 800b9c0:	ee17 3a90 	vmov	r3, s15
 800b9c4:	b21c      	sxth	r4, r3
 800b9c6:	1e83      	subs	r3, r0, #2
 800b9c8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800b9cc:	e003      	b.n	800b9d6 <acc_alg_basic_saturation_check_i16+0x46>
 800b9ce:	42aa      	cmp	r2, r5
 800b9d0:	dd05      	ble.n	800b9de <acc_alg_basic_saturation_check_i16+0x4e>
 800b9d2:	428b      	cmp	r3, r1
 800b9d4:	d006      	beq.n	800b9e4 <acc_alg_basic_saturation_check_i16+0x54>
 800b9d6:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800b9da:	42a2      	cmp	r2, r4
 800b9dc:	dbf7      	blt.n	800b9ce <acc_alg_basic_saturation_check_i16+0x3e>
 800b9de:	2001      	movs	r0, #1
 800b9e0:	bc30      	pop	{r4, r5}
 800b9e2:	4770      	bx	lr
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	bc30      	pop	{r4, r5}
 800b9e8:	4770      	bx	lr
 800b9ea:	4608      	mov	r0, r1
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	42c80000 	.word	0x42c80000
 800b9f4:	c7000000 	.word	0xc7000000
 800b9f8:	46fffe00 	.word	0x46fffe00

0800b9fc <acc_confprogram_modify_bin_sensor>:
 800b9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba00:	b082      	sub	sp, #8
 800ba02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ba06:	2501      	movs	r5, #1
 800ba08:	409d      	lsls	r5, r3
 800ba0a:	42b5      	cmp	r5, r6
 800ba0c:	4688      	mov	r8, r1
 800ba0e:	d917      	bls.n	800ba40 <acc_confprogram_modify_bin_sensor+0x44>
 800ba10:	461c      	mov	r4, r3
 800ba12:	4692      	mov	sl, r2
 800ba14:	4681      	mov	r9, r0
 800ba16:	f1c4 0420 	rsb	r4, r4, #32
 800ba1a:	f7fe fd5f 	bl	800a4dc <acc_sensor_conf_read_instr>
 800ba1e:	f04f 35ff 	mov.w	r5, #4294967295
 800ba22:	40e5      	lsrs	r5, r4
 800ba24:	fa05 f40a 	lsl.w	r4, r5, sl
 800ba28:	ea20 0404 	bic.w	r4, r0, r4
 800ba2c:	fa06 f20a 	lsl.w	r2, r6, sl
 800ba30:	4641      	mov	r1, r8
 800ba32:	4648      	mov	r0, r9
 800ba34:	4322      	orrs	r2, r4
 800ba36:	463b      	mov	r3, r7
 800ba38:	b002      	add	sp, #8
 800ba3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3e:	4718      	bx	r3
 800ba40:	4a06      	ldr	r2, [pc, #24]	; (800ba5c <acc_confprogram_modify_bin_sensor+0x60>)
 800ba42:	9600      	str	r6, [sp, #0]
 800ba44:	3d01      	subs	r5, #1
 800ba46:	9501      	str	r5, [sp, #4]
 800ba48:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ba4a:	4a05      	ldr	r2, [pc, #20]	; (800ba60 <acc_confprogram_modify_bin_sensor+0x64>)
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	2000      	movs	r0, #0
 800ba50:	4904      	ldr	r1, [pc, #16]	; (800ba64 <acc_confprogram_modify_bin_sensor+0x68>)
 800ba52:	47a0      	blx	r4
 800ba54:	4803      	ldr	r0, [pc, #12]	; (800ba64 <acc_confprogram_modify_bin_sensor+0x68>)
 800ba56:	2128      	movs	r1, #40	; 0x28
 800ba58:	f7fb feaa 	bl	80077b0 <acc_assert_fail>
 800ba5c:	200007b0 	.word	0x200007b0
 800ba60:	08012934 	.word	0x08012934
 800ba64:	0801296c 	.word	0x0801296c

0800ba68 <acc_confprogram_modify_bin>:
 800ba68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	2701      	movs	r7, #1
 800ba70:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ba72:	fa07 f503 	lsl.w	r5, r7, r3
 800ba76:	42b5      	cmp	r5, r6
 800ba78:	d91e      	bls.n	800bab8 <acc_confprogram_modify_bin+0x50>
 800ba7a:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 800ba7e:	4690      	mov	r8, r2
 800ba80:	461c      	mov	r4, r3
 800ba82:	4628      	mov	r0, r5
 800ba84:	463a      	mov	r2, r7
 800ba86:	a902      	add	r1, sp, #8
 800ba88:	f7fc f80e 	bl	8007aa8 <acc_utils_transfer_buffer_to_uint32>
 800ba8c:	f1c4 0420 	rsb	r4, r4, #32
 800ba90:	f04f 33ff 	mov.w	r3, #4294967295
 800ba94:	9902      	ldr	r1, [sp, #8]
 800ba96:	40e3      	lsrs	r3, r4
 800ba98:	fa03 f308 	lsl.w	r3, r3, r8
 800ba9c:	fa06 f608 	lsl.w	r6, r6, r8
 800baa0:	ea21 0303 	bic.w	r3, r1, r3
 800baa4:	4333      	orrs	r3, r6
 800baa6:	4629      	mov	r1, r5
 800baa8:	463a      	mov	r2, r7
 800baaa:	a803      	add	r0, sp, #12
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	f7fb ffed 	bl	8007a8c <acc_utils_uint32_to_transfer_buffer>
 800bab2:	b004      	add	sp, #16
 800bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab8:	4a06      	ldr	r2, [pc, #24]	; (800bad4 <acc_confprogram_modify_bin+0x6c>)
 800baba:	9600      	str	r6, [sp, #0]
 800babc:	3d01      	subs	r5, #1
 800babe:	9501      	str	r5, [sp, #4]
 800bac0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bac2:	4a05      	ldr	r2, [pc, #20]	; (800bad8 <acc_confprogram_modify_bin+0x70>)
 800bac4:	460b      	mov	r3, r1
 800bac6:	2000      	movs	r0, #0
 800bac8:	4904      	ldr	r1, [pc, #16]	; (800badc <acc_confprogram_modify_bin+0x74>)
 800baca:	47a0      	blx	r4
 800bacc:	4803      	ldr	r0, [pc, #12]	; (800badc <acc_confprogram_modify_bin+0x74>)
 800bace:	2138      	movs	r1, #56	; 0x38
 800bad0:	f7fb fe6e 	bl	80077b0 <acc_assert_fail>
 800bad4:	200007b0 	.word	0x200007b0
 800bad8:	08012978 	.word	0x08012978
 800badc:	0801296c 	.word	0x0801296c

0800bae0 <acc_confprogram_modify_runif_sensor>:
 800bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae4:	4614      	mov	r4, r2
 800bae6:	b082      	sub	sp, #8
 800bae8:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800baec:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800baf0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800baf4:	f025 050f 	bic.w	r5, r5, #15
 800baf8:	4606      	mov	r6, r0
 800bafa:	b1b2      	cbz	r2, 800bb2a <acc_confprogram_modify_runif_sensor+0x4a>
 800bafc:	461f      	mov	r7, r3
 800bafe:	f7fb ff6f 	bl	80079e0 <acc_rss_integration_log_level>
 800bb02:	2803      	cmp	r0, #3
 800bb04:	ea45 0507 	orr.w	r5, r5, r7
 800bb08:	d907      	bls.n	800bb1a <acc_confprogram_modify_runif_sensor+0x3a>
 800bb0a:	4b0e      	ldr	r3, [pc, #56]	; (800bb44 <acc_confprogram_modify_runif_sensor+0x64>)
 800bb0c:	9700      	str	r7, [sp, #0]
 800bb0e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bb10:	4a0d      	ldr	r2, [pc, #52]	; (800bb48 <acc_confprogram_modify_runif_sensor+0x68>)
 800bb12:	490e      	ldr	r1, [pc, #56]	; (800bb4c <acc_confprogram_modify_runif_sensor+0x6c>)
 800bb14:	4623      	mov	r3, r4
 800bb16:	2004      	movs	r0, #4
 800bb18:	47b8      	blx	r7
 800bb1a:	462a      	mov	r2, r5
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4643      	mov	r3, r8
 800bb22:	b002      	add	sp, #8
 800bb24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb28:	4718      	bx	r3
 800bb2a:	f7fb ff59 	bl	80079e0 <acc_rss_integration_log_level>
 800bb2e:	2803      	cmp	r0, #3
 800bb30:	d9f3      	bls.n	800bb1a <acc_confprogram_modify_runif_sensor+0x3a>
 800bb32:	4b04      	ldr	r3, [pc, #16]	; (800bb44 <acc_confprogram_modify_runif_sensor+0x64>)
 800bb34:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <acc_confprogram_modify_runif_sensor+0x70>)
 800bb36:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bb38:	4904      	ldr	r1, [pc, #16]	; (800bb4c <acc_confprogram_modify_runif_sensor+0x6c>)
 800bb3a:	4623      	mov	r3, r4
 800bb3c:	2004      	movs	r0, #4
 800bb3e:	47b8      	blx	r7
 800bb40:	e7eb      	b.n	800bb1a <acc_confprogram_modify_runif_sensor+0x3a>
 800bb42:	bf00      	nop
 800bb44:	200007b0 	.word	0x200007b0
 800bb48:	080129b0 	.word	0x080129b0
 800bb4c:	0801296c 	.word	0x0801296c
 800bb50:	080129e8 	.word	0x080129e8

0800bb54 <acc_confprogram_modify_runif>:
 800bb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb58:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	4616      	mov	r6, r2
 800bb60:	460f      	mov	r7, r1
 800bb62:	4628      	mov	r0, r5
 800bb64:	2201      	movs	r2, #1
 800bb66:	a902      	add	r1, sp, #8
 800bb68:	4698      	mov	r8, r3
 800bb6a:	f7fb ff9d 	bl	8007aa8 <acc_utils_transfer_buffer_to_uint32>
 800bb6e:	9c02      	ldr	r4, [sp, #8]
 800bb70:	f024 040f 	bic.w	r4, r4, #15
 800bb74:	9403      	str	r4, [sp, #12]
 800bb76:	f1b8 0f00 	cmp.w	r8, #0
 800bb7a:	d015      	beq.n	800bba8 <acc_confprogram_modify_runif+0x54>
 800bb7c:	433c      	orrs	r4, r7
 800bb7e:	9403      	str	r4, [sp, #12]
 800bb80:	f7fb ff2e 	bl	80079e0 <acc_rss_integration_log_level>
 800bb84:	2803      	cmp	r0, #3
 800bb86:	d907      	bls.n	800bb98 <acc_confprogram_modify_runif+0x44>
 800bb88:	4a0e      	ldr	r2, [pc, #56]	; (800bbc4 <acc_confprogram_modify_runif+0x70>)
 800bb8a:	9700      	str	r7, [sp, #0]
 800bb8c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bb8e:	490e      	ldr	r1, [pc, #56]	; (800bbc8 <acc_confprogram_modify_runif+0x74>)
 800bb90:	4a0e      	ldr	r2, [pc, #56]	; (800bbcc <acc_confprogram_modify_runif+0x78>)
 800bb92:	0873      	lsrs	r3, r6, #1
 800bb94:	2004      	movs	r0, #4
 800bb96:	47a0      	blx	r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	a803      	add	r0, sp, #12
 800bb9e:	f7fb ff75 	bl	8007a8c <acc_utils_uint32_to_transfer_buffer>
 800bba2:	b004      	add	sp, #16
 800bba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba8:	f7fb ff1a 	bl	80079e0 <acc_rss_integration_log_level>
 800bbac:	2803      	cmp	r0, #3
 800bbae:	d9f3      	bls.n	800bb98 <acc_confprogram_modify_runif+0x44>
 800bbb0:	4a04      	ldr	r2, [pc, #16]	; (800bbc4 <acc_confprogram_modify_runif+0x70>)
 800bbb2:	9700      	str	r7, [sp, #0]
 800bbb4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bbb6:	4904      	ldr	r1, [pc, #16]	; (800bbc8 <acc_confprogram_modify_runif+0x74>)
 800bbb8:	4a05      	ldr	r2, [pc, #20]	; (800bbd0 <acc_confprogram_modify_runif+0x7c>)
 800bbba:	0873      	lsrs	r3, r6, #1
 800bbbc:	2004      	movs	r0, #4
 800bbbe:	47a0      	blx	r4
 800bbc0:	e7ea      	b.n	800bb98 <acc_confprogram_modify_runif+0x44>
 800bbc2:	bf00      	nop
 800bbc4:	200007b0 	.word	0x200007b0
 800bbc8:	0801296c 	.word	0x0801296c
 800bbcc:	080129b0 	.word	0x080129b0
 800bbd0:	08012a18 	.word	0x08012a18

0800bbd4 <acc_confprogram_patch_offset>:
 800bbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	4680      	mov	r8, r0
 800bbdc:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800bbe0:	460e      	mov	r6, r1
 800bbe2:	4617      	mov	r7, r2
 800bbe4:	461d      	mov	r5, r3
 800bbe6:	f7fb fefb 	bl	80079e0 <acc_rss_integration_log_level>
 800bbea:	2803      	cmp	r0, #3
 800bbec:	d909      	bls.n	800bc02 <acc_confprogram_patch_offset+0x2e>
 800bbee:	4b39      	ldr	r3, [pc, #228]	; (800bcd4 <acc_confprogram_patch_offset+0x100>)
 800bbf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbf2:	9200      	str	r2, [sp, #0]
 800bbf4:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800bbf8:	4a37      	ldr	r2, [pc, #220]	; (800bcd8 <acc_confprogram_patch_offset+0x104>)
 800bbfa:	4938      	ldr	r1, [pc, #224]	; (800bcdc <acc_confprogram_patch_offset+0x108>)
 800bbfc:	4623      	mov	r3, r4
 800bbfe:	2004      	movs	r0, #4
 800bc00:	47c8      	blx	r9
 800bc02:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bc06:	8869      	ldrh	r1, [r5, #2]
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	d03a      	beq.n	800bc82 <acc_confprogram_patch_offset+0xae>
 800bc0c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 800bcd4 <acc_confprogram_patch_offset+0x100>
 800bc10:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800bce0 <acc_confprogram_patch_offset+0x10c>
 800bc14:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800bcdc <acc_confprogram_patch_offset+0x108>
 800bc18:	2400      	movs	r4, #0
 800bc1a:	e01c      	b.n	800bc56 <acc_confprogram_patch_offset+0x82>
 800bc1c:	f10c 33ff 	add.w	r3, ip, #4294967295
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d824      	bhi.n	800bc6e <acc_confprogram_patch_offset+0x9a>
 800bc24:	8882      	ldrh	r2, [r0, #4]
 800bc26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d010      	beq.n	800bc50 <acc_confprogram_patch_offset+0x7c>
 800bc2e:	0052      	lsls	r2, r2, #1
 800bc30:	fa1f fe82 	uxth.w	lr, r2
 800bc34:	45b6      	cmp	lr, r6
 800bc36:	d30b      	bcc.n	800bc50 <acc_confprogram_patch_offset+0x7c>
 800bc38:	19f3      	adds	r3, r6, r7
 800bc3a:	459e      	cmp	lr, r3
 800bc3c:	da08      	bge.n	800bc50 <acc_confprogram_patch_offset+0x7c>
 800bc3e:	f1bc 0f01 	cmp.w	ip, #1
 800bc42:	d021      	beq.n	800bc88 <acc_confprogram_patch_offset+0xb4>
 800bc44:	f1bc 0f02 	cmp.w	ip, #2
 800bc48:	d037      	beq.n	800bcba <acc_confprogram_patch_offset+0xe6>
 800bc4a:	f1bc 0f00 	cmp.w	ip, #0
 800bc4e:	d028      	beq.n	800bca2 <acc_confprogram_patch_offset+0xce>
 800bc50:	3401      	adds	r4, #1
 800bc52:	42a1      	cmp	r1, r4
 800bc54:	d915      	bls.n	800bc82 <acc_confprogram_patch_offset+0xae>
 800bc56:	6868      	ldr	r0, [r5, #4]
 800bc58:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800bc5c:	f810 c013 	ldrb.w	ip, [r0, r3, lsl #1]
 800bc60:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800bc64:	f1bc 0f00 	cmp.w	ip, #0
 800bc68:	d1d8      	bne.n	800bc1c <acc_confprogram_patch_offset+0x48>
 800bc6a:	8842      	ldrh	r2, [r0, #2]
 800bc6c:	e7db      	b.n	800bc26 <acc_confprogram_patch_offset+0x52>
 800bc6e:	4649      	mov	r1, r9
 800bc70:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800bc74:	4652      	mov	r2, sl
 800bc76:	2000      	movs	r0, #0
 800bc78:	4798      	blx	r3
 800bc7a:	8869      	ldrh	r1, [r5, #2]
 800bc7c:	3401      	adds	r4, #1
 800bc7e:	42a1      	cmp	r1, r4
 800bc80:	d8e9      	bhi.n	800bc56 <acc_confprogram_patch_offset+0x82>
 800bc82:	b003      	add	sp, #12
 800bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc8a:	8841      	ldrh	r1, [r0, #2]
 800bc8c:	ebae 0206 	sub.w	r2, lr, r6
 800bc90:	3b00      	subs	r3, #0
 800bc92:	b292      	uxth	r2, r2
 800bc94:	bf18      	it	ne
 800bc96:	2301      	movne	r3, #1
 800bc98:	4640      	mov	r0, r8
 800bc9a:	f7ff ff5b 	bl	800bb54 <acc_confprogram_modify_runif>
 800bc9e:	8869      	ldrh	r1, [r5, #2]
 800bca0:	e7d6      	b.n	800bc50 <acc_confprogram_patch_offset+0x7c>
 800bca2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bca4:	7943      	ldrb	r3, [r0, #5]
 800bca6:	7902      	ldrb	r2, [r0, #4]
 800bca8:	9100      	str	r1, [sp, #0]
 800bcaa:	ebae 0106 	sub.w	r1, lr, r6
 800bcae:	b289      	uxth	r1, r1
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	f7ff fed9 	bl	800ba68 <acc_confprogram_modify_bin>
 800bcb6:	8869      	ldrh	r1, [r5, #2]
 800bcb8:	e7ca      	b.n	800bc50 <acc_confprogram_patch_offset+0x7c>
 800bcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcbc:	8841      	ldrh	r1, [r0, #2]
 800bcbe:	ebae 0206 	sub.w	r2, lr, r6
 800bcc2:	fab3 f383 	clz	r3, r3
 800bcc6:	b292      	uxth	r2, r2
 800bcc8:	095b      	lsrs	r3, r3, #5
 800bcca:	4640      	mov	r0, r8
 800bccc:	f7ff ff42 	bl	800bb54 <acc_confprogram_modify_runif>
 800bcd0:	8869      	ldrh	r1, [r5, #2]
 800bcd2:	e7bd      	b.n	800bc50 <acc_confprogram_patch_offset+0x7c>
 800bcd4:	200007b0 	.word	0x200007b0
 800bcd8:	08012a80 	.word	0x08012a80
 800bcdc:	0801296c 	.word	0x0801296c
 800bce0:	08012a4c 	.word	0x08012a4c

0800bce4 <acc_confprogram_live_patch>:
 800bce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce8:	b083      	sub	sp, #12
 800bcea:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
 800bcee:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800bcf2:	4607      	mov	r7, r0
 800bcf4:	468b      	mov	fp, r1
 800bcf6:	4690      	mov	r8, r2
 800bcf8:	461e      	mov	r6, r3
 800bcfa:	f7fb fe71 	bl	80079e0 <acc_rss_integration_log_level>
 800bcfe:	2803      	cmp	r0, #3
 800bd00:	d908      	bls.n	800bd14 <acc_confprogram_live_patch+0x30>
 800bd02:	4b2a      	ldr	r3, [pc, #168]	; (800bdac <acc_confprogram_live_patch+0xc8>)
 800bd04:	f8cd 9000 	str.w	r9, [sp]
 800bd08:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800bd0a:	4a29      	ldr	r2, [pc, #164]	; (800bdb0 <acc_confprogram_live_patch+0xcc>)
 800bd0c:	4929      	ldr	r1, [pc, #164]	; (800bdb4 <acc_confprogram_live_patch+0xd0>)
 800bd0e:	4623      	mov	r3, r4
 800bd10:	2004      	movs	r0, #4
 800bd12:	47a8      	blx	r5
 800bd14:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800bd18:	8873      	ldrh	r3, [r6, #2]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d043      	beq.n	800bda6 <acc_confprogram_live_patch+0xc2>
 800bd1e:	2500      	movs	r5, #0
 800bd20:	e011      	b.n	800bd46 <acc_confprogram_live_patch+0x62>
 800bd22:	88a2      	ldrh	r2, [r4, #4]
 800bd24:	8863      	ldrh	r3, [r4, #2]
 800bd26:	f8cd a004 	str.w	sl, [sp, #4]
 800bd2a:	fab9 f189 	clz	r1, r9
 800bd2e:	4442      	add	r2, r8
 800bd30:	0949      	lsrs	r1, r1, #5
 800bd32:	9100      	str	r1, [sp, #0]
 800bd34:	b292      	uxth	r2, r2
 800bd36:	4659      	mov	r1, fp
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff fed1 	bl	800bae0 <acc_confprogram_modify_runif_sensor>
 800bd3e:	8873      	ldrh	r3, [r6, #2]
 800bd40:	3501      	adds	r5, #1
 800bd42:	42ab      	cmp	r3, r5
 800bd44:	d92f      	bls.n	800bda6 <acc_confprogram_live_patch+0xc2>
 800bd46:	6873      	ldr	r3, [r6, #4]
 800bd48:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800bd4c:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
 800bd50:	2a01      	cmp	r2, #1
 800bd52:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800bd56:	d00c      	beq.n	800bd72 <acc_confprogram_live_patch+0x8e>
 800bd58:	2a02      	cmp	r2, #2
 800bd5a:	d0e2      	beq.n	800bd22 <acc_confprogram_live_patch+0x3e>
 800bd5c:	b19a      	cbz	r2, 800bd86 <acc_confprogram_live_patch+0xa2>
 800bd5e:	4b13      	ldr	r3, [pc, #76]	; (800bdac <acc_confprogram_live_patch+0xc8>)
 800bd60:	4914      	ldr	r1, [pc, #80]	; (800bdb4 <acc_confprogram_live_patch+0xd0>)
 800bd62:	4a15      	ldr	r2, [pc, #84]	; (800bdb8 <acc_confprogram_live_patch+0xd4>)
 800bd64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd66:	2000      	movs	r0, #0
 800bd68:	4798      	blx	r3
 800bd6a:	4812      	ldr	r0, [pc, #72]	; (800bdb4 <acc_confprogram_live_patch+0xd0>)
 800bd6c:	21e6      	movs	r1, #230	; 0xe6
 800bd6e:	f7fb fd1f 	bl	80077b0 <acc_assert_fail>
 800bd72:	88a2      	ldrh	r2, [r4, #4]
 800bd74:	8863      	ldrh	r3, [r4, #2]
 800bd76:	f8cd a004 	str.w	sl, [sp, #4]
 800bd7a:	f1b9 0100 	subs.w	r1, r9, #0
 800bd7e:	4442      	add	r2, r8
 800bd80:	bf18      	it	ne
 800bd82:	2101      	movne	r1, #1
 800bd84:	e7d5      	b.n	800bd32 <acc_confprogram_live_patch+0x4e>
 800bd86:	8861      	ldrh	r1, [r4, #2]
 800bd88:	7963      	ldrb	r3, [r4, #5]
 800bd8a:	7922      	ldrb	r2, [r4, #4]
 800bd8c:	f8cd a004 	str.w	sl, [sp, #4]
 800bd90:	4441      	add	r1, r8
 800bd92:	b289      	uxth	r1, r1
 800bd94:	f8cd 9000 	str.w	r9, [sp]
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f7ff fe2f 	bl	800b9fc <acc_confprogram_modify_bin_sensor>
 800bd9e:	8873      	ldrh	r3, [r6, #2]
 800bda0:	3501      	adds	r5, #1
 800bda2:	42ab      	cmp	r3, r5
 800bda4:	d8cf      	bhi.n	800bd46 <acc_confprogram_live_patch+0x62>
 800bda6:	b003      	add	sp, #12
 800bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdac:	200007b0 	.word	0x200007b0
 800bdb0:	08012a7c 	.word	0x08012a7c
 800bdb4:	0801296c 	.word	0x0801296c
 800bdb8:	08012aa0 	.word	0x08012aa0

0800bdbc <acc_confprogram_get_default_value>:
 800bdbc:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop

0800bdc4 <acc_confprogram_copy>:
 800bdc4:	b152      	cbz	r2, 800bddc <acc_confprogram_copy+0x18>
 800bdc6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bdca:	3804      	subs	r0, #4
 800bdcc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800bdd0:	804b      	strh	r3, [r1, #2]
 800bdd2:	0c1b      	lsrs	r3, r3, #16
 800bdd4:	800b      	strh	r3, [r1, #0]
 800bdd6:	3104      	adds	r1, #4
 800bdd8:	4291      	cmp	r1, r2
 800bdda:	d1f7      	bne.n	800bdcc <acc_confprogram_copy+0x8>
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop

0800bde0 <acc_diagnostic_log_set_scope>:
 800bde0:	4b02      	ldr	r3, [pc, #8]	; (800bdec <acc_diagnostic_log_set_scope+0xc>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	b10b      	cbz	r3, 800bdea <acc_diagnostic_log_set_scope+0xa>
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4718      	bx	r3
 800bdea:	4770      	bx	lr
 800bdec:	2000079c 	.word	0x2000079c

0800bdf0 <acc_diagnostic_log_declare_parameter>:
 800bdf0:	4b02      	ldr	r3, [pc, #8]	; (800bdfc <acc_diagnostic_log_declare_parameter+0xc>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	b10b      	cbz	r3, 800bdfa <acc_diagnostic_log_declare_parameter+0xa>
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	4718      	bx	r3
 800bdfa:	4770      	bx	lr
 800bdfc:	2000079c 	.word	0x2000079c

0800be00 <acc_diagnostic_log_set_parameter>:
 800be00:	4b02      	ldr	r3, [pc, #8]	; (800be0c <acc_diagnostic_log_set_parameter+0xc>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	b10b      	cbz	r3, 800be0a <acc_diagnostic_log_set_parameter+0xa>
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	4718      	bx	r3
 800be0a:	4770      	bx	lr
 800be0c:	2000079c 	.word	0x2000079c

0800be10 <acc_diagnostic_log_array>:
 800be10:	4b02      	ldr	r3, [pc, #8]	; (800be1c <acc_diagnostic_log_array+0xc>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	b10b      	cbz	r3, 800be1a <acc_diagnostic_log_array+0xa>
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	4718      	bx	r3
 800be1a:	4770      	bx	lr
 800be1c:	2000079c 	.word	0x2000079c

0800be20 <acc_diagnostic_log_scalar>:
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <acc_diagnostic_log_scalar+0xc>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	b10b      	cbz	r3, 800be2a <acc_diagnostic_log_scalar+0xa>
 800be26:	695b      	ldr	r3, [r3, #20]
 800be28:	4718      	bx	r3
 800be2a:	4770      	bx	lr
 800be2c:	2000079c 	.word	0x2000079c

0800be30 <acc_diagnostic_log_data_u16>:
 800be30:	4b02      	ldr	r3, [pc, #8]	; (800be3c <acc_diagnostic_log_data_u16+0xc>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	b10b      	cbz	r3, 800be3a <acc_diagnostic_log_data_u16+0xa>
 800be36:	6a1b      	ldr	r3, [r3, #32]
 800be38:	4718      	bx	r3
 800be3a:	4770      	bx	lr
 800be3c:	2000079c 	.word	0x2000079c

0800be40 <__errno>:
 800be40:	4b01      	ldr	r3, [pc, #4]	; (800be48 <__errno+0x8>)
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	20000134 	.word	0x20000134

0800be4c <__sflush_r>:
 800be4c:	898a      	ldrh	r2, [r1, #12]
 800be4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be52:	4605      	mov	r5, r0
 800be54:	0710      	lsls	r0, r2, #28
 800be56:	460c      	mov	r4, r1
 800be58:	d458      	bmi.n	800bf0c <__sflush_r+0xc0>
 800be5a:	684b      	ldr	r3, [r1, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	dc05      	bgt.n	800be6c <__sflush_r+0x20>
 800be60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be62:	2b00      	cmp	r3, #0
 800be64:	dc02      	bgt.n	800be6c <__sflush_r+0x20>
 800be66:	2000      	movs	r0, #0
 800be68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be6e:	2e00      	cmp	r6, #0
 800be70:	d0f9      	beq.n	800be66 <__sflush_r+0x1a>
 800be72:	2300      	movs	r3, #0
 800be74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be78:	682f      	ldr	r7, [r5, #0]
 800be7a:	602b      	str	r3, [r5, #0]
 800be7c:	d032      	beq.n	800bee4 <__sflush_r+0x98>
 800be7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	075a      	lsls	r2, r3, #29
 800be84:	d505      	bpl.n	800be92 <__sflush_r+0x46>
 800be86:	6863      	ldr	r3, [r4, #4]
 800be88:	1ac0      	subs	r0, r0, r3
 800be8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be8c:	b10b      	cbz	r3, 800be92 <__sflush_r+0x46>
 800be8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be90:	1ac0      	subs	r0, r0, r3
 800be92:	2300      	movs	r3, #0
 800be94:	4602      	mov	r2, r0
 800be96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be98:	6a21      	ldr	r1, [r4, #32]
 800be9a:	4628      	mov	r0, r5
 800be9c:	47b0      	blx	r6
 800be9e:	1c43      	adds	r3, r0, #1
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	d106      	bne.n	800beb2 <__sflush_r+0x66>
 800bea4:	6829      	ldr	r1, [r5, #0]
 800bea6:	291d      	cmp	r1, #29
 800bea8:	d82c      	bhi.n	800bf04 <__sflush_r+0xb8>
 800beaa:	4a2a      	ldr	r2, [pc, #168]	; (800bf54 <__sflush_r+0x108>)
 800beac:	40ca      	lsrs	r2, r1
 800beae:	07d6      	lsls	r6, r2, #31
 800beb0:	d528      	bpl.n	800bf04 <__sflush_r+0xb8>
 800beb2:	2200      	movs	r2, #0
 800beb4:	6062      	str	r2, [r4, #4]
 800beb6:	04d9      	lsls	r1, r3, #19
 800beb8:	6922      	ldr	r2, [r4, #16]
 800beba:	6022      	str	r2, [r4, #0]
 800bebc:	d504      	bpl.n	800bec8 <__sflush_r+0x7c>
 800bebe:	1c42      	adds	r2, r0, #1
 800bec0:	d101      	bne.n	800bec6 <__sflush_r+0x7a>
 800bec2:	682b      	ldr	r3, [r5, #0]
 800bec4:	b903      	cbnz	r3, 800bec8 <__sflush_r+0x7c>
 800bec6:	6560      	str	r0, [r4, #84]	; 0x54
 800bec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beca:	602f      	str	r7, [r5, #0]
 800becc:	2900      	cmp	r1, #0
 800bece:	d0ca      	beq.n	800be66 <__sflush_r+0x1a>
 800bed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bed4:	4299      	cmp	r1, r3
 800bed6:	d002      	beq.n	800bede <__sflush_r+0x92>
 800bed8:	4628      	mov	r0, r5
 800beda:	f000 f9e9 	bl	800c2b0 <_free_r>
 800bede:	2000      	movs	r0, #0
 800bee0:	6360      	str	r0, [r4, #52]	; 0x34
 800bee2:	e7c1      	b.n	800be68 <__sflush_r+0x1c>
 800bee4:	6a21      	ldr	r1, [r4, #32]
 800bee6:	2301      	movs	r3, #1
 800bee8:	4628      	mov	r0, r5
 800beea:	47b0      	blx	r6
 800beec:	1c41      	adds	r1, r0, #1
 800beee:	d1c7      	bne.n	800be80 <__sflush_r+0x34>
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d0c4      	beq.n	800be80 <__sflush_r+0x34>
 800bef6:	2b1d      	cmp	r3, #29
 800bef8:	d001      	beq.n	800befe <__sflush_r+0xb2>
 800befa:	2b16      	cmp	r3, #22
 800befc:	d101      	bne.n	800bf02 <__sflush_r+0xb6>
 800befe:	602f      	str	r7, [r5, #0]
 800bf00:	e7b1      	b.n	800be66 <__sflush_r+0x1a>
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf08:	81a3      	strh	r3, [r4, #12]
 800bf0a:	e7ad      	b.n	800be68 <__sflush_r+0x1c>
 800bf0c:	690f      	ldr	r7, [r1, #16]
 800bf0e:	2f00      	cmp	r7, #0
 800bf10:	d0a9      	beq.n	800be66 <__sflush_r+0x1a>
 800bf12:	0793      	lsls	r3, r2, #30
 800bf14:	680e      	ldr	r6, [r1, #0]
 800bf16:	bf08      	it	eq
 800bf18:	694b      	ldreq	r3, [r1, #20]
 800bf1a:	600f      	str	r7, [r1, #0]
 800bf1c:	bf18      	it	ne
 800bf1e:	2300      	movne	r3, #0
 800bf20:	eba6 0807 	sub.w	r8, r6, r7
 800bf24:	608b      	str	r3, [r1, #8]
 800bf26:	f1b8 0f00 	cmp.w	r8, #0
 800bf2a:	dd9c      	ble.n	800be66 <__sflush_r+0x1a>
 800bf2c:	6a21      	ldr	r1, [r4, #32]
 800bf2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf30:	4643      	mov	r3, r8
 800bf32:	463a      	mov	r2, r7
 800bf34:	4628      	mov	r0, r5
 800bf36:	47b0      	blx	r6
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	dc06      	bgt.n	800bf4a <__sflush_r+0xfe>
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf42:	81a3      	strh	r3, [r4, #12]
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295
 800bf48:	e78e      	b.n	800be68 <__sflush_r+0x1c>
 800bf4a:	4407      	add	r7, r0
 800bf4c:	eba8 0800 	sub.w	r8, r8, r0
 800bf50:	e7e9      	b.n	800bf26 <__sflush_r+0xda>
 800bf52:	bf00      	nop
 800bf54:	20400001 	.word	0x20400001

0800bf58 <_fflush_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	690b      	ldr	r3, [r1, #16]
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	460c      	mov	r4, r1
 800bf60:	b913      	cbnz	r3, 800bf68 <_fflush_r+0x10>
 800bf62:	2500      	movs	r5, #0
 800bf64:	4628      	mov	r0, r5
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	b118      	cbz	r0, 800bf72 <_fflush_r+0x1a>
 800bf6a:	6983      	ldr	r3, [r0, #24]
 800bf6c:	b90b      	cbnz	r3, 800bf72 <_fflush_r+0x1a>
 800bf6e:	f000 f899 	bl	800c0a4 <__sinit>
 800bf72:	4b14      	ldr	r3, [pc, #80]	; (800bfc4 <_fflush_r+0x6c>)
 800bf74:	429c      	cmp	r4, r3
 800bf76:	d11b      	bne.n	800bfb0 <_fflush_r+0x58>
 800bf78:	686c      	ldr	r4, [r5, #4]
 800bf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0ef      	beq.n	800bf62 <_fflush_r+0xa>
 800bf82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf84:	07d0      	lsls	r0, r2, #31
 800bf86:	d404      	bmi.n	800bf92 <_fflush_r+0x3a>
 800bf88:	0599      	lsls	r1, r3, #22
 800bf8a:	d402      	bmi.n	800bf92 <_fflush_r+0x3a>
 800bf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf8e:	f000 f94c 	bl	800c22a <__retarget_lock_acquire_recursive>
 800bf92:	4628      	mov	r0, r5
 800bf94:	4621      	mov	r1, r4
 800bf96:	f7ff ff59 	bl	800be4c <__sflush_r>
 800bf9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf9c:	07da      	lsls	r2, r3, #31
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	d4e0      	bmi.n	800bf64 <_fflush_r+0xc>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	059b      	lsls	r3, r3, #22
 800bfa6:	d4dd      	bmi.n	800bf64 <_fflush_r+0xc>
 800bfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfaa:	f000 f93f 	bl	800c22c <__retarget_lock_release_recursive>
 800bfae:	e7d9      	b.n	800bf64 <_fflush_r+0xc>
 800bfb0:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <_fflush_r+0x70>)
 800bfb2:	429c      	cmp	r4, r3
 800bfb4:	d101      	bne.n	800bfba <_fflush_r+0x62>
 800bfb6:	68ac      	ldr	r4, [r5, #8]
 800bfb8:	e7df      	b.n	800bf7a <_fflush_r+0x22>
 800bfba:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <_fflush_r+0x74>)
 800bfbc:	429c      	cmp	r4, r3
 800bfbe:	bf08      	it	eq
 800bfc0:	68ec      	ldreq	r4, [r5, #12]
 800bfc2:	e7da      	b.n	800bf7a <_fflush_r+0x22>
 800bfc4:	08013ffc 	.word	0x08013ffc
 800bfc8:	0801401c 	.word	0x0801401c
 800bfcc:	08013fdc 	.word	0x08013fdc

0800bfd0 <fflush>:
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	b920      	cbnz	r0, 800bfde <fflush+0xe>
 800bfd4:	4b04      	ldr	r3, [pc, #16]	; (800bfe8 <fflush+0x18>)
 800bfd6:	4905      	ldr	r1, [pc, #20]	; (800bfec <fflush+0x1c>)
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	f000 b8e1 	b.w	800c1a0 <_fwalk_reent>
 800bfde:	4b04      	ldr	r3, [pc, #16]	; (800bff0 <fflush+0x20>)
 800bfe0:	6818      	ldr	r0, [r3, #0]
 800bfe2:	f7ff bfb9 	b.w	800bf58 <_fflush_r>
 800bfe6:	bf00      	nop
 800bfe8:	0801403c 	.word	0x0801403c
 800bfec:	0800bf59 	.word	0x0800bf59
 800bff0:	20000134 	.word	0x20000134

0800bff4 <std>:
 800bff4:	2300      	movs	r3, #0
 800bff6:	b510      	push	{r4, lr}
 800bff8:	4604      	mov	r4, r0
 800bffa:	e9c0 3300 	strd	r3, r3, [r0]
 800bffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c002:	6083      	str	r3, [r0, #8]
 800c004:	8181      	strh	r1, [r0, #12]
 800c006:	6643      	str	r3, [r0, #100]	; 0x64
 800c008:	81c2      	strh	r2, [r0, #14]
 800c00a:	6183      	str	r3, [r0, #24]
 800c00c:	4619      	mov	r1, r3
 800c00e:	2208      	movs	r2, #8
 800c010:	305c      	adds	r0, #92	; 0x5c
 800c012:	f000 f945 	bl	800c2a0 <memset>
 800c016:	4b05      	ldr	r3, [pc, #20]	; (800c02c <std+0x38>)
 800c018:	6263      	str	r3, [r4, #36]	; 0x24
 800c01a:	4b05      	ldr	r3, [pc, #20]	; (800c030 <std+0x3c>)
 800c01c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c01e:	4b05      	ldr	r3, [pc, #20]	; (800c034 <std+0x40>)
 800c020:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c022:	4b05      	ldr	r3, [pc, #20]	; (800c038 <std+0x44>)
 800c024:	6224      	str	r4, [r4, #32]
 800c026:	6323      	str	r3, [r4, #48]	; 0x30
 800c028:	bd10      	pop	{r4, pc}
 800c02a:	bf00      	nop
 800c02c:	0800cec1 	.word	0x0800cec1
 800c030:	0800cee3 	.word	0x0800cee3
 800c034:	0800cf1b 	.word	0x0800cf1b
 800c038:	0800cf3f 	.word	0x0800cf3f

0800c03c <_cleanup_r>:
 800c03c:	4901      	ldr	r1, [pc, #4]	; (800c044 <_cleanup_r+0x8>)
 800c03e:	f000 b8af 	b.w	800c1a0 <_fwalk_reent>
 800c042:	bf00      	nop
 800c044:	0800bf59 	.word	0x0800bf59

0800c048 <__sfmoreglue>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	2268      	movs	r2, #104	; 0x68
 800c04c:	1e4d      	subs	r5, r1, #1
 800c04e:	4355      	muls	r5, r2
 800c050:	460e      	mov	r6, r1
 800c052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c056:	f000 f997 	bl	800c388 <_malloc_r>
 800c05a:	4604      	mov	r4, r0
 800c05c:	b140      	cbz	r0, 800c070 <__sfmoreglue+0x28>
 800c05e:	2100      	movs	r1, #0
 800c060:	e9c0 1600 	strd	r1, r6, [r0]
 800c064:	300c      	adds	r0, #12
 800c066:	60a0      	str	r0, [r4, #8]
 800c068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c06c:	f000 f918 	bl	800c2a0 <memset>
 800c070:	4620      	mov	r0, r4
 800c072:	bd70      	pop	{r4, r5, r6, pc}

0800c074 <__sfp_lock_acquire>:
 800c074:	4801      	ldr	r0, [pc, #4]	; (800c07c <__sfp_lock_acquire+0x8>)
 800c076:	f000 b8d8 	b.w	800c22a <__retarget_lock_acquire_recursive>
 800c07a:	bf00      	nop
 800c07c:	200007a1 	.word	0x200007a1

0800c080 <__sfp_lock_release>:
 800c080:	4801      	ldr	r0, [pc, #4]	; (800c088 <__sfp_lock_release+0x8>)
 800c082:	f000 b8d3 	b.w	800c22c <__retarget_lock_release_recursive>
 800c086:	bf00      	nop
 800c088:	200007a1 	.word	0x200007a1

0800c08c <__sinit_lock_acquire>:
 800c08c:	4801      	ldr	r0, [pc, #4]	; (800c094 <__sinit_lock_acquire+0x8>)
 800c08e:	f000 b8cc 	b.w	800c22a <__retarget_lock_acquire_recursive>
 800c092:	bf00      	nop
 800c094:	200007a2 	.word	0x200007a2

0800c098 <__sinit_lock_release>:
 800c098:	4801      	ldr	r0, [pc, #4]	; (800c0a0 <__sinit_lock_release+0x8>)
 800c09a:	f000 b8c7 	b.w	800c22c <__retarget_lock_release_recursive>
 800c09e:	bf00      	nop
 800c0a0:	200007a2 	.word	0x200007a2

0800c0a4 <__sinit>:
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	f7ff fff0 	bl	800c08c <__sinit_lock_acquire>
 800c0ac:	69a3      	ldr	r3, [r4, #24]
 800c0ae:	b11b      	cbz	r3, 800c0b8 <__sinit+0x14>
 800c0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b4:	f7ff bff0 	b.w	800c098 <__sinit_lock_release>
 800c0b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0bc:	6523      	str	r3, [r4, #80]	; 0x50
 800c0be:	4b13      	ldr	r3, [pc, #76]	; (800c10c <__sinit+0x68>)
 800c0c0:	4a13      	ldr	r2, [pc, #76]	; (800c110 <__sinit+0x6c>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0c6:	42a3      	cmp	r3, r4
 800c0c8:	bf04      	itt	eq
 800c0ca:	2301      	moveq	r3, #1
 800c0cc:	61a3      	streq	r3, [r4, #24]
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f000 f820 	bl	800c114 <__sfp>
 800c0d4:	6060      	str	r0, [r4, #4]
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f000 f81c 	bl	800c114 <__sfp>
 800c0dc:	60a0      	str	r0, [r4, #8]
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 f818 	bl	800c114 <__sfp>
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	60e0      	str	r0, [r4, #12]
 800c0e8:	2104      	movs	r1, #4
 800c0ea:	6860      	ldr	r0, [r4, #4]
 800c0ec:	f7ff ff82 	bl	800bff4 <std>
 800c0f0:	68a0      	ldr	r0, [r4, #8]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	2109      	movs	r1, #9
 800c0f6:	f7ff ff7d 	bl	800bff4 <std>
 800c0fa:	68e0      	ldr	r0, [r4, #12]
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	2112      	movs	r1, #18
 800c100:	f7ff ff78 	bl	800bff4 <std>
 800c104:	2301      	movs	r3, #1
 800c106:	61a3      	str	r3, [r4, #24]
 800c108:	e7d2      	b.n	800c0b0 <__sinit+0xc>
 800c10a:	bf00      	nop
 800c10c:	0801403c 	.word	0x0801403c
 800c110:	0800c03d 	.word	0x0800c03d

0800c114 <__sfp>:
 800c114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c116:	4607      	mov	r7, r0
 800c118:	f7ff ffac 	bl	800c074 <__sfp_lock_acquire>
 800c11c:	4b1e      	ldr	r3, [pc, #120]	; (800c198 <__sfp+0x84>)
 800c11e:	681e      	ldr	r6, [r3, #0]
 800c120:	69b3      	ldr	r3, [r6, #24]
 800c122:	b913      	cbnz	r3, 800c12a <__sfp+0x16>
 800c124:	4630      	mov	r0, r6
 800c126:	f7ff ffbd 	bl	800c0a4 <__sinit>
 800c12a:	3648      	adds	r6, #72	; 0x48
 800c12c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c130:	3b01      	subs	r3, #1
 800c132:	d503      	bpl.n	800c13c <__sfp+0x28>
 800c134:	6833      	ldr	r3, [r6, #0]
 800c136:	b30b      	cbz	r3, 800c17c <__sfp+0x68>
 800c138:	6836      	ldr	r6, [r6, #0]
 800c13a:	e7f7      	b.n	800c12c <__sfp+0x18>
 800c13c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c140:	b9d5      	cbnz	r5, 800c178 <__sfp+0x64>
 800c142:	4b16      	ldr	r3, [pc, #88]	; (800c19c <__sfp+0x88>)
 800c144:	60e3      	str	r3, [r4, #12]
 800c146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c14a:	6665      	str	r5, [r4, #100]	; 0x64
 800c14c:	f000 f86c 	bl	800c228 <__retarget_lock_init_recursive>
 800c150:	f7ff ff96 	bl	800c080 <__sfp_lock_release>
 800c154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c15c:	6025      	str	r5, [r4, #0]
 800c15e:	61a5      	str	r5, [r4, #24]
 800c160:	2208      	movs	r2, #8
 800c162:	4629      	mov	r1, r5
 800c164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c168:	f000 f89a 	bl	800c2a0 <memset>
 800c16c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c174:	4620      	mov	r0, r4
 800c176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c178:	3468      	adds	r4, #104	; 0x68
 800c17a:	e7d9      	b.n	800c130 <__sfp+0x1c>
 800c17c:	2104      	movs	r1, #4
 800c17e:	4638      	mov	r0, r7
 800c180:	f7ff ff62 	bl	800c048 <__sfmoreglue>
 800c184:	4604      	mov	r4, r0
 800c186:	6030      	str	r0, [r6, #0]
 800c188:	2800      	cmp	r0, #0
 800c18a:	d1d5      	bne.n	800c138 <__sfp+0x24>
 800c18c:	f7ff ff78 	bl	800c080 <__sfp_lock_release>
 800c190:	230c      	movs	r3, #12
 800c192:	603b      	str	r3, [r7, #0]
 800c194:	e7ee      	b.n	800c174 <__sfp+0x60>
 800c196:	bf00      	nop
 800c198:	0801403c 	.word	0x0801403c
 800c19c:	ffff0001 	.word	0xffff0001

0800c1a0 <_fwalk_reent>:
 800c1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	4688      	mov	r8, r1
 800c1a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1ac:	2700      	movs	r7, #0
 800c1ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1b2:	f1b9 0901 	subs.w	r9, r9, #1
 800c1b6:	d505      	bpl.n	800c1c4 <_fwalk_reent+0x24>
 800c1b8:	6824      	ldr	r4, [r4, #0]
 800c1ba:	2c00      	cmp	r4, #0
 800c1bc:	d1f7      	bne.n	800c1ae <_fwalk_reent+0xe>
 800c1be:	4638      	mov	r0, r7
 800c1c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1c4:	89ab      	ldrh	r3, [r5, #12]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d907      	bls.n	800c1da <_fwalk_reent+0x3a>
 800c1ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	d003      	beq.n	800c1da <_fwalk_reent+0x3a>
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	47c0      	blx	r8
 800c1d8:	4307      	orrs	r7, r0
 800c1da:	3568      	adds	r5, #104	; 0x68
 800c1dc:	e7e9      	b.n	800c1b2 <_fwalk_reent+0x12>
	...

0800c1e0 <__libc_init_array>:
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	4d0d      	ldr	r5, [pc, #52]	; (800c218 <__libc_init_array+0x38>)
 800c1e4:	4c0d      	ldr	r4, [pc, #52]	; (800c21c <__libc_init_array+0x3c>)
 800c1e6:	1b64      	subs	r4, r4, r5
 800c1e8:	10a4      	asrs	r4, r4, #2
 800c1ea:	2600      	movs	r6, #0
 800c1ec:	42a6      	cmp	r6, r4
 800c1ee:	d109      	bne.n	800c204 <__libc_init_array+0x24>
 800c1f0:	4d0b      	ldr	r5, [pc, #44]	; (800c220 <__libc_init_array+0x40>)
 800c1f2:	4c0c      	ldr	r4, [pc, #48]	; (800c224 <__libc_init_array+0x44>)
 800c1f4:	f003 f942 	bl	800f47c <_init>
 800c1f8:	1b64      	subs	r4, r4, r5
 800c1fa:	10a4      	asrs	r4, r4, #2
 800c1fc:	2600      	movs	r6, #0
 800c1fe:	42a6      	cmp	r6, r4
 800c200:	d105      	bne.n	800c20e <__libc_init_array+0x2e>
 800c202:	bd70      	pop	{r4, r5, r6, pc}
 800c204:	f855 3b04 	ldr.w	r3, [r5], #4
 800c208:	4798      	blx	r3
 800c20a:	3601      	adds	r6, #1
 800c20c:	e7ee      	b.n	800c1ec <__libc_init_array+0xc>
 800c20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c212:	4798      	blx	r3
 800c214:	3601      	adds	r6, #1
 800c216:	e7f2      	b.n	800c1fe <__libc_init_array+0x1e>
 800c218:	080143d4 	.word	0x080143d4
 800c21c:	080143d4 	.word	0x080143d4
 800c220:	080143d4 	.word	0x080143d4
 800c224:	080143d8 	.word	0x080143d8

0800c228 <__retarget_lock_init_recursive>:
 800c228:	4770      	bx	lr

0800c22a <__retarget_lock_acquire_recursive>:
 800c22a:	4770      	bx	lr

0800c22c <__retarget_lock_release_recursive>:
 800c22c:	4770      	bx	lr
	...

0800c230 <malloc>:
 800c230:	4b02      	ldr	r3, [pc, #8]	; (800c23c <malloc+0xc>)
 800c232:	4601      	mov	r1, r0
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	f000 b8a7 	b.w	800c388 <_malloc_r>
 800c23a:	bf00      	nop
 800c23c:	20000134 	.word	0x20000134

0800c240 <free>:
 800c240:	4b02      	ldr	r3, [pc, #8]	; (800c24c <free+0xc>)
 800c242:	4601      	mov	r1, r0
 800c244:	6818      	ldr	r0, [r3, #0]
 800c246:	f000 b833 	b.w	800c2b0 <_free_r>
 800c24a:	bf00      	nop
 800c24c:	20000134 	.word	0x20000134

0800c250 <memcpy>:
 800c250:	440a      	add	r2, r1
 800c252:	4291      	cmp	r1, r2
 800c254:	f100 33ff 	add.w	r3, r0, #4294967295
 800c258:	d100      	bne.n	800c25c <memcpy+0xc>
 800c25a:	4770      	bx	lr
 800c25c:	b510      	push	{r4, lr}
 800c25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c262:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c266:	4291      	cmp	r1, r2
 800c268:	d1f9      	bne.n	800c25e <memcpy+0xe>
 800c26a:	bd10      	pop	{r4, pc}

0800c26c <memmove>:
 800c26c:	4288      	cmp	r0, r1
 800c26e:	b510      	push	{r4, lr}
 800c270:	eb01 0402 	add.w	r4, r1, r2
 800c274:	d902      	bls.n	800c27c <memmove+0x10>
 800c276:	4284      	cmp	r4, r0
 800c278:	4623      	mov	r3, r4
 800c27a:	d807      	bhi.n	800c28c <memmove+0x20>
 800c27c:	1e43      	subs	r3, r0, #1
 800c27e:	42a1      	cmp	r1, r4
 800c280:	d008      	beq.n	800c294 <memmove+0x28>
 800c282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c28a:	e7f8      	b.n	800c27e <memmove+0x12>
 800c28c:	4402      	add	r2, r0
 800c28e:	4601      	mov	r1, r0
 800c290:	428a      	cmp	r2, r1
 800c292:	d100      	bne.n	800c296 <memmove+0x2a>
 800c294:	bd10      	pop	{r4, pc}
 800c296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c29a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c29e:	e7f7      	b.n	800c290 <memmove+0x24>

0800c2a0 <memset>:
 800c2a0:	4402      	add	r2, r0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d100      	bne.n	800c2aa <memset+0xa>
 800c2a8:	4770      	bx	lr
 800c2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ae:	e7f9      	b.n	800c2a4 <memset+0x4>

0800c2b0 <_free_r>:
 800c2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2b2:	2900      	cmp	r1, #0
 800c2b4:	d044      	beq.n	800c340 <_free_r+0x90>
 800c2b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ba:	9001      	str	r0, [sp, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f1a1 0404 	sub.w	r4, r1, #4
 800c2c2:	bfb8      	it	lt
 800c2c4:	18e4      	addlt	r4, r4, r3
 800c2c6:	f001 fe51 	bl	800df6c <__malloc_lock>
 800c2ca:	4a1e      	ldr	r2, [pc, #120]	; (800c344 <_free_r+0x94>)
 800c2cc:	9801      	ldr	r0, [sp, #4]
 800c2ce:	6813      	ldr	r3, [r2, #0]
 800c2d0:	b933      	cbnz	r3, 800c2e0 <_free_r+0x30>
 800c2d2:	6063      	str	r3, [r4, #4]
 800c2d4:	6014      	str	r4, [r2, #0]
 800c2d6:	b003      	add	sp, #12
 800c2d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2dc:	f001 be4c 	b.w	800df78 <__malloc_unlock>
 800c2e0:	42a3      	cmp	r3, r4
 800c2e2:	d908      	bls.n	800c2f6 <_free_r+0x46>
 800c2e4:	6825      	ldr	r5, [r4, #0]
 800c2e6:	1961      	adds	r1, r4, r5
 800c2e8:	428b      	cmp	r3, r1
 800c2ea:	bf01      	itttt	eq
 800c2ec:	6819      	ldreq	r1, [r3, #0]
 800c2ee:	685b      	ldreq	r3, [r3, #4]
 800c2f0:	1949      	addeq	r1, r1, r5
 800c2f2:	6021      	streq	r1, [r4, #0]
 800c2f4:	e7ed      	b.n	800c2d2 <_free_r+0x22>
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	b10b      	cbz	r3, 800c300 <_free_r+0x50>
 800c2fc:	42a3      	cmp	r3, r4
 800c2fe:	d9fa      	bls.n	800c2f6 <_free_r+0x46>
 800c300:	6811      	ldr	r1, [r2, #0]
 800c302:	1855      	adds	r5, r2, r1
 800c304:	42a5      	cmp	r5, r4
 800c306:	d10b      	bne.n	800c320 <_free_r+0x70>
 800c308:	6824      	ldr	r4, [r4, #0]
 800c30a:	4421      	add	r1, r4
 800c30c:	1854      	adds	r4, r2, r1
 800c30e:	42a3      	cmp	r3, r4
 800c310:	6011      	str	r1, [r2, #0]
 800c312:	d1e0      	bne.n	800c2d6 <_free_r+0x26>
 800c314:	681c      	ldr	r4, [r3, #0]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	6053      	str	r3, [r2, #4]
 800c31a:	4421      	add	r1, r4
 800c31c:	6011      	str	r1, [r2, #0]
 800c31e:	e7da      	b.n	800c2d6 <_free_r+0x26>
 800c320:	d902      	bls.n	800c328 <_free_r+0x78>
 800c322:	230c      	movs	r3, #12
 800c324:	6003      	str	r3, [r0, #0]
 800c326:	e7d6      	b.n	800c2d6 <_free_r+0x26>
 800c328:	6825      	ldr	r5, [r4, #0]
 800c32a:	1961      	adds	r1, r4, r5
 800c32c:	428b      	cmp	r3, r1
 800c32e:	bf04      	itt	eq
 800c330:	6819      	ldreq	r1, [r3, #0]
 800c332:	685b      	ldreq	r3, [r3, #4]
 800c334:	6063      	str	r3, [r4, #4]
 800c336:	bf04      	itt	eq
 800c338:	1949      	addeq	r1, r1, r5
 800c33a:	6021      	streq	r1, [r4, #0]
 800c33c:	6054      	str	r4, [r2, #4]
 800c33e:	e7ca      	b.n	800c2d6 <_free_r+0x26>
 800c340:	b003      	add	sp, #12
 800c342:	bd30      	pop	{r4, r5, pc}
 800c344:	200007a4 	.word	0x200007a4

0800c348 <sbrk_aligned>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	4e0e      	ldr	r6, [pc, #56]	; (800c384 <sbrk_aligned+0x3c>)
 800c34c:	460c      	mov	r4, r1
 800c34e:	6831      	ldr	r1, [r6, #0]
 800c350:	4605      	mov	r5, r0
 800c352:	b911      	cbnz	r1, 800c35a <sbrk_aligned+0x12>
 800c354:	f000 fd84 	bl	800ce60 <_sbrk_r>
 800c358:	6030      	str	r0, [r6, #0]
 800c35a:	4621      	mov	r1, r4
 800c35c:	4628      	mov	r0, r5
 800c35e:	f000 fd7f 	bl	800ce60 <_sbrk_r>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d00a      	beq.n	800c37c <sbrk_aligned+0x34>
 800c366:	1cc4      	adds	r4, r0, #3
 800c368:	f024 0403 	bic.w	r4, r4, #3
 800c36c:	42a0      	cmp	r0, r4
 800c36e:	d007      	beq.n	800c380 <sbrk_aligned+0x38>
 800c370:	1a21      	subs	r1, r4, r0
 800c372:	4628      	mov	r0, r5
 800c374:	f000 fd74 	bl	800ce60 <_sbrk_r>
 800c378:	3001      	adds	r0, #1
 800c37a:	d101      	bne.n	800c380 <sbrk_aligned+0x38>
 800c37c:	f04f 34ff 	mov.w	r4, #4294967295
 800c380:	4620      	mov	r0, r4
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	200007a8 	.word	0x200007a8

0800c388 <_malloc_r>:
 800c388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38c:	1ccd      	adds	r5, r1, #3
 800c38e:	f025 0503 	bic.w	r5, r5, #3
 800c392:	3508      	adds	r5, #8
 800c394:	2d0c      	cmp	r5, #12
 800c396:	bf38      	it	cc
 800c398:	250c      	movcc	r5, #12
 800c39a:	2d00      	cmp	r5, #0
 800c39c:	4607      	mov	r7, r0
 800c39e:	db01      	blt.n	800c3a4 <_malloc_r+0x1c>
 800c3a0:	42a9      	cmp	r1, r5
 800c3a2:	d905      	bls.n	800c3b0 <_malloc_r+0x28>
 800c3a4:	230c      	movs	r3, #12
 800c3a6:	603b      	str	r3, [r7, #0]
 800c3a8:	2600      	movs	r6, #0
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b0:	4e2e      	ldr	r6, [pc, #184]	; (800c46c <_malloc_r+0xe4>)
 800c3b2:	f001 fddb 	bl	800df6c <__malloc_lock>
 800c3b6:	6833      	ldr	r3, [r6, #0]
 800c3b8:	461c      	mov	r4, r3
 800c3ba:	bb34      	cbnz	r4, 800c40a <_malloc_r+0x82>
 800c3bc:	4629      	mov	r1, r5
 800c3be:	4638      	mov	r0, r7
 800c3c0:	f7ff ffc2 	bl	800c348 <sbrk_aligned>
 800c3c4:	1c43      	adds	r3, r0, #1
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	d14d      	bne.n	800c466 <_malloc_r+0xde>
 800c3ca:	6834      	ldr	r4, [r6, #0]
 800c3cc:	4626      	mov	r6, r4
 800c3ce:	2e00      	cmp	r6, #0
 800c3d0:	d140      	bne.n	800c454 <_malloc_r+0xcc>
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	eb04 0803 	add.w	r8, r4, r3
 800c3dc:	f000 fd40 	bl	800ce60 <_sbrk_r>
 800c3e0:	4580      	cmp	r8, r0
 800c3e2:	d13a      	bne.n	800c45a <_malloc_r+0xd2>
 800c3e4:	6821      	ldr	r1, [r4, #0]
 800c3e6:	3503      	adds	r5, #3
 800c3e8:	1a6d      	subs	r5, r5, r1
 800c3ea:	f025 0503 	bic.w	r5, r5, #3
 800c3ee:	3508      	adds	r5, #8
 800c3f0:	2d0c      	cmp	r5, #12
 800c3f2:	bf38      	it	cc
 800c3f4:	250c      	movcc	r5, #12
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	4638      	mov	r0, r7
 800c3fa:	f7ff ffa5 	bl	800c348 <sbrk_aligned>
 800c3fe:	3001      	adds	r0, #1
 800c400:	d02b      	beq.n	800c45a <_malloc_r+0xd2>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	442b      	add	r3, r5
 800c406:	6023      	str	r3, [r4, #0]
 800c408:	e00e      	b.n	800c428 <_malloc_r+0xa0>
 800c40a:	6822      	ldr	r2, [r4, #0]
 800c40c:	1b52      	subs	r2, r2, r5
 800c40e:	d41e      	bmi.n	800c44e <_malloc_r+0xc6>
 800c410:	2a0b      	cmp	r2, #11
 800c412:	d916      	bls.n	800c442 <_malloc_r+0xba>
 800c414:	1961      	adds	r1, r4, r5
 800c416:	42a3      	cmp	r3, r4
 800c418:	6025      	str	r5, [r4, #0]
 800c41a:	bf18      	it	ne
 800c41c:	6059      	strne	r1, [r3, #4]
 800c41e:	6863      	ldr	r3, [r4, #4]
 800c420:	bf08      	it	eq
 800c422:	6031      	streq	r1, [r6, #0]
 800c424:	5162      	str	r2, [r4, r5]
 800c426:	604b      	str	r3, [r1, #4]
 800c428:	4638      	mov	r0, r7
 800c42a:	f104 060b 	add.w	r6, r4, #11
 800c42e:	f001 fda3 	bl	800df78 <__malloc_unlock>
 800c432:	f026 0607 	bic.w	r6, r6, #7
 800c436:	1d23      	adds	r3, r4, #4
 800c438:	1af2      	subs	r2, r6, r3
 800c43a:	d0b6      	beq.n	800c3aa <_malloc_r+0x22>
 800c43c:	1b9b      	subs	r3, r3, r6
 800c43e:	50a3      	str	r3, [r4, r2]
 800c440:	e7b3      	b.n	800c3aa <_malloc_r+0x22>
 800c442:	6862      	ldr	r2, [r4, #4]
 800c444:	42a3      	cmp	r3, r4
 800c446:	bf0c      	ite	eq
 800c448:	6032      	streq	r2, [r6, #0]
 800c44a:	605a      	strne	r2, [r3, #4]
 800c44c:	e7ec      	b.n	800c428 <_malloc_r+0xa0>
 800c44e:	4623      	mov	r3, r4
 800c450:	6864      	ldr	r4, [r4, #4]
 800c452:	e7b2      	b.n	800c3ba <_malloc_r+0x32>
 800c454:	4634      	mov	r4, r6
 800c456:	6876      	ldr	r6, [r6, #4]
 800c458:	e7b9      	b.n	800c3ce <_malloc_r+0x46>
 800c45a:	230c      	movs	r3, #12
 800c45c:	603b      	str	r3, [r7, #0]
 800c45e:	4638      	mov	r0, r7
 800c460:	f001 fd8a 	bl	800df78 <__malloc_unlock>
 800c464:	e7a1      	b.n	800c3aa <_malloc_r+0x22>
 800c466:	6025      	str	r5, [r4, #0]
 800c468:	e7de      	b.n	800c428 <_malloc_r+0xa0>
 800c46a:	bf00      	nop
 800c46c:	200007a4 	.word	0x200007a4

0800c470 <__cvt>:
 800c470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c474:	ec55 4b10 	vmov	r4, r5, d0
 800c478:	2d00      	cmp	r5, #0
 800c47a:	460e      	mov	r6, r1
 800c47c:	4619      	mov	r1, r3
 800c47e:	462b      	mov	r3, r5
 800c480:	bfbb      	ittet	lt
 800c482:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c486:	461d      	movlt	r5, r3
 800c488:	2300      	movge	r3, #0
 800c48a:	232d      	movlt	r3, #45	; 0x2d
 800c48c:	700b      	strb	r3, [r1, #0]
 800c48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c490:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c494:	4691      	mov	r9, r2
 800c496:	f023 0820 	bic.w	r8, r3, #32
 800c49a:	bfbc      	itt	lt
 800c49c:	4622      	movlt	r2, r4
 800c49e:	4614      	movlt	r4, r2
 800c4a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4a4:	d005      	beq.n	800c4b2 <__cvt+0x42>
 800c4a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c4aa:	d100      	bne.n	800c4ae <__cvt+0x3e>
 800c4ac:	3601      	adds	r6, #1
 800c4ae:	2102      	movs	r1, #2
 800c4b0:	e000      	b.n	800c4b4 <__cvt+0x44>
 800c4b2:	2103      	movs	r1, #3
 800c4b4:	ab03      	add	r3, sp, #12
 800c4b6:	9301      	str	r3, [sp, #4]
 800c4b8:	ab02      	add	r3, sp, #8
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	ec45 4b10 	vmov	d0, r4, r5
 800c4c0:	4653      	mov	r3, sl
 800c4c2:	4632      	mov	r2, r6
 800c4c4:	f000 fee8 	bl	800d298 <_dtoa_r>
 800c4c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c4cc:	4607      	mov	r7, r0
 800c4ce:	d102      	bne.n	800c4d6 <__cvt+0x66>
 800c4d0:	f019 0f01 	tst.w	r9, #1
 800c4d4:	d022      	beq.n	800c51c <__cvt+0xac>
 800c4d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4da:	eb07 0906 	add.w	r9, r7, r6
 800c4de:	d110      	bne.n	800c502 <__cvt+0x92>
 800c4e0:	783b      	ldrb	r3, [r7, #0]
 800c4e2:	2b30      	cmp	r3, #48	; 0x30
 800c4e4:	d10a      	bne.n	800c4fc <__cvt+0x8c>
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	f7f4 fac3 	bl	8000a78 <__aeabi_dcmpeq>
 800c4f2:	b918      	cbnz	r0, 800c4fc <__cvt+0x8c>
 800c4f4:	f1c6 0601 	rsb	r6, r6, #1
 800c4f8:	f8ca 6000 	str.w	r6, [sl]
 800c4fc:	f8da 3000 	ldr.w	r3, [sl]
 800c500:	4499      	add	r9, r3
 800c502:	2200      	movs	r2, #0
 800c504:	2300      	movs	r3, #0
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 fab5 	bl	8000a78 <__aeabi_dcmpeq>
 800c50e:	b108      	cbz	r0, 800c514 <__cvt+0xa4>
 800c510:	f8cd 900c 	str.w	r9, [sp, #12]
 800c514:	2230      	movs	r2, #48	; 0x30
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	454b      	cmp	r3, r9
 800c51a:	d307      	bcc.n	800c52c <__cvt+0xbc>
 800c51c:	9b03      	ldr	r3, [sp, #12]
 800c51e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c520:	1bdb      	subs	r3, r3, r7
 800c522:	4638      	mov	r0, r7
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	b004      	add	sp, #16
 800c528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c52c:	1c59      	adds	r1, r3, #1
 800c52e:	9103      	str	r1, [sp, #12]
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	e7f0      	b.n	800c516 <__cvt+0xa6>

0800c534 <__exponent>:
 800c534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c536:	4603      	mov	r3, r0
 800c538:	2900      	cmp	r1, #0
 800c53a:	bfb8      	it	lt
 800c53c:	4249      	neglt	r1, r1
 800c53e:	f803 2b02 	strb.w	r2, [r3], #2
 800c542:	bfb4      	ite	lt
 800c544:	222d      	movlt	r2, #45	; 0x2d
 800c546:	222b      	movge	r2, #43	; 0x2b
 800c548:	2909      	cmp	r1, #9
 800c54a:	7042      	strb	r2, [r0, #1]
 800c54c:	dd2a      	ble.n	800c5a4 <__exponent+0x70>
 800c54e:	f10d 0407 	add.w	r4, sp, #7
 800c552:	46a4      	mov	ip, r4
 800c554:	270a      	movs	r7, #10
 800c556:	46a6      	mov	lr, r4
 800c558:	460a      	mov	r2, r1
 800c55a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c55e:	fb07 1516 	mls	r5, r7, r6, r1
 800c562:	3530      	adds	r5, #48	; 0x30
 800c564:	2a63      	cmp	r2, #99	; 0x63
 800c566:	f104 34ff 	add.w	r4, r4, #4294967295
 800c56a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c56e:	4631      	mov	r1, r6
 800c570:	dcf1      	bgt.n	800c556 <__exponent+0x22>
 800c572:	3130      	adds	r1, #48	; 0x30
 800c574:	f1ae 0502 	sub.w	r5, lr, #2
 800c578:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c57c:	1c44      	adds	r4, r0, #1
 800c57e:	4629      	mov	r1, r5
 800c580:	4561      	cmp	r1, ip
 800c582:	d30a      	bcc.n	800c59a <__exponent+0x66>
 800c584:	f10d 0209 	add.w	r2, sp, #9
 800c588:	eba2 020e 	sub.w	r2, r2, lr
 800c58c:	4565      	cmp	r5, ip
 800c58e:	bf88      	it	hi
 800c590:	2200      	movhi	r2, #0
 800c592:	4413      	add	r3, r2
 800c594:	1a18      	subs	r0, r3, r0
 800c596:	b003      	add	sp, #12
 800c598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c59a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c59e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c5a2:	e7ed      	b.n	800c580 <__exponent+0x4c>
 800c5a4:	2330      	movs	r3, #48	; 0x30
 800c5a6:	3130      	adds	r1, #48	; 0x30
 800c5a8:	7083      	strb	r3, [r0, #2]
 800c5aa:	70c1      	strb	r1, [r0, #3]
 800c5ac:	1d03      	adds	r3, r0, #4
 800c5ae:	e7f1      	b.n	800c594 <__exponent+0x60>

0800c5b0 <_printf_float>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	ed2d 8b02 	vpush	{d8}
 800c5b8:	b08d      	sub	sp, #52	; 0x34
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c5c0:	4616      	mov	r6, r2
 800c5c2:	461f      	mov	r7, r3
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	f001 fc55 	bl	800de74 <_localeconv_r>
 800c5ca:	f8d0 a000 	ldr.w	sl, [r0]
 800c5ce:	4650      	mov	r0, sl
 800c5d0:	f7f3 fdd6 	bl	8000180 <strlen>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	9305      	str	r3, [sp, #20]
 800c5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c5e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c5e4:	3307      	adds	r3, #7
 800c5e6:	f023 0307 	bic.w	r3, r3, #7
 800c5ea:	f103 0208 	add.w	r2, r3, #8
 800c5ee:	f8c8 2000 	str.w	r2, [r8]
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c5fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c5fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c602:	9307      	str	r3, [sp, #28]
 800c604:	f8cd 8018 	str.w	r8, [sp, #24]
 800c608:	ee08 0a10 	vmov	s16, r0
 800c60c:	4b9f      	ldr	r3, [pc, #636]	; (800c88c <_printf_float+0x2dc>)
 800c60e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c612:	f04f 32ff 	mov.w	r2, #4294967295
 800c616:	f7f4 fa61 	bl	8000adc <__aeabi_dcmpun>
 800c61a:	bb88      	cbnz	r0, 800c680 <_printf_float+0xd0>
 800c61c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c620:	4b9a      	ldr	r3, [pc, #616]	; (800c88c <_printf_float+0x2dc>)
 800c622:	f04f 32ff 	mov.w	r2, #4294967295
 800c626:	f7f4 fa3b 	bl	8000aa0 <__aeabi_dcmple>
 800c62a:	bb48      	cbnz	r0, 800c680 <_printf_float+0xd0>
 800c62c:	2200      	movs	r2, #0
 800c62e:	2300      	movs	r3, #0
 800c630:	4640      	mov	r0, r8
 800c632:	4649      	mov	r1, r9
 800c634:	f7f4 fa2a 	bl	8000a8c <__aeabi_dcmplt>
 800c638:	b110      	cbz	r0, 800c640 <_printf_float+0x90>
 800c63a:	232d      	movs	r3, #45	; 0x2d
 800c63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c640:	4b93      	ldr	r3, [pc, #588]	; (800c890 <_printf_float+0x2e0>)
 800c642:	4894      	ldr	r0, [pc, #592]	; (800c894 <_printf_float+0x2e4>)
 800c644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c648:	bf94      	ite	ls
 800c64a:	4698      	movls	r8, r3
 800c64c:	4680      	movhi	r8, r0
 800c64e:	2303      	movs	r3, #3
 800c650:	6123      	str	r3, [r4, #16]
 800c652:	9b05      	ldr	r3, [sp, #20]
 800c654:	f023 0204 	bic.w	r2, r3, #4
 800c658:	6022      	str	r2, [r4, #0]
 800c65a:	f04f 0900 	mov.w	r9, #0
 800c65e:	9700      	str	r7, [sp, #0]
 800c660:	4633      	mov	r3, r6
 800c662:	aa0b      	add	r2, sp, #44	; 0x2c
 800c664:	4621      	mov	r1, r4
 800c666:	4628      	mov	r0, r5
 800c668:	f000 f9d8 	bl	800ca1c <_printf_common>
 800c66c:	3001      	adds	r0, #1
 800c66e:	f040 8090 	bne.w	800c792 <_printf_float+0x1e2>
 800c672:	f04f 30ff 	mov.w	r0, #4294967295
 800c676:	b00d      	add	sp, #52	; 0x34
 800c678:	ecbd 8b02 	vpop	{d8}
 800c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c680:	4642      	mov	r2, r8
 800c682:	464b      	mov	r3, r9
 800c684:	4640      	mov	r0, r8
 800c686:	4649      	mov	r1, r9
 800c688:	f7f4 fa28 	bl	8000adc <__aeabi_dcmpun>
 800c68c:	b140      	cbz	r0, 800c6a0 <_printf_float+0xf0>
 800c68e:	464b      	mov	r3, r9
 800c690:	2b00      	cmp	r3, #0
 800c692:	bfbc      	itt	lt
 800c694:	232d      	movlt	r3, #45	; 0x2d
 800c696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c69a:	487f      	ldr	r0, [pc, #508]	; (800c898 <_printf_float+0x2e8>)
 800c69c:	4b7f      	ldr	r3, [pc, #508]	; (800c89c <_printf_float+0x2ec>)
 800c69e:	e7d1      	b.n	800c644 <_printf_float+0x94>
 800c6a0:	6863      	ldr	r3, [r4, #4]
 800c6a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c6a6:	9206      	str	r2, [sp, #24]
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	d13f      	bne.n	800c72c <_printf_float+0x17c>
 800c6ac:	2306      	movs	r3, #6
 800c6ae:	6063      	str	r3, [r4, #4]
 800c6b0:	9b05      	ldr	r3, [sp, #20]
 800c6b2:	6861      	ldr	r1, [r4, #4]
 800c6b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	9303      	str	r3, [sp, #12]
 800c6bc:	ab0a      	add	r3, sp, #40	; 0x28
 800c6be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c6c2:	ab09      	add	r3, sp, #36	; 0x24
 800c6c4:	ec49 8b10 	vmov	d0, r8, r9
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	6022      	str	r2, [r4, #0]
 800c6cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f7ff fecd 	bl	800c470 <__cvt>
 800c6d6:	9b06      	ldr	r3, [sp, #24]
 800c6d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6da:	2b47      	cmp	r3, #71	; 0x47
 800c6dc:	4680      	mov	r8, r0
 800c6de:	d108      	bne.n	800c6f2 <_printf_float+0x142>
 800c6e0:	1cc8      	adds	r0, r1, #3
 800c6e2:	db02      	blt.n	800c6ea <_printf_float+0x13a>
 800c6e4:	6863      	ldr	r3, [r4, #4]
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	dd41      	ble.n	800c76e <_printf_float+0x1be>
 800c6ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800c6ee:	fa5f fb8b 	uxtb.w	fp, fp
 800c6f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c6f6:	d820      	bhi.n	800c73a <_printf_float+0x18a>
 800c6f8:	3901      	subs	r1, #1
 800c6fa:	465a      	mov	r2, fp
 800c6fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c700:	9109      	str	r1, [sp, #36]	; 0x24
 800c702:	f7ff ff17 	bl	800c534 <__exponent>
 800c706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c708:	1813      	adds	r3, r2, r0
 800c70a:	2a01      	cmp	r2, #1
 800c70c:	4681      	mov	r9, r0
 800c70e:	6123      	str	r3, [r4, #16]
 800c710:	dc02      	bgt.n	800c718 <_printf_float+0x168>
 800c712:	6822      	ldr	r2, [r4, #0]
 800c714:	07d2      	lsls	r2, r2, #31
 800c716:	d501      	bpl.n	800c71c <_printf_float+0x16c>
 800c718:	3301      	adds	r3, #1
 800c71a:	6123      	str	r3, [r4, #16]
 800c71c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c720:	2b00      	cmp	r3, #0
 800c722:	d09c      	beq.n	800c65e <_printf_float+0xae>
 800c724:	232d      	movs	r3, #45	; 0x2d
 800c726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c72a:	e798      	b.n	800c65e <_printf_float+0xae>
 800c72c:	9a06      	ldr	r2, [sp, #24]
 800c72e:	2a47      	cmp	r2, #71	; 0x47
 800c730:	d1be      	bne.n	800c6b0 <_printf_float+0x100>
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1bc      	bne.n	800c6b0 <_printf_float+0x100>
 800c736:	2301      	movs	r3, #1
 800c738:	e7b9      	b.n	800c6ae <_printf_float+0xfe>
 800c73a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c73e:	d118      	bne.n	800c772 <_printf_float+0x1c2>
 800c740:	2900      	cmp	r1, #0
 800c742:	6863      	ldr	r3, [r4, #4]
 800c744:	dd0b      	ble.n	800c75e <_printf_float+0x1ae>
 800c746:	6121      	str	r1, [r4, #16]
 800c748:	b913      	cbnz	r3, 800c750 <_printf_float+0x1a0>
 800c74a:	6822      	ldr	r2, [r4, #0]
 800c74c:	07d0      	lsls	r0, r2, #31
 800c74e:	d502      	bpl.n	800c756 <_printf_float+0x1a6>
 800c750:	3301      	adds	r3, #1
 800c752:	440b      	add	r3, r1
 800c754:	6123      	str	r3, [r4, #16]
 800c756:	65a1      	str	r1, [r4, #88]	; 0x58
 800c758:	f04f 0900 	mov.w	r9, #0
 800c75c:	e7de      	b.n	800c71c <_printf_float+0x16c>
 800c75e:	b913      	cbnz	r3, 800c766 <_printf_float+0x1b6>
 800c760:	6822      	ldr	r2, [r4, #0]
 800c762:	07d2      	lsls	r2, r2, #31
 800c764:	d501      	bpl.n	800c76a <_printf_float+0x1ba>
 800c766:	3302      	adds	r3, #2
 800c768:	e7f4      	b.n	800c754 <_printf_float+0x1a4>
 800c76a:	2301      	movs	r3, #1
 800c76c:	e7f2      	b.n	800c754 <_printf_float+0x1a4>
 800c76e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c774:	4299      	cmp	r1, r3
 800c776:	db05      	blt.n	800c784 <_printf_float+0x1d4>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	6121      	str	r1, [r4, #16]
 800c77c:	07d8      	lsls	r0, r3, #31
 800c77e:	d5ea      	bpl.n	800c756 <_printf_float+0x1a6>
 800c780:	1c4b      	adds	r3, r1, #1
 800c782:	e7e7      	b.n	800c754 <_printf_float+0x1a4>
 800c784:	2900      	cmp	r1, #0
 800c786:	bfd4      	ite	le
 800c788:	f1c1 0202 	rsble	r2, r1, #2
 800c78c:	2201      	movgt	r2, #1
 800c78e:	4413      	add	r3, r2
 800c790:	e7e0      	b.n	800c754 <_printf_float+0x1a4>
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	055a      	lsls	r2, r3, #21
 800c796:	d407      	bmi.n	800c7a8 <_printf_float+0x1f8>
 800c798:	6923      	ldr	r3, [r4, #16]
 800c79a:	4642      	mov	r2, r8
 800c79c:	4631      	mov	r1, r6
 800c79e:	4628      	mov	r0, r5
 800c7a0:	47b8      	blx	r7
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	d12c      	bne.n	800c800 <_printf_float+0x250>
 800c7a6:	e764      	b.n	800c672 <_printf_float+0xc2>
 800c7a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c7ac:	f240 80e0 	bls.w	800c970 <_printf_float+0x3c0>
 800c7b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	f7f4 f95e 	bl	8000a78 <__aeabi_dcmpeq>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d034      	beq.n	800c82a <_printf_float+0x27a>
 800c7c0:	4a37      	ldr	r2, [pc, #220]	; (800c8a0 <_printf_float+0x2f0>)
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	4631      	mov	r1, r6
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	47b8      	blx	r7
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	f43f af51 	beq.w	800c672 <_printf_float+0xc2>
 800c7d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	db02      	blt.n	800c7de <_printf_float+0x22e>
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	07d8      	lsls	r0, r3, #31
 800c7dc:	d510      	bpl.n	800c800 <_printf_float+0x250>
 800c7de:	ee18 3a10 	vmov	r3, s16
 800c7e2:	4652      	mov	r2, sl
 800c7e4:	4631      	mov	r1, r6
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	47b8      	blx	r7
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	f43f af41 	beq.w	800c672 <_printf_float+0xc2>
 800c7f0:	f04f 0800 	mov.w	r8, #0
 800c7f4:	f104 091a 	add.w	r9, r4, #26
 800c7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	4543      	cmp	r3, r8
 800c7fe:	dc09      	bgt.n	800c814 <_printf_float+0x264>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	079b      	lsls	r3, r3, #30
 800c804:	f100 8105 	bmi.w	800ca12 <_printf_float+0x462>
 800c808:	68e0      	ldr	r0, [r4, #12]
 800c80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c80c:	4298      	cmp	r0, r3
 800c80e:	bfb8      	it	lt
 800c810:	4618      	movlt	r0, r3
 800c812:	e730      	b.n	800c676 <_printf_float+0xc6>
 800c814:	2301      	movs	r3, #1
 800c816:	464a      	mov	r2, r9
 800c818:	4631      	mov	r1, r6
 800c81a:	4628      	mov	r0, r5
 800c81c:	47b8      	blx	r7
 800c81e:	3001      	adds	r0, #1
 800c820:	f43f af27 	beq.w	800c672 <_printf_float+0xc2>
 800c824:	f108 0801 	add.w	r8, r8, #1
 800c828:	e7e6      	b.n	800c7f8 <_printf_float+0x248>
 800c82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	dc39      	bgt.n	800c8a4 <_printf_float+0x2f4>
 800c830:	4a1b      	ldr	r2, [pc, #108]	; (800c8a0 <_printf_float+0x2f0>)
 800c832:	2301      	movs	r3, #1
 800c834:	4631      	mov	r1, r6
 800c836:	4628      	mov	r0, r5
 800c838:	47b8      	blx	r7
 800c83a:	3001      	adds	r0, #1
 800c83c:	f43f af19 	beq.w	800c672 <_printf_float+0xc2>
 800c840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c844:	4313      	orrs	r3, r2
 800c846:	d102      	bne.n	800c84e <_printf_float+0x29e>
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	07d9      	lsls	r1, r3, #31
 800c84c:	d5d8      	bpl.n	800c800 <_printf_float+0x250>
 800c84e:	ee18 3a10 	vmov	r3, s16
 800c852:	4652      	mov	r2, sl
 800c854:	4631      	mov	r1, r6
 800c856:	4628      	mov	r0, r5
 800c858:	47b8      	blx	r7
 800c85a:	3001      	adds	r0, #1
 800c85c:	f43f af09 	beq.w	800c672 <_printf_float+0xc2>
 800c860:	f04f 0900 	mov.w	r9, #0
 800c864:	f104 0a1a 	add.w	sl, r4, #26
 800c868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86a:	425b      	negs	r3, r3
 800c86c:	454b      	cmp	r3, r9
 800c86e:	dc01      	bgt.n	800c874 <_printf_float+0x2c4>
 800c870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c872:	e792      	b.n	800c79a <_printf_float+0x1ea>
 800c874:	2301      	movs	r3, #1
 800c876:	4652      	mov	r2, sl
 800c878:	4631      	mov	r1, r6
 800c87a:	4628      	mov	r0, r5
 800c87c:	47b8      	blx	r7
 800c87e:	3001      	adds	r0, #1
 800c880:	f43f aef7 	beq.w	800c672 <_printf_float+0xc2>
 800c884:	f109 0901 	add.w	r9, r9, #1
 800c888:	e7ee      	b.n	800c868 <_printf_float+0x2b8>
 800c88a:	bf00      	nop
 800c88c:	7fefffff 	.word	0x7fefffff
 800c890:	08014040 	.word	0x08014040
 800c894:	08014044 	.word	0x08014044
 800c898:	0801404c 	.word	0x0801404c
 800c89c:	08014048 	.word	0x08014048
 800c8a0:	08014050 	.word	0x08014050
 800c8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	bfa8      	it	ge
 800c8ac:	461a      	movge	r2, r3
 800c8ae:	2a00      	cmp	r2, #0
 800c8b0:	4691      	mov	r9, r2
 800c8b2:	dc37      	bgt.n	800c924 <_printf_float+0x374>
 800c8b4:	f04f 0b00 	mov.w	fp, #0
 800c8b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8bc:	f104 021a 	add.w	r2, r4, #26
 800c8c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8c2:	9305      	str	r3, [sp, #20]
 800c8c4:	eba3 0309 	sub.w	r3, r3, r9
 800c8c8:	455b      	cmp	r3, fp
 800c8ca:	dc33      	bgt.n	800c934 <_printf_float+0x384>
 800c8cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	db3b      	blt.n	800c94c <_printf_float+0x39c>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	07da      	lsls	r2, r3, #31
 800c8d8:	d438      	bmi.n	800c94c <_printf_float+0x39c>
 800c8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8dc:	9a05      	ldr	r2, [sp, #20]
 800c8de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8e0:	1a9a      	subs	r2, r3, r2
 800c8e2:	eba3 0901 	sub.w	r9, r3, r1
 800c8e6:	4591      	cmp	r9, r2
 800c8e8:	bfa8      	it	ge
 800c8ea:	4691      	movge	r9, r2
 800c8ec:	f1b9 0f00 	cmp.w	r9, #0
 800c8f0:	dc35      	bgt.n	800c95e <_printf_float+0x3ae>
 800c8f2:	f04f 0800 	mov.w	r8, #0
 800c8f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8fa:	f104 0a1a 	add.w	sl, r4, #26
 800c8fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c902:	1a9b      	subs	r3, r3, r2
 800c904:	eba3 0309 	sub.w	r3, r3, r9
 800c908:	4543      	cmp	r3, r8
 800c90a:	f77f af79 	ble.w	800c800 <_printf_float+0x250>
 800c90e:	2301      	movs	r3, #1
 800c910:	4652      	mov	r2, sl
 800c912:	4631      	mov	r1, r6
 800c914:	4628      	mov	r0, r5
 800c916:	47b8      	blx	r7
 800c918:	3001      	adds	r0, #1
 800c91a:	f43f aeaa 	beq.w	800c672 <_printf_float+0xc2>
 800c91e:	f108 0801 	add.w	r8, r8, #1
 800c922:	e7ec      	b.n	800c8fe <_printf_float+0x34e>
 800c924:	4613      	mov	r3, r2
 800c926:	4631      	mov	r1, r6
 800c928:	4642      	mov	r2, r8
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b8      	blx	r7
 800c92e:	3001      	adds	r0, #1
 800c930:	d1c0      	bne.n	800c8b4 <_printf_float+0x304>
 800c932:	e69e      	b.n	800c672 <_printf_float+0xc2>
 800c934:	2301      	movs	r3, #1
 800c936:	4631      	mov	r1, r6
 800c938:	4628      	mov	r0, r5
 800c93a:	9205      	str	r2, [sp, #20]
 800c93c:	47b8      	blx	r7
 800c93e:	3001      	adds	r0, #1
 800c940:	f43f ae97 	beq.w	800c672 <_printf_float+0xc2>
 800c944:	9a05      	ldr	r2, [sp, #20]
 800c946:	f10b 0b01 	add.w	fp, fp, #1
 800c94a:	e7b9      	b.n	800c8c0 <_printf_float+0x310>
 800c94c:	ee18 3a10 	vmov	r3, s16
 800c950:	4652      	mov	r2, sl
 800c952:	4631      	mov	r1, r6
 800c954:	4628      	mov	r0, r5
 800c956:	47b8      	blx	r7
 800c958:	3001      	adds	r0, #1
 800c95a:	d1be      	bne.n	800c8da <_printf_float+0x32a>
 800c95c:	e689      	b.n	800c672 <_printf_float+0xc2>
 800c95e:	9a05      	ldr	r2, [sp, #20]
 800c960:	464b      	mov	r3, r9
 800c962:	4442      	add	r2, r8
 800c964:	4631      	mov	r1, r6
 800c966:	4628      	mov	r0, r5
 800c968:	47b8      	blx	r7
 800c96a:	3001      	adds	r0, #1
 800c96c:	d1c1      	bne.n	800c8f2 <_printf_float+0x342>
 800c96e:	e680      	b.n	800c672 <_printf_float+0xc2>
 800c970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c972:	2a01      	cmp	r2, #1
 800c974:	dc01      	bgt.n	800c97a <_printf_float+0x3ca>
 800c976:	07db      	lsls	r3, r3, #31
 800c978:	d538      	bpl.n	800c9ec <_printf_float+0x43c>
 800c97a:	2301      	movs	r3, #1
 800c97c:	4642      	mov	r2, r8
 800c97e:	4631      	mov	r1, r6
 800c980:	4628      	mov	r0, r5
 800c982:	47b8      	blx	r7
 800c984:	3001      	adds	r0, #1
 800c986:	f43f ae74 	beq.w	800c672 <_printf_float+0xc2>
 800c98a:	ee18 3a10 	vmov	r3, s16
 800c98e:	4652      	mov	r2, sl
 800c990:	4631      	mov	r1, r6
 800c992:	4628      	mov	r0, r5
 800c994:	47b8      	blx	r7
 800c996:	3001      	adds	r0, #1
 800c998:	f43f ae6b 	beq.w	800c672 <_printf_float+0xc2>
 800c99c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f7f4 f868 	bl	8000a78 <__aeabi_dcmpeq>
 800c9a8:	b9d8      	cbnz	r0, 800c9e2 <_printf_float+0x432>
 800c9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ac:	f108 0201 	add.w	r2, r8, #1
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	47b8      	blx	r7
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d10e      	bne.n	800c9da <_printf_float+0x42a>
 800c9bc:	e659      	b.n	800c672 <_printf_float+0xc2>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4652      	mov	r2, sl
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	47b8      	blx	r7
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	f43f ae52 	beq.w	800c672 <_printf_float+0xc2>
 800c9ce:	f108 0801 	add.w	r8, r8, #1
 800c9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	4543      	cmp	r3, r8
 800c9d8:	dcf1      	bgt.n	800c9be <_printf_float+0x40e>
 800c9da:	464b      	mov	r3, r9
 800c9dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c9e0:	e6dc      	b.n	800c79c <_printf_float+0x1ec>
 800c9e2:	f04f 0800 	mov.w	r8, #0
 800c9e6:	f104 0a1a 	add.w	sl, r4, #26
 800c9ea:	e7f2      	b.n	800c9d2 <_printf_float+0x422>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	4642      	mov	r2, r8
 800c9f0:	e7df      	b.n	800c9b2 <_printf_float+0x402>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	464a      	mov	r2, r9
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	47b8      	blx	r7
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	f43f ae38 	beq.w	800c672 <_printf_float+0xc2>
 800ca02:	f108 0801 	add.w	r8, r8, #1
 800ca06:	68e3      	ldr	r3, [r4, #12]
 800ca08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca0a:	1a5b      	subs	r3, r3, r1
 800ca0c:	4543      	cmp	r3, r8
 800ca0e:	dcf0      	bgt.n	800c9f2 <_printf_float+0x442>
 800ca10:	e6fa      	b.n	800c808 <_printf_float+0x258>
 800ca12:	f04f 0800 	mov.w	r8, #0
 800ca16:	f104 0919 	add.w	r9, r4, #25
 800ca1a:	e7f4      	b.n	800ca06 <_printf_float+0x456>

0800ca1c <_printf_common>:
 800ca1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca20:	4616      	mov	r6, r2
 800ca22:	4699      	mov	r9, r3
 800ca24:	688a      	ldr	r2, [r1, #8]
 800ca26:	690b      	ldr	r3, [r1, #16]
 800ca28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	bfb8      	it	lt
 800ca30:	4613      	movlt	r3, r2
 800ca32:	6033      	str	r3, [r6, #0]
 800ca34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca38:	4607      	mov	r7, r0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	b10a      	cbz	r2, 800ca42 <_printf_common+0x26>
 800ca3e:	3301      	adds	r3, #1
 800ca40:	6033      	str	r3, [r6, #0]
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	0699      	lsls	r1, r3, #26
 800ca46:	bf42      	ittt	mi
 800ca48:	6833      	ldrmi	r3, [r6, #0]
 800ca4a:	3302      	addmi	r3, #2
 800ca4c:	6033      	strmi	r3, [r6, #0]
 800ca4e:	6825      	ldr	r5, [r4, #0]
 800ca50:	f015 0506 	ands.w	r5, r5, #6
 800ca54:	d106      	bne.n	800ca64 <_printf_common+0x48>
 800ca56:	f104 0a19 	add.w	sl, r4, #25
 800ca5a:	68e3      	ldr	r3, [r4, #12]
 800ca5c:	6832      	ldr	r2, [r6, #0]
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	42ab      	cmp	r3, r5
 800ca62:	dc26      	bgt.n	800cab2 <_printf_common+0x96>
 800ca64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca68:	1e13      	subs	r3, r2, #0
 800ca6a:	6822      	ldr	r2, [r4, #0]
 800ca6c:	bf18      	it	ne
 800ca6e:	2301      	movne	r3, #1
 800ca70:	0692      	lsls	r2, r2, #26
 800ca72:	d42b      	bmi.n	800cacc <_printf_common+0xb0>
 800ca74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca78:	4649      	mov	r1, r9
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	47c0      	blx	r8
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d01e      	beq.n	800cac0 <_printf_common+0xa4>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	68e5      	ldr	r5, [r4, #12]
 800ca86:	6832      	ldr	r2, [r6, #0]
 800ca88:	f003 0306 	and.w	r3, r3, #6
 800ca8c:	2b04      	cmp	r3, #4
 800ca8e:	bf08      	it	eq
 800ca90:	1aad      	subeq	r5, r5, r2
 800ca92:	68a3      	ldr	r3, [r4, #8]
 800ca94:	6922      	ldr	r2, [r4, #16]
 800ca96:	bf0c      	ite	eq
 800ca98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca9c:	2500      	movne	r5, #0
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	bfc4      	itt	gt
 800caa2:	1a9b      	subgt	r3, r3, r2
 800caa4:	18ed      	addgt	r5, r5, r3
 800caa6:	2600      	movs	r6, #0
 800caa8:	341a      	adds	r4, #26
 800caaa:	42b5      	cmp	r5, r6
 800caac:	d11a      	bne.n	800cae4 <_printf_common+0xc8>
 800caae:	2000      	movs	r0, #0
 800cab0:	e008      	b.n	800cac4 <_printf_common+0xa8>
 800cab2:	2301      	movs	r3, #1
 800cab4:	4652      	mov	r2, sl
 800cab6:	4649      	mov	r1, r9
 800cab8:	4638      	mov	r0, r7
 800caba:	47c0      	blx	r8
 800cabc:	3001      	adds	r0, #1
 800cabe:	d103      	bne.n	800cac8 <_printf_common+0xac>
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac8:	3501      	adds	r5, #1
 800caca:	e7c6      	b.n	800ca5a <_printf_common+0x3e>
 800cacc:	18e1      	adds	r1, r4, r3
 800cace:	1c5a      	adds	r2, r3, #1
 800cad0:	2030      	movs	r0, #48	; 0x30
 800cad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cad6:	4422      	add	r2, r4
 800cad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cadc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cae0:	3302      	adds	r3, #2
 800cae2:	e7c7      	b.n	800ca74 <_printf_common+0x58>
 800cae4:	2301      	movs	r3, #1
 800cae6:	4622      	mov	r2, r4
 800cae8:	4649      	mov	r1, r9
 800caea:	4638      	mov	r0, r7
 800caec:	47c0      	blx	r8
 800caee:	3001      	adds	r0, #1
 800caf0:	d0e6      	beq.n	800cac0 <_printf_common+0xa4>
 800caf2:	3601      	adds	r6, #1
 800caf4:	e7d9      	b.n	800caaa <_printf_common+0x8e>
	...

0800caf8 <_printf_i>:
 800caf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cafc:	7e0f      	ldrb	r7, [r1, #24]
 800cafe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb00:	2f78      	cmp	r7, #120	; 0x78
 800cb02:	4691      	mov	r9, r2
 800cb04:	4680      	mov	r8, r0
 800cb06:	460c      	mov	r4, r1
 800cb08:	469a      	mov	sl, r3
 800cb0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb0e:	d807      	bhi.n	800cb20 <_printf_i+0x28>
 800cb10:	2f62      	cmp	r7, #98	; 0x62
 800cb12:	d80a      	bhi.n	800cb2a <_printf_i+0x32>
 800cb14:	2f00      	cmp	r7, #0
 800cb16:	f000 80d8 	beq.w	800ccca <_printf_i+0x1d2>
 800cb1a:	2f58      	cmp	r7, #88	; 0x58
 800cb1c:	f000 80a3 	beq.w	800cc66 <_printf_i+0x16e>
 800cb20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb28:	e03a      	b.n	800cba0 <_printf_i+0xa8>
 800cb2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb2e:	2b15      	cmp	r3, #21
 800cb30:	d8f6      	bhi.n	800cb20 <_printf_i+0x28>
 800cb32:	a101      	add	r1, pc, #4	; (adr r1, 800cb38 <_printf_i+0x40>)
 800cb34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb38:	0800cb91 	.word	0x0800cb91
 800cb3c:	0800cba5 	.word	0x0800cba5
 800cb40:	0800cb21 	.word	0x0800cb21
 800cb44:	0800cb21 	.word	0x0800cb21
 800cb48:	0800cb21 	.word	0x0800cb21
 800cb4c:	0800cb21 	.word	0x0800cb21
 800cb50:	0800cba5 	.word	0x0800cba5
 800cb54:	0800cb21 	.word	0x0800cb21
 800cb58:	0800cb21 	.word	0x0800cb21
 800cb5c:	0800cb21 	.word	0x0800cb21
 800cb60:	0800cb21 	.word	0x0800cb21
 800cb64:	0800ccb1 	.word	0x0800ccb1
 800cb68:	0800cbd5 	.word	0x0800cbd5
 800cb6c:	0800cc93 	.word	0x0800cc93
 800cb70:	0800cb21 	.word	0x0800cb21
 800cb74:	0800cb21 	.word	0x0800cb21
 800cb78:	0800ccd3 	.word	0x0800ccd3
 800cb7c:	0800cb21 	.word	0x0800cb21
 800cb80:	0800cbd5 	.word	0x0800cbd5
 800cb84:	0800cb21 	.word	0x0800cb21
 800cb88:	0800cb21 	.word	0x0800cb21
 800cb8c:	0800cc9b 	.word	0x0800cc9b
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	1d1a      	adds	r2, r3, #4
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	602a      	str	r2, [r5, #0]
 800cb98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cba0:	2301      	movs	r3, #1
 800cba2:	e0a3      	b.n	800ccec <_printf_i+0x1f4>
 800cba4:	6820      	ldr	r0, [r4, #0]
 800cba6:	6829      	ldr	r1, [r5, #0]
 800cba8:	0606      	lsls	r6, r0, #24
 800cbaa:	f101 0304 	add.w	r3, r1, #4
 800cbae:	d50a      	bpl.n	800cbc6 <_printf_i+0xce>
 800cbb0:	680e      	ldr	r6, [r1, #0]
 800cbb2:	602b      	str	r3, [r5, #0]
 800cbb4:	2e00      	cmp	r6, #0
 800cbb6:	da03      	bge.n	800cbc0 <_printf_i+0xc8>
 800cbb8:	232d      	movs	r3, #45	; 0x2d
 800cbba:	4276      	negs	r6, r6
 800cbbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbc0:	485e      	ldr	r0, [pc, #376]	; (800cd3c <_printf_i+0x244>)
 800cbc2:	230a      	movs	r3, #10
 800cbc4:	e019      	b.n	800cbfa <_printf_i+0x102>
 800cbc6:	680e      	ldr	r6, [r1, #0]
 800cbc8:	602b      	str	r3, [r5, #0]
 800cbca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cbce:	bf18      	it	ne
 800cbd0:	b236      	sxthne	r6, r6
 800cbd2:	e7ef      	b.n	800cbb4 <_printf_i+0xbc>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	6820      	ldr	r0, [r4, #0]
 800cbd8:	1d19      	adds	r1, r3, #4
 800cbda:	6029      	str	r1, [r5, #0]
 800cbdc:	0601      	lsls	r1, r0, #24
 800cbde:	d501      	bpl.n	800cbe4 <_printf_i+0xec>
 800cbe0:	681e      	ldr	r6, [r3, #0]
 800cbe2:	e002      	b.n	800cbea <_printf_i+0xf2>
 800cbe4:	0646      	lsls	r6, r0, #25
 800cbe6:	d5fb      	bpl.n	800cbe0 <_printf_i+0xe8>
 800cbe8:	881e      	ldrh	r6, [r3, #0]
 800cbea:	4854      	ldr	r0, [pc, #336]	; (800cd3c <_printf_i+0x244>)
 800cbec:	2f6f      	cmp	r7, #111	; 0x6f
 800cbee:	bf0c      	ite	eq
 800cbf0:	2308      	moveq	r3, #8
 800cbf2:	230a      	movne	r3, #10
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbfa:	6865      	ldr	r5, [r4, #4]
 800cbfc:	60a5      	str	r5, [r4, #8]
 800cbfe:	2d00      	cmp	r5, #0
 800cc00:	bfa2      	ittt	ge
 800cc02:	6821      	ldrge	r1, [r4, #0]
 800cc04:	f021 0104 	bicge.w	r1, r1, #4
 800cc08:	6021      	strge	r1, [r4, #0]
 800cc0a:	b90e      	cbnz	r6, 800cc10 <_printf_i+0x118>
 800cc0c:	2d00      	cmp	r5, #0
 800cc0e:	d04d      	beq.n	800ccac <_printf_i+0x1b4>
 800cc10:	4615      	mov	r5, r2
 800cc12:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc16:	fb03 6711 	mls	r7, r3, r1, r6
 800cc1a:	5dc7      	ldrb	r7, [r0, r7]
 800cc1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc20:	4637      	mov	r7, r6
 800cc22:	42bb      	cmp	r3, r7
 800cc24:	460e      	mov	r6, r1
 800cc26:	d9f4      	bls.n	800cc12 <_printf_i+0x11a>
 800cc28:	2b08      	cmp	r3, #8
 800cc2a:	d10b      	bne.n	800cc44 <_printf_i+0x14c>
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	07de      	lsls	r6, r3, #31
 800cc30:	d508      	bpl.n	800cc44 <_printf_i+0x14c>
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	6861      	ldr	r1, [r4, #4]
 800cc36:	4299      	cmp	r1, r3
 800cc38:	bfde      	ittt	le
 800cc3a:	2330      	movle	r3, #48	; 0x30
 800cc3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc40:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc44:	1b52      	subs	r2, r2, r5
 800cc46:	6122      	str	r2, [r4, #16]
 800cc48:	f8cd a000 	str.w	sl, [sp]
 800cc4c:	464b      	mov	r3, r9
 800cc4e:	aa03      	add	r2, sp, #12
 800cc50:	4621      	mov	r1, r4
 800cc52:	4640      	mov	r0, r8
 800cc54:	f7ff fee2 	bl	800ca1c <_printf_common>
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d14c      	bne.n	800ccf6 <_printf_i+0x1fe>
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	b004      	add	sp, #16
 800cc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc66:	4835      	ldr	r0, [pc, #212]	; (800cd3c <_printf_i+0x244>)
 800cc68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc6c:	6829      	ldr	r1, [r5, #0]
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc74:	6029      	str	r1, [r5, #0]
 800cc76:	061d      	lsls	r5, r3, #24
 800cc78:	d514      	bpl.n	800cca4 <_printf_i+0x1ac>
 800cc7a:	07df      	lsls	r7, r3, #31
 800cc7c:	bf44      	itt	mi
 800cc7e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc82:	6023      	strmi	r3, [r4, #0]
 800cc84:	b91e      	cbnz	r6, 800cc8e <_printf_i+0x196>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	f023 0320 	bic.w	r3, r3, #32
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	2310      	movs	r3, #16
 800cc90:	e7b0      	b.n	800cbf4 <_printf_i+0xfc>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	f043 0320 	orr.w	r3, r3, #32
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	2378      	movs	r3, #120	; 0x78
 800cc9c:	4828      	ldr	r0, [pc, #160]	; (800cd40 <_printf_i+0x248>)
 800cc9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cca2:	e7e3      	b.n	800cc6c <_printf_i+0x174>
 800cca4:	0659      	lsls	r1, r3, #25
 800cca6:	bf48      	it	mi
 800cca8:	b2b6      	uxthmi	r6, r6
 800ccaa:	e7e6      	b.n	800cc7a <_printf_i+0x182>
 800ccac:	4615      	mov	r5, r2
 800ccae:	e7bb      	b.n	800cc28 <_printf_i+0x130>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	6826      	ldr	r6, [r4, #0]
 800ccb4:	6961      	ldr	r1, [r4, #20]
 800ccb6:	1d18      	adds	r0, r3, #4
 800ccb8:	6028      	str	r0, [r5, #0]
 800ccba:	0635      	lsls	r5, r6, #24
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	d501      	bpl.n	800ccc4 <_printf_i+0x1cc>
 800ccc0:	6019      	str	r1, [r3, #0]
 800ccc2:	e002      	b.n	800ccca <_printf_i+0x1d2>
 800ccc4:	0670      	lsls	r0, r6, #25
 800ccc6:	d5fb      	bpl.n	800ccc0 <_printf_i+0x1c8>
 800ccc8:	8019      	strh	r1, [r3, #0]
 800ccca:	2300      	movs	r3, #0
 800cccc:	6123      	str	r3, [r4, #16]
 800ccce:	4615      	mov	r5, r2
 800ccd0:	e7ba      	b.n	800cc48 <_printf_i+0x150>
 800ccd2:	682b      	ldr	r3, [r5, #0]
 800ccd4:	1d1a      	adds	r2, r3, #4
 800ccd6:	602a      	str	r2, [r5, #0]
 800ccd8:	681d      	ldr	r5, [r3, #0]
 800ccda:	6862      	ldr	r2, [r4, #4]
 800ccdc:	2100      	movs	r1, #0
 800ccde:	4628      	mov	r0, r5
 800cce0:	f7f3 fa56 	bl	8000190 <memchr>
 800cce4:	b108      	cbz	r0, 800ccea <_printf_i+0x1f2>
 800cce6:	1b40      	subs	r0, r0, r5
 800cce8:	6060      	str	r0, [r4, #4]
 800ccea:	6863      	ldr	r3, [r4, #4]
 800ccec:	6123      	str	r3, [r4, #16]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf4:	e7a8      	b.n	800cc48 <_printf_i+0x150>
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	47d0      	blx	sl
 800cd00:	3001      	adds	r0, #1
 800cd02:	d0ab      	beq.n	800cc5c <_printf_i+0x164>
 800cd04:	6823      	ldr	r3, [r4, #0]
 800cd06:	079b      	lsls	r3, r3, #30
 800cd08:	d413      	bmi.n	800cd32 <_printf_i+0x23a>
 800cd0a:	68e0      	ldr	r0, [r4, #12]
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	4298      	cmp	r0, r3
 800cd10:	bfb8      	it	lt
 800cd12:	4618      	movlt	r0, r3
 800cd14:	e7a4      	b.n	800cc60 <_printf_i+0x168>
 800cd16:	2301      	movs	r3, #1
 800cd18:	4632      	mov	r2, r6
 800cd1a:	4649      	mov	r1, r9
 800cd1c:	4640      	mov	r0, r8
 800cd1e:	47d0      	blx	sl
 800cd20:	3001      	adds	r0, #1
 800cd22:	d09b      	beq.n	800cc5c <_printf_i+0x164>
 800cd24:	3501      	adds	r5, #1
 800cd26:	68e3      	ldr	r3, [r4, #12]
 800cd28:	9903      	ldr	r1, [sp, #12]
 800cd2a:	1a5b      	subs	r3, r3, r1
 800cd2c:	42ab      	cmp	r3, r5
 800cd2e:	dcf2      	bgt.n	800cd16 <_printf_i+0x21e>
 800cd30:	e7eb      	b.n	800cd0a <_printf_i+0x212>
 800cd32:	2500      	movs	r5, #0
 800cd34:	f104 0619 	add.w	r6, r4, #25
 800cd38:	e7f5      	b.n	800cd26 <_printf_i+0x22e>
 800cd3a:	bf00      	nop
 800cd3c:	08014052 	.word	0x08014052
 800cd40:	08014063 	.word	0x08014063

0800cd44 <iprintf>:
 800cd44:	b40f      	push	{r0, r1, r2, r3}
 800cd46:	4b0a      	ldr	r3, [pc, #40]	; (800cd70 <iprintf+0x2c>)
 800cd48:	b513      	push	{r0, r1, r4, lr}
 800cd4a:	681c      	ldr	r4, [r3, #0]
 800cd4c:	b124      	cbz	r4, 800cd58 <iprintf+0x14>
 800cd4e:	69a3      	ldr	r3, [r4, #24]
 800cd50:	b913      	cbnz	r3, 800cd58 <iprintf+0x14>
 800cd52:	4620      	mov	r0, r4
 800cd54:	f7ff f9a6 	bl	800c0a4 <__sinit>
 800cd58:	ab05      	add	r3, sp, #20
 800cd5a:	9a04      	ldr	r2, [sp, #16]
 800cd5c:	68a1      	ldr	r1, [r4, #8]
 800cd5e:	9301      	str	r3, [sp, #4]
 800cd60:	4620      	mov	r0, r4
 800cd62:	f001 fe2f 	bl	800e9c4 <_vfiprintf_r>
 800cd66:	b002      	add	sp, #8
 800cd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd6c:	b004      	add	sp, #16
 800cd6e:	4770      	bx	lr
 800cd70:	20000134 	.word	0x20000134

0800cd74 <_puts_r>:
 800cd74:	b570      	push	{r4, r5, r6, lr}
 800cd76:	460e      	mov	r6, r1
 800cd78:	4605      	mov	r5, r0
 800cd7a:	b118      	cbz	r0, 800cd84 <_puts_r+0x10>
 800cd7c:	6983      	ldr	r3, [r0, #24]
 800cd7e:	b90b      	cbnz	r3, 800cd84 <_puts_r+0x10>
 800cd80:	f7ff f990 	bl	800c0a4 <__sinit>
 800cd84:	69ab      	ldr	r3, [r5, #24]
 800cd86:	68ac      	ldr	r4, [r5, #8]
 800cd88:	b913      	cbnz	r3, 800cd90 <_puts_r+0x1c>
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	f7ff f98a 	bl	800c0a4 <__sinit>
 800cd90:	4b2c      	ldr	r3, [pc, #176]	; (800ce44 <_puts_r+0xd0>)
 800cd92:	429c      	cmp	r4, r3
 800cd94:	d120      	bne.n	800cdd8 <_puts_r+0x64>
 800cd96:	686c      	ldr	r4, [r5, #4]
 800cd98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd9a:	07db      	lsls	r3, r3, #31
 800cd9c:	d405      	bmi.n	800cdaa <_puts_r+0x36>
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	0598      	lsls	r0, r3, #22
 800cda2:	d402      	bmi.n	800cdaa <_puts_r+0x36>
 800cda4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cda6:	f7ff fa40 	bl	800c22a <__retarget_lock_acquire_recursive>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	0719      	lsls	r1, r3, #28
 800cdae:	d51d      	bpl.n	800cdec <_puts_r+0x78>
 800cdb0:	6923      	ldr	r3, [r4, #16]
 800cdb2:	b1db      	cbz	r3, 800cdec <_puts_r+0x78>
 800cdb4:	3e01      	subs	r6, #1
 800cdb6:	68a3      	ldr	r3, [r4, #8]
 800cdb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	60a3      	str	r3, [r4, #8]
 800cdc0:	bb39      	cbnz	r1, 800ce12 <_puts_r+0x9e>
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	da38      	bge.n	800ce38 <_puts_r+0xc4>
 800cdc6:	4622      	mov	r2, r4
 800cdc8:	210a      	movs	r1, #10
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f000 f8f4 	bl	800cfb8 <__swbuf_r>
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d011      	beq.n	800cdf8 <_puts_r+0x84>
 800cdd4:	250a      	movs	r5, #10
 800cdd6:	e011      	b.n	800cdfc <_puts_r+0x88>
 800cdd8:	4b1b      	ldr	r3, [pc, #108]	; (800ce48 <_puts_r+0xd4>)
 800cdda:	429c      	cmp	r4, r3
 800cddc:	d101      	bne.n	800cde2 <_puts_r+0x6e>
 800cdde:	68ac      	ldr	r4, [r5, #8]
 800cde0:	e7da      	b.n	800cd98 <_puts_r+0x24>
 800cde2:	4b1a      	ldr	r3, [pc, #104]	; (800ce4c <_puts_r+0xd8>)
 800cde4:	429c      	cmp	r4, r3
 800cde6:	bf08      	it	eq
 800cde8:	68ec      	ldreq	r4, [r5, #12]
 800cdea:	e7d5      	b.n	800cd98 <_puts_r+0x24>
 800cdec:	4621      	mov	r1, r4
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f000 f946 	bl	800d080 <__swsetup_r>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d0dd      	beq.n	800cdb4 <_puts_r+0x40>
 800cdf8:	f04f 35ff 	mov.w	r5, #4294967295
 800cdfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdfe:	07da      	lsls	r2, r3, #31
 800ce00:	d405      	bmi.n	800ce0e <_puts_r+0x9a>
 800ce02:	89a3      	ldrh	r3, [r4, #12]
 800ce04:	059b      	lsls	r3, r3, #22
 800ce06:	d402      	bmi.n	800ce0e <_puts_r+0x9a>
 800ce08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce0a:	f7ff fa0f 	bl	800c22c <__retarget_lock_release_recursive>
 800ce0e:	4628      	mov	r0, r5
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	da04      	bge.n	800ce20 <_puts_r+0xac>
 800ce16:	69a2      	ldr	r2, [r4, #24]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	dc06      	bgt.n	800ce2a <_puts_r+0xb6>
 800ce1c:	290a      	cmp	r1, #10
 800ce1e:	d004      	beq.n	800ce2a <_puts_r+0xb6>
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	1c5a      	adds	r2, r3, #1
 800ce24:	6022      	str	r2, [r4, #0]
 800ce26:	7019      	strb	r1, [r3, #0]
 800ce28:	e7c5      	b.n	800cdb6 <_puts_r+0x42>
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f000 f8c3 	bl	800cfb8 <__swbuf_r>
 800ce32:	3001      	adds	r0, #1
 800ce34:	d1bf      	bne.n	800cdb6 <_puts_r+0x42>
 800ce36:	e7df      	b.n	800cdf8 <_puts_r+0x84>
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	250a      	movs	r5, #10
 800ce3c:	1c5a      	adds	r2, r3, #1
 800ce3e:	6022      	str	r2, [r4, #0]
 800ce40:	701d      	strb	r5, [r3, #0]
 800ce42:	e7db      	b.n	800cdfc <_puts_r+0x88>
 800ce44:	08013ffc 	.word	0x08013ffc
 800ce48:	0801401c 	.word	0x0801401c
 800ce4c:	08013fdc 	.word	0x08013fdc

0800ce50 <puts>:
 800ce50:	4b02      	ldr	r3, [pc, #8]	; (800ce5c <puts+0xc>)
 800ce52:	4601      	mov	r1, r0
 800ce54:	6818      	ldr	r0, [r3, #0]
 800ce56:	f7ff bf8d 	b.w	800cd74 <_puts_r>
 800ce5a:	bf00      	nop
 800ce5c:	20000134 	.word	0x20000134

0800ce60 <_sbrk_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4d06      	ldr	r5, [pc, #24]	; (800ce7c <_sbrk_r+0x1c>)
 800ce64:	2300      	movs	r3, #0
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	602b      	str	r3, [r5, #0]
 800ce6c:	f7f4 fe6e 	bl	8001b4c <_sbrk>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d102      	bne.n	800ce7a <_sbrk_r+0x1a>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b103      	cbz	r3, 800ce7a <_sbrk_r+0x1a>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	200007ac 	.word	0x200007ac

0800ce80 <siprintf>:
 800ce80:	b40e      	push	{r1, r2, r3}
 800ce82:	b500      	push	{lr}
 800ce84:	b09c      	sub	sp, #112	; 0x70
 800ce86:	ab1d      	add	r3, sp, #116	; 0x74
 800ce88:	9002      	str	r0, [sp, #8]
 800ce8a:	9006      	str	r0, [sp, #24]
 800ce8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce90:	4809      	ldr	r0, [pc, #36]	; (800ceb8 <siprintf+0x38>)
 800ce92:	9107      	str	r1, [sp, #28]
 800ce94:	9104      	str	r1, [sp, #16]
 800ce96:	4909      	ldr	r1, [pc, #36]	; (800cebc <siprintf+0x3c>)
 800ce98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce9c:	9105      	str	r1, [sp, #20]
 800ce9e:	6800      	ldr	r0, [r0, #0]
 800cea0:	9301      	str	r3, [sp, #4]
 800cea2:	a902      	add	r1, sp, #8
 800cea4:	f001 fc64 	bl	800e770 <_svfiprintf_r>
 800cea8:	9b02      	ldr	r3, [sp, #8]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	b01c      	add	sp, #112	; 0x70
 800ceb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ceb4:	b003      	add	sp, #12
 800ceb6:	4770      	bx	lr
 800ceb8:	20000134 	.word	0x20000134
 800cebc:	ffff0208 	.word	0xffff0208

0800cec0 <__sread>:
 800cec0:	b510      	push	{r4, lr}
 800cec2:	460c      	mov	r4, r1
 800cec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec8:	f001 feac 	bl	800ec24 <_read_r>
 800cecc:	2800      	cmp	r0, #0
 800cece:	bfab      	itete	ge
 800ced0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ced2:	89a3      	ldrhlt	r3, [r4, #12]
 800ced4:	181b      	addge	r3, r3, r0
 800ced6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceda:	bfac      	ite	ge
 800cedc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cede:	81a3      	strhlt	r3, [r4, #12]
 800cee0:	bd10      	pop	{r4, pc}

0800cee2 <__swrite>:
 800cee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee6:	461f      	mov	r7, r3
 800cee8:	898b      	ldrh	r3, [r1, #12]
 800ceea:	05db      	lsls	r3, r3, #23
 800ceec:	4605      	mov	r5, r0
 800ceee:	460c      	mov	r4, r1
 800cef0:	4616      	mov	r6, r2
 800cef2:	d505      	bpl.n	800cf00 <__swrite+0x1e>
 800cef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef8:	2302      	movs	r3, #2
 800cefa:	2200      	movs	r2, #0
 800cefc:	f000 ffbe 	bl	800de7c <_lseek_r>
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	4632      	mov	r2, r6
 800cf0e:	463b      	mov	r3, r7
 800cf10:	4628      	mov	r0, r5
 800cf12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf16:	f000 b8a1 	b.w	800d05c <_write_r>

0800cf1a <__sseek>:
 800cf1a:	b510      	push	{r4, lr}
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf22:	f000 ffab 	bl	800de7c <_lseek_r>
 800cf26:	1c43      	adds	r3, r0, #1
 800cf28:	89a3      	ldrh	r3, [r4, #12]
 800cf2a:	bf15      	itete	ne
 800cf2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf36:	81a3      	strheq	r3, [r4, #12]
 800cf38:	bf18      	it	ne
 800cf3a:	81a3      	strhne	r3, [r4, #12]
 800cf3c:	bd10      	pop	{r4, pc}

0800cf3e <__sclose>:
 800cf3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf42:	f000 b90b 	b.w	800d15c <_close_r>

0800cf46 <_vsniprintf_r>:
 800cf46:	b530      	push	{r4, r5, lr}
 800cf48:	4614      	mov	r4, r2
 800cf4a:	2c00      	cmp	r4, #0
 800cf4c:	b09b      	sub	sp, #108	; 0x6c
 800cf4e:	4605      	mov	r5, r0
 800cf50:	461a      	mov	r2, r3
 800cf52:	da05      	bge.n	800cf60 <_vsniprintf_r+0x1a>
 800cf54:	238b      	movs	r3, #139	; 0x8b
 800cf56:	6003      	str	r3, [r0, #0]
 800cf58:	f04f 30ff 	mov.w	r0, #4294967295
 800cf5c:	b01b      	add	sp, #108	; 0x6c
 800cf5e:	bd30      	pop	{r4, r5, pc}
 800cf60:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf64:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cf68:	bf14      	ite	ne
 800cf6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cf6e:	4623      	moveq	r3, r4
 800cf70:	9302      	str	r3, [sp, #8]
 800cf72:	9305      	str	r3, [sp, #20]
 800cf74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf78:	9100      	str	r1, [sp, #0]
 800cf7a:	9104      	str	r1, [sp, #16]
 800cf7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cf80:	4669      	mov	r1, sp
 800cf82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf84:	f001 fbf4 	bl	800e770 <_svfiprintf_r>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	bfbc      	itt	lt
 800cf8c:	238b      	movlt	r3, #139	; 0x8b
 800cf8e:	602b      	strlt	r3, [r5, #0]
 800cf90:	2c00      	cmp	r4, #0
 800cf92:	d0e3      	beq.n	800cf5c <_vsniprintf_r+0x16>
 800cf94:	9b00      	ldr	r3, [sp, #0]
 800cf96:	2200      	movs	r2, #0
 800cf98:	701a      	strb	r2, [r3, #0]
 800cf9a:	e7df      	b.n	800cf5c <_vsniprintf_r+0x16>

0800cf9c <vsniprintf>:
 800cf9c:	b507      	push	{r0, r1, r2, lr}
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	460a      	mov	r2, r1
 800cfa4:	4601      	mov	r1, r0
 800cfa6:	4803      	ldr	r0, [pc, #12]	; (800cfb4 <vsniprintf+0x18>)
 800cfa8:	6800      	ldr	r0, [r0, #0]
 800cfaa:	f7ff ffcc 	bl	800cf46 <_vsniprintf_r>
 800cfae:	b003      	add	sp, #12
 800cfb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfb4:	20000134 	.word	0x20000134

0800cfb8 <__swbuf_r>:
 800cfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfba:	460e      	mov	r6, r1
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	b118      	cbz	r0, 800cfca <__swbuf_r+0x12>
 800cfc2:	6983      	ldr	r3, [r0, #24]
 800cfc4:	b90b      	cbnz	r3, 800cfca <__swbuf_r+0x12>
 800cfc6:	f7ff f86d 	bl	800c0a4 <__sinit>
 800cfca:	4b21      	ldr	r3, [pc, #132]	; (800d050 <__swbuf_r+0x98>)
 800cfcc:	429c      	cmp	r4, r3
 800cfce:	d12b      	bne.n	800d028 <__swbuf_r+0x70>
 800cfd0:	686c      	ldr	r4, [r5, #4]
 800cfd2:	69a3      	ldr	r3, [r4, #24]
 800cfd4:	60a3      	str	r3, [r4, #8]
 800cfd6:	89a3      	ldrh	r3, [r4, #12]
 800cfd8:	071a      	lsls	r2, r3, #28
 800cfda:	d52f      	bpl.n	800d03c <__swbuf_r+0x84>
 800cfdc:	6923      	ldr	r3, [r4, #16]
 800cfde:	b36b      	cbz	r3, 800d03c <__swbuf_r+0x84>
 800cfe0:	6923      	ldr	r3, [r4, #16]
 800cfe2:	6820      	ldr	r0, [r4, #0]
 800cfe4:	1ac0      	subs	r0, r0, r3
 800cfe6:	6963      	ldr	r3, [r4, #20]
 800cfe8:	b2f6      	uxtb	r6, r6
 800cfea:	4283      	cmp	r3, r0
 800cfec:	4637      	mov	r7, r6
 800cfee:	dc04      	bgt.n	800cffa <__swbuf_r+0x42>
 800cff0:	4621      	mov	r1, r4
 800cff2:	4628      	mov	r0, r5
 800cff4:	f7fe ffb0 	bl	800bf58 <_fflush_r>
 800cff8:	bb30      	cbnz	r0, 800d048 <__swbuf_r+0x90>
 800cffa:	68a3      	ldr	r3, [r4, #8]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	60a3      	str	r3, [r4, #8]
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	6022      	str	r2, [r4, #0]
 800d006:	701e      	strb	r6, [r3, #0]
 800d008:	6963      	ldr	r3, [r4, #20]
 800d00a:	3001      	adds	r0, #1
 800d00c:	4283      	cmp	r3, r0
 800d00e:	d004      	beq.n	800d01a <__swbuf_r+0x62>
 800d010:	89a3      	ldrh	r3, [r4, #12]
 800d012:	07db      	lsls	r3, r3, #31
 800d014:	d506      	bpl.n	800d024 <__swbuf_r+0x6c>
 800d016:	2e0a      	cmp	r6, #10
 800d018:	d104      	bne.n	800d024 <__swbuf_r+0x6c>
 800d01a:	4621      	mov	r1, r4
 800d01c:	4628      	mov	r0, r5
 800d01e:	f7fe ff9b 	bl	800bf58 <_fflush_r>
 800d022:	b988      	cbnz	r0, 800d048 <__swbuf_r+0x90>
 800d024:	4638      	mov	r0, r7
 800d026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d028:	4b0a      	ldr	r3, [pc, #40]	; (800d054 <__swbuf_r+0x9c>)
 800d02a:	429c      	cmp	r4, r3
 800d02c:	d101      	bne.n	800d032 <__swbuf_r+0x7a>
 800d02e:	68ac      	ldr	r4, [r5, #8]
 800d030:	e7cf      	b.n	800cfd2 <__swbuf_r+0x1a>
 800d032:	4b09      	ldr	r3, [pc, #36]	; (800d058 <__swbuf_r+0xa0>)
 800d034:	429c      	cmp	r4, r3
 800d036:	bf08      	it	eq
 800d038:	68ec      	ldreq	r4, [r5, #12]
 800d03a:	e7ca      	b.n	800cfd2 <__swbuf_r+0x1a>
 800d03c:	4621      	mov	r1, r4
 800d03e:	4628      	mov	r0, r5
 800d040:	f000 f81e 	bl	800d080 <__swsetup_r>
 800d044:	2800      	cmp	r0, #0
 800d046:	d0cb      	beq.n	800cfe0 <__swbuf_r+0x28>
 800d048:	f04f 37ff 	mov.w	r7, #4294967295
 800d04c:	e7ea      	b.n	800d024 <__swbuf_r+0x6c>
 800d04e:	bf00      	nop
 800d050:	08013ffc 	.word	0x08013ffc
 800d054:	0801401c 	.word	0x0801401c
 800d058:	08013fdc 	.word	0x08013fdc

0800d05c <_write_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4d07      	ldr	r5, [pc, #28]	; (800d07c <_write_r+0x20>)
 800d060:	4604      	mov	r4, r0
 800d062:	4608      	mov	r0, r1
 800d064:	4611      	mov	r1, r2
 800d066:	2200      	movs	r2, #0
 800d068:	602a      	str	r2, [r5, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	f7f4 fd1d 	bl	8001aaa <_write>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	d102      	bne.n	800d07a <_write_r+0x1e>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	b103      	cbz	r3, 800d07a <_write_r+0x1e>
 800d078:	6023      	str	r3, [r4, #0]
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	200007ac 	.word	0x200007ac

0800d080 <__swsetup_r>:
 800d080:	4b32      	ldr	r3, [pc, #200]	; (800d14c <__swsetup_r+0xcc>)
 800d082:	b570      	push	{r4, r5, r6, lr}
 800d084:	681d      	ldr	r5, [r3, #0]
 800d086:	4606      	mov	r6, r0
 800d088:	460c      	mov	r4, r1
 800d08a:	b125      	cbz	r5, 800d096 <__swsetup_r+0x16>
 800d08c:	69ab      	ldr	r3, [r5, #24]
 800d08e:	b913      	cbnz	r3, 800d096 <__swsetup_r+0x16>
 800d090:	4628      	mov	r0, r5
 800d092:	f7ff f807 	bl	800c0a4 <__sinit>
 800d096:	4b2e      	ldr	r3, [pc, #184]	; (800d150 <__swsetup_r+0xd0>)
 800d098:	429c      	cmp	r4, r3
 800d09a:	d10f      	bne.n	800d0bc <__swsetup_r+0x3c>
 800d09c:	686c      	ldr	r4, [r5, #4]
 800d09e:	89a3      	ldrh	r3, [r4, #12]
 800d0a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0a4:	0719      	lsls	r1, r3, #28
 800d0a6:	d42c      	bmi.n	800d102 <__swsetup_r+0x82>
 800d0a8:	06dd      	lsls	r5, r3, #27
 800d0aa:	d411      	bmi.n	800d0d0 <__swsetup_r+0x50>
 800d0ac:	2309      	movs	r3, #9
 800d0ae:	6033      	str	r3, [r6, #0]
 800d0b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0b4:	81a3      	strh	r3, [r4, #12]
 800d0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ba:	e03e      	b.n	800d13a <__swsetup_r+0xba>
 800d0bc:	4b25      	ldr	r3, [pc, #148]	; (800d154 <__swsetup_r+0xd4>)
 800d0be:	429c      	cmp	r4, r3
 800d0c0:	d101      	bne.n	800d0c6 <__swsetup_r+0x46>
 800d0c2:	68ac      	ldr	r4, [r5, #8]
 800d0c4:	e7eb      	b.n	800d09e <__swsetup_r+0x1e>
 800d0c6:	4b24      	ldr	r3, [pc, #144]	; (800d158 <__swsetup_r+0xd8>)
 800d0c8:	429c      	cmp	r4, r3
 800d0ca:	bf08      	it	eq
 800d0cc:	68ec      	ldreq	r4, [r5, #12]
 800d0ce:	e7e6      	b.n	800d09e <__swsetup_r+0x1e>
 800d0d0:	0758      	lsls	r0, r3, #29
 800d0d2:	d512      	bpl.n	800d0fa <__swsetup_r+0x7a>
 800d0d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0d6:	b141      	cbz	r1, 800d0ea <__swsetup_r+0x6a>
 800d0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0dc:	4299      	cmp	r1, r3
 800d0de:	d002      	beq.n	800d0e6 <__swsetup_r+0x66>
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7ff f8e5 	bl	800c2b0 <_free_r>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	6363      	str	r3, [r4, #52]	; 0x34
 800d0ea:	89a3      	ldrh	r3, [r4, #12]
 800d0ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0f0:	81a3      	strh	r3, [r4, #12]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	6063      	str	r3, [r4, #4]
 800d0f6:	6923      	ldr	r3, [r4, #16]
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	89a3      	ldrh	r3, [r4, #12]
 800d0fc:	f043 0308 	orr.w	r3, r3, #8
 800d100:	81a3      	strh	r3, [r4, #12]
 800d102:	6923      	ldr	r3, [r4, #16]
 800d104:	b94b      	cbnz	r3, 800d11a <__swsetup_r+0x9a>
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d110:	d003      	beq.n	800d11a <__swsetup_r+0x9a>
 800d112:	4621      	mov	r1, r4
 800d114:	4630      	mov	r0, r6
 800d116:	f000 fee9 	bl	800deec <__smakebuf_r>
 800d11a:	89a0      	ldrh	r0, [r4, #12]
 800d11c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d120:	f010 0301 	ands.w	r3, r0, #1
 800d124:	d00a      	beq.n	800d13c <__swsetup_r+0xbc>
 800d126:	2300      	movs	r3, #0
 800d128:	60a3      	str	r3, [r4, #8]
 800d12a:	6963      	ldr	r3, [r4, #20]
 800d12c:	425b      	negs	r3, r3
 800d12e:	61a3      	str	r3, [r4, #24]
 800d130:	6923      	ldr	r3, [r4, #16]
 800d132:	b943      	cbnz	r3, 800d146 <__swsetup_r+0xc6>
 800d134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d138:	d1ba      	bne.n	800d0b0 <__swsetup_r+0x30>
 800d13a:	bd70      	pop	{r4, r5, r6, pc}
 800d13c:	0781      	lsls	r1, r0, #30
 800d13e:	bf58      	it	pl
 800d140:	6963      	ldrpl	r3, [r4, #20]
 800d142:	60a3      	str	r3, [r4, #8]
 800d144:	e7f4      	b.n	800d130 <__swsetup_r+0xb0>
 800d146:	2000      	movs	r0, #0
 800d148:	e7f7      	b.n	800d13a <__swsetup_r+0xba>
 800d14a:	bf00      	nop
 800d14c:	20000134 	.word	0x20000134
 800d150:	08013ffc 	.word	0x08013ffc
 800d154:	0801401c 	.word	0x0801401c
 800d158:	08013fdc 	.word	0x08013fdc

0800d15c <_close_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d06      	ldr	r5, [pc, #24]	; (800d178 <_close_r+0x1c>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	602b      	str	r3, [r5, #0]
 800d168:	f7f4 fcbb 	bl	8001ae2 <_close>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_close_r+0x1a>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_close_r+0x1a>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	200007ac 	.word	0x200007ac

0800d17c <quorem>:
 800d17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d180:	6903      	ldr	r3, [r0, #16]
 800d182:	690c      	ldr	r4, [r1, #16]
 800d184:	42a3      	cmp	r3, r4
 800d186:	4607      	mov	r7, r0
 800d188:	f2c0 8081 	blt.w	800d28e <quorem+0x112>
 800d18c:	3c01      	subs	r4, #1
 800d18e:	f101 0814 	add.w	r8, r1, #20
 800d192:	f100 0514 	add.w	r5, r0, #20
 800d196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d19a:	9301      	str	r3, [sp, #4]
 800d19c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1b4:	d331      	bcc.n	800d21a <quorem+0x9e>
 800d1b6:	f04f 0e00 	mov.w	lr, #0
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	46ac      	mov	ip, r5
 800d1be:	46f2      	mov	sl, lr
 800d1c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1c4:	b293      	uxth	r3, r2
 800d1c6:	fb06 e303 	mla	r3, r6, r3, lr
 800d1ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	ebaa 0303 	sub.w	r3, sl, r3
 800d1d4:	f8dc a000 	ldr.w	sl, [ip]
 800d1d8:	0c12      	lsrs	r2, r2, #16
 800d1da:	fa13 f38a 	uxtah	r3, r3, sl
 800d1de:	fb06 e202 	mla	r2, r6, r2, lr
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	9b00      	ldr	r3, [sp, #0]
 800d1e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1ea:	b292      	uxth	r2, r2
 800d1ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d1f8:	4581      	cmp	r9, r0
 800d1fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1fe:	f84c 3b04 	str.w	r3, [ip], #4
 800d202:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d206:	d2db      	bcs.n	800d1c0 <quorem+0x44>
 800d208:	f855 300b 	ldr.w	r3, [r5, fp]
 800d20c:	b92b      	cbnz	r3, 800d21a <quorem+0x9e>
 800d20e:	9b01      	ldr	r3, [sp, #4]
 800d210:	3b04      	subs	r3, #4
 800d212:	429d      	cmp	r5, r3
 800d214:	461a      	mov	r2, r3
 800d216:	d32e      	bcc.n	800d276 <quorem+0xfa>
 800d218:	613c      	str	r4, [r7, #16]
 800d21a:	4638      	mov	r0, r7
 800d21c:	f001 f934 	bl	800e488 <__mcmp>
 800d220:	2800      	cmp	r0, #0
 800d222:	db24      	blt.n	800d26e <quorem+0xf2>
 800d224:	3601      	adds	r6, #1
 800d226:	4628      	mov	r0, r5
 800d228:	f04f 0c00 	mov.w	ip, #0
 800d22c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d230:	f8d0 e000 	ldr.w	lr, [r0]
 800d234:	b293      	uxth	r3, r2
 800d236:	ebac 0303 	sub.w	r3, ip, r3
 800d23a:	0c12      	lsrs	r2, r2, #16
 800d23c:	fa13 f38e 	uxtah	r3, r3, lr
 800d240:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d248:	b29b      	uxth	r3, r3
 800d24a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d24e:	45c1      	cmp	r9, r8
 800d250:	f840 3b04 	str.w	r3, [r0], #4
 800d254:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d258:	d2e8      	bcs.n	800d22c <quorem+0xb0>
 800d25a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d25e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d262:	b922      	cbnz	r2, 800d26e <quorem+0xf2>
 800d264:	3b04      	subs	r3, #4
 800d266:	429d      	cmp	r5, r3
 800d268:	461a      	mov	r2, r3
 800d26a:	d30a      	bcc.n	800d282 <quorem+0x106>
 800d26c:	613c      	str	r4, [r7, #16]
 800d26e:	4630      	mov	r0, r6
 800d270:	b003      	add	sp, #12
 800d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d276:	6812      	ldr	r2, [r2, #0]
 800d278:	3b04      	subs	r3, #4
 800d27a:	2a00      	cmp	r2, #0
 800d27c:	d1cc      	bne.n	800d218 <quorem+0x9c>
 800d27e:	3c01      	subs	r4, #1
 800d280:	e7c7      	b.n	800d212 <quorem+0x96>
 800d282:	6812      	ldr	r2, [r2, #0]
 800d284:	3b04      	subs	r3, #4
 800d286:	2a00      	cmp	r2, #0
 800d288:	d1f0      	bne.n	800d26c <quorem+0xf0>
 800d28a:	3c01      	subs	r4, #1
 800d28c:	e7eb      	b.n	800d266 <quorem+0xea>
 800d28e:	2000      	movs	r0, #0
 800d290:	e7ee      	b.n	800d270 <quorem+0xf4>
 800d292:	0000      	movs	r0, r0
 800d294:	0000      	movs	r0, r0
	...

0800d298 <_dtoa_r>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	ed2d 8b04 	vpush	{d8-d9}
 800d2a0:	ec57 6b10 	vmov	r6, r7, d0
 800d2a4:	b093      	sub	sp, #76	; 0x4c
 800d2a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d2a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d2ac:	9106      	str	r1, [sp, #24]
 800d2ae:	ee10 aa10 	vmov	sl, s0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2b6:	930c      	str	r3, [sp, #48]	; 0x30
 800d2b8:	46bb      	mov	fp, r7
 800d2ba:	b975      	cbnz	r5, 800d2da <_dtoa_r+0x42>
 800d2bc:	2010      	movs	r0, #16
 800d2be:	f7fe ffb7 	bl	800c230 <malloc>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	6260      	str	r0, [r4, #36]	; 0x24
 800d2c6:	b920      	cbnz	r0, 800d2d2 <_dtoa_r+0x3a>
 800d2c8:	4ba7      	ldr	r3, [pc, #668]	; (800d568 <_dtoa_r+0x2d0>)
 800d2ca:	21ea      	movs	r1, #234	; 0xea
 800d2cc:	48a7      	ldr	r0, [pc, #668]	; (800d56c <_dtoa_r+0x2d4>)
 800d2ce:	f001 fcbb 	bl	800ec48 <__assert_func>
 800d2d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2d6:	6005      	str	r5, [r0, #0]
 800d2d8:	60c5      	str	r5, [r0, #12]
 800d2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2dc:	6819      	ldr	r1, [r3, #0]
 800d2de:	b151      	cbz	r1, 800d2f6 <_dtoa_r+0x5e>
 800d2e0:	685a      	ldr	r2, [r3, #4]
 800d2e2:	604a      	str	r2, [r1, #4]
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	4093      	lsls	r3, r2
 800d2e8:	608b      	str	r3, [r1, #8]
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f000 fe8a 	bl	800e004 <_Bfree>
 800d2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	1e3b      	subs	r3, r7, #0
 800d2f8:	bfaa      	itet	ge
 800d2fa:	2300      	movge	r3, #0
 800d2fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d300:	f8c8 3000 	strge.w	r3, [r8]
 800d304:	4b9a      	ldr	r3, [pc, #616]	; (800d570 <_dtoa_r+0x2d8>)
 800d306:	bfbc      	itt	lt
 800d308:	2201      	movlt	r2, #1
 800d30a:	f8c8 2000 	strlt.w	r2, [r8]
 800d30e:	ea33 030b 	bics.w	r3, r3, fp
 800d312:	d11b      	bne.n	800d34c <_dtoa_r+0xb4>
 800d314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d316:	f242 730f 	movw	r3, #9999	; 0x270f
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d320:	4333      	orrs	r3, r6
 800d322:	f000 8592 	beq.w	800de4a <_dtoa_r+0xbb2>
 800d326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d328:	b963      	cbnz	r3, 800d344 <_dtoa_r+0xac>
 800d32a:	4b92      	ldr	r3, [pc, #584]	; (800d574 <_dtoa_r+0x2dc>)
 800d32c:	e022      	b.n	800d374 <_dtoa_r+0xdc>
 800d32e:	4b92      	ldr	r3, [pc, #584]	; (800d578 <_dtoa_r+0x2e0>)
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	3308      	adds	r3, #8
 800d334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d336:	6013      	str	r3, [r2, #0]
 800d338:	9801      	ldr	r0, [sp, #4]
 800d33a:	b013      	add	sp, #76	; 0x4c
 800d33c:	ecbd 8b04 	vpop	{d8-d9}
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d344:	4b8b      	ldr	r3, [pc, #556]	; (800d574 <_dtoa_r+0x2dc>)
 800d346:	9301      	str	r3, [sp, #4]
 800d348:	3303      	adds	r3, #3
 800d34a:	e7f3      	b.n	800d334 <_dtoa_r+0x9c>
 800d34c:	2200      	movs	r2, #0
 800d34e:	2300      	movs	r3, #0
 800d350:	4650      	mov	r0, sl
 800d352:	4659      	mov	r1, fp
 800d354:	f7f3 fb90 	bl	8000a78 <__aeabi_dcmpeq>
 800d358:	ec4b ab19 	vmov	d9, sl, fp
 800d35c:	4680      	mov	r8, r0
 800d35e:	b158      	cbz	r0, 800d378 <_dtoa_r+0xe0>
 800d360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d362:	2301      	movs	r3, #1
 800d364:	6013      	str	r3, [r2, #0]
 800d366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 856b 	beq.w	800de44 <_dtoa_r+0xbac>
 800d36e:	4883      	ldr	r0, [pc, #524]	; (800d57c <_dtoa_r+0x2e4>)
 800d370:	6018      	str	r0, [r3, #0]
 800d372:	1e43      	subs	r3, r0, #1
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	e7df      	b.n	800d338 <_dtoa_r+0xa0>
 800d378:	ec4b ab10 	vmov	d0, sl, fp
 800d37c:	aa10      	add	r2, sp, #64	; 0x40
 800d37e:	a911      	add	r1, sp, #68	; 0x44
 800d380:	4620      	mov	r0, r4
 800d382:	f001 f927 	bl	800e5d4 <__d2b>
 800d386:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d38a:	ee08 0a10 	vmov	s16, r0
 800d38e:	2d00      	cmp	r5, #0
 800d390:	f000 8084 	beq.w	800d49c <_dtoa_r+0x204>
 800d394:	ee19 3a90 	vmov	r3, s19
 800d398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d39c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d3a0:	4656      	mov	r6, sl
 800d3a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d3a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d3aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d3ae:	4b74      	ldr	r3, [pc, #464]	; (800d580 <_dtoa_r+0x2e8>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	f7f2 ff3f 	bl	8000238 <__aeabi_dsub>
 800d3ba:	a365      	add	r3, pc, #404	; (adr r3, 800d550 <_dtoa_r+0x2b8>)
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f7f3 f8f2 	bl	80005a8 <__aeabi_dmul>
 800d3c4:	a364      	add	r3, pc, #400	; (adr r3, 800d558 <_dtoa_r+0x2c0>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 ff37 	bl	800023c <__adddf3>
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	460f      	mov	r7, r1
 800d3d4:	f7f3 f87e 	bl	80004d4 <__aeabi_i2d>
 800d3d8:	a361      	add	r3, pc, #388	; (adr r3, 800d560 <_dtoa_r+0x2c8>)
 800d3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3de:	f7f3 f8e3 	bl	80005a8 <__aeabi_dmul>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	4639      	mov	r1, r7
 800d3ea:	f7f2 ff27 	bl	800023c <__adddf3>
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	460f      	mov	r7, r1
 800d3f2:	f7f3 fb89 	bl	8000b08 <__aeabi_d2iz>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	9000      	str	r0, [sp, #0]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	4639      	mov	r1, r7
 800d400:	f7f3 fb44 	bl	8000a8c <__aeabi_dcmplt>
 800d404:	b150      	cbz	r0, 800d41c <_dtoa_r+0x184>
 800d406:	9800      	ldr	r0, [sp, #0]
 800d408:	f7f3 f864 	bl	80004d4 <__aeabi_i2d>
 800d40c:	4632      	mov	r2, r6
 800d40e:	463b      	mov	r3, r7
 800d410:	f7f3 fb32 	bl	8000a78 <__aeabi_dcmpeq>
 800d414:	b910      	cbnz	r0, 800d41c <_dtoa_r+0x184>
 800d416:	9b00      	ldr	r3, [sp, #0]
 800d418:	3b01      	subs	r3, #1
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	9b00      	ldr	r3, [sp, #0]
 800d41e:	2b16      	cmp	r3, #22
 800d420:	d85a      	bhi.n	800d4d8 <_dtoa_r+0x240>
 800d422:	9a00      	ldr	r2, [sp, #0]
 800d424:	4b57      	ldr	r3, [pc, #348]	; (800d584 <_dtoa_r+0x2ec>)
 800d426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	ec51 0b19 	vmov	r0, r1, d9
 800d432:	f7f3 fb2b 	bl	8000a8c <__aeabi_dcmplt>
 800d436:	2800      	cmp	r0, #0
 800d438:	d050      	beq.n	800d4dc <_dtoa_r+0x244>
 800d43a:	9b00      	ldr	r3, [sp, #0]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	2300      	movs	r3, #0
 800d442:	930b      	str	r3, [sp, #44]	; 0x2c
 800d444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d446:	1b5d      	subs	r5, r3, r5
 800d448:	1e6b      	subs	r3, r5, #1
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	bf45      	ittet	mi
 800d44e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d452:	9304      	strmi	r3, [sp, #16]
 800d454:	2300      	movpl	r3, #0
 800d456:	2300      	movmi	r3, #0
 800d458:	bf4c      	ite	mi
 800d45a:	9305      	strmi	r3, [sp, #20]
 800d45c:	9304      	strpl	r3, [sp, #16]
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	db3d      	blt.n	800d4e0 <_dtoa_r+0x248>
 800d464:	9b05      	ldr	r3, [sp, #20]
 800d466:	9a00      	ldr	r2, [sp, #0]
 800d468:	920a      	str	r2, [sp, #40]	; 0x28
 800d46a:	4413      	add	r3, r2
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	2300      	movs	r3, #0
 800d470:	9307      	str	r3, [sp, #28]
 800d472:	9b06      	ldr	r3, [sp, #24]
 800d474:	2b09      	cmp	r3, #9
 800d476:	f200 8089 	bhi.w	800d58c <_dtoa_r+0x2f4>
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	bfc4      	itt	gt
 800d47e:	3b04      	subgt	r3, #4
 800d480:	9306      	strgt	r3, [sp, #24]
 800d482:	9b06      	ldr	r3, [sp, #24]
 800d484:	f1a3 0302 	sub.w	r3, r3, #2
 800d488:	bfcc      	ite	gt
 800d48a:	2500      	movgt	r5, #0
 800d48c:	2501      	movle	r5, #1
 800d48e:	2b03      	cmp	r3, #3
 800d490:	f200 8087 	bhi.w	800d5a2 <_dtoa_r+0x30a>
 800d494:	e8df f003 	tbb	[pc, r3]
 800d498:	59383a2d 	.word	0x59383a2d
 800d49c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d4a0:	441d      	add	r5, r3
 800d4a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	bfc1      	itttt	gt
 800d4aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d4ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d4b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d4b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d4ba:	bfda      	itte	le
 800d4bc:	f1c3 0320 	rsble	r3, r3, #32
 800d4c0:	fa06 f003 	lslle.w	r0, r6, r3
 800d4c4:	4318      	orrgt	r0, r3
 800d4c6:	f7f2 fff5 	bl	80004b4 <__aeabi_ui2d>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	4606      	mov	r6, r0
 800d4ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d4d2:	3d01      	subs	r5, #1
 800d4d4:	930e      	str	r3, [sp, #56]	; 0x38
 800d4d6:	e76a      	b.n	800d3ae <_dtoa_r+0x116>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e7b2      	b.n	800d442 <_dtoa_r+0x1aa>
 800d4dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4de:	e7b1      	b.n	800d444 <_dtoa_r+0x1ac>
 800d4e0:	9b04      	ldr	r3, [sp, #16]
 800d4e2:	9a00      	ldr	r2, [sp, #0]
 800d4e4:	1a9b      	subs	r3, r3, r2
 800d4e6:	9304      	str	r3, [sp, #16]
 800d4e8:	4253      	negs	r3, r2
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d4f0:	e7bf      	b.n	800d472 <_dtoa_r+0x1da>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	9308      	str	r3, [sp, #32]
 800d4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dc55      	bgt.n	800d5a8 <_dtoa_r+0x310>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d502:	461a      	mov	r2, r3
 800d504:	9209      	str	r2, [sp, #36]	; 0x24
 800d506:	e00c      	b.n	800d522 <_dtoa_r+0x28a>
 800d508:	2301      	movs	r3, #1
 800d50a:	e7f3      	b.n	800d4f4 <_dtoa_r+0x25c>
 800d50c:	2300      	movs	r3, #0
 800d50e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d510:	9308      	str	r3, [sp, #32]
 800d512:	9b00      	ldr	r3, [sp, #0]
 800d514:	4413      	add	r3, r2
 800d516:	9302      	str	r3, [sp, #8]
 800d518:	3301      	adds	r3, #1
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	9303      	str	r3, [sp, #12]
 800d51e:	bfb8      	it	lt
 800d520:	2301      	movlt	r3, #1
 800d522:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d524:	2200      	movs	r2, #0
 800d526:	6042      	str	r2, [r0, #4]
 800d528:	2204      	movs	r2, #4
 800d52a:	f102 0614 	add.w	r6, r2, #20
 800d52e:	429e      	cmp	r6, r3
 800d530:	6841      	ldr	r1, [r0, #4]
 800d532:	d93d      	bls.n	800d5b0 <_dtoa_r+0x318>
 800d534:	4620      	mov	r0, r4
 800d536:	f000 fd25 	bl	800df84 <_Balloc>
 800d53a:	9001      	str	r0, [sp, #4]
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d13b      	bne.n	800d5b8 <_dtoa_r+0x320>
 800d540:	4b11      	ldr	r3, [pc, #68]	; (800d588 <_dtoa_r+0x2f0>)
 800d542:	4602      	mov	r2, r0
 800d544:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d548:	e6c0      	b.n	800d2cc <_dtoa_r+0x34>
 800d54a:	2301      	movs	r3, #1
 800d54c:	e7df      	b.n	800d50e <_dtoa_r+0x276>
 800d54e:	bf00      	nop
 800d550:	636f4361 	.word	0x636f4361
 800d554:	3fd287a7 	.word	0x3fd287a7
 800d558:	8b60c8b3 	.word	0x8b60c8b3
 800d55c:	3fc68a28 	.word	0x3fc68a28
 800d560:	509f79fb 	.word	0x509f79fb
 800d564:	3fd34413 	.word	0x3fd34413
 800d568:	08014081 	.word	0x08014081
 800d56c:	08014098 	.word	0x08014098
 800d570:	7ff00000 	.word	0x7ff00000
 800d574:	0801407d 	.word	0x0801407d
 800d578:	08014074 	.word	0x08014074
 800d57c:	08014051 	.word	0x08014051
 800d580:	3ff80000 	.word	0x3ff80000
 800d584:	08014188 	.word	0x08014188
 800d588:	080140f3 	.word	0x080140f3
 800d58c:	2501      	movs	r5, #1
 800d58e:	2300      	movs	r3, #0
 800d590:	9306      	str	r3, [sp, #24]
 800d592:	9508      	str	r5, [sp, #32]
 800d594:	f04f 33ff 	mov.w	r3, #4294967295
 800d598:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d59c:	2200      	movs	r2, #0
 800d59e:	2312      	movs	r3, #18
 800d5a0:	e7b0      	b.n	800d504 <_dtoa_r+0x26c>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	9308      	str	r3, [sp, #32]
 800d5a6:	e7f5      	b.n	800d594 <_dtoa_r+0x2fc>
 800d5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d5ae:	e7b8      	b.n	800d522 <_dtoa_r+0x28a>
 800d5b0:	3101      	adds	r1, #1
 800d5b2:	6041      	str	r1, [r0, #4]
 800d5b4:	0052      	lsls	r2, r2, #1
 800d5b6:	e7b8      	b.n	800d52a <_dtoa_r+0x292>
 800d5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ba:	9a01      	ldr	r2, [sp, #4]
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	2b0e      	cmp	r3, #14
 800d5c2:	f200 809d 	bhi.w	800d700 <_dtoa_r+0x468>
 800d5c6:	2d00      	cmp	r5, #0
 800d5c8:	f000 809a 	beq.w	800d700 <_dtoa_r+0x468>
 800d5cc:	9b00      	ldr	r3, [sp, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dd32      	ble.n	800d638 <_dtoa_r+0x3a0>
 800d5d2:	4ab7      	ldr	r2, [pc, #732]	; (800d8b0 <_dtoa_r+0x618>)
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5e0:	9b00      	ldr	r3, [sp, #0]
 800d5e2:	05d8      	lsls	r0, r3, #23
 800d5e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d5e8:	d516      	bpl.n	800d618 <_dtoa_r+0x380>
 800d5ea:	4bb2      	ldr	r3, [pc, #712]	; (800d8b4 <_dtoa_r+0x61c>)
 800d5ec:	ec51 0b19 	vmov	r0, r1, d9
 800d5f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5f4:	f7f3 f902 	bl	80007fc <__aeabi_ddiv>
 800d5f8:	f007 070f 	and.w	r7, r7, #15
 800d5fc:	4682      	mov	sl, r0
 800d5fe:	468b      	mov	fp, r1
 800d600:	2503      	movs	r5, #3
 800d602:	4eac      	ldr	r6, [pc, #688]	; (800d8b4 <_dtoa_r+0x61c>)
 800d604:	b957      	cbnz	r7, 800d61c <_dtoa_r+0x384>
 800d606:	4642      	mov	r2, r8
 800d608:	464b      	mov	r3, r9
 800d60a:	4650      	mov	r0, sl
 800d60c:	4659      	mov	r1, fp
 800d60e:	f7f3 f8f5 	bl	80007fc <__aeabi_ddiv>
 800d612:	4682      	mov	sl, r0
 800d614:	468b      	mov	fp, r1
 800d616:	e028      	b.n	800d66a <_dtoa_r+0x3d2>
 800d618:	2502      	movs	r5, #2
 800d61a:	e7f2      	b.n	800d602 <_dtoa_r+0x36a>
 800d61c:	07f9      	lsls	r1, r7, #31
 800d61e:	d508      	bpl.n	800d632 <_dtoa_r+0x39a>
 800d620:	4640      	mov	r0, r8
 800d622:	4649      	mov	r1, r9
 800d624:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d628:	f7f2 ffbe 	bl	80005a8 <__aeabi_dmul>
 800d62c:	3501      	adds	r5, #1
 800d62e:	4680      	mov	r8, r0
 800d630:	4689      	mov	r9, r1
 800d632:	107f      	asrs	r7, r7, #1
 800d634:	3608      	adds	r6, #8
 800d636:	e7e5      	b.n	800d604 <_dtoa_r+0x36c>
 800d638:	f000 809b 	beq.w	800d772 <_dtoa_r+0x4da>
 800d63c:	9b00      	ldr	r3, [sp, #0]
 800d63e:	4f9d      	ldr	r7, [pc, #628]	; (800d8b4 <_dtoa_r+0x61c>)
 800d640:	425e      	negs	r6, r3
 800d642:	4b9b      	ldr	r3, [pc, #620]	; (800d8b0 <_dtoa_r+0x618>)
 800d644:	f006 020f 	and.w	r2, r6, #15
 800d648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	ec51 0b19 	vmov	r0, r1, d9
 800d654:	f7f2 ffa8 	bl	80005a8 <__aeabi_dmul>
 800d658:	1136      	asrs	r6, r6, #4
 800d65a:	4682      	mov	sl, r0
 800d65c:	468b      	mov	fp, r1
 800d65e:	2300      	movs	r3, #0
 800d660:	2502      	movs	r5, #2
 800d662:	2e00      	cmp	r6, #0
 800d664:	d17a      	bne.n	800d75c <_dtoa_r+0x4c4>
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1d3      	bne.n	800d612 <_dtoa_r+0x37a>
 800d66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 8082 	beq.w	800d776 <_dtoa_r+0x4de>
 800d672:	4b91      	ldr	r3, [pc, #580]	; (800d8b8 <_dtoa_r+0x620>)
 800d674:	2200      	movs	r2, #0
 800d676:	4650      	mov	r0, sl
 800d678:	4659      	mov	r1, fp
 800d67a:	f7f3 fa07 	bl	8000a8c <__aeabi_dcmplt>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d079      	beq.n	800d776 <_dtoa_r+0x4de>
 800d682:	9b03      	ldr	r3, [sp, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d076      	beq.n	800d776 <_dtoa_r+0x4de>
 800d688:	9b02      	ldr	r3, [sp, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dd36      	ble.n	800d6fc <_dtoa_r+0x464>
 800d68e:	9b00      	ldr	r3, [sp, #0]
 800d690:	4650      	mov	r0, sl
 800d692:	4659      	mov	r1, fp
 800d694:	1e5f      	subs	r7, r3, #1
 800d696:	2200      	movs	r2, #0
 800d698:	4b88      	ldr	r3, [pc, #544]	; (800d8bc <_dtoa_r+0x624>)
 800d69a:	f7f2 ff85 	bl	80005a8 <__aeabi_dmul>
 800d69e:	9e02      	ldr	r6, [sp, #8]
 800d6a0:	4682      	mov	sl, r0
 800d6a2:	468b      	mov	fp, r1
 800d6a4:	3501      	adds	r5, #1
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f7f2 ff14 	bl	80004d4 <__aeabi_i2d>
 800d6ac:	4652      	mov	r2, sl
 800d6ae:	465b      	mov	r3, fp
 800d6b0:	f7f2 ff7a 	bl	80005a8 <__aeabi_dmul>
 800d6b4:	4b82      	ldr	r3, [pc, #520]	; (800d8c0 <_dtoa_r+0x628>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f7f2 fdc0 	bl	800023c <__adddf3>
 800d6bc:	46d0      	mov	r8, sl
 800d6be:	46d9      	mov	r9, fp
 800d6c0:	4682      	mov	sl, r0
 800d6c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	d158      	bne.n	800d77c <_dtoa_r+0x4e4>
 800d6ca:	4b7e      	ldr	r3, [pc, #504]	; (800d8c4 <_dtoa_r+0x62c>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	4649      	mov	r1, r9
 800d6d2:	f7f2 fdb1 	bl	8000238 <__aeabi_dsub>
 800d6d6:	4652      	mov	r2, sl
 800d6d8:	465b      	mov	r3, fp
 800d6da:	4680      	mov	r8, r0
 800d6dc:	4689      	mov	r9, r1
 800d6de:	f7f3 f9f3 	bl	8000ac8 <__aeabi_dcmpgt>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	f040 8295 	bne.w	800dc12 <_dtoa_r+0x97a>
 800d6e8:	4652      	mov	r2, sl
 800d6ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	4649      	mov	r1, r9
 800d6f2:	f7f3 f9cb 	bl	8000a8c <__aeabi_dcmplt>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f040 8289 	bne.w	800dc0e <_dtoa_r+0x976>
 800d6fc:	ec5b ab19 	vmov	sl, fp, d9
 800d700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d702:	2b00      	cmp	r3, #0
 800d704:	f2c0 8148 	blt.w	800d998 <_dtoa_r+0x700>
 800d708:	9a00      	ldr	r2, [sp, #0]
 800d70a:	2a0e      	cmp	r2, #14
 800d70c:	f300 8144 	bgt.w	800d998 <_dtoa_r+0x700>
 800d710:	4b67      	ldr	r3, [pc, #412]	; (800d8b0 <_dtoa_r+0x618>)
 800d712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d716:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f280 80d5 	bge.w	800d8cc <_dtoa_r+0x634>
 800d722:	9b03      	ldr	r3, [sp, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	f300 80d1 	bgt.w	800d8cc <_dtoa_r+0x634>
 800d72a:	f040 826f 	bne.w	800dc0c <_dtoa_r+0x974>
 800d72e:	4b65      	ldr	r3, [pc, #404]	; (800d8c4 <_dtoa_r+0x62c>)
 800d730:	2200      	movs	r2, #0
 800d732:	4640      	mov	r0, r8
 800d734:	4649      	mov	r1, r9
 800d736:	f7f2 ff37 	bl	80005a8 <__aeabi_dmul>
 800d73a:	4652      	mov	r2, sl
 800d73c:	465b      	mov	r3, fp
 800d73e:	f7f3 f9b9 	bl	8000ab4 <__aeabi_dcmpge>
 800d742:	9e03      	ldr	r6, [sp, #12]
 800d744:	4637      	mov	r7, r6
 800d746:	2800      	cmp	r0, #0
 800d748:	f040 8245 	bne.w	800dbd6 <_dtoa_r+0x93e>
 800d74c:	9d01      	ldr	r5, [sp, #4]
 800d74e:	2331      	movs	r3, #49	; 0x31
 800d750:	f805 3b01 	strb.w	r3, [r5], #1
 800d754:	9b00      	ldr	r3, [sp, #0]
 800d756:	3301      	adds	r3, #1
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	e240      	b.n	800dbde <_dtoa_r+0x946>
 800d75c:	07f2      	lsls	r2, r6, #31
 800d75e:	d505      	bpl.n	800d76c <_dtoa_r+0x4d4>
 800d760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d764:	f7f2 ff20 	bl	80005a8 <__aeabi_dmul>
 800d768:	3501      	adds	r5, #1
 800d76a:	2301      	movs	r3, #1
 800d76c:	1076      	asrs	r6, r6, #1
 800d76e:	3708      	adds	r7, #8
 800d770:	e777      	b.n	800d662 <_dtoa_r+0x3ca>
 800d772:	2502      	movs	r5, #2
 800d774:	e779      	b.n	800d66a <_dtoa_r+0x3d2>
 800d776:	9f00      	ldr	r7, [sp, #0]
 800d778:	9e03      	ldr	r6, [sp, #12]
 800d77a:	e794      	b.n	800d6a6 <_dtoa_r+0x40e>
 800d77c:	9901      	ldr	r1, [sp, #4]
 800d77e:	4b4c      	ldr	r3, [pc, #304]	; (800d8b0 <_dtoa_r+0x618>)
 800d780:	4431      	add	r1, r6
 800d782:	910d      	str	r1, [sp, #52]	; 0x34
 800d784:	9908      	ldr	r1, [sp, #32]
 800d786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d78a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d78e:	2900      	cmp	r1, #0
 800d790:	d043      	beq.n	800d81a <_dtoa_r+0x582>
 800d792:	494d      	ldr	r1, [pc, #308]	; (800d8c8 <_dtoa_r+0x630>)
 800d794:	2000      	movs	r0, #0
 800d796:	f7f3 f831 	bl	80007fc <__aeabi_ddiv>
 800d79a:	4652      	mov	r2, sl
 800d79c:	465b      	mov	r3, fp
 800d79e:	f7f2 fd4b 	bl	8000238 <__aeabi_dsub>
 800d7a2:	9d01      	ldr	r5, [sp, #4]
 800d7a4:	4682      	mov	sl, r0
 800d7a6:	468b      	mov	fp, r1
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f7f3 f9ac 	bl	8000b08 <__aeabi_d2iz>
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	f7f2 fe8f 	bl	80004d4 <__aeabi_i2d>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4640      	mov	r0, r8
 800d7bc:	4649      	mov	r1, r9
 800d7be:	f7f2 fd3b 	bl	8000238 <__aeabi_dsub>
 800d7c2:	3630      	adds	r6, #48	; 0x30
 800d7c4:	f805 6b01 	strb.w	r6, [r5], #1
 800d7c8:	4652      	mov	r2, sl
 800d7ca:	465b      	mov	r3, fp
 800d7cc:	4680      	mov	r8, r0
 800d7ce:	4689      	mov	r9, r1
 800d7d0:	f7f3 f95c 	bl	8000a8c <__aeabi_dcmplt>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d163      	bne.n	800d8a0 <_dtoa_r+0x608>
 800d7d8:	4642      	mov	r2, r8
 800d7da:	464b      	mov	r3, r9
 800d7dc:	4936      	ldr	r1, [pc, #216]	; (800d8b8 <_dtoa_r+0x620>)
 800d7de:	2000      	movs	r0, #0
 800d7e0:	f7f2 fd2a 	bl	8000238 <__aeabi_dsub>
 800d7e4:	4652      	mov	r2, sl
 800d7e6:	465b      	mov	r3, fp
 800d7e8:	f7f3 f950 	bl	8000a8c <__aeabi_dcmplt>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f040 80b5 	bne.w	800d95c <_dtoa_r+0x6c4>
 800d7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f4:	429d      	cmp	r5, r3
 800d7f6:	d081      	beq.n	800d6fc <_dtoa_r+0x464>
 800d7f8:	4b30      	ldr	r3, [pc, #192]	; (800d8bc <_dtoa_r+0x624>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4650      	mov	r0, sl
 800d7fe:	4659      	mov	r1, fp
 800d800:	f7f2 fed2 	bl	80005a8 <__aeabi_dmul>
 800d804:	4b2d      	ldr	r3, [pc, #180]	; (800d8bc <_dtoa_r+0x624>)
 800d806:	4682      	mov	sl, r0
 800d808:	468b      	mov	fp, r1
 800d80a:	4640      	mov	r0, r8
 800d80c:	4649      	mov	r1, r9
 800d80e:	2200      	movs	r2, #0
 800d810:	f7f2 feca 	bl	80005a8 <__aeabi_dmul>
 800d814:	4680      	mov	r8, r0
 800d816:	4689      	mov	r9, r1
 800d818:	e7c6      	b.n	800d7a8 <_dtoa_r+0x510>
 800d81a:	4650      	mov	r0, sl
 800d81c:	4659      	mov	r1, fp
 800d81e:	f7f2 fec3 	bl	80005a8 <__aeabi_dmul>
 800d822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d824:	9d01      	ldr	r5, [sp, #4]
 800d826:	930f      	str	r3, [sp, #60]	; 0x3c
 800d828:	4682      	mov	sl, r0
 800d82a:	468b      	mov	fp, r1
 800d82c:	4649      	mov	r1, r9
 800d82e:	4640      	mov	r0, r8
 800d830:	f7f3 f96a 	bl	8000b08 <__aeabi_d2iz>
 800d834:	4606      	mov	r6, r0
 800d836:	f7f2 fe4d 	bl	80004d4 <__aeabi_i2d>
 800d83a:	3630      	adds	r6, #48	; 0x30
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	4640      	mov	r0, r8
 800d842:	4649      	mov	r1, r9
 800d844:	f7f2 fcf8 	bl	8000238 <__aeabi_dsub>
 800d848:	f805 6b01 	strb.w	r6, [r5], #1
 800d84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d84e:	429d      	cmp	r5, r3
 800d850:	4680      	mov	r8, r0
 800d852:	4689      	mov	r9, r1
 800d854:	f04f 0200 	mov.w	r2, #0
 800d858:	d124      	bne.n	800d8a4 <_dtoa_r+0x60c>
 800d85a:	4b1b      	ldr	r3, [pc, #108]	; (800d8c8 <_dtoa_r+0x630>)
 800d85c:	4650      	mov	r0, sl
 800d85e:	4659      	mov	r1, fp
 800d860:	f7f2 fcec 	bl	800023c <__adddf3>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4640      	mov	r0, r8
 800d86a:	4649      	mov	r1, r9
 800d86c:	f7f3 f92c 	bl	8000ac8 <__aeabi_dcmpgt>
 800d870:	2800      	cmp	r0, #0
 800d872:	d173      	bne.n	800d95c <_dtoa_r+0x6c4>
 800d874:	4652      	mov	r2, sl
 800d876:	465b      	mov	r3, fp
 800d878:	4913      	ldr	r1, [pc, #76]	; (800d8c8 <_dtoa_r+0x630>)
 800d87a:	2000      	movs	r0, #0
 800d87c:	f7f2 fcdc 	bl	8000238 <__aeabi_dsub>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	4640      	mov	r0, r8
 800d886:	4649      	mov	r1, r9
 800d888:	f7f3 f900 	bl	8000a8c <__aeabi_dcmplt>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	f43f af35 	beq.w	800d6fc <_dtoa_r+0x464>
 800d892:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d894:	1e6b      	subs	r3, r5, #1
 800d896:	930f      	str	r3, [sp, #60]	; 0x3c
 800d898:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d89c:	2b30      	cmp	r3, #48	; 0x30
 800d89e:	d0f8      	beq.n	800d892 <_dtoa_r+0x5fa>
 800d8a0:	9700      	str	r7, [sp, #0]
 800d8a2:	e049      	b.n	800d938 <_dtoa_r+0x6a0>
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <_dtoa_r+0x624>)
 800d8a6:	f7f2 fe7f 	bl	80005a8 <__aeabi_dmul>
 800d8aa:	4680      	mov	r8, r0
 800d8ac:	4689      	mov	r9, r1
 800d8ae:	e7bd      	b.n	800d82c <_dtoa_r+0x594>
 800d8b0:	08014188 	.word	0x08014188
 800d8b4:	08014160 	.word	0x08014160
 800d8b8:	3ff00000 	.word	0x3ff00000
 800d8bc:	40240000 	.word	0x40240000
 800d8c0:	401c0000 	.word	0x401c0000
 800d8c4:	40140000 	.word	0x40140000
 800d8c8:	3fe00000 	.word	0x3fe00000
 800d8cc:	9d01      	ldr	r5, [sp, #4]
 800d8ce:	4656      	mov	r6, sl
 800d8d0:	465f      	mov	r7, fp
 800d8d2:	4642      	mov	r2, r8
 800d8d4:	464b      	mov	r3, r9
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f2 ff8f 	bl	80007fc <__aeabi_ddiv>
 800d8de:	f7f3 f913 	bl	8000b08 <__aeabi_d2iz>
 800d8e2:	4682      	mov	sl, r0
 800d8e4:	f7f2 fdf6 	bl	80004d4 <__aeabi_i2d>
 800d8e8:	4642      	mov	r2, r8
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	f7f2 fe5c 	bl	80005a8 <__aeabi_dmul>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d8fc:	f7f2 fc9c 	bl	8000238 <__aeabi_dsub>
 800d900:	f805 6b01 	strb.w	r6, [r5], #1
 800d904:	9e01      	ldr	r6, [sp, #4]
 800d906:	9f03      	ldr	r7, [sp, #12]
 800d908:	1bae      	subs	r6, r5, r6
 800d90a:	42b7      	cmp	r7, r6
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	d135      	bne.n	800d97e <_dtoa_r+0x6e6>
 800d912:	f7f2 fc93 	bl	800023c <__adddf3>
 800d916:	4642      	mov	r2, r8
 800d918:	464b      	mov	r3, r9
 800d91a:	4606      	mov	r6, r0
 800d91c:	460f      	mov	r7, r1
 800d91e:	f7f3 f8d3 	bl	8000ac8 <__aeabi_dcmpgt>
 800d922:	b9d0      	cbnz	r0, 800d95a <_dtoa_r+0x6c2>
 800d924:	4642      	mov	r2, r8
 800d926:	464b      	mov	r3, r9
 800d928:	4630      	mov	r0, r6
 800d92a:	4639      	mov	r1, r7
 800d92c:	f7f3 f8a4 	bl	8000a78 <__aeabi_dcmpeq>
 800d930:	b110      	cbz	r0, 800d938 <_dtoa_r+0x6a0>
 800d932:	f01a 0f01 	tst.w	sl, #1
 800d936:	d110      	bne.n	800d95a <_dtoa_r+0x6c2>
 800d938:	4620      	mov	r0, r4
 800d93a:	ee18 1a10 	vmov	r1, s16
 800d93e:	f000 fb61 	bl	800e004 <_Bfree>
 800d942:	2300      	movs	r3, #0
 800d944:	9800      	ldr	r0, [sp, #0]
 800d946:	702b      	strb	r3, [r5, #0]
 800d948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d94a:	3001      	adds	r0, #1
 800d94c:	6018      	str	r0, [r3, #0]
 800d94e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d950:	2b00      	cmp	r3, #0
 800d952:	f43f acf1 	beq.w	800d338 <_dtoa_r+0xa0>
 800d956:	601d      	str	r5, [r3, #0]
 800d958:	e4ee      	b.n	800d338 <_dtoa_r+0xa0>
 800d95a:	9f00      	ldr	r7, [sp, #0]
 800d95c:	462b      	mov	r3, r5
 800d95e:	461d      	mov	r5, r3
 800d960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d964:	2a39      	cmp	r2, #57	; 0x39
 800d966:	d106      	bne.n	800d976 <_dtoa_r+0x6de>
 800d968:	9a01      	ldr	r2, [sp, #4]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d1f7      	bne.n	800d95e <_dtoa_r+0x6c6>
 800d96e:	9901      	ldr	r1, [sp, #4]
 800d970:	2230      	movs	r2, #48	; 0x30
 800d972:	3701      	adds	r7, #1
 800d974:	700a      	strb	r2, [r1, #0]
 800d976:	781a      	ldrb	r2, [r3, #0]
 800d978:	3201      	adds	r2, #1
 800d97a:	701a      	strb	r2, [r3, #0]
 800d97c:	e790      	b.n	800d8a0 <_dtoa_r+0x608>
 800d97e:	4ba6      	ldr	r3, [pc, #664]	; (800dc18 <_dtoa_r+0x980>)
 800d980:	2200      	movs	r2, #0
 800d982:	f7f2 fe11 	bl	80005a8 <__aeabi_dmul>
 800d986:	2200      	movs	r2, #0
 800d988:	2300      	movs	r3, #0
 800d98a:	4606      	mov	r6, r0
 800d98c:	460f      	mov	r7, r1
 800d98e:	f7f3 f873 	bl	8000a78 <__aeabi_dcmpeq>
 800d992:	2800      	cmp	r0, #0
 800d994:	d09d      	beq.n	800d8d2 <_dtoa_r+0x63a>
 800d996:	e7cf      	b.n	800d938 <_dtoa_r+0x6a0>
 800d998:	9a08      	ldr	r2, [sp, #32]
 800d99a:	2a00      	cmp	r2, #0
 800d99c:	f000 80d7 	beq.w	800db4e <_dtoa_r+0x8b6>
 800d9a0:	9a06      	ldr	r2, [sp, #24]
 800d9a2:	2a01      	cmp	r2, #1
 800d9a4:	f300 80ba 	bgt.w	800db1c <_dtoa_r+0x884>
 800d9a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9aa:	2a00      	cmp	r2, #0
 800d9ac:	f000 80b2 	beq.w	800db14 <_dtoa_r+0x87c>
 800d9b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9b4:	9e07      	ldr	r6, [sp, #28]
 800d9b6:	9d04      	ldr	r5, [sp, #16]
 800d9b8:	9a04      	ldr	r2, [sp, #16]
 800d9ba:	441a      	add	r2, r3
 800d9bc:	9204      	str	r2, [sp, #16]
 800d9be:	9a05      	ldr	r2, [sp, #20]
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	441a      	add	r2, r3
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	9205      	str	r2, [sp, #20]
 800d9c8:	f000 fbd4 	bl	800e174 <__i2b>
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	2d00      	cmp	r5, #0
 800d9d0:	dd0c      	ble.n	800d9ec <_dtoa_r+0x754>
 800d9d2:	9b05      	ldr	r3, [sp, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	dd09      	ble.n	800d9ec <_dtoa_r+0x754>
 800d9d8:	42ab      	cmp	r3, r5
 800d9da:	9a04      	ldr	r2, [sp, #16]
 800d9dc:	bfa8      	it	ge
 800d9de:	462b      	movge	r3, r5
 800d9e0:	1ad2      	subs	r2, r2, r3
 800d9e2:	9204      	str	r2, [sp, #16]
 800d9e4:	9a05      	ldr	r2, [sp, #20]
 800d9e6:	1aed      	subs	r5, r5, r3
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	9305      	str	r3, [sp, #20]
 800d9ec:	9b07      	ldr	r3, [sp, #28]
 800d9ee:	b31b      	cbz	r3, 800da38 <_dtoa_r+0x7a0>
 800d9f0:	9b08      	ldr	r3, [sp, #32]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 80af 	beq.w	800db56 <_dtoa_r+0x8be>
 800d9f8:	2e00      	cmp	r6, #0
 800d9fa:	dd13      	ble.n	800da24 <_dtoa_r+0x78c>
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	4632      	mov	r2, r6
 800da00:	4620      	mov	r0, r4
 800da02:	f000 fc77 	bl	800e2f4 <__pow5mult>
 800da06:	ee18 2a10 	vmov	r2, s16
 800da0a:	4601      	mov	r1, r0
 800da0c:	4607      	mov	r7, r0
 800da0e:	4620      	mov	r0, r4
 800da10:	f000 fbc6 	bl	800e1a0 <__multiply>
 800da14:	ee18 1a10 	vmov	r1, s16
 800da18:	4680      	mov	r8, r0
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 faf2 	bl	800e004 <_Bfree>
 800da20:	ee08 8a10 	vmov	s16, r8
 800da24:	9b07      	ldr	r3, [sp, #28]
 800da26:	1b9a      	subs	r2, r3, r6
 800da28:	d006      	beq.n	800da38 <_dtoa_r+0x7a0>
 800da2a:	ee18 1a10 	vmov	r1, s16
 800da2e:	4620      	mov	r0, r4
 800da30:	f000 fc60 	bl	800e2f4 <__pow5mult>
 800da34:	ee08 0a10 	vmov	s16, r0
 800da38:	2101      	movs	r1, #1
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 fb9a 	bl	800e174 <__i2b>
 800da40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da42:	2b00      	cmp	r3, #0
 800da44:	4606      	mov	r6, r0
 800da46:	f340 8088 	ble.w	800db5a <_dtoa_r+0x8c2>
 800da4a:	461a      	mov	r2, r3
 800da4c:	4601      	mov	r1, r0
 800da4e:	4620      	mov	r0, r4
 800da50:	f000 fc50 	bl	800e2f4 <__pow5mult>
 800da54:	9b06      	ldr	r3, [sp, #24]
 800da56:	2b01      	cmp	r3, #1
 800da58:	4606      	mov	r6, r0
 800da5a:	f340 8081 	ble.w	800db60 <_dtoa_r+0x8c8>
 800da5e:	f04f 0800 	mov.w	r8, #0
 800da62:	6933      	ldr	r3, [r6, #16]
 800da64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da68:	6918      	ldr	r0, [r3, #16]
 800da6a:	f000 fb33 	bl	800e0d4 <__hi0bits>
 800da6e:	f1c0 0020 	rsb	r0, r0, #32
 800da72:	9b05      	ldr	r3, [sp, #20]
 800da74:	4418      	add	r0, r3
 800da76:	f010 001f 	ands.w	r0, r0, #31
 800da7a:	f000 8092 	beq.w	800dba2 <_dtoa_r+0x90a>
 800da7e:	f1c0 0320 	rsb	r3, r0, #32
 800da82:	2b04      	cmp	r3, #4
 800da84:	f340 808a 	ble.w	800db9c <_dtoa_r+0x904>
 800da88:	f1c0 001c 	rsb	r0, r0, #28
 800da8c:	9b04      	ldr	r3, [sp, #16]
 800da8e:	4403      	add	r3, r0
 800da90:	9304      	str	r3, [sp, #16]
 800da92:	9b05      	ldr	r3, [sp, #20]
 800da94:	4403      	add	r3, r0
 800da96:	4405      	add	r5, r0
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	9b04      	ldr	r3, [sp, #16]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dd07      	ble.n	800dab0 <_dtoa_r+0x818>
 800daa0:	ee18 1a10 	vmov	r1, s16
 800daa4:	461a      	mov	r2, r3
 800daa6:	4620      	mov	r0, r4
 800daa8:	f000 fc7e 	bl	800e3a8 <__lshift>
 800daac:	ee08 0a10 	vmov	s16, r0
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dd05      	ble.n	800dac2 <_dtoa_r+0x82a>
 800dab6:	4631      	mov	r1, r6
 800dab8:	461a      	mov	r2, r3
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 fc74 	bl	800e3a8 <__lshift>
 800dac0:	4606      	mov	r6, r0
 800dac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d06e      	beq.n	800dba6 <_dtoa_r+0x90e>
 800dac8:	ee18 0a10 	vmov	r0, s16
 800dacc:	4631      	mov	r1, r6
 800dace:	f000 fcdb 	bl	800e488 <__mcmp>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	da67      	bge.n	800dba6 <_dtoa_r+0x90e>
 800dad6:	9b00      	ldr	r3, [sp, #0]
 800dad8:	3b01      	subs	r3, #1
 800dada:	ee18 1a10 	vmov	r1, s16
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	220a      	movs	r2, #10
 800dae2:	2300      	movs	r3, #0
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 faaf 	bl	800e048 <__multadd>
 800daea:	9b08      	ldr	r3, [sp, #32]
 800daec:	ee08 0a10 	vmov	s16, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 81b1 	beq.w	800de58 <_dtoa_r+0xbc0>
 800daf6:	2300      	movs	r3, #0
 800daf8:	4639      	mov	r1, r7
 800dafa:	220a      	movs	r2, #10
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 faa3 	bl	800e048 <__multadd>
 800db02:	9b02      	ldr	r3, [sp, #8]
 800db04:	2b00      	cmp	r3, #0
 800db06:	4607      	mov	r7, r0
 800db08:	f300 808e 	bgt.w	800dc28 <_dtoa_r+0x990>
 800db0c:	9b06      	ldr	r3, [sp, #24]
 800db0e:	2b02      	cmp	r3, #2
 800db10:	dc51      	bgt.n	800dbb6 <_dtoa_r+0x91e>
 800db12:	e089      	b.n	800dc28 <_dtoa_r+0x990>
 800db14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db1a:	e74b      	b.n	800d9b4 <_dtoa_r+0x71c>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	1e5e      	subs	r6, r3, #1
 800db20:	9b07      	ldr	r3, [sp, #28]
 800db22:	42b3      	cmp	r3, r6
 800db24:	bfbf      	itttt	lt
 800db26:	9b07      	ldrlt	r3, [sp, #28]
 800db28:	9607      	strlt	r6, [sp, #28]
 800db2a:	1af2      	sublt	r2, r6, r3
 800db2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db2e:	bfb6      	itet	lt
 800db30:	189b      	addlt	r3, r3, r2
 800db32:	1b9e      	subge	r6, r3, r6
 800db34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800db36:	9b03      	ldr	r3, [sp, #12]
 800db38:	bfb8      	it	lt
 800db3a:	2600      	movlt	r6, #0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	bfb7      	itett	lt
 800db40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800db44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800db48:	1a9d      	sublt	r5, r3, r2
 800db4a:	2300      	movlt	r3, #0
 800db4c:	e734      	b.n	800d9b8 <_dtoa_r+0x720>
 800db4e:	9e07      	ldr	r6, [sp, #28]
 800db50:	9d04      	ldr	r5, [sp, #16]
 800db52:	9f08      	ldr	r7, [sp, #32]
 800db54:	e73b      	b.n	800d9ce <_dtoa_r+0x736>
 800db56:	9a07      	ldr	r2, [sp, #28]
 800db58:	e767      	b.n	800da2a <_dtoa_r+0x792>
 800db5a:	9b06      	ldr	r3, [sp, #24]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	dc18      	bgt.n	800db92 <_dtoa_r+0x8fa>
 800db60:	f1ba 0f00 	cmp.w	sl, #0
 800db64:	d115      	bne.n	800db92 <_dtoa_r+0x8fa>
 800db66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db6a:	b993      	cbnz	r3, 800db92 <_dtoa_r+0x8fa>
 800db6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db70:	0d1b      	lsrs	r3, r3, #20
 800db72:	051b      	lsls	r3, r3, #20
 800db74:	b183      	cbz	r3, 800db98 <_dtoa_r+0x900>
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	3301      	adds	r3, #1
 800db7a:	9304      	str	r3, [sp, #16]
 800db7c:	9b05      	ldr	r3, [sp, #20]
 800db7e:	3301      	adds	r3, #1
 800db80:	9305      	str	r3, [sp, #20]
 800db82:	f04f 0801 	mov.w	r8, #1
 800db86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f47f af6a 	bne.w	800da62 <_dtoa_r+0x7ca>
 800db8e:	2001      	movs	r0, #1
 800db90:	e76f      	b.n	800da72 <_dtoa_r+0x7da>
 800db92:	f04f 0800 	mov.w	r8, #0
 800db96:	e7f6      	b.n	800db86 <_dtoa_r+0x8ee>
 800db98:	4698      	mov	r8, r3
 800db9a:	e7f4      	b.n	800db86 <_dtoa_r+0x8ee>
 800db9c:	f43f af7d 	beq.w	800da9a <_dtoa_r+0x802>
 800dba0:	4618      	mov	r0, r3
 800dba2:	301c      	adds	r0, #28
 800dba4:	e772      	b.n	800da8c <_dtoa_r+0x7f4>
 800dba6:	9b03      	ldr	r3, [sp, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	dc37      	bgt.n	800dc1c <_dtoa_r+0x984>
 800dbac:	9b06      	ldr	r3, [sp, #24]
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	dd34      	ble.n	800dc1c <_dtoa_r+0x984>
 800dbb2:	9b03      	ldr	r3, [sp, #12]
 800dbb4:	9302      	str	r3, [sp, #8]
 800dbb6:	9b02      	ldr	r3, [sp, #8]
 800dbb8:	b96b      	cbnz	r3, 800dbd6 <_dtoa_r+0x93e>
 800dbba:	4631      	mov	r1, r6
 800dbbc:	2205      	movs	r2, #5
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 fa42 	bl	800e048 <__multadd>
 800dbc4:	4601      	mov	r1, r0
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	ee18 0a10 	vmov	r0, s16
 800dbcc:	f000 fc5c 	bl	800e488 <__mcmp>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	f73f adbb 	bgt.w	800d74c <_dtoa_r+0x4b4>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd8:	9d01      	ldr	r5, [sp, #4]
 800dbda:	43db      	mvns	r3, r3
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	f04f 0800 	mov.w	r8, #0
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 fa0d 	bl	800e004 <_Bfree>
 800dbea:	2f00      	cmp	r7, #0
 800dbec:	f43f aea4 	beq.w	800d938 <_dtoa_r+0x6a0>
 800dbf0:	f1b8 0f00 	cmp.w	r8, #0
 800dbf4:	d005      	beq.n	800dc02 <_dtoa_r+0x96a>
 800dbf6:	45b8      	cmp	r8, r7
 800dbf8:	d003      	beq.n	800dc02 <_dtoa_r+0x96a>
 800dbfa:	4641      	mov	r1, r8
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f000 fa01 	bl	800e004 <_Bfree>
 800dc02:	4639      	mov	r1, r7
 800dc04:	4620      	mov	r0, r4
 800dc06:	f000 f9fd 	bl	800e004 <_Bfree>
 800dc0a:	e695      	b.n	800d938 <_dtoa_r+0x6a0>
 800dc0c:	2600      	movs	r6, #0
 800dc0e:	4637      	mov	r7, r6
 800dc10:	e7e1      	b.n	800dbd6 <_dtoa_r+0x93e>
 800dc12:	9700      	str	r7, [sp, #0]
 800dc14:	4637      	mov	r7, r6
 800dc16:	e599      	b.n	800d74c <_dtoa_r+0x4b4>
 800dc18:	40240000 	.word	0x40240000
 800dc1c:	9b08      	ldr	r3, [sp, #32]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	f000 80ca 	beq.w	800ddb8 <_dtoa_r+0xb20>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	9302      	str	r3, [sp, #8]
 800dc28:	2d00      	cmp	r5, #0
 800dc2a:	dd05      	ble.n	800dc38 <_dtoa_r+0x9a0>
 800dc2c:	4639      	mov	r1, r7
 800dc2e:	462a      	mov	r2, r5
 800dc30:	4620      	mov	r0, r4
 800dc32:	f000 fbb9 	bl	800e3a8 <__lshift>
 800dc36:	4607      	mov	r7, r0
 800dc38:	f1b8 0f00 	cmp.w	r8, #0
 800dc3c:	d05b      	beq.n	800dcf6 <_dtoa_r+0xa5e>
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	4620      	mov	r0, r4
 800dc42:	f000 f99f 	bl	800df84 <_Balloc>
 800dc46:	4605      	mov	r5, r0
 800dc48:	b928      	cbnz	r0, 800dc56 <_dtoa_r+0x9be>
 800dc4a:	4b87      	ldr	r3, [pc, #540]	; (800de68 <_dtoa_r+0xbd0>)
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc52:	f7ff bb3b 	b.w	800d2cc <_dtoa_r+0x34>
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	3202      	adds	r2, #2
 800dc5a:	0092      	lsls	r2, r2, #2
 800dc5c:	f107 010c 	add.w	r1, r7, #12
 800dc60:	300c      	adds	r0, #12
 800dc62:	f7fe faf5 	bl	800c250 <memcpy>
 800dc66:	2201      	movs	r2, #1
 800dc68:	4629      	mov	r1, r5
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f000 fb9c 	bl	800e3a8 <__lshift>
 800dc70:	9b01      	ldr	r3, [sp, #4]
 800dc72:	f103 0901 	add.w	r9, r3, #1
 800dc76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	9305      	str	r3, [sp, #20]
 800dc7e:	f00a 0301 	and.w	r3, sl, #1
 800dc82:	46b8      	mov	r8, r7
 800dc84:	9304      	str	r3, [sp, #16]
 800dc86:	4607      	mov	r7, r0
 800dc88:	4631      	mov	r1, r6
 800dc8a:	ee18 0a10 	vmov	r0, s16
 800dc8e:	f7ff fa75 	bl	800d17c <quorem>
 800dc92:	4641      	mov	r1, r8
 800dc94:	9002      	str	r0, [sp, #8]
 800dc96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dc9a:	ee18 0a10 	vmov	r0, s16
 800dc9e:	f000 fbf3 	bl	800e488 <__mcmp>
 800dca2:	463a      	mov	r2, r7
 800dca4:	9003      	str	r0, [sp, #12]
 800dca6:	4631      	mov	r1, r6
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f000 fc09 	bl	800e4c0 <__mdiff>
 800dcae:	68c2      	ldr	r2, [r0, #12]
 800dcb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	bb02      	cbnz	r2, 800dcfa <_dtoa_r+0xa62>
 800dcb8:	4601      	mov	r1, r0
 800dcba:	ee18 0a10 	vmov	r0, s16
 800dcbe:	f000 fbe3 	bl	800e488 <__mcmp>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	9207      	str	r2, [sp, #28]
 800dcca:	f000 f99b 	bl	800e004 <_Bfree>
 800dcce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dcd2:	ea43 0102 	orr.w	r1, r3, r2
 800dcd6:	9b04      	ldr	r3, [sp, #16]
 800dcd8:	430b      	orrs	r3, r1
 800dcda:	464d      	mov	r5, r9
 800dcdc:	d10f      	bne.n	800dcfe <_dtoa_r+0xa66>
 800dcde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dce2:	d02a      	beq.n	800dd3a <_dtoa_r+0xaa2>
 800dce4:	9b03      	ldr	r3, [sp, #12]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	dd02      	ble.n	800dcf0 <_dtoa_r+0xa58>
 800dcea:	9b02      	ldr	r3, [sp, #8]
 800dcec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dcf0:	f88b a000 	strb.w	sl, [fp]
 800dcf4:	e775      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	e7ba      	b.n	800dc70 <_dtoa_r+0x9d8>
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	e7e2      	b.n	800dcc4 <_dtoa_r+0xa2c>
 800dcfe:	9b03      	ldr	r3, [sp, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	db04      	blt.n	800dd0e <_dtoa_r+0xa76>
 800dd04:	9906      	ldr	r1, [sp, #24]
 800dd06:	430b      	orrs	r3, r1
 800dd08:	9904      	ldr	r1, [sp, #16]
 800dd0a:	430b      	orrs	r3, r1
 800dd0c:	d122      	bne.n	800dd54 <_dtoa_r+0xabc>
 800dd0e:	2a00      	cmp	r2, #0
 800dd10:	ddee      	ble.n	800dcf0 <_dtoa_r+0xa58>
 800dd12:	ee18 1a10 	vmov	r1, s16
 800dd16:	2201      	movs	r2, #1
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fb45 	bl	800e3a8 <__lshift>
 800dd1e:	4631      	mov	r1, r6
 800dd20:	ee08 0a10 	vmov	s16, r0
 800dd24:	f000 fbb0 	bl	800e488 <__mcmp>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	dc03      	bgt.n	800dd34 <_dtoa_r+0xa9c>
 800dd2c:	d1e0      	bne.n	800dcf0 <_dtoa_r+0xa58>
 800dd2e:	f01a 0f01 	tst.w	sl, #1
 800dd32:	d0dd      	beq.n	800dcf0 <_dtoa_r+0xa58>
 800dd34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd38:	d1d7      	bne.n	800dcea <_dtoa_r+0xa52>
 800dd3a:	2339      	movs	r3, #57	; 0x39
 800dd3c:	f88b 3000 	strb.w	r3, [fp]
 800dd40:	462b      	mov	r3, r5
 800dd42:	461d      	mov	r5, r3
 800dd44:	3b01      	subs	r3, #1
 800dd46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd4a:	2a39      	cmp	r2, #57	; 0x39
 800dd4c:	d071      	beq.n	800de32 <_dtoa_r+0xb9a>
 800dd4e:	3201      	adds	r2, #1
 800dd50:	701a      	strb	r2, [r3, #0]
 800dd52:	e746      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dd54:	2a00      	cmp	r2, #0
 800dd56:	dd07      	ble.n	800dd68 <_dtoa_r+0xad0>
 800dd58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd5c:	d0ed      	beq.n	800dd3a <_dtoa_r+0xaa2>
 800dd5e:	f10a 0301 	add.w	r3, sl, #1
 800dd62:	f88b 3000 	strb.w	r3, [fp]
 800dd66:	e73c      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dd68:	9b05      	ldr	r3, [sp, #20]
 800dd6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dd6e:	4599      	cmp	r9, r3
 800dd70:	d047      	beq.n	800de02 <_dtoa_r+0xb6a>
 800dd72:	ee18 1a10 	vmov	r1, s16
 800dd76:	2300      	movs	r3, #0
 800dd78:	220a      	movs	r2, #10
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f000 f964 	bl	800e048 <__multadd>
 800dd80:	45b8      	cmp	r8, r7
 800dd82:	ee08 0a10 	vmov	s16, r0
 800dd86:	f04f 0300 	mov.w	r3, #0
 800dd8a:	f04f 020a 	mov.w	r2, #10
 800dd8e:	4641      	mov	r1, r8
 800dd90:	4620      	mov	r0, r4
 800dd92:	d106      	bne.n	800dda2 <_dtoa_r+0xb0a>
 800dd94:	f000 f958 	bl	800e048 <__multadd>
 800dd98:	4680      	mov	r8, r0
 800dd9a:	4607      	mov	r7, r0
 800dd9c:	f109 0901 	add.w	r9, r9, #1
 800dda0:	e772      	b.n	800dc88 <_dtoa_r+0x9f0>
 800dda2:	f000 f951 	bl	800e048 <__multadd>
 800dda6:	4639      	mov	r1, r7
 800dda8:	4680      	mov	r8, r0
 800ddaa:	2300      	movs	r3, #0
 800ddac:	220a      	movs	r2, #10
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 f94a 	bl	800e048 <__multadd>
 800ddb4:	4607      	mov	r7, r0
 800ddb6:	e7f1      	b.n	800dd9c <_dtoa_r+0xb04>
 800ddb8:	9b03      	ldr	r3, [sp, #12]
 800ddba:	9302      	str	r3, [sp, #8]
 800ddbc:	9d01      	ldr	r5, [sp, #4]
 800ddbe:	ee18 0a10 	vmov	r0, s16
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	f7ff f9da 	bl	800d17c <quorem>
 800ddc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ddcc:	9b01      	ldr	r3, [sp, #4]
 800ddce:	f805 ab01 	strb.w	sl, [r5], #1
 800ddd2:	1aea      	subs	r2, r5, r3
 800ddd4:	9b02      	ldr	r3, [sp, #8]
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	dd09      	ble.n	800ddee <_dtoa_r+0xb56>
 800ddda:	ee18 1a10 	vmov	r1, s16
 800ddde:	2300      	movs	r3, #0
 800dde0:	220a      	movs	r2, #10
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 f930 	bl	800e048 <__multadd>
 800dde8:	ee08 0a10 	vmov	s16, r0
 800ddec:	e7e7      	b.n	800ddbe <_dtoa_r+0xb26>
 800ddee:	9b02      	ldr	r3, [sp, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bfc8      	it	gt
 800ddf4:	461d      	movgt	r5, r3
 800ddf6:	9b01      	ldr	r3, [sp, #4]
 800ddf8:	bfd8      	it	le
 800ddfa:	2501      	movle	r5, #1
 800ddfc:	441d      	add	r5, r3
 800ddfe:	f04f 0800 	mov.w	r8, #0
 800de02:	ee18 1a10 	vmov	r1, s16
 800de06:	2201      	movs	r2, #1
 800de08:	4620      	mov	r0, r4
 800de0a:	f000 facd 	bl	800e3a8 <__lshift>
 800de0e:	4631      	mov	r1, r6
 800de10:	ee08 0a10 	vmov	s16, r0
 800de14:	f000 fb38 	bl	800e488 <__mcmp>
 800de18:	2800      	cmp	r0, #0
 800de1a:	dc91      	bgt.n	800dd40 <_dtoa_r+0xaa8>
 800de1c:	d102      	bne.n	800de24 <_dtoa_r+0xb8c>
 800de1e:	f01a 0f01 	tst.w	sl, #1
 800de22:	d18d      	bne.n	800dd40 <_dtoa_r+0xaa8>
 800de24:	462b      	mov	r3, r5
 800de26:	461d      	mov	r5, r3
 800de28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de2c:	2a30      	cmp	r2, #48	; 0x30
 800de2e:	d0fa      	beq.n	800de26 <_dtoa_r+0xb8e>
 800de30:	e6d7      	b.n	800dbe2 <_dtoa_r+0x94a>
 800de32:	9a01      	ldr	r2, [sp, #4]
 800de34:	429a      	cmp	r2, r3
 800de36:	d184      	bne.n	800dd42 <_dtoa_r+0xaaa>
 800de38:	9b00      	ldr	r3, [sp, #0]
 800de3a:	3301      	adds	r3, #1
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	2331      	movs	r3, #49	; 0x31
 800de40:	7013      	strb	r3, [r2, #0]
 800de42:	e6ce      	b.n	800dbe2 <_dtoa_r+0x94a>
 800de44:	4b09      	ldr	r3, [pc, #36]	; (800de6c <_dtoa_r+0xbd4>)
 800de46:	f7ff ba95 	b.w	800d374 <_dtoa_r+0xdc>
 800de4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f47f aa6e 	bne.w	800d32e <_dtoa_r+0x96>
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <_dtoa_r+0xbd8>)
 800de54:	f7ff ba8e 	b.w	800d374 <_dtoa_r+0xdc>
 800de58:	9b02      	ldr	r3, [sp, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	dcae      	bgt.n	800ddbc <_dtoa_r+0xb24>
 800de5e:	9b06      	ldr	r3, [sp, #24]
 800de60:	2b02      	cmp	r3, #2
 800de62:	f73f aea8 	bgt.w	800dbb6 <_dtoa_r+0x91e>
 800de66:	e7a9      	b.n	800ddbc <_dtoa_r+0xb24>
 800de68:	080140f3 	.word	0x080140f3
 800de6c:	08014050 	.word	0x08014050
 800de70:	08014074 	.word	0x08014074

0800de74 <_localeconv_r>:
 800de74:	4800      	ldr	r0, [pc, #0]	; (800de78 <_localeconv_r+0x4>)
 800de76:	4770      	bx	lr
 800de78:	20000288 	.word	0x20000288

0800de7c <_lseek_r>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	4d07      	ldr	r5, [pc, #28]	; (800de9c <_lseek_r+0x20>)
 800de80:	4604      	mov	r4, r0
 800de82:	4608      	mov	r0, r1
 800de84:	4611      	mov	r1, r2
 800de86:	2200      	movs	r2, #0
 800de88:	602a      	str	r2, [r5, #0]
 800de8a:	461a      	mov	r2, r3
 800de8c:	f7f3 fe50 	bl	8001b30 <_lseek>
 800de90:	1c43      	adds	r3, r0, #1
 800de92:	d102      	bne.n	800de9a <_lseek_r+0x1e>
 800de94:	682b      	ldr	r3, [r5, #0]
 800de96:	b103      	cbz	r3, 800de9a <_lseek_r+0x1e>
 800de98:	6023      	str	r3, [r4, #0]
 800de9a:	bd38      	pop	{r3, r4, r5, pc}
 800de9c:	200007ac 	.word	0x200007ac

0800dea0 <__swhatbuf_r>:
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	460e      	mov	r6, r1
 800dea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dea8:	2900      	cmp	r1, #0
 800deaa:	b096      	sub	sp, #88	; 0x58
 800deac:	4614      	mov	r4, r2
 800deae:	461d      	mov	r5, r3
 800deb0:	da08      	bge.n	800dec4 <__swhatbuf_r+0x24>
 800deb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800deb6:	2200      	movs	r2, #0
 800deb8:	602a      	str	r2, [r5, #0]
 800deba:	061a      	lsls	r2, r3, #24
 800debc:	d410      	bmi.n	800dee0 <__swhatbuf_r+0x40>
 800debe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dec2:	e00e      	b.n	800dee2 <__swhatbuf_r+0x42>
 800dec4:	466a      	mov	r2, sp
 800dec6:	f000 feef 	bl	800eca8 <_fstat_r>
 800deca:	2800      	cmp	r0, #0
 800decc:	dbf1      	blt.n	800deb2 <__swhatbuf_r+0x12>
 800dece:	9a01      	ldr	r2, [sp, #4]
 800ded0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ded4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ded8:	425a      	negs	r2, r3
 800deda:	415a      	adcs	r2, r3
 800dedc:	602a      	str	r2, [r5, #0]
 800dede:	e7ee      	b.n	800debe <__swhatbuf_r+0x1e>
 800dee0:	2340      	movs	r3, #64	; 0x40
 800dee2:	2000      	movs	r0, #0
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	b016      	add	sp, #88	; 0x58
 800dee8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800deec <__smakebuf_r>:
 800deec:	898b      	ldrh	r3, [r1, #12]
 800deee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800def0:	079d      	lsls	r5, r3, #30
 800def2:	4606      	mov	r6, r0
 800def4:	460c      	mov	r4, r1
 800def6:	d507      	bpl.n	800df08 <__smakebuf_r+0x1c>
 800def8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800defc:	6023      	str	r3, [r4, #0]
 800defe:	6123      	str	r3, [r4, #16]
 800df00:	2301      	movs	r3, #1
 800df02:	6163      	str	r3, [r4, #20]
 800df04:	b002      	add	sp, #8
 800df06:	bd70      	pop	{r4, r5, r6, pc}
 800df08:	ab01      	add	r3, sp, #4
 800df0a:	466a      	mov	r2, sp
 800df0c:	f7ff ffc8 	bl	800dea0 <__swhatbuf_r>
 800df10:	9900      	ldr	r1, [sp, #0]
 800df12:	4605      	mov	r5, r0
 800df14:	4630      	mov	r0, r6
 800df16:	f7fe fa37 	bl	800c388 <_malloc_r>
 800df1a:	b948      	cbnz	r0, 800df30 <__smakebuf_r+0x44>
 800df1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df20:	059a      	lsls	r2, r3, #22
 800df22:	d4ef      	bmi.n	800df04 <__smakebuf_r+0x18>
 800df24:	f023 0303 	bic.w	r3, r3, #3
 800df28:	f043 0302 	orr.w	r3, r3, #2
 800df2c:	81a3      	strh	r3, [r4, #12]
 800df2e:	e7e3      	b.n	800def8 <__smakebuf_r+0xc>
 800df30:	4b0d      	ldr	r3, [pc, #52]	; (800df68 <__smakebuf_r+0x7c>)
 800df32:	62b3      	str	r3, [r6, #40]	; 0x28
 800df34:	89a3      	ldrh	r3, [r4, #12]
 800df36:	6020      	str	r0, [r4, #0]
 800df38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df3c:	81a3      	strh	r3, [r4, #12]
 800df3e:	9b00      	ldr	r3, [sp, #0]
 800df40:	6163      	str	r3, [r4, #20]
 800df42:	9b01      	ldr	r3, [sp, #4]
 800df44:	6120      	str	r0, [r4, #16]
 800df46:	b15b      	cbz	r3, 800df60 <__smakebuf_r+0x74>
 800df48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df4c:	4630      	mov	r0, r6
 800df4e:	f000 febd 	bl	800eccc <_isatty_r>
 800df52:	b128      	cbz	r0, 800df60 <__smakebuf_r+0x74>
 800df54:	89a3      	ldrh	r3, [r4, #12]
 800df56:	f023 0303 	bic.w	r3, r3, #3
 800df5a:	f043 0301 	orr.w	r3, r3, #1
 800df5e:	81a3      	strh	r3, [r4, #12]
 800df60:	89a0      	ldrh	r0, [r4, #12]
 800df62:	4305      	orrs	r5, r0
 800df64:	81a5      	strh	r5, [r4, #12]
 800df66:	e7cd      	b.n	800df04 <__smakebuf_r+0x18>
 800df68:	0800c03d 	.word	0x0800c03d

0800df6c <__malloc_lock>:
 800df6c:	4801      	ldr	r0, [pc, #4]	; (800df74 <__malloc_lock+0x8>)
 800df6e:	f7fe b95c 	b.w	800c22a <__retarget_lock_acquire_recursive>
 800df72:	bf00      	nop
 800df74:	200007a0 	.word	0x200007a0

0800df78 <__malloc_unlock>:
 800df78:	4801      	ldr	r0, [pc, #4]	; (800df80 <__malloc_unlock+0x8>)
 800df7a:	f7fe b957 	b.w	800c22c <__retarget_lock_release_recursive>
 800df7e:	bf00      	nop
 800df80:	200007a0 	.word	0x200007a0

0800df84 <_Balloc>:
 800df84:	b570      	push	{r4, r5, r6, lr}
 800df86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df88:	4604      	mov	r4, r0
 800df8a:	460d      	mov	r5, r1
 800df8c:	b976      	cbnz	r6, 800dfac <_Balloc+0x28>
 800df8e:	2010      	movs	r0, #16
 800df90:	f7fe f94e 	bl	800c230 <malloc>
 800df94:	4602      	mov	r2, r0
 800df96:	6260      	str	r0, [r4, #36]	; 0x24
 800df98:	b920      	cbnz	r0, 800dfa4 <_Balloc+0x20>
 800df9a:	4b18      	ldr	r3, [pc, #96]	; (800dffc <_Balloc+0x78>)
 800df9c:	4818      	ldr	r0, [pc, #96]	; (800e000 <_Balloc+0x7c>)
 800df9e:	2166      	movs	r1, #102	; 0x66
 800dfa0:	f000 fe52 	bl	800ec48 <__assert_func>
 800dfa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfa8:	6006      	str	r6, [r0, #0]
 800dfaa:	60c6      	str	r6, [r0, #12]
 800dfac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dfae:	68f3      	ldr	r3, [r6, #12]
 800dfb0:	b183      	cbz	r3, 800dfd4 <_Balloc+0x50>
 800dfb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfba:	b9b8      	cbnz	r0, 800dfec <_Balloc+0x68>
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	fa01 f605 	lsl.w	r6, r1, r5
 800dfc2:	1d72      	adds	r2, r6, #5
 800dfc4:	0092      	lsls	r2, r2, #2
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f000 fb60 	bl	800e68c <_calloc_r>
 800dfcc:	b160      	cbz	r0, 800dfe8 <_Balloc+0x64>
 800dfce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfd2:	e00e      	b.n	800dff2 <_Balloc+0x6e>
 800dfd4:	2221      	movs	r2, #33	; 0x21
 800dfd6:	2104      	movs	r1, #4
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 fb57 	bl	800e68c <_calloc_r>
 800dfde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfe0:	60f0      	str	r0, [r6, #12]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1e4      	bne.n	800dfb2 <_Balloc+0x2e>
 800dfe8:	2000      	movs	r0, #0
 800dfea:	bd70      	pop	{r4, r5, r6, pc}
 800dfec:	6802      	ldr	r2, [r0, #0]
 800dfee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dff2:	2300      	movs	r3, #0
 800dff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dff8:	e7f7      	b.n	800dfea <_Balloc+0x66>
 800dffa:	bf00      	nop
 800dffc:	08014081 	.word	0x08014081
 800e000:	08014104 	.word	0x08014104

0800e004 <_Bfree>:
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e008:	4605      	mov	r5, r0
 800e00a:	460c      	mov	r4, r1
 800e00c:	b976      	cbnz	r6, 800e02c <_Bfree+0x28>
 800e00e:	2010      	movs	r0, #16
 800e010:	f7fe f90e 	bl	800c230 <malloc>
 800e014:	4602      	mov	r2, r0
 800e016:	6268      	str	r0, [r5, #36]	; 0x24
 800e018:	b920      	cbnz	r0, 800e024 <_Bfree+0x20>
 800e01a:	4b09      	ldr	r3, [pc, #36]	; (800e040 <_Bfree+0x3c>)
 800e01c:	4809      	ldr	r0, [pc, #36]	; (800e044 <_Bfree+0x40>)
 800e01e:	218a      	movs	r1, #138	; 0x8a
 800e020:	f000 fe12 	bl	800ec48 <__assert_func>
 800e024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e028:	6006      	str	r6, [r0, #0]
 800e02a:	60c6      	str	r6, [r0, #12]
 800e02c:	b13c      	cbz	r4, 800e03e <_Bfree+0x3a>
 800e02e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e030:	6862      	ldr	r2, [r4, #4]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e038:	6021      	str	r1, [r4, #0]
 800e03a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e03e:	bd70      	pop	{r4, r5, r6, pc}
 800e040:	08014081 	.word	0x08014081
 800e044:	08014104 	.word	0x08014104

0800e048 <__multadd>:
 800e048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e04c:	690d      	ldr	r5, [r1, #16]
 800e04e:	4607      	mov	r7, r0
 800e050:	460c      	mov	r4, r1
 800e052:	461e      	mov	r6, r3
 800e054:	f101 0c14 	add.w	ip, r1, #20
 800e058:	2000      	movs	r0, #0
 800e05a:	f8dc 3000 	ldr.w	r3, [ip]
 800e05e:	b299      	uxth	r1, r3
 800e060:	fb02 6101 	mla	r1, r2, r1, r6
 800e064:	0c1e      	lsrs	r6, r3, #16
 800e066:	0c0b      	lsrs	r3, r1, #16
 800e068:	fb02 3306 	mla	r3, r2, r6, r3
 800e06c:	b289      	uxth	r1, r1
 800e06e:	3001      	adds	r0, #1
 800e070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e074:	4285      	cmp	r5, r0
 800e076:	f84c 1b04 	str.w	r1, [ip], #4
 800e07a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e07e:	dcec      	bgt.n	800e05a <__multadd+0x12>
 800e080:	b30e      	cbz	r6, 800e0c6 <__multadd+0x7e>
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	42ab      	cmp	r3, r5
 800e086:	dc19      	bgt.n	800e0bc <__multadd+0x74>
 800e088:	6861      	ldr	r1, [r4, #4]
 800e08a:	4638      	mov	r0, r7
 800e08c:	3101      	adds	r1, #1
 800e08e:	f7ff ff79 	bl	800df84 <_Balloc>
 800e092:	4680      	mov	r8, r0
 800e094:	b928      	cbnz	r0, 800e0a2 <__multadd+0x5a>
 800e096:	4602      	mov	r2, r0
 800e098:	4b0c      	ldr	r3, [pc, #48]	; (800e0cc <__multadd+0x84>)
 800e09a:	480d      	ldr	r0, [pc, #52]	; (800e0d0 <__multadd+0x88>)
 800e09c:	21b5      	movs	r1, #181	; 0xb5
 800e09e:	f000 fdd3 	bl	800ec48 <__assert_func>
 800e0a2:	6922      	ldr	r2, [r4, #16]
 800e0a4:	3202      	adds	r2, #2
 800e0a6:	f104 010c 	add.w	r1, r4, #12
 800e0aa:	0092      	lsls	r2, r2, #2
 800e0ac:	300c      	adds	r0, #12
 800e0ae:	f7fe f8cf 	bl	800c250 <memcpy>
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	4638      	mov	r0, r7
 800e0b6:	f7ff ffa5 	bl	800e004 <_Bfree>
 800e0ba:	4644      	mov	r4, r8
 800e0bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0c0:	3501      	adds	r5, #1
 800e0c2:	615e      	str	r6, [r3, #20]
 800e0c4:	6125      	str	r5, [r4, #16]
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0cc:	080140f3 	.word	0x080140f3
 800e0d0:	08014104 	.word	0x08014104

0800e0d4 <__hi0bits>:
 800e0d4:	0c03      	lsrs	r3, r0, #16
 800e0d6:	041b      	lsls	r3, r3, #16
 800e0d8:	b9d3      	cbnz	r3, 800e110 <__hi0bits+0x3c>
 800e0da:	0400      	lsls	r0, r0, #16
 800e0dc:	2310      	movs	r3, #16
 800e0de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0e2:	bf04      	itt	eq
 800e0e4:	0200      	lsleq	r0, r0, #8
 800e0e6:	3308      	addeq	r3, #8
 800e0e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0ec:	bf04      	itt	eq
 800e0ee:	0100      	lsleq	r0, r0, #4
 800e0f0:	3304      	addeq	r3, #4
 800e0f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0f6:	bf04      	itt	eq
 800e0f8:	0080      	lsleq	r0, r0, #2
 800e0fa:	3302      	addeq	r3, #2
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	db05      	blt.n	800e10c <__hi0bits+0x38>
 800e100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e104:	f103 0301 	add.w	r3, r3, #1
 800e108:	bf08      	it	eq
 800e10a:	2320      	moveq	r3, #32
 800e10c:	4618      	mov	r0, r3
 800e10e:	4770      	bx	lr
 800e110:	2300      	movs	r3, #0
 800e112:	e7e4      	b.n	800e0de <__hi0bits+0xa>

0800e114 <__lo0bits>:
 800e114:	6803      	ldr	r3, [r0, #0]
 800e116:	f013 0207 	ands.w	r2, r3, #7
 800e11a:	4601      	mov	r1, r0
 800e11c:	d00b      	beq.n	800e136 <__lo0bits+0x22>
 800e11e:	07da      	lsls	r2, r3, #31
 800e120:	d423      	bmi.n	800e16a <__lo0bits+0x56>
 800e122:	0798      	lsls	r0, r3, #30
 800e124:	bf49      	itett	mi
 800e126:	085b      	lsrmi	r3, r3, #1
 800e128:	089b      	lsrpl	r3, r3, #2
 800e12a:	2001      	movmi	r0, #1
 800e12c:	600b      	strmi	r3, [r1, #0]
 800e12e:	bf5c      	itt	pl
 800e130:	600b      	strpl	r3, [r1, #0]
 800e132:	2002      	movpl	r0, #2
 800e134:	4770      	bx	lr
 800e136:	b298      	uxth	r0, r3
 800e138:	b9a8      	cbnz	r0, 800e166 <__lo0bits+0x52>
 800e13a:	0c1b      	lsrs	r3, r3, #16
 800e13c:	2010      	movs	r0, #16
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	b90a      	cbnz	r2, 800e146 <__lo0bits+0x32>
 800e142:	3008      	adds	r0, #8
 800e144:	0a1b      	lsrs	r3, r3, #8
 800e146:	071a      	lsls	r2, r3, #28
 800e148:	bf04      	itt	eq
 800e14a:	091b      	lsreq	r3, r3, #4
 800e14c:	3004      	addeq	r0, #4
 800e14e:	079a      	lsls	r2, r3, #30
 800e150:	bf04      	itt	eq
 800e152:	089b      	lsreq	r3, r3, #2
 800e154:	3002      	addeq	r0, #2
 800e156:	07da      	lsls	r2, r3, #31
 800e158:	d403      	bmi.n	800e162 <__lo0bits+0x4e>
 800e15a:	085b      	lsrs	r3, r3, #1
 800e15c:	f100 0001 	add.w	r0, r0, #1
 800e160:	d005      	beq.n	800e16e <__lo0bits+0x5a>
 800e162:	600b      	str	r3, [r1, #0]
 800e164:	4770      	bx	lr
 800e166:	4610      	mov	r0, r2
 800e168:	e7e9      	b.n	800e13e <__lo0bits+0x2a>
 800e16a:	2000      	movs	r0, #0
 800e16c:	4770      	bx	lr
 800e16e:	2020      	movs	r0, #32
 800e170:	4770      	bx	lr
	...

0800e174 <__i2b>:
 800e174:	b510      	push	{r4, lr}
 800e176:	460c      	mov	r4, r1
 800e178:	2101      	movs	r1, #1
 800e17a:	f7ff ff03 	bl	800df84 <_Balloc>
 800e17e:	4602      	mov	r2, r0
 800e180:	b928      	cbnz	r0, 800e18e <__i2b+0x1a>
 800e182:	4b05      	ldr	r3, [pc, #20]	; (800e198 <__i2b+0x24>)
 800e184:	4805      	ldr	r0, [pc, #20]	; (800e19c <__i2b+0x28>)
 800e186:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e18a:	f000 fd5d 	bl	800ec48 <__assert_func>
 800e18e:	2301      	movs	r3, #1
 800e190:	6144      	str	r4, [r0, #20]
 800e192:	6103      	str	r3, [r0, #16]
 800e194:	bd10      	pop	{r4, pc}
 800e196:	bf00      	nop
 800e198:	080140f3 	.word	0x080140f3
 800e19c:	08014104 	.word	0x08014104

0800e1a0 <__multiply>:
 800e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	4691      	mov	r9, r2
 800e1a6:	690a      	ldr	r2, [r1, #16]
 800e1a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	bfb8      	it	lt
 800e1b0:	460b      	movlt	r3, r1
 800e1b2:	460c      	mov	r4, r1
 800e1b4:	bfbc      	itt	lt
 800e1b6:	464c      	movlt	r4, r9
 800e1b8:	4699      	movlt	r9, r3
 800e1ba:	6927      	ldr	r7, [r4, #16]
 800e1bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1c0:	68a3      	ldr	r3, [r4, #8]
 800e1c2:	6861      	ldr	r1, [r4, #4]
 800e1c4:	eb07 060a 	add.w	r6, r7, sl
 800e1c8:	42b3      	cmp	r3, r6
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	bfb8      	it	lt
 800e1ce:	3101      	addlt	r1, #1
 800e1d0:	f7ff fed8 	bl	800df84 <_Balloc>
 800e1d4:	b930      	cbnz	r0, 800e1e4 <__multiply+0x44>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	4b44      	ldr	r3, [pc, #272]	; (800e2ec <__multiply+0x14c>)
 800e1da:	4845      	ldr	r0, [pc, #276]	; (800e2f0 <__multiply+0x150>)
 800e1dc:	f240 115d 	movw	r1, #349	; 0x15d
 800e1e0:	f000 fd32 	bl	800ec48 <__assert_func>
 800e1e4:	f100 0514 	add.w	r5, r0, #20
 800e1e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	4543      	cmp	r3, r8
 800e1f2:	d321      	bcc.n	800e238 <__multiply+0x98>
 800e1f4:	f104 0314 	add.w	r3, r4, #20
 800e1f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e1fc:	f109 0314 	add.w	r3, r9, #20
 800e200:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e204:	9202      	str	r2, [sp, #8]
 800e206:	1b3a      	subs	r2, r7, r4
 800e208:	3a15      	subs	r2, #21
 800e20a:	f022 0203 	bic.w	r2, r2, #3
 800e20e:	3204      	adds	r2, #4
 800e210:	f104 0115 	add.w	r1, r4, #21
 800e214:	428f      	cmp	r7, r1
 800e216:	bf38      	it	cc
 800e218:	2204      	movcc	r2, #4
 800e21a:	9201      	str	r2, [sp, #4]
 800e21c:	9a02      	ldr	r2, [sp, #8]
 800e21e:	9303      	str	r3, [sp, #12]
 800e220:	429a      	cmp	r2, r3
 800e222:	d80c      	bhi.n	800e23e <__multiply+0x9e>
 800e224:	2e00      	cmp	r6, #0
 800e226:	dd03      	ble.n	800e230 <__multiply+0x90>
 800e228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d05a      	beq.n	800e2e6 <__multiply+0x146>
 800e230:	6106      	str	r6, [r0, #16]
 800e232:	b005      	add	sp, #20
 800e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e238:	f843 2b04 	str.w	r2, [r3], #4
 800e23c:	e7d8      	b.n	800e1f0 <__multiply+0x50>
 800e23e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e242:	f1ba 0f00 	cmp.w	sl, #0
 800e246:	d024      	beq.n	800e292 <__multiply+0xf2>
 800e248:	f104 0e14 	add.w	lr, r4, #20
 800e24c:	46a9      	mov	r9, r5
 800e24e:	f04f 0c00 	mov.w	ip, #0
 800e252:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e256:	f8d9 1000 	ldr.w	r1, [r9]
 800e25a:	fa1f fb82 	uxth.w	fp, r2
 800e25e:	b289      	uxth	r1, r1
 800e260:	fb0a 110b 	mla	r1, sl, fp, r1
 800e264:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e268:	f8d9 2000 	ldr.w	r2, [r9]
 800e26c:	4461      	add	r1, ip
 800e26e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e272:	fb0a c20b 	mla	r2, sl, fp, ip
 800e276:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e27a:	b289      	uxth	r1, r1
 800e27c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e280:	4577      	cmp	r7, lr
 800e282:	f849 1b04 	str.w	r1, [r9], #4
 800e286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e28a:	d8e2      	bhi.n	800e252 <__multiply+0xb2>
 800e28c:	9a01      	ldr	r2, [sp, #4]
 800e28e:	f845 c002 	str.w	ip, [r5, r2]
 800e292:	9a03      	ldr	r2, [sp, #12]
 800e294:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e298:	3304      	adds	r3, #4
 800e29a:	f1b9 0f00 	cmp.w	r9, #0
 800e29e:	d020      	beq.n	800e2e2 <__multiply+0x142>
 800e2a0:	6829      	ldr	r1, [r5, #0]
 800e2a2:	f104 0c14 	add.w	ip, r4, #20
 800e2a6:	46ae      	mov	lr, r5
 800e2a8:	f04f 0a00 	mov.w	sl, #0
 800e2ac:	f8bc b000 	ldrh.w	fp, [ip]
 800e2b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2b4:	fb09 220b 	mla	r2, r9, fp, r2
 800e2b8:	4492      	add	sl, r2
 800e2ba:	b289      	uxth	r1, r1
 800e2bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e2c0:	f84e 1b04 	str.w	r1, [lr], #4
 800e2c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2c8:	f8be 1000 	ldrh.w	r1, [lr]
 800e2cc:	0c12      	lsrs	r2, r2, #16
 800e2ce:	fb09 1102 	mla	r1, r9, r2, r1
 800e2d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e2d6:	4567      	cmp	r7, ip
 800e2d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2dc:	d8e6      	bhi.n	800e2ac <__multiply+0x10c>
 800e2de:	9a01      	ldr	r2, [sp, #4]
 800e2e0:	50a9      	str	r1, [r5, r2]
 800e2e2:	3504      	adds	r5, #4
 800e2e4:	e79a      	b.n	800e21c <__multiply+0x7c>
 800e2e6:	3e01      	subs	r6, #1
 800e2e8:	e79c      	b.n	800e224 <__multiply+0x84>
 800e2ea:	bf00      	nop
 800e2ec:	080140f3 	.word	0x080140f3
 800e2f0:	08014104 	.word	0x08014104

0800e2f4 <__pow5mult>:
 800e2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	f012 0203 	ands.w	r2, r2, #3
 800e2fe:	4606      	mov	r6, r0
 800e300:	460f      	mov	r7, r1
 800e302:	d007      	beq.n	800e314 <__pow5mult+0x20>
 800e304:	4c25      	ldr	r4, [pc, #148]	; (800e39c <__pow5mult+0xa8>)
 800e306:	3a01      	subs	r2, #1
 800e308:	2300      	movs	r3, #0
 800e30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e30e:	f7ff fe9b 	bl	800e048 <__multadd>
 800e312:	4607      	mov	r7, r0
 800e314:	10ad      	asrs	r5, r5, #2
 800e316:	d03d      	beq.n	800e394 <__pow5mult+0xa0>
 800e318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e31a:	b97c      	cbnz	r4, 800e33c <__pow5mult+0x48>
 800e31c:	2010      	movs	r0, #16
 800e31e:	f7fd ff87 	bl	800c230 <malloc>
 800e322:	4602      	mov	r2, r0
 800e324:	6270      	str	r0, [r6, #36]	; 0x24
 800e326:	b928      	cbnz	r0, 800e334 <__pow5mult+0x40>
 800e328:	4b1d      	ldr	r3, [pc, #116]	; (800e3a0 <__pow5mult+0xac>)
 800e32a:	481e      	ldr	r0, [pc, #120]	; (800e3a4 <__pow5mult+0xb0>)
 800e32c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e330:	f000 fc8a 	bl	800ec48 <__assert_func>
 800e334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e338:	6004      	str	r4, [r0, #0]
 800e33a:	60c4      	str	r4, [r0, #12]
 800e33c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e344:	b94c      	cbnz	r4, 800e35a <__pow5mult+0x66>
 800e346:	f240 2171 	movw	r1, #625	; 0x271
 800e34a:	4630      	mov	r0, r6
 800e34c:	f7ff ff12 	bl	800e174 <__i2b>
 800e350:	2300      	movs	r3, #0
 800e352:	f8c8 0008 	str.w	r0, [r8, #8]
 800e356:	4604      	mov	r4, r0
 800e358:	6003      	str	r3, [r0, #0]
 800e35a:	f04f 0900 	mov.w	r9, #0
 800e35e:	07eb      	lsls	r3, r5, #31
 800e360:	d50a      	bpl.n	800e378 <__pow5mult+0x84>
 800e362:	4639      	mov	r1, r7
 800e364:	4622      	mov	r2, r4
 800e366:	4630      	mov	r0, r6
 800e368:	f7ff ff1a 	bl	800e1a0 <__multiply>
 800e36c:	4639      	mov	r1, r7
 800e36e:	4680      	mov	r8, r0
 800e370:	4630      	mov	r0, r6
 800e372:	f7ff fe47 	bl	800e004 <_Bfree>
 800e376:	4647      	mov	r7, r8
 800e378:	106d      	asrs	r5, r5, #1
 800e37a:	d00b      	beq.n	800e394 <__pow5mult+0xa0>
 800e37c:	6820      	ldr	r0, [r4, #0]
 800e37e:	b938      	cbnz	r0, 800e390 <__pow5mult+0x9c>
 800e380:	4622      	mov	r2, r4
 800e382:	4621      	mov	r1, r4
 800e384:	4630      	mov	r0, r6
 800e386:	f7ff ff0b 	bl	800e1a0 <__multiply>
 800e38a:	6020      	str	r0, [r4, #0]
 800e38c:	f8c0 9000 	str.w	r9, [r0]
 800e390:	4604      	mov	r4, r0
 800e392:	e7e4      	b.n	800e35e <__pow5mult+0x6a>
 800e394:	4638      	mov	r0, r7
 800e396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e39a:	bf00      	nop
 800e39c:	08014250 	.word	0x08014250
 800e3a0:	08014081 	.word	0x08014081
 800e3a4:	08014104 	.word	0x08014104

0800e3a8 <__lshift>:
 800e3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	6849      	ldr	r1, [r1, #4]
 800e3b0:	6923      	ldr	r3, [r4, #16]
 800e3b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3b6:	68a3      	ldr	r3, [r4, #8]
 800e3b8:	4607      	mov	r7, r0
 800e3ba:	4691      	mov	r9, r2
 800e3bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3c0:	f108 0601 	add.w	r6, r8, #1
 800e3c4:	42b3      	cmp	r3, r6
 800e3c6:	db0b      	blt.n	800e3e0 <__lshift+0x38>
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7ff fddb 	bl	800df84 <_Balloc>
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	b948      	cbnz	r0, 800e3e6 <__lshift+0x3e>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	4b2a      	ldr	r3, [pc, #168]	; (800e480 <__lshift+0xd8>)
 800e3d6:	482b      	ldr	r0, [pc, #172]	; (800e484 <__lshift+0xdc>)
 800e3d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3dc:	f000 fc34 	bl	800ec48 <__assert_func>
 800e3e0:	3101      	adds	r1, #1
 800e3e2:	005b      	lsls	r3, r3, #1
 800e3e4:	e7ee      	b.n	800e3c4 <__lshift+0x1c>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f100 0114 	add.w	r1, r0, #20
 800e3ec:	f100 0210 	add.w	r2, r0, #16
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	4553      	cmp	r3, sl
 800e3f4:	db37      	blt.n	800e466 <__lshift+0xbe>
 800e3f6:	6920      	ldr	r0, [r4, #16]
 800e3f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3fc:	f104 0314 	add.w	r3, r4, #20
 800e400:	f019 091f 	ands.w	r9, r9, #31
 800e404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e40c:	d02f      	beq.n	800e46e <__lshift+0xc6>
 800e40e:	f1c9 0e20 	rsb	lr, r9, #32
 800e412:	468a      	mov	sl, r1
 800e414:	f04f 0c00 	mov.w	ip, #0
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	fa02 f209 	lsl.w	r2, r2, r9
 800e41e:	ea42 020c 	orr.w	r2, r2, ip
 800e422:	f84a 2b04 	str.w	r2, [sl], #4
 800e426:	f853 2b04 	ldr.w	r2, [r3], #4
 800e42a:	4298      	cmp	r0, r3
 800e42c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e430:	d8f2      	bhi.n	800e418 <__lshift+0x70>
 800e432:	1b03      	subs	r3, r0, r4
 800e434:	3b15      	subs	r3, #21
 800e436:	f023 0303 	bic.w	r3, r3, #3
 800e43a:	3304      	adds	r3, #4
 800e43c:	f104 0215 	add.w	r2, r4, #21
 800e440:	4290      	cmp	r0, r2
 800e442:	bf38      	it	cc
 800e444:	2304      	movcc	r3, #4
 800e446:	f841 c003 	str.w	ip, [r1, r3]
 800e44a:	f1bc 0f00 	cmp.w	ip, #0
 800e44e:	d001      	beq.n	800e454 <__lshift+0xac>
 800e450:	f108 0602 	add.w	r6, r8, #2
 800e454:	3e01      	subs	r6, #1
 800e456:	4638      	mov	r0, r7
 800e458:	612e      	str	r6, [r5, #16]
 800e45a:	4621      	mov	r1, r4
 800e45c:	f7ff fdd2 	bl	800e004 <_Bfree>
 800e460:	4628      	mov	r0, r5
 800e462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e466:	f842 0f04 	str.w	r0, [r2, #4]!
 800e46a:	3301      	adds	r3, #1
 800e46c:	e7c1      	b.n	800e3f2 <__lshift+0x4a>
 800e46e:	3904      	subs	r1, #4
 800e470:	f853 2b04 	ldr.w	r2, [r3], #4
 800e474:	f841 2f04 	str.w	r2, [r1, #4]!
 800e478:	4298      	cmp	r0, r3
 800e47a:	d8f9      	bhi.n	800e470 <__lshift+0xc8>
 800e47c:	e7ea      	b.n	800e454 <__lshift+0xac>
 800e47e:	bf00      	nop
 800e480:	080140f3 	.word	0x080140f3
 800e484:	08014104 	.word	0x08014104

0800e488 <__mcmp>:
 800e488:	b530      	push	{r4, r5, lr}
 800e48a:	6902      	ldr	r2, [r0, #16]
 800e48c:	690c      	ldr	r4, [r1, #16]
 800e48e:	1b12      	subs	r2, r2, r4
 800e490:	d10e      	bne.n	800e4b0 <__mcmp+0x28>
 800e492:	f100 0314 	add.w	r3, r0, #20
 800e496:	3114      	adds	r1, #20
 800e498:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e49c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4a8:	42a5      	cmp	r5, r4
 800e4aa:	d003      	beq.n	800e4b4 <__mcmp+0x2c>
 800e4ac:	d305      	bcc.n	800e4ba <__mcmp+0x32>
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	bd30      	pop	{r4, r5, pc}
 800e4b4:	4283      	cmp	r3, r0
 800e4b6:	d3f3      	bcc.n	800e4a0 <__mcmp+0x18>
 800e4b8:	e7fa      	b.n	800e4b0 <__mcmp+0x28>
 800e4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e4be:	e7f7      	b.n	800e4b0 <__mcmp+0x28>

0800e4c0 <__mdiff>:
 800e4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	4611      	mov	r1, r2
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	4690      	mov	r8, r2
 800e4ce:	f7ff ffdb 	bl	800e488 <__mcmp>
 800e4d2:	1e05      	subs	r5, r0, #0
 800e4d4:	d110      	bne.n	800e4f8 <__mdiff+0x38>
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	4630      	mov	r0, r6
 800e4da:	f7ff fd53 	bl	800df84 <_Balloc>
 800e4de:	b930      	cbnz	r0, 800e4ee <__mdiff+0x2e>
 800e4e0:	4b3a      	ldr	r3, [pc, #232]	; (800e5cc <__mdiff+0x10c>)
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	f240 2132 	movw	r1, #562	; 0x232
 800e4e8:	4839      	ldr	r0, [pc, #228]	; (800e5d0 <__mdiff+0x110>)
 800e4ea:	f000 fbad 	bl	800ec48 <__assert_func>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f8:	bfa4      	itt	ge
 800e4fa:	4643      	movge	r3, r8
 800e4fc:	46a0      	movge	r8, r4
 800e4fe:	4630      	mov	r0, r6
 800e500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e504:	bfa6      	itte	ge
 800e506:	461c      	movge	r4, r3
 800e508:	2500      	movge	r5, #0
 800e50a:	2501      	movlt	r5, #1
 800e50c:	f7ff fd3a 	bl	800df84 <_Balloc>
 800e510:	b920      	cbnz	r0, 800e51c <__mdiff+0x5c>
 800e512:	4b2e      	ldr	r3, [pc, #184]	; (800e5cc <__mdiff+0x10c>)
 800e514:	4602      	mov	r2, r0
 800e516:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e51a:	e7e5      	b.n	800e4e8 <__mdiff+0x28>
 800e51c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e520:	6926      	ldr	r6, [r4, #16]
 800e522:	60c5      	str	r5, [r0, #12]
 800e524:	f104 0914 	add.w	r9, r4, #20
 800e528:	f108 0514 	add.w	r5, r8, #20
 800e52c:	f100 0e14 	add.w	lr, r0, #20
 800e530:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e534:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e538:	f108 0210 	add.w	r2, r8, #16
 800e53c:	46f2      	mov	sl, lr
 800e53e:	2100      	movs	r1, #0
 800e540:	f859 3b04 	ldr.w	r3, [r9], #4
 800e544:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e548:	fa1f f883 	uxth.w	r8, r3
 800e54c:	fa11 f18b 	uxtah	r1, r1, fp
 800e550:	0c1b      	lsrs	r3, r3, #16
 800e552:	eba1 0808 	sub.w	r8, r1, r8
 800e556:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e55a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e55e:	fa1f f888 	uxth.w	r8, r8
 800e562:	1419      	asrs	r1, r3, #16
 800e564:	454e      	cmp	r6, r9
 800e566:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e56a:	f84a 3b04 	str.w	r3, [sl], #4
 800e56e:	d8e7      	bhi.n	800e540 <__mdiff+0x80>
 800e570:	1b33      	subs	r3, r6, r4
 800e572:	3b15      	subs	r3, #21
 800e574:	f023 0303 	bic.w	r3, r3, #3
 800e578:	3304      	adds	r3, #4
 800e57a:	3415      	adds	r4, #21
 800e57c:	42a6      	cmp	r6, r4
 800e57e:	bf38      	it	cc
 800e580:	2304      	movcc	r3, #4
 800e582:	441d      	add	r5, r3
 800e584:	4473      	add	r3, lr
 800e586:	469e      	mov	lr, r3
 800e588:	462e      	mov	r6, r5
 800e58a:	4566      	cmp	r6, ip
 800e58c:	d30e      	bcc.n	800e5ac <__mdiff+0xec>
 800e58e:	f10c 0203 	add.w	r2, ip, #3
 800e592:	1b52      	subs	r2, r2, r5
 800e594:	f022 0203 	bic.w	r2, r2, #3
 800e598:	3d03      	subs	r5, #3
 800e59a:	45ac      	cmp	ip, r5
 800e59c:	bf38      	it	cc
 800e59e:	2200      	movcc	r2, #0
 800e5a0:	441a      	add	r2, r3
 800e5a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5a6:	b17b      	cbz	r3, 800e5c8 <__mdiff+0x108>
 800e5a8:	6107      	str	r7, [r0, #16]
 800e5aa:	e7a3      	b.n	800e4f4 <__mdiff+0x34>
 800e5ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5b0:	fa11 f288 	uxtah	r2, r1, r8
 800e5b4:	1414      	asrs	r4, r2, #16
 800e5b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5ba:	b292      	uxth	r2, r2
 800e5bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5c0:	f84e 2b04 	str.w	r2, [lr], #4
 800e5c4:	1421      	asrs	r1, r4, #16
 800e5c6:	e7e0      	b.n	800e58a <__mdiff+0xca>
 800e5c8:	3f01      	subs	r7, #1
 800e5ca:	e7ea      	b.n	800e5a2 <__mdiff+0xe2>
 800e5cc:	080140f3 	.word	0x080140f3
 800e5d0:	08014104 	.word	0x08014104

0800e5d4 <__d2b>:
 800e5d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5d8:	4689      	mov	r9, r1
 800e5da:	2101      	movs	r1, #1
 800e5dc:	ec57 6b10 	vmov	r6, r7, d0
 800e5e0:	4690      	mov	r8, r2
 800e5e2:	f7ff fccf 	bl	800df84 <_Balloc>
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	b930      	cbnz	r0, 800e5f8 <__d2b+0x24>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	4b25      	ldr	r3, [pc, #148]	; (800e684 <__d2b+0xb0>)
 800e5ee:	4826      	ldr	r0, [pc, #152]	; (800e688 <__d2b+0xb4>)
 800e5f0:	f240 310a 	movw	r1, #778	; 0x30a
 800e5f4:	f000 fb28 	bl	800ec48 <__assert_func>
 800e5f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e5fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e600:	bb35      	cbnz	r5, 800e650 <__d2b+0x7c>
 800e602:	2e00      	cmp	r6, #0
 800e604:	9301      	str	r3, [sp, #4]
 800e606:	d028      	beq.n	800e65a <__d2b+0x86>
 800e608:	4668      	mov	r0, sp
 800e60a:	9600      	str	r6, [sp, #0]
 800e60c:	f7ff fd82 	bl	800e114 <__lo0bits>
 800e610:	9900      	ldr	r1, [sp, #0]
 800e612:	b300      	cbz	r0, 800e656 <__d2b+0x82>
 800e614:	9a01      	ldr	r2, [sp, #4]
 800e616:	f1c0 0320 	rsb	r3, r0, #32
 800e61a:	fa02 f303 	lsl.w	r3, r2, r3
 800e61e:	430b      	orrs	r3, r1
 800e620:	40c2      	lsrs	r2, r0
 800e622:	6163      	str	r3, [r4, #20]
 800e624:	9201      	str	r2, [sp, #4]
 800e626:	9b01      	ldr	r3, [sp, #4]
 800e628:	61a3      	str	r3, [r4, #24]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	bf14      	ite	ne
 800e62e:	2202      	movne	r2, #2
 800e630:	2201      	moveq	r2, #1
 800e632:	6122      	str	r2, [r4, #16]
 800e634:	b1d5      	cbz	r5, 800e66c <__d2b+0x98>
 800e636:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e63a:	4405      	add	r5, r0
 800e63c:	f8c9 5000 	str.w	r5, [r9]
 800e640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e644:	f8c8 0000 	str.w	r0, [r8]
 800e648:	4620      	mov	r0, r4
 800e64a:	b003      	add	sp, #12
 800e64c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e654:	e7d5      	b.n	800e602 <__d2b+0x2e>
 800e656:	6161      	str	r1, [r4, #20]
 800e658:	e7e5      	b.n	800e626 <__d2b+0x52>
 800e65a:	a801      	add	r0, sp, #4
 800e65c:	f7ff fd5a 	bl	800e114 <__lo0bits>
 800e660:	9b01      	ldr	r3, [sp, #4]
 800e662:	6163      	str	r3, [r4, #20]
 800e664:	2201      	movs	r2, #1
 800e666:	6122      	str	r2, [r4, #16]
 800e668:	3020      	adds	r0, #32
 800e66a:	e7e3      	b.n	800e634 <__d2b+0x60>
 800e66c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e674:	f8c9 0000 	str.w	r0, [r9]
 800e678:	6918      	ldr	r0, [r3, #16]
 800e67a:	f7ff fd2b 	bl	800e0d4 <__hi0bits>
 800e67e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e682:	e7df      	b.n	800e644 <__d2b+0x70>
 800e684:	080140f3 	.word	0x080140f3
 800e688:	08014104 	.word	0x08014104

0800e68c <_calloc_r>:
 800e68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e68e:	fba1 2402 	umull	r2, r4, r1, r2
 800e692:	b94c      	cbnz	r4, 800e6a8 <_calloc_r+0x1c>
 800e694:	4611      	mov	r1, r2
 800e696:	9201      	str	r2, [sp, #4]
 800e698:	f7fd fe76 	bl	800c388 <_malloc_r>
 800e69c:	9a01      	ldr	r2, [sp, #4]
 800e69e:	4605      	mov	r5, r0
 800e6a0:	b930      	cbnz	r0, 800e6b0 <_calloc_r+0x24>
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	b003      	add	sp, #12
 800e6a6:	bd30      	pop	{r4, r5, pc}
 800e6a8:	220c      	movs	r2, #12
 800e6aa:	6002      	str	r2, [r0, #0]
 800e6ac:	2500      	movs	r5, #0
 800e6ae:	e7f8      	b.n	800e6a2 <_calloc_r+0x16>
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	f7fd fdf5 	bl	800c2a0 <memset>
 800e6b6:	e7f4      	b.n	800e6a2 <_calloc_r+0x16>

0800e6b8 <__ssputs_r>:
 800e6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6bc:	688e      	ldr	r6, [r1, #8]
 800e6be:	429e      	cmp	r6, r3
 800e6c0:	4682      	mov	sl, r0
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	4690      	mov	r8, r2
 800e6c6:	461f      	mov	r7, r3
 800e6c8:	d838      	bhi.n	800e73c <__ssputs_r+0x84>
 800e6ca:	898a      	ldrh	r2, [r1, #12]
 800e6cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6d0:	d032      	beq.n	800e738 <__ssputs_r+0x80>
 800e6d2:	6825      	ldr	r5, [r4, #0]
 800e6d4:	6909      	ldr	r1, [r1, #16]
 800e6d6:	eba5 0901 	sub.w	r9, r5, r1
 800e6da:	6965      	ldr	r5, [r4, #20]
 800e6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	444b      	add	r3, r9
 800e6e8:	106d      	asrs	r5, r5, #1
 800e6ea:	429d      	cmp	r5, r3
 800e6ec:	bf38      	it	cc
 800e6ee:	461d      	movcc	r5, r3
 800e6f0:	0553      	lsls	r3, r2, #21
 800e6f2:	d531      	bpl.n	800e758 <__ssputs_r+0xa0>
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	f7fd fe47 	bl	800c388 <_malloc_r>
 800e6fa:	4606      	mov	r6, r0
 800e6fc:	b950      	cbnz	r0, 800e714 <__ssputs_r+0x5c>
 800e6fe:	230c      	movs	r3, #12
 800e700:	f8ca 3000 	str.w	r3, [sl]
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e70a:	81a3      	strh	r3, [r4, #12]
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e714:	6921      	ldr	r1, [r4, #16]
 800e716:	464a      	mov	r2, r9
 800e718:	f7fd fd9a 	bl	800c250 <memcpy>
 800e71c:	89a3      	ldrh	r3, [r4, #12]
 800e71e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e726:	81a3      	strh	r3, [r4, #12]
 800e728:	6126      	str	r6, [r4, #16]
 800e72a:	6165      	str	r5, [r4, #20]
 800e72c:	444e      	add	r6, r9
 800e72e:	eba5 0509 	sub.w	r5, r5, r9
 800e732:	6026      	str	r6, [r4, #0]
 800e734:	60a5      	str	r5, [r4, #8]
 800e736:	463e      	mov	r6, r7
 800e738:	42be      	cmp	r6, r7
 800e73a:	d900      	bls.n	800e73e <__ssputs_r+0x86>
 800e73c:	463e      	mov	r6, r7
 800e73e:	6820      	ldr	r0, [r4, #0]
 800e740:	4632      	mov	r2, r6
 800e742:	4641      	mov	r1, r8
 800e744:	f7fd fd92 	bl	800c26c <memmove>
 800e748:	68a3      	ldr	r3, [r4, #8]
 800e74a:	1b9b      	subs	r3, r3, r6
 800e74c:	60a3      	str	r3, [r4, #8]
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	4433      	add	r3, r6
 800e752:	6023      	str	r3, [r4, #0]
 800e754:	2000      	movs	r0, #0
 800e756:	e7db      	b.n	800e710 <__ssputs_r+0x58>
 800e758:	462a      	mov	r2, r5
 800e75a:	f000 fad9 	bl	800ed10 <_realloc_r>
 800e75e:	4606      	mov	r6, r0
 800e760:	2800      	cmp	r0, #0
 800e762:	d1e1      	bne.n	800e728 <__ssputs_r+0x70>
 800e764:	6921      	ldr	r1, [r4, #16]
 800e766:	4650      	mov	r0, sl
 800e768:	f7fd fda2 	bl	800c2b0 <_free_r>
 800e76c:	e7c7      	b.n	800e6fe <__ssputs_r+0x46>
	...

0800e770 <_svfiprintf_r>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	4698      	mov	r8, r3
 800e776:	898b      	ldrh	r3, [r1, #12]
 800e778:	061b      	lsls	r3, r3, #24
 800e77a:	b09d      	sub	sp, #116	; 0x74
 800e77c:	4607      	mov	r7, r0
 800e77e:	460d      	mov	r5, r1
 800e780:	4614      	mov	r4, r2
 800e782:	d50e      	bpl.n	800e7a2 <_svfiprintf_r+0x32>
 800e784:	690b      	ldr	r3, [r1, #16]
 800e786:	b963      	cbnz	r3, 800e7a2 <_svfiprintf_r+0x32>
 800e788:	2140      	movs	r1, #64	; 0x40
 800e78a:	f7fd fdfd 	bl	800c388 <_malloc_r>
 800e78e:	6028      	str	r0, [r5, #0]
 800e790:	6128      	str	r0, [r5, #16]
 800e792:	b920      	cbnz	r0, 800e79e <_svfiprintf_r+0x2e>
 800e794:	230c      	movs	r3, #12
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	f04f 30ff 	mov.w	r0, #4294967295
 800e79c:	e0d1      	b.n	800e942 <_svfiprintf_r+0x1d2>
 800e79e:	2340      	movs	r3, #64	; 0x40
 800e7a0:	616b      	str	r3, [r5, #20]
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a6:	2320      	movs	r3, #32
 800e7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7b0:	2330      	movs	r3, #48	; 0x30
 800e7b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e95c <_svfiprintf_r+0x1ec>
 800e7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7ba:	f04f 0901 	mov.w	r9, #1
 800e7be:	4623      	mov	r3, r4
 800e7c0:	469a      	mov	sl, r3
 800e7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7c6:	b10a      	cbz	r2, 800e7cc <_svfiprintf_r+0x5c>
 800e7c8:	2a25      	cmp	r2, #37	; 0x25
 800e7ca:	d1f9      	bne.n	800e7c0 <_svfiprintf_r+0x50>
 800e7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800e7d0:	d00b      	beq.n	800e7ea <_svfiprintf_r+0x7a>
 800e7d2:	465b      	mov	r3, fp
 800e7d4:	4622      	mov	r2, r4
 800e7d6:	4629      	mov	r1, r5
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f7ff ff6d 	bl	800e6b8 <__ssputs_r>
 800e7de:	3001      	adds	r0, #1
 800e7e0:	f000 80aa 	beq.w	800e938 <_svfiprintf_r+0x1c8>
 800e7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7e6:	445a      	add	r2, fp
 800e7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 80a2 	beq.w	800e938 <_svfiprintf_r+0x1c8>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7fe:	f10a 0a01 	add.w	sl, sl, #1
 800e802:	9304      	str	r3, [sp, #16]
 800e804:	9307      	str	r3, [sp, #28]
 800e806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e80a:	931a      	str	r3, [sp, #104]	; 0x68
 800e80c:	4654      	mov	r4, sl
 800e80e:	2205      	movs	r2, #5
 800e810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e814:	4851      	ldr	r0, [pc, #324]	; (800e95c <_svfiprintf_r+0x1ec>)
 800e816:	f7f1 fcbb 	bl	8000190 <memchr>
 800e81a:	9a04      	ldr	r2, [sp, #16]
 800e81c:	b9d8      	cbnz	r0, 800e856 <_svfiprintf_r+0xe6>
 800e81e:	06d0      	lsls	r0, r2, #27
 800e820:	bf44      	itt	mi
 800e822:	2320      	movmi	r3, #32
 800e824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e828:	0711      	lsls	r1, r2, #28
 800e82a:	bf44      	itt	mi
 800e82c:	232b      	movmi	r3, #43	; 0x2b
 800e82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e832:	f89a 3000 	ldrb.w	r3, [sl]
 800e836:	2b2a      	cmp	r3, #42	; 0x2a
 800e838:	d015      	beq.n	800e866 <_svfiprintf_r+0xf6>
 800e83a:	9a07      	ldr	r2, [sp, #28]
 800e83c:	4654      	mov	r4, sl
 800e83e:	2000      	movs	r0, #0
 800e840:	f04f 0c0a 	mov.w	ip, #10
 800e844:	4621      	mov	r1, r4
 800e846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e84a:	3b30      	subs	r3, #48	; 0x30
 800e84c:	2b09      	cmp	r3, #9
 800e84e:	d94e      	bls.n	800e8ee <_svfiprintf_r+0x17e>
 800e850:	b1b0      	cbz	r0, 800e880 <_svfiprintf_r+0x110>
 800e852:	9207      	str	r2, [sp, #28]
 800e854:	e014      	b.n	800e880 <_svfiprintf_r+0x110>
 800e856:	eba0 0308 	sub.w	r3, r0, r8
 800e85a:	fa09 f303 	lsl.w	r3, r9, r3
 800e85e:	4313      	orrs	r3, r2
 800e860:	9304      	str	r3, [sp, #16]
 800e862:	46a2      	mov	sl, r4
 800e864:	e7d2      	b.n	800e80c <_svfiprintf_r+0x9c>
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	1d19      	adds	r1, r3, #4
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	9103      	str	r1, [sp, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	bfbb      	ittet	lt
 800e872:	425b      	neglt	r3, r3
 800e874:	f042 0202 	orrlt.w	r2, r2, #2
 800e878:	9307      	strge	r3, [sp, #28]
 800e87a:	9307      	strlt	r3, [sp, #28]
 800e87c:	bfb8      	it	lt
 800e87e:	9204      	strlt	r2, [sp, #16]
 800e880:	7823      	ldrb	r3, [r4, #0]
 800e882:	2b2e      	cmp	r3, #46	; 0x2e
 800e884:	d10c      	bne.n	800e8a0 <_svfiprintf_r+0x130>
 800e886:	7863      	ldrb	r3, [r4, #1]
 800e888:	2b2a      	cmp	r3, #42	; 0x2a
 800e88a:	d135      	bne.n	800e8f8 <_svfiprintf_r+0x188>
 800e88c:	9b03      	ldr	r3, [sp, #12]
 800e88e:	1d1a      	adds	r2, r3, #4
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	9203      	str	r2, [sp, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	bfb8      	it	lt
 800e898:	f04f 33ff 	movlt.w	r3, #4294967295
 800e89c:	3402      	adds	r4, #2
 800e89e:	9305      	str	r3, [sp, #20]
 800e8a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e96c <_svfiprintf_r+0x1fc>
 800e8a4:	7821      	ldrb	r1, [r4, #0]
 800e8a6:	2203      	movs	r2, #3
 800e8a8:	4650      	mov	r0, sl
 800e8aa:	f7f1 fc71 	bl	8000190 <memchr>
 800e8ae:	b140      	cbz	r0, 800e8c2 <_svfiprintf_r+0x152>
 800e8b0:	2340      	movs	r3, #64	; 0x40
 800e8b2:	eba0 000a 	sub.w	r0, r0, sl
 800e8b6:	fa03 f000 	lsl.w	r0, r3, r0
 800e8ba:	9b04      	ldr	r3, [sp, #16]
 800e8bc:	4303      	orrs	r3, r0
 800e8be:	3401      	adds	r4, #1
 800e8c0:	9304      	str	r3, [sp, #16]
 800e8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c6:	4826      	ldr	r0, [pc, #152]	; (800e960 <_svfiprintf_r+0x1f0>)
 800e8c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8cc:	2206      	movs	r2, #6
 800e8ce:	f7f1 fc5f 	bl	8000190 <memchr>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d038      	beq.n	800e948 <_svfiprintf_r+0x1d8>
 800e8d6:	4b23      	ldr	r3, [pc, #140]	; (800e964 <_svfiprintf_r+0x1f4>)
 800e8d8:	bb1b      	cbnz	r3, 800e922 <_svfiprintf_r+0x1b2>
 800e8da:	9b03      	ldr	r3, [sp, #12]
 800e8dc:	3307      	adds	r3, #7
 800e8de:	f023 0307 	bic.w	r3, r3, #7
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	9303      	str	r3, [sp, #12]
 800e8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8e8:	4433      	add	r3, r6
 800e8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e8ec:	e767      	b.n	800e7be <_svfiprintf_r+0x4e>
 800e8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	2001      	movs	r0, #1
 800e8f6:	e7a5      	b.n	800e844 <_svfiprintf_r+0xd4>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	3401      	adds	r4, #1
 800e8fc:	9305      	str	r3, [sp, #20]
 800e8fe:	4619      	mov	r1, r3
 800e900:	f04f 0c0a 	mov.w	ip, #10
 800e904:	4620      	mov	r0, r4
 800e906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e90a:	3a30      	subs	r2, #48	; 0x30
 800e90c:	2a09      	cmp	r2, #9
 800e90e:	d903      	bls.n	800e918 <_svfiprintf_r+0x1a8>
 800e910:	2b00      	cmp	r3, #0
 800e912:	d0c5      	beq.n	800e8a0 <_svfiprintf_r+0x130>
 800e914:	9105      	str	r1, [sp, #20]
 800e916:	e7c3      	b.n	800e8a0 <_svfiprintf_r+0x130>
 800e918:	fb0c 2101 	mla	r1, ip, r1, r2
 800e91c:	4604      	mov	r4, r0
 800e91e:	2301      	movs	r3, #1
 800e920:	e7f0      	b.n	800e904 <_svfiprintf_r+0x194>
 800e922:	ab03      	add	r3, sp, #12
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	462a      	mov	r2, r5
 800e928:	4b0f      	ldr	r3, [pc, #60]	; (800e968 <_svfiprintf_r+0x1f8>)
 800e92a:	a904      	add	r1, sp, #16
 800e92c:	4638      	mov	r0, r7
 800e92e:	f7fd fe3f 	bl	800c5b0 <_printf_float>
 800e932:	1c42      	adds	r2, r0, #1
 800e934:	4606      	mov	r6, r0
 800e936:	d1d6      	bne.n	800e8e6 <_svfiprintf_r+0x176>
 800e938:	89ab      	ldrh	r3, [r5, #12]
 800e93a:	065b      	lsls	r3, r3, #25
 800e93c:	f53f af2c 	bmi.w	800e798 <_svfiprintf_r+0x28>
 800e940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e942:	b01d      	add	sp, #116	; 0x74
 800e944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e948:	ab03      	add	r3, sp, #12
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	462a      	mov	r2, r5
 800e94e:	4b06      	ldr	r3, [pc, #24]	; (800e968 <_svfiprintf_r+0x1f8>)
 800e950:	a904      	add	r1, sp, #16
 800e952:	4638      	mov	r0, r7
 800e954:	f7fe f8d0 	bl	800caf8 <_printf_i>
 800e958:	e7eb      	b.n	800e932 <_svfiprintf_r+0x1c2>
 800e95a:	bf00      	nop
 800e95c:	0801425c 	.word	0x0801425c
 800e960:	08014266 	.word	0x08014266
 800e964:	0800c5b1 	.word	0x0800c5b1
 800e968:	0800e6b9 	.word	0x0800e6b9
 800e96c:	08014262 	.word	0x08014262

0800e970 <__sfputc_r>:
 800e970:	6893      	ldr	r3, [r2, #8]
 800e972:	3b01      	subs	r3, #1
 800e974:	2b00      	cmp	r3, #0
 800e976:	b410      	push	{r4}
 800e978:	6093      	str	r3, [r2, #8]
 800e97a:	da08      	bge.n	800e98e <__sfputc_r+0x1e>
 800e97c:	6994      	ldr	r4, [r2, #24]
 800e97e:	42a3      	cmp	r3, r4
 800e980:	db01      	blt.n	800e986 <__sfputc_r+0x16>
 800e982:	290a      	cmp	r1, #10
 800e984:	d103      	bne.n	800e98e <__sfputc_r+0x1e>
 800e986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e98a:	f7fe bb15 	b.w	800cfb8 <__swbuf_r>
 800e98e:	6813      	ldr	r3, [r2, #0]
 800e990:	1c58      	adds	r0, r3, #1
 800e992:	6010      	str	r0, [r2, #0]
 800e994:	7019      	strb	r1, [r3, #0]
 800e996:	4608      	mov	r0, r1
 800e998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <__sfputs_r>:
 800e99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	460f      	mov	r7, r1
 800e9a4:	4614      	mov	r4, r2
 800e9a6:	18d5      	adds	r5, r2, r3
 800e9a8:	42ac      	cmp	r4, r5
 800e9aa:	d101      	bne.n	800e9b0 <__sfputs_r+0x12>
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	e007      	b.n	800e9c0 <__sfputs_r+0x22>
 800e9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b4:	463a      	mov	r2, r7
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f7ff ffda 	bl	800e970 <__sfputc_r>
 800e9bc:	1c43      	adds	r3, r0, #1
 800e9be:	d1f3      	bne.n	800e9a8 <__sfputs_r+0xa>
 800e9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9c4 <_vfiprintf_r>:
 800e9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c8:	460d      	mov	r5, r1
 800e9ca:	b09d      	sub	sp, #116	; 0x74
 800e9cc:	4614      	mov	r4, r2
 800e9ce:	4698      	mov	r8, r3
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	b118      	cbz	r0, 800e9dc <_vfiprintf_r+0x18>
 800e9d4:	6983      	ldr	r3, [r0, #24]
 800e9d6:	b90b      	cbnz	r3, 800e9dc <_vfiprintf_r+0x18>
 800e9d8:	f7fd fb64 	bl	800c0a4 <__sinit>
 800e9dc:	4b89      	ldr	r3, [pc, #548]	; (800ec04 <_vfiprintf_r+0x240>)
 800e9de:	429d      	cmp	r5, r3
 800e9e0:	d11b      	bne.n	800ea1a <_vfiprintf_r+0x56>
 800e9e2:	6875      	ldr	r5, [r6, #4]
 800e9e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9e6:	07d9      	lsls	r1, r3, #31
 800e9e8:	d405      	bmi.n	800e9f6 <_vfiprintf_r+0x32>
 800e9ea:	89ab      	ldrh	r3, [r5, #12]
 800e9ec:	059a      	lsls	r2, r3, #22
 800e9ee:	d402      	bmi.n	800e9f6 <_vfiprintf_r+0x32>
 800e9f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9f2:	f7fd fc1a 	bl	800c22a <__retarget_lock_acquire_recursive>
 800e9f6:	89ab      	ldrh	r3, [r5, #12]
 800e9f8:	071b      	lsls	r3, r3, #28
 800e9fa:	d501      	bpl.n	800ea00 <_vfiprintf_r+0x3c>
 800e9fc:	692b      	ldr	r3, [r5, #16]
 800e9fe:	b9eb      	cbnz	r3, 800ea3c <_vfiprintf_r+0x78>
 800ea00:	4629      	mov	r1, r5
 800ea02:	4630      	mov	r0, r6
 800ea04:	f7fe fb3c 	bl	800d080 <__swsetup_r>
 800ea08:	b1c0      	cbz	r0, 800ea3c <_vfiprintf_r+0x78>
 800ea0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea0c:	07dc      	lsls	r4, r3, #31
 800ea0e:	d50e      	bpl.n	800ea2e <_vfiprintf_r+0x6a>
 800ea10:	f04f 30ff 	mov.w	r0, #4294967295
 800ea14:	b01d      	add	sp, #116	; 0x74
 800ea16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1a:	4b7b      	ldr	r3, [pc, #492]	; (800ec08 <_vfiprintf_r+0x244>)
 800ea1c:	429d      	cmp	r5, r3
 800ea1e:	d101      	bne.n	800ea24 <_vfiprintf_r+0x60>
 800ea20:	68b5      	ldr	r5, [r6, #8]
 800ea22:	e7df      	b.n	800e9e4 <_vfiprintf_r+0x20>
 800ea24:	4b79      	ldr	r3, [pc, #484]	; (800ec0c <_vfiprintf_r+0x248>)
 800ea26:	429d      	cmp	r5, r3
 800ea28:	bf08      	it	eq
 800ea2a:	68f5      	ldreq	r5, [r6, #12]
 800ea2c:	e7da      	b.n	800e9e4 <_vfiprintf_r+0x20>
 800ea2e:	89ab      	ldrh	r3, [r5, #12]
 800ea30:	0598      	lsls	r0, r3, #22
 800ea32:	d4ed      	bmi.n	800ea10 <_vfiprintf_r+0x4c>
 800ea34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea36:	f7fd fbf9 	bl	800c22c <__retarget_lock_release_recursive>
 800ea3a:	e7e9      	b.n	800ea10 <_vfiprintf_r+0x4c>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ea40:	2320      	movs	r3, #32
 800ea42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea4a:	2330      	movs	r3, #48	; 0x30
 800ea4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ec10 <_vfiprintf_r+0x24c>
 800ea50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea54:	f04f 0901 	mov.w	r9, #1
 800ea58:	4623      	mov	r3, r4
 800ea5a:	469a      	mov	sl, r3
 800ea5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea60:	b10a      	cbz	r2, 800ea66 <_vfiprintf_r+0xa2>
 800ea62:	2a25      	cmp	r2, #37	; 0x25
 800ea64:	d1f9      	bne.n	800ea5a <_vfiprintf_r+0x96>
 800ea66:	ebba 0b04 	subs.w	fp, sl, r4
 800ea6a:	d00b      	beq.n	800ea84 <_vfiprintf_r+0xc0>
 800ea6c:	465b      	mov	r3, fp
 800ea6e:	4622      	mov	r2, r4
 800ea70:	4629      	mov	r1, r5
 800ea72:	4630      	mov	r0, r6
 800ea74:	f7ff ff93 	bl	800e99e <__sfputs_r>
 800ea78:	3001      	adds	r0, #1
 800ea7a:	f000 80aa 	beq.w	800ebd2 <_vfiprintf_r+0x20e>
 800ea7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea80:	445a      	add	r2, fp
 800ea82:	9209      	str	r2, [sp, #36]	; 0x24
 800ea84:	f89a 3000 	ldrb.w	r3, [sl]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f000 80a2 	beq.w	800ebd2 <_vfiprintf_r+0x20e>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	f04f 32ff 	mov.w	r2, #4294967295
 800ea94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea98:	f10a 0a01 	add.w	sl, sl, #1
 800ea9c:	9304      	str	r3, [sp, #16]
 800ea9e:	9307      	str	r3, [sp, #28]
 800eaa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaa4:	931a      	str	r3, [sp, #104]	; 0x68
 800eaa6:	4654      	mov	r4, sl
 800eaa8:	2205      	movs	r2, #5
 800eaaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaae:	4858      	ldr	r0, [pc, #352]	; (800ec10 <_vfiprintf_r+0x24c>)
 800eab0:	f7f1 fb6e 	bl	8000190 <memchr>
 800eab4:	9a04      	ldr	r2, [sp, #16]
 800eab6:	b9d8      	cbnz	r0, 800eaf0 <_vfiprintf_r+0x12c>
 800eab8:	06d1      	lsls	r1, r2, #27
 800eaba:	bf44      	itt	mi
 800eabc:	2320      	movmi	r3, #32
 800eabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac2:	0713      	lsls	r3, r2, #28
 800eac4:	bf44      	itt	mi
 800eac6:	232b      	movmi	r3, #43	; 0x2b
 800eac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eacc:	f89a 3000 	ldrb.w	r3, [sl]
 800ead0:	2b2a      	cmp	r3, #42	; 0x2a
 800ead2:	d015      	beq.n	800eb00 <_vfiprintf_r+0x13c>
 800ead4:	9a07      	ldr	r2, [sp, #28]
 800ead6:	4654      	mov	r4, sl
 800ead8:	2000      	movs	r0, #0
 800eada:	f04f 0c0a 	mov.w	ip, #10
 800eade:	4621      	mov	r1, r4
 800eae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eae4:	3b30      	subs	r3, #48	; 0x30
 800eae6:	2b09      	cmp	r3, #9
 800eae8:	d94e      	bls.n	800eb88 <_vfiprintf_r+0x1c4>
 800eaea:	b1b0      	cbz	r0, 800eb1a <_vfiprintf_r+0x156>
 800eaec:	9207      	str	r2, [sp, #28]
 800eaee:	e014      	b.n	800eb1a <_vfiprintf_r+0x156>
 800eaf0:	eba0 0308 	sub.w	r3, r0, r8
 800eaf4:	fa09 f303 	lsl.w	r3, r9, r3
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	9304      	str	r3, [sp, #16]
 800eafc:	46a2      	mov	sl, r4
 800eafe:	e7d2      	b.n	800eaa6 <_vfiprintf_r+0xe2>
 800eb00:	9b03      	ldr	r3, [sp, #12]
 800eb02:	1d19      	adds	r1, r3, #4
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	9103      	str	r1, [sp, #12]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	bfbb      	ittet	lt
 800eb0c:	425b      	neglt	r3, r3
 800eb0e:	f042 0202 	orrlt.w	r2, r2, #2
 800eb12:	9307      	strge	r3, [sp, #28]
 800eb14:	9307      	strlt	r3, [sp, #28]
 800eb16:	bfb8      	it	lt
 800eb18:	9204      	strlt	r2, [sp, #16]
 800eb1a:	7823      	ldrb	r3, [r4, #0]
 800eb1c:	2b2e      	cmp	r3, #46	; 0x2e
 800eb1e:	d10c      	bne.n	800eb3a <_vfiprintf_r+0x176>
 800eb20:	7863      	ldrb	r3, [r4, #1]
 800eb22:	2b2a      	cmp	r3, #42	; 0x2a
 800eb24:	d135      	bne.n	800eb92 <_vfiprintf_r+0x1ce>
 800eb26:	9b03      	ldr	r3, [sp, #12]
 800eb28:	1d1a      	adds	r2, r3, #4
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	9203      	str	r2, [sp, #12]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	bfb8      	it	lt
 800eb32:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb36:	3402      	adds	r4, #2
 800eb38:	9305      	str	r3, [sp, #20]
 800eb3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec20 <_vfiprintf_r+0x25c>
 800eb3e:	7821      	ldrb	r1, [r4, #0]
 800eb40:	2203      	movs	r2, #3
 800eb42:	4650      	mov	r0, sl
 800eb44:	f7f1 fb24 	bl	8000190 <memchr>
 800eb48:	b140      	cbz	r0, 800eb5c <_vfiprintf_r+0x198>
 800eb4a:	2340      	movs	r3, #64	; 0x40
 800eb4c:	eba0 000a 	sub.w	r0, r0, sl
 800eb50:	fa03 f000 	lsl.w	r0, r3, r0
 800eb54:	9b04      	ldr	r3, [sp, #16]
 800eb56:	4303      	orrs	r3, r0
 800eb58:	3401      	adds	r4, #1
 800eb5a:	9304      	str	r3, [sp, #16]
 800eb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb60:	482c      	ldr	r0, [pc, #176]	; (800ec14 <_vfiprintf_r+0x250>)
 800eb62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb66:	2206      	movs	r2, #6
 800eb68:	f7f1 fb12 	bl	8000190 <memchr>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d03f      	beq.n	800ebf0 <_vfiprintf_r+0x22c>
 800eb70:	4b29      	ldr	r3, [pc, #164]	; (800ec18 <_vfiprintf_r+0x254>)
 800eb72:	bb1b      	cbnz	r3, 800ebbc <_vfiprintf_r+0x1f8>
 800eb74:	9b03      	ldr	r3, [sp, #12]
 800eb76:	3307      	adds	r3, #7
 800eb78:	f023 0307 	bic.w	r3, r3, #7
 800eb7c:	3308      	adds	r3, #8
 800eb7e:	9303      	str	r3, [sp, #12]
 800eb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb82:	443b      	add	r3, r7
 800eb84:	9309      	str	r3, [sp, #36]	; 0x24
 800eb86:	e767      	b.n	800ea58 <_vfiprintf_r+0x94>
 800eb88:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	2001      	movs	r0, #1
 800eb90:	e7a5      	b.n	800eade <_vfiprintf_r+0x11a>
 800eb92:	2300      	movs	r3, #0
 800eb94:	3401      	adds	r4, #1
 800eb96:	9305      	str	r3, [sp, #20]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	f04f 0c0a 	mov.w	ip, #10
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eba4:	3a30      	subs	r2, #48	; 0x30
 800eba6:	2a09      	cmp	r2, #9
 800eba8:	d903      	bls.n	800ebb2 <_vfiprintf_r+0x1ee>
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d0c5      	beq.n	800eb3a <_vfiprintf_r+0x176>
 800ebae:	9105      	str	r1, [sp, #20]
 800ebb0:	e7c3      	b.n	800eb3a <_vfiprintf_r+0x176>
 800ebb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e7f0      	b.n	800eb9e <_vfiprintf_r+0x1da>
 800ebbc:	ab03      	add	r3, sp, #12
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	462a      	mov	r2, r5
 800ebc2:	4b16      	ldr	r3, [pc, #88]	; (800ec1c <_vfiprintf_r+0x258>)
 800ebc4:	a904      	add	r1, sp, #16
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f7fd fcf2 	bl	800c5b0 <_printf_float>
 800ebcc:	4607      	mov	r7, r0
 800ebce:	1c78      	adds	r0, r7, #1
 800ebd0:	d1d6      	bne.n	800eb80 <_vfiprintf_r+0x1bc>
 800ebd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebd4:	07d9      	lsls	r1, r3, #31
 800ebd6:	d405      	bmi.n	800ebe4 <_vfiprintf_r+0x220>
 800ebd8:	89ab      	ldrh	r3, [r5, #12]
 800ebda:	059a      	lsls	r2, r3, #22
 800ebdc:	d402      	bmi.n	800ebe4 <_vfiprintf_r+0x220>
 800ebde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebe0:	f7fd fb24 	bl	800c22c <__retarget_lock_release_recursive>
 800ebe4:	89ab      	ldrh	r3, [r5, #12]
 800ebe6:	065b      	lsls	r3, r3, #25
 800ebe8:	f53f af12 	bmi.w	800ea10 <_vfiprintf_r+0x4c>
 800ebec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebee:	e711      	b.n	800ea14 <_vfiprintf_r+0x50>
 800ebf0:	ab03      	add	r3, sp, #12
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	462a      	mov	r2, r5
 800ebf6:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <_vfiprintf_r+0x258>)
 800ebf8:	a904      	add	r1, sp, #16
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f7fd ff7c 	bl	800caf8 <_printf_i>
 800ec00:	e7e4      	b.n	800ebcc <_vfiprintf_r+0x208>
 800ec02:	bf00      	nop
 800ec04:	08013ffc 	.word	0x08013ffc
 800ec08:	0801401c 	.word	0x0801401c
 800ec0c:	08013fdc 	.word	0x08013fdc
 800ec10:	0801425c 	.word	0x0801425c
 800ec14:	08014266 	.word	0x08014266
 800ec18:	0800c5b1 	.word	0x0800c5b1
 800ec1c:	0800e99f 	.word	0x0800e99f
 800ec20:	08014262 	.word	0x08014262

0800ec24 <_read_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4d07      	ldr	r5, [pc, #28]	; (800ec44 <_read_r+0x20>)
 800ec28:	4604      	mov	r4, r0
 800ec2a:	4608      	mov	r0, r1
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	2200      	movs	r2, #0
 800ec30:	602a      	str	r2, [r5, #0]
 800ec32:	461a      	mov	r2, r3
 800ec34:	f7f2 ff1c 	bl	8001a70 <_read>
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	d102      	bne.n	800ec42 <_read_r+0x1e>
 800ec3c:	682b      	ldr	r3, [r5, #0]
 800ec3e:	b103      	cbz	r3, 800ec42 <_read_r+0x1e>
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	bd38      	pop	{r3, r4, r5, pc}
 800ec44:	200007ac 	.word	0x200007ac

0800ec48 <__assert_func>:
 800ec48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec4a:	4614      	mov	r4, r2
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4b09      	ldr	r3, [pc, #36]	; (800ec74 <__assert_func+0x2c>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4605      	mov	r5, r0
 800ec54:	68d8      	ldr	r0, [r3, #12]
 800ec56:	b14c      	cbz	r4, 800ec6c <__assert_func+0x24>
 800ec58:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <__assert_func+0x30>)
 800ec5a:	9100      	str	r1, [sp, #0]
 800ec5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec60:	4906      	ldr	r1, [pc, #24]	; (800ec7c <__assert_func+0x34>)
 800ec62:	462b      	mov	r3, r5
 800ec64:	f000 f80e 	bl	800ec84 <fiprintf>
 800ec68:	f000 f88e 	bl	800ed88 <abort>
 800ec6c:	4b04      	ldr	r3, [pc, #16]	; (800ec80 <__assert_func+0x38>)
 800ec6e:	461c      	mov	r4, r3
 800ec70:	e7f3      	b.n	800ec5a <__assert_func+0x12>
 800ec72:	bf00      	nop
 800ec74:	20000134 	.word	0x20000134
 800ec78:	0801426d 	.word	0x0801426d
 800ec7c:	0801427a 	.word	0x0801427a
 800ec80:	080142a8 	.word	0x080142a8

0800ec84 <fiprintf>:
 800ec84:	b40e      	push	{r1, r2, r3}
 800ec86:	b503      	push	{r0, r1, lr}
 800ec88:	4601      	mov	r1, r0
 800ec8a:	ab03      	add	r3, sp, #12
 800ec8c:	4805      	ldr	r0, [pc, #20]	; (800eca4 <fiprintf+0x20>)
 800ec8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec92:	6800      	ldr	r0, [r0, #0]
 800ec94:	9301      	str	r3, [sp, #4]
 800ec96:	f7ff fe95 	bl	800e9c4 <_vfiprintf_r>
 800ec9a:	b002      	add	sp, #8
 800ec9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eca0:	b003      	add	sp, #12
 800eca2:	4770      	bx	lr
 800eca4:	20000134 	.word	0x20000134

0800eca8 <_fstat_r>:
 800eca8:	b538      	push	{r3, r4, r5, lr}
 800ecaa:	4d07      	ldr	r5, [pc, #28]	; (800ecc8 <_fstat_r+0x20>)
 800ecac:	2300      	movs	r3, #0
 800ecae:	4604      	mov	r4, r0
 800ecb0:	4608      	mov	r0, r1
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	602b      	str	r3, [r5, #0]
 800ecb6:	f7f2 ff20 	bl	8001afa <_fstat>
 800ecba:	1c43      	adds	r3, r0, #1
 800ecbc:	d102      	bne.n	800ecc4 <_fstat_r+0x1c>
 800ecbe:	682b      	ldr	r3, [r5, #0]
 800ecc0:	b103      	cbz	r3, 800ecc4 <_fstat_r+0x1c>
 800ecc2:	6023      	str	r3, [r4, #0]
 800ecc4:	bd38      	pop	{r3, r4, r5, pc}
 800ecc6:	bf00      	nop
 800ecc8:	200007ac 	.word	0x200007ac

0800eccc <_isatty_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	4d06      	ldr	r5, [pc, #24]	; (800ece8 <_isatty_r+0x1c>)
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	4608      	mov	r0, r1
 800ecd6:	602b      	str	r3, [r5, #0]
 800ecd8:	f7f2 ff1f 	bl	8001b1a <_isatty>
 800ecdc:	1c43      	adds	r3, r0, #1
 800ecde:	d102      	bne.n	800ece6 <_isatty_r+0x1a>
 800ece0:	682b      	ldr	r3, [r5, #0]
 800ece2:	b103      	cbz	r3, 800ece6 <_isatty_r+0x1a>
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	bd38      	pop	{r3, r4, r5, pc}
 800ece8:	200007ac 	.word	0x200007ac

0800ecec <__ascii_mbtowc>:
 800ecec:	b082      	sub	sp, #8
 800ecee:	b901      	cbnz	r1, 800ecf2 <__ascii_mbtowc+0x6>
 800ecf0:	a901      	add	r1, sp, #4
 800ecf2:	b142      	cbz	r2, 800ed06 <__ascii_mbtowc+0x1a>
 800ecf4:	b14b      	cbz	r3, 800ed0a <__ascii_mbtowc+0x1e>
 800ecf6:	7813      	ldrb	r3, [r2, #0]
 800ecf8:	600b      	str	r3, [r1, #0]
 800ecfa:	7812      	ldrb	r2, [r2, #0]
 800ecfc:	1e10      	subs	r0, r2, #0
 800ecfe:	bf18      	it	ne
 800ed00:	2001      	movne	r0, #1
 800ed02:	b002      	add	sp, #8
 800ed04:	4770      	bx	lr
 800ed06:	4610      	mov	r0, r2
 800ed08:	e7fb      	b.n	800ed02 <__ascii_mbtowc+0x16>
 800ed0a:	f06f 0001 	mvn.w	r0, #1
 800ed0e:	e7f8      	b.n	800ed02 <__ascii_mbtowc+0x16>

0800ed10 <_realloc_r>:
 800ed10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed14:	4680      	mov	r8, r0
 800ed16:	4614      	mov	r4, r2
 800ed18:	460e      	mov	r6, r1
 800ed1a:	b921      	cbnz	r1, 800ed26 <_realloc_r+0x16>
 800ed1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed20:	4611      	mov	r1, r2
 800ed22:	f7fd bb31 	b.w	800c388 <_malloc_r>
 800ed26:	b92a      	cbnz	r2, 800ed34 <_realloc_r+0x24>
 800ed28:	f7fd fac2 	bl	800c2b0 <_free_r>
 800ed2c:	4625      	mov	r5, r4
 800ed2e:	4628      	mov	r0, r5
 800ed30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed34:	f000 f82f 	bl	800ed96 <_malloc_usable_size_r>
 800ed38:	4284      	cmp	r4, r0
 800ed3a:	4607      	mov	r7, r0
 800ed3c:	d802      	bhi.n	800ed44 <_realloc_r+0x34>
 800ed3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed42:	d812      	bhi.n	800ed6a <_realloc_r+0x5a>
 800ed44:	4621      	mov	r1, r4
 800ed46:	4640      	mov	r0, r8
 800ed48:	f7fd fb1e 	bl	800c388 <_malloc_r>
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d0ed      	beq.n	800ed2e <_realloc_r+0x1e>
 800ed52:	42bc      	cmp	r4, r7
 800ed54:	4622      	mov	r2, r4
 800ed56:	4631      	mov	r1, r6
 800ed58:	bf28      	it	cs
 800ed5a:	463a      	movcs	r2, r7
 800ed5c:	f7fd fa78 	bl	800c250 <memcpy>
 800ed60:	4631      	mov	r1, r6
 800ed62:	4640      	mov	r0, r8
 800ed64:	f7fd faa4 	bl	800c2b0 <_free_r>
 800ed68:	e7e1      	b.n	800ed2e <_realloc_r+0x1e>
 800ed6a:	4635      	mov	r5, r6
 800ed6c:	e7df      	b.n	800ed2e <_realloc_r+0x1e>

0800ed6e <__ascii_wctomb>:
 800ed6e:	b149      	cbz	r1, 800ed84 <__ascii_wctomb+0x16>
 800ed70:	2aff      	cmp	r2, #255	; 0xff
 800ed72:	bf85      	ittet	hi
 800ed74:	238a      	movhi	r3, #138	; 0x8a
 800ed76:	6003      	strhi	r3, [r0, #0]
 800ed78:	700a      	strbls	r2, [r1, #0]
 800ed7a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed7e:	bf98      	it	ls
 800ed80:	2001      	movls	r0, #1
 800ed82:	4770      	bx	lr
 800ed84:	4608      	mov	r0, r1
 800ed86:	4770      	bx	lr

0800ed88 <abort>:
 800ed88:	b508      	push	{r3, lr}
 800ed8a:	2006      	movs	r0, #6
 800ed8c:	f000 f834 	bl	800edf8 <raise>
 800ed90:	2001      	movs	r0, #1
 800ed92:	f7f2 fe63 	bl	8001a5c <_exit>

0800ed96 <_malloc_usable_size_r>:
 800ed96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed9a:	1f18      	subs	r0, r3, #4
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	bfbc      	itt	lt
 800eda0:	580b      	ldrlt	r3, [r1, r0]
 800eda2:	18c0      	addlt	r0, r0, r3
 800eda4:	4770      	bx	lr

0800eda6 <_raise_r>:
 800eda6:	291f      	cmp	r1, #31
 800eda8:	b538      	push	{r3, r4, r5, lr}
 800edaa:	4604      	mov	r4, r0
 800edac:	460d      	mov	r5, r1
 800edae:	d904      	bls.n	800edba <_raise_r+0x14>
 800edb0:	2316      	movs	r3, #22
 800edb2:	6003      	str	r3, [r0, #0]
 800edb4:	f04f 30ff 	mov.w	r0, #4294967295
 800edb8:	bd38      	pop	{r3, r4, r5, pc}
 800edba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edbc:	b112      	cbz	r2, 800edc4 <_raise_r+0x1e>
 800edbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edc2:	b94b      	cbnz	r3, 800edd8 <_raise_r+0x32>
 800edc4:	4620      	mov	r0, r4
 800edc6:	f000 f831 	bl	800ee2c <_getpid_r>
 800edca:	462a      	mov	r2, r5
 800edcc:	4601      	mov	r1, r0
 800edce:	4620      	mov	r0, r4
 800edd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edd4:	f000 b818 	b.w	800ee08 <_kill_r>
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d00a      	beq.n	800edf2 <_raise_r+0x4c>
 800eddc:	1c59      	adds	r1, r3, #1
 800edde:	d103      	bne.n	800ede8 <_raise_r+0x42>
 800ede0:	2316      	movs	r3, #22
 800ede2:	6003      	str	r3, [r0, #0]
 800ede4:	2001      	movs	r0, #1
 800ede6:	e7e7      	b.n	800edb8 <_raise_r+0x12>
 800ede8:	2400      	movs	r4, #0
 800edea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edee:	4628      	mov	r0, r5
 800edf0:	4798      	blx	r3
 800edf2:	2000      	movs	r0, #0
 800edf4:	e7e0      	b.n	800edb8 <_raise_r+0x12>
	...

0800edf8 <raise>:
 800edf8:	4b02      	ldr	r3, [pc, #8]	; (800ee04 <raise+0xc>)
 800edfa:	4601      	mov	r1, r0
 800edfc:	6818      	ldr	r0, [r3, #0]
 800edfe:	f7ff bfd2 	b.w	800eda6 <_raise_r>
 800ee02:	bf00      	nop
 800ee04:	20000134 	.word	0x20000134

0800ee08 <_kill_r>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4d07      	ldr	r5, [pc, #28]	; (800ee28 <_kill_r+0x20>)
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	4604      	mov	r4, r0
 800ee10:	4608      	mov	r0, r1
 800ee12:	4611      	mov	r1, r2
 800ee14:	602b      	str	r3, [r5, #0]
 800ee16:	f7f2 fe11 	bl	8001a3c <_kill>
 800ee1a:	1c43      	adds	r3, r0, #1
 800ee1c:	d102      	bne.n	800ee24 <_kill_r+0x1c>
 800ee1e:	682b      	ldr	r3, [r5, #0]
 800ee20:	b103      	cbz	r3, 800ee24 <_kill_r+0x1c>
 800ee22:	6023      	str	r3, [r4, #0]
 800ee24:	bd38      	pop	{r3, r4, r5, pc}
 800ee26:	bf00      	nop
 800ee28:	200007ac 	.word	0x200007ac

0800ee2c <_getpid_r>:
 800ee2c:	f7f2 bdfe 	b.w	8001a2c <_getpid>

0800ee30 <fmaxf>:
 800ee30:	b508      	push	{r3, lr}
 800ee32:	ed2d 8b02 	vpush	{d8}
 800ee36:	eeb0 8a40 	vmov.f32	s16, s0
 800ee3a:	eef0 8a60 	vmov.f32	s17, s1
 800ee3e:	f000 f82d 	bl	800ee9c <__fpclassifyf>
 800ee42:	b148      	cbz	r0, 800ee58 <fmaxf+0x28>
 800ee44:	eeb0 0a68 	vmov.f32	s0, s17
 800ee48:	f000 f828 	bl	800ee9c <__fpclassifyf>
 800ee4c:	b130      	cbz	r0, 800ee5c <fmaxf+0x2c>
 800ee4e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ee52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee56:	dc01      	bgt.n	800ee5c <fmaxf+0x2c>
 800ee58:	eeb0 8a68 	vmov.f32	s16, s17
 800ee5c:	eeb0 0a48 	vmov.f32	s0, s16
 800ee60:	ecbd 8b02 	vpop	{d8}
 800ee64:	bd08      	pop	{r3, pc}

0800ee66 <fminf>:
 800ee66:	b508      	push	{r3, lr}
 800ee68:	ed2d 8b02 	vpush	{d8}
 800ee6c:	eeb0 8a40 	vmov.f32	s16, s0
 800ee70:	eef0 8a60 	vmov.f32	s17, s1
 800ee74:	f000 f812 	bl	800ee9c <__fpclassifyf>
 800ee78:	b148      	cbz	r0, 800ee8e <fminf+0x28>
 800ee7a:	eeb0 0a68 	vmov.f32	s0, s17
 800ee7e:	f000 f80d 	bl	800ee9c <__fpclassifyf>
 800ee82:	b130      	cbz	r0, 800ee92 <fminf+0x2c>
 800ee84:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ee88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8c:	d401      	bmi.n	800ee92 <fminf+0x2c>
 800ee8e:	eeb0 8a68 	vmov.f32	s16, s17
 800ee92:	eeb0 0a48 	vmov.f32	s0, s16
 800ee96:	ecbd 8b02 	vpop	{d8}
 800ee9a:	bd08      	pop	{r3, pc}

0800ee9c <__fpclassifyf>:
 800ee9c:	ee10 3a10 	vmov	r3, s0
 800eea0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800eea4:	d00d      	beq.n	800eec2 <__fpclassifyf+0x26>
 800eea6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800eeaa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800eeae:	d30a      	bcc.n	800eec6 <__fpclassifyf+0x2a>
 800eeb0:	4b07      	ldr	r3, [pc, #28]	; (800eed0 <__fpclassifyf+0x34>)
 800eeb2:	1e42      	subs	r2, r0, #1
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d908      	bls.n	800eeca <__fpclassifyf+0x2e>
 800eeb8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800eebc:	4258      	negs	r0, r3
 800eebe:	4158      	adcs	r0, r3
 800eec0:	4770      	bx	lr
 800eec2:	2002      	movs	r0, #2
 800eec4:	4770      	bx	lr
 800eec6:	2004      	movs	r0, #4
 800eec8:	4770      	bx	lr
 800eeca:	2003      	movs	r0, #3
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	007ffffe 	.word	0x007ffffe

0800eed4 <roundf>:
 800eed4:	ee10 0a10 	vmov	r0, s0
 800eed8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800eedc:	3a7f      	subs	r2, #127	; 0x7f
 800eede:	2a16      	cmp	r2, #22
 800eee0:	dc15      	bgt.n	800ef0e <roundf+0x3a>
 800eee2:	2a00      	cmp	r2, #0
 800eee4:	da08      	bge.n	800eef8 <roundf+0x24>
 800eee6:	3201      	adds	r2, #1
 800eee8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800eeec:	d101      	bne.n	800eef2 <roundf+0x1e>
 800eeee:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800eef2:	ee00 3a10 	vmov	s0, r3
 800eef6:	4770      	bx	lr
 800eef8:	4907      	ldr	r1, [pc, #28]	; (800ef18 <roundf+0x44>)
 800eefa:	4111      	asrs	r1, r2
 800eefc:	4208      	tst	r0, r1
 800eefe:	d0fa      	beq.n	800eef6 <roundf+0x22>
 800ef00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ef04:	4113      	asrs	r3, r2
 800ef06:	4403      	add	r3, r0
 800ef08:	ea23 0301 	bic.w	r3, r3, r1
 800ef0c:	e7f1      	b.n	800eef2 <roundf+0x1e>
 800ef0e:	2a80      	cmp	r2, #128	; 0x80
 800ef10:	d1f1      	bne.n	800eef6 <roundf+0x22>
 800ef12:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ef16:	4770      	bx	lr
 800ef18:	007fffff 	.word	0x007fffff

0800ef1c <expf>:
 800ef1c:	b508      	push	{r3, lr}
 800ef1e:	ed2d 8b02 	vpush	{d8}
 800ef22:	eef0 8a40 	vmov.f32	s17, s0
 800ef26:	f000 f85d 	bl	800efe4 <__ieee754_expf>
 800ef2a:	eeb0 8a40 	vmov.f32	s16, s0
 800ef2e:	eeb0 0a68 	vmov.f32	s0, s17
 800ef32:	f000 f99f 	bl	800f274 <finitef>
 800ef36:	b160      	cbz	r0, 800ef52 <expf+0x36>
 800ef38:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ef78 <expf+0x5c>
 800ef3c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ef40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef44:	dd0a      	ble.n	800ef5c <expf+0x40>
 800ef46:	f7fc ff7b 	bl	800be40 <__errno>
 800ef4a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800ef7c <expf+0x60>
 800ef4e:	2322      	movs	r3, #34	; 0x22
 800ef50:	6003      	str	r3, [r0, #0]
 800ef52:	eeb0 0a48 	vmov.f32	s0, s16
 800ef56:	ecbd 8b02 	vpop	{d8}
 800ef5a:	bd08      	pop	{r3, pc}
 800ef5c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ef80 <expf+0x64>
 800ef60:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ef64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef68:	d5f3      	bpl.n	800ef52 <expf+0x36>
 800ef6a:	f7fc ff69 	bl	800be40 <__errno>
 800ef6e:	2322      	movs	r3, #34	; 0x22
 800ef70:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800ef84 <expf+0x68>
 800ef74:	6003      	str	r3, [r0, #0]
 800ef76:	e7ec      	b.n	800ef52 <expf+0x36>
 800ef78:	42b17180 	.word	0x42b17180
 800ef7c:	7f800000 	.word	0x7f800000
 800ef80:	c2cff1b5 	.word	0xc2cff1b5
 800ef84:	00000000 	.word	0x00000000

0800ef88 <log10f>:
 800ef88:	b508      	push	{r3, lr}
 800ef8a:	ed2d 8b02 	vpush	{d8}
 800ef8e:	eeb0 8a40 	vmov.f32	s16, s0
 800ef92:	f000 f8f5 	bl	800f180 <__ieee754_log10f>
 800ef96:	eeb4 8a48 	vcmp.f32	s16, s16
 800ef9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9e:	d60f      	bvs.n	800efc0 <log10f+0x38>
 800efa0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800efa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa8:	d80a      	bhi.n	800efc0 <log10f+0x38>
 800efaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	d108      	bne.n	800efc6 <log10f+0x3e>
 800efb4:	f7fc ff44 	bl	800be40 <__errno>
 800efb8:	2322      	movs	r3, #34	; 0x22
 800efba:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800efdc <log10f+0x54>
 800efbe:	6003      	str	r3, [r0, #0]
 800efc0:	ecbd 8b02 	vpop	{d8}
 800efc4:	bd08      	pop	{r3, pc}
 800efc6:	f7fc ff3b 	bl	800be40 <__errno>
 800efca:	ecbd 8b02 	vpop	{d8}
 800efce:	2321      	movs	r3, #33	; 0x21
 800efd0:	6003      	str	r3, [r0, #0]
 800efd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800efd6:	4802      	ldr	r0, [pc, #8]	; (800efe0 <log10f+0x58>)
 800efd8:	f000 b95a 	b.w	800f290 <nanf>
 800efdc:	ff800000 	.word	0xff800000
 800efe0:	080142a8 	.word	0x080142a8

0800efe4 <__ieee754_expf>:
 800efe4:	ee10 2a10 	vmov	r2, s0
 800efe8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800efec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eff0:	d902      	bls.n	800eff8 <__ieee754_expf+0x14>
 800eff2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eff6:	4770      	bx	lr
 800eff8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800effc:	d106      	bne.n	800f00c <__ieee754_expf+0x28>
 800effe:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800f138 <__ieee754_expf+0x154>
 800f002:	2b00      	cmp	r3, #0
 800f004:	bf18      	it	ne
 800f006:	eeb0 0a67 	vmovne.f32	s0, s15
 800f00a:	4770      	bx	lr
 800f00c:	484b      	ldr	r0, [pc, #300]	; (800f13c <__ieee754_expf+0x158>)
 800f00e:	4282      	cmp	r2, r0
 800f010:	dd02      	ble.n	800f018 <__ieee754_expf+0x34>
 800f012:	2000      	movs	r0, #0
 800f014:	f000 b928 	b.w	800f268 <__math_oflowf>
 800f018:	2a00      	cmp	r2, #0
 800f01a:	da05      	bge.n	800f028 <__ieee754_expf+0x44>
 800f01c:	4a48      	ldr	r2, [pc, #288]	; (800f140 <__ieee754_expf+0x15c>)
 800f01e:	4291      	cmp	r1, r2
 800f020:	d902      	bls.n	800f028 <__ieee754_expf+0x44>
 800f022:	2000      	movs	r0, #0
 800f024:	f000 b91a 	b.w	800f25c <__math_uflowf>
 800f028:	4a46      	ldr	r2, [pc, #280]	; (800f144 <__ieee754_expf+0x160>)
 800f02a:	4291      	cmp	r1, r2
 800f02c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f030:	d952      	bls.n	800f0d8 <__ieee754_expf+0xf4>
 800f032:	4a45      	ldr	r2, [pc, #276]	; (800f148 <__ieee754_expf+0x164>)
 800f034:	4291      	cmp	r1, r2
 800f036:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f03a:	d834      	bhi.n	800f0a6 <__ieee754_expf+0xc2>
 800f03c:	4943      	ldr	r1, [pc, #268]	; (800f14c <__ieee754_expf+0x168>)
 800f03e:	4411      	add	r1, r2
 800f040:	ed91 7a00 	vldr	s14, [r1]
 800f044:	4942      	ldr	r1, [pc, #264]	; (800f150 <__ieee754_expf+0x16c>)
 800f046:	440a      	add	r2, r1
 800f048:	edd2 7a00 	vldr	s15, [r2]
 800f04c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f050:	f1c3 0201 	rsb	r2, r3, #1
 800f054:	1ad2      	subs	r2, r2, r3
 800f056:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f05a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800f05e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800f154 <__ieee754_expf+0x170>
 800f062:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f158 <__ieee754_expf+0x174>
 800f066:	eee6 6a05 	vfma.f32	s13, s12, s10
 800f06a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800f15c <__ieee754_expf+0x178>
 800f06e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f072:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f160 <__ieee754_expf+0x17c>
 800f076:	eee5 6a06 	vfma.f32	s13, s10, s12
 800f07a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f164 <__ieee754_expf+0x180>
 800f07e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f082:	eef0 6a40 	vmov.f32	s13, s0
 800f086:	eee5 6a46 	vfms.f32	s13, s10, s12
 800f08a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800f08e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800f092:	bb92      	cbnz	r2, 800f0fa <__ieee754_expf+0x116>
 800f094:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f098:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800f09c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f0a0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800f0a4:	4770      	bx	lr
 800f0a6:	4b30      	ldr	r3, [pc, #192]	; (800f168 <__ieee754_expf+0x184>)
 800f0a8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800f16c <__ieee754_expf+0x188>
 800f0ac:	eddf 6a30 	vldr	s13, [pc, #192]	; 800f170 <__ieee754_expf+0x18c>
 800f0b0:	4413      	add	r3, r2
 800f0b2:	edd3 7a00 	vldr	s15, [r3]
 800f0b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f0ba:	eeb0 7a40 	vmov.f32	s14, s0
 800f0be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0c2:	ee17 2a90 	vmov	r2, s15
 800f0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0ca:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f0ce:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f174 <__ieee754_expf+0x190>
 800f0d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f0d6:	e7be      	b.n	800f056 <__ieee754_expf+0x72>
 800f0d8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800f0dc:	d20b      	bcs.n	800f0f6 <__ieee754_expf+0x112>
 800f0de:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f178 <__ieee754_expf+0x194>
 800f0e2:	ee70 6a26 	vadd.f32	s13, s0, s13
 800f0e6:	eef4 6ae5 	vcmpe.f32	s13, s11
 800f0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ee:	dd02      	ble.n	800f0f6 <__ieee754_expf+0x112>
 800f0f0:	ee30 0a25 	vadd.f32	s0, s0, s11
 800f0f4:	4770      	bx	lr
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	e7af      	b.n	800f05a <__ieee754_expf+0x76>
 800f0fa:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f0fe:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800f102:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800f106:	bfb8      	it	lt
 800f108:	3264      	addlt	r2, #100	; 0x64
 800f10a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f10e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f112:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800f116:	ee17 3a90 	vmov	r3, s15
 800f11a:	bfab      	itete	ge
 800f11c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f120:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f124:	ee00 3a10 	vmovge	s0, r3
 800f128:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800f17c <__ieee754_expf+0x198>
 800f12c:	bfbc      	itt	lt
 800f12e:	ee00 3a10 	vmovlt	s0, r3
 800f132:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f136:	4770      	bx	lr
 800f138:	00000000 	.word	0x00000000
 800f13c:	42b17217 	.word	0x42b17217
 800f140:	42cff1b5 	.word	0x42cff1b5
 800f144:	3eb17218 	.word	0x3eb17218
 800f148:	3f851591 	.word	0x3f851591
 800f14c:	080143bc 	.word	0x080143bc
 800f150:	080143c4 	.word	0x080143c4
 800f154:	3331bb4c 	.word	0x3331bb4c
 800f158:	b5ddea0e 	.word	0xb5ddea0e
 800f15c:	388ab355 	.word	0x388ab355
 800f160:	bb360b61 	.word	0xbb360b61
 800f164:	3e2aaaab 	.word	0x3e2aaaab
 800f168:	080143b4 	.word	0x080143b4
 800f16c:	3fb8aa3b 	.word	0x3fb8aa3b
 800f170:	3f317180 	.word	0x3f317180
 800f174:	3717f7d1 	.word	0x3717f7d1
 800f178:	7149f2ca 	.word	0x7149f2ca
 800f17c:	0d800000 	.word	0x0d800000

0800f180 <__ieee754_log10f>:
 800f180:	b508      	push	{r3, lr}
 800f182:	ee10 2a10 	vmov	r2, s0
 800f186:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f18a:	ed2d 8b02 	vpush	{d8}
 800f18e:	d108      	bne.n	800f1a2 <__ieee754_log10f+0x22>
 800f190:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800f218 <__ieee754_log10f+0x98>
 800f194:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f21c <__ieee754_log10f+0x9c>
 800f198:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f19c:	ecbd 8b02 	vpop	{d8}
 800f1a0:	bd08      	pop	{r3, pc}
 800f1a2:	2a00      	cmp	r2, #0
 800f1a4:	da02      	bge.n	800f1ac <__ieee754_log10f+0x2c>
 800f1a6:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f1aa:	e7f3      	b.n	800f194 <__ieee754_log10f+0x14>
 800f1ac:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f1b0:	db02      	blt.n	800f1b8 <__ieee754_log10f+0x38>
 800f1b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f1b6:	e7f1      	b.n	800f19c <__ieee754_log10f+0x1c>
 800f1b8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f1bc:	bfbf      	itttt	lt
 800f1be:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800f220 <__ieee754_log10f+0xa0>
 800f1c2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f1c6:	f06f 0118 	mvnlt.w	r1, #24
 800f1ca:	ee17 2a90 	vmovlt	r2, s15
 800f1ce:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800f1d2:	bfa8      	it	ge
 800f1d4:	2100      	movge	r1, #0
 800f1d6:	3b7f      	subs	r3, #127	; 0x7f
 800f1d8:	440b      	add	r3, r1
 800f1da:	0fd9      	lsrs	r1, r3, #31
 800f1dc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f1e0:	ee07 3a90 	vmov	s15, r3
 800f1e4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f1e8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800f1ec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f1f0:	ee00 3a10 	vmov	s0, r3
 800f1f4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f1f8:	f000 f850 	bl	800f29c <__ieee754_logf>
 800f1fc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f224 <__ieee754_log10f+0xa4>
 800f200:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f204:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f228 <__ieee754_log10f+0xa8>
 800f208:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f20c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f22c <__ieee754_log10f+0xac>
 800f210:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f214:	e7c2      	b.n	800f19c <__ieee754_log10f+0x1c>
 800f216:	bf00      	nop
 800f218:	cc000000 	.word	0xcc000000
 800f21c:	00000000 	.word	0x00000000
 800f220:	4c000000 	.word	0x4c000000
 800f224:	3ede5bd9 	.word	0x3ede5bd9
 800f228:	355427db 	.word	0x355427db
 800f22c:	3e9a2080 	.word	0x3e9a2080

0800f230 <with_errnof>:
 800f230:	b513      	push	{r0, r1, r4, lr}
 800f232:	4604      	mov	r4, r0
 800f234:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f238:	f7fc fe02 	bl	800be40 <__errno>
 800f23c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f240:	6004      	str	r4, [r0, #0]
 800f242:	b002      	add	sp, #8
 800f244:	bd10      	pop	{r4, pc}

0800f246 <xflowf>:
 800f246:	b130      	cbz	r0, 800f256 <xflowf+0x10>
 800f248:	eef1 7a40 	vneg.f32	s15, s0
 800f24c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f250:	2022      	movs	r0, #34	; 0x22
 800f252:	f7ff bfed 	b.w	800f230 <with_errnof>
 800f256:	eef0 7a40 	vmov.f32	s15, s0
 800f25a:	e7f7      	b.n	800f24c <xflowf+0x6>

0800f25c <__math_uflowf>:
 800f25c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f264 <__math_uflowf+0x8>
 800f260:	f7ff bff1 	b.w	800f246 <xflowf>
 800f264:	10000000 	.word	0x10000000

0800f268 <__math_oflowf>:
 800f268:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f270 <__math_oflowf+0x8>
 800f26c:	f7ff bfeb 	b.w	800f246 <xflowf>
 800f270:	70000000 	.word	0x70000000

0800f274 <finitef>:
 800f274:	b082      	sub	sp, #8
 800f276:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f27a:	9801      	ldr	r0, [sp, #4]
 800f27c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f280:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f284:	bfac      	ite	ge
 800f286:	2000      	movge	r0, #0
 800f288:	2001      	movlt	r0, #1
 800f28a:	b002      	add	sp, #8
 800f28c:	4770      	bx	lr
	...

0800f290 <nanf>:
 800f290:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f298 <nanf+0x8>
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	7fc00000 	.word	0x7fc00000

0800f29c <__ieee754_logf>:
 800f29c:	ee10 3a10 	vmov	r3, s0
 800f2a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f2a4:	d106      	bne.n	800f2b4 <__ieee754_logf+0x18>
 800f2a6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f43c <__ieee754_logf+0x1a0>
 800f2aa:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f440 <__ieee754_logf+0x1a4>
 800f2ae:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f2b2:	4770      	bx	lr
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	da02      	bge.n	800f2be <__ieee754_logf+0x22>
 800f2b8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f2bc:	e7f5      	b.n	800f2aa <__ieee754_logf+0xe>
 800f2be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f2c2:	db02      	blt.n	800f2ca <__ieee754_logf+0x2e>
 800f2c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f2c8:	4770      	bx	lr
 800f2ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f2ce:	bfb8      	it	lt
 800f2d0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800f444 <__ieee754_logf+0x1a8>
 800f2d4:	485c      	ldr	r0, [pc, #368]	; (800f448 <__ieee754_logf+0x1ac>)
 800f2d6:	bfbe      	ittt	lt
 800f2d8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f2dc:	f06f 0118 	mvnlt.w	r1, #24
 800f2e0:	ee17 3a90 	vmovlt	r3, s15
 800f2e4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f2e8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f2ec:	4418      	add	r0, r3
 800f2ee:	bfa8      	it	ge
 800f2f0:	2100      	movge	r1, #0
 800f2f2:	3a7f      	subs	r2, #127	; 0x7f
 800f2f4:	440a      	add	r2, r1
 800f2f6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f2fa:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f2fe:	4319      	orrs	r1, r3
 800f300:	ee00 1a10 	vmov	s0, r1
 800f304:	4951      	ldr	r1, [pc, #324]	; (800f44c <__ieee754_logf+0x1b0>)
 800f306:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f30a:	f103 000f 	add.w	r0, r3, #15
 800f30e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f312:	4001      	ands	r1, r0
 800f314:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f318:	bb89      	cbnz	r1, 800f37e <__ieee754_logf+0xe2>
 800f31a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f322:	d10f      	bne.n	800f344 <__ieee754_logf+0xa8>
 800f324:	2a00      	cmp	r2, #0
 800f326:	f000 8085 	beq.w	800f434 <__ieee754_logf+0x198>
 800f32a:	ee07 2a90 	vmov	s15, r2
 800f32e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f450 <__ieee754_logf+0x1b4>
 800f332:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f454 <__ieee754_logf+0x1b8>
 800f336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f33a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f33e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f342:	4770      	bx	lr
 800f344:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f458 <__ieee754_logf+0x1bc>
 800f348:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f34c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f350:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f354:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f358:	b912      	cbnz	r2, 800f360 <__ieee754_logf+0xc4>
 800f35a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f35e:	4770      	bx	lr
 800f360:	ee07 2a90 	vmov	s15, r2
 800f364:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f450 <__ieee754_logf+0x1b4>
 800f368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f36c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f370:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f374:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f454 <__ieee754_logf+0x1b8>
 800f378:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f37c:	4770      	bx	lr
 800f37e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f382:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f386:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f45c <__ieee754_logf+0x1c0>
 800f38a:	eddf 4a35 	vldr	s9, [pc, #212]	; 800f460 <__ieee754_logf+0x1c4>
 800f38e:	4935      	ldr	r1, [pc, #212]	; (800f464 <__ieee754_logf+0x1c8>)
 800f390:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f394:	4419      	add	r1, r3
 800f396:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f39a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f39e:	430b      	orrs	r3, r1
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	ee07 2a90 	vmov	s15, r2
 800f3a6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f3aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f3ae:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f3b2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f468 <__ieee754_logf+0x1cc>
 800f3b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f3ba:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f46c <__ieee754_logf+0x1d0>
 800f3be:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f3c2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f470 <__ieee754_logf+0x1d4>
 800f3c6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f3ca:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800f474 <__ieee754_logf+0x1d8>
 800f3ce:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f3d2:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f478 <__ieee754_logf+0x1dc>
 800f3d6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f3da:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f3de:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f3e2:	dd1c      	ble.n	800f41e <__ieee754_logf+0x182>
 800f3e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f3e8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f3ec:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f3f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f3f8:	b922      	cbnz	r2, 800f404 <__ieee754_logf+0x168>
 800f3fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f402:	4770      	bx	lr
 800f404:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800f450 <__ieee754_logf+0x1b4>
 800f408:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f40c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f410:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f414:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f454 <__ieee754_logf+0x1b8>
 800f418:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f41c:	4770      	bx	lr
 800f41e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f422:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f426:	2a00      	cmp	r2, #0
 800f428:	d0e9      	beq.n	800f3fe <__ieee754_logf+0x162>
 800f42a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f450 <__ieee754_logf+0x1b4>
 800f42e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f432:	e7ed      	b.n	800f410 <__ieee754_logf+0x174>
 800f434:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f440 <__ieee754_logf+0x1a4>
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	cc000000 	.word	0xcc000000
 800f440:	00000000 	.word	0x00000000
 800f444:	4c000000 	.word	0x4c000000
 800f448:	004afb20 	.word	0x004afb20
 800f44c:	007ffff0 	.word	0x007ffff0
 800f450:	3717f7d1 	.word	0x3717f7d1
 800f454:	3f317180 	.word	0x3f317180
 800f458:	3eaaaaab 	.word	0x3eaaaaab
 800f45c:	3e1cd04f 	.word	0x3e1cd04f
 800f460:	3e178897 	.word	0x3e178897
 800f464:	ffcf5c30 	.word	0xffcf5c30
 800f468:	3e638e29 	.word	0x3e638e29
 800f46c:	3ecccccd 	.word	0x3ecccccd
 800f470:	3e3a3325 	.word	0x3e3a3325
 800f474:	3e924925 	.word	0x3e924925
 800f478:	3f2aaaab 	.word	0x3f2aaaab

0800f47c <_init>:
 800f47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47e:	bf00      	nop
 800f480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f482:	bc08      	pop	{r3}
 800f484:	469e      	mov	lr, r3
 800f486:	4770      	bx	lr

0800f488 <_fini>:
 800f488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48a:	bf00      	nop
 800f48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f48e:	bc08      	pop	{r3}
 800f490:	469e      	mov	lr, r3
 800f492:	4770      	bx	lr
