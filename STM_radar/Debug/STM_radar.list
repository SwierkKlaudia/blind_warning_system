
STM_radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e00  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008b44  08011f40  08011f40  00021f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801aa84  0801aa84  0002aa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801aa8c  0801aa8c  0002aa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801aa90  0801aa90  0002aa90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ac  20000004  0801aa94  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004dc  200001b0  0801ac40  000301b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000068c  0801ac40  0003068c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0008864d  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00012c71  00000000  00000000  000b882d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000032e0  00000000  00000000  000cb4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00007a88  00000000  00000000  000ce780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00024bca  00000000  00000000  000d6208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003936f  00000000  00000000  000fadd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ead79  00000000  00000000  00134141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000009f  00000000  00000000  0021eeba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd6c  00000000  00000000  0021ef5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00025c95  00000000  00000000  0022acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b0 	.word	0x200001b0
 800015c:	00000000 	.word	0x00000000
 8000160:	08011f28 	.word	0x08011f28

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b4 	.word	0x200001b4
 800017c:	08011f28 	.word	0x08011f28

08000180 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 8000180:	f06f 0c03 	mvn.w	ip, #3
 8000184:	3904      	subs	r1, #4
 8000186:	e004      	b.n	8000192 <head_complex>

08000188 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 8000188:	f04f 0c04 	mov.w	ip, #4
 800018c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000190:	4252      	negs	r2, r2

08000192 <head_complex>:
 8000192:	0092      	lsls	r2, r2, #2
 8000194:	d100      	bne.n	8000198 <init_complex>
 8000196:	4770      	bx	lr

08000198 <init_complex>:
 8000198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800019c:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001a0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001a4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001a8:	8844      	ldrh	r4, [r0, #2]
 80001aa:	8883      	ldrh	r3, [r0, #4]
 80001ac:	88c5      	ldrh	r5, [r0, #6]
 80001ae:	8900      	ldrh	r0, [r0, #8]
 80001b0:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 80001b4:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 80001b8:	4663      	mov	r3, ip
 80001ba:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 80001be:	b234      	sxth	r4, r6
 80001c0:	b23d      	sxth	r5, r7
 80001c2:	ea4f 3804 	mov.w	r8, r4, lsl #12
 80001c6:	ea4f 3905 	mov.w	r9, r5, lsl #12
 80001ca:	0034      	movs	r4, r6
 80001cc:	003d      	movs	r5, r7

080001ce <loop_complex>:
 80001ce:	5888      	ldr	r0, [r1, r2]
 80001d0:	fb1a 8800 	smlabb	r8, sl, r0, r8
 80001d4:	fb1a 9910 	smlabt	r9, sl, r0, r9
 80001d8:	fb2c 8804 	smlad	r8, ip, r4, r8
 80001dc:	fb2c 9915 	smladx	r9, ip, r5, r9
 80001e0:	fb4e 8806 	smlsd	r8, lr, r6, r8
 80001e4:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 80001e8:	0026      	movs	r6, r4
 80001ea:	002f      	movs	r7, r5
 80001ec:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 80001f0:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 80001f4:	0428      	lsls	r0, r5, #16
 80001f6:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 80001fa:	5088      	str	r0, [r1, r2]
 80001fc:	18d2      	adds	r2, r2, r3
 80001fe:	d1e6      	bne.n	80001ce <loop_complex>
 8000200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000204 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000204:	f06f 0c01 	mvn.w	ip, #1
 8000208:	3902      	subs	r1, #2
 800020a:	e004      	b.n	8000216 <head_real>

0800020c <acc_alg_biquad_q3_12_direct_form_1>:
 800020c:	f05f 0c02 	movs.w	ip, #2
 8000210:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000214:	4252      	negs	r2, r2

08000216 <head_real>:
 8000216:	0052      	lsls	r2, r2, #1
 8000218:	d100      	bne.n	800021c <init_real>
 800021a:	4770      	bx	lr

0800021c <init_real>:
 800021c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000220:	4667      	mov	r7, ip
 8000222:	f8b0 a000 	ldrh.w	sl, [r0]
 8000226:	8844      	ldrh	r4, [r0, #2]
 8000228:	8885      	ldrh	r5, [r0, #4]
 800022a:	88c6      	ldrh	r6, [r0, #6]
 800022c:	8900      	ldrh	r0, [r0, #8]
 800022e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000232:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000236:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800023a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800023e:	0025      	movs	r5, r4
 8000240:	b21b      	sxth	r3, r3
 8000242:	031e      	lsls	r6, r3, #12

08000244 <loop_real>:
 8000244:	5a88      	ldrh	r0, [r1, r2]
 8000246:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800024a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800024e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 8000252:	0025      	movs	r5, r4
 8000254:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 8000258:	1420      	asrs	r0, r4, #16
 800025a:	5288      	strh	r0, [r1, r2]
 800025c:	19d2      	adds	r2, r2, r7
 800025e:	d1f1      	bne.n	8000244 <loop_real>
 8000260:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
	__disable_irq();
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <enable_interrupts>:


static inline void enable_interrupts(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800061e:	b662      	cpsie	i
}
 8000620:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000622:	f3bf 8f6f 	isb	sy
}
 8000626:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af02      	add	r7, sp, #8
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000640:	f241 3388 	movw	r3, #5000	; 0x1388
 8000644:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2110      	movs	r1, #16
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f001 fb2d 	bl	8001cac <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	b29a      	uxth	r2, r3
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	4613      	mov	r3, r2
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	68b9      	ldr	r1, [r7, #8]
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <acc_hal_integration_sensor_transfer+0x48>)
 8000662:	f003 fb0d 	bl	8003c80 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2110      	movs	r1, #16
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f001 fb1d 	bl	8001cac <HAL_GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200002e4 	.word	0x200002e4

08000680 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2120      	movs	r1, #32
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f001 fb0c 	bl	8001cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2110      	movs	r1, #16
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f001 fb06 	bl	8001cac <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f001 f847 	bl	8001734 <HAL_Delay>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f001 faf5 	bl	8001cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ca:	f001 faef 	bl	8001cac <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 80006ce:	2002      	movs	r0, #2
 80006d0:	f001 f830 	bl	8001734 <HAL_Delay>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 80006e6:	f001 f80d 	bl	8001704 <HAL_GetTick>
 80006ea:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80006ec:	e00d      	b.n	800070a <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80006ee:	f7ff ff8b 	bl	8000608 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 80006f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f001 fabf 	bl	8001c7c <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d000      	beq.n	8000706 <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 8000704:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8000706:	f7ff ff88 	bl	800061a <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 800070a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f001 fab3 	bl	8001c7c <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d007      	beq.n	800072c <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 800071c:	f000 fff2 	bl	8001704 <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8e0      	bhi.n	80006ee <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 800072c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f001 faa2 	bl	8001c7c <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	bf0c      	ite	eq
 800073e:	2301      	moveq	r3, #1
 8000740:	2300      	movne	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <acc_hal_integration_get_reference_frequency+0x18>)
 8000752:	ee07 3a90 	vmov	s15, r3
}
 8000756:	eeb0 0a67 	vmov.f32	s0, s15
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	4bc65d40 	.word	0x4bc65d40

08000768 <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	return &hal;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <acc_hal_integration_get_implementation+0x10>)
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	08015484 	.word	0x08015484

0800077c <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 800077c:	b40c      	push	{r2, r3}
 800077e:	b580      	push	{r7, lr}
 8000780:	b0b4      	sub	sp, #208	; 0xd0
 8000782:	af04      	add	r7, sp, #16
 8000784:	4603      	mov	r3, r0
 8000786:	6039      	str	r1, [r7, #0]
 8000788:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 800078a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800078e:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8000790:	f107 000c 	add.w	r0, r7, #12
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800079a:	2196      	movs	r1, #150	; 0x96
 800079c:	f010 fbc4 	bl	8010f28 <vsniprintf>
 80007a0:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 80007a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007a8:	2b95      	cmp	r3, #149	; 0x95
 80007aa:	dd0b      	ble.n	80007c4 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 80007ac:	232e      	movs	r3, #46	; 0x2e
 80007ae:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 80007b2:	232e      	movs	r3, #46	; 0x2e
 80007b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 80007b8:	232e      	movs	r3, #46	; 0x2e
 80007ba:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 80007c4:	f000 f876 	bl	80008b4 <acc_integration_get_time>
 80007c8:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 80007cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80007d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80007d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80007d8:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <acc_integration_log+0x11c>)
 80007da:	fba2 2303 	umull	r2, r3, r2, r3
 80007de:	0d5b      	lsrs	r3, r3, #21
 80007e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80007e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80007e8:	4a2c      	ldr	r2, [pc, #176]	; (800089c <acc_integration_log+0x120>)
 80007ea:	fba2 2303 	umull	r2, r3, r2, r3
 80007ee:	0b9a      	lsrs	r2, r3, #14
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <acc_integration_log+0x124>)
 80007f2:	fba3 1302 	umull	r1, r3, r3, r2
 80007f6:	0959      	lsrs	r1, r3, #5
 80007f8:	460b      	mov	r3, r1
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	1a5b      	subs	r3, r3, r1
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 8000806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800080a:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <acc_integration_log+0x128>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	099a      	lsrs	r2, r3, #6
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <acc_integration_log+0x124>)
 8000814:	fba3 1302 	umull	r1, r3, r3, r2
 8000818:	0959      	lsrs	r1, r3, #5
 800081a:	460b      	mov	r3, r1
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	1a5b      	subs	r3, r3, r1
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8000828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <acc_integration_log+0x128>)
 800082e:	fba2 1203 	umull	r1, r2, r2, r3
 8000832:	0992      	lsrs	r2, r2, #6
 8000834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000838:	fb01 f202 	mul.w	r2, r1, r2
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b04      	cmp	r3, #4
 8000846:	d803      	bhi.n	8000850 <acc_integration_log+0xd4>
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <acc_integration_log+0x12c>)
 800084c:	5cd3      	ldrb	r3, [r2, r3]
 800084e:	e000      	b.n	8000852 <acc_integration_log+0xd6>
 8000850:	233f      	movs	r3, #63	; 0x3f
 8000852:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8000856:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800085a:	f107 020c 	add.w	r2, r7, #12
 800085e:	9203      	str	r2, [sp, #12]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	9202      	str	r2, [sp, #8]
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000870:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000874:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <acc_integration_log+0x130>)
 800087a:	f010 fa47 	bl	8010d0c <iprintf>

	fflush(stdout);
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <acc_integration_log+0x134>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	4618      	mov	r0, r3
 8000886:	f010 f827 	bl	80108d8 <fflush>

	va_end(ap);
}
 800088a:	bf00      	nop
 800088c:	37c0      	adds	r7, #192	; 0xc0
 800088e:	46bd      	mov	sp, r7
 8000890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000894:	b002      	add	sp, #8
 8000896:	4770      	bx	lr
 8000898:	95217cb1 	.word	0x95217cb1
 800089c:	45e7b273 	.word	0x45e7b273
 80008a0:	88888889 	.word	0x88888889
 80008a4:	10624dd3 	.word	0x10624dd3
 80008a8:	08011f64 	.word	0x08011f64
 80008ac:	08011f40 	.word	0x08011f40
 80008b0:	20000148 	.word	0x20000148

080008b4 <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80008b8:	f000 ff24 	bl	8001704 <HAL_GetTick>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <acc_example_bring_up>:

int acc_example_bring_up(int argc, char *argv[]);


int acc_example_bring_up(int argc, char *argv[])
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	printf("Acconeer software version %s\n", acc_version_get());
 80008ce:	f005 fd7d 	bl	80063cc <acc_version_get>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4619      	mov	r1, r3
 80008d6:	487f      	ldr	r0, [pc, #508]	; (8000ad4 <acc_example_bring_up+0x210>)
 80008d8:	f010 fa18 	bl	8010d0c <iprintf>

	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 80008dc:	f7ff ff44 	bl	8000768 <acc_hal_integration_get_implementation>
 80008e0:	60f8      	str	r0, [r7, #12]

	if (!acc_rss_activate(hal))
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f004 fe62 	bl	80055ac <acc_rss_activate>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f083 0301 	eor.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <acc_example_bring_up+0x34>
	{
		return EXIT_FAILURE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e0e9      	b.n	8000acc <acc_example_bring_up+0x208>
	}

	acc_rss_assembly_test_configuration_t configuration = acc_rss_assembly_test_configuration_create();
 80008f8:	f004 fec8 	bl	800568c <acc_rss_assembly_test_configuration_create>
 80008fc:	4603      	mov	r3, r0
 80008fe:	60bb      	str	r3, [r7, #8]
	acc_rss_assembly_test_configuration_sensor_set(configuration, DEFAULT_SENSOR_ID);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2101      	movs	r1, #1
 8000904:	4618      	mov	r0, r3
 8000906:	f004 fed9 	bl	80056bc <acc_rss_assembly_test_configuration_sensor_set>

	// Disable all tests (they are enabled by default)
	acc_rss_assembly_test_configuration_all_tests_disable(configuration);
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4618      	mov	r0, r3
 800090e:	f004 ff89 	bl	8005824 <acc_rss_assembly_test_configuration_all_tests_disable>

	// Enable and run: Read Test
	acc_rss_assembly_test_configuration_communication_read_test_enable(configuration);
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4618      	mov	r0, r3
 8000916:	f004 fedd 	bl	80056d4 <acc_rss_assembly_test_configuration_communication_read_test_enable>
	if (!run_test(configuration))
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f8eb 	bl	8000af8 <run_test>
 8000922:	4603      	mov	r3, r0
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00b      	beq.n	8000946 <acc_example_bring_up+0x82>
	{
		printf("Bring up test: Read Test failed\n");
 800092e:	486a      	ldr	r0, [pc, #424]	; (8000ad8 <acc_example_bring_up+0x214>)
 8000930:	f010 fa72 	bl	8010e18 <puts>
		acc_rss_assembly_test_configuration_destroy(&configuration);
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	4618      	mov	r0, r3
 800093a:	f004 feb5 	bl	80056a8 <acc_rss_assembly_test_configuration_destroy>
		acc_rss_deactivate();
 800093e:	f004 fe73 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000942:	2301      	movs	r3, #1
 8000944:	e0c2      	b.n	8000acc <acc_example_bring_up+0x208>
	}

	acc_rss_assembly_test_configuration_communication_read_test_disable(configuration);
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	4618      	mov	r0, r3
 800094a:	f004 fecf 	bl	80056ec <acc_rss_assembly_test_configuration_communication_read_test_disable>

	// Enable and run: Write Read Test
	acc_rss_assembly_test_configuration_communication_write_read_test_enable(configuration);
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	4618      	mov	r0, r3
 8000952:	f004 fed7 	bl	8005704 <acc_rss_assembly_test_configuration_communication_write_read_test_enable>
	if (!run_test(configuration))
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f8cd 	bl	8000af8 <run_test>
 800095e:	4603      	mov	r3, r0
 8000960:	f083 0301 	eor.w	r3, r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00b      	beq.n	8000982 <acc_example_bring_up+0xbe>
	{
		printf("Bring up test: Write Read Test failed\n");
 800096a:	485c      	ldr	r0, [pc, #368]	; (8000adc <acc_example_bring_up+0x218>)
 800096c:	f010 fa54 	bl	8010e18 <puts>
		acc_rss_assembly_test_configuration_destroy(&configuration);
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4618      	mov	r0, r3
 8000976:	f004 fe97 	bl	80056a8 <acc_rss_assembly_test_configuration_destroy>
		acc_rss_deactivate();
 800097a:	f004 fe55 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 800097e:	2301      	movs	r3, #1
 8000980:	e0a4      	b.n	8000acc <acc_example_bring_up+0x208>
	}

	acc_rss_assembly_test_configuration_communication_write_read_test_disable(configuration);
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	4618      	mov	r0, r3
 8000986:	f004 fec9 	bl	800571c <acc_rss_assembly_test_configuration_communication_write_read_test_disable>

	// Enable and run: Interrupt Test
	acc_rss_assembly_test_configuration_communication_interrupt_test_enable(configuration);
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	4618      	mov	r0, r3
 800098e:	f004 fed1 	bl	8005734 <acc_rss_assembly_test_configuration_communication_interrupt_test_enable>
	if (!run_test(configuration))
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f8af 	bl	8000af8 <run_test>
 800099a:	4603      	mov	r3, r0
 800099c:	f083 0301 	eor.w	r3, r3, #1
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00b      	beq.n	80009be <acc_example_bring_up+0xfa>
	{
		printf("Bring up test: Interrupt Test failed\n");
 80009a6:	484e      	ldr	r0, [pc, #312]	; (8000ae0 <acc_example_bring_up+0x21c>)
 80009a8:	f010 fa36 	bl	8010e18 <puts>
		acc_rss_assembly_test_configuration_destroy(&configuration);
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 fe79 	bl	80056a8 <acc_rss_assembly_test_configuration_destroy>
		acc_rss_deactivate();
 80009b6:	f004 fe37 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e086      	b.n	8000acc <acc_example_bring_up+0x208>
	}

	acc_rss_assembly_test_configuration_communication_interrupt_test_disable(configuration);
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f004 fec3 	bl	800574c <acc_rss_assembly_test_configuration_communication_interrupt_test_disable>

	// Enable and run: Hibernate Test
	acc_rss_assembly_test_configuration_communication_hibernate_test_enable(configuration);
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fecb 	bl	8005764 <acc_rss_assembly_test_configuration_communication_hibernate_test_enable>
	if (!run_test(configuration))
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f891 	bl	8000af8 <run_test>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f083 0301 	eor.w	r3, r3, #1
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d00b      	beq.n	80009fa <acc_example_bring_up+0x136>
	{
		printf("Bring up test: Hibernate Test failed\n");
 80009e2:	4840      	ldr	r0, [pc, #256]	; (8000ae4 <acc_example_bring_up+0x220>)
 80009e4:	f010 fa18 	bl	8010e18 <puts>
		acc_rss_assembly_test_configuration_destroy(&configuration);
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fe5b 	bl	80056a8 <acc_rss_assembly_test_configuration_destroy>
		acc_rss_deactivate();
 80009f2:	f004 fe19 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e068      	b.n	8000acc <acc_example_bring_up+0x208>
	}

	acc_rss_assembly_test_configuration_communication_hibernate_test_disable(configuration);
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 febd 	bl	800577c <acc_rss_assembly_test_configuration_communication_hibernate_test_disable>

	// Enable and run: Supply Test
	acc_rss_assembly_test_configuration_supply_test_enable(configuration);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f004 fec5 	bl	8005794 <acc_rss_assembly_test_configuration_supply_test_enable>
	if (!run_test(configuration))
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f873 	bl	8000af8 <run_test>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f083 0301 	eor.w	r3, r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00b      	beq.n	8000a36 <acc_example_bring_up+0x172>
	{
		printf("Bring up test: Supply Test failed\n");
 8000a1e:	4832      	ldr	r0, [pc, #200]	; (8000ae8 <acc_example_bring_up+0x224>)
 8000a20:	f010 f9fa 	bl	8010e18 <puts>
		acc_rss_assembly_test_configuration_destroy(&configuration);
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 fe3d 	bl	80056a8 <acc_rss_assembly_test_configuration_destroy>
		acc_rss_deactivate();
 8000a2e:	f004 fdfb 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e04a      	b.n	8000acc <acc_example_bring_up+0x208>
	}

	acc_rss_assembly_test_configuration_supply_test_disable(configuration);
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 feb7 	bl	80057ac <acc_rss_assembly_test_configuration_supply_test_disable>

	// Enable and run: Clock Test
	acc_rss_assembly_test_configuration_clock_test_enable(configuration);
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 febf 	bl	80057c4 <acc_rss_assembly_test_configuration_clock_test_enable>
	if (!run_test(configuration))
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f855 	bl	8000af8 <run_test>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00b      	beq.n	8000a72 <acc_example_bring_up+0x1ae>
	{
		printf("Bring up test: Clock Test failed\n");
 8000a5a:	4824      	ldr	r0, [pc, #144]	; (8000aec <acc_example_bring_up+0x228>)
 8000a5c:	f010 f9dc 	bl	8010e18 <puts>
		acc_rss_assembly_test_configuration_destroy(&configuration);
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 fe1f 	bl	80056a8 <acc_rss_assembly_test_configuration_destroy>
		acc_rss_deactivate();
 8000a6a:	f004 fddd 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e02c      	b.n	8000acc <acc_example_bring_up+0x208>
	}

	acc_rss_assembly_test_configuration_clock_test_disable(configuration);
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 feb1 	bl	80057dc <acc_rss_assembly_test_configuration_clock_test_disable>

	// Enable and run: Power cycle test
	acc_rss_assembly_test_configuration_power_cycle_test_enable(configuration);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f004 feb9 	bl	80057f4 <acc_rss_assembly_test_configuration_power_cycle_test_enable>
	if (!run_test(configuration))
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f837 	bl	8000af8 <run_test>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f083 0301 	eor.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00b      	beq.n	8000aae <acc_example_bring_up+0x1ea>
	{
		printf("Bring up test: Power Cycle Test failed\n");
 8000a96:	4816      	ldr	r0, [pc, #88]	; (8000af0 <acc_example_bring_up+0x22c>)
 8000a98:	f010 f9be 	bl	8010e18 <puts>
		acc_rss_assembly_test_configuration_destroy(&configuration);
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 fe01 	bl	80056a8 <acc_rss_assembly_test_configuration_destroy>
		acc_rss_deactivate();
 8000aa6:	f004 fdbf 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <acc_example_bring_up+0x208>
	}

	acc_rss_assembly_test_configuration_power_cycle_test_disable(configuration);
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 feab 	bl	800580c <acc_rss_assembly_test_configuration_power_cycle_test_disable>

	printf("Bring up test: All tests passed\n");
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <acc_example_bring_up+0x230>)
 8000ab8:	f010 f9ae 	bl	8010e18 <puts>

	acc_rss_assembly_test_configuration_destroy(&configuration);
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fdf1 	bl	80056a8 <acc_rss_assembly_test_configuration_destroy>
	acc_rss_deactivate();
 8000ac6:	f004 fdaf 	bl	8005628 <acc_rss_deactivate>

	return EXIT_SUCCESS;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	08011f6c 	.word	0x08011f6c
 8000ad8:	08011f8c 	.word	0x08011f8c
 8000adc:	08011fac 	.word	0x08011fac
 8000ae0:	08011fd4 	.word	0x08011fd4
 8000ae4:	08011ffc 	.word	0x08011ffc
 8000ae8:	08012024 	.word	0x08012024
 8000aec:	08012048 	.word	0x08012048
 8000af0:	0801206c 	.word	0x0801206c
 8000af4:	08012094 	.word	0x08012094

08000af8 <run_test>:


static bool run_test(acc_rss_assembly_test_configuration_t configuration)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ae      	sub	sp, #184	; 0xb8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	acc_rss_assembly_test_result_t test_results[ACC_RSS_ASSEMBLY_TEST_MAX_NUMBER_OF_TESTS];
	uint16_t                       nr_of_test_results = ACC_RSS_ASSEMBLY_TEST_MAX_NUMBER_OF_TESTS;
 8000b00:	2314      	movs	r3, #20
 8000b02:	81fb      	strh	r3, [r7, #14]
	bool                           all_passed         = true;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	if (!acc_rss_assembly_test(configuration, test_results, &nr_of_test_results))
 8000b0a:	f107 020e 	add.w	r2, r7, #14
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f004 fe97 	bl	8005848 <acc_rss_assembly_test>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f083 0301 	eor.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d004      	beq.n	8000b30 <run_test+0x38>
	{
		printf("Bring up test: Failed to complete\n");
 8000b26:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <run_test+0xb0>)
 8000b28:	f010 f976 	bl	8010e18 <puts>
		return false;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e036      	b.n	8000b9e <run_test+0xa6>
	}

	for (uint16_t i = 0; i < nr_of_test_results; i++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8000b36:	e02b      	b.n	8000b90 <run_test+0x98>
	{
		const bool passed = test_results[i].test_passed;
 8000b38:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000b42:	4413      	add	r3, r2
 8000b44:	f813 3ca4 	ldrb.w	r3, [r3, #-164]
 8000b48:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
		printf("Name: %s, result: %s\n", test_results[i].test_name, passed ? "Pass" : "Fail");
 8000b4c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000b56:	4413      	add	r3, r2
 8000b58:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 8000b5c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <run_test+0x70>
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <run_test+0xb4>)
 8000b66:	e000      	b.n	8000b6a <run_test+0x72>
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <run_test+0xb8>)
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <run_test+0xbc>)
 8000b6e:	f010 f8cd 	bl	8010d0c <iprintf>

		if (!passed)
 8000b72:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <run_test+0x8e>
		{
			all_passed = false;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	for (uint16_t i = 0; i < nr_of_test_results; i++)
 8000b86:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d3ce      	bcc.n	8000b38 <run_test+0x40>
		}
	}

	return all_passed;
 8000b9a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	37b8      	adds	r7, #184	; 0xb8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	080120b4 	.word	0x080120b4
 8000bac:	080120d8 	.word	0x080120d8
 8000bb0:	080120e0 	.word	0x080120e0
 8000bb4:	080120e8 	.word	0x080120e8

08000bb8 <acc_example_detector_distance>:

int acc_example_detector_distance(int argc, char *argv[]);


int acc_example_detector_distance(int argc, char *argv[])
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b092      	sub	sp, #72	; 0x48
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	466b      	mov	r3, sp
 8000bc4:	461d      	mov	r5, r3
	(void)argc;
	(void)argv;
	printf("Acconeer software version %s\n", acc_version_get());
 8000bc6:	f005 fc01 	bl	80063cc <acc_version_get>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	485f      	ldr	r0, [pc, #380]	; (8000d4c <acc_example_detector_distance+0x194>)
 8000bd0:	f010 f89c 	bl	8010d0c <iprintf>

	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8000bd4:	f7ff fdc8 	bl	8000768 <acc_hal_integration_get_implementation>
 8000bd8:	63f8      	str	r0, [r7, #60]	; 0x3c

	if (!acc_rss_activate(hal))
 8000bda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000bdc:	f004 fce6 	bl	80055ac <acc_rss_activate>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f083 0301 	eor.w	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <acc_example_detector_distance+0x3e>
	{
		printf("acc_rss_activate() failed\n");
 8000bec:	4858      	ldr	r0, [pc, #352]	; (8000d50 <acc_example_detector_distance+0x198>)
 8000bee:	f010 f913 	bl	8010e18 <puts>
		return EXIT_FAILURE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e0a5      	b.n	8000d42 <acc_example_detector_distance+0x18a>
	}

	acc_detector_distance_configuration_t distance_configuration = acc_detector_distance_configuration_create();
 8000bf6:	f004 f959 	bl	8004eac <acc_detector_distance_configuration_create>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24

	if (distance_configuration == NULL)
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d106      	bne.n	8000c12 <acc_example_detector_distance+0x5a>
	{
		printf("acc_detector_distance_configuration_create() failed\n");
 8000c04:	4853      	ldr	r0, [pc, #332]	; (8000d54 <acc_example_detector_distance+0x19c>)
 8000c06:	f010 f907 	bl	8010e18 <puts>
		acc_rss_deactivate();
 8000c0a:	f004 fd0d 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e097      	b.n	8000d42 <acc_example_detector_distance+0x18a>
	}

	acc_detector_distance_handle_t distance_handle = acc_detector_distance_create(distance_configuration);
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 f9c3 	bl	8004fa0 <acc_detector_distance_create>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	623b      	str	r3, [r7, #32]

	if (distance_handle == NULL)
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10b      	bne.n	8000c3c <acc_example_detector_distance+0x84>
	{
		printf("acc_detector_distance_create() failed\n");
 8000c24:	484c      	ldr	r0, [pc, #304]	; (8000d58 <acc_example_detector_distance+0x1a0>)
 8000c26:	f010 f8f7 	bl	8010e18 <puts>
		acc_detector_distance_configuration_destroy(&distance_configuration);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 f992 	bl	8004f58 <acc_detector_distance_configuration_destroy>
		acc_rss_deactivate();
 8000c34:	f004 fcf8 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e082      	b.n	8000d42 <acc_example_detector_distance+0x18a>
	}

	acc_detector_distance_configuration_destroy(&distance_configuration);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 f989 	bl	8004f58 <acc_detector_distance_configuration_destroy>

	if (!acc_detector_distance_activate(distance_handle))
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 fa03 	bl	8005054 <acc_detector_distance_activate>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f083 0301 	eor.w	r3, r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00b      	beq.n	8000c72 <acc_example_detector_distance+0xba>
	{
		printf("acc_detector_distance_activate() failed\n");
 8000c5a:	4840      	ldr	r0, [pc, #256]	; (8000d5c <acc_example_detector_distance+0x1a4>)
 8000c5c:	f010 f8dc 	bl	8010e18 <puts>
		acc_detector_distance_destroy(&distance_handle);
 8000c60:	f107 0320 	add.w	r3, r7, #32
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f9e5 	bl	8005034 <acc_detector_distance_destroy>
		acc_rss_deactivate();
 8000c6a:	f004 fcdd 	bl	8005628 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e067      	b.n	8000d42 <acc_example_detector_distance+0x18a>
	}

	bool                                success         = true;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	const int                           iterations      = 5;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t                            number_of_peaks = 5;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	86fb      	strh	r3, [r7, #54]	; 0x36
	acc_detector_distance_result_t      result[number_of_peaks];
 8000c80:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8000c82:	4623      	mov	r3, r4
 8000c84:	3b01      	subs	r3, #1
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
 8000c88:	b2a0      	uxth	r0, r4
 8000c8a:	f04f 0100 	mov.w	r1, #0
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	f04f 0300 	mov.w	r3, #0
 8000c96:	018b      	lsls	r3, r1, #6
 8000c98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000c9c:	0182      	lsls	r2, r0, #6
 8000c9e:	b2a0      	uxth	r0, r4
 8000ca0:	f04f 0100 	mov.w	r1, #0
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	018b      	lsls	r3, r1, #6
 8000cae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000cb2:	0182      	lsls	r2, r0, #6
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	3307      	adds	r3, #7
 8000cba:	08db      	lsrs	r3, r3, #3
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	ebad 0d03 	sub.w	sp, sp, r3
 8000cc2:	466b      	mov	r3, sp
 8000cc4:	3303      	adds	r3, #3
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c

//	while (success)
//	{
//		success = acc_detector_distance_metadata_get(distance_handle, &distance_metadata);

		for (int i = 0; i < iterations; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
 8000cd0:	e017      	b.n	8000d02 <acc_example_detector_distance+0x14a>
		{
			success = acc_detector_distance_get_next(distance_handle, result, number_of_peaks, &result_info);
 8000cd2:	6a38      	ldr	r0, [r7, #32]
 8000cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000cdc:	f004 fa3a 	bl	8005154 <acc_detector_distance_get_next>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			if (!success)
 8000ce6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <acc_example_detector_distance+0x144>
			{
				printf("acc_detector_distance_get_next() failed\n");
 8000cf4:	481a      	ldr	r0, [pc, #104]	; (8000d60 <acc_example_detector_distance+0x1a8>)
 8000cf6:	f010 f88f 	bl	8010e18 <puts>
				break;
 8000cfa:	e006      	b.n	8000d0a <acc_example_detector_distance+0x152>
		for (int i = 0; i < iterations; i++)
 8000cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfe:	3301      	adds	r3, #1
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
 8000d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbe3      	blt.n	8000cd2 <acc_example_detector_distance+0x11a>
//				print_distances(result, result_info.number_of_peaks);
//			}
		}
//	}

	bool deactivated = acc_detector_distance_deactivate(distance_handle);
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 f9ad 	bl	800506c <acc_detector_distance_deactivate>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	acc_detector_distance_destroy(&distance_handle);
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 f989 	bl	8005034 <acc_detector_distance_destroy>

	acc_rss_deactivate();
 8000d22:	f004 fc81 	bl	8005628 <acc_rss_deactivate>

	if (deactivated && success)
 8000d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <acc_example_detector_distance+0x188>
 8000d2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <acc_example_detector_distance+0x188>
	{
		printf("Application finished OK\n");
 8000d36:	480b      	ldr	r0, [pc, #44]	; (8000d64 <acc_example_detector_distance+0x1ac>)
 8000d38:	f010 f86e 	bl	8010e18 <puts>
		return EXIT_SUCCESS;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e000      	b.n	8000d42 <acc_example_detector_distance+0x18a>
	}

	return EXIT_FAILURE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	46ad      	mov	sp, r5
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3748      	adds	r7, #72	; 0x48
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4c:	08012100 	.word	0x08012100
 8000d50:	08012120 	.word	0x08012120
 8000d54:	0801213c 	.word	0x0801213c
 8000d58:	08012170 	.word	0x08012170
 8000d5c:	08012198 	.word	0x08012198
 8000d60:	080121c0 	.word	0x080121c0
 8000d64:	080121e8 	.word	0x080121e8

08000d68 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d78:	f023 0218 	bic.w	r2, r3, #24
 8000d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db8:	68fb      	ldr	r3, [r7, #12]
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 fc2c 	bl	8001628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f814 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 f96c 	bl	80010b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000dd8:	f000 f8f4 	bl	8000fc4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000ddc:	f000 f940 	bl	8001060 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8000de0:	f000 f8b2 	bl	8000f48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int result1 = acc_example_bring_up(0, NULL );
 8000de4:	2100      	movs	r1, #0
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fd6c 	bl	80008c4 <acc_example_bring_up>
 8000dec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  if (result1 == 0)
//	  {
		  int result3 = acc_example_detector_distance(0, NULL);
 8000dee:	2100      	movs	r1, #0
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fee1 	bl	8000bb8 <acc_example_detector_distance>
 8000df6:	6038      	str	r0, [r7, #0]
  {
 8000df8:	e7f9      	b.n	8000dee <main+0x28>
	...

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ae      	sub	sp, #184	; 0xb8
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e06:	2248      	movs	r2, #72	; 0x48
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00f fecc 	bl	8010ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2250      	movs	r2, #80	; 0x50
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00f febc 	bl	8010ba8 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e3e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e54:	f001 f874 	bl	8001f40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ff85 	bl	8000d68 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5e:	4b39      	ldr	r3, [pc, #228]	; (8000f44 <SystemClock_Config+0x148>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e66:	4a37      	ldr	r2, [pc, #220]	; (8000f44 <SystemClock_Config+0x148>)
 8000e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <SystemClock_Config+0x148>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000e7a:	2327      	movs	r3, #39	; 0x27
 8000e7c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e82:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e84:	2301      	movs	r3, #1
 8000e86:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ea0:	2360      	movs	r3, #96	; 0x60
 8000ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fbd9 	bl	8002668 <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ebc:	f000 f96c 	bl	8001198 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000ec0:	236f      	movs	r3, #111	; 0x6f
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000edc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 ff4c 	bl	8002d80 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000eee:	f000 f953 	bl	8001198 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000ef2:	f242 1301 	movw	r3, #8449	; 0x2101
 8000ef6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ef8:	2318      	movs	r3, #24
 8000efa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f00:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f06:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000f08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f0c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000f0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f12:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fb79 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000f34:	f000 f930 	bl	8001198 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f38:	f002 fce8 	bl	800390c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f3c:	bf00      	nop
 8000f3e:	37b8      	adds	r7, #184	; 0xb8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	58000400 	.word	0x58000400

08000f48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_SPI1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f7e:	2220      	movs	r2, #32
 8000f80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000fa8:	f002 fdc7 	bl	8003b3a <HAL_SPI_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f8f1 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200002e4 	.word	0x200002e4
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000fca:	4a24      	ldr	r2, [pc, #144]	; (800105c <MX_USART1_UART_Init+0x98>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fdc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000fec:	220c      	movs	r2, #12
 8000fee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_USART1_UART_Init+0x94>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100e:	4812      	ldr	r0, [pc, #72]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8001010:	f003 f9c6 	bl	80043a0 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800101a:	f000 f8bd 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8001022:	f003 fdb9 	bl	8004b98 <HAL_UARTEx_SetTxFifoThreshold>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800102c:	f000 f8b4 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8001034:	f003 fdee 	bl	8004c14 <HAL_UARTEx_SetRxFifoThreshold>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800103e:	f000 f8ab 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8001044:	f003 fd6f 	bl	8004b26 <HAL_UARTEx_DisableFifoMode>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800104e:	f000 f8a3 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000254 	.word	0x20000254
 800105c:	40013800 	.word	0x40013800

08001060 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <MX_USB_PCD_Init+0x4c>)
 8001068:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 800106c:	2208      	movs	r2, #8
 800106e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 8001072:	2202      	movs	r2, #2
 8001074:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 8001078:	2202      	movs	r2, #2
 800107a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_USB_PCD_Init+0x48>)
 8001096:	f000 fe44 	bl	8001d22 <HAL_PCD_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80010a0:	f000 f87a 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000348 	.word	0x20000348
 80010ac:	40006800 	.word	0x40006800

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	2004      	movs	r0, #4
 80010c6:	f7ff fe65 	bl	8000d94 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2001      	movs	r0, #1
 80010cc:	f7ff fe62 	bl	8000d94 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	2002      	movs	r0, #2
 80010d2:	f7ff fe5f 	bl	8000d94 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	2008      	movs	r0, #8
 80010d8:	f7ff fe5c 	bl	8000d94 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A111_CS_N_Pin|A111_ENABLE_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2130      	movs	r1, #48	; 0x30
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f000 fde2 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2123      	movs	r1, #35	; 0x23
 80010ec:	4826      	ldr	r0, [pc, #152]	; (8001188 <MX_GPIO_Init+0xd8>)
 80010ee:	f000 fddd 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A111_CS_N_Pin A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|A111_ENABLE_Pin;
 80010f2:	2330      	movs	r3, #48	; 0x30
 80010f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fc47 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 800110e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001112:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_GPIO_Init+0xdc>)
 8001116:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 fc3a 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001128:	2310      	movs	r3, #16
 800112a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4815      	ldr	r0, [pc, #84]	; (8001190 <MX_GPIO_Init+0xe0>)
 800113a:	f000 fc2f 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800113e:	2323      	movs	r3, #35	; 0x23
 8001140:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_GPIO_Init+0xd8>)
 8001154:	f000 fc22 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001158:	2303      	movs	r3, #3
 800115a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <MX_GPIO_Init+0xe4>)
 800116a:	f000 fc17 	bl	800199c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2017      	movs	r0, #23
 8001174:	f000 fbdd 	bl	8001932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001178:	2017      	movs	r0, #23
 800117a:	f000 fbf4 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000400 	.word	0x48000400
 800118c:	10110000 	.word	0x10110000
 8001190:	48000800 	.word	0x48000800
 8001194:	48000c00 	.word	0x48000c00

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>

080011a2 <LL_AHB2_GRP1_EnableClock>:
{
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4013      	ands	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4013      	ands	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011f8:	68fb      	ldr	r3, [r7, #12]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001212:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4313      	orrs	r3, r2
 800121c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4013      	ands	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_SPI_MspInit+0x5c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d117      	bne.n	800129a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800126e:	f7ff ffca 	bl	8001206 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ff95 	bl	80011a2 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8001278:	23c2      	movs	r3, #194	; 0xc2
 800127a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001288:	2305      	movs	r3, #5
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f000 fb81 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013000 	.word	0x40013000

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_UART_MspInit+0x58>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d116      	bne.n	80012f8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012ce:	f7ff ff9a 	bl	8001206 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2002      	movs	r0, #2
 80012d4:	f7ff ff65 	bl	80011a2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012d8:	23c0      	movs	r3, #192	; 0xc0
 80012da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e8:	2307      	movs	r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <HAL_UART_MspInit+0x5c>)
 80012f4:	f000 fb52 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40013800 	.word	0x40013800
 8001304:	48000400 	.word	0x48000400

08001308 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_PCD_MspInit+0x5c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d118      	bne.n	800135c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff ff39 	bl	80011a2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001330:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001334:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001342:	230a      	movs	r3, #10
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 fb24 	bl	800199c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001354:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001358:	f7ff ff3c 	bl	80011d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40006800 	.word	0x40006800

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800136c:	e7fe      	b.n	800136c <NMI_Handler+0x4>

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler+0x4>

0800137a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler+0x4>

08001386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f992 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80013c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013c4:	f000 fc8a 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e00a      	b.n	80013f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013de:	f3af 8000 	nop.w
 80013e2:	4601      	mov	r1, r0
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	60ba      	str	r2, [r7, #8]
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf0      	blt.n	80013de <_read+0x12>
	}

return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e009      	b.n	800142c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60ba      	str	r2, [r7, #8]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf1      	blt.n	8001418 <_write+0x12>
	}
	return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_close>:

int _close(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001466:	605a      	str	r2, [r3, #4]
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_isatty>:

int _isatty(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f00f f936 	bl	8010748 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20030000 	.word	0x20030000
 8001508:	00000400 	.word	0x00000400
 800150c:	200001cc 	.word	0x200001cc
 8001510:	20000690 	.word	0x20000690

08001514 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <SystemInit+0x98>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <SystemInit+0x98>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001540:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <SystemInit+0x9c>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155e:	f023 0305 	bic.w	r3, r3, #5
 8001562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800156e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <SystemInit+0xa0>)
 8001580:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <SystemInit+0xa0>)
 8001588:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	faf6fefb 	.word	0xfaf6fefb
 80015b4:	22041000 	.word	0x22041000

080015b8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015b8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015bc:	3304      	adds	r3, #4

080015be <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015be:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015c2:	d3f9      	bcc.n	80015b8 <CopyDataInit>
  bx lr
 80015c4:	4770      	bx	lr

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015c6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015c8:	3004      	adds	r0, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015ca:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>
  bx lr
 80015ce:	4770      	bx	lr

080015d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80015d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015d4:	f7ff ff9e 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LoopForever+0x8>)
 80015da:	490c      	ldr	r1, [pc, #48]	; (800160c <LoopForever+0xc>)
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <LoopForever+0x10>)
 80015de:	2300      	movs	r3, #0
 80015e0:	f7ff ffed 	bl	80015be <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <LoopForever+0x14>)
 80015e6:	490c      	ldr	r1, [pc, #48]	; (8001618 <LoopForever+0x18>)
 80015e8:	2300      	movs	r3, #0
 80015ea:	f7ff ffee 	bl	80015ca <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015ee:	480b      	ldr	r0, [pc, #44]	; (800161c <LoopForever+0x1c>)
 80015f0:	490b      	ldr	r1, [pc, #44]	; (8001620 <LoopForever+0x20>)
 80015f2:	2300      	movs	r3, #0
 80015f4:	f7ff ffe9 	bl	80015ca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015f8:	f00f fa76 	bl	8010ae8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80015fc:	f7ff fbe3 	bl	8000dc6 <main>

08001600 <LoopForever>:

LoopForever:
  b LoopForever
 8001600:	e7fe      	b.n	8001600 <LoopForever>
 8001602:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001604:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001608:	20000004 	.word	0x20000004
 800160c:	200001b0 	.word	0x200001b0
 8001610:	0801aa94 	.word	0x0801aa94
  INIT_BSS _sbss, _ebss
 8001614:	200001b0 	.word	0x200001b0
 8001618:	2000068c 	.word	0x2000068c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800161c:	20030000 	.word	0x20030000
 8001620:	20030000 	.word	0x20030000

08001624 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_IRQHandler>
	...

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_Init+0x3c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_Init+0x3c>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163e:	2003      	movs	r0, #3
 8001640:	f000 f96c 	bl	800191c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001644:	2000      	movs	r0, #0
 8001646:	f000 f80f 	bl	8001668 <HAL_InitTick>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	e001      	b.n	800165a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001656:	f7ff fdef 	bl	8001238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800165a:	79fb      	ldrb	r3, [r7, #7]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	58004000 	.word	0x58004000

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_InitTick+0x6c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d024      	beq.n	80016c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800167c:	f001 fd2c 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_InitTick+0x6c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f974 	bl	8001982 <HAL_SYSTICK_Config>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10f      	bne.n	80016c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	d809      	bhi.n	80016ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a6:	2200      	movs	r2, #0
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	f04f 30ff 	mov.w	r0, #4294967295
 80016ae:	f000 f940 	bl	8001932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_InitTick+0x70>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e007      	b.n	80016ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e004      	b.n	80016ca <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2000000c 	.word	0x2000000c
 80016d8:	20000008 	.word	0x20000008

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	2000000c 	.word	0x2000000c
 8001700:	2000063c 	.word	0x2000063c

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000063c 	.word	0x2000063c

0800171c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTickPrio+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffe2 	bl	8001704 <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffd2 	bl	8001704 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
    {
    }
  }
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000000c 	.word	0x2000000c

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0b      	blt.n	800180a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <__NVIC_EnableIRQ+0x38>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff8e 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff29 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff40 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff90 	bl	8001870 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff33 	bl	80017e0 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa4 	bl	80018d8 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019aa:	e14c      	b.n	8001c46 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2101      	movs	r1, #1
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 813e 	beq.w	8001c40 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d00b      	beq.n	80019e4 <HAL_GPIO_Init+0x48>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d007      	beq.n	80019e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d130      	bne.n	8001a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 0201 	and.w	r2, r3, #1
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0xea>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b12      	cmp	r3, #18
 8001a84:	d123      	bne.n	8001ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	08da      	lsrs	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	6939      	ldr	r1, [r7, #16]
 8001aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0203 	and.w	r2, r3, #3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8098 	beq.w	8001c40 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b10:	4a54      	ldr	r2, [pc, #336]	; (8001c64 <HAL_GPIO_Init+0x2c8>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b3a:	d019      	beq.n	8001b70 <HAL_GPIO_Init+0x1d4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a4a      	ldr	r2, [pc, #296]	; (8001c68 <HAL_GPIO_Init+0x2cc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1d0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a49      	ldr	r2, [pc, #292]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1cc>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <HAL_GPIO_Init+0x2d4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1c8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a47      	ldr	r2, [pc, #284]	; (8001c74 <HAL_GPIO_Init+0x2d8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1c4>
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	e008      	b.n	8001b72 <HAL_GPIO_Init+0x1d6>
 8001b60:	2307      	movs	r3, #7
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x1d6>
 8001b64:	2303      	movs	r3, #3
 8001b66:	e004      	b.n	8001b72 <HAL_GPIO_Init+0x1d6>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x1d6>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_GPIO_Init+0x1d6>
 8001b70:	2300      	movs	r3, #0
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	f002 0203 	and.w	r2, r2, #3
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	4093      	lsls	r3, r2
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b82:	4938      	ldr	r1, [pc, #224]	; (8001c64 <HAL_GPIO_Init+0x2c8>)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb6:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be4:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f aeab 	bne.w	80019ac <HAL_GPIO_Init+0x10>
  }
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40010000 	.word	0x40010000
 8001c68:	48000400 	.word	0x48000400
 8001c6c:	48000800 	.word	0x48000800
 8001c70:	48000c00 	.word	0x48000c00
 8001c74:	48001000 	.word	0x48001000
 8001c78:	58000800 	.word	0x58000800

08001c7c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f806 	bl	8001d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	58000800 	.word	0x58000800

08001d0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d24:	b08b      	sub	sp, #44	; 0x2c
 8001d26:	af06      	add	r7, sp, #24
 8001d28:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0d7      	b.n	8001ee4 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff fadd 	bl	8001308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2203      	movs	r2, #3
 8001d52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 ffe6 	bl	8004d2c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e04c      	b.n	8001e00 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	3301      	adds	r3, #1
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	b298      	uxth	r0, r3
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	3336      	adds	r3, #54	; 0x36
 8001da4:	4602      	mov	r2, r0
 8001da6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	3303      	adds	r3, #3
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	3338      	adds	r3, #56	; 0x38
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	333c      	adds	r3, #60	; 0x3c
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	440b      	add	r3, r1
 8001df4:	3340      	adds	r3, #64	; 0x40
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3ad      	bcc.n	8001d66 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e044      	b.n	8001e9a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3301      	adds	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3b5      	bcc.n	8001e10 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	687e      	ldr	r6, [r7, #4]
 8001eac:	466d      	mov	r5, sp
 8001eae:	f106 0410 	add.w	r4, r6, #16
 8001eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	602b      	str	r3, [r5, #0]
 8001eba:	1d33      	adds	r3, r6, #4
 8001ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f002 ff4f 	bl	8004d62 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d102      	bne.n	8001ee2 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f805 	bl	8001eec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	58000400 	.word	0x58000400

08001f60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	58000400 	.word	0x58000400

08001f7c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f8e:	d101      	bne.n	8001f94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_RCC_HSE_Enable>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_HSE_Disable>:
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_RCC_HSE_IsReady>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fee:	d101      	bne.n	8001ff4 <LL_RCC_HSE_IsReady+0x18>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <LL_RCC_HSE_IsReady+0x1a>
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_RCC_HSI_Enable>:
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_HSI_Disable>:
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_RCC_HSI_IsReady>:
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	d101      	bne.n	8002054 <LL_RCC_HSI_IsReady+0x18>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <LL_RCC_HSI_IsReady+0x1a>
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	061b      	lsls	r3, r3, #24
 8002076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_RCC_HSI48_Enable>:
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_RCC_HSI48_Disable>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_RCC_HSI48_IsReady>:
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d101      	bne.n	80020e6 <LL_RCC_HSI48_IsReady+0x18>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_RCC_HSI48_IsReady+0x1a>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_LSE_Enable>:
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_RCC_LSE_Disable>:
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_RCC_LSE_EnableBypass>:
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_RCC_LSE_DisableBypass>:
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d101      	bne.n	8002192 <LL_RCC_LSE_IsReady+0x18>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <LL_RCC_LSE_IsReady+0x1a>
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d101      	bne.n	80021fa <LL_RCC_LSI1_IsReady+0x18>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_RCC_LSI1_IsReady+0x1a>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800222c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800224e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b08      	cmp	r3, #8
 800225c:	d101      	bne.n	8002262 <LL_RCC_LSI2_IsReady+0x18>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <LL_RCC_LSI2_IsReady+0x1a>
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6013      	str	r3, [r2, #0]
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d101      	bne.n	80022ee <LL_RCC_MSI_IsReady+0x16>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <LL_RCC_MSI_IsReady+0x18>
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002332:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2bb0      	cmp	r3, #176	; 0xb0
 8002338:	d901      	bls.n	800233e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800233a:	23b0      	movs	r3, #176	; 0xb0
 800233c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800233e:	687b      	ldr	r3, [r7, #4]
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 0203 	bic.w	r2, r3, #3
 8002388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800244a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800252c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800253a:	d101      	bne.n	8002540 <LL_RCC_PLL_IsReady+0x18>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <LL_RCC_PLL_IsReady+0x1a>
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0303 	and.w	r3, r3, #3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c0:	d101      	bne.n	80025c6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e6:	d101      	bne.n	80025ec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260c:	d101      	bne.n	8002612 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002630:	d101      	bne.n	8002636 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002654:	d101      	bne.n	800265a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b08d      	sub	sp, #52	; 0x34
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e37e      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8092 	beq.w	80027ac <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002688:	f7ff fe89 	bl	800239e <LL_RCC_GetSysClkSource>
 800268c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268e:	f7ff ff82 	bl	8002596 <LL_RCC_PLL_GetMainSource>
 8002692:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x3e>
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d14c      	bne.n	800273a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d149      	bne.n	800273a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026a6:	f7ff fe17 	bl	80022d8 <LL_RCC_MSI_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_OscConfig+0x54>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e35d      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80026c0:	f7ff fe2f 	bl	8002322 <LL_RCC_MSI_GetRange>
 80026c4:	4603      	mov	r3, r0
 80026c6:	429c      	cmp	r4, r3
 80026c8:	d914      	bls.n	80026f4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fd42 	bl	8003158 <RCC_SetFlashLatencyFromMSIRange>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e34c      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fe09 	bl	80022fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fe2d 	bl	800234c <LL_RCC_MSI_SetCalibTrimming>
 80026f2:	e013      	b.n	800271c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fdfe 	bl	80022fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fe22 	bl	800234c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fd23 	bl	8003158 <RCC_SetFlashLatencyFromMSIRange>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e32d      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800271c:	f000 fcdc 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 8002720:	4603      	mov	r3, r0
 8002722:	4ab3      	ldr	r2, [pc, #716]	; (80029f0 <HAL_RCC_OscConfig+0x388>)
 8002724:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002726:	4bb3      	ldr	r3, [pc, #716]	; (80029f4 <HAL_RCC_OscConfig+0x38c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe ff9c 	bl	8001668 <HAL_InitTick>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d039      	beq.n	80027aa <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e31e      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01e      	beq.n	8002780 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002742:	f7ff fdab 	bl	800229c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002746:	f7fe ffdd 	bl	8001704 <HAL_GetTick>
 800274a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800274e:	f7fe ffd9 	bl	8001704 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e30b      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002760:	f7ff fdba 	bl	80022d8 <LL_RCC_MSI_IsReady>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f1      	beq.n	800274e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fdc3 	bl	80022fa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fde7 	bl	800234c <LL_RCC_MSI_SetCalibTrimming>
 800277e:	e015      	b.n	80027ac <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002780:	f7ff fd9b 	bl	80022ba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002784:	f7fe ffbe 	bl	8001704 <HAL_GetTick>
 8002788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800278c:	f7fe ffba 	bl	8001704 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e2ec      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800279e:	f7ff fd9b 	bl	80022d8 <LL_RCC_MSI_IsReady>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f1      	bne.n	800278c <HAL_RCC_OscConfig+0x124>
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04e      	beq.n	8002856 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b8:	f7ff fdf1 	bl	800239e <LL_RCC_GetSysClkSource>
 80027bc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027be:	f7ff feea 	bl	8002596 <LL_RCC_PLL_GetMainSource>
 80027c2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x16e>
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d10d      	bne.n	80027ec <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d10a      	bne.n	80027ec <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d6:	f7ff fc01 	bl	8001fdc <LL_RCC_HSE_IsReady>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d039      	beq.n	8002854 <HAL_RCC_OscConfig+0x1ec>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d135      	bne.n	8002854 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e2c5      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_OscConfig+0x194>
 80027f6:	f7ff fbd3 	bl	8001fa0 <LL_RCC_HSE_Enable>
 80027fa:	e001      	b.n	8002800 <HAL_RCC_OscConfig+0x198>
 80027fc:	f7ff fbdf 	bl	8001fbe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe ff7c 	bl	8001704 <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe ff78 	bl	8001704 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e2aa      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002822:	f7ff fbdb 	bl	8001fdc <LL_RCC_HSE_IsReady>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f1      	beq.n	8002810 <HAL_RCC_OscConfig+0x1a8>
 800282c:	e013      	b.n	8002856 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe ff69 	bl	8001704 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002836:	f7fe ff65 	bl	8001704 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e297      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002848:	f7ff fbc8 	bl	8001fdc <LL_RCC_HSE_IsReady>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f1      	bne.n	8002836 <HAL_RCC_OscConfig+0x1ce>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d051      	beq.n	8002906 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002862:	f7ff fd9c 	bl	800239e <LL_RCC_GetSysClkSource>
 8002866:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002868:	f7ff fe95 	bl	8002596 <LL_RCC_PLL_GetMainSource>
 800286c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d005      	beq.n	8002880 <HAL_RCC_OscConfig+0x218>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d113      	bne.n	80028a2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d110      	bne.n	80028a2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002880:	f7ff fbdc 	bl	800203c <LL_RCC_HSI_IsReady>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_RCC_OscConfig+0x22e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e270      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fbe0 	bl	8002060 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a0:	e031      	b.n	8002906 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d019      	beq.n	80028de <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028aa:	f7ff fba9 	bl	8002000 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7fe ff29 	bl	8001704 <HAL_GetTick>
 80028b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b6:	f7fe ff25 	bl	8001704 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e257      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028c8:	f7ff fbb8 	bl	800203c <LL_RCC_HSI_IsReady>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f1      	beq.n	80028b6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fbc2 	bl	8002060 <LL_RCC_HSI_SetCalibTrimming>
 80028dc:	e013      	b.n	8002906 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028de:	f7ff fb9e 	bl	800201e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe ff0f 	bl	8001704 <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe ff0b 	bl	8001704 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e23d      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80028fc:	f7ff fb9e 	bl	800203c <LL_RCC_HSI_IsReady>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f1      	bne.n	80028ea <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80a3 	beq.w	8002a66 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d076      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d046      	beq.n	80029c2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002934:	f7ff fc55 	bl	80021e2 <LL_RCC_LSI1_IsReady>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d113      	bne.n	8002966 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800293e:	f7ff fc2e 	bl	800219e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002942:	f7fe fedf 	bl	8001704 <HAL_GetTick>
 8002946:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800294a:	f7fe fedb 	bl	8001704 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e20d      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800295c:	f7ff fc41 	bl	80021e2 <LL_RCC_LSI1_IsReady>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f1      	beq.n	800294a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002966:	f7ff fc4e 	bl	8002206 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe fecb 	bl	8001704 <HAL_GetTick>
 800296e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002972:	f7fe fec7 	bl	8001704 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b03      	cmp	r3, #3
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e1f9      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002984:	f7ff fc61 	bl	800224a <LL_RCC_LSI2_IsReady>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f1      	beq.n	8002972 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fc6b 	bl	800226e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002998:	f7ff fc12 	bl	80021c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe feb2 	bl	8001704 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029a4:	f7fe feae 	bl	8001704 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1e0      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029b6:	f7ff fc14 	bl	80021e2 <LL_RCC_LSI1_IsReady>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f1      	bne.n	80029a4 <HAL_RCC_OscConfig+0x33c>
 80029c0:	e051      	b.n	8002a66 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80029c2:	f7ff fbec 	bl	800219e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fe9d 	bl	8001704 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029ce:	f7fe fe99 	bl	8001704 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1cb      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029e0:	f7ff fbff 	bl	80021e2 <LL_RCC_LSI1_IsReady>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f1      	beq.n	80029ce <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80029ea:	f7ff fc1d 	bl	8002228 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029ee:	e00c      	b.n	8002a0a <HAL_RCC_OscConfig+0x3a2>
 80029f0:	20000004 	.word	0x20000004
 80029f4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029f8:	f7fe fe84 	bl	8001704 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1b6      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a0a:	f7ff fc1e 	bl	800224a <LL_RCC_LSI2_IsReady>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f1      	bne.n	80029f8 <HAL_RCC_OscConfig+0x390>
 8002a14:	e027      	b.n	8002a66 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002a16:	f7ff fc07 	bl	8002228 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fe73 	bl	8001704 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a22:	f7fe fe6f 	bl	8001704 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1a1      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a34:	f7ff fc09 	bl	800224a <LL_RCC_LSI2_IsReady>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002a3e:	f7ff fbbf 	bl	80021c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a42:	f7fe fe5f 	bl	8001704 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a4a:	f7fe fe5b 	bl	8001704 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e18d      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a5c:	f7ff fbc1 	bl	80021e2 <LL_RCC_LSI1_IsReady>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f1      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d05b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a72:	4bb5      	ldr	r3, [pc, #724]	; (8002d48 <HAL_RCC_OscConfig+0x6e0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d114      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a7e:	f7ff fa5f 	bl	8001f40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fe3f 	bl	8001704 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe fe3b 	bl	8001704 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e16d      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4baa      	ldr	r3, [pc, #680]	; (8002d48 <HAL_RCC_OscConfig+0x6e0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x44e>
 8002ab0:	f7ff fb1f 	bl	80020f2 <LL_RCC_LSE_Enable>
 8002ab4:	e00c      	b.n	8002ad0 <HAL_RCC_OscConfig+0x468>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d104      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x460>
 8002abe:	f7ff fb3a 	bl	8002136 <LL_RCC_LSE_EnableBypass>
 8002ac2:	f7ff fb16 	bl	80020f2 <LL_RCC_LSE_Enable>
 8002ac6:	e003      	b.n	8002ad0 <HAL_RCC_OscConfig+0x468>
 8002ac8:	f7ff fb24 	bl	8002114 <LL_RCC_LSE_Disable>
 8002acc:	f7ff fb44 	bl	8002158 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d014      	beq.n	8002b02 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fe14 	bl	8001704 <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fe10 	bl	8001704 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e140      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002af6:	f7ff fb40 	bl	800217a <LL_RCC_LSE_IsReady>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x478>
 8002b00:	e013      	b.n	8002b2a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fdff 	bl	8001704 <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fdfb 	bl	8001704 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e12b      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b20:	f7ff fb2b 	bl	800217a <LL_RCC_LSE_IsReady>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1ef      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d02c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d014      	beq.n	8002b68 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b3e:	f7ff faa4 	bl	800208a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fddf 	bl	8001704 <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4a:	f7fe fddb 	bl	8001704 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e10d      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b5c:	f7ff fab7 	bl	80020ce <LL_RCC_HSI48_IsReady>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f1      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
 8002b66:	e013      	b.n	8002b90 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b68:	f7ff faa0 	bl	80020ac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fdca 	bl	8001704 <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b74:	f7fe fdc6 	bl	8001704 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0f8      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b86:	f7ff faa2 	bl	80020ce <LL_RCC_HSI48_IsReady>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f1      	bne.n	8002b74 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80ee 	beq.w	8002d76 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9a:	f7ff fc00 	bl	800239e <LL_RCC_GetSysClkSource>
 8002b9e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	f040 80af 	bne.w	8002d10 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d123      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d114      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d10d      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d05d      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d058      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0ab      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c20:	f7ff fc73 	bl	800250a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c24:	f7fe fd6e 	bl	8001704 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fd6a 	bl	8001704 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e09c      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ef      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <HAL_RCC_OscConfig+0x6e4>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c5e:	4311      	orrs	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c64:	0212      	lsls	r2, r2, #8
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c82:	f7ff fc33 	bl	80024ec <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c94:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c96:	f7fe fd35 	bl	8001704 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fd31 	bl	8001704 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e063      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ef      	beq.n	8002c9e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbe:	e05a      	b.n	8002d76 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e059      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d151      	bne.n	8002d76 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cd2:	f7ff fc0b 	bl	80024ec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ce6:	f7fe fd0d 	bl	8001704 <HAL_GetTick>
 8002cea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fd09 	bl	8001704 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e03b      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ef      	beq.n	8002cee <HAL_RCC_OscConfig+0x686>
 8002d0e:	e032      	b.n	8002d76 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d02d      	beq.n	8002d72 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	f7ff fbf8 	bl	800250a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d24:	f023 0303 	bic.w	r3, r3, #3
 8002d28:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d34:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fce1 	bl	8001704 <HAL_GetTick>
 8002d42:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d44:	e00d      	b.n	8002d62 <HAL_RCC_OscConfig+0x6fa>
 8002d46:	bf00      	nop
 8002d48:	58000400 	.word	0x58000400
 8002d4c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fcd8 	bl	8001704 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ef      	bne.n	8002d50 <HAL_RCC_OscConfig+0x6e8>
 8002d70:	e001      	b.n	8002d76 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3734      	adds	r7, #52	; 0x34
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e12d      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b98      	ldr	r3, [pc, #608]	; (8002ff8 <HAL_RCC_ClockConfig+0x278>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d91b      	bls.n	8002dda <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b95      	ldr	r3, [pc, #596]	; (8002ff8 <HAL_RCC_ClockConfig+0x278>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 0207 	bic.w	r2, r3, #7
 8002daa:	4993      	ldr	r1, [pc, #588]	; (8002ff8 <HAL_RCC_ClockConfig+0x278>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db2:	f7fe fca7 	bl	8001704 <HAL_GetTick>
 8002db6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dba:	f7fe fca3 	bl	8001704 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e111      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dcc:	4b8a      	ldr	r3, [pc, #552]	; (8002ff8 <HAL_RCC_ClockConfig+0x278>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d1ef      	bne.n	8002dba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fae3 	bl	80023b6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002df0:	f7fe fc88 	bl	8001704 <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002df8:	f7fe fc84 	bl	8001704 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0f2      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e0a:	f7ff fbd0 	bl	80025ae <LL_RCC_IsActiveFlag_HPRE>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f1      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d016      	beq.n	8002e4e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fada 	bl	80023de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe fc6b 	bl	8001704 <HAL_GetTick>
 8002e2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e32:	f7fe fc67 	bl	8001704 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0d5      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e44:	f7ff fbc5 	bl	80025d2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f1      	beq.n	8002e32 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fad3 	bl	800240a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e64:	f7fe fc4e 	bl	8001704 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e6c:	f7fe fc4a 	bl	8001704 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0b8      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e7e:	f7ff fbbb 	bl	80025f8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f1      	beq.n	8002e6c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff facd 	bl	8002438 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe fc31 	bl	8001704 <HAL_GetTick>
 8002ea2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ea6:	f7fe fc2d 	bl	8001704 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e09b      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002eb8:	f7ff fbb1 	bl	800261e <LL_RCC_IsActiveFlag_PPRE1>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f1      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d017      	beq.n	8002efe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fac3 	bl	8002460 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eda:	f7fe fc13 	bl	8001704 <HAL_GetTick>
 8002ede:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ee2:	f7fe fc0f 	bl	8001704 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e07d      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ef4:	f7ff fba5 	bl	8002642 <LL_RCC_IsActiveFlag_PPRE2>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f1      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d043      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d106      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f12:	f7ff f863 	bl	8001fdc <LL_RCC_HSE_IsReady>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d11e      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e067      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f28:	f7ff fafe 	bl	8002528 <LL_RCC_PLL_IsReady>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d113      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e05c      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f3e:	f7ff f9cb 	bl	80022d8 <LL_RCC_MSI_IsReady>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d108      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e051      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f4c:	f7ff f876 	bl	800203c <LL_RCC_HSI_IsReady>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e04a      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fa09 	bl	8002376 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f64:	f7fe fbce 	bl	8001704 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fe fbca 	bl	8001704 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e036      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	f7ff fa0c 	bl	800239e <LL_RCC_GetSysClkSource>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d1ec      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_ClockConfig+0x278>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d21b      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa0:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_RCC_ClockConfig+0x278>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 0207 	bic.w	r2, r3, #7
 8002fa8:	4913      	ldr	r1, [pc, #76]	; (8002ff8 <HAL_RCC_ClockConfig+0x278>)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb0:	f7fe fba8 	bl	8001704 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fb8:	f7fe fba4 	bl	8001704 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e012      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x278>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1ef      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fd8:	f000 f87e 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_RCC_ClockConfig+0x27c>)
 8002fe0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002fe2:	f7fe fb9b 	bl	800171c <HAL_GetTickPrio>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fb3d 	bl	8001668 <HAL_InitTick>
 8002fee:	4603      	mov	r3, r0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	58004000 	.word	0x58004000
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003006:	f7ff f9ca 	bl	800239e <LL_RCC_GetSysClkSource>
 800300a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003012:	f7ff f986 	bl	8002322 <LL_RCC_MSI_GetRange>
 8003016:	4603      	mov	r3, r0
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	4a2b      	ldr	r2, [pc, #172]	; (80030cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e04b      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b04      	cmp	r3, #4
 800302c:	d102      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e045      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b08      	cmp	r3, #8
 8003038:	d10a      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800303a:	f7fe ff9f 	bl	8001f7c <LL_RCC_HSE_IsEnabledDiv2>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	d102      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e03a      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800304a:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e037      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003050:	f7ff faa1 	bl	8002596 <LL_RCC_PLL_GetMainSource>
 8003054:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d003      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x64>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d003      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x6a>
 8003062:	e00d      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003064:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003066:	60bb      	str	r3, [r7, #8]
        break;
 8003068:	e015      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800306a:	f7fe ff87 	bl	8001f7c <LL_RCC_HSE_IsEnabledDiv2>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d102      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003076:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003078:	e00d      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800307c:	60bb      	str	r3, [r7, #8]
        break;
 800307e:	e00a      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003080:	f7ff f94f 	bl	8002322 <LL_RCC_MSI_GetRange>
 8003084:	4603      	mov	r3, r0
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	60bb      	str	r3, [r7, #8]
        break;
 8003094:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003096:	f7ff fa59 	bl	800254c <LL_RCC_PLL_GetN>
 800309a:	4602      	mov	r2, r0
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	fb03 f402 	mul.w	r4, r3, r2
 80030a2:	f7ff fa6c 	bl	800257e <LL_RCC_PLL_GetDivider>
 80030a6:	4603      	mov	r3, r0
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	3301      	adds	r3, #1
 80030ac:	fbb4 f4f3 	udiv	r4, r4, r3
 80030b0:	f7ff fa59 	bl	8002566 <LL_RCC_PLL_GetR>
 80030b4:	4603      	mov	r3, r0
 80030b6:	0f5b      	lsrs	r3, r3, #29
 80030b8:	3301      	adds	r3, #1
 80030ba:	fbb4 f3f3 	udiv	r3, r4, r3
 80030be:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80030c0:	68fb      	ldr	r3, [r7, #12]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}
 80030ca:	bf00      	nop
 80030cc:	08015520 	.word	0x08015520
 80030d0:	00f42400 	.word	0x00f42400
 80030d4:	01e84800 	.word	0x01e84800

080030d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d8:	b598      	push	{r3, r4, r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030dc:	f7ff ff90 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 80030e0:	4604      	mov	r4, r0
 80030e2:	f7ff f9d1 	bl	8002488 <LL_RCC_GetAHBPrescaler>
 80030e6:	4603      	mov	r3, r0
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	4a03      	ldr	r2, [pc, #12]	; (80030fc <HAL_RCC_GetHCLKFreq+0x24>)
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd98      	pop	{r3, r4, r7, pc}
 80030fc:	080154c0 	.word	0x080154c0

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003100:	b598      	push	{r3, r4, r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003104:	f7ff ffe8 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 8003108:	4604      	mov	r4, r0
 800310a:	f7ff f9d7 	bl	80024bc <LL_RCC_GetAPB1Prescaler>
 800310e:	4603      	mov	r3, r0
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd98      	pop	{r3, r4, r7, pc}
 8003128:	08015500 	.word	0x08015500

0800312c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800312c:	b598      	push	{r3, r4, r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003130:	f7ff ffd2 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 8003134:	4604      	mov	r4, r0
 8003136:	f7ff f9cd 	bl	80024d4 <LL_RCC_GetAPB2Prescaler>
 800313a:	4603      	mov	r3, r0
 800313c:	0adb      	lsrs	r3, r3, #11
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	4a04      	ldr	r2, [pc, #16]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd98      	pop	{r3, r4, r7, pc}
 8003154:	08015500 	.word	0x08015500

08003158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2bb0      	cmp	r3, #176	; 0xb0
 8003164:	d903      	bls.n	800316e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e007      	b.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	4a11      	ldr	r2, [pc, #68]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800317e:	f7ff f98f 	bl	80024a0 <LL_RCC_GetAHB4Prescaler>
 8003182:	4603      	mov	r3, r0
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	0c9c      	lsrs	r4, r3, #18
 80031a2:	f7fe fedd 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4619      	mov	r1, r3
 80031aa:	4620      	mov	r0, r4
 80031ac:	f000 f80c 	bl	80031c8 <RCC_SetFlashLatency>
 80031b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	bf00      	nop
 80031bc:	08015520 	.word	0x08015520
 80031c0:	080154c0 	.word	0x080154c0
 80031c4:	431bde83 	.word	0x431bde83

080031c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b093      	sub	sp, #76	; 0x4c
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <RCC_SetFlashLatency+0xf0>)
 80031d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80031d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80031de:	4a37      	ldr	r2, [pc, #220]	; (80032bc <RCC_SetFlashLatency+0xf4>)
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80031e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80031ea:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <RCC_SetFlashLatency+0xf8>)
 80031ec:	f107 040c 	add.w	r4, r7, #12
 80031f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031f6:	2300      	movs	r3, #0
 80031f8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003200:	d11c      	bne.n	800323c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003202:	2300      	movs	r3, #0
 8003204:	643b      	str	r3, [r7, #64]	; 0x40
 8003206:	e015      	b.n	8003234 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003210:	4413      	add	r3, r2
 8003212:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d808      	bhi.n	800322e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800321c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003224:	4413      	add	r3, r2
 8003226:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800322c:	e022      	b.n	8003274 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800322e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003230:	3301      	adds	r3, #1
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
 8003234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003236:	2b03      	cmp	r3, #3
 8003238:	d9e6      	bls.n	8003208 <RCC_SetFlashLatency+0x40>
 800323a:	e01b      	b.n	8003274 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800323c:	2300      	movs	r3, #0
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	e015      	b.n	800326e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800324a:	4413      	add	r3, r2
 800324c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	429a      	cmp	r2, r3
 8003254:	d808      	bhi.n	8003268 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800325e:	4413      	add	r3, r2
 8003260:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003266:	e005      	b.n	8003274 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	3301      	adds	r3, #1
 800326c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003270:	2b02      	cmp	r3, #2
 8003272:	d9e6      	bls.n	8003242 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <RCC_SetFlashLatency+0xfc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 0207 	bic.w	r2, r3, #7
 800327c:	4911      	ldr	r1, [pc, #68]	; (80032c4 <RCC_SetFlashLatency+0xfc>)
 800327e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003284:	f7fe fa3e 	bl	8001704 <HAL_GetTick>
 8003288:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800328a:	e008      	b.n	800329e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800328c:	f7fe fa3a 	bl	8001704 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e007      	b.n	80032ae <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <RCC_SetFlashLatency+0xfc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1ef      	bne.n	800328c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	374c      	adds	r7, #76	; 0x4c
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}
 80032b6:	bf00      	nop
 80032b8:	0801222c 	.word	0x0801222c
 80032bc:	0801223c 	.word	0x0801223c
 80032c0:	08012248 	.word	0x08012248
 80032c4:	58004000 	.word	0x58004000

080032c8 <LL_RCC_LSE_IsEnabled>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <LL_RCC_LSE_IsEnabled+0x18>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_RCC_LSE_IsReady>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d101      	bne.n	8003304 <LL_RCC_LSE_IsReady+0x18>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <LL_RCC_LSE_IsReady+0x1a>
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_RCC_MSI_EnablePLLMode>:
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	6013      	str	r3, [r2, #0]
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_RCC_SetRFWKPClockSource>:
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_RCC_SetSMPSClockSource>:
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f023 0203 	bic.w	r2, r3, #3
 800336c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4313      	orrs	r3, r2
 8003374:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_RCC_SetSMPSPrescaler>:
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4313      	orrs	r3, r2
 800339c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <LL_RCC_SetUSARTClockSource>:
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_RCC_SetLPUARTClockSource>:
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <LL_RCC_SetI2CClockSource>:
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800341a:	43db      	mvns	r3, r3
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_RCC_SetLPTIMClockSource>:
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003448:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0c1b      	lsrs	r3, r3, #16
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	43db      	mvns	r3, r3
 8003454:	401a      	ands	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <LL_RCC_SetSAIClockSource>:
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_RCC_SetRNGClockSource>:
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80034a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80034b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_RCC_SetCLK48ClockSource>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80034d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_RCC_SetUSBClockSource>:
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ffe3 	bl	80034c8 <LL_RCC_SetCLK48ClockSource>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <LL_RCC_SetADCClockSource>:
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800351e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <LL_RCC_SetRTCClockSource>:
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800354a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <LL_RCC_GetRTCClockSource>:
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_RCC_ForceBackupDomainReset>:
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <LL_RCC_ReleaseBackupDomainReset>:
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80035a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_RCC_PLLSAI1_Enable>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <LL_RCC_PLLSAI1_Disable>:
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035f0:	6013      	str	r3, [r2, #0]
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_RCC_PLLSAI1_IsReady>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800360a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360e:	d101      	bne.n	8003614 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003628:	2300      	movs	r3, #0
 800362a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800362c:	2300      	movs	r3, #0
 800362e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d034      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003644:	d021      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003646:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800364a:	d81b      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800364c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003650:	d01d      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003656:	d815      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800365c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003660:	d110      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800366c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003670:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003672:	e00d      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f94d 	bl	8003918 <RCCEx_PLLSAI1_ConfigNP>
 800367e:	4603      	mov	r3, r0
 8003680:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003682:	e005      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	77fb      	strb	r3, [r7, #31]
        break;
 8003688:	e002      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800368e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003690:	7ffb      	ldrb	r3, [r7, #31]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fee8 	bl	8003470 <LL_RCC_SetSAIClockSource>
 80036a0:	e001      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
 80036a4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d046      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80036b2:	f7ff ff56 	bl	8003562 <LL_RCC_GetRTCClockSource>
 80036b6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d03c      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80036c2:	f7fe fc3d 	bl	8001f40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff30 	bl	8003536 <LL_RCC_SetRTCClockSource>
 80036d6:	e02e      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80036e2:	f7ff ff4b 	bl	800357c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80036e6:	f7ff ff5a 	bl	800359e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80036f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003702:	f7ff fde1 	bl	80032c8 <LL_RCC_LSE_IsEnabled>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d114      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800370c:	f7fd fffa 	bl	8001704 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003712:	e00b      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fd fff6 	bl	8001704 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d902      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	77fb      	strb	r3, [r7, #31]
              break;
 800372a:	e004      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800372c:	f7ff fdde 	bl	80032ec <LL_RCC_LSE_IsReady>
 8003730:	4603      	mov	r3, r0
 8003732:	2b01      	cmp	r3, #1
 8003734:	d1ee      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003736:	7ffb      	ldrb	r3, [r7, #31]
 8003738:	77bb      	strb	r3, [r7, #30]
 800373a:	e001      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fe2a 	bl	80033aa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fe35 	bl	80033d6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fe5d 	bl	800343c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fe52 	bl	800343c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fe2a 	bl	8003402 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fe1f 	bl	8003402 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d022      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fe8d 	bl	80034f4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e2:	d107      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80037e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fc:	d10b      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f8e3 	bl	80039ce <RCCEx_PLLSAI1_ConfigNQ>
 8003808:	4603      	mov	r3, r0
 800380a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800380c:	7ffb      	ldrb	r3, [r7, #31]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003812:	7ffb      	ldrb	r3, [r7, #31]
 8003814:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02b      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d008      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003834:	d003      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fe2a 	bl	800349c <LL_RCC_SetRNGClockSource>
 8003848:	e00a      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	2000      	movs	r0, #0
 8003856:	f7ff fe21 	bl	800349c <LL_RCC_SetRNGClockSource>
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f7ff fe34 	bl	80034c8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003868:	d107      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003878:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	2b00      	cmp	r3, #0
 8003884:	d022      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fe3d 	bl	800350a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003898:	d107      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b2:	d10b      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f8e3 	bl	8003a84 <RCCEx_PLLSAI1_ConfigNR>
 80038be:	4603      	mov	r3, r0
 80038c0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80038c8:	7ffb      	ldrb	r3, [r7, #31]
 80038ca:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d004      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fd26 	bl	800332e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fd45 	bl	8003382 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fd2c 	bl	800335a <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003902:	7fbb      	ldrb	r3, [r7, #30]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003910:	f7ff fcfe 	bl	8003310 <LL_RCC_MSI_EnablePLLMode>
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}

08003918 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003924:	f7ff fe5b 	bl	80035de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003928:	f7fd feec 	bl	8001704 <HAL_GetTick>
 800392c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800392e:	e009      	b.n	8003944 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003930:	f7fd fee8 	bl	8001704 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	73fb      	strb	r3, [r7, #15]
      break;
 8003942:	e004      	b.n	800394e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003944:	f7ff fe5a 	bl	80035fc <LL_RCC_PLLSAI1_IsReady>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d137      	bne.n	80039c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003968:	4313      	orrs	r3, r2
 800396a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397e:	4313      	orrs	r3, r2
 8003980:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003982:	f7ff fe1d 	bl	80035c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003986:	f7fd febd 	bl	8001704 <HAL_GetTick>
 800398a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800398c:	e009      	b.n	80039a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800398e:	f7fd feb9 	bl	8001704 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d902      	bls.n	80039a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	73fb      	strb	r3, [r7, #15]
        break;
 80039a0:	e004      	b.n	80039ac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039a2:	f7ff fe2b 	bl	80035fc <LL_RCC_PLLSAI1_IsReady>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d1f0      	bne.n	800398e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c0:	4313      	orrs	r3, r2
 80039c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039da:	f7ff fe00 	bl	80035de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039de:	f7fd fe91 	bl	8001704 <HAL_GetTick>
 80039e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039e4:	e009      	b.n	80039fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e6:	f7fd fe8d 	bl	8001704 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d902      	bls.n	80039fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e004      	b.n	8003a04 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039fa:	f7ff fdff 	bl	80035fc <LL_RCC_PLLSAI1_IsReady>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d137      	bne.n	8003a7a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a34:	4313      	orrs	r3, r2
 8003a36:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a38:	f7ff fdc2 	bl	80035c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fd fe62 	bl	8001704 <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a42:	e009      	b.n	8003a58 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a44:	f7fd fe5e 	bl	8001704 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	73fb      	strb	r3, [r7, #15]
        break;
 8003a56:	e004      	b.n	8003a62 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a58:	f7ff fdd0 	bl	80035fc <LL_RCC_PLLSAI1_IsReady>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d1f0      	bne.n	8003a44 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d108      	bne.n	8003a7a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a76:	4313      	orrs	r3, r2
 8003a78:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a90:	f7ff fda5 	bl	80035de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a94:	f7fd fe36 	bl	8001704 <HAL_GetTick>
 8003a98:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a9a:	e009      	b.n	8003ab0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a9c:	f7fd fe32 	bl	8001704 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d902      	bls.n	8003ab0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	73fb      	strb	r3, [r7, #15]
      break;
 8003aae:	e004      	b.n	8003aba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ab0:	f7ff fda4 	bl	80035fc <LL_RCC_PLLSAI1_IsReady>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d137      	bne.n	8003b30 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aea:	4313      	orrs	r3, r2
 8003aec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003aee:	f7ff fd67 	bl	80035c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af2:	f7fd fe07 	bl	8001704 <HAL_GetTick>
 8003af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003af8:	e009      	b.n	8003b0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afa:	f7fd fe03 	bl	8001704 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d902      	bls.n	8003b0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b0c:	e004      	b.n	8003b18 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b0e:	f7ff fd75 	bl	80035fc <LL_RCC_PLLSAI1_IsReady>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d1f0      	bne.n	8003afa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d108      	bne.n	8003b30 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e095      	b.n	8003c78 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d108      	bne.n	8003b66 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b5c:	d009      	beq.n	8003b72 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	61da      	str	r2, [r3, #28]
 8003b64:	e005      	b.n	8003b72 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fd fb5b 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb2:	d902      	bls.n	8003bba <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e002      	b.n	8003bc0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bc8:	d007      	beq.n	8003bda <HAL_SPI_Init+0xa0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	ea42 0103 	orr.w	r1, r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0204 	and.w	r2, r3, #4
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c56:	ea42 0103 	orr.w	r1, r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x26>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e1fb      	b.n	800409e <HAL_SPI_TransmitReceive+0x41e>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cae:	f7fd fd29 	bl	8001704 <HAL_GetTick>
 8003cb2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cca:	7efb      	ldrb	r3, [r7, #27]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d00e      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x6e>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd6:	d106      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x66>
 8003ce0:	7efb      	ldrb	r3, [r7, #27]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d003      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003cec:	e1cd      	b.n	800408a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x80>
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d06:	e1c0      	b.n	800408a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d003      	beq.n	8003d1c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2205      	movs	r2, #5
 8003d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d5e:	d802      	bhi.n	8003d66 <HAL_SPI_TransmitReceive+0xe6>
 8003d60:	8a3b      	ldrh	r3, [r7, #16]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d908      	bls.n	8003d78 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	e007      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d007      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dae:	d97c      	bls.n	8003eaa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_TransmitReceive+0x13e>
 8003db8:	8a7b      	ldrh	r3, [r7, #18]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d169      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de2:	e056      	b.n	8003e92 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d11b      	bne.n	8003e2a <HAL_SPI_TransmitReceive+0x1aa>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d016      	beq.n	8003e2a <HAL_SPI_TransmitReceive+0x1aa>
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d113      	bne.n	8003e2a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	881a      	ldrh	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	1c9a      	adds	r2, r3, #2
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d11c      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x1f2>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	1c9a      	adds	r2, r3, #2
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e72:	f7fd fc47 	bl	8001704 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d807      	bhi.n	8003e92 <HAL_SPI_TransmitReceive+0x212>
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d003      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e90:	e0fb      	b.n	800408a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1a3      	bne.n	8003de4 <HAL_SPI_TransmitReceive+0x164>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d19d      	bne.n	8003de4 <HAL_SPI_TransmitReceive+0x164>
 8003ea8:	e0df      	b.n	800406a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x23a>
 8003eb2:	8a7b      	ldrh	r3, [r7, #18]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	f040 80cb 	bne.w	8004050 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d912      	bls.n	8003eea <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	881a      	ldrh	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	1c9a      	adds	r2, r3, #2
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b02      	subs	r3, #2
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ee8:	e0b2      	b.n	8004050 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	7812      	ldrb	r2, [r2, #0]
 8003ef6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f10:	e09e      	b.n	8004050 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d134      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x30a>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02f      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x30a>
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d12c      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d912      	bls.n	8003f60 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	881a      	ldrh	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	1c9a      	adds	r2, r3, #2
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b02      	subs	r3, #2
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f5e:	e012      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	7812      	ldrb	r2, [r2, #0]
 8003f6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d148      	bne.n	800402a <HAL_SPI_TransmitReceive+0x3aa>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d042      	beq.n	800402a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d923      	bls.n	8003ff8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	b292      	uxth	r2, r2
 8003fbc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	1c9a      	adds	r2, r3, #2
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b02      	subs	r3, #2
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d81f      	bhi.n	8004026 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	e016      	b.n	8004026 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f103 020c 	add.w	r2, r3, #12
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004026:	2301      	movs	r3, #1
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800402a:	f7fd fb6b 	bl	8001704 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004036:	429a      	cmp	r2, r3
 8004038:	d803      	bhi.n	8004042 <HAL_SPI_TransmitReceive+0x3c2>
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d102      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x3c8>
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800404e:	e01c      	b.n	800408a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	f47f af5b 	bne.w	8003f12 <HAL_SPI_TransmitReceive+0x292>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f af54 	bne.w	8003f12 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f930 	bl	80042d4 <SPI_EndRxTxTransaction>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d006      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	661a      	str	r2, [r3, #96]	; 0x60
 8004086:	e000      	b.n	800408a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004088:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800409a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3728      	adds	r7, #40	; 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040b8:	f7fd fb24 	bl	8001704 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040c8:	f7fd fb1c 	bl	8001704 <HAL_GetTick>
 80040cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	015b      	lsls	r3, r3, #5
 80040d4:	0d1b      	lsrs	r3, r3, #20
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040de:	e054      	b.n	800418a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d050      	beq.n	800418a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040e8:	f7fd fb0c 	bl	8001704 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d902      	bls.n	80040fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d13d      	bne.n	800417a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800410c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004116:	d111      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004120:	d004      	beq.n	800412c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d107      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004144:	d10f      	bne.n	8004166 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004164:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e017      	b.n	80041aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3b01      	subs	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d19b      	bne.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000004 	.word	0x20000004

080041b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041c6:	f7fd fa9d 	bl	8001704 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	4413      	add	r3, r2
 80041d4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041d6:	f7fd fa95 	bl	8001704 <HAL_GetTick>
 80041da:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80041dc:	4b3c      	ldr	r3, [pc, #240]	; (80042d0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00da      	lsls	r2, r3, #3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	0d1b      	lsrs	r3, r3, #20
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80041f4:	e05f      	b.n	80042b6 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041fc:	d106      	bne.n	800420c <SPI_WaitFifoStateUntilTimeout+0x54>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d050      	beq.n	80042b6 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004214:	f7fd fa76 	bl	8001704 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	429a      	cmp	r2, r3
 8004222:	d902      	bls.n	800422a <SPI_WaitFifoStateUntilTimeout+0x72>
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d13d      	bne.n	80042a6 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004238:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004242:	d111      	bne.n	8004268 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424c:	d004      	beq.n	8004258 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	d107      	bne.n	8004268 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004266:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004270:	d10f      	bne.n	8004292 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e010      	b.n	80042c8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d197      	bne.n	80041f6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3720      	adds	r7, #32
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000004 	.word	0x20000004

080042d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff ff63 	bl	80041b8 <SPI_WaitFifoStateUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e027      	b.n	8004358 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7ff fec8 	bl	80040a8 <SPI_WaitFlagStateUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e014      	b.n	8004358 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff ff3c 	bl	80041b8 <SPI_WaitFifoStateUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e000      	b.n	8004358 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <LL_RCC_GetUSARTClockSource>:
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4013      	ands	r3, r2
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_RCC_GetLPUARTClockSource>:
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4013      	ands	r3, r2
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e042      	b.n	8004438 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fc ff6f 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2224      	movs	r2, #36	; 0x24
 80043ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f82c 	bl	8004440 <UART_SetConfig>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e022      	b.n	8004438 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa26 	bl	800484c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800440e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800441e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 faad 	bl	8004990 <UART_CheckIdleState>
 8004436:	4603      	mov	r3, r0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	4313      	orrs	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4ba3      	ldr	r3, [pc, #652]	; (80046f8 <UART_SetConfig+0x2b8>)
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	69f9      	ldr	r1, [r7, #28]
 8004474:	430b      	orrs	r3, r1
 8004476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a98      	ldr	r2, [pc, #608]	; (80046fc <UART_SetConfig+0x2bc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	69f9      	ldr	r1, [r7, #28]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f023 010f 	bic.w	r1, r3, #15
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a89      	ldr	r2, [pc, #548]	; (8004700 <UART_SetConfig+0x2c0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d120      	bne.n	8004522 <UART_SetConfig+0xe2>
 80044e0:	2003      	movs	r0, #3
 80044e2:	f7ff ff3d 	bl	8004360 <LL_RCC_GetUSARTClockSource>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d817      	bhi.n	800451c <UART_SetConfig+0xdc>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0xb4>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004505 	.word	0x08004505
 80044f8:	08004511 	.word	0x08004511
 80044fc:	0800450b 	.word	0x0800450b
 8004500:	08004517 	.word	0x08004517
 8004504:	2301      	movs	r3, #1
 8004506:	76fb      	strb	r3, [r7, #27]
 8004508:	e038      	b.n	800457c <UART_SetConfig+0x13c>
 800450a:	2302      	movs	r3, #2
 800450c:	76fb      	strb	r3, [r7, #27]
 800450e:	e035      	b.n	800457c <UART_SetConfig+0x13c>
 8004510:	2304      	movs	r3, #4
 8004512:	76fb      	strb	r3, [r7, #27]
 8004514:	e032      	b.n	800457c <UART_SetConfig+0x13c>
 8004516:	2308      	movs	r3, #8
 8004518:	76fb      	strb	r3, [r7, #27]
 800451a:	e02f      	b.n	800457c <UART_SetConfig+0x13c>
 800451c:	2310      	movs	r3, #16
 800451e:	76fb      	strb	r3, [r7, #27]
 8004520:	e02c      	b.n	800457c <UART_SetConfig+0x13c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a75      	ldr	r2, [pc, #468]	; (80046fc <UART_SetConfig+0x2bc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d125      	bne.n	8004578 <UART_SetConfig+0x138>
 800452c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004530:	f7ff ff26 	bl	8004380 <LL_RCC_GetLPUARTClockSource>
 8004534:	4603      	mov	r3, r0
 8004536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800453a:	d017      	beq.n	800456c <UART_SetConfig+0x12c>
 800453c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004540:	d817      	bhi.n	8004572 <UART_SetConfig+0x132>
 8004542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004546:	d00b      	beq.n	8004560 <UART_SetConfig+0x120>
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454c:	d811      	bhi.n	8004572 <UART_SetConfig+0x132>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <UART_SetConfig+0x11a>
 8004552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004556:	d006      	beq.n	8004566 <UART_SetConfig+0x126>
 8004558:	e00b      	b.n	8004572 <UART_SetConfig+0x132>
 800455a:	2300      	movs	r3, #0
 800455c:	76fb      	strb	r3, [r7, #27]
 800455e:	e00d      	b.n	800457c <UART_SetConfig+0x13c>
 8004560:	2302      	movs	r3, #2
 8004562:	76fb      	strb	r3, [r7, #27]
 8004564:	e00a      	b.n	800457c <UART_SetConfig+0x13c>
 8004566:	2304      	movs	r3, #4
 8004568:	76fb      	strb	r3, [r7, #27]
 800456a:	e007      	b.n	800457c <UART_SetConfig+0x13c>
 800456c:	2308      	movs	r3, #8
 800456e:	76fb      	strb	r3, [r7, #27]
 8004570:	e004      	b.n	800457c <UART_SetConfig+0x13c>
 8004572:	2310      	movs	r3, #16
 8004574:	76fb      	strb	r3, [r7, #27]
 8004576:	e001      	b.n	800457c <UART_SetConfig+0x13c>
 8004578:	2310      	movs	r3, #16
 800457a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5e      	ldr	r2, [pc, #376]	; (80046fc <UART_SetConfig+0x2bc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	f040 808b 	bne.w	800469e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004588:	7efb      	ldrb	r3, [r7, #27]
 800458a:	2b08      	cmp	r3, #8
 800458c:	d823      	bhi.n	80045d6 <UART_SetConfig+0x196>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0x154>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045b9 	.word	0x080045b9
 8004598:	080045d7 	.word	0x080045d7
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045c7 	.word	0x080045c7
 80045a8:	080045d7 	.word	0x080045d7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045d7 	.word	0x080045d7
 80045b4:	080045cf 	.word	0x080045cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7fe fda2 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 80045bc:	6178      	str	r0, [r7, #20]
        break;
 80045be:	e00f      	b.n	80045e0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <UART_SetConfig+0x2c4>)
 80045c2:	617b      	str	r3, [r7, #20]
        break;
 80045c4:	e00c      	b.n	80045e0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c6:	f7fe fd1b 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 80045ca:	6178      	str	r0, [r7, #20]
        break;
 80045cc:	e008      	b.n	80045e0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d2:	617b      	str	r3, [r7, #20]
        break;
 80045d4:	e004      	b.n	80045e0 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	76bb      	strb	r3, [r7, #26]
        break;
 80045de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 811a 	beq.w	800481c <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	4a46      	ldr	r2, [pc, #280]	; (8004708 <UART_SetConfig+0x2c8>)
 80045ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f2:	461a      	mov	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	d305      	bcc.n	8004618 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d902      	bls.n	800461e <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	76bb      	strb	r3, [r7, #26]
 800461c:	e0fe      	b.n	800481c <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4618      	mov	r0, r3
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	4a37      	ldr	r2, [pc, #220]	; (8004708 <UART_SetConfig+0x2c8>)
 800462c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004630:	b29a      	uxth	r2, r3
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	f7fb fe6b 	bl	8000310 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	020b      	lsls	r3, r1, #8
 800464c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004650:	0202      	lsls	r2, r0, #8
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	6849      	ldr	r1, [r1, #4]
 8004656:	0849      	lsrs	r1, r1, #1
 8004658:	4608      	mov	r0, r1
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	1814      	adds	r4, r2, r0
 8004660:	eb43 0501 	adc.w	r5, r3, r1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	461a      	mov	r2, r3
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fb fe4d 	bl	8000310 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4613      	mov	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004684:	d308      	bcc.n	8004698 <UART_SetConfig+0x258>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468c:	d204      	bcs.n	8004698 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	e0c1      	b.n	800481c <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	76bb      	strb	r3, [r7, #26]
 800469c:	e0be      	b.n	800481c <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a6:	d16a      	bne.n	800477e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80046a8:	7efb      	ldrb	r3, [r7, #27]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	2b07      	cmp	r3, #7
 80046ae:	d82d      	bhi.n	800470c <UART_SetConfig+0x2cc>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0x278>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046d9 	.word	0x080046d9
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	0800470d 	.word	0x0800470d
 80046c4:	080046e7 	.word	0x080046e7
 80046c8:	0800470d 	.word	0x0800470d
 80046cc:	0800470d 	.word	0x0800470d
 80046d0:	0800470d 	.word	0x0800470d
 80046d4:	080046ef 	.word	0x080046ef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d8:	f7fe fd28 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 80046dc:	6178      	str	r0, [r7, #20]
        break;
 80046de:	e01a      	b.n	8004716 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <UART_SetConfig+0x2c4>)
 80046e2:	617b      	str	r3, [r7, #20]
        break;
 80046e4:	e017      	b.n	8004716 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046e6:	f7fe fc8b 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 80046ea:	6178      	str	r0, [r7, #20]
        break;
 80046ec:	e013      	b.n	8004716 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f2:	617b      	str	r3, [r7, #20]
        break;
 80046f4:	e00f      	b.n	8004716 <UART_SetConfig+0x2d6>
 80046f6:	bf00      	nop
 80046f8:	cfff69f3 	.word	0xcfff69f3
 80046fc:	40008000 	.word	0x40008000
 8004700:	40013800 	.word	0x40013800
 8004704:	00f42400 	.word	0x00f42400
 8004708:	08015560 	.word	0x08015560
      default:
        pclk = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	76bb      	strb	r3, [r7, #26]
        break;
 8004714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d07f      	beq.n	800481c <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	4a48      	ldr	r2, [pc, #288]	; (8004844 <UART_SetConfig+0x404>)
 8004722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004726:	461a      	mov	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	fbb3 f3f2 	udiv	r3, r3, r2
 800472e:	005a      	lsls	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	441a      	add	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	b29b      	uxth	r3, r3
 8004742:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b0f      	cmp	r3, #15
 8004748:	d916      	bls.n	8004778 <UART_SetConfig+0x338>
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d212      	bcs.n	8004778 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f023 030f 	bic.w	r3, r3, #15
 800475a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	b29b      	uxth	r3, r3
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	b29a      	uxth	r2, r3
 8004768:	89fb      	ldrh	r3, [r7, #14]
 800476a:	4313      	orrs	r3, r2
 800476c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	89fa      	ldrh	r2, [r7, #14]
 8004774:	60da      	str	r2, [r3, #12]
 8004776:	e051      	b.n	800481c <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	76bb      	strb	r3, [r7, #26]
 800477c:	e04e      	b.n	800481c <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800477e:	7efb      	ldrb	r3, [r7, #27]
 8004780:	3b01      	subs	r3, #1
 8004782:	2b07      	cmp	r3, #7
 8004784:	d821      	bhi.n	80047ca <UART_SetConfig+0x38a>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0x34c>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047ad 	.word	0x080047ad
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047cb 	.word	0x080047cb
 8004798:	080047bb 	.word	0x080047bb
 800479c:	080047cb 	.word	0x080047cb
 80047a0:	080047cb 	.word	0x080047cb
 80047a4:	080047cb 	.word	0x080047cb
 80047a8:	080047c3 	.word	0x080047c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7fe fcbe 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 80047b0:	6178      	str	r0, [r7, #20]
        break;
 80047b2:	e00f      	b.n	80047d4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b4:	4b24      	ldr	r3, [pc, #144]	; (8004848 <UART_SetConfig+0x408>)
 80047b6:	617b      	str	r3, [r7, #20]
        break;
 80047b8:	e00c      	b.n	80047d4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ba:	f7fe fc21 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 80047be:	6178      	str	r0, [r7, #20]
        break;
 80047c0:	e008      	b.n	80047d4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c6:	617b      	str	r3, [r7, #20]
        break;
 80047c8:	e004      	b.n	80047d4 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	76bb      	strb	r3, [r7, #26]
        break;
 80047d2:	bf00      	nop
    }

    if (pclk != 0U)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d020      	beq.n	800481c <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	4a19      	ldr	r2, [pc, #100]	; (8004844 <UART_SetConfig+0x404>)
 80047e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e4:	461a      	mov	r2, r3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	441a      	add	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d908      	bls.n	8004818 <UART_SetConfig+0x3d8>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d204      	bcs.n	8004818 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	e001      	b.n	800481c <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004838:	7ebb      	ldrb	r3, [r7, #26]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bdb0      	pop	{r4, r5, r7, pc}
 8004842:	bf00      	nop
 8004844:	08015560 	.word	0x08015560
 8004848:	00f42400 	.word	0x00f42400

0800484c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01a      	beq.n	8004962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494a:	d10a      	bne.n	8004962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af02      	add	r7, sp, #8
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049a0:	f7fc feb0 	bl	8001704 <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d10e      	bne.n	80049d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f82f 	bl	8004a26 <UART_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e025      	b.n	8004a1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d10e      	bne.n	80049fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f819 	bl	8004a26 <UART_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e00f      	b.n	8004a1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a36:	e062      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d05e      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a40:	f7fc fe60 	bl	8001704 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d11d      	bne.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0201 	bic.w	r2, r2, #1
 8004a74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e045      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02e      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aae:	d126      	bne.n	8004afe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ac8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e00f      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4013      	ands	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d08d      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_UARTEx_DisableFifoMode+0x16>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e027      	b.n	8004b8c <HAL_UARTEx_DisableFifoMode+0x66>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e02d      	b.n	8004c0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2224      	movs	r2, #36	; 0x24
 8004bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f84f 	bl	8004c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e02d      	b.n	8004c88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	; 0x24
 8004c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f811 	bl	8004c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d108      	bne.n	8004cb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cb0:	e031      	b.n	8004d16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	0e5b      	lsrs	r3, r3, #25
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	0f5b      	lsrs	r3, r3, #29
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cda:	7bbb      	ldrb	r3, [r7, #14]
 8004cdc:	7b3a      	ldrb	r2, [r7, #12]
 8004cde:	4911      	ldr	r1, [pc, #68]	; (8004d24 <UARTEx_SetNbDataToProcess+0x94>)
 8004ce0:	5c8a      	ldrb	r2, [r1, r2]
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ce6:	7b3a      	ldrb	r2, [r7, #12]
 8004ce8:	490f      	ldr	r1, [pc, #60]	; (8004d28 <UARTEx_SetNbDataToProcess+0x98>)
 8004cea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	7b7a      	ldrb	r2, [r7, #13]
 8004cfc:	4909      	ldr	r1, [pc, #36]	; (8004d24 <UARTEx_SetNbDataToProcess+0x94>)
 8004cfe:	5c8a      	ldrb	r2, [r1, r2]
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d04:	7b7a      	ldrb	r2, [r7, #13]
 8004d06:	4908      	ldr	r1, [pc, #32]	; (8004d28 <UARTEx_SetNbDataToProcess+0x98>)
 8004d08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	08015578 	.word	0x08015578
 8004d28:	08015580 	.word	0x08015580

08004d2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d34:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d62:	b084      	sub	sp, #16
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	f107 0014 	add.w	r0, r7, #20
 8004d70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	b004      	add	sp, #16
 8004da2:	4770      	bx	lr

08004da4 <handle_valid>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4604      	mov	r4, r0
 8004da8:	b168      	cbz	r0, 8004dc6 <handle_valid+0x22>
 8004daa:	6802      	ldr	r2, [r0, #0]
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <handle_valid+0x3c>)
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d007      	beq.n	8004dc2 <handle_valid+0x1e>
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <handle_valid+0x40>)
 8004db4:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <handle_valid+0x44>)
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	490c      	ldr	r1, [pc, #48]	; (8004dec <handle_valid+0x48>)
 8004dba:	2000      	movs	r0, #0
 8004dbc:	4798      	blx	r3
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	bd38      	pop	{r3, r4, r5, pc}
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
 8004dc6:	4d07      	ldr	r5, [pc, #28]	; (8004de4 <handle_valid+0x40>)
 8004dc8:	4a07      	ldr	r2, [pc, #28]	; (8004de8 <handle_valid+0x44>)
 8004dca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004dcc:	4907      	ldr	r1, [pc, #28]	; (8004dec <handle_valid+0x48>)
 8004dce:	4798      	blx	r3
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004dd4:	4a06      	ldr	r2, [pc, #24]	; (8004df0 <handle_valid+0x4c>)
 8004dd6:	4905      	ldr	r1, [pc, #20]	; (8004dec <handle_valid+0x48>)
 8004dd8:	4798      	blx	r3
 8004dda:	4620      	mov	r0, r4
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	bf00      	nop
 8004de0:	acc02845 	.word	0xacc02845
 8004de4:	20000640 	.word	0x20000640
 8004de8:	08015588 	.word	0x08015588
 8004dec:	08015598 	.word	0x08015598
 8004df0:	080155ac 	.word	0x080155ac

08004df4 <teardown_detector>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4605      	mov	r5, r0
 8004df8:	f7ff ffd4 	bl	8004da4 <handle_valid>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	b908      	cbnz	r0, 8004e04 <teardown_detector+0x10>
 8004e00:	4620      	mov	r0, r4
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	f105 0008 	add.w	r0, r5, #8
 8004e08:	f001 fa7e 	bl	8006308 <acc_service_destroy>
 8004e0c:	1d28      	adds	r0, r5, #4
 8004e0e:	f000 fae3 	bl	80053d8 <acc_detector_distance_processing_destroy>
 8004e12:	4620      	mov	r0, r4
 8004e14:	bd38      	pop	{r3, r4, r5, pc}
 8004e16:	bf00      	nop

08004e18 <setup_detector>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	460d      	mov	r5, r1
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	f7ff ffc1 	bl	8004da4 <handle_valid>
 8004e22:	4604      	mov	r4, r0
 8004e24:	b158      	cbz	r0, 8004e3e <setup_detector+0x26>
 8004e26:	b11d      	cbz	r5, 8004e30 <setup_detector+0x18>
 8004e28:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <setup_detector+0x7c>)
 8004e2a:	682a      	ldr	r2, [r5, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d008      	beq.n	8004e42 <setup_detector+0x2a>
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <setup_detector+0x80>)
 8004e32:	4a1a      	ldr	r2, [pc, #104]	; (8004e9c <setup_detector+0x84>)
 8004e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e36:	491a      	ldr	r1, [pc, #104]	; (8004ea0 <setup_detector+0x88>)
 8004e38:	2000      	movs	r0, #0
 8004e3a:	4798      	blx	r3
 8004e3c:	2400      	movs	r4, #0
 8004e3e:	4620      	mov	r0, r4
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004e44:	f001 f9ec 	bl	8006220 <acc_service_create>
 8004e48:	60b0      	str	r0, [r6, #8]
 8004e4a:	b1e0      	cbz	r0, 8004e86 <setup_detector+0x6e>
 8004e4c:	f106 010c 	add.w	r1, r6, #12
 8004e50:	f001 f964 	bl	800611c <acc_service_envelope_get_metadata>
 8004e54:	8ab3      	ldrh	r3, [r6, #20]
 8004e56:	68f1      	ldr	r1, [r6, #12]
 8004e58:	69b2      	ldr	r2, [r6, #24]
 8004e5a:	80ab      	strh	r3, [r5, #4]
 8004e5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004e5e:	62a9      	str	r1, [r5, #40]	; 0x28
 8004e60:	62ea      	str	r2, [r5, #44]	; 0x2c
 8004e62:	1d28      	adds	r0, r5, #4
 8004e64:	61f3      	str	r3, [r6, #28]
 8004e66:	f000 fa05 	bl	8005274 <acc_detector_distance_processing_create>
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	6070      	str	r0, [r6, #4]
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d1e5      	bne.n	8004e3e <setup_detector+0x26>
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <setup_detector+0x80>)
 8004e74:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <setup_detector+0x8c>)
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	4909      	ldr	r1, [pc, #36]	; (8004ea0 <setup_detector+0x88>)
 8004e7a:	4798      	blx	r3
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	462c      	mov	r4, r5
 8004e80:	f7ff ffb8 	bl	8004df4 <teardown_detector>
 8004e84:	e7db      	b.n	8004e3e <setup_detector+0x26>
 8004e86:	4904      	ldr	r1, [pc, #16]	; (8004e98 <setup_detector+0x80>)
 8004e88:	4a07      	ldr	r2, [pc, #28]	; (8004ea8 <setup_detector+0x90>)
 8004e8a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004e8c:	4904      	ldr	r1, [pc, #16]	; (8004ea0 <setup_detector+0x88>)
 8004e8e:	4604      	mov	r4, r0
 8004e90:	47a8      	blx	r5
 8004e92:	e7d4      	b.n	8004e3e <setup_detector+0x26>
 8004e94:	acc12845 	.word	0xacc12845
 8004e98:	20000640 	.word	0x20000640
 8004e9c:	080155f8 	.word	0x080155f8
 8004ea0:	08015598 	.word	0x08015598
 8004ea4:	080155d4 	.word	0x080155d4
 8004ea8:	080155bc 	.word	0x080155bc

08004eac <acc_detector_distance_configuration_create>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4922      	ldr	r1, [pc, #136]	; (8004f38 <acc_detector_distance_configuration_create+0x8c>)
 8004eb0:	ed2d 8b02 	vpush	{d8}
 8004eb4:	2264      	movs	r2, #100	; 0x64
 8004eb6:	203c      	movs	r0, #60	; 0x3c
 8004eb8:	f001 ffe2 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	b368      	cbz	r0, 8004f1c <acc_detector_distance_configuration_create+0x70>
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <acc_detector_distance_configuration_create+0x90>)
 8004ec2:	6003      	str	r3, [r0, #0]
 8004ec4:	f001 f84c 	bl	8005f60 <acc_service_envelope_configuration_create>
 8004ec8:	4605      	mov	r5, r0
 8004eca:	6360      	str	r0, [r4, #52]	; 0x34
 8004ecc:	b378      	cbz	r0, 8004f2e <acc_detector_distance_configuration_create+0x82>
 8004ece:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8004f40 <acc_detector_distance_configuration_create+0x94>
 8004ed2:	4d1c      	ldr	r5, [pc, #112]	; (8004f44 <acc_detector_distance_configuration_create+0x98>)
 8004ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8004ed8:	f001 f8e2 	bl	80060a0 <acc_service_envelope_running_average_factor_set>
 8004edc:	481a      	ldr	r0, [pc, #104]	; (8004f48 <acc_detector_distance_configuration_create+0x9c>)
 8004ede:	491b      	ldr	r1, [pc, #108]	; (8004f4c <acc_detector_distance_configuration_create+0xa0>)
 8004ee0:	61a5      	str	r5, [r4, #24]
 8004ee2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f44f 7548 	mov.w	r5, #800	; 0x320
 8004eec:	61e0      	str	r0, [r4, #28]
 8004eee:	6261      	str	r1, [r4, #36]	; 0x24
 8004ef0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004ef4:	2114      	movs	r1, #20
 8004ef6:	6062      	str	r2, [r4, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8004efe:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
 8004f02:	7223      	strb	r3, [r4, #8]
 8004f04:	f884 3020 	strb.w	r3, [r4, #32]
 8004f08:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f0a:	81a5      	strh	r5, [r4, #12]
 8004f0c:	6120      	str	r0, [r4, #16]
 8004f0e:	82a1      	strh	r1, [r4, #20]
 8004f10:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8004f14:	ecbd 8b02 	vpop	{d8}
 8004f18:	4620      	mov	r0, r4
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <acc_detector_distance_configuration_create+0xa4>)
 8004f1e:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <acc_detector_distance_configuration_create+0xa8>)
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	4905      	ldr	r1, [pc, #20]	; (8004f38 <acc_detector_distance_configuration_create+0x8c>)
 8004f24:	4798      	blx	r3
 8004f26:	ecbd 8b02 	vpop	{d8}
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	bd38      	pop	{r3, r4, r5, pc}
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f001 ffea 	bl	8006f08 <acc_rss_integration_mem_free>
 8004f34:	462c      	mov	r4, r5
 8004f36:	e7ed      	b.n	8004f14 <acc_detector_distance_configuration_create+0x68>
 8004f38:	08015598 	.word	0x08015598
 8004f3c:	acc12845 	.word	0xacc12845
 8004f40:	00000000 	.word	0x00000000
 8004f44:	3df5c28f 	.word	0x3df5c28f
 8004f48:	3cf5c28f 	.word	0x3cf5c28f
 8004f4c:	3ba3d70a 	.word	0x3ba3d70a
 8004f50:	20000640 	.word	0x20000640
 8004f54:	08015610 	.word	0x08015610

08004f58 <acc_detector_distance_configuration_destroy>:
 8004f58:	b1c0      	cbz	r0, 8004f8c <acc_detector_distance_configuration_destroy+0x34>
 8004f5a:	b510      	push	{r4, lr}
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	6800      	ldr	r0, [r0, #0]
 8004f60:	b118      	cbz	r0, 8004f6a <acc_detector_distance_configuration_destroy+0x12>
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <acc_detector_distance_configuration_destroy+0x38>)
 8004f64:	6802      	ldr	r2, [r0, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d007      	beq.n	8004f7a <acc_detector_distance_configuration_destroy+0x22>
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <acc_detector_distance_configuration_destroy+0x3c>)
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <acc_detector_distance_configuration_destroy+0x40>)
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	490a      	ldr	r1, [pc, #40]	; (8004f9c <acc_detector_distance_configuration_destroy+0x44>)
 8004f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f76:	2000      	movs	r0, #0
 8004f78:	4718      	bx	r3
 8004f7a:	3034      	adds	r0, #52	; 0x34
 8004f7c:	f001 f87e 	bl	800607c <acc_service_envelope_configuration_destroy>
 8004f80:	6820      	ldr	r0, [r4, #0]
 8004f82:	f001 ffc1 	bl	8006f08 <acc_rss_integration_mem_free>
 8004f86:	2300      	movs	r3, #0
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd10      	pop	{r4, pc}
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	acc12845 	.word	0xacc12845
 8004f94:	20000640 	.word	0x20000640
 8004f98:	080155f8 	.word	0x080155f8
 8004f9c:	08015598 	.word	0x08015598

08004fa0 <acc_detector_distance_create>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	b120      	cbz	r0, 8004fae <acc_detector_distance_create+0xe>
 8004fa4:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <acc_detector_distance_create+0x78>)
 8004fa6:	6802      	ldr	r2, [r0, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	4604      	mov	r4, r0
 8004fac:	d008      	beq.n	8004fc0 <acc_detector_distance_create+0x20>
 8004fae:	4b1b      	ldr	r3, [pc, #108]	; (800501c <acc_detector_distance_create+0x7c>)
 8004fb0:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <acc_detector_distance_create+0x80>)
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	491b      	ldr	r1, [pc, #108]	; (8005024 <acc_detector_distance_create+0x84>)
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	4798      	blx	r3
 8004fba:	2500      	movs	r5, #0
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004fc2:	f000 fd8d 	bl	8005ae0 <acc_service_requested_start_get>
 8004fc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	d413      	bmi.n	8004ff8 <acc_detector_distance_create+0x58>
 8004fd0:	4914      	ldr	r1, [pc, #80]	; (8005024 <acc_detector_distance_create+0x84>)
 8004fd2:	22a4      	movs	r2, #164	; 0xa4
 8004fd4:	2020      	movs	r0, #32
 8004fd6:	f001 ff53 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8004fda:	4605      	mov	r5, r0
 8004fdc:	b1a0      	cbz	r0, 8005008 <acc_detector_distance_create+0x68>
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <acc_detector_distance_create+0x88>)
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	f7ff ff18 	bl	8004e18 <setup_detector>
 8004fe8:	4604      	mov	r4, r0
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d1e6      	bne.n	8004fbc <acc_detector_distance_create+0x1c>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f001 ff8a 	bl	8006f08 <acc_rss_integration_mem_free>
 8004ff4:	4625      	mov	r5, r4
 8004ff6:	e7e1      	b.n	8004fbc <acc_detector_distance_create+0x1c>
 8004ff8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004ffc:	3b02      	subs	r3, #2
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d8e6      	bhi.n	8004fd0 <acc_detector_distance_create+0x30>
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <acc_detector_distance_create+0x7c>)
 8005004:	4a09      	ldr	r2, [pc, #36]	; (800502c <acc_detector_distance_create+0x8c>)
 8005006:	e7d4      	b.n	8004fb2 <acc_detector_distance_create+0x12>
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <acc_detector_distance_create+0x7c>)
 800500a:	4a09      	ldr	r2, [pc, #36]	; (8005030 <acc_detector_distance_create+0x90>)
 800500c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500e:	4905      	ldr	r1, [pc, #20]	; (8005024 <acc_detector_distance_create+0x84>)
 8005010:	4798      	blx	r3
 8005012:	4628      	mov	r0, r5
 8005014:	bd38      	pop	{r3, r4, r5, pc}
 8005016:	bf00      	nop
 8005018:	acc12845 	.word	0xacc12845
 800501c:	20000640 	.word	0x20000640
 8005020:	080155f8 	.word	0x080155f8
 8005024:	08015598 	.word	0x08015598
 8005028:	acc02845 	.word	0xacc02845
 800502c:	08015630 	.word	0x08015630
 8005030:	08015660 	.word	0x08015660

08005034 <acc_detector_distance_destroy>:
 8005034:	b130      	cbz	r0, 8005044 <acc_detector_distance_destroy+0x10>
 8005036:	b510      	push	{r4, lr}
 8005038:	4604      	mov	r4, r0
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	f7ff feda 	bl	8004df4 <teardown_detector>
 8005040:	b908      	cbnz	r0, 8005046 <acc_detector_distance_destroy+0x12>
 8005042:	bd10      	pop	{r4, pc}
 8005044:	4770      	bx	lr
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	f001 ff5e 	bl	8006f08 <acc_rss_integration_mem_free>
 800504c:	2300      	movs	r3, #0
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	bd10      	pop	{r4, pc}
 8005052:	bf00      	nop

08005054 <acc_detector_distance_activate>:
 8005054:	b510      	push	{r4, lr}
 8005056:	4604      	mov	r4, r0
 8005058:	f7ff fea4 	bl	8004da4 <handle_valid>
 800505c:	b900      	cbnz	r0, 8005060 <acc_detector_distance_activate+0xc>
 800505e:	bd10      	pop	{r4, pc}
 8005060:	68a0      	ldr	r0, [r4, #8]
 8005062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005066:	f000 bca3 	b.w	80059b0 <acc_service_activate>
 800506a:	bf00      	nop

0800506c <acc_detector_distance_deactivate>:
 800506c:	b510      	push	{r4, lr}
 800506e:	4604      	mov	r4, r0
 8005070:	f7ff fe98 	bl	8004da4 <handle_valid>
 8005074:	b900      	cbnz	r0, 8005078 <acc_detector_distance_deactivate+0xc>
 8005076:	bd10      	pop	{r4, pc}
 8005078:	68a0      	ldr	r0, [r4, #8]
 800507a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800507e:	f000 bce5 	b.w	8005a4c <acc_service_deactivate>
 8005082:	bf00      	nop

08005084 <acc_detector_distance_process_data>:
 8005084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005088:	b083      	sub	sp, #12
 800508a:	460d      	mov	r5, r1
 800508c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8005090:	4691      	mov	r9, r2
 8005092:	461e      	mov	r6, r3
 8005094:	4680      	mov	r8, r0
 8005096:	f7ff fe85 	bl	8004da4 <handle_valid>
 800509a:	4607      	mov	r7, r0
 800509c:	b918      	cbnz	r0, 80050a6 <acc_detector_distance_process_data+0x22>
 800509e:	4638      	mov	r0, r7
 80050a0:	b003      	add	sp, #12
 80050a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050a6:	464a      	mov	r2, r9
 80050a8:	ab01      	add	r3, sp, #4
 80050aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80050ae:	4629      	mov	r1, r5
 80050b0:	f000 f9b2 	bl	8005418 <acc_detector_distance_processing_next>
 80050b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050ba:	7013      	strb	r3, [r2, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ee      	beq.n	800509e <acc_detector_distance_process_data+0x1a>
 80050c0:	4284      	cmp	r4, r0
 80050c2:	bf28      	it	cs
 80050c4:	4604      	movcs	r4, r0
 80050c6:	b2a3      	uxth	r3, r4
 80050c8:	ed98 7a03 	vldr	s14, [r8, #12]
 80050cc:	edd8 6a06 	vldr	s13, [r8, #24]
 80050d0:	b303      	cbz	r3, 8005114 <acc_detector_distance_process_data+0x90>
 80050d2:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8005150 <acc_detector_distance_process_data+0xcc>
 80050d6:	4634      	mov	r4, r6
 80050d8:	2200      	movs	r2, #0
 80050da:	1ca8      	adds	r0, r5, #2
 80050dc:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 80050e0:	ee07 1a90 	vmov	s15, r1
 80050e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050e8:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80050ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050f0:	3408      	adds	r4, #8
 80050f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fe:	bfd8      	it	le
 8005100:	eef0 7a46 	vmovle.f32	s15, s12
 8005104:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005108:	f826 1032 	strh.w	r1, [r6, r2, lsl #3]
 800510c:	3201      	adds	r2, #1
 800510e:	b291      	uxth	r1, r2
 8005110:	428b      	cmp	r3, r1
 8005112:	d8e3      	bhi.n	80050dc <acc_detector_distance_process_data+0x58>
 8005114:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005118:	ee07 2a90 	vmov	s15, r2
 800511c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005122:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005126:	8093      	strh	r3, [r2, #4]
 8005128:	ee36 7a87 	vadd.f32	s14, s13, s14
 800512c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800512e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005132:	7193      	strb	r3, [r2, #6]
 8005134:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513c:	bfd8      	it	le
 800513e:	ed9f 7a04 	vldrle	s14, [pc, #16]	; 8005150 <acc_detector_distance_process_data+0xcc>
 8005142:	4638      	mov	r0, r7
 8005144:	ed82 7a02 	vstr	s14, [r2, #8]
 8005148:	b003      	add	sp, #12
 800514a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800514e:	bf00      	nop
 8005150:	00000000 	.word	0x00000000

08005154 <acc_detector_distance_get_next>:
 8005154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005158:	b089      	sub	sp, #36	; 0x24
 800515a:	460f      	mov	r7, r1
 800515c:	4690      	mov	r8, r2
 800515e:	461c      	mov	r4, r3
 8005160:	4606      	mov	r6, r0
 8005162:	f7ff fe1f 	bl	8004da4 <handle_valid>
 8005166:	2800      	cmp	r0, #0
 8005168:	d041      	beq.n	80051ee <acc_detector_distance_get_next+0x9a>
 800516a:	2c00      	cmp	r4, #0
 800516c:	d044      	beq.n	80051f8 <acc_detector_distance_get_next+0xa4>
 800516e:	2300      	movs	r3, #0
 8005170:	f88d 3017 	strb.w	r3, [sp, #23]
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	f10d 0917 	add.w	r9, sp, #23
 800517a:	e027      	b.n	80051cc <acc_detector_distance_get_next+0x78>
 800517c:	69f3      	ldr	r3, [r6, #28]
 800517e:	b113      	cbz	r3, 8005186 <acc_detector_distance_get_next+0x32>
 8005180:	8ab1      	ldrh	r1, [r6, #20]
 8005182:	9806      	ldr	r0, [sp, #24]
 8005184:	4798      	blx	r3
 8005186:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800518a:	b902      	cbnz	r2, 800518e <acc_detector_distance_get_next+0x3a>
 800518c:	78a2      	ldrb	r2, [r4, #2]
 800518e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005192:	70a2      	strb	r2, [r4, #2]
 8005194:	b903      	cbnz	r3, 8005198 <acc_detector_distance_get_next+0x44>
 8005196:	78e3      	ldrb	r3, [r4, #3]
 8005198:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800519c:	70e3      	strb	r3, [r4, #3]
 800519e:	b902      	cbnz	r2, 80051a2 <acc_detector_distance_get_next+0x4e>
 80051a0:	7822      	ldrb	r2, [r4, #0]
 80051a2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80051a6:	7022      	strb	r2, [r4, #0]
 80051a8:	b903      	cbnz	r3, 80051ac <acc_detector_distance_get_next+0x58>
 80051aa:	7863      	ldrb	r3, [r4, #1]
 80051ac:	7063      	strb	r3, [r4, #1]
 80051ae:	e9cd 4901 	strd	r4, r9, [sp, #4]
 80051b2:	f8cd 8000 	str.w	r8, [sp]
 80051b6:	463b      	mov	r3, r7
 80051b8:	8ab2      	ldrh	r2, [r6, #20]
 80051ba:	9906      	ldr	r1, [sp, #24]
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff ff61 	bl	8005084 <acc_detector_distance_process_data>
 80051c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80051c6:	4605      	mov	r5, r0
 80051c8:	b96b      	cbnz	r3, 80051e6 <acc_detector_distance_get_next+0x92>
 80051ca:	b180      	cbz	r0, 80051ee <acc_detector_distance_get_next+0x9a>
 80051cc:	68b0      	ldr	r0, [r6, #8]
 80051ce:	aa07      	add	r2, sp, #28
 80051d0:	a906      	add	r1, sp, #24
 80051d2:	f000 ffc5 	bl	8006160 <acc_service_envelope_get_next_by_reference>
 80051d6:	4605      	mov	r5, r0
 80051d8:	2800      	cmp	r0, #0
 80051da:	d1cf      	bne.n	800517c <acc_detector_distance_get_next+0x28>
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <acc_detector_distance_get_next+0xbc>)
 80051de:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <acc_detector_distance_get_next+0xc0>)
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	490d      	ldr	r1, [pc, #52]	; (8005218 <acc_detector_distance_get_next+0xc4>)
 80051e4:	4798      	blx	r3
 80051e6:	4628      	mov	r0, r5
 80051e8:	b009      	add	sp, #36	; 0x24
 80051ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ee:	2500      	movs	r5, #0
 80051f0:	4628      	mov	r0, r5
 80051f2:	b009      	add	sp, #36	; 0x24
 80051f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <acc_detector_distance_get_next+0xbc>)
 80051fa:	4a08      	ldr	r2, [pc, #32]	; (800521c <acc_detector_distance_get_next+0xc8>)
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	4906      	ldr	r1, [pc, #24]	; (8005218 <acc_detector_distance_get_next+0xc4>)
 8005200:	4620      	mov	r0, r4
 8005202:	4798      	blx	r3
 8005204:	4625      	mov	r5, r4
 8005206:	4628      	mov	r0, r5
 8005208:	b009      	add	sp, #36	; 0x24
 800520a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800520e:	bf00      	nop
 8005210:	20000640 	.word	0x20000640
 8005214:	08015698 	.word	0x08015698
 8005218:	08015598 	.word	0x08015598
 800521c:	080156b8 	.word	0x080156b8

08005220 <destroy_handle>:
 8005220:	b510      	push	{r4, lr}
 8005222:	4604      	mov	r4, r0
 8005224:	6900      	ldr	r0, [r0, #16]
 8005226:	b128      	cbz	r0, 8005234 <destroy_handle+0x14>
 8005228:	7803      	ldrb	r3, [r0, #0]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d01b      	beq.n	8005266 <destroy_handle+0x46>
 800522e:	2b02      	cmp	r3, #2
 8005230:	d013      	beq.n	800525a <destroy_handle+0x3a>
 8005232:	b163      	cbz	r3, 800524e <destroy_handle+0x2e>
 8005234:	f001 fe68 	bl	8006f08 <acc_rss_integration_mem_free>
 8005238:	6960      	ldr	r0, [r4, #20]
 800523a:	f001 fe65 	bl	8006f08 <acc_rss_integration_mem_free>
 800523e:	68a0      	ldr	r0, [r4, #8]
 8005240:	f001 fe62 	bl	8006f08 <acc_rss_integration_mem_free>
 8005244:	4620      	mov	r0, r4
 8005246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524a:	f001 be5d 	b.w	8006f08 <acc_rss_integration_mem_free>
 800524e:	f104 0010 	add.w	r0, r4, #16
 8005252:	f001 fc67 	bl	8006b24 <acc_alg_threshold_fixed_free>
 8005256:	6920      	ldr	r0, [r4, #16]
 8005258:	e7ec      	b.n	8005234 <destroy_handle+0x14>
 800525a:	f104 0010 	add.w	r0, r4, #16
 800525e:	f001 fcb1 	bl	8006bc4 <acc_alg_threshold_cfar_free>
 8005262:	6920      	ldr	r0, [r4, #16]
 8005264:	e7e6      	b.n	8005234 <destroy_handle+0x14>
 8005266:	f104 0010 	add.w	r0, r4, #16
 800526a:	f001 fc7f 	bl	8006b6c <acc_alg_threshold_stationary_clutter_free>
 800526e:	6920      	ldr	r0, [r4, #16]
 8005270:	e7e0      	b.n	8005234 <destroy_handle+0x14>
 8005272:	bf00      	nop

08005274 <acc_detector_distance_processing_create>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	4950      	ldr	r1, [pc, #320]	; (80053b8 <acc_detector_distance_processing_create+0x144>)
 8005278:	4605      	mov	r5, r0
 800527a:	223b      	movs	r2, #59	; 0x3b
 800527c:	202c      	movs	r0, #44	; 0x2c
 800527e:	f001 fdff 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8005282:	4604      	mov	r4, r0
 8005284:	2800      	cmp	r0, #0
 8005286:	f000 8086 	beq.w	8005396 <acc_detector_distance_processing_create+0x122>
 800528a:	886a      	ldrh	r2, [r5, #2]
 800528c:	494b      	ldr	r1, [pc, #300]	; (80053bc <acc_detector_distance_processing_create+0x148>)
 800528e:	8082      	strh	r2, [r0, #4]
 8005290:	2300      	movs	r3, #0
 8005292:	2a01      	cmp	r2, #1
 8005294:	6001      	str	r1, [r0, #0]
 8005296:	80c3      	strh	r3, [r0, #6]
 8005298:	d825      	bhi.n	80052e6 <acc_detector_distance_processing_create+0x72>
 800529a:	8183      	strh	r3, [r0, #12]
 800529c:	6083      	str	r3, [r0, #8]
 800529e:	2300      	movs	r3, #0
 80052a0:	8323      	strh	r3, [r4, #24]
 80052a2:	792b      	ldrb	r3, [r5, #4]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d062      	beq.n	800536e <acc_detector_distance_processing_create+0xfa>
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d044      	beq.n	8005336 <acc_detector_distance_processing_create+0xc2>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02f      	beq.n	8005310 <acc_detector_distance_processing_create+0x9c>
 80052b0:	6926      	ldr	r6, [r4, #16]
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	d033      	beq.n	800531e <acc_detector_distance_processing_create+0xaa>
 80052b6:	8828      	ldrh	r0, [r5, #0]
 80052b8:	4a3f      	ldr	r2, [pc, #252]	; (80053b8 <acc_detector_distance_processing_create+0x144>)
 80052ba:	301f      	adds	r0, #31
 80052bc:	0940      	lsrs	r0, r0, #5
 80052be:	238e      	movs	r3, #142	; 0x8e
 80052c0:	2104      	movs	r1, #4
 80052c2:	f001 fe01 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 80052c6:	4606      	mov	r6, r0
 80052c8:	6160      	str	r0, [r4, #20]
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d069      	beq.n	80053a2 <acc_detector_distance_processing_create+0x12e>
 80052ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80052d0:	6a29      	ldr	r1, [r5, #32]
 80052d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80052d4:	6222      	str	r2, [r4, #32]
 80052d6:	61e1      	str	r1, [r4, #28]
 80052d8:	6263      	str	r3, [r4, #36]	; 0x24
 80052da:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80052de:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80052e2:	4620      	mov	r0, r4
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
 80052e6:	8828      	ldrh	r0, [r5, #0]
 80052e8:	4a33      	ldr	r2, [pc, #204]	; (80053b8 <acc_detector_distance_processing_create+0x144>)
 80052ea:	81a0      	strh	r0, [r4, #12]
 80052ec:	234c      	movs	r3, #76	; 0x4c
 80052ee:	2102      	movs	r1, #2
 80052f0:	f001 fdea 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 80052f4:	4606      	mov	r6, r0
 80052f6:	60a0      	str	r0, [r4, #8]
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d1d0      	bne.n	800529e <acc_detector_distance_processing_create+0x2a>
 80052fc:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <acc_detector_distance_processing_create+0x14c>)
 80052fe:	4a31      	ldr	r2, [pc, #196]	; (80053c4 <acc_detector_distance_processing_create+0x150>)
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	492d      	ldr	r1, [pc, #180]	; (80053b8 <acc_detector_distance_processing_create+0x144>)
 8005304:	4798      	blx	r3
 8005306:	4620      	mov	r0, r4
 8005308:	f001 fdfe 	bl	8006f08 <acc_rss_integration_mem_free>
 800530c:	4634      	mov	r4, r6
 800530e:	e7e8      	b.n	80052e2 <acc_detector_distance_processing_create+0x6e>
 8005310:	8928      	ldrh	r0, [r5, #8]
 8005312:	f001 fbf9 	bl	8006b08 <acc_alg_threshold_fixed_allocate>
 8005316:	4606      	mov	r6, r0
 8005318:	6120      	str	r0, [r4, #16]
 800531a:	2e00      	cmp	r6, #0
 800531c:	d1cb      	bne.n	80052b6 <acc_detector_distance_processing_create+0x42>
 800531e:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <acc_detector_distance_processing_create+0x14c>)
 8005320:	4a29      	ldr	r2, [pc, #164]	; (80053c8 <acc_detector_distance_processing_create+0x154>)
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	4924      	ldr	r1, [pc, #144]	; (80053b8 <acc_detector_distance_processing_create+0x144>)
 8005326:	4630      	mov	r0, r6
 8005328:	4798      	blx	r3
 800532a:	4620      	mov	r0, r4
 800532c:	4634      	mov	r4, r6
 800532e:	f7ff ff77 	bl	8005220 <destroy_handle>
 8005332:	4620      	mov	r0, r4
 8005334:	bd70      	pop	{r4, r5, r6, pc}
 8005336:	edd5 6a0a 	vldr	s13, [r5, #40]	; 0x28
 800533a:	edd5 7a06 	vldr	s15, [r5, #24]
 800533e:	ed95 6a05 	vldr	s12, [r5, #20]
 8005342:	7f2a      	ldrb	r2, [r5, #28]
 8005344:	ed95 0a03 	vldr	s0, [r5, #12]
 8005348:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800534c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005350:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005358:	ee17 3a10 	vmov	r3, s14
 800535c:	b299      	uxth	r1, r3
 800535e:	ee17 3a90 	vmov	r3, s15
 8005362:	b298      	uxth	r0, r3
 8005364:	f001 fc12 	bl	8006b8c <acc_alg_threshold_cfar_threshold_allocate>
 8005368:	4606      	mov	r6, r0
 800536a:	6120      	str	r0, [r4, #16]
 800536c:	e7a1      	b.n	80052b2 <acc_detector_distance_processing_create+0x3e>
 800536e:	edd5 7a03 	vldr	s15, [r5, #12]
 8005372:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80053cc <acc_detector_distance_processing_create+0x158>
 8005376:	8a2b      	ldrh	r3, [r5, #16]
 8005378:	8828      	ldrh	r0, [r5, #0]
 800537a:	8323      	strh	r3, [r4, #24]
 800537c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005384:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005388:	ee30 0a47 	vsub.f32	s0, s0, s14
 800538c:	f001 fbd4 	bl	8006b38 <acc_alg_threshold_stationary_clutter_allocate>
 8005390:	4606      	mov	r6, r0
 8005392:	6120      	str	r0, [r4, #16]
 8005394:	e78d      	b.n	80052b2 <acc_detector_distance_processing_create+0x3e>
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <acc_detector_distance_processing_create+0x14c>)
 8005398:	4a0d      	ldr	r2, [pc, #52]	; (80053d0 <acc_detector_distance_processing_create+0x15c>)
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	4906      	ldr	r1, [pc, #24]	; (80053b8 <acc_detector_distance_processing_create+0x144>)
 800539e:	4798      	blx	r3
 80053a0:	e79f      	b.n	80052e2 <acc_detector_distance_processing_create+0x6e>
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <acc_detector_distance_processing_create+0x14c>)
 80053a4:	4a0b      	ldr	r2, [pc, #44]	; (80053d4 <acc_detector_distance_processing_create+0x160>)
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <acc_detector_distance_processing_create+0x144>)
 80053aa:	4798      	blx	r3
 80053ac:	4620      	mov	r0, r4
 80053ae:	f7ff ff37 	bl	8005220 <destroy_handle>
 80053b2:	4634      	mov	r4, r6
 80053b4:	e795      	b.n	80052e2 <acc_detector_distance_processing_create+0x6e>
 80053b6:	bf00      	nop
 80053b8:	080156d4 	.word	0x080156d4
 80053bc:	acc22845 	.word	0xacc22845
 80053c0:	20000640 	.word	0x20000640
 80053c4:	08015718 	.word	0x08015718
 80053c8:	08015738 	.word	0x08015738
 80053cc:	2edbe6ff 	.word	0x2edbe6ff
 80053d0:	080156f4 	.word	0x080156f4
 80053d4:	0801575c 	.word	0x0801575c

080053d8 <acc_detector_distance_processing_destroy>:
 80053d8:	b1a0      	cbz	r0, 8005404 <acc_detector_distance_processing_destroy+0x2c>
 80053da:	b510      	push	{r4, lr}
 80053dc:	4604      	mov	r4, r0
 80053de:	6800      	ldr	r0, [r0, #0]
 80053e0:	b118      	cbz	r0, 80053ea <acc_detector_distance_processing_destroy+0x12>
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <acc_detector_distance_processing_destroy+0x30>)
 80053e4:	6802      	ldr	r2, [r0, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d007      	beq.n	80053fa <acc_detector_distance_processing_destroy+0x22>
 80053ea:	4b08      	ldr	r3, [pc, #32]	; (800540c <acc_detector_distance_processing_destroy+0x34>)
 80053ec:	4a08      	ldr	r2, [pc, #32]	; (8005410 <acc_detector_distance_processing_destroy+0x38>)
 80053ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f0:	4908      	ldr	r1, [pc, #32]	; (8005414 <acc_detector_distance_processing_destroy+0x3c>)
 80053f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f6:	2000      	movs	r0, #0
 80053f8:	4718      	bx	r3
 80053fa:	f7ff ff11 	bl	8005220 <destroy_handle>
 80053fe:	2300      	movs	r3, #0
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd10      	pop	{r4, pc}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	acc22845 	.word	0xacc22845
 800540c:	20000640 	.word	0x20000640
 8005410:	08015780 	.word	0x08015780
 8005414:	080156d4 	.word	0x080156d4

08005418 <acc_detector_distance_processing_next>:
 8005418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541a:	b087      	sub	sp, #28
 800541c:	b130      	cbz	r0, 800542c <acc_detector_distance_processing_next+0x14>
 800541e:	460e      	mov	r6, r1
 8005420:	461d      	mov	r5, r3
 8005422:	6801      	ldr	r1, [r0, #0]
 8005424:	4b5c      	ldr	r3, [pc, #368]	; (8005598 <acc_detector_distance_processing_next+0x180>)
 8005426:	4299      	cmp	r1, r3
 8005428:	4604      	mov	r4, r0
 800542a:	d008      	beq.n	800543e <acc_detector_distance_processing_next+0x26>
 800542c:	4b5b      	ldr	r3, [pc, #364]	; (800559c <acc_detector_distance_processing_next+0x184>)
 800542e:	4a5c      	ldr	r2, [pc, #368]	; (80055a0 <acc_detector_distance_processing_next+0x188>)
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	495c      	ldr	r1, [pc, #368]	; (80055a4 <acc_detector_distance_processing_next+0x18c>)
 8005434:	2000      	movs	r0, #0
 8005436:	4798      	blx	r3
 8005438:	2000      	movs	r0, #0
 800543a:	b007      	add	sp, #28
 800543c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800543e:	2d00      	cmp	r5, #0
 8005440:	f000 809c 	beq.w	800557c <acc_detector_distance_processing_next+0x164>
 8005444:	8881      	ldrh	r1, [r0, #4]
 8005446:	2300      	movs	r3, #0
 8005448:	2901      	cmp	r1, #1
 800544a:	702b      	strb	r3, [r5, #0]
 800544c:	d935      	bls.n	80054ba <acc_detector_distance_processing_next+0xa2>
 800544e:	88c3      	ldrh	r3, [r0, #6]
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800545c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005460:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005464:	b31a      	cbz	r2, 80054ae <acc_detector_distance_processing_next+0x96>
 8005466:	68a3      	ldr	r3, [r4, #8]
 8005468:	1e50      	subs	r0, r2, #1
 800546a:	b280      	uxth	r0, r0
 800546c:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8005470:	3b02      	subs	r3, #2
 8005472:	1eb1      	subs	r1, r6, #2
 8005474:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8005478:	f831 7f02 	ldrh.w	r7, [r1, #2]!
 800547c:	ee07 7a90 	vmov	s15, r7
 8005480:	f833 7f02 	ldrh.w	r7, [r3, #2]!
 8005484:	ee07 7a10 	vmov	s14, r7
 8005488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800548c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005490:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005494:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005498:	4288      	cmp	r0, r1
 800549a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800549e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a2:	ee17 7a90 	vmov	r7, s15
 80054a6:	801f      	strh	r7, [r3, #0]
 80054a8:	d1e6      	bne.n	8005478 <acc_detector_distance_processing_next+0x60>
 80054aa:	88e3      	ldrh	r3, [r4, #6]
 80054ac:	88a1      	ldrh	r1, [r4, #4]
 80054ae:	3301      	adds	r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	428b      	cmp	r3, r1
 80054b4:	d06c      	beq.n	8005590 <acc_detector_distance_processing_next+0x178>
 80054b6:	80e3      	strh	r3, [r4, #6]
 80054b8:	e7be      	b.n	8005438 <acc_detector_distance_processing_next+0x20>
 80054ba:	4637      	mov	r7, r6
 80054bc:	2f00      	cmp	r7, #0
 80054be:	d0bb      	beq.n	8005438 <acc_detector_distance_processing_next+0x20>
 80054c0:	ed94 6a08 	vldr	s12, [r4, #32]
 80054c4:	edd4 5a07 	vldr	s11, [r4, #28]
 80054c8:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80054cc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80054d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d4:	db55      	blt.n	8005582 <acc_detector_distance_processing_next+0x16a>
 80054d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80054da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054de:	ee17 3a90 	vmov	r3, s15
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054e8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80054ec:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80054f0:	6921      	ldr	r1, [r4, #16]
 80054f2:	9100      	str	r1, [sp, #0]
 80054f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80054f8:	9002      	str	r0, [sp, #8]
 80054fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054fe:	6961      	ldr	r1, [r4, #20]
 8005500:	9205      	str	r2, [sp, #20]
 8005502:	4638      	mov	r0, r7
 8005504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005508:	ee17 ca90 	vmov	ip, s15
 800550c:	fa1f fc8c 	uxth.w	ip, ip
 8005510:	f8cd c004 	str.w	ip, [sp, #4]
 8005514:	f001 fabc 	bl	8006a90 <acc_alg_peak_get_peaks>
 8005518:	88a3      	ldrh	r3, [r4, #4]
 800551a:	9a05      	ldr	r2, [sp, #20]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d911      	bls.n	8005544 <acc_detector_distance_processing_next+0x12c>
 8005520:	b180      	cbz	r0, 8005544 <acc_detector_distance_processing_next+0x12c>
 8005522:	2300      	movs	r3, #0
 8005524:	f107 0e02 	add.w	lr, r7, #2
 8005528:	f106 0c02 	add.w	ip, r6, #2
 800552c:	f837 1023 	ldrh.w	r1, [r7, r3, lsl #2]
 8005530:	f826 1023 	strh.w	r1, [r6, r3, lsl #2]
 8005534:	f83e 1023 	ldrh.w	r1, [lr, r3, lsl #2]
 8005538:	f82c 1023 	strh.w	r1, [ip, r3, lsl #2]
 800553c:	3301      	adds	r3, #1
 800553e:	b299      	uxth	r1, r3
 8005540:	4288      	cmp	r0, r1
 8005542:	d8f3      	bhi.n	800552c <acc_detector_distance_processing_next+0x114>
 8005544:	2300      	movs	r3, #0
 8005546:	706b      	strb	r3, [r5, #1]
 8005548:	b1aa      	cbz	r2, 8005576 <acc_detector_distance_processing_next+0x15e>
 800554a:	6967      	ldr	r7, [r4, #20]
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	07c9      	lsls	r1, r1, #31
 8005550:	d419      	bmi.n	8005586 <acc_detector_distance_processing_next+0x16e>
 8005552:	2301      	movs	r3, #1
 8005554:	469c      	mov	ip, r3
 8005556:	e003      	b.n	8005560 <acc_detector_distance_processing_next+0x148>
 8005558:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800555c:	4231      	tst	r1, r6
 800555e:	d113      	bne.n	8005588 <acc_detector_distance_processing_next+0x170>
 8005560:	b29c      	uxth	r4, r3
 8005562:	f004 011f 	and.w	r1, r4, #31
 8005566:	42a2      	cmp	r2, r4
 8005568:	ea4f 1653 	mov.w	r6, r3, lsr #5
 800556c:	fa0c f101 	lsl.w	r1, ip, r1
 8005570:	f103 0301 	add.w	r3, r3, #1
 8005574:	d8f0      	bhi.n	8005558 <acc_detector_distance_processing_next+0x140>
 8005576:	2301      	movs	r3, #1
 8005578:	702b      	strb	r3, [r5, #0]
 800557a:	e75e      	b.n	800543a <acc_detector_distance_processing_next+0x22>
 800557c:	4b07      	ldr	r3, [pc, #28]	; (800559c <acc_detector_distance_processing_next+0x184>)
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <acc_detector_distance_processing_next+0x190>)
 8005580:	e756      	b.n	8005430 <acc_detector_distance_processing_next+0x18>
 8005582:	2300      	movs	r3, #0
 8005584:	e7ae      	b.n	80054e4 <acc_detector_distance_processing_next+0xcc>
 8005586:	461c      	mov	r4, r3
 8005588:	2301      	movs	r3, #1
 800558a:	806c      	strh	r4, [r5, #2]
 800558c:	706b      	strb	r3, [r5, #1]
 800558e:	e7f2      	b.n	8005576 <acc_detector_distance_processing_next+0x15e>
 8005590:	2300      	movs	r3, #0
 8005592:	68a7      	ldr	r7, [r4, #8]
 8005594:	80e3      	strh	r3, [r4, #6]
 8005596:	e791      	b.n	80054bc <acc_detector_distance_processing_next+0xa4>
 8005598:	acc22845 	.word	0xacc22845
 800559c:	20000640 	.word	0x20000640
 80055a0:	08015780 	.word	0x08015780
 80055a4:	080156d4 	.word	0x080156d4
 80055a8:	0801579c 	.word	0x0801579c

080055ac <acc_rss_activate>:
 80055ac:	b510      	push	{r4, lr}
 80055ae:	4c18      	ldr	r4, [pc, #96]	; (8005610 <acc_rss_activate+0x64>)
 80055b0:	7823      	ldrb	r3, [r4, #0]
 80055b2:	b9c3      	cbnz	r3, 80055e6 <acc_rss_activate+0x3a>
 80055b4:	b1a8      	cbz	r0, 80055e2 <acc_rss_activate+0x36>
 80055b6:	f001 fbb9 	bl	8006d2c <acc_rss_integration_register>
 80055ba:	b188      	cbz	r0, 80055e0 <acc_rss_activate+0x34>
 80055bc:	f000 fe22 	bl	8006204 <acc_service_manager_activate>
 80055c0:	b1e8      	cbz	r0, 80055fe <acc_rss_activate+0x52>
 80055c2:	f004 f9a1 	bl	8009908 <acc_sensor_manager_activate>
 80055c6:	b1d0      	cbz	r0, 80055fe <acc_rss_activate+0x52>
 80055c8:	2301      	movs	r3, #1
 80055ca:	7023      	strb	r3, [r4, #0]
 80055cc:	f001 fcb4 	bl	8006f38 <acc_rss_integration_log_level>
 80055d0:	2801      	cmp	r0, #1
 80055d2:	d905      	bls.n	80055e0 <acc_rss_activate+0x34>
 80055d4:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <acc_rss_activate+0x68>)
 80055d6:	4a10      	ldr	r2, [pc, #64]	; (8005618 <acc_rss_activate+0x6c>)
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	4910      	ldr	r1, [pc, #64]	; (800561c <acc_rss_activate+0x70>)
 80055dc:	2002      	movs	r0, #2
 80055de:	4798      	blx	r3
 80055e0:	7823      	ldrb	r3, [r4, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	f001 fca7 	bl	8006f38 <acc_rss_integration_log_level>
 80055ea:	2801      	cmp	r0, #1
 80055ec:	d9f8      	bls.n	80055e0 <acc_rss_activate+0x34>
 80055ee:	4b09      	ldr	r3, [pc, #36]	; (8005614 <acc_rss_activate+0x68>)
 80055f0:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <acc_rss_activate+0x74>)
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	4909      	ldr	r1, [pc, #36]	; (800561c <acc_rss_activate+0x70>)
 80055f6:	2002      	movs	r0, #2
 80055f8:	4798      	blx	r3
 80055fa:	7823      	ldrb	r3, [r4, #0]
 80055fc:	e7f1      	b.n	80055e2 <acc_rss_activate+0x36>
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <acc_rss_activate+0x68>)
 8005600:	4a08      	ldr	r2, [pc, #32]	; (8005624 <acc_rss_activate+0x78>)
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	4905      	ldr	r1, [pc, #20]	; (800561c <acc_rss_activate+0x70>)
 8005606:	2000      	movs	r0, #0
 8005608:	4798      	blx	r3
 800560a:	7823      	ldrb	r3, [r4, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	bd10      	pop	{r4, pc}
 8005610:	200001d0 	.word	0x200001d0
 8005614:	20000640 	.word	0x20000640
 8005618:	080157b0 	.word	0x080157b0
 800561c:	080157d0 	.word	0x080157d0
 8005620:	080157ec 	.word	0x080157ec
 8005624:	080157d4 	.word	0x080157d4

08005628 <acc_rss_deactivate>:
 8005628:	b510      	push	{r4, lr}
 800562a:	4c0b      	ldr	r4, [pc, #44]	; (8005658 <acc_rss_deactivate+0x30>)
 800562c:	7823      	ldrb	r3, [r4, #0]
 800562e:	b903      	cbnz	r3, 8005632 <acc_rss_deactivate+0xa>
 8005630:	bd10      	pop	{r4, pc}
 8005632:	f000 fe95 	bl	8006360 <acc_service_manager_deactivate>
 8005636:	f004 f9a3 	bl	8009980 <acc_sensor_manager_deactivate>
 800563a:	f001 fc7d 	bl	8006f38 <acc_rss_integration_log_level>
 800563e:	2801      	cmp	r0, #1
 8005640:	d905      	bls.n	800564e <acc_rss_deactivate+0x26>
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <acc_rss_deactivate+0x34>)
 8005644:	4a06      	ldr	r2, [pc, #24]	; (8005660 <acc_rss_deactivate+0x38>)
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	4906      	ldr	r1, [pc, #24]	; (8005664 <acc_rss_deactivate+0x3c>)
 800564a:	2002      	movs	r0, #2
 800564c:	4798      	blx	r3
 800564e:	f001 fbad 	bl	8006dac <acc_rss_integration_unregister>
 8005652:	2300      	movs	r3, #0
 8005654:	7023      	strb	r3, [r4, #0]
 8005656:	bd10      	pop	{r4, pc}
 8005658:	200001d0 	.word	0x200001d0
 800565c:	20000640 	.word	0x20000640
 8005660:	08015814 	.word	0x08015814
 8005664:	080157d0 	.word	0x080157d0

08005668 <configuration_is_valid.part.0>:
 8005668:	b508      	push	{r3, lr}
 800566a:	f001 fc65 	bl	8006f38 <acc_rss_integration_log_level>
 800566e:	b128      	cbz	r0, 800567c <configuration_is_valid.part.0+0x14>
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <configuration_is_valid.part.0+0x18>)
 8005672:	4a04      	ldr	r2, [pc, #16]	; (8005684 <configuration_is_valid.part.0+0x1c>)
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	4904      	ldr	r1, [pc, #16]	; (8005688 <configuration_is_valid.part.0+0x20>)
 8005678:	2001      	movs	r0, #1
 800567a:	4798      	blx	r3
 800567c:	2000      	movs	r0, #0
 800567e:	bd08      	pop	{r3, pc}
 8005680:	20000640 	.word	0x20000640
 8005684:	08015838 	.word	0x08015838
 8005688:	08015860 	.word	0x08015860

0800568c <acc_rss_assembly_test_configuration_create>:
 800568c:	b508      	push	{r3, lr}
 800568e:	4a05      	ldr	r2, [pc, #20]	; (80056a4 <acc_rss_assembly_test_configuration_create+0x18>)
 8005690:	232f      	movs	r3, #47	; 0x2f
 8005692:	210c      	movs	r1, #12
 8005694:	2001      	movs	r0, #1
 8005696:	f001 fc17 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 800569a:	b108      	cbz	r0, 80056a0 <acc_rss_assembly_test_configuration_create+0x14>
 800569c:	2301      	movs	r3, #1
 800569e:	6003      	str	r3, [r0, #0]
 80056a0:	bd08      	pop	{r3, pc}
 80056a2:	bf00      	nop
 80056a4:	08015860 	.word	0x08015860

080056a8 <acc_rss_assembly_test_configuration_destroy>:
 80056a8:	b138      	cbz	r0, 80056ba <acc_rss_assembly_test_configuration_destroy+0x12>
 80056aa:	b510      	push	{r4, lr}
 80056ac:	4604      	mov	r4, r0
 80056ae:	6800      	ldr	r0, [r0, #0]
 80056b0:	f001 fc2a 	bl	8006f08 <acc_rss_integration_mem_free>
 80056b4:	2300      	movs	r3, #0
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	4770      	bx	lr

080056bc <acc_rss_assembly_test_configuration_sensor_set>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	460d      	mov	r5, r1
 80056c0:	4604      	mov	r4, r0
 80056c2:	b108      	cbz	r0, 80056c8 <acc_rss_assembly_test_configuration_sensor_set+0xc>
 80056c4:	6025      	str	r5, [r4, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	f7ff ffce 	bl	8005668 <configuration_is_valid.part.0>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d1f9      	bne.n	80056c4 <acc_rss_assembly_test_configuration_sensor_set+0x8>
 80056d0:	bd38      	pop	{r3, r4, r5, pc}
 80056d2:	bf00      	nop

080056d4 <acc_rss_assembly_test_configuration_communication_read_test_enable>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	4604      	mov	r4, r0
 80056d8:	b110      	cbz	r0, 80056e0 <acc_rss_assembly_test_configuration_communication_read_test_enable+0xc>
 80056da:	2300      	movs	r3, #0
 80056dc:	7123      	strb	r3, [r4, #4]
 80056de:	bd10      	pop	{r4, pc}
 80056e0:	f7ff ffc2 	bl	8005668 <configuration_is_valid.part.0>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1f8      	bne.n	80056da <acc_rss_assembly_test_configuration_communication_read_test_enable+0x6>
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	bf00      	nop

080056ec <acc_rss_assembly_test_configuration_communication_read_test_disable>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	4604      	mov	r4, r0
 80056f0:	b110      	cbz	r0, 80056f8 <acc_rss_assembly_test_configuration_communication_read_test_disable+0xc>
 80056f2:	2301      	movs	r3, #1
 80056f4:	7123      	strb	r3, [r4, #4]
 80056f6:	bd10      	pop	{r4, pc}
 80056f8:	f7ff ffb6 	bl	8005668 <configuration_is_valid.part.0>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d1f8      	bne.n	80056f2 <acc_rss_assembly_test_configuration_communication_read_test_disable+0x6>
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop

08005704 <acc_rss_assembly_test_configuration_communication_write_read_test_enable>:
 8005704:	b510      	push	{r4, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	b110      	cbz	r0, 8005710 <acc_rss_assembly_test_configuration_communication_write_read_test_enable+0xc>
 800570a:	2300      	movs	r3, #0
 800570c:	7163      	strb	r3, [r4, #5]
 800570e:	bd10      	pop	{r4, pc}
 8005710:	f7ff ffaa 	bl	8005668 <configuration_is_valid.part.0>
 8005714:	2800      	cmp	r0, #0
 8005716:	d1f8      	bne.n	800570a <acc_rss_assembly_test_configuration_communication_write_read_test_enable+0x6>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	bf00      	nop

0800571c <acc_rss_assembly_test_configuration_communication_write_read_test_disable>:
 800571c:	b510      	push	{r4, lr}
 800571e:	4604      	mov	r4, r0
 8005720:	b110      	cbz	r0, 8005728 <acc_rss_assembly_test_configuration_communication_write_read_test_disable+0xc>
 8005722:	2301      	movs	r3, #1
 8005724:	7163      	strb	r3, [r4, #5]
 8005726:	bd10      	pop	{r4, pc}
 8005728:	f7ff ff9e 	bl	8005668 <configuration_is_valid.part.0>
 800572c:	2800      	cmp	r0, #0
 800572e:	d1f8      	bne.n	8005722 <acc_rss_assembly_test_configuration_communication_write_read_test_disable+0x6>
 8005730:	bd10      	pop	{r4, pc}
 8005732:	bf00      	nop

08005734 <acc_rss_assembly_test_configuration_communication_interrupt_test_enable>:
 8005734:	b510      	push	{r4, lr}
 8005736:	4604      	mov	r4, r0
 8005738:	b110      	cbz	r0, 8005740 <acc_rss_assembly_test_configuration_communication_interrupt_test_enable+0xc>
 800573a:	2300      	movs	r3, #0
 800573c:	71a3      	strb	r3, [r4, #6]
 800573e:	bd10      	pop	{r4, pc}
 8005740:	f7ff ff92 	bl	8005668 <configuration_is_valid.part.0>
 8005744:	2800      	cmp	r0, #0
 8005746:	d1f8      	bne.n	800573a <acc_rss_assembly_test_configuration_communication_interrupt_test_enable+0x6>
 8005748:	bd10      	pop	{r4, pc}
 800574a:	bf00      	nop

0800574c <acc_rss_assembly_test_configuration_communication_interrupt_test_disable>:
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
 8005750:	b110      	cbz	r0, 8005758 <acc_rss_assembly_test_configuration_communication_interrupt_test_disable+0xc>
 8005752:	2301      	movs	r3, #1
 8005754:	71a3      	strb	r3, [r4, #6]
 8005756:	bd10      	pop	{r4, pc}
 8005758:	f7ff ff86 	bl	8005668 <configuration_is_valid.part.0>
 800575c:	2800      	cmp	r0, #0
 800575e:	d1f8      	bne.n	8005752 <acc_rss_assembly_test_configuration_communication_interrupt_test_disable+0x6>
 8005760:	bd10      	pop	{r4, pc}
 8005762:	bf00      	nop

08005764 <acc_rss_assembly_test_configuration_communication_hibernate_test_enable>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4604      	mov	r4, r0
 8005768:	b110      	cbz	r0, 8005770 <acc_rss_assembly_test_configuration_communication_hibernate_test_enable+0xc>
 800576a:	2300      	movs	r3, #0
 800576c:	71e3      	strb	r3, [r4, #7]
 800576e:	bd10      	pop	{r4, pc}
 8005770:	f7ff ff7a 	bl	8005668 <configuration_is_valid.part.0>
 8005774:	2800      	cmp	r0, #0
 8005776:	d1f8      	bne.n	800576a <acc_rss_assembly_test_configuration_communication_hibernate_test_enable+0x6>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	bf00      	nop

0800577c <acc_rss_assembly_test_configuration_communication_hibernate_test_disable>:
 800577c:	b510      	push	{r4, lr}
 800577e:	4604      	mov	r4, r0
 8005780:	b110      	cbz	r0, 8005788 <acc_rss_assembly_test_configuration_communication_hibernate_test_disable+0xc>
 8005782:	2301      	movs	r3, #1
 8005784:	71e3      	strb	r3, [r4, #7]
 8005786:	bd10      	pop	{r4, pc}
 8005788:	f7ff ff6e 	bl	8005668 <configuration_is_valid.part.0>
 800578c:	2800      	cmp	r0, #0
 800578e:	d1f8      	bne.n	8005782 <acc_rss_assembly_test_configuration_communication_hibernate_test_disable+0x6>
 8005790:	bd10      	pop	{r4, pc}
 8005792:	bf00      	nop

08005794 <acc_rss_assembly_test_configuration_supply_test_enable>:
 8005794:	b510      	push	{r4, lr}
 8005796:	4604      	mov	r4, r0
 8005798:	b110      	cbz	r0, 80057a0 <acc_rss_assembly_test_configuration_supply_test_enable+0xc>
 800579a:	2300      	movs	r3, #0
 800579c:	7223      	strb	r3, [r4, #8]
 800579e:	bd10      	pop	{r4, pc}
 80057a0:	f7ff ff62 	bl	8005668 <configuration_is_valid.part.0>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d1f8      	bne.n	800579a <acc_rss_assembly_test_configuration_supply_test_enable+0x6>
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	bf00      	nop

080057ac <acc_rss_assembly_test_configuration_supply_test_disable>:
 80057ac:	b510      	push	{r4, lr}
 80057ae:	4604      	mov	r4, r0
 80057b0:	b110      	cbz	r0, 80057b8 <acc_rss_assembly_test_configuration_supply_test_disable+0xc>
 80057b2:	2301      	movs	r3, #1
 80057b4:	7223      	strb	r3, [r4, #8]
 80057b6:	bd10      	pop	{r4, pc}
 80057b8:	f7ff ff56 	bl	8005668 <configuration_is_valid.part.0>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d1f8      	bne.n	80057b2 <acc_rss_assembly_test_configuration_supply_test_disable+0x6>
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	bf00      	nop

080057c4 <acc_rss_assembly_test_configuration_clock_test_enable>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	4604      	mov	r4, r0
 80057c8:	b110      	cbz	r0, 80057d0 <acc_rss_assembly_test_configuration_clock_test_enable+0xc>
 80057ca:	2300      	movs	r3, #0
 80057cc:	7263      	strb	r3, [r4, #9]
 80057ce:	bd10      	pop	{r4, pc}
 80057d0:	f7ff ff4a 	bl	8005668 <configuration_is_valid.part.0>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d1f8      	bne.n	80057ca <acc_rss_assembly_test_configuration_clock_test_enable+0x6>
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	bf00      	nop

080057dc <acc_rss_assembly_test_configuration_clock_test_disable>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	4604      	mov	r4, r0
 80057e0:	b110      	cbz	r0, 80057e8 <acc_rss_assembly_test_configuration_clock_test_disable+0xc>
 80057e2:	2301      	movs	r3, #1
 80057e4:	7263      	strb	r3, [r4, #9]
 80057e6:	bd10      	pop	{r4, pc}
 80057e8:	f7ff ff3e 	bl	8005668 <configuration_is_valid.part.0>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d1f8      	bne.n	80057e2 <acc_rss_assembly_test_configuration_clock_test_disable+0x6>
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	bf00      	nop

080057f4 <acc_rss_assembly_test_configuration_power_cycle_test_enable>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	4604      	mov	r4, r0
 80057f8:	b110      	cbz	r0, 8005800 <acc_rss_assembly_test_configuration_power_cycle_test_enable+0xc>
 80057fa:	2300      	movs	r3, #0
 80057fc:	72a3      	strb	r3, [r4, #10]
 80057fe:	bd10      	pop	{r4, pc}
 8005800:	f7ff ff32 	bl	8005668 <configuration_is_valid.part.0>
 8005804:	2800      	cmp	r0, #0
 8005806:	d1f8      	bne.n	80057fa <acc_rss_assembly_test_configuration_power_cycle_test_enable+0x6>
 8005808:	bd10      	pop	{r4, pc}
 800580a:	bf00      	nop

0800580c <acc_rss_assembly_test_configuration_power_cycle_test_disable>:
 800580c:	b510      	push	{r4, lr}
 800580e:	4604      	mov	r4, r0
 8005810:	b110      	cbz	r0, 8005818 <acc_rss_assembly_test_configuration_power_cycle_test_disable+0xc>
 8005812:	2301      	movs	r3, #1
 8005814:	72a3      	strb	r3, [r4, #10]
 8005816:	bd10      	pop	{r4, pc}
 8005818:	f7ff ff26 	bl	8005668 <configuration_is_valid.part.0>
 800581c:	2800      	cmp	r0, #0
 800581e:	d1f8      	bne.n	8005812 <acc_rss_assembly_test_configuration_power_cycle_test_disable+0x6>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	bf00      	nop

08005824 <acc_rss_assembly_test_configuration_all_tests_disable>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4604      	mov	r4, r0
 8005828:	b140      	cbz	r0, 800583c <acc_rss_assembly_test_configuration_all_tests_disable+0x18>
 800582a:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
 800582e:	f240 1201 	movw	r2, #257	; 0x101
 8005832:	2301      	movs	r3, #1
 8005834:	6061      	str	r1, [r4, #4]
 8005836:	8122      	strh	r2, [r4, #8]
 8005838:	72a3      	strb	r3, [r4, #10]
 800583a:	bd10      	pop	{r4, pc}
 800583c:	f7ff ff14 	bl	8005668 <configuration_is_valid.part.0>
 8005840:	2800      	cmp	r0, #0
 8005842:	d1f2      	bne.n	800582a <acc_rss_assembly_test_configuration_all_tests_disable+0x6>
 8005844:	bd10      	pop	{r4, pc}
 8005846:	bf00      	nop

08005848 <acc_rss_assembly_test>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	460f      	mov	r7, r1
 800584e:	b0c2      	sub	sp, #264	; 0x108
 8005850:	4690      	mov	r8, r2
 8005852:	4681      	mov	r9, r0
 8005854:	b310      	cbz	r0, 800589c <acc_rss_assembly_test+0x54>
 8005856:	f109 0a04 	add.w	sl, r9, #4
 800585a:	4653      	mov	r3, sl
 800585c:	f109 060b 	add.w	r6, r9, #11
 8005860:	2400      	movs	r4, #0
 8005862:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005866:	b90d      	cbnz	r5, 800586c <acc_rss_assembly_test+0x24>
 8005868:	3401      	adds	r4, #1
 800586a:	b2a4      	uxth	r4, r4
 800586c:	429e      	cmp	r6, r3
 800586e:	d1f8      	bne.n	8005862 <acc_rss_assembly_test+0x1a>
 8005870:	b144      	cbz	r4, 8005884 <acc_rss_assembly_test+0x3c>
 8005872:	f8d9 0000 	ldr.w	r0, [r9]
 8005876:	f000 fd99 	bl	80063ac <acc_service_manager_is_service_created>
 800587a:	b1a0      	cbz	r0, 80058a6 <acc_rss_assembly_test+0x5e>
 800587c:	2000      	movs	r0, #0
 800587e:	b042      	add	sp, #264	; 0x108
 8005880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005884:	f001 fb58 	bl	8006f38 <acc_rss_integration_log_level>
 8005888:	2800      	cmp	r0, #0
 800588a:	d0f7      	beq.n	800587c <acc_rss_assembly_test+0x34>
 800588c:	4b23      	ldr	r3, [pc, #140]	; (800591c <acc_rss_assembly_test+0xd4>)
 800588e:	4a24      	ldr	r2, [pc, #144]	; (8005920 <acc_rss_assembly_test+0xd8>)
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	4924      	ldr	r1, [pc, #144]	; (8005924 <acc_rss_assembly_test+0xdc>)
 8005894:	2001      	movs	r0, #1
 8005896:	4798      	blx	r3
 8005898:	4620      	mov	r0, r4
 800589a:	e7f0      	b.n	800587e <acc_rss_assembly_test+0x36>
 800589c:	f7ff fee4 	bl	8005668 <configuration_is_valid.part.0>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d1d8      	bne.n	8005856 <acc_rss_assembly_test+0xe>
 80058a4:	e7ea      	b.n	800587c <acc_rss_assembly_test+0x34>
 80058a6:	2268      	movs	r2, #104	; 0x68
 80058a8:	4601      	mov	r1, r0
 80058aa:	4668      	mov	r0, sp
 80058ac:	f00b f97c 	bl	8010ba8 <memset>
 80058b0:	491d      	ldr	r1, [pc, #116]	; (8005928 <acc_rss_assembly_test+0xe0>)
 80058b2:	4668      	mov	r0, sp
 80058b4:	f001 fc8c 	bl	80071d0 <acc_base_configuration_radar_engine_creation_set>
 80058b8:	f8d9 1000 	ldr.w	r1, [r9]
 80058bc:	4668      	mov	r0, sp
 80058be:	f001 fbcd 	bl	800705c <acc_base_configuration_sensor_set>
 80058c2:	4668      	mov	r0, sp
 80058c4:	f001 fc1a 	bl	80070fc <acc_base_configuration_repetition_mode_on_demand_set>
 80058c8:	f8b8 3000 	ldrh.w	r3, [r8]
 80058cc:	2b14      	cmp	r3, #20
 80058ce:	bf84      	itt	hi
 80058d0:	2314      	movhi	r3, #20
 80058d2:	f8a8 3000 	strhhi.w	r3, [r8]
 80058d6:	4651      	mov	r1, sl
 80058d8:	4668      	mov	r0, sp
 80058da:	aa1a      	add	r2, sp, #104	; 0x68
 80058dc:	4643      	mov	r3, r8
 80058de:	f004 fa15 	bl	8009d0c <acc_sensor_manager_production_test>
 80058e2:	f8b8 4000 	ldrh.w	r4, [r8]
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d0c9      	beq.n	800587e <acc_rss_assembly_test+0x36>
 80058ea:	3c01      	subs	r4, #1
 80058ec:	b2a4      	uxth	r4, r4
 80058ee:	f1a7 0508 	sub.w	r5, r7, #8
 80058f2:	3402      	adds	r4, #2
 80058f4:	2301      	movs	r3, #1
 80058f6:	3f04      	subs	r7, #4
 80058f8:	aa1a      	add	r2, sp, #104	; 0x68
 80058fa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80058fe:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8005902:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8005906:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
 800590a:	f807 2033 	strb.w	r2, [r7, r3, lsl #3]
 800590e:	3301      	adds	r3, #1
 8005910:	429c      	cmp	r4, r3
 8005912:	d1f1      	bne.n	80058f8 <acc_rss_assembly_test+0xb0>
 8005914:	b042      	add	sp, #264	; 0x108
 8005916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591a:	bf00      	nop
 800591c:	20000640 	.word	0x20000640
 8005920:	08015874 	.word	0x08015874
 8005924:	08015860 	.word	0x08015860
 8005928:	08008c3d 	.word	0x08008c3d

0800592c <acc_service_maximize_signal_attenuation_set.part.0>:
 800592c:	4b02      	ldr	r3, [pc, #8]	; (8005938 <acc_service_maximize_signal_attenuation_set.part.0+0xc>)
 800592e:	4a03      	ldr	r2, [pc, #12]	; (800593c <acc_service_maximize_signal_attenuation_set.part.0+0x10>)
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	4903      	ldr	r1, [pc, #12]	; (8005940 <acc_service_maximize_signal_attenuation_set.part.0+0x14>)
 8005934:	2001      	movs	r0, #1
 8005936:	4718      	bx	r3
 8005938:	20000640 	.word	0x20000640
 800593c:	080155f8 	.word	0x080155f8
 8005940:	08015888 	.word	0x08015888

08005944 <acc_service_get_base_configuration>:
 8005944:	b510      	push	{r4, lr}
 8005946:	4604      	mov	r4, r0
 8005948:	b108      	cbz	r0, 800594e <acc_service_get_base_configuration+0xa>
 800594a:	6900      	ldr	r0, [r0, #16]
 800594c:	bd10      	pop	{r4, pc}
 800594e:	f001 faf3 	bl	8006f38 <acc_rss_integration_log_level>
 8005952:	2800      	cmp	r0, #0
 8005954:	d0fa      	beq.n	800594c <acc_service_get_base_configuration+0x8>
 8005956:	4b04      	ldr	r3, [pc, #16]	; (8005968 <acc_service_get_base_configuration+0x24>)
 8005958:	4a04      	ldr	r2, [pc, #16]	; (800596c <acc_service_get_base_configuration+0x28>)
 800595a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595c:	4904      	ldr	r1, [pc, #16]	; (8005970 <acc_service_get_base_configuration+0x2c>)
 800595e:	2001      	movs	r0, #1
 8005960:	4798      	blx	r3
 8005962:	4620      	mov	r0, r4
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	20000640 	.word	0x20000640
 800596c:	080155f8 	.word	0x080155f8
 8005970:	08015888 	.word	0x08015888

08005974 <set_maximize_signal_attenuation>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	460d      	mov	r5, r1
 8005978:	4606      	mov	r6, r0
 800597a:	f7ff ffe3 	bl	8005944 <acc_service_get_base_configuration>
 800597e:	b158      	cbz	r0, 8005998 <set_maximize_signal_attenuation+0x24>
 8005980:	4629      	mov	r1, r5
 8005982:	4604      	mov	r4, r0
 8005984:	f001 fe36 	bl	80075f4 <acc_base_configuration_maximize_signal_attenuation_set>
 8005988:	b93d      	cbnz	r5, 800599a <set_maximize_signal_attenuation+0x26>
 800598a:	68b3      	ldr	r3, [r6, #8]
 800598c:	b123      	cbz	r3, 8005998 <set_maximize_signal_attenuation+0x24>
 800598e:	7971      	ldrb	r1, [r6, #5]
 8005990:	4630      	mov	r0, r6
 8005992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005996:	4718      	bx	r3
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	4620      	mov	r0, r4
 800599c:	210f      	movs	r1, #15
 800599e:	f001 fcfd 	bl	800739c <acc_base_configuration_integrator_set>
 80059a2:	4620      	mov	r0, r4
 80059a4:	2101      	movs	r1, #1
 80059a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059aa:	f001 bd27 	b.w	80073fc <acc_base_configuration_integrator_ramp_up_set>
 80059ae:	bf00      	nop

080059b0 <acc_service_activate>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	b120      	cbz	r0, 80059be <acc_service_activate+0xe>
 80059b4:	4b1e      	ldr	r3, [pc, #120]	; (8005a30 <acc_service_activate+0x80>)
 80059b6:	6802      	ldr	r2, [r0, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	4604      	mov	r4, r0
 80059bc:	d00c      	beq.n	80059d8 <acc_service_activate+0x28>
 80059be:	4c1d      	ldr	r4, [pc, #116]	; (8005a34 <acc_service_activate+0x84>)
 80059c0:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <acc_service_activate+0x88>)
 80059c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059c4:	491d      	ldr	r1, [pc, #116]	; (8005a3c <acc_service_activate+0x8c>)
 80059c6:	2000      	movs	r0, #0
 80059c8:	4798      	blx	r3
 80059ca:	2000      	movs	r0, #0
 80059cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <acc_service_activate+0x90>)
 80059d0:	491a      	ldr	r1, [pc, #104]	; (8005a3c <acc_service_activate+0x8c>)
 80059d2:	4798      	blx	r3
 80059d4:	2000      	movs	r0, #0
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <acc_service_activate+0x94>)
 80059da:	7818      	ldrb	r0, [r3, #0]
 80059dc:	b198      	cbz	r0, 8005a06 <acc_service_activate+0x56>
 80059de:	7a63      	ldrb	r3, [r4, #9]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f8      	beq.n	80059d6 <acc_service_activate+0x26>
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	2b2a      	cmp	r3, #42	; 0x2a
 80059e8:	d80d      	bhi.n	8005a06 <acc_service_activate+0x56>
 80059ea:	4d17      	ldr	r5, [pc, #92]	; (8005a48 <acc_service_activate+0x98>)
 80059ec:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 80059f0:	b94a      	cbnz	r2, 8005a06 <acc_service_activate+0x56>
 80059f2:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 80059f6:	2101      	movs	r1, #1
 80059f8:	7856      	ldrb	r6, [r2, #1]
 80059fa:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 80059fe:	b126      	cbz	r6, 8005a0a <acc_service_activate+0x5a>
 8005a00:	2200      	movs	r2, #0
 8005a02:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 8005a06:	4c0b      	ldr	r4, [pc, #44]	; (8005a34 <acc_service_activate+0x84>)
 8005a08:	e7df      	b.n	80059ca <acc_service_activate+0x1a>
 8005a0a:	f104 0018 	add.w	r0, r4, #24
 8005a0e:	f004 f921 	bl	8009c54 <acc_sensor_manager_start_measurement>
 8005a12:	6863      	ldr	r3, [r4, #4]
 8005a14:	b138      	cbz	r0, 8005a26 <acc_service_activate+0x76>
 8005a16:	2b2a      	cmp	r3, #42	; 0x2a
 8005a18:	d808      	bhi.n	8005a2c <acc_service_activate+0x7c>
 8005a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a1e:	7266      	strb	r6, [r4, #9]
 8005a20:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 8005a24:	bd70      	pop	{r4, r5, r6, pc}
 8005a26:	2b2a      	cmp	r3, #42	; 0x2a
 8005a28:	d8ed      	bhi.n	8005a06 <acc_service_activate+0x56>
 8005a2a:	e7e9      	b.n	8005a00 <acc_service_activate+0x50>
 8005a2c:	7266      	strb	r6, [r4, #9]
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	acc09ee8 	.word	0xacc09ee8
 8005a34:	20000640 	.word	0x20000640
 8005a38:	08015588 	.word	0x08015588
 8005a3c:	08015888 	.word	0x08015888
 8005a40:	08015890 	.word	0x08015890
 8005a44:	200001d1 	.word	0x200001d1
 8005a48:	200001d4 	.word	0x200001d4

08005a4c <acc_service_deactivate>:
 8005a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a50:	b120      	cbz	r0, 8005a5c <acc_service_deactivate+0x10>
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <acc_service_deactivate+0x78>)
 8005a54:	6802      	ldr	r2, [r0, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	4604      	mov	r4, r0
 8005a5a:	d00e      	beq.n	8005a7a <acc_service_deactivate+0x2e>
 8005a5c:	4c1a      	ldr	r4, [pc, #104]	; (8005ac8 <acc_service_deactivate+0x7c>)
 8005a5e:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <acc_service_deactivate+0x80>)
 8005a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a62:	491b      	ldr	r1, [pc, #108]	; (8005ad0 <acc_service_deactivate+0x84>)
 8005a64:	2000      	movs	r0, #0
 8005a66:	4798      	blx	r3
 8005a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <acc_service_deactivate+0x88>)
 8005a6c:	4918      	ldr	r1, [pc, #96]	; (8005ad0 <acc_service_deactivate+0x84>)
 8005a6e:	2000      	movs	r0, #0
 8005a70:	4798      	blx	r3
 8005a72:	2500      	movs	r5, #0
 8005a74:	4628      	mov	r0, r5
 8005a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7a:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <acc_service_deactivate+0x8c>)
 8005a7c:	781d      	ldrb	r5, [r3, #0]
 8005a7e:	b1dd      	cbz	r5, 8005ab8 <acc_service_deactivate+0x6c>
 8005a80:	7a43      	ldrb	r3, [r0, #9]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f6      	bne.n	8005a74 <acc_service_deactivate+0x28>
 8005a86:	6843      	ldr	r3, [r0, #4]
 8005a88:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8a:	d815      	bhi.n	8005ab8 <acc_service_deactivate+0x6c>
 8005a8c:	4e13      	ldr	r6, [pc, #76]	; (8005adc <acc_service_deactivate+0x90>)
 8005a8e:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 8005a92:	b98f      	cbnz	r7, 8005ab8 <acc_service_deactivate+0x6c>
 8005a94:	f04f 0801 	mov.w	r8, #1
 8005a98:	3018      	adds	r0, #24
 8005a9a:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 8005a9e:	f004 f913 	bl	8009cc8 <acc_sensor_manager_stop_measurement>
 8005aa2:	6863      	ldr	r3, [r4, #4]
 8005aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa6:	d809      	bhi.n	8005abc <acc_service_deactivate+0x70>
 8005aa8:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 8005aac:	7057      	strb	r7, [r2, #1]
 8005aae:	f884 8009 	strb.w	r8, [r4, #9]
 8005ab2:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 8005ab6:	e7dd      	b.n	8005a74 <acc_service_deactivate+0x28>
 8005ab8:	4c03      	ldr	r4, [pc, #12]	; (8005ac8 <acc_service_deactivate+0x7c>)
 8005aba:	e7d5      	b.n	8005a68 <acc_service_deactivate+0x1c>
 8005abc:	f884 8009 	strb.w	r8, [r4, #9]
 8005ac0:	e7d8      	b.n	8005a74 <acc_service_deactivate+0x28>
 8005ac2:	bf00      	nop
 8005ac4:	acc09ee8 	.word	0xacc09ee8
 8005ac8:	20000640 	.word	0x20000640
 8005acc:	08015588 	.word	0x08015588
 8005ad0:	08015888 	.word	0x08015888
 8005ad4:	080158ac 	.word	0x080158ac
 8005ad8:	200001d1 	.word	0x200001d1
 8005adc:	200001d4 	.word	0x200001d4

08005ae0 <acc_service_requested_start_get>:
 8005ae0:	b508      	push	{r3, lr}
 8005ae2:	f7ff ff2f 	bl	8005944 <acc_service_get_base_configuration>
 8005ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005aea:	f001 bac3 	b.w	8007074 <acc_base_configuration_requested_start_get>
 8005aee:	bf00      	nop

08005af0 <acc_service_pipeline_destroy>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	4604      	mov	r4, r0
 8005af4:	6900      	ldr	r0, [r0, #16]
 8005af6:	b118      	cbz	r0, 8005b00 <acc_service_pipeline_destroy+0x10>
 8005af8:	68c3      	ldr	r3, [r0, #12]
 8005afa:	4798      	blx	r3
 8005afc:	2300      	movs	r3, #0
 8005afe:	6123      	str	r3, [r4, #16]
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	bf00      	nop

08005b04 <acc_service_get_next>:
 8005b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b08:	460e      	mov	r6, r1
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	b118      	cbz	r0, 8005b18 <acc_service_get_next+0x14>
 8005b10:	4b32      	ldr	r3, [pc, #200]	; (8005bdc <acc_service_get_next+0xd8>)
 8005b12:	6802      	ldr	r2, [r0, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d02c      	beq.n	8005b72 <acc_service_get_next+0x6e>
 8005b18:	4b31      	ldr	r3, [pc, #196]	; (8005be0 <acc_service_get_next+0xdc>)
 8005b1a:	4a32      	ldr	r2, [pc, #200]	; (8005be4 <acc_service_get_next+0xe0>)
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	4932      	ldr	r1, [pc, #200]	; (8005be8 <acc_service_get_next+0xe4>)
 8005b20:	2000      	movs	r0, #0
 8005b22:	4798      	blx	r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	7eb5      	ldrb	r5, [r6, #26]
 8005b28:	b175      	cbz	r5, 8005b48 <acc_service_get_next+0x44>
 8005b2a:	6872      	ldr	r2, [r6, #4]
 8005b2c:	b10a      	cbz	r2, 8005b32 <acc_service_get_next+0x2e>
 8005b2e:	68f2      	ldr	r2, [r6, #12]
 8005b30:	b96a      	cbnz	r2, 8005b4e <acc_service_get_next+0x4a>
 8005b32:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <acc_service_get_next+0xdc>)
 8005b34:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <acc_service_get_next+0xe8>)
 8005b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b38:	492b      	ldr	r1, [pc, #172]	; (8005be8 <acc_service_get_next+0xe4>)
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	4798      	blx	r3
 8005b3e:	2500      	movs	r5, #0
 8005b40:	4628      	mov	r0, r5
 8005b42:	b002      	add	sp, #8
 8005b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b48:	68b2      	ldr	r2, [r6, #8]
 8005b4a:	2a00      	cmp	r2, #0
 8005b4c:	d035      	beq.n	8005bba <acc_service_get_next+0xb6>
 8005b4e:	b923      	cbnz	r3, 8005b5a <acc_service_get_next+0x56>
 8005b50:	2500      	movs	r5, #0
 8005b52:	4628      	mov	r0, r5
 8005b54:	b002      	add	sp, #8
 8005b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b5a:	7a23      	ldrb	r3, [r4, #8]
 8005b5c:	7832      	ldrb	r2, [r6, #0]
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <acc_service_get_next+0x72>
 8005b62:	491f      	ldr	r1, [pc, #124]	; (8005be0 <acc_service_get_next+0xdc>)
 8005b64:	9200      	str	r2, [sp, #0]
 8005b66:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005b68:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <acc_service_get_next+0xec>)
 8005b6a:	491f      	ldr	r1, [pc, #124]	; (8005be8 <acc_service_get_next+0xe4>)
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	47a0      	blx	r4
 8005b70:	e7ee      	b.n	8005b50 <acc_service_get_next+0x4c>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e7d7      	b.n	8005b26 <acc_service_get_next+0x22>
 8005b76:	7e37      	ldrb	r7, [r6, #24]
 8005b78:	bb4f      	cbnz	r7, 8005bce <acc_service_get_next+0xca>
 8005b7a:	f894 8009 	ldrb.w	r8, [r4, #9]
 8005b7e:	f1b8 0f00 	cmp.w	r8, #0
 8005b82:	d00f      	beq.n	8005ba4 <acc_service_get_next+0xa0>
 8005b84:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <acc_service_get_next+0xdc>)
 8005b86:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <acc_service_get_next+0xf0>)
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	4917      	ldr	r1, [pc, #92]	; (8005be8 <acc_service_get_next+0xe4>)
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	4798      	blx	r3
 8005b90:	2500      	movs	r5, #0
 8005b92:	2f00      	cmp	r7, #0
 8005b94:	d0dd      	beq.n	8005b52 <acc_service_get_next+0x4e>
 8005b96:	4620      	mov	r0, r4
 8005b98:	f7ff ff58 	bl	8005a4c <acc_service_deactivate>
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	b002      	add	sp, #8
 8005ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba4:	6923      	ldr	r3, [r4, #16]
 8005ba6:	6166      	str	r6, [r4, #20]
 8005ba8:	e9d3 0200 	ldrd	r0, r2, [r3]
 8005bac:	4790      	blx	r2
 8005bae:	7e75      	ldrb	r5, [r6, #25]
 8005bb0:	f8c4 8014 	str.w	r8, [r4, #20]
 8005bb4:	f085 0501 	eor.w	r5, r5, #1
 8005bb8:	e7eb      	b.n	8005b92 <acc_service_get_next+0x8e>
 8005bba:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <acc_service_get_next+0xdc>)
 8005bbc:	4a0e      	ldr	r2, [pc, #56]	; (8005bf8 <acc_service_get_next+0xf4>)
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	4909      	ldr	r1, [pc, #36]	; (8005be8 <acc_service_get_next+0xe4>)
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	4798      	blx	r3
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	b002      	add	sp, #8
 8005bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f7ff feee 	bl	80059b0 <acc_service_activate>
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d1cf      	bne.n	8005b7a <acc_service_get_next+0x76>
 8005bda:	e7b9      	b.n	8005b50 <acc_service_get_next+0x4c>
 8005bdc:	acc09ee8 	.word	0xacc09ee8
 8005be0:	20000640 	.word	0x20000640
 8005be4:	08015588 	.word	0x08015588
 8005be8:	08015888 	.word	0x08015888
 8005bec:	080158c8 	.word	0x080158c8
 8005bf0:	08015900 	.word	0x08015900
 8005bf4:	0801591c 	.word	0x0801591c
 8005bf8:	080158e8 	.word	0x080158e8

08005bfc <acc_service_send_data>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	9e06      	ldr	r6, [sp, #24]
 8005c00:	6944      	ldr	r4, [r0, #20]
 8005c02:	7835      	ldrb	r5, [r6, #0]
 8005c04:	461f      	mov	r7, r3
 8005c06:	b91d      	cbnz	r5, 8005c10 <acc_service_send_data+0x14>
 8005c08:	7ea5      	ldrb	r5, [r4, #26]
 8005c0a:	b95d      	cbnz	r5, 8005c24 <acc_service_send_data+0x28>
 8005c0c:	68a3      	ldr	r3, [r4, #8]
 8005c0e:	6019      	str	r1, [r3, #0]
 8005c10:	6920      	ldr	r0, [r4, #16]
 8005c12:	7665      	strb	r5, [r4, #25]
 8005c14:	b128      	cbz	r0, 8005c22 <acc_service_send_data+0x26>
 8005c16:	6962      	ldr	r2, [r4, #20]
 8005c18:	4639      	mov	r1, r7
 8005c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c1e:	f00a bf9b 	b.w	8010b58 <memcpy>
 8005c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c24:	68e3      	ldr	r3, [r4, #12]
 8005c26:	6860      	ldr	r0, [r4, #4]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	bf28      	it	cs
 8005c2c:	461a      	movcs	r2, r3
 8005c2e:	f00a ff93 	bl	8010b58 <memcpy>
 8005c32:	7835      	ldrb	r5, [r6, #0]
 8005c34:	e7ec      	b.n	8005c10 <acc_service_send_data+0x14>
 8005c36:	bf00      	nop

08005c38 <acc_service_set_module_active>:
 8005c38:	4b01      	ldr	r3, [pc, #4]	; (8005c40 <acc_service_set_module_active+0x8>)
 8005c3a:	7018      	strb	r0, [r3, #0]
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	200001d1 	.word	0x200001d1

08005c44 <acc_service_handle_valid>:
 8005c44:	b508      	push	{r3, lr}
 8005c46:	b118      	cbz	r0, 8005c50 <acc_service_handle_valid+0xc>
 8005c48:	6802      	ldr	r2, [r0, #0]
 8005c4a:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <acc_service_handle_valid+0x20>)
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d007      	beq.n	8005c60 <acc_service_handle_valid+0x1c>
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <acc_service_handle_valid+0x24>)
 8005c52:	4a06      	ldr	r2, [pc, #24]	; (8005c6c <acc_service_handle_valid+0x28>)
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	4906      	ldr	r1, [pc, #24]	; (8005c70 <acc_service_handle_valid+0x2c>)
 8005c58:	2000      	movs	r0, #0
 8005c5a:	4798      	blx	r3
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	bd08      	pop	{r3, pc}
 8005c60:	2001      	movs	r0, #1
 8005c62:	bd08      	pop	{r3, pc}
 8005c64:	acc09ee8 	.word	0xacc09ee8
 8005c68:	20000640 	.word	0x20000640
 8005c6c:	08015588 	.word	0x08015588
 8005c70:	08015888 	.word	0x08015888

08005c74 <acc_service_configuration_valid>:
 8005c74:	b508      	push	{r3, lr}
 8005c76:	b118      	cbz	r0, 8005c80 <acc_service_configuration_valid+0xc>
 8005c78:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <acc_service_configuration_valid+0x2c>)
 8005c7a:	6802      	ldr	r2, [r0, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d007      	beq.n	8005c90 <acc_service_configuration_valid+0x1c>
 8005c80:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <acc_service_configuration_valid+0x30>)
 8005c82:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <acc_service_configuration_valid+0x34>)
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	4909      	ldr	r1, [pc, #36]	; (8005cac <acc_service_configuration_valid+0x38>)
 8005c88:	2000      	movs	r0, #0
 8005c8a:	4798      	blx	r3
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	bd08      	pop	{r3, pc}
 8005c90:	8b03      	ldrh	r3, [r0, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f4      	beq.n	8005c80 <acc_service_configuration_valid+0xc>
 8005c96:	6943      	ldr	r3, [r0, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0f1      	beq.n	8005c80 <acc_service_configuration_valid+0xc>
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	bd08      	pop	{r3, pc}
 8005ca0:	acc09dd7 	.word	0xacc09dd7
 8005ca4:	20000640 	.word	0x20000640
 8005ca8:	080155f8 	.word	0x080155f8
 8005cac:	08015888 	.word	0x08015888

08005cb0 <acc_service_configuration_check>:
 8005cb0:	b508      	push	{r3, lr}
 8005cb2:	b118      	cbz	r0, 8005cbc <acc_service_configuration_check+0xc>
 8005cb4:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <acc_service_configuration_check+0x3c>)
 8005cb6:	6802      	ldr	r2, [r0, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d007      	beq.n	8005ccc <acc_service_configuration_check+0x1c>
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <acc_service_configuration_check+0x40>)
 8005cbe:	4a0d      	ldr	r2, [pc, #52]	; (8005cf4 <acc_service_configuration_check+0x44>)
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	490d      	ldr	r1, [pc, #52]	; (8005cf8 <acc_service_configuration_check+0x48>)
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	4798      	blx	r3
 8005cc8:	2000      	movs	r0, #0
 8005cca:	bd08      	pop	{r3, pc}
 8005ccc:	8b03      	ldrh	r3, [r0, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f4      	beq.n	8005cbc <acc_service_configuration_check+0xc>
 8005cd2:	6943      	ldr	r3, [r0, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f1      	beq.n	8005cbc <acc_service_configuration_check+0xc>
 8005cd8:	7943      	ldrb	r3, [r0, #5]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d801      	bhi.n	8005ce4 <acc_service_configuration_check+0x34>
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	bd08      	pop	{r3, pc}
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <acc_service_configuration_check+0x40>)
 8005ce6:	4a05      	ldr	r2, [pc, #20]	; (8005cfc <acc_service_configuration_check+0x4c>)
 8005ce8:	e7ea      	b.n	8005cc0 <acc_service_configuration_check+0x10>
 8005cea:	bf00      	nop
 8005cec:	acc09dd7 	.word	0xacc09dd7
 8005cf0:	20000640 	.word	0x20000640
 8005cf4:	080155f8 	.word	0x080155f8
 8005cf8:	08015888 	.word	0x08015888
 8005cfc:	08015934 	.word	0x08015934

08005d00 <acc_service_profile_set>:
 8005d00:	b510      	push	{r4, lr}
 8005d02:	b138      	cbz	r0, 8005d14 <acc_service_profile_set+0x14>
 8005d04:	6882      	ldr	r2, [r0, #8]
 8005d06:	4604      	mov	r4, r0
 8005d08:	b122      	cbz	r2, 8005d14 <acc_service_profile_set+0x14>
 8005d0a:	7141      	strb	r1, [r0, #5]
 8005d0c:	4790      	blx	r2
 8005d0e:	7b23      	ldrb	r3, [r4, #12]
 8005d10:	b943      	cbnz	r3, 8005d24 <acc_service_profile_set+0x24>
 8005d12:	bd10      	pop	{r4, pc}
 8005d14:	f001 f910 	bl	8006f38 <acc_rss_integration_log_level>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d0fa      	beq.n	8005d12 <acc_service_profile_set+0x12>
 8005d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d20:	f7ff be04 	b.w	800592c <acc_service_maximize_signal_attenuation_set.part.0>
 8005d24:	4620      	mov	r0, r4
 8005d26:	2101      	movs	r1, #1
 8005d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2c:	f7ff be22 	b.w	8005974 <set_maximize_signal_attenuation>

08005d30 <acc_service_maximize_signal_attenuation_set>:
 8005d30:	b508      	push	{r3, lr}
 8005d32:	b120      	cbz	r0, 8005d3e <acc_service_maximize_signal_attenuation_set+0xe>
 8005d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d38:	7301      	strb	r1, [r0, #12]
 8005d3a:	f7ff be1b 	b.w	8005974 <set_maximize_signal_attenuation>
 8005d3e:	f001 f8fb 	bl	8006f38 <acc_rss_integration_log_level>
 8005d42:	b118      	cbz	r0, 8005d4c <acc_service_maximize_signal_attenuation_set+0x1c>
 8005d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d48:	f7ff bdf0 	b.w	800592c <acc_service_maximize_signal_attenuation_set.part.0>
 8005d4c:	bd08      	pop	{r3, pc}
 8005d4e:	bf00      	nop

08005d50 <acc_service_initialize_service_configuration>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	7101      	strb	r1, [r0, #4]
 8005d54:	6102      	str	r2, [r0, #16]
 8005d56:	9905      	ldr	r1, [sp, #20]
 8005d58:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8005d5c:	4d07      	ldr	r5, [pc, #28]	; (8005d7c <acc_service_initialize_service_configuration+0x2c>)
 8005d5e:	6143      	str	r3, [r0, #20]
 8005d60:	4604      	mov	r4, r0
 8005d62:	6005      	str	r5, [r0, #0]
 8005d64:	6081      	str	r1, [r0, #8]
 8005d66:	8302      	strh	r2, [r0, #24]
 8005d68:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8005d6c:	f7ff ffc8 	bl	8005d00 <acc_service_profile_set>
 8005d70:	4620      	mov	r0, r4
 8005d72:	2100      	movs	r1, #0
 8005d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d78:	f7ff bfda 	b.w	8005d30 <acc_service_maximize_signal_attenuation_set>
 8005d7c:	acc09dd7 	.word	0xacc09dd7

08005d80 <envelope_send_data>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	460b      	mov	r3, r1
 8005d84:	b084      	sub	sp, #16
 8005d86:	ac02      	add	r4, sp, #8
 8005d88:	4601      	mov	r1, r0
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	795a      	ldrb	r2, [r3, #5]
 8005d8e:	9400      	str	r4, [sp, #0]
 8005d90:	791e      	ldrb	r6, [r3, #4]
 8005d92:	79dd      	ldrb	r5, [r3, #7]
 8005d94:	799c      	ldrb	r4, [r3, #6]
 8005d96:	f88d 200d 	strb.w	r2, [sp, #13]
 8005d9a:	f88d 2008 	strb.w	r2, [sp, #8]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	f88d 600e 	strb.w	r6, [sp, #14]
 8005da4:	ab03      	add	r3, sp, #12
 8005da6:	f88d 500f 	strb.w	r5, [sp, #15]
 8005daa:	f88d 400c 	strb.w	r4, [sp, #12]
 8005dae:	f7ff ff25 	bl	8005bfc <acc_service_send_data>
 8005db2:	b004      	add	sp, #16
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	bf00      	nop

08005db8 <envelope_create_service>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	b0a4      	sub	sp, #144	; 0x90
 8005dbc:	2288      	movs	r2, #136	; 0x88
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	a802      	add	r0, sp, #8
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	f00a fec8 	bl	8010b58 <memcpy>
 8005dc8:	a809      	add	r0, sp, #36	; 0x24
 8005dca:	f001 fb9b 	bl	8007504 <acc_base_configuration_downsampling_factor_get>
 8005dce:	ee07 0a90 	vmov	s15, r0
 8005dd2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005dd6:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8005dda:	a809      	add	r0, sp, #36	; 0x24
 8005ddc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005de0:	f001 fa6c 	bl	80072bc <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 8005de4:	a802      	add	r0, sp, #8
 8005de6:	f7ff ff63 	bl	8005cb0 <acc_service_configuration_check>
 8005dea:	b1c0      	cbz	r0, 8005e1e <envelope_create_service+0x66>
 8005dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d00f      	beq.n	8005e12 <envelope_create_service+0x5a>
 8005df2:	a809      	add	r0, sp, #36	; 0x24
 8005df4:	f001 fd04 	bl	8007800 <acc_base_configuration_check>
 8005df8:	b188      	cbz	r0, 8005e1e <envelope_create_service+0x66>
 8005dfa:	a809      	add	r0, sp, #36	; 0x24
 8005dfc:	f001 fb82 	bl	8007504 <acc_base_configuration_downsampling_factor_get>
 8005e00:	1e43      	subs	r3, r0, #1
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d90d      	bls.n	8005e24 <envelope_create_service+0x6c>
 8005e08:	2804      	cmp	r0, #4
 8005e0a:	d00b      	beq.n	8005e24 <envelope_create_service+0x6c>
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <envelope_create_service+0xc0>)
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <envelope_create_service+0xc4>)
 8005e10:	e001      	b.n	8005e16 <envelope_create_service+0x5e>
 8005e12:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <envelope_create_service+0xc0>)
 8005e14:	4a1a      	ldr	r2, [pc, #104]	; (8005e80 <envelope_create_service+0xc8>)
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	491a      	ldr	r1, [pc, #104]	; (8005e84 <envelope_create_service+0xcc>)
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	4798      	blx	r3
 8005e1e:	2000      	movs	r0, #0
 8005e20:	b024      	add	sp, #144	; 0x90
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	2200      	movs	r2, #0
 8005e26:	4611      	mov	r1, r2
 8005e28:	a809      	add	r0, sp, #36	; 0x24
 8005e2a:	f001 fbef 	bl	800760c <acc_base_configuration_cca_get>
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4606      	mov	r6, r0
 8005e32:	a809      	add	r0, sp, #36	; 0x24
 8005e34:	f001 f9fa 	bl	800722c <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005e38:	b106      	cbz	r6, 8005e3c <envelope_create_service+0x84>
 8005e3a:	b990      	cbnz	r0, 8005e62 <envelope_create_service+0xaa>
 8005e3c:	792b      	ldrb	r3, [r5, #4]
 8005e3e:	7223      	strb	r3, [r4, #8]
 8005e40:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <envelope_create_service+0xd0>)
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	aa09      	add	r2, sp, #36	; 0x24
 8005e46:	4623      	mov	r3, r4
 8005e48:	a901      	add	r1, sp, #4
 8005e4a:	f104 0018 	add.w	r0, r4, #24
 8005e4e:	f001 fd75 	bl	800793c <acc_pipeline_envelope_assemble>
 8005e52:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <envelope_create_service+0xd4>)
 8005e54:	6120      	str	r0, [r4, #16]
 8005e56:	3800      	subs	r0, #0
 8005e58:	bf18      	it	ne
 8005e5a:	2001      	movne	r0, #1
 8005e5c:	60e3      	str	r3, [r4, #12]
 8005e5e:	b024      	add	sp, #144	; 0x90
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
 8005e62:	f001 f869 	bl	8006f38 <acc_rss_integration_log_level>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d0e8      	beq.n	8005e3c <envelope_create_service+0x84>
 8005e6a:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <envelope_create_service+0xc0>)
 8005e6c:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <envelope_create_service+0xd8>)
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	4904      	ldr	r1, [pc, #16]	; (8005e84 <envelope_create_service+0xcc>)
 8005e72:	2001      	movs	r0, #1
 8005e74:	4798      	blx	r3
 8005e76:	e7e1      	b.n	8005e3c <envelope_create_service+0x84>
 8005e78:	20000640 	.word	0x20000640
 8005e7c:	0801599c 	.word	0x0801599c
 8005e80:	0801594c 	.word	0x0801594c
 8005e84:	08015988 	.word	0x08015988
 8005e88:	08005d81 	.word	0x08005d81
 8005e8c:	08005af1 	.word	0x08005af1
 8005e90:	080159bc 	.word	0x080159bc

08005e94 <get_and_validate_envelope_configuration>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	4604      	mov	r4, r0
 8005e98:	f7ff feec 	bl	8005c74 <acc_service_configuration_valid>
 8005e9c:	b108      	cbz	r0, 8005ea2 <get_and_validate_envelope_configuration+0xe>
 8005e9e:	7923      	ldrb	r3, [r4, #4]
 8005ea0:	b153      	cbz	r3, 8005eb8 <get_and_validate_envelope_configuration+0x24>
 8005ea2:	f001 f849 	bl	8006f38 <acc_rss_integration_log_level>
 8005ea6:	b130      	cbz	r0, 8005eb6 <get_and_validate_envelope_configuration+0x22>
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <get_and_validate_envelope_configuration+0x28>)
 8005eaa:	4a05      	ldr	r2, [pc, #20]	; (8005ec0 <get_and_validate_envelope_configuration+0x2c>)
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	4905      	ldr	r1, [pc, #20]	; (8005ec4 <get_and_validate_envelope_configuration+0x30>)
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	4798      	blx	r3
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	bd10      	pop	{r4, pc}
 8005eb8:	4620      	mov	r0, r4
 8005eba:	bd10      	pop	{r4, pc}
 8005ebc:	20000640 	.word	0x20000640
 8005ec0:	080155f8 	.word	0x080155f8
 8005ec4:	08015988 	.word	0x08015988

08005ec8 <set_configuration_for_profile>:
 8005ec8:	b530      	push	{r4, r5, lr}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	460c      	mov	r4, r1
 8005ece:	f7ff ffe1 	bl	8005e94 <get_and_validate_envelope_configuration>
 8005ed2:	b1c0      	cbz	r0, 8005f06 <set_configuration_for_profile+0x3e>
 8005ed4:	1e61      	subs	r1, r4, #1
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	301c      	adds	r0, #28
 8005eda:	2904      	cmp	r1, #4
 8005edc:	d813      	bhi.n	8005f06 <set_configuration_for_profile+0x3e>
 8005ede:	e8df f001 	tbb	[pc, r1]
 8005ee2:	2514      	.short	0x2514
 8005ee4:	3836      	.short	0x3836
 8005ee6:	03          	.byte	0x03
 8005ee7:	00          	.byte	0x00
 8005ee8:	2110      	movs	r1, #16
 8005eea:	9001      	str	r0, [sp, #4]
 8005eec:	f001 fa6e 	bl	80073cc <acc_base_configuration_wg_duration_set>
 8005ef0:	9801      	ldr	r0, [sp, #4]
 8005ef2:	2106      	movs	r1, #6
 8005ef4:	f001 fa52 	bl	800739c <acc_base_configuration_integrator_set>
 8005ef8:	9801      	ldr	r0, [sp, #4]
 8005efa:	2101      	movs	r1, #1
 8005efc:	f001 fa7e 	bl	80073fc <acc_base_configuration_integrator_ramp_up_set>
 8005f00:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <set_configuration_for_profile+0x90>)
 8005f02:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005f06:	b003      	add	sp, #12
 8005f08:	bd30      	pop	{r4, r5, pc}
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	9001      	str	r0, [sp, #4]
 8005f0e:	f001 fa5d 	bl	80073cc <acc_base_configuration_wg_duration_set>
 8005f12:	9801      	ldr	r0, [sp, #4]
 8005f14:	2100      	movs	r1, #0
 8005f16:	f001 fa41 	bl	800739c <acc_base_configuration_integrator_set>
 8005f1a:	9801      	ldr	r0, [sp, #4]
 8005f1c:	2103      	movs	r1, #3
 8005f1e:	f001 fa6d 	bl	80073fc <acc_base_configuration_integrator_ramp_up_set>
 8005f22:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <set_configuration_for_profile+0x94>)
 8005f24:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005f28:	b003      	add	sp, #12
 8005f2a:	bd30      	pop	{r4, r5, pc}
 8005f2c:	2107      	movs	r1, #7
 8005f2e:	9001      	str	r0, [sp, #4]
 8005f30:	f001 fa4c 	bl	80073cc <acc_base_configuration_wg_duration_set>
 8005f34:	9801      	ldr	r0, [sp, #4]
 8005f36:	2106      	movs	r1, #6
 8005f38:	f001 fa30 	bl	800739c <acc_base_configuration_integrator_set>
 8005f3c:	9801      	ldr	r0, [sp, #4]
 8005f3e:	2109      	movs	r1, #9
 8005f40:	f001 fa5c 	bl	80073fc <acc_base_configuration_integrator_ramp_up_set>
 8005f44:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <set_configuration_for_profile+0x90>)
 8005f46:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005f4a:	b003      	add	sp, #12
 8005f4c:	bd30      	pop	{r4, r5, pc}
 8005f4e:	2109      	movs	r1, #9
 8005f50:	e7ed      	b.n	8005f2e <set_configuration_for_profile+0x66>
 8005f52:	210c      	movs	r1, #12
 8005f54:	e7c9      	b.n	8005eea <set_configuration_for_profile+0x22>
 8005f56:	bf00      	nop
 8005f58:	3b843809 	.word	0x3b843809
 8005f5c:	3c8461fa 	.word	0x3c8461fa

08005f60 <acc_service_envelope_configuration_create>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	4a3e      	ldr	r2, [pc, #248]	; (800605c <acc_service_envelope_configuration_create+0xfc>)
 8005f64:	b084      	sub	sp, #16
 8005f66:	236d      	movs	r3, #109	; 0x6d
 8005f68:	2188      	movs	r1, #136	; 0x88
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	f000 ffac 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 8005f70:	4605      	mov	r5, r0
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d06f      	beq.n	8006056 <acc_service_envelope_configuration_create+0xf6>
 8005f76:	493a      	ldr	r1, [pc, #232]	; (8006060 <acc_service_envelope_configuration_create+0x100>)
 8005f78:	f100 041c 	add.w	r4, r0, #28
 8005f7c:	2602      	movs	r6, #2
 8005f7e:	2358      	movs	r3, #88	; 0x58
 8005f80:	4622      	mov	r2, r4
 8005f82:	e9cd 3100 	strd	r3, r1, [sp]
 8005f86:	9602      	str	r6, [sp, #8]
 8005f88:	4b36      	ldr	r3, [pc, #216]	; (8006064 <acc_service_envelope_configuration_create+0x104>)
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	f7ff fee0 	bl	8005d50 <acc_service_initialize_service_configuration>
 8005f90:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8006068 <acc_service_envelope_configuration_create+0x108>
 8005f94:	4620      	mov	r0, r4
 8005f96:	f001 f87d 	bl	8007094 <acc_base_configuration_requested_start_set>
 8005f9a:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800606c <acc_service_envelope_configuration_create+0x10c>
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f001 f89a 	bl	80070d8 <acc_base_configuration_requested_length_set>
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	2106      	movs	r1, #6
 8005fa8:	f001 fb58 	bl	800765c <acc_base_configuration_mur_set>
 8005fac:	4620      	mov	r0, r4
 8005fae:	210a      	movs	r1, #10
 8005fb0:	f001 f902 	bl	80071b8 <acc_base_configuration_hw_accelerated_average_samples_set>
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f001 f850 	bl	800705c <acc_base_configuration_sensor_set>
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f001 f89d 	bl	80070fc <acc_base_configuration_repetition_mode_on_demand_set>
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f001 f8af 	bl	8007128 <acc_base_configuration_power_save_mode_set>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f001 fa39 	bl	8007444 <acc_base_configuration_use_point_range_set>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f001 fa1d 	bl	8007414 <acc_base_configuration_sweep_type_debug_set>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	2100      	movs	r1, #0
 8005fde:	f001 f8bb 	bl	8007158 <acc_base_configuration_tx_disable_set>
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	f001 f8cf 	bl	8007188 <acc_base_configuration_decrease_tx_emission_set>
 8005fea:	2200      	movs	r2, #0
 8005fec:	4611      	mov	r1, r2
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f001 fb21 	bl	8007638 <acc_base_configuration_cca_set>
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	21ff      	movs	r1, #255	; 0xff
 8005ffa:	f001 fa47 	bl	800748c <acc_base_configuration_staggered_vga_stabilization_time_set>
 8005ffe:	4620      	mov	r0, r4
 8006000:	2100      	movs	r1, #0
 8006002:	f001 fa37 	bl	8007474 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8006006:	4620      	mov	r0, r4
 8006008:	2101      	movs	r1, #1
 800600a:	f001 fa87 	bl	800751c <acc_base_configuration_downsampling_factor_set>
 800600e:	4620      	mov	r0, r4
 8006010:	210b      	movs	r1, #11
 8006012:	f001 f9ab 	bl	800736c <acc_base_configuration_gain_set>
 8006016:	2101      	movs	r1, #1
 8006018:	4620      	mov	r0, r4
 800601a:	f001 fa97 	bl	800754c <acc_base_configuration_noise_level_normalization_set>
 800601e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8006070 <acc_service_envelope_configuration_create+0x110>
 8006022:	4620      	mov	r0, r4
 8006024:	f001 f8f0 	bl	8007208 <acc_base_configuration_phase_compensation_alpha_set>
 8006028:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8006074 <acc_service_envelope_configuration_create+0x114>
 800602c:	4620      	mov	r0, r4
 800602e:	2101      	movs	r1, #1
 8006030:	f001 f90a 	bl	8007248 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8006034:	4620      	mov	r0, r4
 8006036:	2101      	movs	r1, #1
 8006038:	f001 f924 	bl	8007284 <acc_base_configuration_filter_demodulated_data_set>
 800603c:	4620      	mov	r0, r4
 800603e:	2101      	movs	r1, #1
 8006040:	f001 faa8 	bl	8007594 <acc_base_configuration_asynchronous_measurement_set>
 8006044:	4620      	mov	r0, r4
 8006046:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 800604a:	f001 fabb 	bl	80075c4 <acc_base_configuration_min_pipeline_memory_size_set>
 800604e:	490a      	ldr	r1, [pc, #40]	; (8006078 <acc_service_envelope_configuration_create+0x118>)
 8006050:	4620      	mov	r0, r4
 8006052:	f001 f8bd 	bl	80071d0 <acc_base_configuration_radar_engine_creation_set>
 8006056:	4628      	mov	r0, r5
 8006058:	b004      	add	sp, #16
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	08015988 	.word	0x08015988
 8006060:	08005ec9 	.word	0x08005ec9
 8006064:	08005db9 	.word	0x08005db9
 8006068:	3e4ccccd 	.word	0x3e4ccccd
 800606c:	3ecccccd 	.word	0x3ecccccd
 8006070:	3dcccccd 	.word	0x3dcccccd
 8006074:	3e99999a 	.word	0x3e99999a
 8006078:	08008715 	.word	0x08008715

0800607c <acc_service_envelope_configuration_destroy>:
 800607c:	b130      	cbz	r0, 800608c <acc_service_envelope_configuration_destroy+0x10>
 800607e:	b510      	push	{r4, lr}
 8006080:	4604      	mov	r4, r0
 8006082:	6800      	ldr	r0, [r0, #0]
 8006084:	f7ff fdf6 	bl	8005c74 <acc_service_configuration_valid>
 8006088:	b908      	cbnz	r0, 800608e <acc_service_envelope_configuration_destroy+0x12>
 800608a:	bd10      	pop	{r4, pc}
 800608c:	4770      	bx	lr
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	f7ff ff00 	bl	8005e94 <get_and_validate_envelope_configuration>
 8006094:	f000 ff38 	bl	8006f08 <acc_rss_integration_mem_free>
 8006098:	2300      	movs	r3, #0
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	bd10      	pop	{r4, pc}
 800609e:	bf00      	nop

080060a0 <acc_service_envelope_running_average_factor_set>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	ed2d 8b02 	vpush	{d8}
 80060a6:	4604      	mov	r4, r0
 80060a8:	eeb0 8a40 	vmov.f32	s16, s0
 80060ac:	f7ff fef2 	bl	8005e94 <get_and_validate_envelope_configuration>
 80060b0:	b1c0      	cbz	r0, 80060e4 <acc_service_envelope_running_average_factor_set+0x44>
 80060b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80060b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ba:	d406      	bmi.n	80060ca <acc_service_envelope_running_average_factor_set+0x2a>
 80060bc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80060c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80060c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c8:	dd0f      	ble.n	80060ea <acc_service_envelope_running_average_factor_set+0x4a>
 80060ca:	f000 ff35 	bl	8006f38 <acc_rss_integration_log_level>
 80060ce:	b148      	cbz	r0, 80060e4 <acc_service_envelope_running_average_factor_set+0x44>
 80060d0:	ecbd 8b02 	vpop	{d8}
 80060d4:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <acc_service_envelope_running_average_factor_set+0x70>)
 80060d6:	4a0f      	ldr	r2, [pc, #60]	; (8006114 <acc_service_envelope_running_average_factor_set+0x74>)
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	490f      	ldr	r1, [pc, #60]	; (8006118 <acc_service_envelope_running_average_factor_set+0x78>)
 80060dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e0:	2001      	movs	r0, #1
 80060e2:	4718      	bx	r3
 80060e4:	ecbd 8b02 	vpop	{d8}
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7ff fc2a 	bl	8005944 <acc_service_get_base_configuration>
 80060f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80060f4:	ee38 0ac8 	vsub.f32	s0, s17, s16
 80060f8:	ecbd 8b02 	vpop	{d8}
 80060fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006104:	bf14      	ite	ne
 8006106:	2101      	movne	r1, #1
 8006108:	2100      	moveq	r1, #0
 800610a:	f001 b89d 	b.w	8007248 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 800610e:	bf00      	nop
 8006110:	20000640 	.word	0x20000640
 8006114:	08015a04 	.word	0x08015a04
 8006118:	08015988 	.word	0x08015988

0800611c <acc_service_envelope_get_metadata>:
 800611c:	b1e0      	cbz	r0, 8006158 <acc_service_envelope_get_metadata+0x3c>
 800611e:	7a03      	ldrb	r3, [r0, #8]
 8006120:	b9d3      	cbnz	r3, 8006158 <acc_service_envelope_get_metadata+0x3c>
 8006122:	b1c9      	cbz	r1, 8006158 <acc_service_envelope_get_metadata+0x3c>
 8006124:	6903      	ldr	r3, [r0, #16]
 8006126:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800615c <acc_service_envelope_get_metadata+0x40>
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006130:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006132:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8006134:	b430      	push	{r4, r5}
 8006136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800613a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800613e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006142:	695d      	ldr	r5, [r3, #20]
 8006144:	699c      	ldr	r4, [r3, #24]
 8006146:	604c      	str	r4, [r1, #4]
 8006148:	1e53      	subs	r3, r2, #1
 800614a:	600d      	str	r5, [r1, #0]
 800614c:	edc1 7a03 	vstr	s15, [r1, #12]
 8006150:	bc30      	pop	{r4, r5}
 8006152:	814b      	strh	r3, [r1, #10]
 8006154:	8108      	strh	r0, [r1, #8]
 8006156:	4770      	bx	lr
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	4d8ef3c2 	.word	0x4d8ef3c2

08006160 <acc_service_envelope_get_next_by_reference>:
 8006160:	b909      	cbnz	r1, 8006166 <acc_service_envelope_get_next_by_reference+0x6>
 8006162:	4608      	mov	r0, r1
 8006164:	4770      	bx	lr
 8006166:	b530      	push	{r4, r5, lr}
 8006168:	b089      	sub	sp, #36	; 0x24
 800616a:	2404      	movs	r4, #4
 800616c:	2300      	movs	r3, #0
 800616e:	680d      	ldr	r5, [r1, #0]
 8006170:	9103      	str	r1, [sp, #12]
 8006172:	eb0d 0104 	add.w	r1, sp, r4
 8006176:	9502      	str	r5, [sp, #8]
 8006178:	9205      	str	r2, [sp, #20]
 800617a:	f88d 3004 	strb.w	r3, [sp, #4]
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006184:	f88d 301e 	strb.w	r3, [sp, #30]
 8006188:	9406      	str	r4, [sp, #24]
 800618a:	f7ff fcbb 	bl	8005b04 <acc_service_get_next>
 800618e:	b009      	add	sp, #36	; 0x24
 8006190:	bd30      	pop	{r4, r5, pc}
 8006192:	bf00      	nop

08006194 <destroy_handle>:
 8006194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006198:	4e15      	ldr	r6, [pc, #84]	; (80061f0 <destroy_handle+0x5c>)
 800619a:	4605      	mov	r5, r0
 800619c:	6874      	ldr	r4, [r6, #4]
 800619e:	f000 fecb 	bl	8006f38 <acc_rss_integration_log_level>
 80061a2:	2803      	cmp	r0, #3
 80061a4:	d906      	bls.n	80061b4 <destroy_handle+0x20>
 80061a6:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <destroy_handle+0x60>)
 80061a8:	686b      	ldr	r3, [r5, #4]
 80061aa:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80061ac:	4912      	ldr	r1, [pc, #72]	; (80061f8 <destroy_handle+0x64>)
 80061ae:	4a13      	ldr	r2, [pc, #76]	; (80061fc <destroy_handle+0x68>)
 80061b0:	2004      	movs	r0, #4
 80061b2:	47b8      	blx	r7
 80061b4:	b144      	cbz	r4, 80061c8 <destroy_handle+0x34>
 80061b6:	42ac      	cmp	r4, r5
 80061b8:	d102      	bne.n	80061c0 <destroy_handle+0x2c>
 80061ba:	e016      	b.n	80061ea <destroy_handle+0x56>
 80061bc:	42a5      	cmp	r5, r4
 80061be:	d00d      	beq.n	80061dc <destroy_handle+0x48>
 80061c0:	4623      	mov	r3, r4
 80061c2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80061c4:	2c00      	cmp	r4, #0
 80061c6:	d1f9      	bne.n	80061bc <destroy_handle+0x28>
 80061c8:	4a0a      	ldr	r2, [pc, #40]	; (80061f4 <destroy_handle+0x60>)
 80061ca:	686b      	ldr	r3, [r5, #4]
 80061cc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80061ce:	490a      	ldr	r1, [pc, #40]	; (80061f8 <destroy_handle+0x64>)
 80061d0:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <destroy_handle+0x6c>)
 80061d2:	46a4      	mov	ip, r4
 80061d4:	2000      	movs	r0, #0
 80061d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061da:	4760      	bx	ip
 80061dc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
 80061e0:	4628      	mov	r0, r5
 80061e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e6:	f000 be8f 	b.w	8006f08 <acc_rss_integration_mem_free>
 80061ea:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80061ec:	6073      	str	r3, [r6, #4]
 80061ee:	e7f7      	b.n	80061e0 <destroy_handle+0x4c>
 80061f0:	2000022c 	.word	0x2000022c
 80061f4:	20000640 	.word	0x20000640
 80061f8:	08015a6c 	.word	0x08015a6c
 80061fc:	08015a48 	.word	0x08015a48
 8006200:	08015a7c 	.word	0x08015a7c

08006204 <acc_service_manager_activate>:
 8006204:	b510      	push	{r4, lr}
 8006206:	4c05      	ldr	r4, [pc, #20]	; (800621c <acc_service_manager_activate+0x18>)
 8006208:	7820      	ldrb	r0, [r4, #0]
 800620a:	b100      	cbz	r0, 800620e <acc_service_manager_activate+0xa>
 800620c:	bd10      	pop	{r4, pc}
 800620e:	2001      	movs	r0, #1
 8006210:	7020      	strb	r0, [r4, #0]
 8006212:	f7ff fd11 	bl	8005c38 <acc_service_set_module_active>
 8006216:	7820      	ldrb	r0, [r4, #0]
 8006218:	bd10      	pop	{r4, pc}
 800621a:	bf00      	nop
 800621c:	2000022c 	.word	0x2000022c

08006220 <acc_service_create>:
 8006220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	4e30      	ldr	r6, [pc, #192]	; (80062e8 <acc_service_create+0xc8>)
 8006226:	7834      	ldrb	r4, [r6, #0]
 8006228:	2c00      	cmp	r4, #0
 800622a:	d041      	beq.n	80062b0 <acc_service_create+0x90>
 800622c:	4605      	mov	r5, r0
 800622e:	f7ff fd21 	bl	8005c74 <acc_service_configuration_valid>
 8006232:	b1a0      	cbz	r0, 800625e <acc_service_create+0x3e>
 8006234:	692b      	ldr	r3, [r5, #16]
 8006236:	68df      	ldr	r7, [r3, #12]
 8006238:	1e7b      	subs	r3, r7, #1
 800623a:	2b29      	cmp	r3, #41	; 0x29
 800623c:	d84a      	bhi.n	80062d4 <acc_service_create+0xb4>
 800623e:	7873      	ldrb	r3, [r6, #1]
 8006240:	b98b      	cbnz	r3, 8006266 <acc_service_create+0x46>
 8006242:	6873      	ldr	r3, [r6, #4]
 8006244:	b913      	cbnz	r3, 800624c <acc_service_create+0x2c>
 8006246:	e00e      	b.n	8006266 <acc_service_create+0x46>
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	b163      	cbz	r3, 8006266 <acc_service_create+0x46>
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	4297      	cmp	r7, r2
 8006250:	d1fa      	bne.n	8006248 <acc_service_create+0x28>
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <acc_service_create+0xcc>)
 8006254:	4a26      	ldr	r2, [pc, #152]	; (80062f0 <acc_service_create+0xd0>)
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	4926      	ldr	r1, [pc, #152]	; (80062f4 <acc_service_create+0xd4>)
 800625a:	2000      	movs	r0, #0
 800625c:	4798      	blx	r3
 800625e:	2400      	movs	r4, #0
 8006260:	4620      	mov	r0, r4
 8006262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006266:	8b2c      	ldrh	r4, [r5, #24]
 8006268:	f000 fe66 	bl	8006f38 <acc_rss_integration_log_level>
 800626c:	2803      	cmp	r0, #3
 800626e:	d907      	bls.n	8006280 <acc_service_create+0x60>
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <acc_service_create+0xcc>)
 8006272:	4a21      	ldr	r2, [pc, #132]	; (80062f8 <acc_service_create+0xd8>)
 8006274:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8006278:	491e      	ldr	r1, [pc, #120]	; (80062f4 <acc_service_create+0xd4>)
 800627a:	463b      	mov	r3, r7
 800627c:	2004      	movs	r0, #4
 800627e:	47c0      	blx	r8
 8006280:	4621      	mov	r1, r4
 8006282:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <acc_service_create+0xd4>)
 8006284:	23bd      	movs	r3, #189	; 0xbd
 8006286:	2001      	movs	r0, #1
 8006288:	f000 fe1e 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 800628c:	4604      	mov	r4, r0
 800628e:	2800      	cmp	r0, #0
 8006290:	d0e5      	beq.n	800625e <acc_service_create+0x3e>
 8006292:	6873      	ldr	r3, [r6, #4]
 8006294:	4a19      	ldr	r2, [pc, #100]	; (80062fc <acc_service_create+0xdc>)
 8006296:	6047      	str	r7, [r0, #4]
 8006298:	6002      	str	r2, [r0, #0]
 800629a:	6543      	str	r3, [r0, #84]	; 0x54
 800629c:	6070      	str	r0, [r6, #4]
 800629e:	696b      	ldr	r3, [r5, #20]
 80062a0:	4629      	mov	r1, r5
 80062a2:	4798      	blx	r3
 80062a4:	b168      	cbz	r0, 80062c2 <acc_service_create+0xa2>
 80062a6:	2301      	movs	r3, #1
 80062a8:	7263      	strb	r3, [r4, #9]
 80062aa:	4620      	mov	r0, r4
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <acc_service_create+0xcc>)
 80062b2:	4a13      	ldr	r2, [pc, #76]	; (8006300 <acc_service_create+0xe0>)
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	490f      	ldr	r1, [pc, #60]	; (80062f4 <acc_service_create+0xd4>)
 80062b8:	4620      	mov	r0, r4
 80062ba:	4798      	blx	r3
 80062bc:	4620      	mov	r0, r4
 80062be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	b10b      	cbz	r3, 80062ca <acc_service_create+0xaa>
 80062c6:	4620      	mov	r0, r4
 80062c8:	4798      	blx	r3
 80062ca:	4620      	mov	r0, r4
 80062cc:	f7ff ff62 	bl	8006194 <destroy_handle>
 80062d0:	2400      	movs	r4, #0
 80062d2:	e7c5      	b.n	8006260 <acc_service_create+0x40>
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <acc_service_create+0xcc>)
 80062d6:	4a0b      	ldr	r2, [pc, #44]	; (8006304 <acc_service_create+0xe4>)
 80062d8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80062da:	4906      	ldr	r1, [pc, #24]	; (80062f4 <acc_service_create+0xd4>)
 80062dc:	232a      	movs	r3, #42	; 0x2a
 80062de:	2000      	movs	r0, #0
 80062e0:	47a0      	blx	r4
 80062e2:	2400      	movs	r4, #0
 80062e4:	e7bc      	b.n	8006260 <acc_service_create+0x40>
 80062e6:	bf00      	nop
 80062e8:	2000022c 	.word	0x2000022c
 80062ec:	20000640 	.word	0x20000640
 80062f0:	08015b10 	.word	0x08015b10
 80062f4:	08015a6c 	.word	0x08015a6c
 80062f8:	08015adc 	.word	0x08015adc
 80062fc:	acc09ee8 	.word	0xacc09ee8
 8006300:	08015afc 	.word	0x08015afc
 8006304:	08015ab0 	.word	0x08015ab0

08006308 <acc_service_destroy>:
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <acc_service_destroy+0x48>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	b510      	push	{r4, lr}
 800630e:	b133      	cbz	r3, 800631e <acc_service_destroy+0x16>
 8006310:	4604      	mov	r4, r0
 8006312:	b118      	cbz	r0, 800631c <acc_service_destroy+0x14>
 8006314:	6800      	ldr	r0, [r0, #0]
 8006316:	f7ff fc95 	bl	8005c44 <acc_service_handle_valid>
 800631a:	b960      	cbnz	r0, 8006336 <acc_service_destroy+0x2e>
 800631c:	bd10      	pop	{r4, pc}
 800631e:	f000 fe0b 	bl	8006f38 <acc_rss_integration_log_level>
 8006322:	2800      	cmp	r0, #0
 8006324:	d0fa      	beq.n	800631c <acc_service_destroy+0x14>
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <acc_service_destroy+0x4c>)
 8006328:	4a0b      	ldr	r2, [pc, #44]	; (8006358 <acc_service_destroy+0x50>)
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	490b      	ldr	r1, [pc, #44]	; (800635c <acc_service_destroy+0x54>)
 800632e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006332:	2001      	movs	r0, #1
 8006334:	4718      	bx	r3
 8006336:	6820      	ldr	r0, [r4, #0]
 8006338:	f7ff fb88 	bl	8005a4c <acc_service_deactivate>
 800633c:	6820      	ldr	r0, [r4, #0]
 800633e:	68c3      	ldr	r3, [r0, #12]
 8006340:	b10b      	cbz	r3, 8006346 <acc_service_destroy+0x3e>
 8006342:	4798      	blx	r3
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	f7ff ff25 	bl	8006194 <destroy_handle>
 800634a:	2300      	movs	r3, #0
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd10      	pop	{r4, pc}
 8006350:	2000022c 	.word	0x2000022c
 8006354:	20000640 	.word	0x20000640
 8006358:	08015afc 	.word	0x08015afc
 800635c:	08015a6c 	.word	0x08015a6c

08006360 <acc_service_manager_deactivate>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4c0e      	ldr	r4, [pc, #56]	; (800639c <acc_service_manager_deactivate+0x3c>)
 8006364:	7823      	ldrb	r3, [r4, #0]
 8006366:	b1bb      	cbz	r3, 8006398 <acc_service_manager_deactivate+0x38>
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	b17b      	cbz	r3, 800638c <acc_service_manager_deactivate+0x2c>
 800636c:	1d25      	adds	r5, r4, #4
 800636e:	4628      	mov	r0, r5
 8006370:	f7ff ffca 	bl	8006308 <acc_service_destroy>
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f9      	bne.n	800636e <acc_service_manager_deactivate+0xe>
 800637a:	f000 fddd 	bl	8006f38 <acc_rss_integration_log_level>
 800637e:	b128      	cbz	r0, 800638c <acc_service_manager_deactivate+0x2c>
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <acc_service_manager_deactivate+0x40>)
 8006382:	4a08      	ldr	r2, [pc, #32]	; (80063a4 <acc_service_manager_deactivate+0x44>)
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	4908      	ldr	r1, [pc, #32]	; (80063a8 <acc_service_manager_deactivate+0x48>)
 8006388:	2001      	movs	r0, #1
 800638a:	4798      	blx	r3
 800638c:	2000      	movs	r0, #0
 800638e:	7020      	strb	r0, [r4, #0]
 8006390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006394:	f7ff bc50 	b.w	8005c38 <acc_service_set_module_active>
 8006398:	bd38      	pop	{r3, r4, r5, pc}
 800639a:	bf00      	nop
 800639c:	2000022c 	.word	0x2000022c
 80063a0:	20000640 	.word	0x20000640
 80063a4:	08015b38 	.word	0x08015b38
 80063a8:	08015a6c 	.word	0x08015a6c

080063ac <acc_service_manager_is_service_created>:
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <acc_service_manager_is_service_created+0x1c>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	b913      	cbnz	r3, 80063b8 <acc_service_manager_is_service_created+0xc>
 80063b2:	e006      	b.n	80063c2 <acc_service_manager_is_service_created+0x16>
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	b123      	cbz	r3, 80063c2 <acc_service_manager_is_service_created+0x16>
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	4290      	cmp	r0, r2
 80063bc:	d1fa      	bne.n	80063b4 <acc_service_manager_is_service_created+0x8>
 80063be:	2001      	movs	r0, #1
 80063c0:	4770      	bx	lr
 80063c2:	4618      	mov	r0, r3
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	2000022c 	.word	0x2000022c

080063cc <acc_version_get>:
 80063cc:	4800      	ldr	r0, [pc, #0]	; (80063d0 <acc_version_get+0x4>)
 80063ce:	4770      	bx	lr
 80063d0:	08012258 	.word	0x08012258

080063d4 <quarter_pi_cos_sin_f32>:
 80063d4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8006458 <quarter_pi_cos_sin_f32+0x84>
 80063d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80063dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e0:	d436      	bmi.n	8006450 <quarter_pi_cos_sin_f32+0x7c>
 80063e2:	b1e0      	cbz	r0, 800641e <quarter_pi_cos_sin_f32+0x4a>
 80063e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80063e8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800645c <quarter_pi_cos_sin_f32+0x88>
 80063ec:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006460 <quarter_pi_cos_sin_f32+0x8c>
 80063f0:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8006464 <quarter_pi_cos_sin_f32+0x90>
 80063f4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80063f8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80063fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006400:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006404:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006408:	ee37 7a06 	vadd.f32	s14, s14, s12
 800640c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006410:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006414:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006418:	ee30 0a27 	vadd.f32	s0, s0, s15
 800641c:	4770      	bx	lr
 800641e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006422:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006468 <quarter_pi_cos_sin_f32+0x94>
 8006426:	eddf 5a11 	vldr	s11, [pc, #68]	; 800646c <quarter_pi_cos_sin_f32+0x98>
 800642a:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8006470 <quarter_pi_cos_sin_f32+0x9c>
 800642e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006436:	ee37 7a25 	vadd.f32	s14, s14, s11
 800643a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800643e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800644e:	4770      	bx	lr
 8006450:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006474 <quarter_pi_cos_sin_f32+0xa0>
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	bf490fdb 	.word	0xbf490fdb
 800645c:	37cd1800 	.word	0x37cd1800
 8006460:	3ab606a0 	.word	0x3ab606a0
 8006464:	3d2aaaa6 	.word	0x3d2aaaa6
 8006468:	b94c909b 	.word	0xb94c909b
 800646c:	3c088366 	.word	0x3c088366
 8006470:	3e2aaaa2 	.word	0x3e2aaaa2
 8006474:	7fc00000 	.word	0x7fc00000

08006478 <restricted_cos_sin_f32>:
 8006478:	eddf 7a09 	vldr	s15, [pc, #36]	; 80064a0 <restricted_cos_sin_f32+0x28>
 800647c:	eddf 6a09 	vldr	s13, [pc, #36]	; 80064a4 <restricted_cos_sin_f32+0x2c>
 8006480:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006484:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006488:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800648c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006490:	bf5c      	itt	pl
 8006492:	f080 0001 	eorpl.w	r0, r0, #1
 8006496:	eeb0 0a67 	vmovpl.f32	s0, s15
 800649a:	f7ff bf9b 	b.w	80063d4 <quarter_pi_cos_sin_f32>
 800649e:	bf00      	nop
 80064a0:	3fc90fdb 	.word	0x3fc90fdb
 80064a4:	333bbd2e 	.word	0x333bbd2e

080064a8 <acc_alg_basic_math_q3_12_complex_mul>:
 80064a8:	b302      	cbz	r2, 80064ec <acc_alg_basic_math_q3_12_complex_mul+0x44>
 80064aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ac:	2300      	movs	r3, #0
 80064ae:	1c87      	adds	r7, r0, #2
 80064b0:	f101 0c02 	add.w	ip, r1, #2
 80064b4:	f930 e023 	ldrsh.w	lr, [r0, r3, lsl #2]
 80064b8:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 80064bc:	f937 5023 	ldrsh.w	r5, [r7, r3, lsl #2]
 80064c0:	f93c 6023 	ldrsh.w	r6, [ip, r3, lsl #2]
 80064c4:	fb14 f40e 	smulbb	r4, r4, lr
 80064c8:	fb05 4416 	mls	r4, r5, r6, r4
 80064cc:	1324      	asrs	r4, r4, #12
 80064ce:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
 80064d2:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 80064d6:	fb06 f60e 	mul.w	r6, r6, lr
 80064da:	fb15 6504 	smlabb	r5, r5, r4, r6
 80064de:	132d      	asrs	r5, r5, #12
 80064e0:	f827 5023 	strh.w	r5, [r7, r3, lsl #2]
 80064e4:	3301      	adds	r3, #1
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d1e4      	bne.n	80064b4 <acc_alg_basic_math_q3_12_complex_mul+0xc>
 80064ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop

080064f0 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 80064f0:	b203      	sxth	r3, r0
 80064f2:	1400      	asrs	r0, r0, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 80064fa:	bfb8      	it	lt
 80064fc:	425b      	neglt	r3, r3
 80064fe:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 8006502:	b218      	sxth	r0, r3
 8006504:	b213      	sxth	r3, r2
 8006506:	4298      	cmp	r0, r3
 8006508:	b082      	sub	sp, #8
 800650a:	da02      	bge.n	8006512 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 800650c:	4602      	mov	r2, r0
 800650e:	4618      	mov	r0, r3
 8006510:	4613      	mov	r3, r2
 8006512:	f240 62a1 	movw	r2, #1697	; 0x6a1
 8006516:	fb10 f202 	smulbb	r2, r0, r2
 800651a:	2a00      	cmp	r2, #0
 800651c:	bfb8      	it	lt
 800651e:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 8006522:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 8006526:	da0b      	bge.n	8006540 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 8006528:	f240 3227 	movw	r2, #807	; 0x327
 800652c:	fb13 f302 	smulbb	r3, r3, r2
 8006530:	f640 72d7 	movw	r2, #4055	; 0xfd7
 8006534:	fb10 3002 	smlabb	r0, r0, r2, r3
 8006538:	f340 300f 	sbfx	r0, r0, #12, #16
 800653c:	b002      	add	sp, #8
 800653e:	4770      	bx	lr
 8006540:	f640 02fa 	movw	r2, #2298	; 0x8fa
 8006544:	fb13 f302 	smulbb	r3, r3, r2
 8006548:	f640 5271 	movw	r2, #3441	; 0xd71
 800654c:	fb10 3002 	smlabb	r0, r0, r2, r3
 8006550:	f340 300f 	sbfx	r0, r0, #12, #16
 8006554:	b002      	add	sp, #8
 8006556:	4770      	bx	lr

08006558 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 8006558:	2900      	cmp	r1, #0
 800655a:	d04f      	beq.n	80065fc <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa4>
 800655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	f240 6ca1 	movw	ip, #1697	; 0x6a1
 8006564:	2400      	movs	r4, #0
 8006566:	1c87      	adds	r7, r0, #2
 8006568:	f640 0afa 	movw	sl, #2298	; 0x8fa
 800656c:	f640 5971 	movw	r9, #3441	; 0xd71
 8006570:	f240 3827 	movw	r8, #807	; 0x327
 8006574:	f640 7ed7 	movw	lr, #4055	; 0xfd7
 8006578:	e006      	b.n	8006588 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800657a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800657e:	f827 3024 	strh.w	r3, [r7, r4, lsl #2]
 8006582:	3401      	adds	r4, #1
 8006584:	42a1      	cmp	r1, r4
 8006586:	d037      	beq.n	80065f8 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa0>
 8006588:	f930 6024 	ldrsh.w	r6, [r0, r4, lsl #2]
 800658c:	f937 5024 	ldrsh.w	r5, [r7, r4, lsl #2]
 8006590:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 8006594:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8006598:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 800659c:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 80065a0:	b21b      	sxth	r3, r3
 80065a2:	b212      	sxth	r2, r2
 80065a4:	4293      	cmp	r3, r2
 80065a6:	da02      	bge.n	80065ae <acc_alg_basic_math_q3_12_complex_conj_normalize+0x56>
 80065a8:	469b      	mov	fp, r3
 80065aa:	4613      	mov	r3, r2
 80065ac:	465a      	mov	r2, fp
 80065ae:	fb13 fb0c 	smulbb	fp, r3, ip
 80065b2:	f1bb 0f00 	cmp.w	fp, #0
 80065b6:	bfb8      	it	lt
 80065b8:	f60b 7bff 	addwlt	fp, fp, #4095	; 0xfff
 80065bc:	ebb2 3f2b 	cmp.w	r2, fp, asr #12
 80065c0:	bfb5      	itete	lt
 80065c2:	fb12 f208 	smulbblt	r2, r2, r8
 80065c6:	fb12 f20a 	smulbbge	r2, r2, sl
 80065ca:	fb13 230e 	smlabblt	r3, r3, lr, r2
 80065ce:	fb13 2309 	smlabbge	r3, r3, r9, r2
 80065d2:	f343 330f 	sbfx	r3, r3, #12, #16
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0cf      	beq.n	800657a <acc_alg_basic_math_q3_12_complex_conj_normalize+0x22>
 80065da:	ebc5 5505 	rsb	r5, r5, r5, lsl #20
 80065de:	032d      	lsls	r5, r5, #12
 80065e0:	0336      	lsls	r6, r6, #12
 80065e2:	fb95 f5f3 	sdiv	r5, r5, r3
 80065e6:	fb96 f3f3 	sdiv	r3, r6, r3
 80065ea:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80065ee:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 80065f2:	3401      	adds	r4, #1
 80065f4:	42a1      	cmp	r1, r4
 80065f6:	d1c7      	bne.n	8006588 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 80065f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <acc_alg_basic_math_q3_12_sin>:
 8006600:	0043      	lsls	r3, r0, #1
 8006602:	bf4c      	ite	mi
 8006604:	43c3      	mvnmi	r3, r0
 8006606:	4603      	movpl	r3, r0
 8006608:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800660c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006610:	4a05      	ldr	r2, [pc, #20]	; (8006628 <acc_alg_basic_math_q3_12_sin+0x28>)
 8006612:	0d9b      	lsrs	r3, r3, #22
 8006614:	2800      	cmp	r0, #0
 8006616:	bfbd      	ittte	lt
 8006618:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800661c:	4240      	neglt	r0, r0
 800661e:	b200      	sxthlt	r0, r0
 8006620:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	08015b84 	.word	0x08015b84

0800662c <acc_alg_basic_math_q3_12_cos>:
 800662c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8006630:	0043      	lsls	r3, r0, #1
 8006632:	bf54      	ite	pl
 8006634:	43d3      	mvnpl	r3, r2
 8006636:	4613      	movmi	r3, r2
 8006638:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800663c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006640:	2a00      	cmp	r2, #0
 8006642:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8006646:	4a04      	ldr	r2, [pc, #16]	; (8006658 <acc_alg_basic_math_q3_12_cos+0x2c>)
 8006648:	bfbd      	ittte	lt
 800664a:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800664e:	4240      	neglt	r0, r0
 8006650:	b200      	sxthlt	r0, r0
 8006652:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 8006656:	4770      	bx	lr
 8006658:	08015b84 	.word	0x08015b84

0800665c <acc_alg_basic_math_restricted_tan_f32>:
 800665c:	b508      	push	{r3, lr}
 800665e:	2000      	movs	r0, #0
 8006660:	eef0 4a40 	vmov.f32	s9, s0
 8006664:	f7ff ff08 	bl	8006478 <restricted_cos_sin_f32>
 8006668:	2001      	movs	r0, #1
 800666a:	eeb0 5a40 	vmov.f32	s10, s0
 800666e:	eeb0 0a64 	vmov.f32	s0, s9
 8006672:	f7ff ff01 	bl	8006478 <restricted_cos_sin_f32>
 8006676:	ee85 0a00 	vdiv.f32	s0, s10, s0
 800667a:	bd08      	pop	{r3, pc}

0800667c <acc_alg_basic_math_restricted_atan_f32>:
 800667c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8006680:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006688:	d434      	bmi.n	80066f4 <acc_alg_basic_math_restricted_atan_f32+0x78>
 800668a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800668e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006696:	dd1b      	ble.n	80066d0 <acc_alg_basic_math_restricted_atan_f32+0x54>
 8006698:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800669c:	4b17      	ldr	r3, [pc, #92]	; (80066fc <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800669e:	f1a3 0220 	sub.w	r2, r3, #32
 80066a2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8006700 <acc_alg_basic_math_restricted_atan_f32+0x84>
 80066a6:	ee66 6a06 	vmul.f32	s13, s12, s12
 80066aa:	ed33 7a01 	vldmdb	r3!, {s14}
 80066ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066b2:	429a      	cmp	r2, r3
 80066b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066b8:	d1f7      	bne.n	80066aa <acc_alg_basic_math_restricted_atan_f32+0x2e>
 80066ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066be:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006704 <acc_alg_basic_math_restricted_atan_f32+0x88>
 80066c2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006708 <acc_alg_basic_math_restricted_atan_f32+0x8c>
 80066c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80066ca:	ee30 0a47 	vsub.f32	s0, s0, s14
 80066ce:	4770      	bx	lr
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <acc_alg_basic_math_restricted_atan_f32+0x80>)
 80066d2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006700 <acc_alg_basic_math_restricted_atan_f32+0x84>
 80066d6:	ee60 6a00 	vmul.f32	s13, s0, s0
 80066da:	f1a3 0220 	sub.w	r2, r3, #32
 80066de:	ed33 7a01 	vldmdb	r3!, {s14}
 80066e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066e6:	429a      	cmp	r2, r3
 80066e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ec:	d1f7      	bne.n	80066de <acc_alg_basic_math_restricted_atan_f32+0x62>
 80066ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80066f2:	4770      	bx	lr
 80066f4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800670c <acc_alg_basic_math_restricted_atan_f32+0x90>
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	08015da8 	.word	0x08015da8
 8006700:	3b3f517a 	.word	0x3b3f517a
 8006704:	3fc90fdb 	.word	0x3fc90fdb
 8006708:	333bbd2e 	.word	0x333bbd2e
 800670c:	7fc00000 	.word	0x7fc00000

08006710 <compare_index_closest_peak_first>:
 8006710:	8802      	ldrh	r2, [r0, #0]
 8006712:	880b      	ldrh	r3, [r1, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d804      	bhi.n	8006722 <compare_index_closest_peak_first+0x12>
 8006718:	bf14      	ite	ne
 800671a:	f04f 30ff 	movne.w	r0, #4294967295
 800671e:	2000      	moveq	r0, #0
 8006720:	4770      	bx	lr
 8006722:	2001      	movs	r0, #1
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop

08006728 <compare_index_strongest_peak_first>:
 8006728:	8842      	ldrh	r2, [r0, #2]
 800672a:	884b      	ldrh	r3, [r1, #2]
 800672c:	429a      	cmp	r2, r3
 800672e:	d304      	bcc.n	800673a <compare_index_strongest_peak_first+0x12>
 8006730:	bf14      	ite	ne
 8006732:	f04f 30ff 	movne.w	r0, #4294967295
 8006736:	2000      	moveq	r0, #0
 8006738:	4770      	bx	lr
 800673a:	2001      	movs	r0, #1
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <compare_index_strongest_reflector_first>:
 8006740:	b4f0      	push	{r4, r5, r6, r7}
 8006742:	8842      	ldrh	r2, [r0, #2]
 8006744:	8807      	ldrh	r7, [r0, #0]
 8006746:	880e      	ldrh	r6, [r1, #0]
 8006748:	884c      	ldrh	r4, [r1, #2]
 800674a:	fba2 2307 	umull	r2, r3, r2, r7
 800674e:	b2b8      	uxth	r0, r7
 8006750:	fba2 0100 	umull	r0, r1, r2, r0
 8006754:	fba4 4506 	umull	r4, r5, r4, r6
 8006758:	b2b2      	uxth	r2, r6
 800675a:	fb07 1103 	mla	r1, r7, r3, r1
 800675e:	fba4 2302 	umull	r2, r3, r4, r2
 8006762:	fb06 3305 	mla	r3, r6, r5, r3
 8006766:	4299      	cmp	r1, r3
 8006768:	bf08      	it	eq
 800676a:	4290      	cmpeq	r0, r2
 800676c:	d305      	bcc.n	800677a <compare_index_strongest_reflector_first+0x3a>
 800676e:	bf14      	ite	ne
 8006770:	f04f 30ff 	movne.w	r0, #4294967295
 8006774:	2000      	moveq	r0, #0
 8006776:	bcf0      	pop	{r4, r5, r6, r7}
 8006778:	4770      	bx	lr
 800677a:	2001      	movs	r0, #1
 800677c:	bcf0      	pop	{r4, r5, r6, r7}
 800677e:	4770      	bx	lr

08006780 <compare_index_strongest_flat_reflector_first>:
 8006780:	8802      	ldrh	r2, [r0, #0]
 8006782:	880b      	ldrh	r3, [r1, #0]
 8006784:	b410      	push	{r4}
 8006786:	8844      	ldrh	r4, [r0, #2]
 8006788:	8848      	ldrh	r0, [r1, #2]
 800678a:	fb02 f204 	mul.w	r2, r2, r4
 800678e:	fb03 f300 	mul.w	r3, r3, r0
 8006792:	429a      	cmp	r2, r3
 8006794:	d306      	bcc.n	80067a4 <compare_index_strongest_flat_reflector_first+0x24>
 8006796:	bf14      	ite	ne
 8006798:	f04f 30ff 	movne.w	r0, #4294967295
 800679c:	2000      	moveq	r0, #0
 800679e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	2001      	movs	r0, #1
 80067a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <acc_alg_peak_detect_peaks>:
 80067ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b0:	2a00      	cmp	r2, #0
 80067b2:	f000 8083 	beq.w	80068bc <acc_alg_peak_detect_peaks+0x110>
 80067b6:	4690      	mov	r8, r2
 80067b8:	321f      	adds	r2, #31
 80067ba:	460e      	mov	r6, r1
 80067bc:	0952      	lsrs	r2, r2, #5
 80067be:	4605      	mov	r5, r0
 80067c0:	0092      	lsls	r2, r2, #2
 80067c2:	2100      	movs	r1, #0
 80067c4:	4630      	mov	r0, r6
 80067c6:	f108 37ff 	add.w	r7, r8, #4294967295
 80067ca:	4699      	mov	r9, r3
 80067cc:	fa1f fa87 	uxth.w	sl, r7
 80067d0:	f00a f9ea 	bl	8010ba8 <memset>
 80067d4:	2400      	movs	r4, #0
 80067d6:	e000      	b.n	80067da <acc_alg_peak_detect_peaks+0x2e>
 80067d8:	461c      	mov	r4, r3
 80067da:	fa1f fb84 	uxth.w	fp, r4
 80067de:	465b      	mov	r3, fp
 80067e0:	4642      	mov	r2, r8
 80067e2:	4629      	mov	r1, r5
 80067e4:	4648      	mov	r0, r9
 80067e6:	f000 f9f7 	bl	8006bd8 <acc_alg_threshold_get>
 80067ea:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 80067ee:	4283      	cmp	r3, r0
 80067f0:	d90b      	bls.n	800680a <acc_alg_peak_detect_peaks+0x5e>
 80067f2:	0963      	lsrs	r3, r4, #5
 80067f4:	f00b 0b1f 	and.w	fp, fp, #31
 80067f8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80067fc:	2101      	movs	r1, #1
 80067fe:	fa01 fb0b 	lsl.w	fp, r1, fp
 8006802:	ea42 020b 	orr.w	r2, r2, fp
 8006806:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 800680a:	45a2      	cmp	sl, r4
 800680c:	f104 0301 	add.w	r3, r4, #1
 8006810:	d1e2      	bne.n	80067d8 <acc_alg_peak_detect_peaks+0x2c>
 8006812:	2f00      	cmp	r7, #0
 8006814:	d04f      	beq.n	80068b6 <acc_alg_peak_detect_peaks+0x10a>
 8006816:	2100      	movs	r1, #0
 8006818:	4688      	mov	r8, r1
 800681a:	4608      	mov	r0, r1
 800681c:	468e      	mov	lr, r1
 800681e:	460b      	mov	r3, r1
 8006820:	f04f 0c01 	mov.w	ip, #1
 8006824:	e01a      	b.n	800685c <acc_alg_peak_detect_peaks+0xb0>
 8006826:	3301      	adds	r3, #1
 8006828:	095a      	lsrs	r2, r3, #5
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8006832:	fa0c f303 	lsl.w	r3, ip, r3
 8006836:	401a      	ands	r2, r3
 8006838:	d01c      	beq.n	8006874 <acc_alg_peak_detect_peaks+0xc8>
 800683a:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 800683e:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 8006842:	885b      	ldrh	r3, [r3, #2]
 8006844:	429a      	cmp	r2, r3
 8006846:	f104 0301 	add.w	r3, r4, #1
 800684a:	b29b      	uxth	r3, r3
 800684c:	d21b      	bcs.n	8006886 <acc_alg_peak_detect_peaks+0xda>
 800684e:	46a0      	mov	r8, r4
 8006850:	f04f 0e01 	mov.w	lr, #1
 8006854:	429f      	cmp	r7, r3
 8006856:	f101 0101 	add.w	r1, r1, #1
 800685a:	dd12      	ble.n	8006882 <acc_alg_peak_detect_peaks+0xd6>
 800685c:	f3c1 144a 	ubfx	r4, r1, #5, #11
 8006860:	f001 021f 	and.w	r2, r1, #31
 8006864:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 8006868:	fa0c f202 	lsl.w	r2, ip, r2
 800686c:	ea12 020a 	ands.w	r2, r2, sl
 8006870:	b28c      	uxth	r4, r1
 8006872:	d1d8      	bne.n	8006826 <acc_alg_peak_detect_peaks+0x7a>
 8006874:	1c63      	adds	r3, r4, #1
 8006876:	b29b      	uxth	r3, r3
 8006878:	429f      	cmp	r7, r3
 800687a:	4696      	mov	lr, r2
 800687c:	f101 0101 	add.w	r1, r1, #1
 8006880:	dcec      	bgt.n	800685c <acc_alg_peak_detect_peaks+0xb0>
 8006882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006886:	d9e5      	bls.n	8006854 <acc_alg_peak_detect_peaks+0xa8>
 8006888:	f1be 0f00 	cmp.w	lr, #0
 800688c:	d0e2      	beq.n	8006854 <acc_alg_peak_detect_peaks+0xa8>
 800688e:	eba3 0208 	sub.w	r2, r3, r8
 8006892:	3201      	adds	r2, #1
 8006894:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8006898:	eb08 0262 	add.w	r2, r8, r2, asr #1
 800689c:	b292      	uxth	r2, r2
 800689e:	f825 2020 	strh.w	r2, [r5, r0, lsl #2]
 80068a2:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 80068a6:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80068aa:	8062      	strh	r2, [r4, #2]
 80068ac:	3001      	adds	r0, #1
 80068ae:	b280      	uxth	r0, r0
 80068b0:	f04f 0e00 	mov.w	lr, #0
 80068b4:	e7ce      	b.n	8006854 <acc_alg_peak_detect_peaks+0xa8>
 80068b6:	4638      	mov	r0, r7
 80068b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <acc_alg_peak_detect_peaks+0x118>)
 80068be:	214f      	movs	r1, #79	; 0x4f
 80068c0:	f000 fa1c 	bl	8006cfc <acc_assert_fail>
 80068c4:	08015dac 	.word	0x08015dac

080068c8 <acc_alg_peak_merge_peaks>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	2a01      	cmp	r2, #1
 80068ce:	b087      	sub	sp, #28
 80068d0:	f240 80b9 	bls.w	8006a46 <acc_alg_peak_merge_peaks+0x17e>
 80068d4:	ebc2 33c2 	rsb	r3, r2, r2, lsl #15
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	b29b      	uxth	r3, r3
 80068dc:	4682      	mov	sl, r0
 80068de:	9305      	str	r3, [sp, #20]
 80068e0:	1c83      	adds	r3, r0, #2
 80068e2:	4608      	mov	r0, r1
 80068e4:	4691      	mov	r9, r2
 80068e6:	9302      	str	r3, [sp, #8]
 80068e8:	2800      	cmp	r0, #0
 80068ea:	f000 80a0 	beq.w	8006a2e <acc_alg_peak_merge_peaks+0x166>
 80068ee:	f04f 0c00 	mov.w	ip, #0
 80068f2:	9f05      	ldr	r7, [sp, #20]
 80068f4:	4665      	mov	r5, ip
 80068f6:	46e6      	mov	lr, ip
 80068f8:	4666      	mov	r6, ip
 80068fa:	46c8      	mov	r8, r9
 80068fc:	454e      	cmp	r6, r9
 80068fe:	f0c0 809b 	bcc.w	8006a38 <acc_alg_peak_merge_peaks+0x170>
 8006902:	4580      	cmp	r8, r0
 8006904:	4644      	mov	r4, r8
 8006906:	eb07 0308 	add.w	r3, r7, r8
 800690a:	bfa8      	it	ge
 800690c:	4604      	movge	r4, r0
 800690e:	b29b      	uxth	r3, r3
 8006910:	b2a4      	uxth	r4, r4
 8006912:	42a3      	cmp	r3, r4
 8006914:	d218      	bcs.n	8006948 <acc_alg_peak_merge_peaks+0x80>
 8006916:	2100      	movs	r1, #0
 8006918:	429e      	cmp	r6, r3
 800691a:	f103 0201 	add.w	r2, r3, #1
 800691e:	d00c      	beq.n	800693a <acc_alg_peak_merge_peaks+0x72>
 8006920:	f83a b02c 	ldrh.w	fp, [sl, ip, lsl #2]
 8006924:	f83a 3023 	ldrh.w	r3, [sl, r3, lsl #2]
 8006928:	ebab 0303 	sub.w	r3, fp, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	bfb8      	it	lt
 8006930:	425b      	neglt	r3, r3
 8006932:	454b      	cmp	r3, r9
 8006934:	bfbc      	itt	lt
 8006936:	3101      	addlt	r1, #1
 8006938:	b289      	uxthlt	r1, r1
 800693a:	b293      	uxth	r3, r2
 800693c:	42a3      	cmp	r3, r4
 800693e:	d3eb      	bcc.n	8006918 <acc_alg_peak_merge_peaks+0x50>
 8006940:	4571      	cmp	r1, lr
 8006942:	bf84      	itt	hi
 8006944:	4635      	movhi	r5, r6
 8006946:	468e      	movhi	lr, r1
 8006948:	f10c 0c01 	add.w	ip, ip, #1
 800694c:	fa1f f68c 	uxth.w	r6, ip
 8006950:	42b0      	cmp	r0, r6
 8006952:	f108 0801 	add.w	r8, r8, #1
 8006956:	d8d1      	bhi.n	80068fc <acc_alg_peak_merge_peaks+0x34>
 8006958:	f1be 0f00 	cmp.w	lr, #0
 800695c:	d067      	beq.n	8006a2e <acc_alg_peak_merge_peaks+0x166>
 800695e:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 8006962:	f10e 0101 	add.w	r1, lr, #1
 8006966:	2200      	movs	r2, #0
 8006968:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	b28b      	uxth	r3, r1
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	f83a 8025 	ldrh.w	r8, [sl, r5, lsl #2]
 8006976:	9203      	str	r2, [sp, #12]
 8006978:	f3c1 014e 	ubfx	r1, r1, #1, #15
 800697c:	4617      	mov	r7, r2
 800697e:	4613      	mov	r3, r2
 8006980:	4614      	mov	r4, r2
 8006982:	e00b      	b.n	800699c <acc_alg_peak_merge_peaks+0xd4>
 8006984:	9e03      	ldr	r6, [sp, #12]
 8006986:	b9ae      	cbnz	r6, 80069b4 <acc_alg_peak_merge_peaks+0xec>
 8006988:	9e02      	ldr	r6, [sp, #8]
 800698a:	f836 6022 	ldrh.w	r6, [r6, r2, lsl #2]
 800698e:	44a0      	add	r8, r4
 8006990:	44b3      	add	fp, r6
 8006992:	2701      	movs	r7, #1
 8006994:	3201      	adds	r2, #1
 8006996:	b294      	uxth	r4, r2
 8006998:	42a0      	cmp	r0, r4
 800699a:	d933      	bls.n	8006a04 <acc_alg_peak_merge_peaks+0x13c>
 800699c:	42a5      	cmp	r5, r4
 800699e:	d0f9      	beq.n	8006994 <acc_alg_peak_merge_peaks+0xcc>
 80069a0:	9e00      	ldr	r6, [sp, #0]
 80069a2:	f83a 4022 	ldrh.w	r4, [sl, r2, lsl #2]
 80069a6:	8836      	ldrh	r6, [r6, #0]
 80069a8:	1ba6      	subs	r6, r4, r6
 80069aa:	2e00      	cmp	r6, #0
 80069ac:	bfb8      	it	lt
 80069ae:	4276      	neglt	r6, r6
 80069b0:	454e      	cmp	r6, r9
 80069b2:	dbe7      	blt.n	8006984 <acc_alg_peak_merge_peaks+0xbc>
 80069b4:	1c5e      	adds	r6, r3, #1
 80069b6:	b2b6      	uxth	r6, r6
 80069b8:	9601      	str	r6, [sp, #4]
 80069ba:	eb01 0e08 	add.w	lr, r1, r8
 80069be:	eb01 0c0b 	add.w	ip, r1, fp
 80069c2:	b177      	cbz	r7, 80069e2 <acc_alg_peak_merge_peaks+0x11a>
 80069c4:	9c04      	ldr	r4, [sp, #16]
 80069c6:	fbbe fef4 	udiv	lr, lr, r4
 80069ca:	fbbc fcf4 	udiv	ip, ip, r4
 80069ce:	9c01      	ldr	r4, [sp, #4]
 80069d0:	f82a e013 	strh.w	lr, [sl, r3, lsl #1]
 80069d4:	f82a c014 	strh.w	ip, [sl, r4, lsl #1]
 80069d8:	3302      	adds	r3, #2
 80069da:	f83a 4022 	ldrh.w	r4, [sl, r2, lsl #2]
 80069de:	9703      	str	r7, [sp, #12]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80069e6:	9e02      	ldr	r6, [sp, #8]
 80069e8:	1c5c      	adds	r4, r3, #1
 80069ea:	b2a4      	uxth	r4, r4
 80069ec:	f836 6022 	ldrh.w	r6, [r6, r2, lsl #2]
 80069f0:	f82a 6014 	strh.w	r6, [sl, r4, lsl #1]
 80069f4:	3201      	adds	r2, #1
 80069f6:	b294      	uxth	r4, r2
 80069f8:	3302      	adds	r3, #2
 80069fa:	42a0      	cmp	r0, r4
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f04f 0700 	mov.w	r7, #0
 8006a02:	d8cb      	bhi.n	800699c <acc_alg_peak_merge_peaks+0xd4>
 8006a04:	b17f      	cbz	r7, 8006a26 <acc_alg_peak_merge_peaks+0x15e>
 8006a06:	1c58      	adds	r0, r3, #1
 8006a08:	b280      	uxth	r0, r0
 8006a0a:	9c04      	ldr	r4, [sp, #16]
 8006a0c:	eb01 020b 	add.w	r2, r1, fp
 8006a10:	4488      	add	r8, r1
 8006a12:	fbb2 f2f4 	udiv	r2, r2, r4
 8006a16:	fbb8 f1f4 	udiv	r1, r8, r4
 8006a1a:	f82a 1013 	strh.w	r1, [sl, r3, lsl #1]
 8006a1e:	3302      	adds	r3, #2
 8006a20:	f82a 2010 	strh.w	r2, [sl, r0, lsl #1]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	0858      	lsrs	r0, r3, #1
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f47f af60 	bne.w	80068ee <acc_alg_peak_merge_peaks+0x26>
 8006a2e:	4683      	mov	fp, r0
 8006a30:	4658      	mov	r0, fp
 8006a32:	b007      	add	sp, #28
 8006a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a38:	4540      	cmp	r0, r8
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	bfa8      	it	ge
 8006a3e:	4644      	movge	r4, r8
 8006a40:	b2a4      	uxth	r4, r4
 8006a42:	2300      	movs	r3, #0
 8006a44:	e767      	b.n	8006916 <acc_alg_peak_merge_peaks+0x4e>
 8006a46:	468b      	mov	fp, r1
 8006a48:	4658      	mov	r0, fp
 8006a4a:	b007      	add	sp, #28
 8006a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a50 <acc_alg_peak_sort_peaks>:
 8006a50:	2a03      	cmp	r2, #3
 8006a52:	d813      	bhi.n	8006a7c <acc_alg_peak_sort_peaks+0x2c>
 8006a54:	e8df f002 	tbb	[pc, r2]
 8006a58:	020e0a06 	.word	0x020e0a06
 8006a5c:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <acc_alg_peak_sort_peaks+0x30>)
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f003 bdfe 	b.w	800a660 <acc_alg_basic_utils_bubble_sort>
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <acc_alg_peak_sort_peaks+0x34>)
 8006a66:	2204      	movs	r2, #4
 8006a68:	f003 bdfa 	b.w	800a660 <acc_alg_basic_utils_bubble_sort>
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <acc_alg_peak_sort_peaks+0x38>)
 8006a6e:	2204      	movs	r2, #4
 8006a70:	f003 bdf6 	b.w	800a660 <acc_alg_basic_utils_bubble_sort>
 8006a74:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <acc_alg_peak_sort_peaks+0x3c>)
 8006a76:	2204      	movs	r2, #4
 8006a78:	f003 bdf2 	b.w	800a660 <acc_alg_basic_utils_bubble_sort>
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	08006781 	.word	0x08006781
 8006a84:	08006711 	.word	0x08006711
 8006a88:	08006729 	.word	0x08006729
 8006a8c:	08006741 	.word	0x08006741

08006a90 <acc_alg_peak_get_peaks>:
 8006a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a94:	461e      	mov	r6, r3
 8006a96:	9b06      	ldr	r3, [sp, #24]
 8006a98:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8006a9c:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	f7ff fe83 	bl	80067ac <acc_alg_peak_detect_peaks>
 8006aa6:	462a      	mov	r2, r5
 8006aa8:	4601      	mov	r1, r0
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f7ff ff0c 	bl	80068c8 <acc_alg_peak_merge_peaks>
 8006ab0:	f1a8 0302 	sub.w	r3, r8, #2
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	d907      	bls.n	8006aca <acc_alg_peak_get_peaks+0x3a>
 8006aba:	4620      	mov	r0, r4
 8006abc:	4642      	mov	r2, r8
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f7ff ffc6 	bl	8006a50 <acc_alg_peak_sort_peaks>
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d0f5      	beq.n	8006aba <acc_alg_peak_get_peaks+0x2a>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f834 5022 	ldrh.w	r5, [r4, r2, lsl #2]
 8006ad4:	4435      	add	r5, r6
 8006ad6:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
 8006ada:	3201      	adds	r2, #1
 8006adc:	b293      	uxth	r3, r2
 8006ade:	429f      	cmp	r7, r3
 8006ae0:	d8f6      	bhi.n	8006ad0 <acc_alg_peak_get_peaks+0x40>
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7ff ffb2 	bl	8006a50 <acc_alg_peak_sort_peaks>
 8006aec:	2200      	movs	r2, #0
 8006aee:	f834 5022 	ldrh.w	r5, [r4, r2, lsl #2]
 8006af2:	1bad      	subs	r5, r5, r6
 8006af4:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
 8006af8:	3201      	adds	r2, #1
 8006afa:	b293      	uxth	r3, r2
 8006afc:	429f      	cmp	r7, r3
 8006afe:	d8f6      	bhi.n	8006aee <acc_alg_peak_get_peaks+0x5e>
 8006b00:	4638      	mov	r0, r7
 8006b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b06:	bf00      	nop

08006b08 <acc_alg_threshold_fixed_allocate>:
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	4905      	ldr	r1, [pc, #20]	; (8006b20 <acc_alg_threshold_fixed_allocate+0x18>)
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	2216      	movs	r2, #22
 8006b10:	2004      	movs	r0, #4
 8006b12:	f000 f9b5 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8006b16:	b110      	cbz	r0, 8006b1e <acc_alg_threshold_fixed_allocate+0x16>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	8044      	strh	r4, [r0, #2]
 8006b1c:	7003      	strb	r3, [r0, #0]
 8006b1e:	bd10      	pop	{r4, pc}
 8006b20:	08015db8 	.word	0x08015db8

08006b24 <acc_alg_threshold_fixed_free>:
 8006b24:	b138      	cbz	r0, 8006b36 <acc_alg_threshold_fixed_free+0x12>
 8006b26:	b510      	push	{r4, lr}
 8006b28:	4604      	mov	r4, r0
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	f000 f9ec 	bl	8006f08 <acc_rss_integration_mem_free>
 8006b30:	2300      	movs	r3, #0
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	4770      	bx	lr

08006b38 <acc_alg_threshold_stationary_clutter_allocate>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	490b      	ldr	r1, [pc, #44]	; (8006b68 <acc_alg_threshold_stationary_clutter_allocate+0x30>)
 8006b3c:	ed2d 8b02 	vpush	{d8}
 8006b40:	4604      	mov	r4, r0
 8006b42:	222f      	movs	r2, #47	; 0x2f
 8006b44:	2014      	movs	r0, #20
 8006b46:	eeb0 8a40 	vmov.f32	s16, s0
 8006b4a:	f000 f999 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8006b4e:	b138      	cbz	r0, 8006b60 <acc_alg_threshold_stationary_clutter_allocate+0x28>
 8006b50:	2300      	movs	r3, #0
 8006b52:	2201      	movs	r2, #1
 8006b54:	ed80 8a03 	vstr	s16, [r0, #12]
 8006b58:	8104      	strh	r4, [r0, #8]
 8006b5a:	7002      	strb	r2, [r0, #0]
 8006b5c:	6043      	str	r3, [r0, #4]
 8006b5e:	6103      	str	r3, [r0, #16]
 8006b60:	ecbd 8b02 	vpop	{d8}
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	bf00      	nop
 8006b68:	08015db8 	.word	0x08015db8

08006b6c <acc_alg_threshold_stationary_clutter_free>:
 8006b6c:	b160      	cbz	r0, 8006b88 <acc_alg_threshold_stationary_clutter_free+0x1c>
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	6800      	ldr	r0, [r0, #0]
 8006b74:	b118      	cbz	r0, 8006b7e <acc_alg_threshold_stationary_clutter_free+0x12>
 8006b76:	3010      	adds	r0, #16
 8006b78:	f003 fdb6 	bl	800a6e8 <acc_alg_basic_online_variance_f32_free>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	f000 f9c3 	bl	8006f08 <acc_rss_integration_mem_free>
 8006b82:	2300      	movs	r3, #0
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd10      	pop	{r4, pc}
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop

08006b8c <acc_alg_threshold_cfar_threshold_allocate>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4613      	mov	r3, r2
 8006b90:	460c      	mov	r4, r1
 8006b92:	ed2d 8b02 	vpush	{d8}
 8006b96:	4606      	mov	r6, r0
 8006b98:	4909      	ldr	r1, [pc, #36]	; (8006bc0 <acc_alg_threshold_cfar_threshold_allocate+0x34>)
 8006b9a:	2263      	movs	r2, #99	; 0x63
 8006b9c:	2010      	movs	r0, #16
 8006b9e:	4625      	mov	r5, r4
 8006ba0:	eeb0 8a40 	vmov.f32	s16, s0
 8006ba4:	461c      	mov	r4, r3
 8006ba6:	f000 f96b 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8006baa:	b130      	cbz	r0, 8006bba <acc_alg_threshold_cfar_threshold_allocate+0x2e>
 8006bac:	2302      	movs	r3, #2
 8006bae:	8106      	strh	r6, [r0, #8]
 8006bb0:	8145      	strh	r5, [r0, #10]
 8006bb2:	ed80 8a01 	vstr	s16, [r0, #4]
 8006bb6:	7304      	strb	r4, [r0, #12]
 8006bb8:	7003      	strb	r3, [r0, #0]
 8006bba:	ecbd 8b02 	vpop	{d8}
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	08015db8 	.word	0x08015db8

08006bc4 <acc_alg_threshold_cfar_free>:
 8006bc4:	b138      	cbz	r0, 8006bd6 <acc_alg_threshold_cfar_free+0x12>
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	4604      	mov	r4, r0
 8006bca:	6800      	ldr	r0, [r0, #0]
 8006bcc:	f000 f99c 	bl	8006f08 <acc_rss_integration_mem_free>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	4770      	bx	lr

08006bd8 <acc_alg_threshold_get>:
 8006bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f000 8085 	beq.w	8006cec <acc_alg_threshold_get+0x114>
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d205      	bcs.n	8006bf2 <acc_alg_threshold_get+0x1a>
 8006be6:	7804      	ldrb	r4, [r0, #0]
 8006be8:	2c01      	cmp	r4, #1
 8006bea:	d01c      	beq.n	8006c26 <acc_alg_threshold_get+0x4e>
 8006bec:	2c02      	cmp	r4, #2
 8006bee:	d006      	beq.n	8006bfe <acc_alg_threshold_get+0x26>
 8006bf0:	b114      	cbz	r4, 8006bf8 <acc_alg_threshold_get+0x20>
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf8:	8840      	ldrh	r0, [r0, #2]
 8006bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfe:	8904      	ldrh	r4, [r0, #8]
 8006c00:	8945      	ldrh	r5, [r0, #10]
 8006c02:	7b06      	ldrb	r6, [r0, #12]
 8006c04:	3401      	adds	r4, #1
 8006c06:	eb05 0754 	add.w	r7, r5, r4, lsr #1
 8006c0a:	b2bf      	uxth	r7, r7
 8006c0c:	0864      	lsrs	r4, r4, #1
 8006c0e:	b98e      	cbnz	r6, 8006c34 <acc_alg_threshold_get+0x5c>
 8006c10:	42bb      	cmp	r3, r7
 8006c12:	d304      	bcc.n	8006c1e <acc_alg_threshold_get+0x46>
 8006c14:	1b52      	subs	r2, r2, r5
 8006c16:	1b12      	subs	r2, r2, r4
 8006c18:	b292      	uxth	r2, r2
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d351      	bcc.n	8006cc2 <acc_alg_threshold_get+0xea>
 8006c1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c26:	6840      	ldr	r0, [r0, #4]
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d0e3      	beq.n	8006bf4 <acc_alg_threshold_get+0x1c>
 8006c2c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8006c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c34:	42bb      	cmp	r3, r7
 8006c36:	d3f2      	bcc.n	8006c1e <acc_alg_threshold_get+0x46>
 8006c38:	1b5a      	subs	r2, r3, r5
 8006c3a:	1b12      	subs	r2, r2, r4
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	eb02 0905 	add.w	r9, r2, r5
 8006c42:	454a      	cmp	r2, r9
 8006c44:	da4d      	bge.n	8006ce2 <acc_alg_threshold_get+0x10a>
 8006c46:	f1c2 0a01 	rsb	sl, r2, #1
 8006c4a:	f04f 0c00 	mov.w	ip, #0
 8006c4e:	f102 0801 	add.w	r8, r2, #1
 8006c52:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 8006c56:	eb02 070a 	add.w	r7, r2, sl
 8006c5a:	fa1f f288 	uxth.w	r2, r8
 8006c5e:	454a      	cmp	r2, r9
 8006c60:	44f4      	add	ip, lr
 8006c62:	b2bf      	uxth	r7, r7
 8006c64:	dbf3      	blt.n	8006c4e <acc_alg_threshold_get+0x76>
 8006c66:	b98e      	cbnz	r6, 8006c8c <acc_alg_threshold_get+0xb4>
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	4414      	add	r4, r2
 8006c6c:	b2a4      	uxth	r4, r4
 8006c6e:	4425      	add	r5, r4
 8006c70:	42a5      	cmp	r5, r4
 8006c72:	dd0b      	ble.n	8006c8c <acc_alg_threshold_get+0xb4>
 8006c74:	f1c4 0601 	rsb	r6, r4, #1
 8006c78:	443e      	add	r6, r7
 8006c7a:	1c62      	adds	r2, r4, #1
 8006c7c:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 8006c80:	19a7      	adds	r7, r4, r6
 8006c82:	b294      	uxth	r4, r2
 8006c84:	42a5      	cmp	r5, r4
 8006c86:	449c      	add	ip, r3
 8006c88:	b2bf      	uxth	r7, r7
 8006c8a:	dcf6      	bgt.n	8006c7a <acc_alg_threshold_get+0xa2>
 8006c8c:	b34f      	cbz	r7, 8006ce2 <acc_alg_threshold_get+0x10a>
 8006c8e:	fbbc f3f7 	udiv	r3, ip, r7
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	edd0 6a01 	vldr	s13, [r0, #4]
 8006c98:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006cf4 <acc_alg_threshold_get+0x11c>
 8006c9c:	ee07 3a10 	vmov	s14, r3
 8006ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ca4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb0:	ddb5      	ble.n	8006c1e <acc_alg_threshold_get+0x46>
 8006cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cba:	ee17 3a90 	vmov	r3, s15
 8006cbe:	b298      	uxth	r0, r3
 8006cc0:	e798      	b.n	8006bf4 <acc_alg_threshold_get+0x1c>
 8006cc2:	1b5a      	subs	r2, r3, r5
 8006cc4:	1b12      	subs	r2, r2, r4
 8006cc6:	b292      	uxth	r2, r2
 8006cc8:	eb02 0905 	add.w	r9, r2, r5
 8006ccc:	454a      	cmp	r2, r9
 8006cce:	dbba      	blt.n	8006c46 <acc_alg_threshold_get+0x6e>
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	441c      	add	r4, r3
 8006cd4:	b2a4      	uxth	r4, r4
 8006cd6:	4425      	add	r5, r4
 8006cd8:	42a5      	cmp	r5, r4
 8006cda:	dd02      	ble.n	8006ce2 <acc_alg_threshold_get+0x10a>
 8006cdc:	46b4      	mov	ip, r6
 8006cde:	4637      	mov	r7, r6
 8006ce0:	e7c8      	b.n	8006c74 <acc_alg_threshold_get+0x9c>
 8006ce2:	4805      	ldr	r0, [pc, #20]	; (8006cf8 <acc_alg_threshold_get+0x120>)
 8006ce4:	f44f 7189 	mov.w	r1, #274	; 0x112
 8006ce8:	f000 f808 	bl	8006cfc <acc_assert_fail>
 8006cec:	4802      	ldr	r0, [pc, #8]	; (8006cf8 <acc_alg_threshold_get+0x120>)
 8006cee:	21cd      	movs	r1, #205	; 0xcd
 8006cf0:	f000 f804 	bl	8006cfc <acc_assert_fail>
 8006cf4:	477fff00 	.word	0x477fff00
 8006cf8:	08015db8 	.word	0x08015db8

08006cfc <acc_assert_fail>:
 8006cfc:	b500      	push	{lr}
 8006cfe:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <acc_assert_fail+0x20>)
 8006d00:	4a07      	ldr	r2, [pc, #28]	; (8006d20 <acc_assert_fail+0x24>)
 8006d02:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006d04:	b083      	sub	sp, #12
 8006d06:	4603      	mov	r3, r0
 8006d08:	9100      	str	r1, [sp, #0]
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	4905      	ldr	r1, [pc, #20]	; (8006d24 <acc_assert_fail+0x28>)
 8006d0e:	47a0      	blx	r4
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <acc_assert_fail+0x2c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	b103      	cbz	r3, 8006d18 <acc_assert_fail+0x1c>
 8006d16:	4798      	blx	r3
 8006d18:	e7fe      	b.n	8006d18 <acc_assert_fail+0x1c>
 8006d1a:	bf00      	nop
 8006d1c:	20000640 	.word	0x20000640
 8006d20:	08015dc8 	.word	0x08015dc8
 8006d24:	08015de0 	.word	0x08015de0
 8006d28:	20000234 	.word	0x20000234

08006d2c <acc_rss_integration_register>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	6943      	ldr	r3, [r0, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d02b      	beq.n	8006d8c <acc_rss_integration_register+0x60>
 8006d34:	6983      	ldr	r3, [r0, #24]
 8006d36:	b34b      	cbz	r3, 8006d8c <acc_rss_integration_register+0x60>
 8006d38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d3a:	b323      	cbz	r3, 8006d86 <acc_rss_integration_register+0x5a>
 8006d3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d3e:	b32b      	cbz	r3, 8006d8c <acc_rss_integration_register+0x60>
 8006d40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006d42:	b31b      	cbz	r3, 8006d8c <acc_rss_integration_register+0x60>
 8006d44:	6883      	ldr	r3, [r0, #8]
 8006d46:	b30b      	cbz	r3, 8006d8c <acc_rss_integration_register+0x60>
 8006d48:	68c3      	ldr	r3, [r0, #12]
 8006d4a:	b1fb      	cbz	r3, 8006d8c <acc_rss_integration_register+0x60>
 8006d4c:	6903      	ldr	r3, [r0, #16]
 8006d4e:	b1eb      	cbz	r3, 8006d8c <acc_rss_integration_register+0x60>
 8006d50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d52:	b313      	cbz	r3, 8006d9a <acc_rss_integration_register+0x6e>
 8006d54:	6802      	ldr	r2, [r0, #0]
 8006d56:	2a2a      	cmp	r2, #42	; 0x2a
 8006d58:	d81a      	bhi.n	8006d90 <acc_rss_integration_register+0x64>
 8006d5a:	6842      	ldr	r2, [r0, #4]
 8006d5c:	2a0f      	cmp	r2, #15
 8006d5e:	d917      	bls.n	8006d90 <acc_rss_integration_register+0x64>
 8006d60:	69c2      	ldr	r2, [r0, #28]
 8006d62:	b10a      	cbz	r2, 8006d68 <acc_rss_integration_register+0x3c>
 8006d64:	6a02      	ldr	r2, [r0, #32]
 8006d66:	b19a      	cbz	r2, 8006d90 <acc_rss_integration_register+0x64>
 8006d68:	4605      	mov	r5, r0
 8006d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d6c:	4c0c      	ldr	r4, [pc, #48]	; (8006da0 <acc_rss_integration_register+0x74>)
 8006d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d82:	4618      	mov	r0, r3
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1d7      	bne.n	8006d3c <acc_rss_integration_register+0x10>
 8006d8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d8e:	b123      	cbz	r3, 8006d9a <acc_rss_integration_register+0x6e>
 8006d90:	4a04      	ldr	r2, [pc, #16]	; (8006da4 <acc_rss_integration_register+0x78>)
 8006d92:	4905      	ldr	r1, [pc, #20]	; (8006da8 <acc_rss_integration_register+0x7c>)
 8006d94:	2000      	movs	r0, #0
 8006d96:	4798      	blx	r3
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	bd38      	pop	{r3, r4, r5, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000640 	.word	0x20000640
 8006da4:	08015de8 	.word	0x08015de8
 8006da8:	08015dfc 	.word	0x08015dfc

08006dac <acc_rss_integration_unregister>:
 8006dac:	4802      	ldr	r0, [pc, #8]	; (8006db8 <acc_rss_integration_unregister+0xc>)
 8006dae:	223c      	movs	r2, #60	; 0x3c
 8006db0:	2100      	movs	r1, #0
 8006db2:	f009 bef9 	b.w	8010ba8 <memset>
 8006db6:	bf00      	nop
 8006db8:	20000640 	.word	0x20000640

08006dbc <acc_rss_integration_get_sensor_count>:
 8006dbc:	4b01      	ldr	r3, [pc, #4]	; (8006dc4 <acc_rss_integration_get_sensor_count+0x8>)
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000640 	.word	0x20000640

08006dc8 <acc_rss_integration_get_sensor_reference_frequency>:
 8006dc8:	4b01      	ldr	r3, [pc, #4]	; (8006dd0 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	4718      	bx	r3
 8006dce:	bf00      	nop
 8006dd0:	20000640 	.word	0x20000640

08006dd4 <acc_rss_integration_get_max_spi_transfer_size>:
 8006dd4:	4b01      	ldr	r3, [pc, #4]	; (8006ddc <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 8006dd6:	6858      	ldr	r0, [r3, #4]
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	20000640 	.word	0x20000640

08006de0 <acc_rss_integration_sensor_device_power_on>:
 8006de0:	4b01      	ldr	r3, [pc, #4]	; (8006de8 <acc_rss_integration_sensor_device_power_on+0x8>)
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	4718      	bx	r3
 8006de6:	bf00      	nop
 8006de8:	20000640 	.word	0x20000640

08006dec <acc_rss_integration_sensor_device_power_off>:
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <acc_rss_integration_sensor_device_power_off+0x8>)
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	4718      	bx	r3
 8006df2:	bf00      	nop
 8006df4:	20000640 	.word	0x20000640

08006df8 <acc_rss_integration_sensor_device_hibernate_enter>:
 8006df8:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	b103      	cbz	r3, 8006e00 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 8006dfe:	4718      	bx	r3
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20000640 	.word	0x20000640

08006e08 <acc_rss_integration_sensor_device_hibernate_exit>:
 8006e08:	4b02      	ldr	r3, [pc, #8]	; (8006e14 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	b103      	cbz	r3, 8006e10 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 8006e0e:	4718      	bx	r3
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20000640 	.word	0x20000640

08006e18 <acc_rss_integration_is_hibernate_capable>:
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <acc_rss_integration_is_hibernate_capable+0xc>)
 8006e1a:	69d8      	ldr	r0, [r3, #28]
 8006e1c:	3800      	subs	r0, #0
 8006e1e:	bf18      	it	ne
 8006e20:	2001      	movne	r0, #1
 8006e22:	4770      	bx	lr
 8006e24:	20000640 	.word	0x20000640

08006e28 <acc_rss_integration_wait_for_sensor_interrupt>:
 8006e28:	4b01      	ldr	r3, [pc, #4]	; (8006e30 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	4718      	bx	r3
 8006e2e:	bf00      	nop
 8006e30:	20000640 	.word	0x20000640

08006e34 <acc_rss_integration_sensor_device_transfer>:
 8006e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e38:	4f10      	ldr	r7, [pc, #64]	; (8006e7c <acc_rss_integration_sensor_device_transfer+0x48>)
 8006e3a:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 8006e3e:	f1be 0f00 	cmp.w	lr, #0
 8006e42:	d003      	beq.n	8006e4c <acc_rss_integration_sensor_device_transfer+0x18>
 8006e44:	4673      	mov	r3, lr
 8006e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4a:	4718      	bx	r3
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	4606      	mov	r6, r0
 8006e50:	4611      	mov	r1, r2
 8006e52:	4615      	mov	r5, r2
 8006e54:	4620      	mov	r0, r4
 8006e56:	4698      	mov	r8, r3
 8006e58:	f000 f8ba 	bl	8006fd0 <acc_utils_swap16_array>
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	4630      	mov	r0, r6
 8006e60:	006a      	lsls	r2, r5, #1
 8006e62:	4621      	mov	r1, r4
 8006e64:	4798      	blx	r3
 8006e66:	f1b8 0f00 	cmp.w	r8, #0
 8006e6a:	d101      	bne.n	8006e70 <acc_rss_integration_sensor_device_transfer+0x3c>
 8006e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e70:	4629      	mov	r1, r5
 8006e72:	4620      	mov	r0, r4
 8006e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	f000 b8aa 	b.w	8006fd0 <acc_utils_swap16_array>
 8006e7c:	20000640 	.word	0x20000640

08006e80 <acc_rss_integration_mem_alloc_debug>:
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	4f0c      	ldr	r7, [pc, #48]	; (8006eb8 <acc_rss_integration_mem_alloc_debug+0x38>)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	4688      	mov	r8, r1
 8006e8a:	4616      	mov	r6, r2
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	4798      	blx	r3
 8006e90:	4604      	mov	r4, r0
 8006e92:	b150      	cbz	r0, 8006eaa <acc_rss_integration_mem_alloc_debug+0x2a>
 8006e94:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <acc_rss_integration_mem_alloc_debug+0x3c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	b123      	cbz	r3, 8006ea4 <acc_rss_integration_mem_alloc_debug+0x24>
 8006e9a:	681f      	ldr	r7, [r3, #0]
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	4633      	mov	r3, r6
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	47b8      	blx	r7
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eac:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <acc_rss_integration_mem_alloc_debug+0x40>)
 8006eae:	4905      	ldr	r1, [pc, #20]	; (8006ec4 <acc_rss_integration_mem_alloc_debug+0x44>)
 8006eb0:	4798      	blx	r3
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb8:	20000640 	.word	0x20000640
 8006ebc:	20000238 	.word	0x20000238
 8006ec0:	08015e0c 	.word	0x08015e0c
 8006ec4:	08015dfc 	.word	0x08015dfc

08006ec8 <acc_rss_integration_mem_calloc_debug>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	b190      	cbz	r0, 8006ef2 <acc_rss_integration_mem_calloc_debug+0x2a>
 8006ecc:	460c      	mov	r4, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	fba0 3604 	umull	r3, r6, r0, r4
 8006ed6:	b97e      	cbnz	r6, 8006ef8 <acc_rss_integration_mem_calloc_debug+0x30>
 8006ed8:	fb04 f500 	mul.w	r5, r4, r0
 8006edc:	4628      	mov	r0, r5
 8006ede:	f7ff ffcf 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	b118      	cbz	r0, 8006eee <acc_rss_integration_mem_calloc_debug+0x26>
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	4631      	mov	r1, r6
 8006eea:	f009 fe5d 	bl	8010ba8 <memset>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	4802      	ldr	r0, [pc, #8]	; (8006f04 <acc_rss_integration_mem_calloc_debug+0x3c>)
 8006efa:	f240 1115 	movw	r1, #277	; 0x115
 8006efe:	f7ff fefd 	bl	8006cfc <acc_assert_fail>
 8006f02:	bf00      	nop
 8006f04:	08015dfc 	.word	0x08015dfc

08006f08 <acc_rss_integration_mem_free>:
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <acc_rss_integration_mem_free+0x1c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	4604      	mov	r4, r0
 8006f10:	b10b      	cbz	r3, 8006f16 <acc_rss_integration_mem_free+0xe>
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	4798      	blx	r3
 8006f16:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <acc_rss_integration_mem_free+0x20>)
 8006f18:	4620      	mov	r0, r4
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f20:	4718      	bx	r3
 8006f22:	bf00      	nop
 8006f24:	20000238 	.word	0x20000238
 8006f28:	20000640 	.word	0x20000640

08006f2c <acc_rss_integration_get_time>:
 8006f2c:	4b01      	ldr	r3, [pc, #4]	; (8006f34 <acc_rss_integration_get_time+0x8>)
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	4718      	bx	r3
 8006f32:	bf00      	nop
 8006f34:	20000640 	.word	0x20000640

08006f38 <acc_rss_integration_log_level>:
 8006f38:	4b01      	ldr	r3, [pc, #4]	; (8006f40 <acc_rss_integration_log_level+0x8>)
 8006f3a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8006f3e:	4770      	bx	lr
 8006f40:	20000640 	.word	0x20000640

08006f44 <acc_probes_execute_uint16>:
 8006f44:	b530      	push	{r4, r5, lr}
 8006f46:	b085      	sub	sp, #20
 8006f48:	4c09      	ldr	r4, [pc, #36]	; (8006f70 <acc_probes_execute_uint16+0x2c>)
 8006f4a:	f88d 0004 	strb.w	r0, [sp, #4]
 8006f4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006f52:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006f56:	2501      	movs	r5, #1
 8006f58:	6844      	ldr	r4, [r0, #4]
 8006f5a:	9102      	str	r1, [sp, #8]
 8006f5c:	9503      	str	r5, [sp, #12]
 8006f5e:	b12c      	cbz	r4, 8006f6c <acc_probes_execute_uint16+0x28>
 8006f60:	4611      	mov	r1, r2
 8006f62:	461a      	mov	r2, r3
 8006f64:	40aa      	lsls	r2, r5
 8006f66:	6883      	ldr	r3, [r0, #8]
 8006f68:	a801      	add	r0, sp, #4
 8006f6a:	47a0      	blx	r4
 8006f6c:	b005      	add	sp, #20
 8006f6e:	bd30      	pop	{r4, r5, pc}
 8006f70:	20000010 	.word	0x20000010

08006f74 <acc_probes_execute_struct>:
 8006f74:	b530      	push	{r4, r5, lr}
 8006f76:	b085      	sub	sp, #20
 8006f78:	4c09      	ldr	r4, [pc, #36]	; (8006fa0 <acc_probes_execute_struct+0x2c>)
 8006f7a:	f88d 0004 	strb.w	r0, [sp, #4]
 8006f7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006f82:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006f86:	2507      	movs	r5, #7
 8006f88:	6844      	ldr	r4, [r0, #4]
 8006f8a:	9102      	str	r1, [sp, #8]
 8006f8c:	9503      	str	r5, [sp, #12]
 8006f8e:	b124      	cbz	r4, 8006f9a <acc_probes_execute_struct+0x26>
 8006f90:	4611      	mov	r1, r2
 8006f92:	461a      	mov	r2, r3
 8006f94:	6883      	ldr	r3, [r0, #8]
 8006f96:	a801      	add	r0, sp, #4
 8006f98:	47a0      	blx	r4
 8006f9a:	b005      	add	sp, #20
 8006f9c:	bd30      	pop	{r4, r5, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000010 	.word	0x20000010

08006fa4 <acc_probes_execute_primitive_probe>:
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <acc_probes_execute_primitive_probe+0x28>)
 8006faa:	f88d 0004 	strb.w	r0, [sp, #4]
 8006fae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006fb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	6844      	ldr	r4, [r0, #4]
 8006fba:	9102      	str	r1, [sp, #8]
 8006fbc:	9203      	str	r2, [sp, #12]
 8006fbe:	b11c      	cbz	r4, 8006fc8 <acc_probes_execute_primitive_probe+0x24>
 8006fc0:	6883      	ldr	r3, [r0, #8]
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	a801      	add	r0, sp, #4
 8006fc6:	47a0      	blx	r4
 8006fc8:	b004      	add	sp, #16
 8006fca:	bd10      	pop	{r4, pc}
 8006fcc:	20000010 	.word	0x20000010

08006fd0 <acc_utils_swap16_array>:
 8006fd0:	1e4a      	subs	r2, r1, #1
 8006fd2:	b131      	cbz	r1, 8006fe2 <acc_utils_swap16_array+0x12>
 8006fd4:	8803      	ldrh	r3, [r0, #0]
 8006fd6:	3a01      	subs	r2, #1
 8006fd8:	ba5b      	rev16	r3, r3
 8006fda:	f820 3b02 	strh.w	r3, [r0], #2
 8006fde:	1c53      	adds	r3, r2, #1
 8006fe0:	d1f8      	bne.n	8006fd4 <acc_utils_swap16_array+0x4>
 8006fe2:	4770      	bx	lr

08006fe4 <acc_utils_uint32_to_transfer_buffer>:
 8006fe4:	b152      	cbz	r2, 8006ffc <acc_utils_uint32_to_transfer_buffer+0x18>
 8006fe6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006fea:	3804      	subs	r0, #4
 8006fec:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8006ff0:	804b      	strh	r3, [r1, #2]
 8006ff2:	0c1b      	lsrs	r3, r3, #16
 8006ff4:	800b      	strh	r3, [r1, #0]
 8006ff6:	3104      	adds	r1, #4
 8006ff8:	4291      	cmp	r1, r2
 8006ffa:	d1f7      	bne.n	8006fec <acc_utils_uint32_to_transfer_buffer+0x8>
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <acc_utils_transfer_buffer_to_uint32>:
 8007000:	b17a      	cbz	r2, 8007022 <acc_utils_transfer_buffer_to_uint32+0x22>
 8007002:	b410      	push	{r4}
 8007004:	3904      	subs	r1, #4
 8007006:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800700a:	8802      	ldrh	r2, [r0, #0]
 800700c:	8843      	ldrh	r3, [r0, #2]
 800700e:	3004      	adds	r0, #4
 8007010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007014:	4284      	cmp	r4, r0
 8007016:	f841 3f04 	str.w	r3, [r1, #4]!
 800701a:	d1f6      	bne.n	800700a <acc_utils_transfer_buffer_to_uint32+0xa>
 800701c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	4770      	bx	lr

08007024 <configuration_is_valid.part.0>:
 8007024:	b508      	push	{r3, lr}
 8007026:	f7ff ff87 	bl	8006f38 <acc_rss_integration_log_level>
 800702a:	b128      	cbz	r0, 8007038 <configuration_is_valid.part.0+0x14>
 800702c:	4b03      	ldr	r3, [pc, #12]	; (800703c <configuration_is_valid.part.0+0x18>)
 800702e:	4a04      	ldr	r2, [pc, #16]	; (8007040 <configuration_is_valid.part.0+0x1c>)
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	4904      	ldr	r1, [pc, #16]	; (8007044 <configuration_is_valid.part.0+0x20>)
 8007034:	2001      	movs	r0, #1
 8007036:	4798      	blx	r3
 8007038:	2000      	movs	r0, #0
 800703a:	bd08      	pop	{r3, pc}
 800703c:	20000640 	.word	0x20000640
 8007040:	08015e1c 	.word	0x08015e1c
 8007044:	08015e38 	.word	0x08015e38

08007048 <acc_base_configuration_sensor_get>:
 8007048:	b510      	push	{r4, lr}
 800704a:	4604      	mov	r4, r0
 800704c:	b108      	cbz	r0, 8007052 <acc_base_configuration_sensor_get+0xa>
 800704e:	68e0      	ldr	r0, [r4, #12]
 8007050:	bd10      	pop	{r4, pc}
 8007052:	f7ff ffe7 	bl	8007024 <configuration_is_valid.part.0>
 8007056:	2800      	cmp	r0, #0
 8007058:	d1f9      	bne.n	800704e <acc_base_configuration_sensor_get+0x6>
 800705a:	bd10      	pop	{r4, pc}

0800705c <acc_base_configuration_sensor_set>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	460d      	mov	r5, r1
 8007060:	4604      	mov	r4, r0
 8007062:	b108      	cbz	r0, 8007068 <acc_base_configuration_sensor_set+0xc>
 8007064:	60e5      	str	r5, [r4, #12]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	f7ff ffdc 	bl	8007024 <configuration_is_valid.part.0>
 800706c:	2800      	cmp	r0, #0
 800706e:	d1f9      	bne.n	8007064 <acc_base_configuration_sensor_set+0x8>
 8007070:	bd38      	pop	{r3, r4, r5, pc}
 8007072:	bf00      	nop

08007074 <acc_base_configuration_requested_start_get>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	b110      	cbz	r0, 8007080 <acc_base_configuration_requested_start_get+0xc>
 800707a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 800707e:	bd10      	pop	{r4, pc}
 8007080:	f7ff ffd0 	bl	8007024 <configuration_is_valid.part.0>
 8007084:	2800      	cmp	r0, #0
 8007086:	d1f8      	bne.n	800707a <acc_base_configuration_requested_start_get+0x6>
 8007088:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007090 <acc_base_configuration_requested_start_get+0x1c>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	00000000 	.word	0x00000000

08007094 <acc_base_configuration_requested_start_set>:
 8007094:	b510      	push	{r4, lr}
 8007096:	4604      	mov	r4, r0
 8007098:	ed2d 8b02 	vpush	{d8}
 800709c:	eeb0 8a40 	vmov.f32	s16, s0
 80070a0:	b120      	cbz	r0, 80070ac <acc_base_configuration_requested_start_set+0x18>
 80070a2:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 80070a6:	ecbd 8b02 	vpop	{d8}
 80070aa:	bd10      	pop	{r4, pc}
 80070ac:	f7ff ffba 	bl	8007024 <configuration_is_valid.part.0>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d1f6      	bne.n	80070a2 <acc_base_configuration_requested_start_set+0xe>
 80070b4:	e7f7      	b.n	80070a6 <acc_base_configuration_requested_start_set+0x12>
 80070b6:	bf00      	nop

080070b8 <acc_base_configuration_requested_length_get>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	b110      	cbz	r0, 80070c4 <acc_base_configuration_requested_length_get+0xc>
 80070be:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80070c2:	bd10      	pop	{r4, pc}
 80070c4:	f7ff ffae 	bl	8007024 <configuration_is_valid.part.0>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d1f8      	bne.n	80070be <acc_base_configuration_requested_length_get+0x6>
 80070cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070d4 <acc_base_configuration_requested_length_get+0x1c>
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	00000000 	.word	0x00000000

080070d8 <acc_base_configuration_requested_length_set>:
 80070d8:	b510      	push	{r4, lr}
 80070da:	4604      	mov	r4, r0
 80070dc:	ed2d 8b02 	vpush	{d8}
 80070e0:	eeb0 8a40 	vmov.f32	s16, s0
 80070e4:	b120      	cbz	r0, 80070f0 <acc_base_configuration_requested_length_set+0x18>
 80070e6:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 80070ea:	ecbd 8b02 	vpop	{d8}
 80070ee:	bd10      	pop	{r4, pc}
 80070f0:	f7ff ff98 	bl	8007024 <configuration_is_valid.part.0>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d1f6      	bne.n	80070e6 <acc_base_configuration_requested_length_set+0xe>
 80070f8:	e7f7      	b.n	80070ea <acc_base_configuration_requested_length_set+0x12>
 80070fa:	bf00      	nop

080070fc <acc_base_configuration_repetition_mode_on_demand_set>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	4604      	mov	r4, r0
 8007100:	b110      	cbz	r0, 8007108 <acc_base_configuration_repetition_mode_on_demand_set+0xc>
 8007102:	2301      	movs	r3, #1
 8007104:	7123      	strb	r3, [r4, #4]
 8007106:	bd10      	pop	{r4, pc}
 8007108:	f7ff ff8c 	bl	8007024 <configuration_is_valid.part.0>
 800710c:	2800      	cmp	r0, #0
 800710e:	d1f8      	bne.n	8007102 <acc_base_configuration_repetition_mode_on_demand_set+0x6>
 8007110:	bd10      	pop	{r4, pc}
 8007112:	bf00      	nop

08007114 <acc_base_configuration_power_save_mode_get>:
 8007114:	b510      	push	{r4, lr}
 8007116:	4604      	mov	r4, r0
 8007118:	b108      	cbz	r0, 800711e <acc_base_configuration_power_save_mode_get+0xa>
 800711a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800711c:	bd10      	pop	{r4, pc}
 800711e:	f7ff ff81 	bl	8007024 <configuration_is_valid.part.0>
 8007122:	2800      	cmp	r0, #0
 8007124:	d1f9      	bne.n	800711a <acc_base_configuration_power_save_mode_get+0x6>
 8007126:	bd10      	pop	{r4, pc}

08007128 <acc_base_configuration_power_save_mode_set>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	460d      	mov	r5, r1
 800712c:	4604      	mov	r4, r0
 800712e:	b108      	cbz	r0, 8007134 <acc_base_configuration_power_save_mode_set+0xc>
 8007130:	63a5      	str	r5, [r4, #56]	; 0x38
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	f7ff ff76 	bl	8007024 <configuration_is_valid.part.0>
 8007138:	2800      	cmp	r0, #0
 800713a:	d1f9      	bne.n	8007130 <acc_base_configuration_power_save_mode_set+0x8>
 800713c:	bd38      	pop	{r3, r4, r5, pc}
 800713e:	bf00      	nop

08007140 <acc_base_configuration_tx_disable_get>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	b110      	cbz	r0, 800714c <acc_base_configuration_tx_disable_get+0xc>
 8007146:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 800714a:	bd10      	pop	{r4, pc}
 800714c:	f7ff ff6a 	bl	8007024 <configuration_is_valid.part.0>
 8007150:	2800      	cmp	r0, #0
 8007152:	d1f8      	bne.n	8007146 <acc_base_configuration_tx_disable_get+0x6>
 8007154:	bd10      	pop	{r4, pc}
 8007156:	bf00      	nop

08007158 <acc_base_configuration_tx_disable_set>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	460d      	mov	r5, r1
 800715c:	4604      	mov	r4, r0
 800715e:	b110      	cbz	r0, 8007166 <acc_base_configuration_tx_disable_set+0xe>
 8007160:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	f7ff ff5d 	bl	8007024 <configuration_is_valid.part.0>
 800716a:	2800      	cmp	r0, #0
 800716c:	d1f8      	bne.n	8007160 <acc_base_configuration_tx_disable_set+0x8>
 800716e:	bd38      	pop	{r3, r4, r5, pc}

08007170 <acc_base_configuration_decrease_tx_emission_get>:
 8007170:	b510      	push	{r4, lr}
 8007172:	4604      	mov	r4, r0
 8007174:	b110      	cbz	r0, 800717c <acc_base_configuration_decrease_tx_emission_get+0xc>
 8007176:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800717a:	bd10      	pop	{r4, pc}
 800717c:	f7ff ff52 	bl	8007024 <configuration_is_valid.part.0>
 8007180:	2800      	cmp	r0, #0
 8007182:	d1f8      	bne.n	8007176 <acc_base_configuration_decrease_tx_emission_get+0x6>
 8007184:	bd10      	pop	{r4, pc}
 8007186:	bf00      	nop

08007188 <acc_base_configuration_decrease_tx_emission_set>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	460d      	mov	r5, r1
 800718c:	4604      	mov	r4, r0
 800718e:	b110      	cbz	r0, 8007196 <acc_base_configuration_decrease_tx_emission_set+0xe>
 8007190:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8007194:	bd38      	pop	{r3, r4, r5, pc}
 8007196:	f7ff ff45 	bl	8007024 <configuration_is_valid.part.0>
 800719a:	2800      	cmp	r0, #0
 800719c:	d1f8      	bne.n	8007190 <acc_base_configuration_decrease_tx_emission_set+0x8>
 800719e:	bd38      	pop	{r3, r4, r5, pc}

080071a0 <acc_base_configuration_hw_accelerated_average_samples_get>:
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4604      	mov	r4, r0
 80071a4:	b110      	cbz	r0, 80071ac <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 80071a6:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80071aa:	bd10      	pop	{r4, pc}
 80071ac:	f7ff ff3a 	bl	8007024 <configuration_is_valid.part.0>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d1f8      	bne.n	80071a6 <acc_base_configuration_hw_accelerated_average_samples_get+0x6>
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	bf00      	nop

080071b8 <acc_base_configuration_hw_accelerated_average_samples_set>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	460d      	mov	r5, r1
 80071bc:	4604      	mov	r4, r0
 80071be:	b108      	cbz	r0, 80071c4 <acc_base_configuration_hw_accelerated_average_samples_set+0xc>
 80071c0:	87a5      	strh	r5, [r4, #60]	; 0x3c
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	f7ff ff2e 	bl	8007024 <configuration_is_valid.part.0>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1f9      	bne.n	80071c0 <acc_base_configuration_hw_accelerated_average_samples_set+0x8>
 80071cc:	bd38      	pop	{r3, r4, r5, pc}
 80071ce:	bf00      	nop

080071d0 <acc_base_configuration_radar_engine_creation_set>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	460d      	mov	r5, r1
 80071d4:	4604      	mov	r4, r0
 80071d6:	b108      	cbz	r0, 80071dc <acc_base_configuration_radar_engine_creation_set+0xc>
 80071d8:	6025      	str	r5, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	f7ff ff22 	bl	8007024 <configuration_is_valid.part.0>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d1f9      	bne.n	80071d8 <acc_base_configuration_radar_engine_creation_set+0x8>
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	bf00      	nop

080071e8 <acc_base_configuration_phase_compensation_alpha_get>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	4604      	mov	r4, r0
 80071ec:	b110      	cbz	r0, 80071f4 <acc_base_configuration_phase_compensation_alpha_get+0xc>
 80071ee:	ed94 0a04 	vldr	s0, [r4, #16]
 80071f2:	bd10      	pop	{r4, pc}
 80071f4:	f7ff ff16 	bl	8007024 <configuration_is_valid.part.0>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d1f8      	bne.n	80071ee <acc_base_configuration_phase_compensation_alpha_get+0x6>
 80071fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007204 <acc_base_configuration_phase_compensation_alpha_get+0x1c>
 8007200:	bd10      	pop	{r4, pc}
 8007202:	bf00      	nop
 8007204:	00000000 	.word	0x00000000

08007208 <acc_base_configuration_phase_compensation_alpha_set>:
 8007208:	b510      	push	{r4, lr}
 800720a:	4604      	mov	r4, r0
 800720c:	ed2d 8b02 	vpush	{d8}
 8007210:	eeb0 8a40 	vmov.f32	s16, s0
 8007214:	b120      	cbz	r0, 8007220 <acc_base_configuration_phase_compensation_alpha_set+0x18>
 8007216:	ed84 8a04 	vstr	s16, [r4, #16]
 800721a:	ecbd 8b02 	vpop	{d8}
 800721e:	bd10      	pop	{r4, pc}
 8007220:	f7ff ff00 	bl	8007024 <configuration_is_valid.part.0>
 8007224:	2800      	cmp	r0, #0
 8007226:	d1f6      	bne.n	8007216 <acc_base_configuration_phase_compensation_alpha_set+0xe>
 8007228:	e7f7      	b.n	800721a <acc_base_configuration_phase_compensation_alpha_set+0x12>
 800722a:	bf00      	nop

0800722c <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	460d      	mov	r5, r1
 8007230:	4604      	mov	r4, r0
 8007232:	b120      	cbz	r0, 800723e <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x12>
 8007234:	b10d      	cbz	r5, 800723a <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0xe>
 8007236:	6963      	ldr	r3, [r4, #20]
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	7e20      	ldrb	r0, [r4, #24]
 800723c:	bd38      	pop	{r3, r4, r5, pc}
 800723e:	f7ff fef1 	bl	8007024 <configuration_is_valid.part.0>
 8007242:	2800      	cmp	r0, #0
 8007244:	d1f6      	bne.n	8007234 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x8>
 8007246:	bd38      	pop	{r3, r4, r5, pc}

08007248 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	460d      	mov	r5, r1
 800724c:	ed2d 8b02 	vpush	{d8}
 8007250:	4604      	mov	r4, r0
 8007252:	eeb0 8a40 	vmov.f32	s16, s0
 8007256:	b128      	cbz	r0, 8007264 <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1c>
 8007258:	ed84 8a05 	vstr	s16, [r4, #20]
 800725c:	7625      	strb	r5, [r4, #24]
 800725e:	ecbd 8b02 	vpop	{d8}
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	f7ff fede 	bl	8007024 <configuration_is_valid.part.0>
 8007268:	2800      	cmp	r0, #0
 800726a:	d1f5      	bne.n	8007258 <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x10>
 800726c:	e7f7      	b.n	800725e <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x16>
 800726e:	bf00      	nop

08007270 <acc_base_configuration_filter_demodulated_data_get>:
 8007270:	b510      	push	{r4, lr}
 8007272:	4604      	mov	r4, r0
 8007274:	b108      	cbz	r0, 800727a <acc_base_configuration_filter_demodulated_data_get+0xa>
 8007276:	7f20      	ldrb	r0, [r4, #28]
 8007278:	bd10      	pop	{r4, pc}
 800727a:	f7ff fed3 	bl	8007024 <configuration_is_valid.part.0>
 800727e:	2800      	cmp	r0, #0
 8007280:	d1f9      	bne.n	8007276 <acc_base_configuration_filter_demodulated_data_get+0x6>
 8007282:	bd10      	pop	{r4, pc}

08007284 <acc_base_configuration_filter_demodulated_data_set>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	460d      	mov	r5, r1
 8007288:	4604      	mov	r4, r0
 800728a:	b108      	cbz	r0, 8007290 <acc_base_configuration_filter_demodulated_data_set+0xc>
 800728c:	7725      	strb	r5, [r4, #28]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	f7ff fec8 	bl	8007024 <configuration_is_valid.part.0>
 8007294:	2800      	cmp	r0, #0
 8007296:	d0fa      	beq.n	800728e <acc_base_configuration_filter_demodulated_data_set+0xa>
 8007298:	7725      	strb	r5, [r4, #28]
 800729a:	e7f8      	b.n	800728e <acc_base_configuration_filter_demodulated_data_set+0xa>

0800729c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 800729c:	b510      	push	{r4, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	b110      	cbz	r0, 80072a8 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0xc>
 80072a2:	ed94 0a08 	vldr	s0, [r4, #32]
 80072a6:	bd10      	pop	{r4, pc}
 80072a8:	f7ff febc 	bl	8007024 <configuration_is_valid.part.0>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1f8      	bne.n	80072a2 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x6>
 80072b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80072b8 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x1c>
 80072b4:	bd10      	pop	{r4, pc}
 80072b6:	bf00      	nop
 80072b8:	00000000 	.word	0x00000000

080072bc <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	4604      	mov	r4, r0
 80072c0:	ed2d 8b02 	vpush	{d8}
 80072c4:	eeb0 8a40 	vmov.f32	s16, s0
 80072c8:	b120      	cbz	r0, 80072d4 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x18>
 80072ca:	ed84 8a08 	vstr	s16, [r4, #32]
 80072ce:	ecbd 8b02 	vpop	{d8}
 80072d2:	bd10      	pop	{r4, pc}
 80072d4:	f7ff fea6 	bl	8007024 <configuration_is_valid.part.0>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d1f6      	bne.n	80072ca <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0xe>
 80072dc:	e7f7      	b.n	80072ce <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x12>
 80072de:	bf00      	nop

080072e0 <acc_base_configuration_point_start_get>:
 80072e0:	b510      	push	{r4, lr}
 80072e2:	4604      	mov	r4, r0
 80072e4:	b110      	cbz	r0, 80072ec <acc_base_configuration_point_start_get+0xc>
 80072e6:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 80072ea:	bd10      	pop	{r4, pc}
 80072ec:	f7ff fe9a 	bl	8007024 <configuration_is_valid.part.0>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d1f8      	bne.n	80072e6 <acc_base_configuration_point_start_get+0x6>
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	bf00      	nop

080072f8 <acc_base_configuration_point_length_get>:
 80072f8:	b510      	push	{r4, lr}
 80072fa:	4604      	mov	r4, r0
 80072fc:	b110      	cbz	r0, 8007304 <acc_base_configuration_point_length_get+0xc>
 80072fe:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8007302:	bd10      	pop	{r4, pc}
 8007304:	f7ff fe8e 	bl	8007024 <configuration_is_valid.part.0>
 8007308:	2800      	cmp	r0, #0
 800730a:	d1f8      	bne.n	80072fe <acc_base_configuration_point_length_get+0x6>
 800730c:	bd10      	pop	{r4, pc}
 800730e:	bf00      	nop

08007310 <acc_base_configuration_repetition_mode_get>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	b108      	cbz	r0, 800731a <acc_base_configuration_repetition_mode_get+0xa>
 8007316:	7920      	ldrb	r0, [r4, #4]
 8007318:	bd10      	pop	{r4, pc}
 800731a:	f7ff fe83 	bl	8007024 <configuration_is_valid.part.0>
 800731e:	2800      	cmp	r0, #0
 8007320:	d1f9      	bne.n	8007316 <acc_base_configuration_repetition_mode_get+0x6>
 8007322:	bd10      	pop	{r4, pc}

08007324 <acc_base_configuration_update_rate_get>:
 8007324:	b510      	push	{r4, lr}
 8007326:	4604      	mov	r4, r0
 8007328:	b158      	cbz	r0, 8007342 <acc_base_configuration_update_rate_get+0x1e>
 800732a:	7923      	ldrb	r3, [r4, #4]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d002      	beq.n	8007336 <acc_base_configuration_update_rate_get+0x12>
 8007330:	d904      	bls.n	800733c <acc_base_configuration_update_rate_get+0x18>
 8007332:	2b03      	cmp	r3, #3
 8007334:	d109      	bne.n	800734a <acc_base_configuration_update_rate_get+0x26>
 8007336:	ed94 0a02 	vldr	s0, [r4, #8]
 800733a:	bd10      	pop	{r4, pc}
 800733c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8007350 <acc_base_configuration_update_rate_get+0x2c>
 8007340:	bd10      	pop	{r4, pc}
 8007342:	f7ff fe6f 	bl	8007024 <configuration_is_valid.part.0>
 8007346:	2800      	cmp	r0, #0
 8007348:	d1ef      	bne.n	800732a <acc_base_configuration_update_rate_get+0x6>
 800734a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8007354 <acc_base_configuration_update_rate_get+0x30>
 800734e:	bd10      	pop	{r4, pc}
 8007350:	7f800000 	.word	0x7f800000
 8007354:	7fc00000 	.word	0x7fc00000

08007358 <acc_base_configuration_gain_get>:
 8007358:	b510      	push	{r4, lr}
 800735a:	4604      	mov	r4, r0
 800735c:	b108      	cbz	r0, 8007362 <acc_base_configuration_gain_get+0xa>
 800735e:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8007360:	bd10      	pop	{r4, pc}
 8007362:	f7ff fe5f 	bl	8007024 <configuration_is_valid.part.0>
 8007366:	2800      	cmp	r0, #0
 8007368:	d1f9      	bne.n	800735e <acc_base_configuration_gain_get+0x6>
 800736a:	bd10      	pop	{r4, pc}

0800736c <acc_base_configuration_gain_set>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	460d      	mov	r5, r1
 8007370:	4604      	mov	r4, r0
 8007372:	b108      	cbz	r0, 8007378 <acc_base_configuration_gain_set+0xc>
 8007374:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	f7ff fe54 	bl	8007024 <configuration_is_valid.part.0>
 800737c:	2800      	cmp	r0, #0
 800737e:	d1f9      	bne.n	8007374 <acc_base_configuration_gain_set+0x8>
 8007380:	bd38      	pop	{r3, r4, r5, pc}
 8007382:	bf00      	nop

08007384 <acc_base_configuration_integrator_get>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	b110      	cbz	r0, 8007390 <acc_base_configuration_integrator_get+0xc>
 800738a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800738e:	bd10      	pop	{r4, pc}
 8007390:	f7ff fe48 	bl	8007024 <configuration_is_valid.part.0>
 8007394:	2800      	cmp	r0, #0
 8007396:	d1f8      	bne.n	800738a <acc_base_configuration_integrator_get+0x6>
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop

0800739c <acc_base_configuration_integrator_set>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	460d      	mov	r5, r1
 80073a0:	4604      	mov	r4, r0
 80073a2:	b110      	cbz	r0, 80073aa <acc_base_configuration_integrator_set+0xe>
 80073a4:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 80073a8:	bd38      	pop	{r3, r4, r5, pc}
 80073aa:	f7ff fe3b 	bl	8007024 <configuration_is_valid.part.0>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1f8      	bne.n	80073a4 <acc_base_configuration_integrator_set+0x8>
 80073b2:	bd38      	pop	{r3, r4, r5, pc}

080073b4 <acc_base_configuration_wg_duration_get>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	4604      	mov	r4, r0
 80073b8:	b110      	cbz	r0, 80073c0 <acc_base_configuration_wg_duration_get+0xc>
 80073ba:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 80073be:	bd10      	pop	{r4, pc}
 80073c0:	f7ff fe30 	bl	8007024 <configuration_is_valid.part.0>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d1f8      	bne.n	80073ba <acc_base_configuration_wg_duration_get+0x6>
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	bf00      	nop

080073cc <acc_base_configuration_wg_duration_set>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	460d      	mov	r5, r1
 80073d0:	4604      	mov	r4, r0
 80073d2:	b110      	cbz	r0, 80073da <acc_base_configuration_wg_duration_set+0xe>
 80073d4:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 80073d8:	bd38      	pop	{r3, r4, r5, pc}
 80073da:	f7ff fe23 	bl	8007024 <configuration_is_valid.part.0>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d1f8      	bne.n	80073d4 <acc_base_configuration_wg_duration_set+0x8>
 80073e2:	bd38      	pop	{r3, r4, r5, pc}

080073e4 <acc_base_configuration_integrator_ramp_up_get>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	b110      	cbz	r0, 80073f0 <acc_base_configuration_integrator_ramp_up_get+0xc>
 80073ea:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80073ee:	bd10      	pop	{r4, pc}
 80073f0:	f7ff fe18 	bl	8007024 <configuration_is_valid.part.0>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d1f8      	bne.n	80073ea <acc_base_configuration_integrator_ramp_up_get+0x6>
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	bf00      	nop

080073fc <acc_base_configuration_integrator_ramp_up_set>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	460d      	mov	r5, r1
 8007400:	4604      	mov	r4, r0
 8007402:	b110      	cbz	r0, 800740a <acc_base_configuration_integrator_ramp_up_set+0xe>
 8007404:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8007408:	bd38      	pop	{r3, r4, r5, pc}
 800740a:	f7ff fe0b 	bl	8007024 <configuration_is_valid.part.0>
 800740e:	2800      	cmp	r0, #0
 8007410:	d1f8      	bne.n	8007404 <acc_base_configuration_integrator_ramp_up_set+0x8>
 8007412:	bd38      	pop	{r3, r4, r5, pc}

08007414 <acc_base_configuration_sweep_type_debug_set>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	460d      	mov	r5, r1
 8007418:	4604      	mov	r4, r0
 800741a:	b110      	cbz	r0, 8007422 <acc_base_configuration_sweep_type_debug_set+0xe>
 800741c:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8007420:	bd38      	pop	{r3, r4, r5, pc}
 8007422:	f7ff fdff 	bl	8007024 <configuration_is_valid.part.0>
 8007426:	2800      	cmp	r0, #0
 8007428:	d1f8      	bne.n	800741c <acc_base_configuration_sweep_type_debug_set+0x8>
 800742a:	bd38      	pop	{r3, r4, r5, pc}

0800742c <acc_base_configuration_sweep_type_debug_get>:
 800742c:	b510      	push	{r4, lr}
 800742e:	4604      	mov	r4, r0
 8007430:	b110      	cbz	r0, 8007438 <acc_base_configuration_sweep_type_debug_get+0xc>
 8007432:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 8007436:	bd10      	pop	{r4, pc}
 8007438:	f7ff fdf4 	bl	8007024 <configuration_is_valid.part.0>
 800743c:	2800      	cmp	r0, #0
 800743e:	d1f8      	bne.n	8007432 <acc_base_configuration_sweep_type_debug_get+0x6>
 8007440:	bd10      	pop	{r4, pc}
 8007442:	bf00      	nop

08007444 <acc_base_configuration_use_point_range_set>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	460d      	mov	r5, r1
 8007448:	4604      	mov	r4, r0
 800744a:	b110      	cbz	r0, 8007452 <acc_base_configuration_use_point_range_set+0xe>
 800744c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8007450:	bd38      	pop	{r3, r4, r5, pc}
 8007452:	f7ff fde7 	bl	8007024 <configuration_is_valid.part.0>
 8007456:	2800      	cmp	r0, #0
 8007458:	d1f8      	bne.n	800744c <acc_base_configuration_use_point_range_set+0x8>
 800745a:	bd38      	pop	{r3, r4, r5, pc}

0800745c <acc_base_configuration_use_point_range_get>:
 800745c:	b510      	push	{r4, lr}
 800745e:	4604      	mov	r4, r0
 8007460:	b110      	cbz	r0, 8007468 <acc_base_configuration_use_point_range_get+0xc>
 8007462:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8007466:	bd10      	pop	{r4, pc}
 8007468:	f7ff fddc 	bl	8007024 <configuration_is_valid.part.0>
 800746c:	2800      	cmp	r0, #0
 800746e:	d1f8      	bne.n	8007462 <acc_base_configuration_use_point_range_get+0x6>
 8007470:	bd10      	pop	{r4, pc}
 8007472:	bf00      	nop

08007474 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	460d      	mov	r5, r1
 8007478:	4604      	mov	r4, r0
 800747a:	b110      	cbz	r0, 8007482 <acc_base_configuration_use_fast_dll_refresh_routine_set+0xe>
 800747c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	f7ff fdcf 	bl	8007024 <configuration_is_valid.part.0>
 8007486:	2800      	cmp	r0, #0
 8007488:	d1f8      	bne.n	800747c <acc_base_configuration_use_fast_dll_refresh_routine_set+0x8>
 800748a:	bd38      	pop	{r3, r4, r5, pc}

0800748c <acc_base_configuration_staggered_vga_stabilization_time_set>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	460d      	mov	r5, r1
 8007490:	4604      	mov	r4, r0
 8007492:	b110      	cbz	r0, 800749a <acc_base_configuration_staggered_vga_stabilization_time_set+0xe>
 8007494:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	f7ff fdc3 	bl	8007024 <configuration_is_valid.part.0>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d1f8      	bne.n	8007494 <acc_base_configuration_staggered_vga_stabilization_time_set+0x8>
 80074a2:	bd38      	pop	{r3, r4, r5, pc}

080074a4 <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	4604      	mov	r4, r0
 80074a8:	b110      	cbz	r0, 80074b0 <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xc>
 80074aa:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 80074ae:	bd10      	pop	{r4, pc}
 80074b0:	f7ff fdb8 	bl	8007024 <configuration_is_valid.part.0>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d1f8      	bne.n	80074aa <acc_base_configuration_bba_reset_clocksync_perturbation_get+0x6>
 80074b8:	bd10      	pop	{r4, pc}
 80074ba:	bf00      	nop

080074bc <acc_base_configuration_bba_linear_resync_perturbation_get>:
 80074bc:	b510      	push	{r4, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	b110      	cbz	r0, 80074c8 <acc_base_configuration_bba_linear_resync_perturbation_get+0xc>
 80074c2:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 80074c6:	bd10      	pop	{r4, pc}
 80074c8:	f7ff fdac 	bl	8007024 <configuration_is_valid.part.0>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d1f8      	bne.n	80074c2 <acc_base_configuration_bba_linear_resync_perturbation_get+0x6>
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	bf00      	nop

080074d4 <acc_base_configuration_bba_fast_refresh_disable_get>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	4604      	mov	r4, r0
 80074d8:	b110      	cbz	r0, 80074e0 <acc_base_configuration_bba_fast_refresh_disable_get+0xc>
 80074da:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	f7ff fda0 	bl	8007024 <configuration_is_valid.part.0>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d1f8      	bne.n	80074da <acc_base_configuration_bba_fast_refresh_disable_get+0x6>
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	bf00      	nop

080074ec <acc_base_configuration_ignore_range_limits_get>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	4604      	mov	r4, r0
 80074f0:	b110      	cbz	r0, 80074f8 <acc_base_configuration_ignore_range_limits_get+0xc>
 80074f2:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 80074f6:	bd10      	pop	{r4, pc}
 80074f8:	f7ff fd94 	bl	8007024 <configuration_is_valid.part.0>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d1f8      	bne.n	80074f2 <acc_base_configuration_ignore_range_limits_get+0x6>
 8007500:	bd10      	pop	{r4, pc}
 8007502:	bf00      	nop

08007504 <acc_base_configuration_downsampling_factor_get>:
 8007504:	b510      	push	{r4, lr}
 8007506:	4604      	mov	r4, r0
 8007508:	b110      	cbz	r0, 8007510 <acc_base_configuration_downsampling_factor_get+0xc>
 800750a:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 800750e:	bd10      	pop	{r4, pc}
 8007510:	f7ff fd88 	bl	8007024 <configuration_is_valid.part.0>
 8007514:	2800      	cmp	r0, #0
 8007516:	d1f8      	bne.n	800750a <acc_base_configuration_downsampling_factor_get+0x6>
 8007518:	bd10      	pop	{r4, pc}
 800751a:	bf00      	nop

0800751c <acc_base_configuration_downsampling_factor_set>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	460d      	mov	r5, r1
 8007520:	4604      	mov	r4, r0
 8007522:	b110      	cbz	r0, 800752a <acc_base_configuration_downsampling_factor_set+0xe>
 8007524:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 8007528:	bd38      	pop	{r3, r4, r5, pc}
 800752a:	f7ff fd7b 	bl	8007024 <configuration_is_valid.part.0>
 800752e:	2800      	cmp	r0, #0
 8007530:	d1f8      	bne.n	8007524 <acc_base_configuration_downsampling_factor_set+0x8>
 8007532:	bd38      	pop	{r3, r4, r5, pc}

08007534 <acc_base_configuration_noise_level_normalization_get>:
 8007534:	b510      	push	{r4, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	b110      	cbz	r0, 8007540 <acc_base_configuration_noise_level_normalization_get+0xc>
 800753a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800753e:	bd10      	pop	{r4, pc}
 8007540:	f7ff fd70 	bl	8007024 <configuration_is_valid.part.0>
 8007544:	2800      	cmp	r0, #0
 8007546:	d1f8      	bne.n	800753a <acc_base_configuration_noise_level_normalization_get+0x6>
 8007548:	bd10      	pop	{r4, pc}
 800754a:	bf00      	nop

0800754c <acc_base_configuration_noise_level_normalization_set>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	460d      	mov	r5, r1
 8007550:	4604      	mov	r4, r0
 8007552:	b110      	cbz	r0, 800755a <acc_base_configuration_noise_level_normalization_set+0xe>
 8007554:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8007558:	bd38      	pop	{r3, r4, r5, pc}
 800755a:	f7ff fd63 	bl	8007024 <configuration_is_valid.part.0>
 800755e:	2800      	cmp	r0, #0
 8007560:	d1f8      	bne.n	8007554 <acc_base_configuration_noise_level_normalization_set+0x8>
 8007562:	bd38      	pop	{r3, r4, r5, pc}

08007564 <acc_base_configuration_noise_deviation_override_get>:
 8007564:	b510      	push	{r4, lr}
 8007566:	4604      	mov	r4, r0
 8007568:	b110      	cbz	r0, 8007570 <acc_base_configuration_noise_deviation_override_get+0xc>
 800756a:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 800756e:	bd10      	pop	{r4, pc}
 8007570:	f7ff fd58 	bl	8007024 <configuration_is_valid.part.0>
 8007574:	2800      	cmp	r0, #0
 8007576:	d1f8      	bne.n	800756a <acc_base_configuration_noise_deviation_override_get+0x6>
 8007578:	bd10      	pop	{r4, pc}
 800757a:	bf00      	nop

0800757c <acc_base_configuration_asynchronous_measurement_get>:
 800757c:	b510      	push	{r4, lr}
 800757e:	4604      	mov	r4, r0
 8007580:	b110      	cbz	r0, 8007588 <acc_base_configuration_asynchronous_measurement_get+0xc>
 8007582:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 8007586:	bd10      	pop	{r4, pc}
 8007588:	f7ff fd4c 	bl	8007024 <configuration_is_valid.part.0>
 800758c:	2800      	cmp	r0, #0
 800758e:	d1f8      	bne.n	8007582 <acc_base_configuration_asynchronous_measurement_get+0x6>
 8007590:	bd10      	pop	{r4, pc}
 8007592:	bf00      	nop

08007594 <acc_base_configuration_asynchronous_measurement_set>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	460d      	mov	r5, r1
 8007598:	4604      	mov	r4, r0
 800759a:	b110      	cbz	r0, 80075a2 <acc_base_configuration_asynchronous_measurement_set+0xe>
 800759c:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 80075a0:	bd38      	pop	{r3, r4, r5, pc}
 80075a2:	f7ff fd3f 	bl	8007024 <configuration_is_valid.part.0>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d1f8      	bne.n	800759c <acc_base_configuration_asynchronous_measurement_set+0x8>
 80075aa:	bd38      	pop	{r3, r4, r5, pc}

080075ac <acc_base_configuration_min_pipeline_memory_size_get>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	4604      	mov	r4, r0
 80075b0:	b110      	cbz	r0, 80075b8 <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 80075b2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80075b6:	bd10      	pop	{r4, pc}
 80075b8:	f7ff fd34 	bl	8007024 <configuration_is_valid.part.0>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d1f8      	bne.n	80075b2 <acc_base_configuration_min_pipeline_memory_size_get+0x6>
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	bf00      	nop

080075c4 <acc_base_configuration_min_pipeline_memory_size_set>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	460d      	mov	r5, r1
 80075c8:	4604      	mov	r4, r0
 80075ca:	b110      	cbz	r0, 80075d2 <acc_base_configuration_min_pipeline_memory_size_set+0xe>
 80075cc:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80075d0:	bd38      	pop	{r3, r4, r5, pc}
 80075d2:	f7ff fd27 	bl	8007024 <configuration_is_valid.part.0>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d1f8      	bne.n	80075cc <acc_base_configuration_min_pipeline_memory_size_set+0x8>
 80075da:	bd38      	pop	{r3, r4, r5, pc}

080075dc <acc_base_configuration_maximize_signal_attenuation_get>:
 80075dc:	b510      	push	{r4, lr}
 80075de:	4604      	mov	r4, r0
 80075e0:	b110      	cbz	r0, 80075e8 <acc_base_configuration_maximize_signal_attenuation_get+0xc>
 80075e2:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 80075e6:	bd10      	pop	{r4, pc}
 80075e8:	f7ff fd1c 	bl	8007024 <configuration_is_valid.part.0>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d1f8      	bne.n	80075e2 <acc_base_configuration_maximize_signal_attenuation_get+0x6>
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	bf00      	nop

080075f4 <acc_base_configuration_maximize_signal_attenuation_set>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	460d      	mov	r5, r1
 80075f8:	4604      	mov	r4, r0
 80075fa:	b110      	cbz	r0, 8007602 <acc_base_configuration_maximize_signal_attenuation_set+0xe>
 80075fc:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 8007600:	bd38      	pop	{r3, r4, r5, pc}
 8007602:	f7ff fd0f 	bl	8007024 <configuration_is_valid.part.0>
 8007606:	2800      	cmp	r0, #0
 8007608:	d1f8      	bne.n	80075fc <acc_base_configuration_maximize_signal_attenuation_set+0x8>
 800760a:	bd38      	pop	{r3, r4, r5, pc}

0800760c <acc_base_configuration_cca_get>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	460e      	mov	r6, r1
 8007610:	4615      	mov	r5, r2
 8007612:	4604      	mov	r4, r0
 8007614:	b150      	cbz	r0, 800762c <acc_base_configuration_cca_get+0x20>
 8007616:	b116      	cbz	r6, 800761e <acc_base_configuration_cca_get+0x12>
 8007618:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800761c:	7033      	strb	r3, [r6, #0]
 800761e:	b115      	cbz	r5, 8007626 <acc_base_configuration_cca_get+0x1a>
 8007620:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007624:	802b      	strh	r3, [r5, #0]
 8007626:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 800762a:	bd70      	pop	{r4, r5, r6, pc}
 800762c:	f7ff fcfa 	bl	8007024 <configuration_is_valid.part.0>
 8007630:	2800      	cmp	r0, #0
 8007632:	d1f0      	bne.n	8007616 <acc_base_configuration_cca_get+0xa>
 8007634:	bd70      	pop	{r4, r5, r6, pc}
 8007636:	bf00      	nop

08007638 <acc_base_configuration_cca_set>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	460d      	mov	r5, r1
 800763c:	4616      	mov	r6, r2
 800763e:	461f      	mov	r7, r3
 8007640:	4604      	mov	r4, r0
 8007642:	b130      	cbz	r0, 8007652 <acc_base_configuration_cca_set+0x1a>
 8007644:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
 8007648:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 800764c:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8007650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007652:	f7ff fce7 	bl	8007024 <configuration_is_valid.part.0>
 8007656:	2800      	cmp	r0, #0
 8007658:	d1f4      	bne.n	8007644 <acc_base_configuration_cca_set+0xc>
 800765a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800765c <acc_base_configuration_mur_set>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	460d      	mov	r5, r1
 8007660:	4604      	mov	r4, r0
 8007662:	b110      	cbz	r0, 800766a <acc_base_configuration_mur_set+0xe>
 8007664:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8007668:	bd38      	pop	{r3, r4, r5, pc}
 800766a:	f7ff fcdb 	bl	8007024 <configuration_is_valid.part.0>
 800766e:	2800      	cmp	r0, #0
 8007670:	d1f8      	bne.n	8007664 <acc_base_configuration_mur_set+0x8>
 8007672:	bd38      	pop	{r3, r4, r5, pc}

08007674 <acc_base_configuration_print>:
 8007674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	b08a      	sub	sp, #40	; 0x28
 800767a:	4604      	mov	r4, r0
 800767c:	f7ff fc5c 	bl	8006f38 <acc_rss_integration_log_level>
 8007680:	2801      	cmp	r0, #1
 8007682:	d92e      	bls.n	80076e2 <acc_base_configuration_print+0x6e>
 8007684:	4b56      	ldr	r3, [pc, #344]	; (80077e0 <acc_base_configuration_print+0x16c>)
 8007686:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007688:	2c00      	cmp	r4, #0
 800768a:	d036      	beq.n	80076fa <acc_base_configuration_print+0x86>
 800768c:	68e3      	ldr	r3, [r4, #12]
 800768e:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 8007692:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
 8007694:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
 8007698:	f8b4 e042 	ldrh.w	lr, [r4, #66]	; 0x42
 800769c:	f8b4 8044 	ldrh.w	r8, [r4, #68]	; 0x44
 80076a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80076a2:	2a04      	cmp	r2, #4
 80076a4:	d920      	bls.n	80076e8 <acc_base_configuration_print+0x74>
 80076a6:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 80076aa:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80077e4 <acc_base_configuration_print+0x170>
 80076ae:	b311      	cbz	r1, 80076f6 <acc_base_configuration_print+0x82>
 80076b0:	4a4c      	ldr	r2, [pc, #304]	; (80077e4 <acc_base_configuration_print+0x170>)
 80076b2:	484d      	ldr	r0, [pc, #308]	; (80077e8 <acc_base_configuration_print+0x174>)
 80076b4:	2901      	cmp	r1, #1
 80076b6:	bf08      	it	eq
 80076b8:	4602      	moveq	r2, r0
 80076ba:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 80076be:	f8b4 a05a 	ldrh.w	sl, [r4, #90]	; 0x5a
 80076c2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80076c6:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80076ca:	e9cd a008 	strd	sl, r0, [sp, #32]
 80076ce:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80076d2:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80076d6:	e9cd 6700 	strd	r6, r7, [sp]
 80076da:	4a44      	ldr	r2, [pc, #272]	; (80077ec <acc_base_configuration_print+0x178>)
 80076dc:	4944      	ldr	r1, [pc, #272]	; (80077f0 <acc_base_configuration_print+0x17c>)
 80076de:	2002      	movs	r0, #2
 80076e0:	47a8      	blx	r5
 80076e2:	b00a      	add	sp, #40	; 0x28
 80076e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e8:	4942      	ldr	r1, [pc, #264]	; (80077f4 <acc_base_configuration_print+0x180>)
 80076ea:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]
 80076ee:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 80076f2:	2900      	cmp	r1, #0
 80076f4:	d1dc      	bne.n	80076b0 <acc_base_configuration_print+0x3c>
 80076f6:	4a40      	ldr	r2, [pc, #256]	; (80077f8 <acc_base_configuration_print+0x184>)
 80076f8:	e7df      	b.n	80076ba <acc_base_configuration_print+0x46>
 80076fa:	f7ff fc93 	bl	8007024 <configuration_is_valid.part.0>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d1c4      	bne.n	800768c <acc_base_configuration_print+0x18>
 8007702:	f7ff fc8f 	bl	8007024 <configuration_is_valid.part.0>
 8007706:	bb68      	cbnz	r0, 8007764 <acc_base_configuration_print+0xf0>
 8007708:	f7ff fc8c 	bl	8007024 <configuration_is_valid.part.0>
 800770c:	2800      	cmp	r0, #0
 800770e:	d164      	bne.n	80077da <acc_base_configuration_print+0x166>
 8007710:	f7ff fc88 	bl	8007024 <configuration_is_valid.part.0>
 8007714:	2800      	cmp	r0, #0
 8007716:	d15c      	bne.n	80077d2 <acc_base_configuration_print+0x15e>
 8007718:	f7ff fc84 	bl	8007024 <configuration_is_valid.part.0>
 800771c:	2800      	cmp	r0, #0
 800771e:	d153      	bne.n	80077c8 <acc_base_configuration_print+0x154>
 8007720:	f7ff fc80 	bl	8007024 <configuration_is_valid.part.0>
 8007724:	2800      	cmp	r0, #0
 8007726:	d149      	bne.n	80077bc <acc_base_configuration_print+0x148>
 8007728:	f7ff fc7c 	bl	8007024 <configuration_is_valid.part.0>
 800772c:	2800      	cmp	r0, #0
 800772e:	d13e      	bne.n	80077ae <acc_base_configuration_print+0x13a>
 8007730:	f7ff fc78 	bl	8007024 <configuration_is_valid.part.0>
 8007734:	bbb8      	cbnz	r0, 80077a6 <acc_base_configuration_print+0x132>
 8007736:	f7ff fc75 	bl	8007024 <configuration_is_valid.part.0>
 800773a:	4606      	mov	r6, r0
 800773c:	bb48      	cbnz	r0, 8007792 <acc_base_configuration_print+0x11e>
 800773e:	f7ff fc71 	bl	8007024 <configuration_is_valid.part.0>
 8007742:	4607      	mov	r7, r0
 8007744:	b9d8      	cbnz	r0, 800777e <acc_base_configuration_print+0x10a>
 8007746:	f7ff fc6d 	bl	8007024 <configuration_is_valid.part.0>
 800774a:	b968      	cbnz	r0, 8007768 <acc_base_configuration_print+0xf4>
 800774c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80077fc <acc_base_configuration_print+0x188>
 8007750:	4a29      	ldr	r2, [pc, #164]	; (80077f8 <acc_base_configuration_print+0x184>)
 8007752:	4603      	mov	r3, r0
 8007754:	4682      	mov	sl, r0
 8007756:	4601      	mov	r1, r0
 8007758:	4680      	mov	r8, r0
 800775a:	4686      	mov	lr, r0
 800775c:	4684      	mov	ip, r0
 800775e:	4607      	mov	r7, r0
 8007760:	4606      	mov	r6, r0
 8007762:	e7b0      	b.n	80076c6 <acc_base_configuration_print+0x52>
 8007764:	4623      	mov	r3, r4
 8007766:	e792      	b.n	800768e <acc_base_configuration_print+0x1a>
 8007768:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80077fc <acc_base_configuration_print+0x188>
 800776c:	4a22      	ldr	r2, [pc, #136]	; (80077f8 <acc_base_configuration_print+0x184>)
 800776e:	463b      	mov	r3, r7
 8007770:	46ba      	mov	sl, r7
 8007772:	4639      	mov	r1, r7
 8007774:	46b8      	mov	r8, r7
 8007776:	46be      	mov	lr, r7
 8007778:	46bc      	mov	ip, r7
 800777a:	463e      	mov	r6, r7
 800777c:	e7a1      	b.n	80076c2 <acc_base_configuration_print+0x4e>
 800777e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80077fc <acc_base_configuration_print+0x188>
 8007782:	4a1d      	ldr	r2, [pc, #116]	; (80077f8 <acc_base_configuration_print+0x184>)
 8007784:	4633      	mov	r3, r6
 8007786:	4631      	mov	r1, r6
 8007788:	46b0      	mov	r8, r6
 800778a:	46b6      	mov	lr, r6
 800778c:	46b4      	mov	ip, r6
 800778e:	4637      	mov	r7, r6
 8007790:	e795      	b.n	80076be <acc_base_configuration_print+0x4a>
 8007792:	2300      	movs	r3, #0
 8007794:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80077fc <acc_base_configuration_print+0x188>
 8007798:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <acc_base_configuration_print+0x184>)
 800779a:	4698      	mov	r8, r3
 800779c:	469e      	mov	lr, r3
 800779e:	469c      	mov	ip, r3
 80077a0:	461f      	mov	r7, r3
 80077a2:	461e      	mov	r6, r3
 80077a4:	e789      	b.n	80076ba <acc_base_configuration_print+0x46>
 80077a6:	2300      	movs	r3, #0
 80077a8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80077ac:	deff      	udf	#255	; 0xff
 80077ae:	4623      	mov	r3, r4
 80077b0:	46a0      	mov	r8, r4
 80077b2:	46a6      	mov	lr, r4
 80077b4:	46a4      	mov	ip, r4
 80077b6:	4627      	mov	r7, r4
 80077b8:	4626      	mov	r6, r4
 80077ba:	e771      	b.n	80076a0 <acc_base_configuration_print+0x2c>
 80077bc:	4623      	mov	r3, r4
 80077be:	46a6      	mov	lr, r4
 80077c0:	46a4      	mov	ip, r4
 80077c2:	4627      	mov	r7, r4
 80077c4:	4626      	mov	r6, r4
 80077c6:	e769      	b.n	800769c <acc_base_configuration_print+0x28>
 80077c8:	4623      	mov	r3, r4
 80077ca:	46a4      	mov	ip, r4
 80077cc:	4627      	mov	r7, r4
 80077ce:	4626      	mov	r6, r4
 80077d0:	e762      	b.n	8007698 <acc_base_configuration_print+0x24>
 80077d2:	4623      	mov	r3, r4
 80077d4:	4627      	mov	r7, r4
 80077d6:	4626      	mov	r6, r4
 80077d8:	e75c      	b.n	8007694 <acc_base_configuration_print+0x20>
 80077da:	4623      	mov	r3, r4
 80077dc:	4626      	mov	r6, r4
 80077de:	e758      	b.n	8007692 <acc_base_configuration_print+0x1e>
 80077e0:	20000640 	.word	0x20000640
 80077e4:	08018e44 	.word	0x08018e44
 80077e8:	08015e50 	.word	0x08015e50
 80077ec:	08015e58 	.word	0x08015e58
 80077f0:	08015e38 	.word	0x08015e38
 80077f4:	08016068 	.word	0x08016068
 80077f8:	08015e4c 	.word	0x08015e4c
 80077fc:	08015e54 	.word	0x08015e54

08007800 <acc_base_configuration_check>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	2800      	cmp	r0, #0
 8007806:	d038      	beq.n	800787a <acc_base_configuration_check+0x7a>
 8007808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800780a:	2b04      	cmp	r3, #4
 800780c:	d819      	bhi.n	8007842 <acc_base_configuration_check+0x42>
 800780e:	d024      	beq.n	800785a <acc_base_configuration_check+0x5a>
 8007810:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007812:	2b16      	cmp	r3, #22
 8007814:	d81e      	bhi.n	8007854 <acc_base_configuration_check+0x54>
 8007816:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8007818:	3b01      	subs	r3, #1
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b3e      	cmp	r3, #62	; 0x3e
 800781e:	d835      	bhi.n	800788c <acc_base_configuration_check+0x8c>
 8007820:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007822:	7923      	ldrb	r3, [r4, #4]
 8007824:	b31e      	cbz	r6, 800786e <acc_base_configuration_check+0x6e>
 8007826:	2b03      	cmp	r3, #3
 8007828:	d033      	beq.n	8007892 <acc_base_configuration_check+0x92>
 800782a:	f036 0304 	bics.w	r3, r6, #4
 800782e:	d020      	beq.n	8007872 <acc_base_configuration_check+0x72>
 8007830:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8007834:	2b06      	cmp	r3, #6
 8007836:	d026      	beq.n	8007886 <acc_base_configuration_check+0x86>
 8007838:	2b09      	cmp	r3, #9
 800783a:	d024      	beq.n	8007886 <acc_base_configuration_check+0x86>
 800783c:	4b1f      	ldr	r3, [pc, #124]	; (80078bc <acc_base_configuration_check+0xbc>)
 800783e:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <acc_base_configuration_check+0xc0>)
 8007840:	e001      	b.n	8007846 <acc_base_configuration_check+0x46>
 8007842:	4b1e      	ldr	r3, [pc, #120]	; (80078bc <acc_base_configuration_check+0xbc>)
 8007844:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <acc_base_configuration_check+0xc4>)
 8007846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007848:	491f      	ldr	r1, [pc, #124]	; (80078c8 <acc_base_configuration_check+0xc8>)
 800784a:	2000      	movs	r0, #0
 800784c:	4798      	blx	r3
 800784e:	2500      	movs	r5, #0
 8007850:	4628      	mov	r0, r5
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	4b19      	ldr	r3, [pc, #100]	; (80078bc <acc_base_configuration_check+0xbc>)
 8007856:	4a1d      	ldr	r2, [pc, #116]	; (80078cc <acc_base_configuration_check+0xcc>)
 8007858:	e7f5      	b.n	8007846 <acc_base_configuration_check+0x46>
 800785a:	f7ff fadd 	bl	8006e18 <acc_rss_integration_is_hibernate_capable>
 800785e:	4605      	mov	r5, r0
 8007860:	b310      	cbz	r0, 80078a8 <acc_base_configuration_check+0xa8>
 8007862:	7923      	ldrb	r3, [r4, #4]
 8007864:	2b03      	cmp	r3, #3
 8007866:	d1d3      	bne.n	8007810 <acc_base_configuration_check+0x10>
 8007868:	4b14      	ldr	r3, [pc, #80]	; (80078bc <acc_base_configuration_check+0xbc>)
 800786a:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <acc_base_configuration_check+0xd0>)
 800786c:	e7eb      	b.n	8007846 <acc_base_configuration_check+0x46>
 800786e:	2b03      	cmp	r3, #3
 8007870:	d020      	beq.n	80078b4 <acc_base_configuration_check+0xb4>
 8007872:	2301      	movs	r3, #1
 8007874:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 8007878:	e7da      	b.n	8007830 <acc_base_configuration_check+0x30>
 800787a:	f7ff fbd3 	bl	8007024 <configuration_is_valid.part.0>
 800787e:	4605      	mov	r5, r0
 8007880:	2800      	cmp	r0, #0
 8007882:	d1c1      	bne.n	8007808 <acc_base_configuration_check+0x8>
 8007884:	e7e4      	b.n	8007850 <acc_base_configuration_check+0x50>
 8007886:	2501      	movs	r5, #1
 8007888:	4628      	mov	r0, r5
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <acc_base_configuration_check+0xbc>)
 800788e:	4a11      	ldr	r2, [pc, #68]	; (80078d4 <acc_base_configuration_check+0xd4>)
 8007890:	e7d9      	b.n	8007846 <acc_base_configuration_check+0x46>
 8007892:	f894 504e 	ldrb.w	r5, [r4, #78]	; 0x4e
 8007896:	2d00      	cmp	r5, #0
 8007898:	d1c7      	bne.n	800782a <acc_base_configuration_check+0x2a>
 800789a:	4b08      	ldr	r3, [pc, #32]	; (80078bc <acc_base_configuration_check+0xbc>)
 800789c:	4a0e      	ldr	r2, [pc, #56]	; (80078d8 <acc_base_configuration_check+0xd8>)
 800789e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a0:	4909      	ldr	r1, [pc, #36]	; (80078c8 <acc_base_configuration_check+0xc8>)
 80078a2:	4628      	mov	r0, r5
 80078a4:	4798      	blx	r3
 80078a6:	e7d3      	b.n	8007850 <acc_base_configuration_check+0x50>
 80078a8:	4b04      	ldr	r3, [pc, #16]	; (80078bc <acc_base_configuration_check+0xbc>)
 80078aa:	4a0c      	ldr	r2, [pc, #48]	; (80078dc <acc_base_configuration_check+0xdc>)
 80078ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ae:	4906      	ldr	r1, [pc, #24]	; (80078c8 <acc_base_configuration_check+0xc8>)
 80078b0:	4798      	blx	r3
 80078b2:	e7cd      	b.n	8007850 <acc_base_configuration_check+0x50>
 80078b4:	4b01      	ldr	r3, [pc, #4]	; (80078bc <acc_base_configuration_check+0xbc>)
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <acc_base_configuration_check+0xe0>)
 80078b8:	e7c5      	b.n	8007846 <acc_base_configuration_check+0x46>
 80078ba:	bf00      	nop
 80078bc:	20000640 	.word	0x20000640
 80078c0:	08016030 	.word	0x08016030
 80078c4:	08015e90 	.word	0x08015e90
 80078c8:	08015e38 	.word	0x08015e38
 80078cc:	08015f2c 	.word	0x08015f2c
 80078d0:	08015ee8 	.word	0x08015ee8
 80078d4:	08015f60 	.word	0x08015f60
 80078d8:	08015ff0 	.word	0x08015ff0
 80078dc:	08015ea8 	.word	0x08015ea8
 80078e0:	08015fb4 	.word	0x08015fb4

080078e4 <inject_data>:
 80078e4:	3034      	adds	r0, #52	; 0x34
 80078e6:	f003 bfa9 	b.w	800b83c <acc_element_source_adc_inject_data>
 80078ea:	bf00      	nop

080078ec <disassemble>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	6805      	ldr	r5, [r0, #0]
 80078f0:	4604      	mov	r4, r0
 80078f2:	b155      	cbz	r5, 800790a <disassemble+0x1e>
 80078f4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80078f8:	f003 ff50 	bl	800b79c <acc_element_source_adc_release>
 80078fc:	f8d5 03a4 	ldr.w	r0, [r5, #932]	; 0x3a4
 8007900:	f7ff fb02 	bl	8006f08 <acc_rss_integration_mem_free>
 8007904:	4628      	mov	r0, r5
 8007906:	f7ff faff 	bl	8006f08 <acc_rss_integration_mem_free>
 800790a:	4620      	mov	r0, r4
 800790c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007910:	f7ff bafa 	b.w	8006f08 <acc_rss_integration_mem_free>

08007914 <produce>:
 8007914:	b510      	push	{r4, lr}
 8007916:	4604      	mov	r4, r0
 8007918:	3034      	adds	r0, #52	; 0x34
 800791a:	f003 ff4d 	bl	800b7b8 <acc_element_source_adc_produce>
 800791e:	b960      	cbnz	r0, 800793a <produce+0x26>
 8007920:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8007924:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 8007928:	6118      	str	r0, [r3, #16]
 800792a:	2101      	movs	r1, #1
 800792c:	7198      	strb	r0, [r3, #6]
 800792e:	7159      	strb	r1, [r3, #5]
 8007930:	f504 7051 	add.w	r0, r4, #836	; 0x344
 8007934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007938:	4710      	bx	r2
 800793a:	bd10      	pop	{r4, pc}

0800793c <acc_pipeline_envelope_assemble>:
 800793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	ed2d 8b08 	vpush	{d8-d11}
 8007944:	460e      	mov	r6, r1
 8007946:	b08b      	sub	sp, #44	; 0x2c
 8007948:	461c      	mov	r4, r3
 800794a:	2110      	movs	r1, #16
 800794c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007950:	4681      	mov	r9, r0
 8007952:	4615      	mov	r5, r2
 8007954:	2001      	movs	r0, #1
 8007956:	4ae4      	ldr	r2, [pc, #912]	; (8007ce8 <acc_pipeline_envelope_assemble+0x3ac>)
 8007958:	e9cd 6403 	strd	r6, r4, [sp, #12]
 800795c:	f7ff fab4 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 8007960:	4ae1      	ldr	r2, [pc, #900]	; (8007ce8 <acc_pipeline_envelope_assemble+0x3ac>)
 8007962:	4606      	mov	r6, r0
 8007964:	f240 1301 	movw	r3, #257	; 0x101
 8007968:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 800796c:	2001      	movs	r0, #1
 800796e:	f7ff faab 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 8007972:	4604      	mov	r4, r0
 8007974:	2e00      	cmp	r6, #0
 8007976:	f000 8208 	beq.w	8007d8a <acc_pipeline_envelope_assemble+0x44e>
 800797a:	2800      	cmp	r0, #0
 800797c:	f000 8205 	beq.w	8007d8a <acc_pipeline_envelope_assemble+0x44e>
 8007980:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8007984:	f500 7262 	add.w	r2, r0, #904	; 0x388
 8007988:	f100 0814 	add.w	r8, r0, #20
 800798c:	6030      	str	r0, [r6, #0]
 800798e:	4649      	mov	r1, r9
 8007990:	4618      	mov	r0, r3
 8007992:	9200      	str	r2, [sp, #0]
 8007994:	ee08 3a10 	vmov	s16, r3
 8007998:	462a      	mov	r2, r5
 800799a:	4643      	mov	r3, r8
 800799c:	f003 fede 	bl	800b75c <acc_element_source_adc_init_radar_engine>
 80079a0:	4681      	mov	r9, r0
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f000 81aa 	beq.w	8007cfc <acc_pipeline_envelope_assemble+0x3c0>
 80079a8:	2100      	movs	r1, #0
 80079aa:	4628      	mov	r0, r5
 80079ac:	f7ff fc3e 	bl	800722c <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 80079b0:	4683      	mov	fp, r0
 80079b2:	2008      	movs	r0, #8
 80079b4:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 80079b8:	f002 ff1e 	bl	800a7f8 <acc_element_sizeof>
 80079bc:	f8b4 a396 	ldrh.w	sl, [r4, #918]	; 0x396
 80079c0:	f8b4 3392 	ldrh.w	r3, [r4, #914]	; 0x392
 80079c4:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
 80079c8:	4453      	add	r3, sl
 80079ca:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80079ce:	0053      	lsls	r3, r2, #1
 80079d0:	459a      	cmp	sl, r3
 80079d2:	bf38      	it	cc
 80079d4:	469a      	movcc	sl, r3
 80079d6:	fb00 f909 	mul.w	r9, r0, r9
 80079da:	45ca      	cmp	sl, r9
 80079dc:	4628      	mov	r0, r5
 80079de:	bf38      	it	cc
 80079e0:	46ca      	movcc	sl, r9
 80079e2:	f7ff fde3 	bl	80075ac <acc_base_configuration_min_pipeline_memory_size_get>
 80079e6:	4582      	cmp	sl, r0
 80079e8:	bf38      	it	cc
 80079ea:	4682      	movcc	sl, r0
 80079ec:	f8c4 a3a8 	str.w	sl, [r4, #936]	; 0x3a8
 80079f0:	f1bb 0f00 	cmp.w	fp, #0
 80079f4:	d115      	bne.n	8007a22 <acc_pipeline_envelope_assemble+0xe6>
 80079f6:	49bc      	ldr	r1, [pc, #752]	; (8007ce8 <acc_pipeline_envelope_assemble+0x3ac>)
 80079f8:	f240 1285 	movw	r2, #389	; 0x185
 80079fc:	4650      	mov	r0, sl
 80079fe:	f7ff fa3f 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8007a02:	4681      	mov	r9, r0
 8007a04:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f040 8181 	bne.w	8007d10 <acc_pipeline_envelope_assemble+0x3d4>
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f7ff ff6c 	bl	80078ec <disassemble>
 8007a14:	2600      	movs	r6, #0
 8007a16:	4630      	mov	r0, r6
 8007a18:	b00b      	add	sp, #44	; 0x2c
 8007a1a:	ecbd 8b08 	vpop	{d8-d11}
 8007a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a22:	2008      	movs	r0, #8
 8007a24:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8007a28:	f002 fee6 	bl	800a7f8 <acc_element_sizeof>
 8007a2c:	f10a 030a 	add.w	r3, sl, #10
 8007a30:	fb00 3009 	mla	r0, r0, r9, r3
 8007a34:	49ac      	ldr	r1, [pc, #688]	; (8007ce8 <acc_pipeline_envelope_assemble+0x3ac>)
 8007a36:	f240 1285 	movw	r2, #389	; 0x185
 8007a3a:	f7ff fa21 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 8007a3e:	4681      	mov	r9, r0
 8007a40:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d0e2      	beq.n	8007a0e <acc_pipeline_envelope_assemble+0xd2>
 8007a48:	f8b4 138a 	ldrh.w	r1, [r4, #906]	; 0x38a
 8007a4c:	9105      	str	r1, [sp, #20]
 8007a4e:	2008      	movs	r0, #8
 8007a50:	f002 fed2 	bl	800a7f8 <acc_element_sizeof>
 8007a54:	9905      	ldr	r1, [sp, #20]
 8007a56:	f10a 0204 	add.w	r2, sl, #4
 8007a5a:	fb00 9101 	mla	r1, r0, r1, r9
 8007a5e:	444a      	add	r2, r9
 8007a60:	f104 0c06 	add.w	ip, r4, #6
 8007a64:	1de0      	adds	r0, r4, #7
 8007a66:	f104 0310 	add.w	r3, r4, #16
 8007a6a:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8007a6e:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 8007a72:	f104 020c 	add.w	r2, r4, #12
 8007a76:	f104 0c08 	add.w	ip, r4, #8
 8007a7a:	6620      	str	r0, [r4, #96]	; 0x60
 8007a7c:	1d20      	adds	r0, r4, #4
 8007a7e:	e9c4 2c19 	strd	r2, ip, [r4, #100]	; 0x64
 8007a82:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a84:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8007a88:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8007a8c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8007a90:	e9c4 9931 	strd	r9, r9, [r4, #196]	; 0xc4
 8007a94:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 8007a98:	6564      	str	r4, [r4, #84]	; 0x54
 8007a9a:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	4617      	mov	r7, r2
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	f7ff fd46 	bl	8007534 <acc_base_configuration_noise_level_normalization_get>
 8007aa8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8007aac:	9907      	ldr	r1, [sp, #28]
 8007aae:	b118      	cbz	r0, 8007ab8 <acc_pipeline_envelope_assemble+0x17c>
 8007ab0:	e9c4 9941 	strd	r9, r9, [r4, #260]	; 0x104
 8007ab4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8007ab8:	e9c4 9951 	strd	r9, r9, [r4, #324]	; 0x144
 8007abc:	e9c4 9960 	strd	r9, r9, [r4, #384]	; 0x180
 8007ac0:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
 8007ac4:	e9c4 9183 	strd	r9, r1, [r4, #524]	; 0x20c
 8007ac8:	e9c4 1192 	strd	r1, r1, [r4, #584]	; 0x248
 8007acc:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8007ad0:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8007ad4:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
 8007ad8:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 8007adc:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8007ae0:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8007ae4:	f1bb 0f00 	cmp.w	fp, #0
 8007ae8:	d007      	beq.n	8007afa <acc_pipeline_envelope_assemble+0x1be>
 8007aea:	e9c4 12a7 	strd	r1, r2, [r4, #668]	; 0x29c
 8007aee:	eb09 000a 	add.w	r0, r9, sl
 8007af2:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
 8007af6:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 8007afa:	e9c4 29b7 	strd	r2, r9, [r4, #732]	; 0x2dc
 8007afe:	e9c4 99c6 	strd	r9, r9, [r4, #792]	; 0x318
 8007b02:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 8007b06:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8007b0a:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
 8007b0e:	ee18 0a10 	vmov	r0, s16
 8007b12:	f8c4 437c 	str.w	r4, [r4, #892]	; 0x37c
 8007b16:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f003 fe2b 	bl	800b778 <acc_element_source_adc_init>
 8007b22:	4681      	mov	r9, r0
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f000 80e9 	beq.w	8007cfc <acc_pipeline_envelope_assemble+0x3c0>
 8007b2a:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8007b2e:	f104 0a74 	add.w	sl, r4, #116	; 0x74
 8007b32:	461f      	mov	r7, r3
 8007b34:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007cec <acc_pipeline_envelope_assemble+0x3b0>
 8007b38:	2105      	movs	r1, #5
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	ee09 3a90 	vmov	s19, r3
 8007b40:	f002 fea8 	bl	800a894 <acc_element_saturation_check_init>
 8007b44:	4638      	mov	r0, r7
 8007b46:	2200      	movs	r2, #0
 8007b48:	2105      	movs	r1, #5
 8007b4a:	f003 f909 	bl	800ad60 <acc_element_centering_init>
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f7ff fcf0 	bl	8007534 <acc_base_configuration_noise_level_normalization_get>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f040 80fa 	bne.w	8007d4e <acc_pipeline_envelope_assemble+0x412>
 8007b5a:	f504 739a 	add.w	r3, r4, #308	; 0x134
 8007b5e:	4618      	mov	r0, r3
 8007b60:	ee08 3a90 	vmov	s17, r3
 8007b64:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8007b68:	461f      	mov	r7, r3
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	2105      	movs	r1, #5
 8007b6e:	ee0a 3a90 	vmov	s21, r3
 8007b72:	f003 f9fb 	bl	800af6c <acc_element_converter_init>
 8007b76:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8007cec <acc_pipeline_envelope_assemble+0x3b0>
 8007b7a:	ed94 0a08 	vldr	s0, [r4, #32]
 8007b7e:	2108      	movs	r1, #8
 8007b80:	4638      	mov	r0, r7
 8007b82:	f003 fbc1 	bl	800b308 <acc_element_iq_mixer_init>
 8007b86:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 8007b8a:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 8007b8e:	9206      	str	r2, [sp, #24]
 8007b90:	461f      	mov	r7, r3
 8007b92:	4628      	mov	r0, r5
 8007b94:	ee0b 3a10 	vmov	s22, r3
 8007b98:	f8b4 338e 	ldrh.w	r3, [r4, #910]	; 0x38e
 8007b9c:	9305      	str	r3, [sp, #20]
 8007b9e:	f7ff fb23 	bl	80071e8 <acc_base_configuration_phase_compensation_alpha_get>
 8007ba2:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	2108      	movs	r1, #8
 8007baa:	f504 77fe 	add.w	r7, r4, #508	; 0x1fc
 8007bae:	f003 fce3 	bl	800b578 <acc_element_phase_compensation_init>
 8007bb2:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 8007bb6:	2108      	movs	r1, #8
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f003 fa55 	bl	800b068 <acc_element_crop_init>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f7ff fb56 	bl	8007270 <acc_base_configuration_filter_demodulated_data_get>
 8007bc4:	f504 7b0e 	add.w	fp, r4, #568	; 0x238
 8007bc8:	9005      	str	r0, [sp, #20]
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7ff fb66 	bl	800729c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 8007bd0:	2108      	movs	r1, #8
 8007bd2:	9a05      	ldr	r2, [sp, #20]
 8007bd4:	4643      	mov	r3, r8
 8007bd6:	4658      	mov	r0, fp
 8007bd8:	f003 faa8 	bl	800b12c <acc_element_depth_domain_low_pass_filter_init>
 8007bdc:	a909      	add	r1, sp, #36	; 0x24
 8007bde:	4628      	mov	r0, r5
 8007be0:	ee09 7a10 	vmov	s18, r7
 8007be4:	f7ff fb22 	bl	800722c <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f040 80a8 	bne.w	8007d3e <acc_pipeline_envelope_assemble+0x402>
 8007bee:	f504 7933 	add.w	r9, r4, #716	; 0x2cc
 8007bf2:	2108      	movs	r1, #8
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f504 7842 	add.w	r8, r4, #776	; 0x308
 8007bfa:	f003 f84b 	bl	800ac94 <acc_element_abs_init>
 8007bfe:	f504 7351 	add.w	r3, r4, #836	; 0x344
 8007c02:	2202      	movs	r2, #2
 8007c04:	2104      	movs	r1, #4
 8007c06:	4640      	mov	r0, r8
 8007c08:	461f      	mov	r7, r3
 8007c0a:	ee0a 3a10 	vmov	s20, r3
 8007c0e:	f003 f9ad 	bl	800af6c <acc_element_converter_init>
 8007c12:	9a03      	ldr	r2, [sp, #12]
 8007c14:	4638      	mov	r0, r7
 8007c16:	6811      	ldr	r1, [r2, #0]
 8007c18:	f002 feac 	bl	800a974 <acc_element_sink_callback_init>
 8007c1c:	ee18 0a10 	vmov	r0, s16
 8007c20:	4651      	mov	r1, sl
 8007c22:	f002 fdf5 	bl	800a810 <acc_element_connect>
 8007c26:	4650      	mov	r0, sl
 8007c28:	ee19 1a90 	vmov	r1, s19
 8007c2c:	f002 fdf0 	bl	800a810 <acc_element_connect>
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7ff fc7f 	bl	8007534 <acc_base_configuration_noise_level_normalization_get>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d07a      	beq.n	8007d30 <acc_pipeline_envelope_assemble+0x3f4>
 8007c3a:	f104 0af4 	add.w	sl, r4, #244	; 0xf4
 8007c3e:	ee19 0a90 	vmov	r0, s19
 8007c42:	4651      	mov	r1, sl
 8007c44:	f002 fde4 	bl	800a810 <acc_element_connect>
 8007c48:	ee18 1a90 	vmov	r1, s17
 8007c4c:	4650      	mov	r0, sl
 8007c4e:	f002 fddf 	bl	800a810 <acc_element_connect>
 8007c52:	ee18 0a90 	vmov	r0, s17
 8007c56:	ee1a 1a90 	vmov	r1, s21
 8007c5a:	f002 fdd9 	bl	800a810 <acc_element_connect>
 8007c5e:	ee1b 1a10 	vmov	r1, s22
 8007c62:	ee1a 0a90 	vmov	r0, s21
 8007c66:	f002 fdd3 	bl	800a810 <acc_element_connect>
 8007c6a:	ee19 1a10 	vmov	r1, s18
 8007c6e:	ee1b 0a10 	vmov	r0, s22
 8007c72:	f002 fdcd 	bl	800a810 <acc_element_connect>
 8007c76:	ee19 0a10 	vmov	r0, s18
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	f002 fdc8 	bl	800a810 <acc_element_connect>
 8007c80:	4628      	mov	r0, r5
 8007c82:	2100      	movs	r1, #0
 8007c84:	f7ff fad2 	bl	800722c <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d04c      	beq.n	8007d26 <acc_pipeline_envelope_assemble+0x3ea>
 8007c8c:	f504 7523 	add.w	r5, r4, #652	; 0x28c
 8007c90:	4658      	mov	r0, fp
 8007c92:	4629      	mov	r1, r5
 8007c94:	f002 fdbc 	bl	800a810 <acc_element_connect>
 8007c98:	4649      	mov	r1, r9
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f002 fdb8 	bl	800a810 <acc_element_connect>
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	4641      	mov	r1, r8
 8007ca4:	f002 fdb4 	bl	800a810 <acc_element_connect>
 8007ca8:	ee1a 1a10 	vmov	r1, s20
 8007cac:	4640      	mov	r0, r8
 8007cae:	f002 fdaf 	bl	800a810 <acc_element_connect>
 8007cb2:	ee18 0a10 	vmov	r0, s16
 8007cb6:	f003 fd7b 	bl	800b7b0 <acc_element_source_adc_validate>
 8007cba:	4605      	mov	r5, r0
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d055      	beq.n	8007d6c <acc_pipeline_envelope_assemble+0x430>
 8007cc0:	ee18 0a10 	vmov	r0, s16
 8007cc4:	f003 fd70 	bl	800b7a8 <acc_element_source_adc_reset>
 8007cc8:	9804      	ldr	r0, [sp, #16]
 8007cca:	4909      	ldr	r1, [pc, #36]	; (8007cf0 <acc_pipeline_envelope_assemble+0x3b4>)
 8007ccc:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <acc_pipeline_envelope_assemble+0x3b8>)
 8007cce:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <acc_pipeline_envelope_assemble+0x3bc>)
 8007cd0:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	e9c6 1201 	strd	r1, r2, [r6, #4]
 8007cda:	60f3      	str	r3, [r6, #12]
 8007cdc:	b00b      	add	sp, #44	; 0x2c
 8007cde:	ecbd 8b08 	vpop	{d8-d11}
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0801607c 	.word	0x0801607c
 8007cec:	00000000 	.word	0x00000000
 8007cf0:	08007915 	.word	0x08007915
 8007cf4:	080078e5 	.word	0x080078e5
 8007cf8:	080078ed 	.word	0x080078ed
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f7ff fdf5 	bl	80078ec <disassemble>
 8007d02:	464e      	mov	r6, r9
 8007d04:	4630      	mov	r0, r6
 8007d06:	b00b      	add	sp, #44	; 0x2c
 8007d08:	ecbd 8b08 	vpop	{d8-d11}
 8007d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d10:	f8b4 238a 	ldrh.w	r2, [r4, #906]	; 0x38a
 8007d14:	9205      	str	r2, [sp, #20]
 8007d16:	2008      	movs	r0, #8
 8007d18:	f002 fd6e 	bl	800a7f8 <acc_element_sizeof>
 8007d1c:	9a05      	ldr	r2, [sp, #20]
 8007d1e:	fb00 9202 	mla	r2, r0, r2, r9
 8007d22:	4611      	mov	r1, r2
 8007d24:	e69c      	b.n	8007a60 <acc_pipeline_envelope_assemble+0x124>
 8007d26:	4658      	mov	r0, fp
 8007d28:	4649      	mov	r1, r9
 8007d2a:	f002 fd71 	bl	800a810 <acc_element_connect>
 8007d2e:	e7b7      	b.n	8007ca0 <acc_pipeline_envelope_assemble+0x364>
 8007d30:	ee19 0a90 	vmov	r0, s19
 8007d34:	ee18 1a90 	vmov	r1, s17
 8007d38:	f002 fd6a 	bl	800a810 <acc_element_connect>
 8007d3c:	e789      	b.n	8007c52 <acc_pipeline_envelope_assemble+0x316>
 8007d3e:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8007d42:	2108      	movs	r1, #8
 8007d44:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 8007d48:	f003 fce0 	bl	800b70c <acc_element_time_domain_low_pass_filter_init>
 8007d4c:	e74f      	b.n	8007bee <acc_pipeline_envelope_assemble+0x2b2>
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f7ff fc44 	bl	80075dc <acc_base_configuration_maximize_signal_attenuation_get>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007d58:	bf14      	ite	ne
 8007d5a:	231e      	movne	r3, #30
 8007d5c:	f44f 7396 	moveq.w	r3, #300	; 0x12c
 8007d60:	2105      	movs	r1, #5
 8007d62:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 8007d66:	f003 fb5d 	bl	800b424 <acc_element_noise_level_normalization_init>
 8007d6a:	e6f6      	b.n	8007b5a <acc_pipeline_envelope_assemble+0x21e>
 8007d6c:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <acc_pipeline_envelope_assemble+0x468>)
 8007d6e:	4a0e      	ldr	r2, [pc, #56]	; (8007da8 <acc_pipeline_envelope_assemble+0x46c>)
 8007d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d72:	490e      	ldr	r1, [pc, #56]	; (8007dac <acc_pipeline_envelope_assemble+0x470>)
 8007d74:	4798      	blx	r3
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7ff fdb8 	bl	80078ec <disassemble>
 8007d7c:	462e      	mov	r6, r5
 8007d7e:	4630      	mov	r0, r6
 8007d80:	b00b      	add	sp, #44	; 0x2c
 8007d82:	ecbd 8b08 	vpop	{d8-d11}
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7ff f8bc 	bl	8006f08 <acc_rss_integration_mem_free>
 8007d90:	4620      	mov	r0, r4
 8007d92:	f7ff f8b9 	bl	8006f08 <acc_rss_integration_mem_free>
 8007d96:	2600      	movs	r6, #0
 8007d98:	4630      	mov	r0, r6
 8007d9a:	b00b      	add	sp, #44	; 0x2c
 8007d9c:	ecbd 8b08 	vpop	{d8-d11}
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	20000640 	.word	0x20000640
 8007da8:	08016090 	.word	0x08016090
 8007dac:	0801607c 	.word	0x0801607c

08007db0 <destroy>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	4604      	mov	r4, r0
 8007db4:	6940      	ldr	r0, [r0, #20]
 8007db6:	b118      	cbz	r0, 8007dc0 <destroy+0x10>
 8007db8:	f7ff f8a6 	bl	8006f08 <acc_rss_integration_mem_free>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6163      	str	r3, [r4, #20]
 8007dc0:	bd10      	pop	{r4, pc}
 8007dc2:	bf00      	nop

08007dc4 <process_data>:
 8007dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc8:	6944      	ldr	r4, [r0, #20]
 8007dca:	f8b4 70ce 	ldrh.w	r7, [r4, #206]	; 0xce
 8007dce:	b917      	cbnz	r7, 8007dd6 <process_data+0x12>
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd6:	f8b4 c0c8 	ldrh.w	ip, [r4, #200]	; 0xc8
 8007dda:	f8b4 80c4 	ldrh.w	r8, [r4, #196]	; 0xc4
 8007dde:	f8b4 e0cc 	ldrh.w	lr, [r4, #204]	; 0xcc
 8007de2:	461d      	mov	r5, r3
 8007de4:	4616      	mov	r6, r2
 8007de6:	237c      	movs	r3, #124	; 0x7c
 8007de8:	680a      	ldr	r2, [r1, #0]
 8007dea:	fbb3 f3fe 	udiv	r3, r3, lr
 8007dee:	fb03 f30c 	mul.w	r3, r3, ip
 8007df2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8007df6:	eb02 0803 	add.w	r8, r2, r3
 8007dfa:	4642      	mov	r2, r8
 8007dfc:	6801      	ldr	r1, [r0, #0]
 8007dfe:	463b      	mov	r3, r7
 8007e00:	2001      	movs	r0, #1
 8007e02:	f7ff f89f 	bl	8006f44 <acc_probes_execute_uint16>
 8007e06:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	f002 fc80 	bl	800a710 <acc_alg_cca_calculate>
 8007e10:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007e4c <process_data+0x88>
 8007e14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007e16:	ed85 0a01 	vstr	s0, [r5, #4]
 8007e1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e22:	bfcc      	ite	gt
 8007e24:	2201      	movgt	r2, #1
 8007e26:	2200      	movle	r2, #0
 8007e28:	702a      	strb	r2, [r5, #0]
 8007e2a:	b14b      	cbz	r3, 8007e40 <process_data+0x7c>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8007e32:	6833      	ldr	r3, [r6, #0]
 8007e34:	722a      	strb	r2, [r5, #8]
 8007e36:	1a5b      	subs	r3, r3, r1
 8007e38:	6033      	str	r3, [r6, #0]
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e40:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8007e44:	f082 0201 	eor.w	r2, r2, #1
 8007e48:	e7f1      	b.n	8007e2e <process_data+0x6a>
 8007e4a:	bf00      	nop
 8007e4c:	42640000 	.word	0x42640000

08007e50 <transfer_data>:
 8007e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e54:	6944      	ldr	r4, [r0, #20]
 8007e56:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
 8007e5a:	b089      	sub	sp, #36	; 0x24
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	460f      	mov	r7, r1
 8007e60:	4691      	mov	r9, r2
 8007e62:	b90b      	cbnz	r3, 8007e68 <transfer_data+0x18>
 8007e64:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8007e68:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8007e6c:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 8007e70:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
 8007e74:	a902      	add	r1, sp, #8
 8007e76:	4620      	mov	r0, r4
 8007e78:	267c      	movs	r6, #124	; 0x7c
 8007e7a:	fbb6 f3f3 	udiv	r3, r6, r3
 8007e7e:	fb03 2505 	mla	r5, r3, r5, r2
 8007e82:	f006 fa15 	bl	800e2b0 <acc_cpd_linear_sweep_get_info>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	9a02      	ldr	r2, [sp, #8]
 8007e8a:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
 8007e8e:	f8d8 0000 	ldr.w	r0, [r8]
 8007e92:	442a      	add	r2, r5
 8007e94:	4419      	add	r1, r3
 8007e96:	f002 fa33 	bl	800a300 <acc_sensor_protocol_r2_transfer_data>
 8007e9a:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8007e9e:	ab01      	add	r3, sp, #4
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	4680      	mov	r8, r0
 8007ea4:	f006 fa1c 	bl	800e2e0 <acc_cpd_linear_sweep_check>
 8007ea8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007eac:	3b00      	subs	r3, #0
 8007eae:	bf18      	it	ne
 8007eb0:	2301      	movne	r3, #1
 8007eb2:	a902      	add	r1, sp, #8
 8007eb4:	f889 3000 	strb.w	r3, [r9]
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f006 f9f9 	bl	800e2b0 <acc_cpd_linear_sweep_get_info>
 8007ebe:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
 8007ec2:	6838      	ldr	r0, [r7, #0]
 8007ec4:	9902      	ldr	r1, [sp, #8]
 8007ec6:	006a      	lsls	r2, r5, #1
 8007ec8:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8007ecc:	4418      	add	r0, r3
 8007ece:	f008 fe51 	bl	8010b74 <memmove>
 8007ed2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8007ed6:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8007eda:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8007ede:	fbb6 f6f1 	udiv	r6, r6, r1
 8007ee2:	fb03 f306 	mul.w	r3, r3, r6
 8007ee6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8007eea:	4628      	mov	r0, r5
 8007eec:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8007ef0:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 8007ef4:	b009      	add	sp, #36	; 0x24
 8007ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007efa:	bf00      	nop

08007efc <measure_noise>:
 8007efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	b0b7      	sub	sp, #220	; 0xdc
 8007f02:	4604      	mov	r4, r0
 8007f04:	4688      	mov	r8, r1
 8007f06:	4616      	mov	r6, r2
 8007f08:	f7ff f816 	bl	8006f38 <acc_rss_integration_log_level>
 8007f0c:	2803      	cmp	r0, #3
 8007f0e:	d905      	bls.n	8007f1c <measure_noise+0x20>
 8007f10:	4b41      	ldr	r3, [pc, #260]	; (8008018 <measure_noise+0x11c>)
 8007f12:	4a42      	ldr	r2, [pc, #264]	; (800801c <measure_noise+0x120>)
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	4942      	ldr	r1, [pc, #264]	; (8008020 <measure_noise+0x124>)
 8007f18:	2004      	movs	r0, #4
 8007f1a:	4798      	blx	r3
 8007f1c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8007f20:	f8d4 a000 	ldr.w	sl, [r4]
 8007f24:	4649      	mov	r1, r9
 8007f26:	22bc      	movs	r2, #188	; 0xbc
 8007f28:	a807      	add	r0, sp, #28
 8007f2a:	f008 fe15 	bl	8010b58 <memcpy>
 8007f2e:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8007f30:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007f34:	f8d8 1000 	ldr.w	r1, [r8]
 8007f38:	f8b9 b0cc 	ldrh.w	fp, [r9, #204]	; 0xcc
 8007f3c:	00ad      	lsls	r5, r5, #2
 8007f3e:	1e6f      	subs	r7, r5, #1
 8007f40:	972c      	str	r7, [sp, #176]	; 0xb0
 8007f42:	2702      	movs	r7, #2
 8007f44:	2400      	movs	r4, #0
 8007f46:	ab07      	add	r3, sp, #28
 8007f48:	972d      	str	r7, [sp, #180]	; 0xb4
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	2701      	movs	r7, #1
 8007f4e:	971d      	str	r7, [sp, #116]	; 0x74
 8007f50:	9422      	str	r4, [sp, #136]	; 0x88
 8007f52:	941c      	str	r4, [sp, #112]	; 0x70
 8007f54:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
 8007f58:	9434      	str	r4, [sp, #208]	; 0xd0
 8007f5a:	f005 fcc9 	bl	800d8f0 <acc_cpd_linear_sweep_load_program>
 8007f5e:	4650      	mov	r0, sl
 8007f60:	f006 f962 	bl	800e228 <acc_cpd_linear_sweep_run_program>
 8007f64:	4650      	mov	r0, sl
 8007f66:	466b      	mov	r3, sp
 8007f68:	2264      	movs	r2, #100	; 0x64
 8007f6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007f6e:	f002 f87d 	bl	800a06c <acc_sensor_protocol_r2_wait_for_event>
 8007f72:	4607      	mov	r7, r0
 8007f74:	b918      	cbnz	r0, 8007f7e <measure_noise+0x82>
 8007f76:	4638      	mov	r0, r7
 8007f78:	b037      	add	sp, #220	; 0xdc
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	a901      	add	r1, sp, #4
 8007f80:	4648      	mov	r0, r9
 8007f82:	237c      	movs	r3, #124	; 0x7c
 8007f84:	f8d8 8000 	ldr.w	r8, [r8]
 8007f88:	fbb3 fbfb 	udiv	fp, r3, fp
 8007f8c:	b2ad      	uxth	r5, r5
 8007f8e:	f006 f98f 	bl	800e2b0 <acc_cpd_linear_sweep_get_info>
 8007f92:	9a01      	ldr	r2, [sp, #4]
 8007f94:	fb0b f505 	mul.w	r5, fp, r5
 8007f98:	4641      	mov	r1, r8
 8007f9a:	442a      	add	r2, r5
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	f002 f9af 	bl	800a300 <acc_sensor_protocol_r2_transfer_data>
 8007fa2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	4650      	mov	r0, sl
 8007faa:	f002 f8f7 	bl	800a19c <acc_sensor_protocol_r2_stop>
 8007fae:	4648      	mov	r0, r9
 8007fb0:	a901      	add	r1, sp, #4
 8007fb2:	f006 f97d 	bl	800e2b0 <acc_cpd_linear_sweep_get_info>
 8007fb6:	9801      	ldr	r0, [sp, #4]
 8007fb8:	2d0e      	cmp	r5, #14
 8007fba:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8007fbe:	d91c      	bls.n	8007ffa <measure_noise+0xfe>
 8007fc0:	006a      	lsls	r2, r5, #1
 8007fc2:	3a02      	subs	r2, #2
 8007fc4:	f100 011a 	add.w	r1, r0, #26
 8007fc8:	eb00 0e02 	add.w	lr, r0, r2
 8007fcc:	460b      	mov	r3, r1
 8007fce:	f833 cf02 	ldrh.w	ip, [r3, #2]!
 8007fd2:	459e      	cmp	lr, r3
 8007fd4:	4464      	add	r4, ip
 8007fd6:	d1fa      	bne.n	8007fce <measure_noise+0xd2>
 8007fd8:	4410      	add	r0, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	3d0e      	subs	r5, #14
 8007fde:	fbb4 f4f5 	udiv	r4, r4, r5
 8007fe2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8007fe6:	1b1b      	subs	r3, r3, r4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfb8      	it	lt
 8007fec:	425b      	neglt	r3, r3
 8007fee:	4288      	cmp	r0, r1
 8007ff0:	441a      	add	r2, r3
 8007ff2:	d1f6      	bne.n	8007fe2 <measure_noise+0xe6>
 8007ff4:	fbb2 f4f5 	udiv	r4, r2, r5
 8007ff8:	b2a4      	uxth	r4, r4
 8007ffa:	8034      	strh	r4, [r6, #0]
 8007ffc:	f7fe ff9c 	bl	8006f38 <acc_rss_integration_log_level>
 8008000:	2803      	cmp	r0, #3
 8008002:	d9b8      	bls.n	8007f76 <measure_noise+0x7a>
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <measure_noise+0x11c>)
 8008006:	4a07      	ldr	r2, [pc, #28]	; (8008024 <measure_noise+0x128>)
 8008008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800a:	4905      	ldr	r1, [pc, #20]	; (8008020 <measure_noise+0x124>)
 800800c:	2004      	movs	r0, #4
 800800e:	4798      	blx	r3
 8008010:	4638      	mov	r0, r7
 8008012:	b037      	add	sp, #220	; 0xdc
 8008014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008018:	20000640 	.word	0x20000640
 800801c:	080160b0 	.word	0x080160b0
 8008020:	080160d4 	.word	0x080160d4
 8008024:	080160e8 	.word	0x080160e8

08008028 <calibrate>:
 8008028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800802c:	b09b      	sub	sp, #108	; 0x6c
 800802e:	4604      	mov	r4, r0
 8008030:	460d      	mov	r5, r1
 8008032:	4616      	mov	r6, r2
 8008034:	461f      	mov	r7, r3
 8008036:	f7fe ff7f 	bl	8006f38 <acc_rss_integration_log_level>
 800803a:	2803      	cmp	r0, #3
 800803c:	d905      	bls.n	800804a <calibrate+0x22>
 800803e:	4b46      	ldr	r3, [pc, #280]	; (8008158 <calibrate+0x130>)
 8008040:	4a46      	ldr	r2, [pc, #280]	; (800815c <calibrate+0x134>)
 8008042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008044:	4946      	ldr	r1, [pc, #280]	; (8008160 <calibrate+0x138>)
 8008046:	2004      	movs	r0, #4
 8008048:	4798      	blx	r3
 800804a:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800804e:	6824      	ldr	r4, [r4, #0]
 8008050:	2300      	movs	r3, #0
 8008052:	f8c8 30bc 	str.w	r3, [r8, #188]	; 0xbc
 8008056:	f7fe feb7 	bl	8006dc8 <acc_rss_integration_get_sensor_reference_frequency>
 800805a:	a812      	add	r0, sp, #72	; 0x48
 800805c:	a902      	add	r1, sp, #8
 800805e:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 8008062:	f002 fd09 	bl	800aa78 <acc_cpd_pll_divisors_calculate>
 8008066:	b920      	cbnz	r0, 8008072 <calibrate+0x4a>
 8008068:	2400      	movs	r4, #0
 800806a:	4620      	mov	r0, r4
 800806c:	b01b      	add	sp, #108	; 0x6c
 800806e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008072:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008076:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800807a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800807e:	f8bd c010 	ldrh.w	ip, [sp, #16]
 8008082:	9207      	str	r2, [sp, #28]
 8008084:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8008088:	9008      	str	r0, [sp, #32]
 800808a:	6869      	ldr	r1, [r5, #4]
 800808c:	6828      	ldr	r0, [r5, #0]
 800808e:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 8008092:	466b      	mov	r3, sp
 8008094:	aa05      	add	r2, sp, #20
 8008096:	f003 fbe7 	bl	800b868 <acc_cpd_cbank_and_vana_calibration>
 800809a:	2800      	cmp	r0, #0
 800809c:	d0e4      	beq.n	8008068 <calibrate+0x40>
 800809e:	f8b8 90ce 	ldrh.w	r9, [r8, #206]	; 0xce
 80080a2:	f898 10d0 	ldrb.w	r1, [r8, #208]	; 0xd0
 80080a6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80080aa:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 80080ae:	f1b9 0000 	subs.w	r0, r9, #0
 80080b2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80080b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80080b8:	bf18      	it	ne
 80080ba:	2001      	movne	r0, #1
 80080bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80080c0:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 80080c4:	910c      	str	r1, [sp, #48]	; 0x30
 80080c6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80080ca:	9900      	ldr	r1, [sp, #0]
 80080cc:	940a      	str	r4, [sp, #40]	; 0x28
 80080ce:	900d      	str	r0, [sp, #52]	; 0x34
 80080d0:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80080d4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80080d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80080da:	ab12      	add	r3, sp, #72	; 0x48
 80080dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80080e0:	aa0a      	add	r2, sp, #40	; 0x28
 80080e2:	9410      	str	r4, [sp, #64]	; 0x40
 80080e4:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 80080e8:	f004 f8ac 	bl	800c244 <acc_cpd_dll_calibration>
 80080ec:	4604      	mov	r4, r0
 80080ee:	f1b9 0f00 	cmp.w	r9, #0
 80080f2:	d004      	beq.n	80080fe <calibrate+0xd6>
 80080f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080f6:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	703b      	strb	r3, [r7, #0]
 80080fe:	2c00      	cmp	r4, #0
 8008100:	d0b2      	beq.n	8008068 <calibrate+0x40>
 8008102:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800810c:	80b3      	strh	r3, [r6, #4]
 800810e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008110:	80f0      	strh	r0, [r6, #6]
 8008112:	8131      	strh	r1, [r6, #8]
 8008114:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8008118:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 800811c:	8172      	strh	r2, [r6, #10]
 800811e:	81b3      	strh	r3, [r6, #12]
 8008120:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8008124:	81f0      	strh	r0, [r6, #14]
 8008126:	2306      	movs	r3, #6
 8008128:	8231      	strh	r1, [r6, #16]
 800812a:	8272      	strh	r2, [r6, #18]
 800812c:	6033      	str	r3, [r6, #0]
 800812e:	f7fe ff03 	bl	8006f38 <acc_rss_integration_log_level>
 8008132:	2803      	cmp	r0, #3
 8008134:	d905      	bls.n	8008142 <calibrate+0x11a>
 8008136:	4b08      	ldr	r3, [pc, #32]	; (8008158 <calibrate+0x130>)
 8008138:	4a0a      	ldr	r2, [pc, #40]	; (8008164 <calibrate+0x13c>)
 800813a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813c:	4908      	ldr	r1, [pc, #32]	; (8008160 <calibrate+0x138>)
 800813e:	2004      	movs	r0, #4
 8008140:	4798      	blx	r3
 8008142:	f7fe fef9 	bl	8006f38 <acc_rss_integration_log_level>
 8008146:	2801      	cmp	r0, #1
 8008148:	d98f      	bls.n	800806a <calibrate+0x42>
 800814a:	4b03      	ldr	r3, [pc, #12]	; (8008158 <calibrate+0x130>)
 800814c:	4a06      	ldr	r2, [pc, #24]	; (8008168 <calibrate+0x140>)
 800814e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008150:	4903      	ldr	r1, [pc, #12]	; (8008160 <calibrate+0x138>)
 8008152:	2002      	movs	r0, #2
 8008154:	4798      	blx	r3
 8008156:	e788      	b.n	800806a <calibrate+0x42>
 8008158:	20000640 	.word	0x20000640
 800815c:	08016108 	.word	0x08016108
 8008160:	080160d4 	.word	0x080160d4
 8008164:	08016128 	.word	0x08016128
 8008168:	08016144 	.word	0x08016144

0800816c <set_calibration_context>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	680b      	ldr	r3, [r1, #0]
 8008170:	2b06      	cmp	r3, #6
 8008172:	b08c      	sub	sp, #48	; 0x30
 8008174:	d00b      	beq.n	800818e <set_calibration_context+0x22>
 8008176:	4929      	ldr	r1, [pc, #164]	; (800821c <set_calibration_context+0xb0>)
 8008178:	4a29      	ldr	r2, [pc, #164]	; (8008220 <set_calibration_context+0xb4>)
 800817a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800817c:	4929      	ldr	r1, [pc, #164]	; (8008224 <set_calibration_context+0xb8>)
 800817e:	2006      	movs	r0, #6
 8008180:	9000      	str	r0, [sp, #0]
 8008182:	2000      	movs	r0, #0
 8008184:	47a0      	blx	r4
 8008186:	2600      	movs	r6, #0
 8008188:	4630      	mov	r0, r6
 800818a:	b00c      	add	sp, #48	; 0x30
 800818c:	bd70      	pop	{r4, r5, r6, pc}
 800818e:	460d      	mov	r5, r1
 8008190:	4604      	mov	r4, r0
 8008192:	f7fe fe19 	bl	8006dc8 <acc_rss_integration_get_sensor_reference_frequency>
 8008196:	a806      	add	r0, sp, #24
 8008198:	a903      	add	r1, sp, #12
 800819a:	ed8d 0a06 	vstr	s0, [sp, #24]
 800819e:	f002 fc6b 	bl	800aa78 <acc_cpd_pll_divisors_calculate>
 80081a2:	4606      	mov	r6, r0
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d0ef      	beq.n	8008188 <set_calibration_context+0x1c>
 80081a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80081ac:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80081b6:	60a2      	str	r2, [r4, #8]
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80081be:	88ab      	ldrh	r3, [r5, #4]
 80081c0:	81a2      	strh	r2, [r4, #12]
 80081c2:	88ea      	ldrh	r2, [r5, #6]
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	892b      	ldrh	r3, [r5, #8]
 80081c8:	6162      	str	r2, [r4, #20]
 80081ca:	896a      	ldrh	r2, [r5, #10]
 80081cc:	61a3      	str	r3, [r4, #24]
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	61e2      	str	r2, [r4, #28]
 80081d2:	8a2a      	ldrh	r2, [r5, #16]
 80081d4:	6223      	str	r3, [r4, #32]
 80081d6:	8a6b      	ldrh	r3, [r5, #18]
 80081d8:	89e8      	ldrh	r0, [r5, #14]
 80081da:	84a2      	strh	r2, [r4, #36]	; 0x24
 80081dc:	84e3      	strh	r3, [r4, #38]	; 0x26
 80081de:	aa06      	add	r2, sp, #24
 80081e0:	217c      	movs	r1, #124	; 0x7c
 80081e2:	f002 fcdf 	bl	800aba4 <acc_dll_calculate_area_settings>
 80081e6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80081ea:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80081ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80081f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80081f6:	62a0      	str	r0, [r4, #40]	; 0x28
 80081f8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80081fa:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 80081fe:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8008202:	6322      	str	r2, [r4, #48]	; 0x30
 8008204:	6363      	str	r3, [r4, #52]	; 0x34
 8008206:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800820a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800820e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 8008212:	4630      	mov	r0, r6
 8008214:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8008218:	b00c      	add	sp, #48	; 0x30
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	20000640 	.word	0x20000640
 8008220:	08016164 	.word	0x08016164
 8008224:	080160d4 	.word	0x080160d4

08008228 <get_package_range_coarse_max>:
 8008228:	b530      	push	{r4, r5, lr}
 800822a:	f8b0 50cc 	ldrh.w	r5, [r0, #204]	; 0xcc
 800822e:	b087      	sub	sp, #28
 8008230:	b185      	cbz	r5, 8008254 <get_package_range_coarse_max+0x2c>
 8008232:	4604      	mov	r4, r0
 8008234:	4669      	mov	r1, sp
 8008236:	f006 f83b 	bl	800e2b0 <acc_cpd_linear_sweep_get_info>
 800823a:	9b00      	ldr	r3, [sp, #0]
 800823c:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
 8008240:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8008244:	1a1b      	subs	r3, r3, r0
 8008246:	207c      	movs	r0, #124	; 0x7c
 8008248:	fbb0 f0f5 	udiv	r0, r0, r5
 800824c:	fbb3 f0f0 	udiv	r0, r3, r0
 8008250:	b007      	add	sp, #28
 8008252:	bd30      	pop	{r4, r5, pc}
 8008254:	4802      	ldr	r0, [pc, #8]	; (8008260 <get_package_range_coarse_max+0x38>)
 8008256:	f240 1151 	movw	r1, #337	; 0x151
 800825a:	f7fe fd4f 	bl	8006cfc <acc_assert_fail>
 800825e:	bf00      	nop
 8008260:	080160d4 	.word	0x080160d4

08008264 <initialize>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	460d      	mov	r5, r1
 800826a:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 800826e:	2906      	cmp	r1, #6
 8008270:	b08f      	sub	sp, #60	; 0x3c
 8008272:	4606      	mov	r6, r0
 8008274:	4690      	mov	r8, r2
 8008276:	461f      	mov	r7, r3
 8008278:	d00d      	beq.n	8008296 <initialize+0x32>
 800827a:	2909      	cmp	r1, #9
 800827c:	d00b      	beq.n	8008296 <initialize+0x32>
 800827e:	4ba8      	ldr	r3, [pc, #672]	; (8008520 <initialize+0x2bc>)
 8008280:	4aa8      	ldr	r2, [pc, #672]	; (8008524 <initialize+0x2c0>)
 8008282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008284:	49a8      	ldr	r1, [pc, #672]	; (8008528 <initialize+0x2c4>)
 8008286:	2000      	movs	r0, #0
 8008288:	4798      	blx	r3
 800828a:	f04f 0900 	mov.w	r9, #0
 800828e:	4648      	mov	r0, r9
 8008290:	b00f      	add	sp, #60	; 0x3c
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	aa06      	add	r2, sp, #24
 8008298:	f10d 0116 	add.w	r1, sp, #22
 800829c:	4628      	mov	r0, r5
 800829e:	6974      	ldr	r4, [r6, #20]
 80082a0:	f7ff f9b4 	bl	800760c <acc_base_configuration_cca_get>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d03f      	beq.n	8008328 <initialize+0xc4>
 80082a8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80082ac:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80082b0:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
 80082b4:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
 80082b8:	4628      	mov	r0, r5
 80082ba:	f7ff f923 	bl	8007504 <acc_base_configuration_downsampling_factor_get>
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80082c4:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
 80082c8:	4628      	mov	r0, r5
 80082ca:	f7fe ff39 	bl	8007140 <acc_base_configuration_tx_disable_get>
 80082ce:	f04f 0b01 	mov.w	fp, #1
 80082d2:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
 80082d6:	f884 b0ad 	strb.w	fp, [r4, #173]	; 0xad
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff ffa4 	bl	8008228 <get_package_range_coarse_max>
 80082e0:	4b92      	ldr	r3, [pc, #584]	; (800852c <initialize+0x2c8>)
 80082e2:	b280      	uxth	r0, r0
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	9002      	str	r0, [sp, #8]
 80082e8:	237c      	movs	r3, #124	; 0x7c
 80082ea:	f106 0a04 	add.w	sl, r6, #4
 80082ee:	9201      	str	r2, [sp, #4]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4652      	mov	r2, sl
 80082f4:	463b      	mov	r3, r7
 80082f6:	4641      	mov	r1, r8
 80082f8:	4628      	mov	r0, r5
 80082fa:	f000 fd03 	bl	8008d04 <acc_radar_engine_common_sweep_w_dly_initialize_range>
 80082fe:	4681      	mov	r9, r0
 8008300:	2800      	cmp	r0, #0
 8008302:	d0c4      	beq.n	800828e <initialize+0x2a>
 8008304:	4628      	mov	r0, r5
 8008306:	f7ff f891 	bl	800742c <acc_base_configuration_sweep_type_debug_get>
 800830a:	b980      	cbnz	r0, 800832e <initialize+0xca>
 800830c:	e9c4 0b12 	strd	r0, fp, [r4, #72]	; 0x48
 8008310:	2300      	movs	r3, #0
 8008312:	6523      	str	r3, [r4, #80]	; 0x50
 8008314:	4628      	mov	r0, r5
 8008316:	f7fe fffb 	bl	8007310 <acc_base_configuration_repetition_mode_get>
 800831a:	2803      	cmp	r0, #3
 800831c:	f200 80d8 	bhi.w	80084d0 <initialize+0x26c>
 8008320:	e8df f000 	tbb	[pc, r0]
 8008324:	0abfd9d1 	.word	0x0abfd9d1
 8008328:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
 800832c:	e7c2      	b.n	80082b4 <initialize+0x50>
 800832e:	2300      	movs	r3, #0
 8008330:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8008334:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008336:	e7eb      	b.n	8008310 <initialize+0xac>
 8008338:	4628      	mov	r0, r5
 800833a:	f10d 0b20 	add.w	fp, sp, #32
 800833e:	f7fe fff1 	bl	8007324 <acc_base_configuration_update_rate_get>
 8008342:	a907      	add	r1, sp, #28
 8008344:	4658      	mov	r0, fp
 8008346:	f000 fcaf 	bl	8008ca8 <acc_radar_engine_common_frequency_to_main_clk>
 800834a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800834e:	2301      	movs	r3, #1
 8008350:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8008354:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8008358:	4628      	mov	r0, r5
 800835a:	f7fe fedb 	bl	8007114 <acc_base_configuration_power_save_mode_get>
 800835e:	2804      	cmp	r0, #4
 8008360:	d807      	bhi.n	8008372 <initialize+0x10e>
 8008362:	e8df f000 	tbb	[pc, r0]
 8008366:	0303      	.short	0x0303
 8008368:	c1c5      	.short	0xc1c5
 800836a:	03          	.byte	0x03
 800836b:	00          	.byte	0x00
 800836c:	2301      	movs	r3, #1
 800836e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8008372:	f10d 021a 	add.w	r2, sp, #26
 8008376:	f10d 0117 	add.w	r1, sp, #23
 800837a:	4628      	mov	r0, r5
 800837c:	f7ff f946 	bl	800760c <acc_base_configuration_cca_get>
 8008380:	2800      	cmp	r0, #0
 8008382:	f000 80ba 	beq.w	80084fa <initialize+0x296>
 8008386:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800838a:	2201      	movs	r2, #1
 800838c:	3b01      	subs	r3, #1
 800838e:	e9c4 232d 	strd	r2, r3, [r4, #180]	; 0xb4
 8008392:	4628      	mov	r0, r5
 8008394:	f7fe fed4 	bl	8007140 <acc_base_configuration_tx_disable_get>
 8008398:	2800      	cmp	r0, #0
 800839a:	f000 80bb 	beq.w	8008514 <initialize+0x2b0>
 800839e:	2000      	movs	r0, #0
 80083a0:	66e0      	str	r0, [r4, #108]	; 0x6c
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7fe fee4 	bl	8007170 <acc_base_configuration_decrease_tx_emission_get>
 80083a8:	f080 0001 	eor.w	r0, r0, #1
 80083ac:	2301      	movs	r3, #1
 80083ae:	b2c0      	uxtb	r0, r0
 80083b0:	e9c4 031c 	strd	r0, r3, [r4, #112]	; 0x70
 80083b4:	4628      	mov	r0, r5
 80083b6:	f7fe fef3 	bl	80071a0 <acc_base_configuration_hw_accelerated_average_samples_get>
 80083ba:	3801      	subs	r0, #1
 80083bc:	67a0      	str	r0, [r4, #120]	; 0x78
 80083be:	4628      	mov	r0, r5
 80083c0:	f7fe ffca 	bl	8007358 <acc_base_configuration_gain_get>
 80083c4:	67e0      	str	r0, [r4, #124]	; 0x7c
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7fe ffdc 	bl	8007384 <acc_base_configuration_integrator_get>
 80083cc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80083d0:	4628      	mov	r0, r5
 80083d2:	f7ff f807 	bl	80073e4 <acc_base_configuration_integrator_ramp_up_get>
 80083d6:	3801      	subs	r0, #1
 80083d8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80083dc:	4628      	mov	r0, r5
 80083de:	f7fe ffe9 	bl	80073b4 <acc_base_configuration_wg_duration_get>
 80083e2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80083e6:	4628      	mov	r0, r5
 80083e8:	f7ff f874 	bl	80074d4 <acc_base_configuration_bba_fast_refresh_disable_get>
 80083ec:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
 80083f0:	4628      	mov	r0, r5
 80083f2:	f7ff f887 	bl	8007504 <acc_base_configuration_downsampling_factor_get>
 80083f6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 80083fa:	4628      	mov	r0, r5
 80083fc:	f7ff f852 	bl	80074a4 <acc_base_configuration_bba_reset_clocksync_perturbation_get>
 8008400:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 8008404:	4628      	mov	r0, r5
 8008406:	f7ff f859 	bl	80074bc <acc_base_configuration_bba_linear_resync_perturbation_get>
 800840a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 800840e:	4628      	mov	r0, r5
 8008410:	f7ff f8b4 	bl	800757c <acc_base_configuration_asynchronous_measurement_get>
 8008414:	88b2      	ldrh	r2, [r6, #4]
 8008416:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800841a:	f080 0001 	eor.w	r0, r0, #1
 800841e:	2301      	movs	r3, #1
 8008420:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8008424:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8008428:	4650      	mov	r0, sl
 800842a:	f001 f85d 	bl	80094e8 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 800842e:	2800      	cmp	r0, #0
 8008430:	d16c      	bne.n	800850c <initialize+0x2a8>
 8008432:	8970      	ldrh	r0, [r6, #10]
 8008434:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8008438:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800843c:	3801      	subs	r0, #1
 800843e:	88f3      	ldrh	r3, [r6, #6]
 8008440:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8008444:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 8008448:	f7fe fcbe 	bl	8006dc8 <acc_rss_integration_get_sensor_reference_frequency>
 800844c:	893b      	ldrh	r3, [r7, #8]
 800844e:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 8008452:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008456:	f8a8 2014 	strh.w	r2, [r8, #20]
 800845a:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 800845e:	227c      	movs	r2, #124	; 0x7c
 8008460:	fbb2 f2f1 	udiv	r2, r2, r1
 8008464:	fb03 f302 	mul.w	r3, r3, r2
 8008468:	2200      	movs	r2, #0
 800846a:	817b      	strh	r3, [r7, #10]
 800846c:	833a      	strh	r2, [r7, #24]
 800846e:	4659      	mov	r1, fp
 8008470:	4620      	mov	r0, r4
 8008472:	f005 ff1d 	bl	800e2b0 <acc_cpd_linear_sweep_get_info>
 8008476:	465a      	mov	r2, fp
 8008478:	6831      	ldr	r1, [r6, #0]
 800847a:	2301      	movs	r3, #1
 800847c:	2013      	movs	r0, #19
 800847e:	f7fe fd61 	bl	8006f44 <acc_probes_execute_uint16>
 8008482:	f001 f88d 	bl	80095a0 <acc_sensor_r2_get_max_header_length>
 8008486:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 800848a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800848e:	4413      	add	r3, r2
 8008490:	4418      	add	r0, r3
 8008492:	81f8      	strh	r0, [r7, #14]
 8008494:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8008498:	4648      	mov	r0, r9
 800849a:	81bb      	strh	r3, [r7, #12]
 800849c:	b00f      	add	sp, #60	; 0x3c
 800849e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a2:	4628      	mov	r0, r5
 80084a4:	f10d 0b20 	add.w	fp, sp, #32
 80084a8:	f7fe ff3c 	bl	8007324 <acc_base_configuration_update_rate_get>
 80084ac:	a907      	add	r1, sp, #28
 80084ae:	4658      	mov	r0, fp
 80084b0:	f000 fbfa 	bl	8008ca8 <acc_radar_engine_common_frequency_to_main_clk>
 80084b4:	2301      	movs	r3, #1
 80084b6:	9a07      	ldr	r2, [sp, #28]
 80084b8:	6563      	str	r3, [r4, #84]	; 0x54
 80084ba:	2100      	movs	r1, #0
 80084bc:	9b08      	ldr	r3, [sp, #32]
 80084be:	6623      	str	r3, [r4, #96]	; 0x60
 80084c0:	e9c4 1216 	strd	r1, r2, [r4, #88]	; 0x58
 80084c4:	e748      	b.n	8008358 <initialize+0xf4>
 80084c6:	2300      	movs	r3, #0
 80084c8:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80084cc:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 80084d0:	f10d 0b20 	add.w	fp, sp, #32
 80084d4:	e740      	b.n	8008358 <initialize+0xf4>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2201      	movs	r2, #1
 80084da:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 80084de:	6563      	str	r3, [r4, #84]	; 0x54
 80084e0:	65a2      	str	r2, [r4, #88]	; 0x58
 80084e2:	f10d 0b20 	add.w	fp, sp, #32
 80084e6:	e737      	b.n	8008358 <initialize+0xf4>
 80084e8:	2300      	movs	r3, #0
 80084ea:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80084ee:	e740      	b.n	8008372 <initialize+0x10e>
 80084f0:	2201      	movs	r2, #1
 80084f2:	2300      	movs	r3, #0
 80084f4:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
 80084f8:	e73b      	b.n	8008372 <initialize+0x10e>
 80084fa:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 80084fe:	4628      	mov	r0, r5
 8008500:	f7fe fe1e 	bl	8007140 <acc_base_configuration_tx_disable_get>
 8008504:	f080 0001 	eor.w	r0, r0, #1
 8008508:	b2c0      	uxtb	r0, r0
 800850a:	e749      	b.n	80083a0 <initialize+0x13c>
 800850c:	6970      	ldr	r0, [r6, #20]
 800850e:	f7ff fe8b 	bl	8008228 <get_package_range_coarse_max>
 8008512:	e78f      	b.n	8008434 <initialize+0x1d0>
 8008514:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8008518:	f080 0001 	eor.w	r0, r0, #1
 800851c:	e740      	b.n	80083a0 <initialize+0x13c>
 800851e:	bf00      	nop
 8008520:	20000640 	.word	0x20000640
 8008524:	08016030 	.word	0x08016030
 8008528:	080160d4 	.word	0x080160d4
 800852c:	08016254 	.word	0x08016254

08008530 <coarse_count_for_next_package>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	8983      	ldrh	r3, [r0, #12]
 8008534:	4604      	mov	r4, r0
 8008536:	6940      	ldr	r0, [r0, #20]
 8008538:	3b01      	subs	r3, #1
 800853a:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
 800853e:	b29b      	uxth	r3, r3
 8008540:	429a      	cmp	r2, r3
 8008542:	d109      	bne.n	8008558 <coarse_count_for_next_package+0x28>
 8008544:	8965      	ldrh	r5, [r4, #10]
 8008546:	f7ff fe6f 	bl	8008228 <get_package_range_coarse_max>
 800854a:	fbb5 f3f0 	udiv	r3, r5, r0
 800854e:	fb03 5010 	mls	r0, r3, r0, r5
 8008552:	b100      	cbz	r0, 8008556 <coarse_count_for_next_package+0x26>
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	6960      	ldr	r0, [r4, #20]
 8008558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855c:	f7ff be64 	b.w	8008228 <get_package_range_coarse_max>

08008560 <update_program>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	6946      	ldr	r6, [r0, #20]
 8008566:	8987      	ldrh	r7, [r0, #12]
 8008568:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800856a:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 800856e:	460d      	mov	r5, r1
 8008570:	fab3 f383 	clz	r3, r3
 8008574:	2a00      	cmp	r2, #0
 8008576:	bf18      	it	ne
 8008578:	4611      	movne	r1, r2
 800857a:	2f01      	cmp	r7, #1
 800857c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8008580:	bf94      	ite	ls
 8008582:	f04f 0900 	movls.w	r9, #0
 8008586:	f04f 0901 	movhi.w	r9, #1
 800858a:	2f01      	cmp	r7, #1
 800858c:	b085      	sub	sp, #20
 800858e:	4604      	mov	r4, r0
 8008590:	ea83 0a01 	eor.w	sl, r3, r1
 8008594:	d933      	bls.n	80085fe <update_program+0x9e>
 8008596:	f8b6 30c2 	ldrh.w	r3, [r6, #194]	; 0xc2
 800859a:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 800859e:	3301      	adds	r3, #1
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	fbb3 f8f7 	udiv	r8, r3, r7
 80085a6:	fb07 3718 	mls	r7, r7, r8, r3
 80085aa:	fa1f f887 	uxth.w	r8, r7
 80085ae:	f8a6 80c2 	strh.w	r8, [r6, #194]	; 0xc2
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7ff fe38 	bl	8008228 <get_package_range_coarse_max>
 80085b8:	4607      	mov	r7, r0
 80085ba:	4620      	mov	r0, r4
 80085bc:	f7ff ffb8 	bl	8008530 <coarse_count_for_next_package>
 80085c0:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 80085c4:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
 80085c8:	fb07 b708 	mla	r7, r7, r8, fp
 80085cc:	3801      	subs	r0, #1
 80085ce:	e9cd 0701 	strd	r0, r7, [sp, #4]
 80085d2:	f88d 9000 	strb.w	r9, [sp]
 80085d6:	f88d 9001 	strb.w	r9, [sp, #1]
 80085da:	f88d a002 	strb.w	sl, [sp, #2]
 80085de:	b15a      	cbz	r2, 80085f8 <update_program+0x98>
 80085e0:	2500      	movs	r5, #0
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	9503      	str	r5, [sp, #12]
 80085e6:	4669      	mov	r1, sp
 80085e8:	f005 fe22 	bl	800e230 <acc_cpd_linear_sweep_update_program>
 80085ec:	b108      	cbz	r0, 80085f2 <update_program+0x92>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	66f3      	str	r3, [r6, #108]	; 0x6c
 80085f2:	b005      	add	sp, #20
 80085f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f8:	f085 0501 	eor.w	r5, r5, #1
 80085fc:	e7f1      	b.n	80085e2 <update_program+0x82>
 80085fe:	428b      	cmp	r3, r1
 8008600:	d003      	beq.n	800860a <update_program+0xaa>
 8008602:	f04f 30ff 	mov.w	r0, #4294967295
 8008606:	2700      	movs	r7, #0
 8008608:	e7e1      	b.n	80085ce <update_program+0x6e>
 800860a:	2001      	movs	r0, #1
 800860c:	e7f1      	b.n	80085f2 <update_program+0x92>
 800860e:	bf00      	nop

08008610 <start>:
 8008610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008614:	6944      	ldr	r4, [r0, #20]
 8008616:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 800861a:	f894 80ac 	ldrb.w	r8, [r4, #172]	; 0xac
 800861e:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 8008622:	2300      	movs	r3, #0
 8008624:	b085      	sub	sp, #20
 8008626:	4606      	mov	r6, r0
 8008628:	460d      	mov	r5, r1
 800862a:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800862e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8008632:	b117      	cbz	r7, 800863a <start+0x2a>
 8008634:	f1b8 0f00 	cmp.w	r8, #0
 8008638:	d11f      	bne.n	800867a <start+0x6a>
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ff78 	bl	8008530 <coarse_count_for_next_package>
 8008640:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 8008644:	f7fe fc78 	bl	8006f38 <acc_rss_integration_log_level>
 8008648:	2803      	cmp	r0, #3
 800864a:	d905      	bls.n	8008658 <start+0x48>
 800864c:	4b2b      	ldr	r3, [pc, #172]	; (80086fc <start+0xec>)
 800864e:	4a2c      	ldr	r2, [pc, #176]	; (8008700 <start+0xf0>)
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008652:	492c      	ldr	r1, [pc, #176]	; (8008704 <start+0xf4>)
 8008654:	2004      	movs	r0, #4
 8008656:	4798      	blx	r3
 8008658:	e9d5 1200 	ldrd	r1, r2, [r5]
 800865c:	6830      	ldr	r0, [r6, #0]
 800865e:	4623      	mov	r3, r4
 8008660:	f005 f946 	bl	800d8f0 <acc_cpd_linear_sweep_load_program>
 8008664:	4605      	mov	r5, r0
 8008666:	b950      	cbnz	r0, 800867e <start+0x6e>
 8008668:	4b24      	ldr	r3, [pc, #144]	; (80086fc <start+0xec>)
 800866a:	4a27      	ldr	r2, [pc, #156]	; (8008708 <start+0xf8>)
 800866c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866e:	4925      	ldr	r1, [pc, #148]	; (8008704 <start+0xf4>)
 8008670:	4798      	blx	r3
 8008672:	4628      	mov	r0, r5
 8008674:	b005      	add	sp, #20
 8008676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800867a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800867c:	e7dd      	b.n	800863a <start+0x2a>
 800867e:	6830      	ldr	r0, [r6, #0]
 8008680:	f005 fdd2 	bl	800e228 <acc_cpd_linear_sweep_run_program>
 8008684:	4605      	mov	r5, r0
 8008686:	2800      	cmp	r0, #0
 8008688:	d032      	beq.n	80086f0 <start+0xe0>
 800868a:	f1b8 0f00 	cmp.w	r8, #0
 800868e:	d00f      	beq.n	80086b0 <start+0xa0>
 8008690:	6931      	ldr	r1, [r6, #16]
 8008692:	6830      	ldr	r0, [r6, #0]
 8008694:	f001 fe0a 	bl	800a2ac <acc_sensor_protocol_r2_wait_for_sync_start>
 8008698:	b350      	cbz	r0, 80086f0 <start+0xe0>
 800869a:	f7fe fc4d 	bl	8006f38 <acc_rss_integration_log_level>
 800869e:	2801      	cmp	r0, #1
 80086a0:	d905      	bls.n	80086ae <start+0x9e>
 80086a2:	4b16      	ldr	r3, [pc, #88]	; (80086fc <start+0xec>)
 80086a4:	4a19      	ldr	r2, [pc, #100]	; (800870c <start+0xfc>)
 80086a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a8:	4916      	ldr	r1, [pc, #88]	; (8008704 <start+0xf4>)
 80086aa:	2002      	movs	r0, #2
 80086ac:	4798      	blx	r3
 80086ae:	b96f      	cbnz	r7, 80086cc <start+0xbc>
 80086b0:	f7fe fc42 	bl	8006f38 <acc_rss_integration_log_level>
 80086b4:	2803      	cmp	r0, #3
 80086b6:	d9dc      	bls.n	8008672 <start+0x62>
 80086b8:	4b10      	ldr	r3, [pc, #64]	; (80086fc <start+0xec>)
 80086ba:	4a15      	ldr	r2, [pc, #84]	; (8008710 <start+0x100>)
 80086bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086be:	4911      	ldr	r1, [pc, #68]	; (8008704 <start+0xf4>)
 80086c0:	2004      	movs	r0, #4
 80086c2:	4798      	blx	r3
 80086c4:	4628      	mov	r0, r5
 80086c6:	b005      	add	sp, #20
 80086c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086cc:	2300      	movs	r3, #0
 80086ce:	2201      	movs	r2, #1
 80086d0:	6830      	ldr	r0, [r6, #0]
 80086d2:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 80086d6:	4669      	mov	r1, sp
 80086d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80086dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80086e0:	f8ad 3000 	strh.w	r3, [sp]
 80086e4:	f88d 2002 	strb.w	r2, [sp, #2]
 80086e8:	f005 fda2 	bl	800e230 <acc_cpd_linear_sweep_update_program>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d1df      	bne.n	80086b0 <start+0xa0>
 80086f0:	2500      	movs	r5, #0
 80086f2:	4628      	mov	r0, r5
 80086f4:	b005      	add	sp, #20
 80086f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086fa:	bf00      	nop
 80086fc:	20000640 	.word	0x20000640
 8008700:	080161a4 	.word	0x080161a4
 8008704:	080160d4 	.word	0x080160d4
 8008708:	080161cc 	.word	0x080161cc
 800870c:	080161e8 	.word	0x080161e8
 8008710:	0801620c 	.word	0x0801620c

08008714 <acc_radar_engine_linear_create>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4a11      	ldr	r2, [pc, #68]	; (800875c <acc_radar_engine_linear_create+0x48>)
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	f240 1325 	movw	r3, #293	; 0x125
 8008720:	21d4      	movs	r1, #212	; 0xd4
 8008722:	2001      	movs	r0, #1
 8008724:	f7fe fbd0 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 8008728:	6160      	str	r0, [r4, #20]
 800872a:	b1a8      	cbz	r0, 8008758 <acc_radar_engine_linear_create+0x44>
 800872c:	4628      	mov	r0, r5
 800872e:	f7fe fc8b 	bl	8007048 <acc_base_configuration_sensor_get>
 8008732:	6020      	str	r0, [r4, #0]
 8008734:	4628      	mov	r0, r5
 8008736:	f7fe ff21 	bl	800757c <acc_base_configuration_asynchronous_measurement_get>
 800873a:	73a0      	strb	r0, [r4, #14]
 800873c:	4628      	mov	r0, r5
 800873e:	f7fe fce9 	bl	8007114 <acc_base_configuration_power_save_mode_get>
 8008742:	fab0 f080 	clz	r0, r0
 8008746:	0940      	lsrs	r0, r0, #5
 8008748:	73e0      	strb	r0, [r4, #15]
 800874a:	4628      	mov	r0, r5
 800874c:	f000 fa92 	bl	8008c74 <acc_radar_engine_common_get_timeout_ms>
 8008750:	4b03      	ldr	r3, [pc, #12]	; (8008760 <acc_radar_engine_linear_create+0x4c>)
 8008752:	6120      	str	r0, [r4, #16]
 8008754:	61a3      	str	r3, [r4, #24]
 8008756:	2001      	movs	r0, #1
 8008758:	bd38      	pop	{r3, r4, r5, pc}
 800875a:	bf00      	nop
 800875c:	080160d4 	.word	0x080160d4
 8008760:	08016230 	.word	0x08016230

08008764 <initialize>:
 8008764:	2001      	movs	r0, #1
 8008766:	4770      	bx	lr

08008768 <set_calibration_context>:
 8008768:	2001      	movs	r0, #1
 800876a:	4770      	bx	lr

0800876c <destroy>:
 800876c:	b510      	push	{r4, lr}
 800876e:	4604      	mov	r4, r0
 8008770:	6940      	ldr	r0, [r0, #20]
 8008772:	b118      	cbz	r0, 800877c <destroy+0x10>
 8008774:	f7fe fbc8 	bl	8006f08 <acc_rss_integration_mem_free>
 8008778:	2300      	movs	r3, #0
 800877a:	6163      	str	r3, [r4, #20]
 800877c:	bd10      	pop	{r4, pc}
 800877e:	bf00      	nop

08008780 <cbank_and_vana_calibration.isra.0>:
 8008780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	7b00      	ldrb	r0, [r0, #12]
 8008786:	b087      	sub	sp, #28
 8008788:	b918      	cbnz	r0, 8008792 <cbank_and_vana_calibration.isra.0+0x12>
 800878a:	73a0      	strb	r0, [r4, #14]
 800878c:	2001      	movs	r0, #1
 800878e:	b007      	add	sp, #28
 8008790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008792:	6927      	ldr	r7, [r4, #16]
 8008794:	460d      	mov	r5, r1
 8008796:	4616      	mov	r6, r2
 8008798:	f7fe fb16 	bl	8006dc8 <acc_rss_integration_get_sensor_reference_frequency>
 800879c:	4639      	mov	r1, r7
 800879e:	a801      	add	r0, sp, #4
 80087a0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80087a4:	f002 f968 	bl	800aa78 <acc_cpd_pll_divisors_calculate>
 80087a8:	b910      	cbnz	r0, 80087b0 <cbank_and_vana_calibration.isra.0+0x30>
 80087aa:	73a0      	strb	r0, [r4, #14]
 80087ac:	b007      	add	sp, #28
 80087ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b0:	4814      	ldr	r0, [pc, #80]	; (8008804 <cbank_and_vana_calibration.isra.0+0x84>)
 80087b2:	f001 ffd9 	bl	800a768 <acc_diagnostic_log_set_scope>
 80087b6:	6821      	ldr	r1, [r4, #0]
 80087b8:	4813      	ldr	r0, [pc, #76]	; (8008808 <cbank_and_vana_calibration.isra.0+0x88>)
 80087ba:	f001 fffd 	bl	800a7b8 <acc_diagnostic_log_scalar>
 80087be:	8879      	ldrh	r1, [r7, #2]
 80087c0:	4812      	ldr	r0, [pc, #72]	; (800880c <cbank_and_vana_calibration.isra.0+0x8c>)
 80087c2:	f001 fff9 	bl	800a7b8 <acc_diagnostic_log_scalar>
 80087c6:	88b9      	ldrh	r1, [r7, #4]
 80087c8:	4811      	ldr	r0, [pc, #68]	; (8008810 <cbank_and_vana_calibration.isra.0+0x90>)
 80087ca:	f001 fff5 	bl	800a7b8 <acc_diagnostic_log_scalar>
 80087ce:	88f9      	ldrh	r1, [r7, #6]
 80087d0:	4810      	ldr	r0, [pc, #64]	; (8008814 <cbank_and_vana_calibration.isra.0+0x94>)
 80087d2:	f001 fff1 	bl	800a7b8 <acc_diagnostic_log_scalar>
 80087d6:	8839      	ldrh	r1, [r7, #0]
 80087d8:	480f      	ldr	r0, [pc, #60]	; (8008818 <cbank_and_vana_calibration.isra.0+0x98>)
 80087da:	f001 ffed 	bl	800a7b8 <acc_diagnostic_log_scalar>
 80087de:	887b      	ldrh	r3, [r7, #2]
 80087e0:	f8b7 c004 	ldrh.w	ip, [r7, #4]
 80087e4:	6831      	ldr	r1, [r6, #0]
 80087e6:	6828      	ldr	r0, [r5, #0]
 80087e8:	88fe      	ldrh	r6, [r7, #6]
 80087ea:	6825      	ldr	r5, [r4, #0]
 80087ec:	9501      	str	r5, [sp, #4]
 80087ee:	aa01      	add	r2, sp, #4
 80087f0:	893d      	ldrh	r5, [r7, #8]
 80087f2:	9302      	str	r3, [sp, #8]
 80087f4:	6963      	ldr	r3, [r4, #20]
 80087f6:	f8ad 5014 	strh.w	r5, [sp, #20]
 80087fa:	e9cd c603 	strd	ip, r6, [sp, #12]
 80087fe:	f003 f833 	bl	800b868 <acc_cpd_cbank_and_vana_calibration>
 8008802:	e7c2      	b.n	800878a <cbank_and_vana_calibration.isra.0+0xa>
 8008804:	08016cc4 	.word	0x08016cc4
 8008808:	08016258 	.word	0x08016258
 800880c:	08016264 	.word	0x08016264
 8008810:	08016274 	.word	0x08016274
 8008814:	08016280 	.word	0x08016280
 8008818:	0801628c 	.word	0x0801628c

0800881c <test_common>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	2301      	movs	r3, #1
 8008822:	b08d      	sub	sp, #52	; 0x34
 8008824:	7303      	strb	r3, [r0, #12]
 8008826:	460e      	mov	r6, r1
 8008828:	6885      	ldr	r5, [r0, #8]
 800882a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800882e:	4604      	mov	r4, r0
 8008830:	f7fe faf2 	bl	8006e18 <acc_rss_integration_is_hibernate_capable>
 8008834:	2300      	movs	r3, #0
 8008836:	4607      	mov	r7, r0
 8008838:	f8df e338 	ldr.w	lr, [pc, #824]	; 8008b74 <test_common+0x358>
 800883c:	f106 0904 	add.w	r9, r6, #4
 8008840:	a803      	add	r0, sp, #12
 8008842:	a901      	add	r1, sp, #4
 8008844:	461a      	mov	r2, r3
 8008846:	469c      	mov	ip, r3
 8008848:	2d00      	cmp	r5, #0
 800884a:	f000 80a2 	beq.w	8008992 <test_common+0x176>
 800884e:	5caa      	ldrb	r2, [r5, r2]
 8008850:	f800 2b01 	strb.w	r2, [r0], #1
 8008854:	2b04      	cmp	r3, #4
 8008856:	f801 cb01 	strb.w	ip, [r1], #1
 800885a:	f040 8094 	bne.w	8008986 <test_common+0x16a>
 800885e:	b917      	cbnz	r7, 8008866 <test_common+0x4a>
 8008860:	2301      	movs	r3, #1
 8008862:	f88d 3010 	strb.w	r3, [sp, #16]
 8008866:	7b23      	ldrb	r3, [r4, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f040 80e9 	bne.w	8008a40 <test_common+0x224>
 800886e:	f8df a304 	ldr.w	sl, [pc, #772]	; 8008b74 <test_common+0x358>
 8008872:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8008b58 <test_common+0x33c>
 8008876:	2300      	movs	r3, #0
 8008878:	4640      	mov	r0, r8
 800887a:	b10d      	cbz	r5, 8008880 <test_common+0x64>
 800887c:	5cea      	ldrb	r2, [r5, r3]
 800887e:	b9ea      	cbnz	r2, 80088bc <test_common+0xa0>
 8008880:	2b03      	cmp	r3, #3
 8008882:	fa1f f883 	uxth.w	r8, r3
 8008886:	f000 80d3 	beq.w	8008a30 <test_common+0x214>
 800888a:	2200      	movs	r2, #0
 800888c:	4696      	mov	lr, r2
 800888e:	a901      	add	r1, sp, #4
 8008890:	f04f 0c01 	mov.w	ip, #1
 8008894:	45c6      	cmp	lr, r8
 8008896:	d06a      	beq.n	800896e <test_common+0x152>
 8008898:	2a04      	cmp	r2, #4
 800889a:	d160      	bne.n	800895e <test_common+0x142>
 800889c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80088a0:	f8be 2000 	ldrh.w	r2, [lr]
 80088a4:	b138      	cbz	r0, 80088b6 <test_common+0x9a>
 80088a6:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
 80088aa:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
 80088ae:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
 80088b2:	f888 c004 	strb.w	ip, [r8, #4]
 80088b6:	3201      	adds	r2, #1
 80088b8:	f8ae 2000 	strh.w	r2, [lr]
 80088bc:	3301      	adds	r3, #1
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d1db      	bne.n	800887a <test_common+0x5e>
 80088c2:	7b63      	ldrb	r3, [r4, #13]
 80088c4:	7323      	strb	r3, [r4, #12]
 80088c6:	b115      	cbz	r5, 80088ce <test_common+0xb2>
 80088c8:	792a      	ldrb	r2, [r5, #4]
 80088ca:	2a00      	cmp	r2, #0
 80088cc:	d17b      	bne.n	80089c6 <test_common+0x1aa>
 80088ce:	464a      	mov	r2, r9
 80088d0:	4631      	mov	r1, r6
 80088d2:	4620      	mov	r0, r4
 80088d4:	f7ff ff54 	bl	8008780 <cbank_and_vana_calibration.isra.0>
 80088d8:	4682      	mov	sl, r0
 80088da:	2800      	cmp	r0, #0
 80088dc:	f000 811d 	beq.w	8008b1a <test_common+0x2fe>
 80088e0:	7b63      	ldrb	r3, [r4, #13]
 80088e2:	2204      	movs	r2, #4
 80088e4:	7122      	strb	r2, [r4, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d055      	beq.n	8008996 <test_common+0x17a>
 80088ea:	7ba2      	ldrb	r2, [r4, #14]
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	d052      	beq.n	8008996 <test_common+0x17a>
 80088f0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80088f4:	8859      	ldrh	r1, [r3, #2]
 80088f6:	891f      	ldrh	r7, [r3, #8]
 80088f8:	6810      	ldr	r0, [r2, #0]
 80088fa:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 80088fe:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	f8ad 1018 	strh.w	r1, [sp, #24]
 8008908:	2101      	movs	r1, #1
 800890a:	f8ad 701e 	strh.w	r7, [sp, #30]
 800890e:	f8ad 0020 	strh.w	r0, [sp, #32]
 8008912:	7321      	strb	r1, [r4, #12]
 8008914:	f8ad e01a 	strh.w	lr, [sp, #26]
 8008918:	f8ad c01c 	strh.w	ip, [sp, #28]
 800891c:	9305      	str	r3, [sp, #20]
 800891e:	7913      	ldrb	r3, [r2, #4]
 8008920:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8008924:	2700      	movs	r7, #0
 8008926:	e9d6 0100 	ldrd	r0, r1, [r6]
 800892a:	ab03      	add	r3, sp, #12
 800892c:	aa05      	add	r2, sp, #20
 800892e:	e9cd 770a 	strd	r7, r7, [sp, #40]	; 0x28
 8008932:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8008936:	69a7      	ldr	r7, [r4, #24]
 8008938:	f006 fb22 	bl	800ef80 <acc_cpd_supply_test>
 800893c:	4682      	mov	sl, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	f000 80de 	beq.w	8008b00 <test_common+0x2e4>
 8008944:	ab03      	add	r3, sp, #12
 8008946:	f10d 0112 	add.w	r1, sp, #18
 800894a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894e:	2a00      	cmp	r2, #0
 8008950:	bf18      	it	ne
 8008952:	f04f 0a00 	movne.w	sl, #0
 8008956:	428b      	cmp	r3, r1
 8008958:	d1f7      	bne.n	800894a <test_common+0x12e>
 800895a:	7b63      	ldrb	r3, [r4, #13]
 800895c:	e01f      	b.n	800899e <test_common+0x182>
 800895e:	f812 e00a 	ldrb.w	lr, [r2, sl]
 8008962:	45c6      	cmp	lr, r8
 8008964:	f101 0101 	add.w	r1, r1, #1
 8008968:	f102 0201 	add.w	r2, r2, #1
 800896c:	d194      	bne.n	8008898 <test_common+0x7c>
 800896e:	f891 e000 	ldrb.w	lr, [r1]
 8008972:	f1be 0f00 	cmp.w	lr, #0
 8008976:	d08f      	beq.n	8008898 <test_common+0x7c>
 8008978:	f04f 0c00 	mov.w	ip, #0
 800897c:	f884 c00d 	strb.w	ip, [r4, #13]
 8008980:	f04f 0c00 	mov.w	ip, #0
 8008984:	e788      	b.n	8008898 <test_common+0x7c>
 8008986:	f813 200e 	ldrb.w	r2, [r3, lr]
 800898a:	3301      	adds	r3, #1
 800898c:	2d00      	cmp	r5, #0
 800898e:	f47f af5e 	bne.w	800884e <test_common+0x32>
 8008992:	462a      	mov	r2, r5
 8008994:	e75c      	b.n	8008850 <test_common+0x34>
 8008996:	2000      	movs	r0, #0
 8008998:	69a7      	ldr	r7, [r4, #24]
 800899a:	7320      	strb	r0, [r4, #12]
 800899c:	4682      	mov	sl, r0
 800899e:	69e1      	ldr	r1, [r4, #28]
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f000 80cc 	beq.w	8008b3e <test_common+0x322>
 80089a6:	880a      	ldrh	r2, [r1, #0]
 80089a8:	f894 e004 	ldrb.w	lr, [r4, #4]
 80089ac:	486a      	ldr	r0, [pc, #424]	; (8008b58 <test_common+0x33c>)
 80089ae:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
 80089b2:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 80089b6:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 80089ba:	f88c a004 	strb.w	sl, [ip, #4]
 80089be:	3201      	adds	r2, #1
 80089c0:	800a      	strh	r2, [r1, #0]
 80089c2:	7323      	strb	r3, [r4, #12]
 80089c4:	b10d      	cbz	r5, 80089ca <test_common+0x1ae>
 80089c6:	796a      	ldrb	r2, [r5, #5]
 80089c8:	b9ea      	cbnz	r2, 8008a06 <test_common+0x1ea>
 80089ca:	7ba2      	ldrb	r2, [r4, #14]
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	f000 80ad 	beq.w	8008b2c <test_common+0x310>
 80089d2:	2205      	movs	r2, #5
 80089d4:	7122      	strb	r2, [r4, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d151      	bne.n	8008a7e <test_common+0x262>
 80089da:	2300      	movs	r3, #0
 80089dc:	69a6      	ldr	r6, [r4, #24]
 80089de:	7323      	strb	r3, [r4, #12]
 80089e0:	461a      	mov	r2, r3
 80089e2:	69e1      	ldr	r1, [r4, #28]
 80089e4:	2e00      	cmp	r6, #0
 80089e6:	f000 80ac 	beq.w	8008b42 <test_common+0x326>
 80089ea:	880b      	ldrh	r3, [r1, #0]
 80089ec:	f894 c004 	ldrb.w	ip, [r4, #4]
 80089f0:	4f59      	ldr	r7, [pc, #356]	; (8008b58 <test_common+0x33c>)
 80089f2:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 80089f6:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
 80089fa:	f846 7033 	str.w	r7, [r6, r3, lsl #3]
 80089fe:	7102      	strb	r2, [r0, #4]
 8008a00:	3301      	adds	r3, #1
 8008a02:	800b      	strh	r3, [r1, #0]
 8008a04:	b125      	cbz	r5, 8008a10 <test_common+0x1f4>
 8008a06:	f895 a006 	ldrb.w	sl, [r5, #6]
 8008a0a:	f1ba 0f00 	cmp.w	sl, #0
 8008a0e:	d10b      	bne.n	8008a28 <test_common+0x20c>
 8008a10:	7b63      	ldrb	r3, [r4, #13]
 8008a12:	7323      	strb	r3, [r4, #12]
 8008a14:	2206      	movs	r2, #6
 8008a16:	7122      	strb	r2, [r4, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d15f      	bne.n	8008adc <test_common+0x2c0>
 8008a1c:	69e2      	ldr	r2, [r4, #28]
 8008a1e:	8813      	ldrh	r3, [r2, #0]
 8008a20:	3301      	adds	r3, #1
 8008a22:	8013      	strh	r3, [r2, #0]
 8008a24:	f04f 0a01 	mov.w	sl, #1
 8008a28:	4650      	mov	r0, sl
 8008a2a:	b00d      	add	sp, #52	; 0x34
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	2f00      	cmp	r7, #0
 8008a32:	f43f af46 	beq.w	80088c2 <test_common+0xa6>
 8008a36:	2200      	movs	r2, #0
 8008a38:	4696      	mov	lr, r2
 8008a3a:	a901      	add	r1, sp, #4
 8008a3c:	46bc      	mov	ip, r7
 8008a3e:	e729      	b.n	8008894 <test_common+0x78>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	9305      	str	r3, [sp, #20]
 8008a44:	f7fe f9c0 	bl	8006dc8 <acc_rss_integration_get_sensor_reference_frequency>
 8008a48:	a803      	add	r0, sp, #12
 8008a4a:	f04f 0c00 	mov.w	ip, #0
 8008a4e:	9007      	str	r0, [sp, #28]
 8008a50:	6871      	ldr	r1, [r6, #4]
 8008a52:	6830      	ldr	r0, [r6, #0]
 8008a54:	ed8d 0a06 	vstr	s0, [sp, #24]
 8008a58:	ab01      	add	r3, sp, #4
 8008a5a:	aa05      	add	r2, sp, #20
 8008a5c:	f88d c020 	strb.w	ip, [sp, #32]
 8008a60:	f003 f950 	bl	800bd04 <acc_cpd_communication_test>
 8008a64:	4682      	mov	sl, r0
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f47f af01 	bne.w	800886e <test_common+0x52>
 8008a6c:	4b3b      	ldr	r3, [pc, #236]	; (8008b5c <test_common+0x340>)
 8008a6e:	4a3c      	ldr	r2, [pc, #240]	; (8008b60 <test_common+0x344>)
 8008a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a72:	493c      	ldr	r1, [pc, #240]	; (8008b64 <test_common+0x348>)
 8008a74:	4798      	blx	r3
 8008a76:	4650      	mov	r0, sl
 8008a78:	b00d      	add	sp, #52	; 0x34
 8008a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7e:	7ba3      	ldrb	r3, [r4, #14]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0aa      	beq.n	80089da <test_common+0x1be>
 8008a84:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008a88:	88d9      	ldrh	r1, [r3, #6]
 8008a8a:	8898      	ldrh	r0, [r3, #4]
 8008a8c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8008a90:	8859      	ldrh	r1, [r3, #2]
 8008a92:	891b      	ldrh	r3, [r3, #8]
 8008a94:	f8ad 001a 	strh.w	r0, [sp, #26]
 8008a98:	6810      	ldr	r0, [r2, #0]
 8008a9a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008a9e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	f8ad 0020 	strh.w	r0, [sp, #32]
 8008aaa:	7321      	strb	r1, [r4, #12]
 8008aac:	9305      	str	r3, [sp, #20]
 8008aae:	7912      	ldrb	r2, [r2, #4]
 8008ab0:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8008ab4:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008ab8:	ab03      	add	r3, sp, #12
 8008aba:	2600      	movs	r6, #0
 8008abc:	aa05      	add	r2, sp, #20
 8008abe:	9609      	str	r6, [sp, #36]	; 0x24
 8008ac0:	69a6      	ldr	r6, [r4, #24]
 8008ac2:	f003 f8ad 	bl	800bc20 <acc_cpd_clock_test>
 8008ac6:	4682      	mov	sl, r0
 8008ac8:	b1d0      	cbz	r0, 8008b00 <test_common+0x2e4>
 8008aca:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008ace:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	bf0c      	ite	eq
 8008ad6:	2201      	moveq	r2, #1
 8008ad8:	2200      	movne	r2, #0
 8008ada:	e782      	b.n	80089e2 <test_common+0x1c6>
 8008adc:	69a5      	ldr	r5, [r4, #24]
 8008ade:	6820      	ldr	r0, [r4, #0]
 8008ae0:	f005 fc4c 	bl	800e37c <acc_cpd_power_cycle_test>
 8008ae4:	69e2      	ldr	r2, [r4, #28]
 8008ae6:	2d00      	cmp	r5, #0
 8008ae8:	d02d      	beq.n	8008b46 <test_common+0x32a>
 8008aea:	7924      	ldrb	r4, [r4, #4]
 8008aec:	491a      	ldr	r1, [pc, #104]	; (8008b58 <test_common+0x33c>)
 8008aee:	8813      	ldrh	r3, [r2, #0]
 8008af0:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8008af4:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
 8008af8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008afc:	7128      	strb	r0, [r5, #4]
 8008afe:	e78f      	b.n	8008a20 <test_common+0x204>
 8008b00:	7921      	ldrb	r1, [r4, #4]
 8008b02:	4a16      	ldr	r2, [pc, #88]	; (8008b5c <test_common+0x340>)
 8008b04:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <test_common+0x33c>)
 8008b06:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008b08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b0c:	4a16      	ldr	r2, [pc, #88]	; (8008b68 <test_common+0x34c>)
 8008b0e:	4915      	ldr	r1, [pc, #84]	; (8008b64 <test_common+0x348>)
 8008b10:	47a0      	blx	r4
 8008b12:	4650      	mov	r0, sl
 8008b14:	b00d      	add	sp, #52	; 0x34
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	4b10      	ldr	r3, [pc, #64]	; (8008b5c <test_common+0x340>)
 8008b1c:	4a13      	ldr	r2, [pc, #76]	; (8008b6c <test_common+0x350>)
 8008b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b20:	4910      	ldr	r1, [pc, #64]	; (8008b64 <test_common+0x348>)
 8008b22:	4798      	blx	r3
 8008b24:	4650      	mov	r0, sl
 8008b26:	b00d      	add	sp, #52	; 0x34
 8008b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2c:	464a      	mov	r2, r9
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4620      	mov	r0, r4
 8008b32:	f7ff fe25 	bl	8008780 <cbank_and_vana_calibration.isra.0>
 8008b36:	4682      	mov	sl, r0
 8008b38:	b138      	cbz	r0, 8008b4a <test_common+0x32e>
 8008b3a:	7b63      	ldrb	r3, [r4, #13]
 8008b3c:	e749      	b.n	80089d2 <test_common+0x1b6>
 8008b3e:	880a      	ldrh	r2, [r1, #0]
 8008b40:	e73d      	b.n	80089be <test_common+0x1a2>
 8008b42:	880b      	ldrh	r3, [r1, #0]
 8008b44:	e75c      	b.n	8008a00 <test_common+0x1e4>
 8008b46:	8813      	ldrh	r3, [r2, #0]
 8008b48:	e76a      	b.n	8008a20 <test_common+0x204>
 8008b4a:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <test_common+0x340>)
 8008b4c:	4a08      	ldr	r2, [pc, #32]	; (8008b70 <test_common+0x354>)
 8008b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b50:	4904      	ldr	r1, [pc, #16]	; (8008b64 <test_common+0x348>)
 8008b52:	4798      	blx	r3
 8008b54:	e768      	b.n	8008a28 <test_common+0x20c>
 8008b56:	bf00      	nop
 8008b58:	080163fc 	.word	0x080163fc
 8008b5c:	20000640 	.word	0x20000640
 8008b60:	0801629c 	.word	0x0801629c
 8008b64:	080162b8 	.word	0x080162b8
 8008b68:	080162ec 	.word	0x080162ec
 8008b6c:	080162d0 	.word	0x080162d0
 8008b70:	080162fc 	.word	0x080162fc
 8008b74:	080163d4 	.word	0x080163d4

08008b78 <test>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	6940      	ldr	r0, [r0, #20]
 8008b7c:	b090      	sub	sp, #64	; 0x40
 8008b7e:	6800      	ldr	r0, [r0, #0]
 8008b80:	9008      	str	r0, [sp, #32]
 8008b82:	2500      	movs	r5, #0
 8008b84:	2001      	movs	r0, #1
 8008b86:	910a      	str	r1, [sp, #40]	; 0x28
 8008b88:	920e      	str	r2, [sp, #56]	; 0x38
 8008b8a:	a905      	add	r1, sp, #20
 8008b8c:	aa01      	add	r2, sp, #4
 8008b8e:	461c      	mov	r4, r3
 8008b90:	f10d 0302 	add.w	r3, sp, #2
 8008b94:	950b      	str	r5, [sp, #44]	; 0x2c
 8008b96:	f8ad 5002 	strh.w	r5, [sp, #2]
 8008b9a:	9509      	str	r5, [sp, #36]	; 0x24
 8008b9c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
 8008ba0:	910c      	str	r1, [sp, #48]	; 0x30
 8008ba2:	920d      	str	r2, [sp, #52]	; 0x34
 8008ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ba6:	2c00      	cmp	r4, #0
 8008ba8:	d02f      	beq.n	8008c0a <test+0x92>
 8008baa:	8823      	ldrh	r3, [r4, #0]
 8008bac:	2b11      	cmp	r3, #17
 8008bae:	d921      	bls.n	8008bf4 <test+0x7c>
 8008bb0:	f241 4108 	movw	r1, #5128	; 0x1408
 8008bb4:	4a1d      	ldr	r2, [pc, #116]	; (8008c2c <test+0xb4>)
 8008bb6:	9104      	str	r1, [sp, #16]
 8008bb8:	f44f 7390 	mov.w	r3, #288	; 0x120
 8008bbc:	f7fe f984 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 8008bc0:	9003      	str	r0, [sp, #12]
 8008bc2:	b168      	cbz	r0, 8008be0 <test+0x68>
 8008bc4:	a903      	add	r1, sp, #12
 8008bc6:	a808      	add	r0, sp, #32
 8008bc8:	f7ff fe28 	bl	800881c <test_common>
 8008bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	8023      	strh	r3, [r4, #0]
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	9803      	ldr	r0, [sp, #12]
 8008bd6:	f7fe f997 	bl	8006f08 <acc_rss_integration_mem_free>
 8008bda:	4630      	mov	r0, r6
 8008bdc:	b010      	add	sp, #64	; 0x40
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <test+0xb8>)
 8008be2:	4a14      	ldr	r2, [pc, #80]	; (8008c34 <test+0xbc>)
 8008be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be6:	4911      	ldr	r1, [pc, #68]	; (8008c2c <test+0xb4>)
 8008be8:	2000      	movs	r0, #0
 8008bea:	4798      	blx	r3
 8008bec:	2600      	movs	r6, #0
 8008bee:	4630      	mov	r0, r6
 8008bf0:	b010      	add	sp, #64	; 0x40
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <test+0xb8>)
 8008bf6:	4a10      	ldr	r2, [pc, #64]	; (8008c38 <test+0xc0>)
 8008bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfa:	490c      	ldr	r1, [pc, #48]	; (8008c2c <test+0xb4>)
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	4798      	blx	r3
 8008c00:	462e      	mov	r6, r5
 8008c02:	4630      	mov	r0, r6
 8008c04:	8025      	strh	r5, [r4, #0]
 8008c06:	b010      	add	sp, #64	; 0x40
 8008c08:	bd70      	pop	{r4, r5, r6, pc}
 8008c0a:	f241 4108 	movw	r1, #5128	; 0x1408
 8008c0e:	4a07      	ldr	r2, [pc, #28]	; (8008c2c <test+0xb4>)
 8008c10:	9104      	str	r1, [sp, #16]
 8008c12:	f44f 7390 	mov.w	r3, #288	; 0x120
 8008c16:	f7fe f957 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 8008c1a:	9003      	str	r0, [sp, #12]
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0df      	beq.n	8008be0 <test+0x68>
 8008c20:	a903      	add	r1, sp, #12
 8008c22:	a808      	add	r0, sp, #32
 8008c24:	f7ff fdfa 	bl	800881c <test_common>
 8008c28:	4606      	mov	r6, r0
 8008c2a:	e7d3      	b.n	8008bd4 <test+0x5c>
 8008c2c:	080162b8 	.word	0x080162b8
 8008c30:	20000640 	.word	0x20000640
 8008c34:	0801633c 	.word	0x0801633c
 8008c38:	08016320 	.word	0x08016320

08008c3c <acc_radar_engine_production_create>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4a0a      	ldr	r2, [pc, #40]	; (8008c68 <acc_radar_engine_production_create+0x2c>)
 8008c40:	4605      	mov	r5, r0
 8008c42:	460e      	mov	r6, r1
 8008c44:	237d      	movs	r3, #125	; 0x7d
 8008c46:	2104      	movs	r1, #4
 8008c48:	2001      	movs	r0, #1
 8008c4a:	f7fe f93d 	bl	8006ec8 <acc_rss_integration_mem_calloc_debug>
 8008c4e:	4604      	mov	r4, r0
 8008c50:	6168      	str	r0, [r5, #20]
 8008c52:	b140      	cbz	r0, 8008c66 <acc_radar_engine_production_create+0x2a>
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7fe f9f7 	bl	8007048 <acc_base_configuration_sensor_get>
 8008c5a:	4a04      	ldr	r2, [pc, #16]	; (8008c6c <acc_radar_engine_production_create+0x30>)
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <acc_radar_engine_production_create+0x34>)
 8008c5e:	6020      	str	r0, [r4, #0]
 8008c60:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8008c64:	2001      	movs	r0, #1
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	080162b8 	.word	0x080162b8
 8008c6c:	080163d8 	.word	0x080163d8
 8008c70:	08008b79 	.word	0x08008b79

08008c74 <acc_radar_engine_common_get_timeout_ms>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	4604      	mov	r4, r0
 8008c78:	f7fe fb4a 	bl	8007310 <acc_base_configuration_repetition_mode_get>
 8008c7c:	2801      	cmp	r0, #1
 8008c7e:	d00d      	beq.n	8008c9c <acc_radar_engine_common_get_timeout_ms+0x28>
 8008c80:	4620      	mov	r0, r4
 8008c82:	f7fe fb4f 	bl	8007324 <acc_base_configuration_update_rate_get>
 8008c86:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8008ca4 <acc_radar_engine_common_get_timeout_ms+0x30>
 8008c8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008c8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c96:	ee17 0a90 	vmov	r0, s15
 8008c9a:	bd10      	pop	{r4, pc}
 8008c9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	bf00      	nop
 8008ca4:	44fa0000 	.word	0x44fa0000

08008ca8 <acc_radar_engine_common_frequency_to_main_clk>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	ed2d 8b02 	vpush	{d8}
 8008cae:	4604      	mov	r4, r0
 8008cb0:	eeb0 8a40 	vmov.f32	s16, s0
 8008cb4:	460d      	mov	r5, r1
 8008cb6:	f7fe f887 	bl	8006dc8 <acc_rss_integration_get_sensor_reference_frequency>
 8008cba:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8008cbe:	ecbd 8b02 	vpop	{d8}
 8008cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc6:	ee17 3a90 	vmov	r3, s15
 8008cca:	0c1a      	lsrs	r2, r3, #16
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	602a      	str	r2, [r5, #0]
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}

08008cd4 <get_dt>:
 8008cd4:	b508      	push	{r3, lr}
 8008cd6:	ed2d 8b02 	vpush	{d8}
 8008cda:	ee08 0a10 	vmov	s16, r0
 8008cde:	f7fe f873 	bl	8006dc8 <acc_rss_integration_get_sensor_reference_frequency>
 8008ce2:	eef0 8a40 	vmov.f32	s17, s0
 8008ce6:	f001 ff55 	bl	800ab94 <acc_cpd_pll_divisors_ref_divisor>
 8008cea:	ee28 0a80 	vmul.f32	s0, s17, s0
 8008cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cf2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008cf6:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8008cfa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008cfe:	ecbd 8b02 	vpop	{d8}
 8008d02:	bd08      	pop	{r3, pc}

08008d04 <acc_radar_engine_common_sweep_w_dly_initialize_range>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	ed2d 8b06 	vpush	{d8-d10}
 8008d0c:	b089      	sub	sp, #36	; 0x24
 8008d0e:	4689      	mov	r9, r1
 8008d10:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008d12:	f89d a064 	ldrb.w	sl, [sp, #100]	; 0x64
 8008d16:	f9bd b066 	ldrsh.w	fp, [sp, #102]	; 0x66
 8008d1a:	9306      	str	r3, [sp, #24]
 8008d1c:	4617      	mov	r7, r2
 8008d1e:	4680      	mov	r8, r0
 8008d20:	f7fe fb9c 	bl	800745c <acc_base_configuration_use_point_range_get>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d03d      	beq.n	8008da4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xa0>
 8008d28:	4640      	mov	r0, r8
 8008d2a:	f7fe fad9 	bl	80072e0 <acc_base_configuration_point_start_get>
 8008d2e:	4605      	mov	r5, r0
 8008d30:	4640      	mov	r0, r8
 8008d32:	f7fe fae1 	bl	80072f8 <acc_base_configuration_point_length_get>
 8008d36:	182c      	adds	r4, r5, r0
 8008d38:	f1ba 0f00 	cmp.w	sl, #0
 8008d3c:	d02f      	beq.n	8008d9e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x9a>
 8008d3e:	f06f 020b 	mvn.w	r2, #11
 8008d42:	4593      	cmp	fp, r2
 8008d44:	bfb8      	it	lt
 8008d46:	4693      	movlt	fp, r2
 8008d48:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 8008d4c:	b31a      	cbz	r2, 8008d96 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x92>
 8008d4e:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 8008d52:	9307      	str	r3, [sp, #28]
 8008d54:	4640      	mov	r0, r8
 8008d56:	f7fe fbd5 	bl	8007504 <acc_base_configuration_downsampling_factor_get>
 8008d5a:	2801      	cmp	r0, #1
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	d90a      	bls.n	8008d76 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x72>
 8008d60:	2802      	cmp	r0, #2
 8008d62:	f000 8137 	beq.w	8008fd4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2d0>
 8008d66:	1b60      	subs	r0, r4, r5
 8008d68:	fb90 f2fa 	sdiv	r2, r0, sl
 8008d6c:	fb0a 0a12 	mls	sl, sl, r2, r0
 8008d70:	f1ba 0f00 	cmp.w	sl, #0
 8008d74:	dc55      	bgt.n	8008e22 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x11e>
 8008d76:	42ac      	cmp	r4, r5
 8008d78:	da61      	bge.n	8008e3e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13a>
 8008d7a:	4ba6      	ldr	r3, [pc, #664]	; (8009014 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x310>)
 8008d7c:	4aa6      	ldr	r2, [pc, #664]	; (8009018 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x314>)
 8008d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d80:	49a6      	ldr	r1, [pc, #664]	; (800901c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x318>)
 8008d82:	2000      	movs	r0, #0
 8008d84:	4798      	blx	r3
 8008d86:	f04f 0a00 	mov.w	sl, #0
 8008d8a:	4650      	mov	r0, sl
 8008d8c:	b009      	add	sp, #36	; 0x24
 8008d8e:	ecbd 8b06 	vpop	{d8-d10}
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d96:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 8008d9a:	9307      	str	r3, [sp, #28]
 8008d9c:	e7da      	b.n	8008d54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x50>
 8008d9e:	f06f 0b0b 	mvn.w	fp, #11
 8008da2:	e7d1      	b.n	8008d48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x44>
 8008da4:	4640      	mov	r0, r8
 8008da6:	f7fe f965 	bl	8007074 <acc_base_configuration_requested_start_get>
 8008daa:	4640      	mov	r0, r8
 8008dac:	eeb0 8a40 	vmov.f32	s16, s0
 8008db0:	f7fe f982 	bl	80070b8 <acc_base_configuration_requested_length_get>
 8008db4:	4630      	mov	r0, r6
 8008db6:	ee78 8a00 	vadd.f32	s17, s16, s0
 8008dba:	f7ff ff8b 	bl	8008cd4 <get_dt>
 8008dbe:	eddf 9a98 	vldr	s19, [pc, #608]	; 8009020 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x31c>
 8008dc2:	ee38 7a08 	vadd.f32	s14, s16, s16
 8008dc6:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008dca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008dce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd8:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8008ddc:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008de0:	bf54      	ite	pl
 8008de2:	eeb0 7a49 	vmovpl.f32	s14, s18
 8008de6:	eeb0 7a48 	vmovmi.f32	s14, s16
 8008dea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008df2:	ee17 5a90 	vmov	r5, s15
 8008df6:	f7ff ff6d 	bl	8008cd4 <get_dt>
 8008dfa:	ee38 7aa8 	vadd.f32	s14, s17, s17
 8008dfe:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008e02:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008e06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0e:	bf58      	it	pl
 8008e10:	eeb0 8a49 	vmovpl.f32	s16, s18
 8008e14:	ee37 8a88 	vadd.f32	s16, s15, s16
 8008e18:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008e1c:	ee17 4a90 	vmov	r4, s15
 8008e20:	e78a      	b.n	8008d38 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x34>
 8008e22:	f7fe f889 	bl	8006f38 <acc_rss_integration_log_level>
 8008e26:	2801      	cmp	r0, #1
 8008e28:	d905      	bls.n	8008e36 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x132>
 8008e2a:	497a      	ldr	r1, [pc, #488]	; (8009014 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x310>)
 8008e2c:	4a7d      	ldr	r2, [pc, #500]	; (8009024 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x320>)
 8008e2e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008e30:	497a      	ldr	r1, [pc, #488]	; (800901c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x318>)
 8008e32:	2002      	movs	r0, #2
 8008e34:	4798      	blx	r3
 8008e36:	eba4 040a 	sub.w	r4, r4, sl
 8008e3a:	42ac      	cmp	r4, r5
 8008e3c:	db9d      	blt.n	8008d7a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x76>
 8008e3e:	4640      	mov	r0, r8
 8008e40:	f7fe fb54 	bl	80074ec <acc_base_configuration_ignore_range_limits_get>
 8008e44:	4682      	mov	sl, r0
 8008e46:	b970      	cbnz	r0, 8008e66 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x162>
 8008e48:	fb0b fb06 	mul.w	fp, fp, r6
 8008e4c:	45ab      	cmp	fp, r5
 8008e4e:	f300 80ef 	bgt.w	8009030 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x32c>
 8008e52:	9b07      	ldr	r3, [sp, #28]
 8008e54:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008e58:	f1ab 0b4b 	sub.w	fp, fp, #75	; 0x4b
 8008e5c:	fb06 fb0b 	mul.w	fp, r6, fp
 8008e60:	455c      	cmp	r4, fp
 8008e62:	f300 8217 	bgt.w	8009294 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x590>
 8008e66:	4640      	mov	r0, r8
 8008e68:	f7fe fb4c 	bl	8007504 <acc_base_configuration_downsampling_factor_get>
 8008e6c:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 8008e70:	4683      	mov	fp, r0
 8008e72:	2a00      	cmp	r2, #0
 8008e74:	f000 80bd 	beq.w	8008ff2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ee>
 8008e78:	f8b8 e030 	ldrh.w	lr, [r8, #48]	; 0x30
 8008e7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008e7e:	fb95 f1fb 	sdiv	r1, r5, fp
 8008e82:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 8008e86:	fb92 f2f6 	sdiv	r2, r2, r6
 8008e8a:	eba2 72d4 	sub.w	r2, r2, r4, lsr #31
 8008e8e:	3201      	adds	r2, #1
 8008e90:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
 8008e94:	fb90 f0f6 	sdiv	r0, r0, r6
 8008e98:	eba0 70d5 	sub.w	r0, r0, r5, lsr #31
 8008e9c:	1a12      	subs	r2, r2, r0
 8008e9e:	fb0b 5111 	mls	r1, fp, r1, r5
 8008ea2:	b292      	uxth	r2, r2
 8008ea4:	4459      	add	r1, fp
 8008ea6:	fbb2 fcf3 	udiv	ip, r2, r3
 8008eaa:	80fa      	strh	r2, [r7, #6]
 8008eac:	fb03 2a1c 	mls	sl, r3, ip, r2
 8008eb0:	fb91 f2fb 	sdiv	r2, r1, fp
 8008eb4:	fb0b 1112 	mls	r1, fp, r2, r1
 8008eb8:	f8a7 e000 	strh.w	lr, [r7]
 8008ebc:	80b8      	strh	r0, [r7, #4]
 8008ebe:	fa1f fc8c 	uxth.w	ip, ip
 8008ec2:	8079      	strh	r1, [r7, #2]
 8008ec4:	f1ba 0f00 	cmp.w	sl, #0
 8008ec8:	d001      	beq.n	8008ece <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1ca>
 8008eca:	f10c 0c01 	add.w	ip, ip, #1
 8008ece:	f8a7 c008 	strh.w	ip, [r7, #8]
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	f7fe f91e 	bl	8007114 <acc_base_configuration_power_save_mode_get>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4640      	mov	r0, r8
 8008edc:	9207      	str	r2, [sp, #28]
 8008ede:	f7fe fa17 	bl	8007310 <acc_base_configuration_repetition_mode_get>
 8008ee2:	9a07      	ldr	r2, [sp, #28]
 8008ee4:	2a04      	cmp	r2, #4
 8008ee6:	d001      	beq.n	8008eec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1e8>
 8008ee8:	2801      	cmp	r0, #1
 8008eea:	d004      	beq.n	8008ef6 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1f2>
 8008eec:	88fb      	ldrh	r3, [r7, #6]
 8008eee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	f200 808c 	bhi.w	800900e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x30a>
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f7ff feec 	bl	8008cd4 <get_dt>
 8008efc:	ee07 ba90 	vmov	s15, fp
 8008f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f04:	4630      	mov	r0, r6
 8008f06:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008f0a:	eddf 8a45 	vldr	s17, [pc, #276]	; 8009020 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x31c>
 8008f0e:	ed89 0a03 	vstr	s0, [r9, #12]
 8008f12:	f7ff fedf 	bl	8008cd4 <get_dt>
 8008f16:	ee07 5a90 	vmov	s15, r5
 8008f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f1e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008f22:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008f26:	4630      	mov	r0, r6
 8008f28:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008f2c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8008f30:	edc9 7a00 	vstr	s15, [r9]
 8008f34:	f7ff fece 	bl	8008cd4 <get_dt>
 8008f38:	fb95 f3f6 	sdiv	r3, r5, r6
 8008f3c:	ee07 4a90 	vmov	s15, r4
 8008f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f44:	ed99 7a00 	vldr	s14, [r9]
 8008f48:	88fa      	ldrh	r2, [r7, #6]
 8008f4a:	9806      	ldr	r0, [sp, #24]
 8008f4c:	8939      	ldrh	r1, [r7, #8]
 8008f4e:	f8a9 1018 	strh.w	r1, [r9, #24]
 8008f52:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008f56:	1b64      	subs	r4, r4, r5
 8008f58:	ee20 0a28 	vmul.f32	s0, s0, s17
 8008f5c:	fb06 5513 	mls	r5, r6, r3, r5
 8008f60:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008f64:	fbb4 f4fb 	udiv	r4, r4, fp
 8008f68:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008f6c:	3401      	adds	r4, #1
 8008f6e:	4435      	add	r5, r6
 8008f70:	b2a4      	uxth	r4, r4
 8008f72:	ed89 0a02 	vstr	s0, [r9, #8]
 8008f76:	f8a9 4016 	strh.w	r4, [r9, #22]
 8008f7a:	ed89 7a01 	vstr	s14, [r9, #4]
 8008f7e:	fb95 f3f6 	sdiv	r3, r5, r6
 8008f82:	fb06 5513 	mls	r5, r6, r3, r5
 8008f86:	fb02 f306 	mul.w	r3, r2, r6
 8008f8a:	fbb3 f3fb 	udiv	r3, r3, fp
 8008f8e:	8003      	strh	r3, [r0, #0]
 8008f90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008f92:	fb95 f5fb 	sdiv	r5, r5, fp
 8008f96:	4293      	cmp	r3, r2
 8008f98:	fbb6 f6fb 	udiv	r6, r6, fp
 8008f9c:	8084      	strh	r4, [r0, #4]
 8008f9e:	8102      	strh	r2, [r0, #8]
 8008fa0:	8201      	strh	r1, [r0, #16]
 8008fa2:	8045      	strh	r5, [r0, #2]
 8008fa4:	80c6      	strh	r6, [r0, #6]
 8008fa6:	d227      	bcs.n	8008ff8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f4>
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	8283      	strh	r3, [r0, #20]
 8008fac:	f1ba 0f00 	cmp.w	sl, #0
 8008fb0:	d006      	beq.n	8008fc0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2bc>
 8008fb2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008fb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fba:	fb01 2213 	mls	r2, r1, r3, r2
 8008fbe:	b293      	uxth	r3, r2
 8008fc0:	9a06      	ldr	r2, [sp, #24]
 8008fc2:	f04f 0a01 	mov.w	sl, #1
 8008fc6:	4650      	mov	r0, sl
 8008fc8:	82d3      	strh	r3, [r2, #22]
 8008fca:	b009      	add	sp, #36	; 0x24
 8008fcc:	ecbd 8b06 	vpop	{d8-d10}
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd4:	07eb      	lsls	r3, r5, #31
 8008fd6:	f53f aec6 	bmi.w	8008d66 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8008fda:	f7fd ffad 	bl	8006f38 <acc_rss_integration_log_level>
 8008fde:	2801      	cmp	r0, #1
 8008fe0:	d905      	bls.n	8008fee <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ea>
 8008fe2:	490c      	ldr	r1, [pc, #48]	; (8009014 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x310>)
 8008fe4:	4a10      	ldr	r2, [pc, #64]	; (8009028 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x324>)
 8008fe6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008fe8:	490c      	ldr	r1, [pc, #48]	; (800901c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x318>)
 8008fea:	4650      	mov	r0, sl
 8008fec:	4798      	blx	r3
 8008fee:	3501      	adds	r5, #1
 8008ff0:	e6b9      	b.n	8008d66 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8008ff2:	f898 e032 	ldrb.w	lr, [r8, #50]	; 0x32
 8008ff6:	e741      	b.n	8008e7c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x178>
 8008ff8:	9b06      	ldr	r3, [sp, #24]
 8008ffa:	f04f 0a01 	mov.w	sl, #1
 8008ffe:	4650      	mov	r0, sl
 8009000:	829a      	strh	r2, [r3, #20]
 8009002:	82da      	strh	r2, [r3, #22]
 8009004:	b009      	add	sp, #36	; 0x24
 8009006:	ecbd 8b06 	vpop	{d8-d10}
 800900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900e:	4b01      	ldr	r3, [pc, #4]	; (8009014 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x310>)
 8009010:	4a06      	ldr	r2, [pc, #24]	; (800902c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x328>)
 8009012:	e6b4      	b.n	8008d7e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7a>
 8009014:	20000640 	.word	0x20000640
 8009018:	080164a8 	.word	0x080164a8
 800901c:	08016454 	.word	0x08016454
 8009020:	4d8ef3c2 	.word	0x4d8ef3c2
 8009024:	08016474 	.word	0x08016474
 8009028:	0801641c 	.word	0x0801641c
 800902c:	08016558 	.word	0x08016558
 8009030:	4b90      	ldr	r3, [pc, #576]	; (8009274 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x570>)
 8009032:	eddf 9a91 	vldr	s19, [pc, #580]	; 8009278 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x574>
 8009036:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8009038:	ed9f aa8f 	vldr	s20, [pc, #572]	; 8009278 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x574>
 800903c:	eddf aa8e 	vldr	s21, [pc, #568]	; 8009278 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x574>
 8009040:	4630      	mov	r0, r6
 8009042:	f7ff fe47 	bl	8008cd4 <get_dt>
 8009046:	ee07 5a90 	vmov	s15, r5
 800904a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800904e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8009052:	ee29 7a00 	vmul.f32	s14, s18, s0
 8009056:	4a89      	ldr	r2, [pc, #548]	; (800927c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8009058:	4b89      	ldr	r3, [pc, #548]	; (8009280 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 800905a:	ee27 7a29 	vmul.f32	s14, s14, s19
 800905e:	4630      	mov	r0, r6
 8009060:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009064:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906c:	bf4c      	ite	mi
 800906e:	4690      	movmi	r8, r2
 8009070:	4698      	movpl	r8, r3
 8009072:	f7ff fe2f 	bl	8008cd4 <get_dt>
 8009076:	4630      	mov	r0, r6
 8009078:	ee29 8a00 	vmul.f32	s16, s18, s0
 800907c:	f7ff fe2a 	bl	8008cd4 <get_dt>
 8009080:	ee29 0a00 	vmul.f32	s0, s18, s0
 8009084:	ee28 8a29 	vmul.f32	s16, s16, s19
 8009088:	ee60 7a29 	vmul.f32	s15, s0, s19
 800908c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009090:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009094:	eddf 9a7b 	vldr	s19, [pc, #492]	; 8009284 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>
 8009098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800909c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a0:	4630      	mov	r0, r6
 80090a2:	bf48      	it	mi
 80090a4:	eeb1 8a48 	vnegmi.f32	s16, s16
 80090a8:	f7ff fe14 	bl	8008cd4 <get_dt>
 80090ac:	ee38 8a29 	vadd.f32	s16, s16, s19
 80090b0:	4630      	mov	r0, r6
 80090b2:	eefc 9ac8 	vcvt.u32.f32	s19, s16
 80090b6:	ee29 8a00 	vmul.f32	s16, s18, s0
 80090ba:	f7ff fe0b 	bl	8008cd4 <get_dt>
 80090be:	ee29 0a00 	vmul.f32	s0, s18, s0
 80090c2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80090c6:	ee60 7a0a 	vmul.f32	s15, s0, s20
 80090ca:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80090ce:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80090d2:	ee28 8a28 	vmul.f32	s16, s16, s17
 80090d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090de:	4630      	mov	r0, r6
 80090e0:	bf48      	it	mi
 80090e2:	eeb1 8a48 	vnegmi.f32	s16, s16
 80090e6:	f7ff fdf5 	bl	8008cd4 <get_dt>
 80090ea:	eddf 8a66 	vldr	s17, [pc, #408]	; 8009284 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>
 80090ee:	4630      	mov	r0, r6
 80090f0:	ee78 8a28 	vadd.f32	s17, s16, s17
 80090f4:	ee29 8a00 	vmul.f32	s16, s18, s0
 80090f8:	f7ff fdec 	bl	8008cd4 <get_dt>
 80090fc:	ee29 0a00 	vmul.f32	s0, s18, s0
 8009100:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8009104:	ee60 7a2a 	vmul.f32	s15, s0, s21
 8009108:	ee28 8a2a 	vmul.f32	s16, s16, s21
 800910c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8009110:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8009114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911c:	eddf 7a59 	vldr	s15, [pc, #356]	; 8009284 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>
 8009120:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8009288 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8009124:	ed9f 9a54 	vldr	s18, [pc, #336]	; 8009278 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x574>
 8009128:	eddf aa53 	vldr	s21, [pc, #332]	; 8009278 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x574>
 800912c:	bf48      	it	mi
 800912e:	eeb1 8a48 	vnegmi.f32	s16, s16
 8009132:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009136:	ee06 ba90 	vmov	s13, fp
 800913a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800913e:	4630      	mov	r0, r6
 8009140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009144:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 8009148:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800914c:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8009150:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009154:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8009158:	ee17 4a90 	vmov	r4, s15
 800915c:	f7ff fdba 	bl	8008cd4 <get_dt>
 8009160:	ee68 7a00 	vmul.f32	s15, s16, s0
 8009164:	4b45      	ldr	r3, [pc, #276]	; (800927c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8009166:	4a46      	ldr	r2, [pc, #280]	; (8009280 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8009168:	ee67 7a89 	vmul.f32	s15, s15, s18
 800916c:	4630      	mov	r0, r6
 800916e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8009172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917a:	bf4c      	ite	mi
 800917c:	4699      	movmi	r9, r3
 800917e:	4691      	movpl	r9, r2
 8009180:	f7ff fda8 	bl	8008cd4 <get_dt>
 8009184:	4630      	mov	r0, r6
 8009186:	ee68 8a00 	vmul.f32	s17, s16, s0
 800918a:	f7ff fda3 	bl	8008cd4 <get_dt>
 800918e:	ee68 7a00 	vmul.f32	s15, s16, s0
 8009192:	ee68 8a89 	vmul.f32	s17, s17, s18
 8009196:	ee67 7a89 	vmul.f32	s15, s15, s18
 800919a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800919e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80091a2:	4630      	mov	r0, r6
 80091a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ac:	eddf 7a35 	vldr	s15, [pc, #212]	; 8009284 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>
 80091b0:	ed9f aa31 	vldr	s20, [pc, #196]	; 8009278 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x574>
 80091b4:	bf48      	it	mi
 80091b6:	eef1 8a68 	vnegmi.f32	s17, s17
 80091ba:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80091be:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80091c2:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80091c6:	ee17 5a90 	vmov	r5, s15
 80091ca:	f7ff fd83 	bl	8008cd4 <get_dt>
 80091ce:	4630      	mov	r0, r6
 80091d0:	ee68 8a00 	vmul.f32	s17, s16, s0
 80091d4:	f7ff fd7e 	bl	8008cd4 <get_dt>
 80091d8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80091dc:	ee68 8a8a 	vmul.f32	s17, s17, s20
 80091e0:	ee60 7a0a 	vmul.f32	s15, s0, s20
 80091e4:	ee68 8a89 	vmul.f32	s17, s17, s18
 80091e8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80091ec:	4630      	mov	r0, r6
 80091ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f6:	eddf 7a23 	vldr	s15, [pc, #140]	; 8009284 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>
 80091fa:	bf48      	it	mi
 80091fc:	eef1 8a68 	vnegmi.f32	s17, s17
 8009200:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8009204:	f7ff fd66 	bl	8008cd4 <get_dt>
 8009208:	4630      	mov	r0, r6
 800920a:	ee28 9a00 	vmul.f32	s18, s16, s0
 800920e:	f7ff fd61 	bl	8008cd4 <get_dt>
 8009212:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009216:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800921a:	ee60 7a2a 	vmul.f32	s15, s0, s21
 800921e:	ee29 9a2a 	vmul.f32	s18, s18, s21
 8009222:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8009226:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800922a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800922e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009232:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009284 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>
 8009236:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009288 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 800923a:	4a14      	ldr	r2, [pc, #80]	; (800928c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>)
 800923c:	9503      	str	r5, [sp, #12]
 800923e:	bf48      	it	mi
 8009240:	eeb1 9a49 	vnegmi.f32	s18, s18
 8009244:	ee79 7a27 	vadd.f32	s15, s18, s15
 8009248:	f8cd 9008 	str.w	r9, [sp, #8]
 800924c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009250:	9401      	str	r4, [sp, #4]
 8009252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009256:	edcd 9a00 	vstr	s19, [sp]
 800925a:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800925e:	4643      	mov	r3, r8
 8009260:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009264:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 8009268:	4909      	ldr	r1, [pc, #36]	; (8009290 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x58c>)
 800926a:	edcd 8a04 	vstr	s17, [sp, #16]
 800926e:	2000      	movs	r0, #0
 8009270:	47b8      	blx	r7
 8009272:	e58a      	b.n	8008d8a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x86>
 8009274:	20000640 	.word	0x20000640
 8009278:	4d8ef3c2 	.word	0x4d8ef3c2
 800927c:	08016418 	.word	0x08016418
 8009280:	08018e44 	.word	0x08018e44
 8009284:	350637bd 	.word	0x350637bd
 8009288:	49742400 	.word	0x49742400
 800928c:	080164d8 	.word	0x080164d8
 8009290:	08016454 	.word	0x08016454
 8009294:	4b8d      	ldr	r3, [pc, #564]	; (80094cc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7c8>)
 8009296:	eddf 9a8e 	vldr	s19, [pc, #568]	; 80094d0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7cc>
 800929a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800929c:	ed9f aa8c 	vldr	s20, [pc, #560]	; 80094d0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7cc>
 80092a0:	eddf aa8b 	vldr	s21, [pc, #556]	; 80094d0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7cc>
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff fd15 	bl	8008cd4 <get_dt>
 80092aa:	ee07 4a90 	vmov	s15, r4
 80092ae:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 80092b2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80092b6:	ee29 7a00 	vmul.f32	s14, s18, s0
 80092ba:	4a86      	ldr	r2, [pc, #536]	; (80094d4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d0>)
 80092bc:	4b86      	ldr	r3, [pc, #536]	; (80094d8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d4>)
 80092be:	ee27 7a29 	vmul.f32	s14, s14, s19
 80092c2:	4630      	mov	r0, r6
 80092c4:	ee27 7a28 	vmul.f32	s14, s14, s17
 80092c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80092cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d0:	bf4c      	ite	mi
 80092d2:	4690      	movmi	r8, r2
 80092d4:	4698      	movpl	r8, r3
 80092d6:	f7ff fcfd 	bl	8008cd4 <get_dt>
 80092da:	4630      	mov	r0, r6
 80092dc:	ee29 8a00 	vmul.f32	s16, s18, s0
 80092e0:	f7ff fcf8 	bl	8008cd4 <get_dt>
 80092e4:	ee29 0a00 	vmul.f32	s0, s18, s0
 80092e8:	ee28 8a29 	vmul.f32	s16, s16, s19
 80092ec:	ee60 7a29 	vmul.f32	s15, s0, s19
 80092f0:	ee28 8a28 	vmul.f32	s16, s16, s17
 80092f4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80092f8:	eddf 9a78 	vldr	s19, [pc, #480]	; 80094dc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d8>
 80092fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009304:	4630      	mov	r0, r6
 8009306:	bf48      	it	mi
 8009308:	eeb1 8a48 	vnegmi.f32	s16, s16
 800930c:	f7ff fce2 	bl	8008cd4 <get_dt>
 8009310:	ee38 8a29 	vadd.f32	s16, s16, s19
 8009314:	4630      	mov	r0, r6
 8009316:	eefc 9ac8 	vcvt.u32.f32	s19, s16
 800931a:	ee29 8a00 	vmul.f32	s16, s18, s0
 800931e:	f7ff fcd9 	bl	8008cd4 <get_dt>
 8009322:	ee29 0a00 	vmul.f32	s0, s18, s0
 8009326:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800932a:	ee60 7a0a 	vmul.f32	s15, s0, s20
 800932e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8009332:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009336:	ee28 8a28 	vmul.f32	s16, s16, s17
 800933a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800933e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009342:	4630      	mov	r0, r6
 8009344:	bf48      	it	mi
 8009346:	eeb1 8a48 	vnegmi.f32	s16, s16
 800934a:	f7ff fcc3 	bl	8008cd4 <get_dt>
 800934e:	eddf 8a63 	vldr	s17, [pc, #396]	; 80094dc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d8>
 8009352:	4630      	mov	r0, r6
 8009354:	ee78 8a28 	vadd.f32	s17, s16, s17
 8009358:	ee29 8a00 	vmul.f32	s16, s18, s0
 800935c:	f7ff fcba 	bl	8008cd4 <get_dt>
 8009360:	ee29 0a00 	vmul.f32	s0, s18, s0
 8009364:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8009368:	ee60 7a2a 	vmul.f32	s15, s0, s21
 800936c:	ee28 8a2a 	vmul.f32	s16, s16, s21
 8009370:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8009374:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8009378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800937c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009380:	eddf 7a56 	vldr	s15, [pc, #344]	; 80094dc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d8>
 8009384:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80094e0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7dc>
 8009388:	ed9f 9a51 	vldr	s18, [pc, #324]	; 80094d0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7cc>
 800938c:	eddf aa50 	vldr	s21, [pc, #320]	; 80094d0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7cc>
 8009390:	bf48      	it	mi
 8009392:	eeb1 8a48 	vnegmi.f32	s16, s16
 8009396:	ee78 7a27 	vadd.f32	s15, s16, s15
 800939a:	ee06 ba90 	vmov	s13, fp
 800939e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a2:	4630      	mov	r0, r6
 80093a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a8:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 80093ac:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80093b0:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 80093b4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80093b8:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80093bc:	ee17 4a90 	vmov	r4, s15
 80093c0:	f7ff fc88 	bl	8008cd4 <get_dt>
 80093c4:	ee68 7a00 	vmul.f32	s15, s16, s0
 80093c8:	4b42      	ldr	r3, [pc, #264]	; (80094d4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d0>)
 80093ca:	4a43      	ldr	r2, [pc, #268]	; (80094d8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d4>)
 80093cc:	ee67 7a89 	vmul.f32	s15, s15, s18
 80093d0:	4630      	mov	r0, r6
 80093d2:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80093d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093de:	bf4c      	ite	mi
 80093e0:	4699      	movmi	r9, r3
 80093e2:	4691      	movpl	r9, r2
 80093e4:	f7ff fc76 	bl	8008cd4 <get_dt>
 80093e8:	4630      	mov	r0, r6
 80093ea:	ee68 8a00 	vmul.f32	s17, s16, s0
 80093ee:	f7ff fc71 	bl	8008cd4 <get_dt>
 80093f2:	ee68 7a00 	vmul.f32	s15, s16, s0
 80093f6:	ee68 8a89 	vmul.f32	s17, s17, s18
 80093fa:	ee67 7a89 	vmul.f32	s15, s15, s18
 80093fe:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8009402:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8009406:	4630      	mov	r0, r6
 8009408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800940c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009410:	eddf 7a32 	vldr	s15, [pc, #200]	; 80094dc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d8>
 8009414:	ed9f aa2e 	vldr	s20, [pc, #184]	; 80094d0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7cc>
 8009418:	bf48      	it	mi
 800941a:	eef1 8a68 	vnegmi.f32	s17, s17
 800941e:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8009422:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8009426:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800942a:	ee17 5a90 	vmov	r5, s15
 800942e:	f7ff fc51 	bl	8008cd4 <get_dt>
 8009432:	4630      	mov	r0, r6
 8009434:	ee68 8a00 	vmul.f32	s17, s16, s0
 8009438:	f7ff fc4c 	bl	8008cd4 <get_dt>
 800943c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009440:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8009444:	ee60 7a0a 	vmul.f32	s15, s0, s20
 8009448:	ee68 8a89 	vmul.f32	s17, s17, s18
 800944c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009450:	4630      	mov	r0, r6
 8009452:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945a:	eddf 7a20 	vldr	s15, [pc, #128]	; 80094dc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d8>
 800945e:	bf48      	it	mi
 8009460:	eef1 8a68 	vnegmi.f32	s17, s17
 8009464:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8009468:	f7ff fc34 	bl	8008cd4 <get_dt>
 800946c:	4630      	mov	r0, r6
 800946e:	ee28 9a00 	vmul.f32	s18, s16, s0
 8009472:	f7ff fc2f 	bl	8008cd4 <get_dt>
 8009476:	ee28 0a00 	vmul.f32	s0, s16, s0
 800947a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800947e:	ee60 7a2a 	vmul.f32	s15, s0, s21
 8009482:	ee29 9a2a 	vmul.f32	s18, s18, s21
 8009486:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800948a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800948e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009496:	eddf 7a11 	vldr	s15, [pc, #68]	; 80094dc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7d8>
 800949a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80094e0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7dc>
 800949e:	4a11      	ldr	r2, [pc, #68]	; (80094e4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7e0>)
 80094a0:	9503      	str	r5, [sp, #12]
 80094a2:	bf48      	it	mi
 80094a4:	eeb1 9a49 	vnegmi.f32	s18, s18
 80094a8:	ee79 7a27 	vadd.f32	s15, s18, s15
 80094ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80094b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094b4:	9401      	str	r4, [sp, #4]
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	edcd 9a00 	vstr	s19, [sp]
 80094be:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80094c2:	4643      	mov	r3, r8
 80094c4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80094c8:	e6cc      	b.n	8009264 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x560>
 80094ca:	bf00      	nop
 80094cc:	20000640 	.word	0x20000640
 80094d0:	4d8ef3c2 	.word	0x4d8ef3c2
 80094d4:	08016418 	.word	0x08016418
 80094d8:	08018e44 	.word	0x08018e44
 80094dc:	350637bd 	.word	0x350637bd
 80094e0:	49742400 	.word	0x49742400
 80094e4:	08016518 	.word	0x08016518

080094e8 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 80094e8:	8900      	ldrh	r0, [r0, #8]
 80094ea:	2801      	cmp	r0, #1
 80094ec:	bf94      	ite	ls
 80094ee:	2000      	movls	r0, #0
 80094f0:	2001      	movhi	r0, #1
 80094f2:	4770      	bx	lr

080094f4 <internal_buffer_processed_read>:
 80094f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	b085      	sub	sp, #20
 80094fa:	461f      	mov	r7, r3
 80094fc:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8009500:	9101      	str	r1, [sp, #4]
 8009502:	4682      	mov	sl, r0
 8009504:	4689      	mov	r9, r1
 8009506:	4615      	mov	r5, r2
 8009508:	f7fd fc64 	bl	8006dd4 <acc_rss_integration_get_max_spi_transfer_size>
 800950c:	2300      	movs	r3, #0
 800950e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009512:	9302      	str	r3, [sp, #8]
 8009514:	2f00      	cmp	r7, #0
 8009516:	d03d      	beq.n	8009594 <internal_buffer_processed_read+0xa0>
 8009518:	429c      	cmp	r4, r3
 800951a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800951e:	bf14      	ite	ne
 8009520:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8009524:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8009528:	f1a0 0803 	sub.w	r8, r0, #3
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	fa0f fb8b 	sxth.w	fp, fp
 8009532:	e024      	b.n	800957e <internal_buffer_processed_read+0x8a>
 8009534:	b2a6      	uxth	r6, r4
 8009536:	9900      	ldr	r1, [sp, #0]
 8009538:	f8a9 1004 	strh.w	r1, [r9, #4]
 800953c:	1e72      	subs	r2, r6, #1
 800953e:	ea4b 0305 	orr.w	r3, fp, r5
 8009542:	f8a9 2002 	strh.w	r2, [r9, #2]
 8009546:	f8a9 3000 	strh.w	r3, [r9]
 800954a:	4649      	mov	r1, r9
 800954c:	2301      	movs	r3, #1
 800954e:	4650      	mov	r0, sl
 8009550:	1ce2      	adds	r2, r4, #3
 8009552:	f7fd fc6f 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 8009556:	9802      	ldr	r0, [sp, #8]
 8009558:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800955c:	f8c9 0000 	str.w	r0, [r9]
 8009560:	f8a9 3004 	strh.w	r3, [r9, #4]
 8009564:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8009568:	442e      	add	r6, r5
 800956a:	f8d9 0000 	ldr.w	r0, [r9]
 800956e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8009572:	9002      	str	r0, [sp, #8]
 8009574:	1b3f      	subs	r7, r7, r4
 8009576:	b2b5      	uxth	r5, r6
 8009578:	f8ad 300c 	strh.w	r3, [sp, #12]
 800957c:	d00a      	beq.n	8009594 <internal_buffer_processed_read+0xa0>
 800957e:	45b8      	cmp	r8, r7
 8009580:	4644      	mov	r4, r8
 8009582:	bf28      	it	cs
 8009584:	463c      	movcs	r4, r7
 8009586:	45b8      	cmp	r8, r7
 8009588:	d2d4      	bcs.n	8009534 <internal_buffer_processed_read+0x40>
 800958a:	e000      	b.n	800958e <internal_buffer_processed_read+0x9a>
 800958c:	3c01      	subs	r4, #1
 800958e:	07e3      	lsls	r3, r4, #31
 8009590:	d4fc      	bmi.n	800958c <internal_buffer_processed_read+0x98>
 8009592:	e7cf      	b.n	8009534 <internal_buffer_processed_read+0x40>
 8009594:	9801      	ldr	r0, [sp, #4]
 8009596:	3006      	adds	r0, #6
 8009598:	b005      	add	sp, #20
 800959a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959e:	bf00      	nop

080095a0 <acc_sensor_r2_get_max_header_length>:
 80095a0:	2003      	movs	r0, #3
 80095a2:	4770      	bx	lr

080095a4 <acc_sensor_r2_buffer_write>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	ed2d 8b02 	vpush	{d8}
 80095ac:	b083      	sub	sp, #12
 80095ae:	4699      	mov	r9, r3
 80095b0:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 80095b4:	4683      	mov	fp, r0
 80095b6:	468a      	mov	sl, r1
 80095b8:	4615      	mov	r5, r2
 80095ba:	f7fd fc0b 	bl	8006dd4 <acc_rss_integration_get_max_spi_transfer_size>
 80095be:	0880      	lsrs	r0, r0, #2
 80095c0:	1e43      	subs	r3, r0, #1
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	b357      	cbz	r7, 800961c <acc_sensor_r2_buffer_write+0x78>
 80095c6:	f10a 0302 	add.w	r3, sl, #2
 80095ca:	ee08 3a10 	vmov	s16, r3
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	42bb      	cmp	r3, r7
 80095d2:	bf28      	it	cs
 80095d4:	463b      	movcs	r3, r7
 80095d6:	461c      	mov	r4, r3
 80095d8:	005e      	lsls	r6, r3, #1
 80095da:	f445 4380 	orr.w	r3, r5, #16384	; 0x4000
 80095de:	4648      	mov	r0, r9
 80095e0:	ee18 1a10 	vmov	r1, s16
 80095e4:	4622      	mov	r2, r4
 80095e6:	f8aa 3000 	strh.w	r3, [sl]
 80095ea:	3601      	adds	r6, #1
 80095ec:	f7fd fcfa 	bl	8006fe4 <acc_utils_uint32_to_transfer_buffer>
 80095f0:	4425      	add	r5, r4
 80095f2:	4632      	mov	r2, r6
 80095f4:	2300      	movs	r3, #0
 80095f6:	4651      	mov	r1, sl
 80095f8:	4658      	mov	r0, fp
 80095fa:	f7fd fc1b 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 80095fe:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 8009602:	b2ad      	uxth	r5, r5
 8009604:	f1b8 0f00 	cmp.w	r8, #0
 8009608:	d006      	beq.n	8009618 <acc_sensor_r2_buffer_write+0x74>
 800960a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800960e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8009612:	3301      	adds	r3, #1
 8009614:	e9c8 6300 	strd	r6, r3, [r8]
 8009618:	1b3f      	subs	r7, r7, r4
 800961a:	d1d8      	bne.n	80095ce <acc_sensor_r2_buffer_write+0x2a>
 800961c:	b003      	add	sp, #12
 800961e:	ecbd 8b02 	vpop	{d8}
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	bf00      	nop

08009628 <acc_sensor_r2_buffer_raw_read>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	ed2d 8b02 	vpush	{d8}
 8009630:	b083      	sub	sp, #12
 8009632:	4699      	mov	r9, r3
 8009634:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8009638:	4683      	mov	fp, r0
 800963a:	4688      	mov	r8, r1
 800963c:	4615      	mov	r5, r2
 800963e:	f7fd fbc9 	bl	8006dd4 <acc_rss_integration_get_max_spi_transfer_size>
 8009642:	0880      	lsrs	r0, r0, #2
 8009644:	1e83      	subs	r3, r0, #2
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	b3be      	cbz	r6, 80096ba <acc_sensor_r2_buffer_raw_read+0x92>
 800964a:	42b3      	cmp	r3, r6
 800964c:	bf28      	it	cs
 800964e:	4633      	movcs	r3, r6
 8009650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009654:	461c      	mov	r4, r3
 8009656:	d835      	bhi.n	80096c4 <acc_sensor_r2_buffer_raw_read+0x9c>
 8009658:	f108 0306 	add.w	r3, r8, #6
 800965c:	ee08 3a10 	vmov	s16, r3
 8009660:	e007      	b.n	8009672 <acc_sensor_r2_buffer_raw_read+0x4a>
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	42b3      	cmp	r3, r6
 8009666:	bf28      	it	cs
 8009668:	4633      	movcs	r3, r6
 800966a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800966e:	461c      	mov	r4, r3
 8009670:	d828      	bhi.n	80096c4 <acc_sensor_r2_buffer_raw_read+0x9c>
 8009672:	0063      	lsls	r3, r4, #1
 8009674:	f103 0a03 	add.w	sl, r3, #3
 8009678:	f445 4110 	orr.w	r1, r5, #36864	; 0x9000
 800967c:	3b01      	subs	r3, #1
 800967e:	f8a8 3002 	strh.w	r3, [r8, #2]
 8009682:	4652      	mov	r2, sl
 8009684:	f8a8 1000 	strh.w	r1, [r8]
 8009688:	4658      	mov	r0, fp
 800968a:	4641      	mov	r1, r8
 800968c:	2301      	movs	r3, #1
 800968e:	f7fd fbd1 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 8009692:	ee18 0a10 	vmov	r0, s16
 8009696:	4622      	mov	r2, r4
 8009698:	4649      	mov	r1, r9
 800969a:	f7fd fcb1 	bl	8007000 <acc_utils_transfer_buffer_to_uint32>
 800969e:	b137      	cbz	r7, 80096ae <acc_sensor_r2_buffer_raw_read+0x86>
 80096a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a4:	eb02 024a 	add.w	r2, r2, sl, lsl #1
 80096a8:	3301      	adds	r3, #1
 80096aa:	e9c7 2300 	strd	r2, r3, [r7]
 80096ae:	4425      	add	r5, r4
 80096b0:	1b36      	subs	r6, r6, r4
 80096b2:	b2ad      	uxth	r5, r5
 80096b4:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 80096b8:	d1d3      	bne.n	8009662 <acc_sensor_r2_buffer_raw_read+0x3a>
 80096ba:	b003      	add	sp, #12
 80096bc:	ecbd 8b02 	vpop	{d8}
 80096c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <acc_sensor_r2_buffer_raw_read+0xa4>)
 80096c6:	214e      	movs	r1, #78	; 0x4e
 80096c8:	f7fd fb18 	bl	8006cfc <acc_assert_fail>
 80096cc:	08016584 	.word	0x08016584

080096d0 <acc_sensor_r2_conf_write_instr>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 80096d8:	4604      	mov	r4, r0
 80096da:	9201      	str	r2, [sp, #4]
 80096dc:	f10d 010a 	add.w	r1, sp, #10
 80096e0:	a801      	add	r0, sp, #4
 80096e2:	2201      	movs	r2, #1
 80096e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80096e8:	f7fd fc7c 	bl	8006fe4 <acc_utils_uint32_to_transfer_buffer>
 80096ec:	4620      	mov	r0, r4
 80096ee:	a902      	add	r1, sp, #8
 80096f0:	2300      	movs	r3, #0
 80096f2:	2203      	movs	r2, #3
 80096f4:	f7fd fb9e 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 80096f8:	b004      	add	sp, #16
 80096fa:	bd10      	pop	{r4, pc}

080096fc <acc_sensor_r2_prepare_load_confmem>:
 80096fc:	0849      	lsrs	r1, r1, #1
 80096fe:	b538      	push	{r3, r4, r5, lr}
 8009700:	6010      	str	r0, [r2, #0]
 8009702:	461c      	mov	r4, r3
 8009704:	6019      	str	r1, [r3, #0]
 8009706:	4615      	mov	r5, r2
 8009708:	f7fd fb64 	bl	8006dd4 <acc_rss_integration_get_max_spi_transfer_size>
 800970c:	6821      	ldr	r1, [r4, #0]
 800970e:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8009712:	d807      	bhi.n	8009724 <acc_sensor_r2_prepare_load_confmem+0x28>
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	3901      	subs	r1, #1
 8009718:	f021 0101 	bic.w	r1, r1, #1
 800971c:	3302      	adds	r3, #2
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	6021      	str	r1, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	f7fd fb56 	bl	8006dd4 <acc_rss_integration_get_max_spi_transfer_size>
 8009728:	0841      	lsrs	r1, r0, #1
 800972a:	e7f3      	b.n	8009714 <acc_sensor_r2_prepare_load_confmem+0x18>

0800972c <acc_sensor_r2_load_confmem>:
 800972c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009730:	b083      	sub	sp, #12
 8009732:	1c5d      	adds	r5, r3, #1
 8009734:	4606      	mov	r6, r0
 8009736:	460c      	mov	r4, r1
 8009738:	4617      	mov	r7, r2
 800973a:	f7fd fbfd 	bl	8006f38 <acc_rss_integration_log_level>
 800973e:	2803      	cmp	r0, #3
 8009740:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8009744:	d908      	bls.n	8009758 <acc_sensor_r2_load_confmem+0x2c>
 8009746:	4b11      	ldr	r3, [pc, #68]	; (800978c <acc_sensor_r2_load_confmem+0x60>)
 8009748:	9400      	str	r4, [sp, #0]
 800974a:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800974e:	4a10      	ldr	r2, [pc, #64]	; (8009790 <acc_sensor_r2_load_confmem+0x64>)
 8009750:	4910      	ldr	r1, [pc, #64]	; (8009794 <acc_sensor_r2_load_confmem+0x68>)
 8009752:	4633      	mov	r3, r6
 8009754:	2004      	movs	r0, #4
 8009756:	47c8      	blx	r9
 8009758:	f7fd fb3c 	bl	8006dd4 <acc_rss_integration_get_max_spi_transfer_size>
 800975c:	4540      	cmp	r0, r8
 800975e:	d208      	bcs.n	8009772 <acc_sensor_r2_load_confmem+0x46>
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <acc_sensor_r2_load_confmem+0x60>)
 8009762:	4a0d      	ldr	r2, [pc, #52]	; (8009798 <acc_sensor_r2_load_confmem+0x6c>)
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	490b      	ldr	r1, [pc, #44]	; (8009794 <acc_sensor_r2_load_confmem+0x68>)
 8009768:	2000      	movs	r0, #0
 800976a:	b003      	add	sp, #12
 800976c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009770:	4718      	bx	r3
 8009772:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8009776:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800977a:	4639      	mov	r1, r7
 800977c:	4630      	mov	r0, r6
 800977e:	2300      	movs	r3, #0
 8009780:	803c      	strh	r4, [r7, #0]
 8009782:	b003      	add	sp, #12
 8009784:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009788:	f7fd bb54 	b.w	8006e34 <acc_rss_integration_sensor_device_transfer>
 800978c:	20000640 	.word	0x20000640
 8009790:	08016594 	.word	0x08016594
 8009794:	08016584 	.word	0x08016584
 8009798:	080165bc 	.word	0x080165bc

0800979c <acc_sensor_r2_buffer_processed_verify_size>:
 800979c:	3103      	adds	r1, #3
 800979e:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 80097a2:	bf2c      	ite	cs
 80097a4:	2001      	movcs	r0, #1
 80097a6:	2000      	movcc	r0, #0
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop

080097ac <acc_sensor_r2_buffer_processed_read>:
 80097ac:	b510      	push	{r4, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	2400      	movs	r4, #0
 80097b2:	9400      	str	r4, [sp, #0]
 80097b4:	f7ff fe9e 	bl	80094f4 <internal_buffer_processed_read>
 80097b8:	b002      	add	sp, #8
 80097ba:	bd10      	pop	{r4, pc}

080097bc <acc_sensor_manager_power_on_and_start_sensor>:
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	6986      	ldr	r6, [r0, #24]
 80097c0:	4604      	mov	r4, r0
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7fd fb0c 	bl	8006de0 <acc_rss_integration_sensor_device_power_on>
 80097c8:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 80097ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80097cc:	6819      	ldr	r1, [r3, #0]
 80097ce:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	3b48      	subs	r3, #72	; 0x48
 80097d6:	4419      	add	r1, r3
 80097d8:	1d20      	adds	r0, r4, #4
 80097da:	f000 fe91 	bl	800a500 <acc_sweep_manager_start>
 80097de:	4605      	mov	r5, r0
 80097e0:	b118      	cbz	r0, 80097ea <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 80097e2:	2301      	movs	r3, #1
 80097e4:	70e3      	strb	r3, [r4, #3]
 80097e6:	4628      	mov	r0, r5
 80097e8:	bd70      	pop	{r4, r5, r6, pc}
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7fd fafe 	bl	8006dec <acc_rss_integration_sensor_device_power_off>
 80097f0:	4628      	mov	r0, r5
 80097f2:	bd70      	pop	{r4, r5, r6, pc}
 80097f4:	20000244 	.word	0x20000244

080097f8 <calibrate_sensor>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80098cc <calibrate_sensor+0xd4>
 8009800:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80098d0 <calibrate_sensor+0xd8>
 8009804:	f8d8 3000 	ldr.w	r3, [r8]
 8009808:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 800980c:	00e4      	lsls	r4, r4, #3
 800980e:	3c48      	subs	r4, #72	; 0x48
 8009810:	4423      	add	r3, r4
 8009812:	f04f 0900 	mov.w	r9, #0
 8009816:	b085      	sub	sp, #20
 8009818:	460e      	mov	r6, r1
 800981a:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 800981e:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8009822:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8009826:	4607      	mov	r7, r0
 8009828:	4692      	mov	sl, r2
 800982a:	f7fd fad9 	bl	8006de0 <acc_rss_integration_sensor_device_power_on>
 800982e:	4630      	mov	r0, r6
 8009830:	f000 fe42 	bl	800a4b8 <acc_sweep_manager_is_sensor_connected>
 8009834:	b968      	cbnz	r0, 8009852 <calibrate_sensor+0x5a>
 8009836:	4b21      	ldr	r3, [pc, #132]	; (80098bc <calibrate_sensor+0xc4>)
 8009838:	4a21      	ldr	r2, [pc, #132]	; (80098c0 <calibrate_sensor+0xc8>)
 800983a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800983c:	4921      	ldr	r1, [pc, #132]	; (80098c4 <calibrate_sensor+0xcc>)
 800983e:	463b      	mov	r3, r7
 8009840:	4605      	mov	r5, r0
 8009842:	47a0      	blx	r4
 8009844:	4638      	mov	r0, r7
 8009846:	f7fd fad1 	bl	8006dec <acc_rss_integration_sensor_device_power_off>
 800984a:	4628      	mov	r0, r5
 800984c:	b005      	add	sp, #20
 800984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009852:	4639      	mov	r1, r7
 8009854:	200b      	movs	r0, #11
 8009856:	f7fd fba5 	bl	8006fa4 <acc_probes_execute_primitive_probe>
 800985a:	f8d8 2000 	ldr.w	r2, [r8]
 800985e:	f8cd 9004 	str.w	r9, [sp, #4]
 8009862:	4651      	mov	r1, sl
 8009864:	4630      	mov	r0, r6
 8009866:	4422      	add	r2, r4
 8009868:	ab01      	add	r3, sp, #4
 800986a:	f8cd b008 	str.w	fp, [sp, #8]
 800986e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009872:	f000 fe25 	bl	800a4c0 <acc_sweep_manager_calibrate>
 8009876:	4605      	mov	r5, r0
 8009878:	b9c8      	cbnz	r0, 80098ae <calibrate_sensor+0xb6>
 800987a:	4b10      	ldr	r3, [pc, #64]	; (80098bc <calibrate_sensor+0xc4>)
 800987c:	4a12      	ldr	r2, [pc, #72]	; (80098c8 <calibrate_sensor+0xd0>)
 800987e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009880:	4910      	ldr	r1, [pc, #64]	; (80098c4 <calibrate_sensor+0xcc>)
 8009882:	463b      	mov	r3, r7
 8009884:	47b0      	blx	r6
 8009886:	f8d8 3000 	ldr.w	r3, [r8]
 800988a:	441c      	add	r4, r3
 800988c:	9a02      	ldr	r2, [sp, #8]
 800988e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009892:	6462      	str	r2, [r4, #68]	; 0x44
 8009894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009898:	4639      	mov	r1, r7
 800989a:	200c      	movs	r0, #12
 800989c:	f7fd fb82 	bl	8006fa4 <acc_probes_execute_primitive_probe>
 80098a0:	4638      	mov	r0, r7
 80098a2:	f7fd faa3 	bl	8006dec <acc_rss_integration_sensor_device_power_off>
 80098a6:	4628      	mov	r0, r5
 80098a8:	b005      	add	sp, #20
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ae:	f8d8 3000 	ldr.w	r3, [r8]
 80098b2:	441c      	add	r4, r3
 80098b4:	2301      	movs	r3, #1
 80098b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80098ba:	e7e7      	b.n	800988c <calibrate_sensor+0x94>
 80098bc:	20000640 	.word	0x20000640
 80098c0:	080165dc 	.word	0x080165dc
 80098c4:	08016618 	.word	0x08016618
 80098c8:	08016628 	.word	0x08016628
 80098cc:	20000244 	.word	0x20000244
 80098d0:	ff800000 	.word	0xff800000

080098d4 <acc_sensor_manager_hibernate_enter>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4603      	mov	r3, r0
 80098d8:	3004      	adds	r0, #4
 80098da:	699d      	ldr	r5, [r3, #24]
 80098dc:	f000 fe28 	bl	800a530 <acc_sweep_manager_wait_for_hibernate_ready>
 80098e0:	4604      	mov	r4, r0
 80098e2:	b930      	cbnz	r0, 80098f2 <acc_sensor_manager_hibernate_enter+0x1e>
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <acc_sensor_manager_hibernate_enter+0x28>)
 80098e6:	4a06      	ldr	r2, [pc, #24]	; (8009900 <acc_sensor_manager_hibernate_enter+0x2c>)
 80098e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ea:	4906      	ldr	r1, [pc, #24]	; (8009904 <acc_sensor_manager_hibernate_enter+0x30>)
 80098ec:	4798      	blx	r3
 80098ee:	4620      	mov	r0, r4
 80098f0:	bd38      	pop	{r3, r4, r5, pc}
 80098f2:	4628      	mov	r0, r5
 80098f4:	f7fd fa80 	bl	8006df8 <acc_rss_integration_sensor_device_hibernate_enter>
 80098f8:	4620      	mov	r0, r4
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	20000640 	.word	0x20000640
 8009900:	0801664c 	.word	0x0801664c
 8009904:	08016618 	.word	0x08016618

08009908 <acc_sensor_manager_activate>:
 8009908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	4e18      	ldr	r6, [pc, #96]	; (8009970 <acc_sensor_manager_activate+0x68>)
 800990e:	7834      	ldrb	r4, [r6, #0]
 8009910:	b114      	cbz	r4, 8009918 <acc_sensor_manager_activate+0x10>
 8009912:	4620      	mov	r0, r4
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	f7fd fa50 	bl	8006dbc <acc_rss_integration_get_sensor_count>
 800991c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8009920:	4914      	ldr	r1, [pc, #80]	; (8009974 <acc_sensor_manager_activate+0x6c>)
 8009922:	4f15      	ldr	r7, [pc, #84]	; (8009978 <acc_sensor_manager_activate+0x70>)
 8009924:	00c0      	lsls	r0, r0, #3
 8009926:	f240 1253 	movw	r2, #339	; 0x153
 800992a:	f7fd faa9 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 800992e:	6038      	str	r0, [r7, #0]
 8009930:	2800      	cmp	r0, #0
 8009932:	d0ee      	beq.n	8009912 <acc_sensor_manager_activate+0xa>
 8009934:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800997c <acc_sensor_manager_activate+0x74>
 8009938:	4625      	mov	r5, r4
 800993a:	e00e      	b.n	800995a <acc_sensor_manager_activate+0x52>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009942:	4618      	mov	r0, r3
 8009944:	2248      	movs	r2, #72	; 0x48
 8009946:	2100      	movs	r1, #0
 8009948:	f007 f92e 	bl	8010ba8 <memset>
 800994c:	3401      	adds	r4, #1
 800994e:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8009952:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8009956:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 800995a:	f7fd fa2f 	bl	8006dbc <acc_rss_integration_get_sensor_count>
 800995e:	42a0      	cmp	r0, r4
 8009960:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8009964:	d8ea      	bhi.n	800993c <acc_sensor_manager_activate+0x34>
 8009966:	2401      	movs	r4, #1
 8009968:	7034      	strb	r4, [r6, #0]
 800996a:	4620      	mov	r0, r4
 800996c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009970:	2000023c 	.word	0x2000023c
 8009974:	08016618 	.word	0x08016618
 8009978:	20000244 	.word	0x20000244
 800997c:	ff800000 	.word	0xff800000

08009980 <acc_sensor_manager_deactivate>:
 8009980:	b510      	push	{r4, lr}
 8009982:	4c05      	ldr	r4, [pc, #20]	; (8009998 <acc_sensor_manager_deactivate+0x18>)
 8009984:	7823      	ldrb	r3, [r4, #0]
 8009986:	b903      	cbnz	r3, 800998a <acc_sensor_manager_deactivate+0xa>
 8009988:	bd10      	pop	{r4, pc}
 800998a:	4b04      	ldr	r3, [pc, #16]	; (800999c <acc_sensor_manager_deactivate+0x1c>)
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f7fd fabb 	bl	8006f08 <acc_rss_integration_mem_free>
 8009992:	2300      	movs	r3, #0
 8009994:	7023      	strb	r3, [r4, #0]
 8009996:	bd10      	pop	{r4, pc}
 8009998:	2000023c 	.word	0x2000023c
 800999c:	20000244 	.word	0x20000244

080099a0 <acc_sensor_manager_acquire_adc_data>:
 80099a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a4:	7846      	ldrb	r6, [r0, #1]
 80099a6:	461c      	mov	r4, r3
 80099a8:	b13e      	cbz	r6, 80099ba <acc_sensor_manager_acquire_adc_data+0x1a>
 80099aa:	2300      	movs	r3, #0
 80099ac:	7023      	strb	r3, [r4, #0]
 80099ae:	7063      	strb	r3, [r4, #1]
 80099b0:	70a3      	strb	r3, [r4, #2]
 80099b2:	70e3      	strb	r3, [r4, #3]
 80099b4:	4630      	mov	r0, r6
 80099b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ba:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8009ab8 <acc_sensor_manager_acquire_adc_data+0x118>
 80099be:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80099c2:	f8dc c000 	ldr.w	ip, [ip]
 80099c6:	4605      	mov	r5, r0
 80099c8:	4688      	mov	r8, r1
 80099ca:	4617      	mov	r7, r2
 80099cc:	f1bc 0f00 	cmp.w	ip, #0
 80099d0:	d014      	beq.n	80099fc <acc_sensor_manager_acquire_adc_data+0x5c>
 80099d2:	f8dc a00c 	ldr.w	sl, [ip, #12]
 80099d6:	f1ba 0f00 	cmp.w	sl, #0
 80099da:	d00f      	beq.n	80099fc <acc_sensor_manager_acquire_adc_data+0x5c>
 80099dc:	47d0      	blx	sl
 80099de:	2800      	cmp	r0, #0
 80099e0:	d0e8      	beq.n	80099b4 <acc_sensor_manager_acquire_adc_data+0x14>
 80099e2:	786e      	ldrb	r6, [r5, #1]
 80099e4:	2e00      	cmp	r6, #0
 80099e6:	d1e5      	bne.n	80099b4 <acc_sensor_manager_acquire_adc_data+0x14>
 80099e8:	463b      	mov	r3, r7
 80099ea:	4642      	mov	r2, r8
 80099ec:	4649      	mov	r1, r9
 80099ee:	2002      	movs	r0, #2
 80099f0:	2601      	movs	r6, #1
 80099f2:	f7fd faa7 	bl	8006f44 <acc_probes_execute_uint16>
 80099f6:	4630      	mov	r0, r6
 80099f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fc:	2300      	movs	r3, #0
 80099fe:	7023      	strb	r3, [r4, #0]
 8009a00:	7063      	strb	r3, [r4, #1]
 8009a02:	70a3      	strb	r3, [r4, #2]
 8009a04:	70e3      	strb	r3, [r4, #3]
 8009a06:	f895 a000 	ldrb.w	sl, [r5]
 8009a0a:	f1ba 0f02 	cmp.w	sl, #2
 8009a0e:	d031      	beq.n	8009a74 <acc_sensor_manager_acquire_adc_data+0xd4>
 8009a10:	f1ba 0f01 	cmp.w	sl, #1
 8009a14:	d034      	beq.n	8009a80 <acc_sensor_manager_acquire_adc_data+0xe0>
 8009a16:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8009a18:	1d28      	adds	r0, r5, #4
 8009a1a:	f000 fd91 	bl	800a540 <acc_sweep_manager_acquire_adc_data>
 8009a1e:	6843      	ldr	r3, [r0, #4]
 8009a20:	b30b      	cbz	r3, 8009a66 <acc_sensor_manager_acquire_adc_data+0xc6>
 8009a22:	4543      	cmp	r3, r8
 8009a24:	d13b      	bne.n	8009a9e <acc_sensor_manager_acquire_adc_data+0xfe>
 8009a26:	8843      	ldrh	r3, [r0, #2]
 8009a28:	42bb      	cmp	r3, r7
 8009a2a:	d133      	bne.n	8009a94 <acc_sensor_manager_acquire_adc_data+0xf4>
 8009a2c:	4b1e      	ldr	r3, [pc, #120]	; (8009aa8 <acc_sensor_manager_acquire_adc_data+0x108>)
 8009a2e:	68c1      	ldr	r1, [r0, #12]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	7a06      	ldrb	r6, [r0, #8]
 8009a34:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8009a38:	00db      	lsls	r3, r3, #3
 8009a3a:	3b48      	subs	r3, #72	; 0x48
 8009a3c:	4413      	add	r3, r2
 8009a3e:	7802      	ldrb	r2, [r0, #0]
 8009a40:	7022      	strb	r2, [r4, #0]
 8009a42:	7842      	ldrb	r2, [r0, #1]
 8009a44:	7062      	strb	r2, [r4, #1]
 8009a46:	f1ba 0f02 	cmp.w	sl, #2
 8009a4a:	7a42      	ldrb	r2, [r0, #9]
 8009a4c:	70e2      	strb	r2, [r4, #3]
 8009a4e:	70a6      	strb	r6, [r4, #2]
 8009a50:	6459      	str	r1, [r3, #68]	; 0x44
 8009a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a56:	d017      	beq.n	8009a88 <acc_sensor_manager_acquire_adc_data+0xe8>
 8009a58:	f1ba 0f01 	cmp.w	sl, #1
 8009a5c:	d1c1      	bne.n	80099e2 <acc_sensor_manager_acquire_adc_data+0x42>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f7ff ff38 	bl	80098d4 <acc_sensor_manager_hibernate_enter>
 8009a64:	e7bd      	b.n	80099e2 <acc_sensor_manager_acquire_adc_data+0x42>
 8009a66:	4911      	ldr	r1, [pc, #68]	; (8009aac <acc_sensor_manager_acquire_adc_data+0x10c>)
 8009a68:	4a11      	ldr	r2, [pc, #68]	; (8009ab0 <acc_sensor_manager_acquire_adc_data+0x110>)
 8009a6a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009a6c:	4911      	ldr	r1, [pc, #68]	; (8009ab4 <acc_sensor_manager_acquire_adc_data+0x114>)
 8009a6e:	4618      	mov	r0, r3
 8009a70:	47a0      	blx	r4
 8009a72:	e79f      	b.n	80099b4 <acc_sensor_manager_acquire_adc_data+0x14>
 8009a74:	4628      	mov	r0, r5
 8009a76:	f7ff fea1 	bl	80097bc <acc_sensor_manager_power_on_and_start_sensor>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d1cb      	bne.n	8009a16 <acc_sensor_manager_acquire_adc_data+0x76>
 8009a7e:	e799      	b.n	80099b4 <acc_sensor_manager_acquire_adc_data+0x14>
 8009a80:	4648      	mov	r0, r9
 8009a82:	f7fd f9c1 	bl	8006e08 <acc_rss_integration_sensor_device_hibernate_exit>
 8009a86:	e7c6      	b.n	8009a16 <acc_sensor_manager_acquire_adc_data+0x76>
 8009a88:	4648      	mov	r0, r9
 8009a8a:	f7fd f9af 	bl	8006dec <acc_rss_integration_sensor_device_power_off>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	70eb      	strb	r3, [r5, #3]
 8009a92:	e7a6      	b.n	80099e2 <acc_sensor_manager_acquire_adc_data+0x42>
 8009a94:	4807      	ldr	r0, [pc, #28]	; (8009ab4 <acc_sensor_manager_acquire_adc_data+0x114>)
 8009a96:	f240 11c9 	movw	r1, #457	; 0x1c9
 8009a9a:	f7fd f92f 	bl	8006cfc <acc_assert_fail>
 8009a9e:	4805      	ldr	r0, [pc, #20]	; (8009ab4 <acc_sensor_manager_acquire_adc_data+0x114>)
 8009aa0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8009aa4:	f7fd f92a 	bl	8006cfc <acc_assert_fail>
 8009aa8:	20000244 	.word	0x20000244
 8009aac:	20000640 	.word	0x20000640
 8009ab0:	0801666c 	.word	0x0801666c
 8009ab4:	08016618 	.word	0x08016618
 8009ab8:	20000240 	.word	0x20000240

08009abc <acc_sensor_manager_prepare_radar_engine>:
 8009abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac0:	f100 0804 	add.w	r8, r0, #4
 8009ac4:	4617      	mov	r7, r2
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	2234      	movs	r2, #52	; 0x34
 8009aca:	460c      	mov	r4, r1
 8009acc:	4640      	mov	r0, r8
 8009ace:	2100      	movs	r1, #0
 8009ad0:	461e      	mov	r6, r3
 8009ad2:	f007 f869 	bl	8010ba8 <memset>
 8009ad6:	4b1e      	ldr	r3, [pc, #120]	; (8009b50 <acc_sensor_manager_prepare_radar_engine+0x94>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	463a      	mov	r2, r7
 8009adc:	4640      	mov	r0, r8
 8009ade:	b33b      	cbz	r3, 8009b30 <acc_sensor_manager_prepare_radar_engine+0x74>
 8009ae0:	f8d3 9000 	ldr.w	r9, [r3]
 8009ae4:	f1b9 0f00 	cmp.w	r9, #0
 8009ae8:	d022      	beq.n	8009b30 <acc_sensor_manager_prepare_radar_engine+0x74>
 8009aea:	4633      	mov	r3, r6
 8009aec:	4621      	mov	r1, r4
 8009aee:	47c8      	blx	r9
 8009af0:	4607      	mov	r7, r0
 8009af2:	4620      	mov	r0, r4
 8009af4:	f7fd fb0e 	bl	8007114 <acc_base_configuration_power_save_mode_get>
 8009af8:	b320      	cbz	r0, 8009b44 <acc_sensor_manager_prepare_radar_engine+0x88>
 8009afa:	2804      	cmp	r0, #4
 8009afc:	d025      	beq.n	8009b4a <acc_sensor_manager_prepare_radar_engine+0x8e>
 8009afe:	2300      	movs	r3, #0
 8009b00:	702b      	strb	r3, [r5, #0]
 8009b02:	4620      	mov	r0, r4
 8009b04:	f7fd fc04 	bl	8007310 <acc_base_configuration_repetition_mode_get>
 8009b08:	fab0 f280 	clz	r2, r0
 8009b0c:	0952      	lsrs	r2, r2, #5
 8009b0e:	706a      	strb	r2, [r5, #1]
 8009b10:	4620      	mov	r0, r4
 8009b12:	f7fd fd33 	bl	800757c <acc_base_configuration_asynchronous_measurement_get>
 8009b16:	70a8      	strb	r0, [r5, #2]
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f7fd fa95 	bl	8007048 <acc_base_configuration_sensor_get>
 8009b1e:	4632      	mov	r2, r6
 8009b20:	4601      	mov	r1, r0
 8009b22:	231a      	movs	r3, #26
 8009b24:	2005      	movs	r0, #5
 8009b26:	f7fd fa25 	bl	8006f74 <acc_probes_execute_struct>
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b30:	4633      	mov	r3, r6
 8009b32:	4621      	mov	r1, r4
 8009b34:	f000 fc1e 	bl	800a374 <acc_sweep_manager_prepare>
 8009b38:	4607      	mov	r7, r0
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7fd faea 	bl	8007114 <acc_base_configuration_power_save_mode_get>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d1da      	bne.n	8009afa <acc_sensor_manager_prepare_radar_engine+0x3e>
 8009b44:	2302      	movs	r3, #2
 8009b46:	702b      	strb	r3, [r5, #0]
 8009b48:	e7db      	b.n	8009b02 <acc_sensor_manager_prepare_radar_engine+0x46>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	702b      	strb	r3, [r5, #0]
 8009b4e:	e7d8      	b.n	8009b02 <acc_sensor_manager_prepare_radar_engine+0x46>
 8009b50:	20000240 	.word	0x20000240

08009b54 <acc_sensor_manager_prepare_measurement>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	4680      	mov	r8, r0
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	4608      	mov	r0, r1
 8009b5e:	460e      	mov	r6, r1
 8009b60:	4617      	mov	r7, r2
 8009b62:	469a      	mov	sl, r3
 8009b64:	f7fd fa70 	bl	8007048 <acc_base_configuration_sensor_get>
 8009b68:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009c50 <acc_sensor_manager_prepare_measurement+0xfc>
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7fd fcf6 	bl	8007564 <acc_base_configuration_noise_deviation_override_get>
 8009b78:	00e4      	lsls	r4, r4, #3
 8009b7a:	f8d9 1000 	ldr.w	r1, [r9]
 8009b7e:	4b32      	ldr	r3, [pc, #200]	; (8009c48 <acc_sensor_manager_prepare_measurement+0xf4>)
 8009b80:	4a32      	ldr	r2, [pc, #200]	; (8009c4c <acc_sensor_manager_prepare_measurement+0xf8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3c48      	subs	r4, #72	; 0x48
 8009b86:	440c      	add	r4, r1
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4683      	mov	fp, r0
 8009b8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009b90:	6462      	str	r2, [r4, #68]	; 0x44
 8009b92:	b163      	cbz	r3, 8009bae <acc_sensor_manager_prepare_measurement+0x5a>
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	b153      	cbz	r3, 8009bae <acc_sensor_manager_prepare_measurement+0x5a>
 8009b98:	4652      	mov	r2, sl
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4798      	blx	r3
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d14b      	bne.n	8009c3e <acc_sensor_manager_prepare_measurement+0xea>
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	b003      	add	sp, #12
 8009baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009bb2:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 8009bb6:	b17b      	cbz	r3, 8009bd8 <acc_sensor_manager_prepare_measurement+0x84>
 8009bb8:	f1bb 0f00 	cmp.w	fp, #0
 8009bbc:	d01b      	beq.n	8009bf6 <acc_sensor_manager_prepare_measurement+0xa2>
 8009bbe:	f8a7 b014 	strh.w	fp, [r7, #20]
 8009bc2:	463a      	mov	r2, r7
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	2320      	movs	r3, #32
 8009bc8:	200e      	movs	r0, #14
 8009bca:	f7fd f9d3 	bl	8006f74 <acc_probes_execute_struct>
 8009bce:	2401      	movs	r4, #1
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	b003      	add	sp, #12
 8009bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	f108 0104 	add.w	r1, r8, #4
 8009bdc:	4652      	mov	r2, sl
 8009bde:	4628      	mov	r0, r5
 8009be0:	9101      	str	r1, [sp, #4]
 8009be2:	f7ff fe09 	bl	80097f8 <calibrate_sensor>
 8009be6:	9901      	ldr	r1, [sp, #4]
 8009be8:	4604      	mov	r4, r0
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d1e4      	bne.n	8009bb8 <acc_sensor_manager_prepare_measurement+0x64>
 8009bee:	4608      	mov	r0, r1
 8009bf0:	f000 fc5a 	bl	800a4a8 <acc_sweep_manager_release>
 8009bf4:	e7d7      	b.n	8009ba6 <acc_sensor_manager_prepare_measurement+0x52>
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f7fd fc9c 	bl	8007534 <acc_base_configuration_noise_level_normalization_get>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d0e0      	beq.n	8009bc2 <acc_sensor_manager_prepare_measurement+0x6e>
 8009c00:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8009c04:	4630      	mov	r0, r6
 8009c06:	f7fd f8eb 	bl	8006de0 <acc_rss_integration_sensor_device_power_on>
 8009c0a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8009c0e:	f8d9 1000 	ldr.w	r1, [r9]
 8009c12:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	3b48      	subs	r3, #72	; 0x48
 8009c1a:	f108 0804 	add.w	r8, r8, #4
 8009c1e:	4419      	add	r1, r3
 8009c20:	4640      	mov	r0, r8
 8009c22:	f107 0314 	add.w	r3, r7, #20
 8009c26:	f000 fc55 	bl	800a4d4 <acc_sweep_manager_measure_noise>
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7fd f8dd 	bl	8006dec <acc_rss_integration_sensor_device_power_off>
 8009c32:	2c00      	cmp	r4, #0
 8009c34:	d1c5      	bne.n	8009bc2 <acc_sensor_manager_prepare_measurement+0x6e>
 8009c36:	4640      	mov	r0, r8
 8009c38:	f000 fc36 	bl	800a4a8 <acc_sweep_manager_release>
 8009c3c:	e7b3      	b.n	8009ba6 <acc_sensor_manager_prepare_measurement+0x52>
 8009c3e:	f1bb 0f00 	cmp.w	fp, #0
 8009c42:	d0be      	beq.n	8009bc2 <acc_sensor_manager_prepare_measurement+0x6e>
 8009c44:	e7bb      	b.n	8009bbe <acc_sensor_manager_prepare_measurement+0x6a>
 8009c46:	bf00      	nop
 8009c48:	20000240 	.word	0x20000240
 8009c4c:	ff800000 	.word	0xff800000
 8009c50:	20000244 	.word	0x20000244

08009c54 <acc_sensor_manager_start_measurement>:
 8009c54:	4b1b      	ldr	r3, [pc, #108]	; (8009cc4 <acc_sensor_manager_start_measurement+0x70>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	b123      	cbz	r3, 8009c68 <acc_sensor_manager_start_measurement+0x14>
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	b113      	cbz	r3, 8009c68 <acc_sensor_manager_start_measurement+0x14>
 8009c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c66:	4718      	bx	r3
 8009c68:	7823      	ldrb	r3, [r4, #0]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d008      	beq.n	8009c80 <acc_sensor_manager_start_measurement+0x2c>
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f7ff fda4 	bl	80097bc <acc_sensor_manager_power_on_and_start_sensor>
 8009c74:	b160      	cbz	r0, 8009c90 <acc_sensor_manager_start_measurement+0x3c>
 8009c76:	78a3      	ldrb	r3, [r4, #2]
 8009c78:	b12b      	cbz	r3, 8009c86 <acc_sensor_manager_start_measurement+0x32>
 8009c7a:	7823      	ldrb	r3, [r4, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d010      	beq.n	8009ca2 <acc_sensor_manager_start_measurement+0x4e>
 8009c80:	2501      	movs	r5, #1
 8009c82:	4628      	mov	r0, r5
 8009c84:	bd70      	pop	{r4, r5, r6, pc}
 8009c86:	1d25      	adds	r5, r4, #4
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f000 fc55 	bl	800a538 <acc_sweep_manager_measure>
 8009c8e:	b910      	cbnz	r0, 8009c96 <acc_sensor_manager_start_measurement+0x42>
 8009c90:	2500      	movs	r5, #0
 8009c92:	4628      	mov	r0, r5
 8009c94:	bd70      	pop	{r4, r5, r6, pc}
 8009c96:	4628      	mov	r0, r5
 8009c98:	f000 fc44 	bl	800a524 <acc_sweep_manager_wait_for_data>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d1ec      	bne.n	8009c7a <acc_sensor_manager_start_measurement+0x26>
 8009ca0:	e7f6      	b.n	8009c90 <acc_sensor_manager_start_measurement+0x3c>
 8009ca2:	1d25      	adds	r5, r4, #4
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f000 fc3d 	bl	800a524 <acc_sweep_manager_wait_for_data>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d0f0      	beq.n	8009c90 <acc_sensor_manager_start_measurement+0x3c>
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 fc42 	bl	800a538 <acc_sweep_manager_measure>
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0ea      	beq.n	8009c90 <acc_sensor_manager_start_measurement+0x3c>
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff fe0a 	bl	80098d4 <acc_sensor_manager_hibernate_enter>
 8009cc0:	e7df      	b.n	8009c82 <acc_sensor_manager_start_measurement+0x2e>
 8009cc2:	bf00      	nop
 8009cc4:	20000240 	.word	0x20000240

08009cc8 <acc_sensor_manager_stop_measurement>:
 8009cc8:	78c3      	ldrb	r3, [r0, #3]
 8009cca:	b903      	cbnz	r3, 8009cce <acc_sensor_manager_stop_measurement+0x6>
 8009ccc:	4770      	bx	lr
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	6980      	ldr	r0, [r0, #24]
 8009cd4:	f7fd f88a 	bl	8006dec <acc_rss_integration_sensor_device_power_off>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	70e3      	strb	r3, [r4, #3]
 8009cdc:	bd10      	pop	{r4, pc}
 8009cde:	bf00      	nop

08009ce0 <acc_sensor_manager_release_measurement>:
 8009ce0:	6983      	ldr	r3, [r0, #24]
 8009ce2:	b173      	cbz	r3, 8009d02 <acc_sensor_manager_release_measurement+0x22>
 8009ce4:	4a07      	ldr	r2, [pc, #28]	; (8009d04 <acc_sensor_manager_release_measurement+0x24>)
 8009ce6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009cea:	6812      	ldr	r2, [r2, #0]
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	3b48      	subs	r3, #72	; 0x48
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009cf6:	b90a      	cbnz	r2, 8009cfc <acc_sensor_manager_release_measurement+0x1c>
 8009cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cfc:	3004      	adds	r0, #4
 8009cfe:	f000 bbd3 	b.w	800a4a8 <acc_sweep_manager_release>
 8009d02:	4770      	bx	lr
 8009d04:	20000244 	.word	0x20000244

08009d08 <acc_sensor_manager_get_sensor_id>:
 8009d08:	6980      	ldr	r0, [r0, #24]
 8009d0a:	4770      	bx	lr

08009d0c <acc_sensor_manager_production_test>:
 8009d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d10:	b08e      	sub	sp, #56	; 0x38
 8009d12:	4606      	mov	r6, r0
 8009d14:	4688      	mov	r8, r1
 8009d16:	4617      	mov	r7, r2
 8009d18:	2100      	movs	r1, #0
 8009d1a:	2234      	movs	r2, #52	; 0x34
 8009d1c:	a801      	add	r0, sp, #4
 8009d1e:	461d      	mov	r5, r3
 8009d20:	f006 ff42 	bl	8010ba8 <memset>
 8009d24:	2300      	movs	r3, #0
 8009d26:	4631      	mov	r1, r6
 8009d28:	a801      	add	r0, sp, #4
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f000 fb22 	bl	800a374 <acc_sweep_manager_prepare>
 8009d30:	b930      	cbnz	r0, 8009d40 <acc_sensor_manager_production_test+0x34>
 8009d32:	4604      	mov	r4, r0
 8009d34:	b105      	cbz	r5, 8009d38 <acc_sensor_manager_production_test+0x2c>
 8009d36:	8028      	strh	r0, [r5, #0]
 8009d38:	4620      	mov	r0, r4
 8009d3a:	b00e      	add	sp, #56	; 0x38
 8009d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7fd f981 	bl	8007048 <acc_base_configuration_sensor_get>
 8009d46:	4606      	mov	r6, r0
 8009d48:	f7fd f84a 	bl	8006de0 <acc_rss_integration_sensor_device_power_on>
 8009d4c:	462b      	mov	r3, r5
 8009d4e:	463a      	mov	r2, r7
 8009d50:	4641      	mov	r1, r8
 8009d52:	a801      	add	r0, sp, #4
 8009d54:	f000 fc12 	bl	800a57c <acc_sweep_manager_production_test>
 8009d58:	4604      	mov	r4, r0
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f7fd f846 	bl	8006dec <acc_rss_integration_sensor_device_power_off>
 8009d60:	a801      	add	r0, sp, #4
 8009d62:	f000 fba1 	bl	800a4a8 <acc_sweep_manager_release>
 8009d66:	4620      	mov	r0, r4
 8009d68:	b00e      	add	sp, #56	; 0x38
 8009d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d6e:	bf00      	nop

08009d70 <acc_sensor_protocol_r2_prepare_load>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	4604      	mov	r4, r0
 8009d76:	4608      	mov	r0, r1
 8009d78:	4611      	mov	r1, r2
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	9b08      	ldr	r3, [sp, #32]
 8009d7e:	f7ff fcbd 	bl	80096fc <acc_sensor_r2_prepare_load_confmem>
 8009d82:	2300      	movs	r3, #0
 8009d84:	4620      	mov	r0, r4
 8009d86:	f10d 020e 	add.w	r2, sp, #14
 8009d8a:	212a      	movs	r1, #42	; 0x2a
 8009d8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009d90:	f000 fe02 	bl	800a998 <acc_sensor_reg_read>
 8009d94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009d98:	065b      	lsls	r3, r3, #25
 8009d9a:	d436      	bmi.n	8009e0a <acc_sensor_protocol_r2_prepare_load+0x9a>
 8009d9c:	f10d 020e 	add.w	r2, sp, #14
 8009da0:	2500      	movs	r5, #0
 8009da2:	2111      	movs	r1, #17
 8009da4:	4620      	mov	r0, r4
 8009da6:	f8ad 500e 	strh.w	r5, [sp, #14]
 8009daa:	f000 fdf5 	bl	800a998 <acc_sensor_reg_read>
 8009dae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009db2:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 8009db6:	d00c      	beq.n	8009dd2 <acc_sensor_protocol_r2_prepare_load+0x62>
 8009db8:	4b1b      	ldr	r3, [pc, #108]	; (8009e28 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8009dba:	4a1c      	ldr	r2, [pc, #112]	; (8009e2c <acc_sensor_protocol_r2_prepare_load+0xbc>)
 8009dbc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009dbe:	491c      	ldr	r1, [pc, #112]	; (8009e30 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8009dc0:	4623      	mov	r3, r4
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	47b0      	blx	r6
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f005 fcd0 	bl	800f76c <acc_sensor_diagnostics_r2_sensor_status>
 8009dcc:	4628      	mov	r0, r5
 8009dce:	b004      	add	sp, #16
 8009dd0:	bd70      	pop	{r4, r5, r6, pc}
 8009dd2:	2501      	movs	r5, #1
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	9500      	str	r5, [sp, #0]
 8009dda:	2380      	movs	r3, #128	; 0x80
 8009ddc:	2202      	movs	r2, #2
 8009dde:	f000 fe01 	bl	800a9e4 <acc_sensor_reg_field_write>
 8009de2:	2380      	movs	r3, #128	; 0x80
 8009de4:	461a      	mov	r2, r3
 8009de6:	4620      	mov	r0, r4
 8009de8:	9600      	str	r6, [sp, #0]
 8009dea:	2107      	movs	r1, #7
 8009dec:	f000 fdfa 	bl	800a9e4 <acc_sensor_reg_field_write>
 8009df0:	462a      	mov	r2, r5
 8009df2:	4620      	mov	r0, r4
 8009df4:	2105      	movs	r1, #5
 8009df6:	f000 fde5 	bl	800a9c4 <acc_sensor_reg_write>
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	2203      	movs	r2, #3
 8009dfe:	217a      	movs	r1, #122	; 0x7a
 8009e00:	f000 fde0 	bl	800a9c4 <acc_sensor_reg_write>
 8009e04:	4628      	mov	r0, r5
 8009e06:	b004      	add	sp, #16
 8009e08:	bd70      	pop	{r4, r5, r6, pc}
 8009e0a:	f7fd f895 	bl	8006f38 <acc_rss_integration_log_level>
 8009e0e:	b130      	cbz	r0, 8009e1e <acc_sensor_protocol_r2_prepare_load+0xae>
 8009e10:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8009e12:	4a08      	ldr	r2, [pc, #32]	; (8009e34 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 8009e14:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009e16:	4906      	ldr	r1, [pc, #24]	; (8009e30 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8009e18:	4623      	mov	r3, r4
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	47a8      	blx	r5
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f005 fca4 	bl	800f76c <acc_sensor_diagnostics_r2_sensor_status>
 8009e24:	e7ba      	b.n	8009d9c <acc_sensor_protocol_r2_prepare_load+0x2c>
 8009e26:	bf00      	nop
 8009e28:	20000640 	.word	0x20000640
 8009e2c:	080166c4 	.word	0x080166c4
 8009e30:	080166b0 	.word	0x080166b0
 8009e34:	08016684 	.word	0x08016684

08009e38 <acc_sensor_protocol_r2_run_program>:
 8009e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	460e      	mov	r6, r1
 8009e40:	f7fd f87a 	bl	8006f38 <acc_rss_integration_log_level>
 8009e44:	2803      	cmp	r0, #3
 8009e46:	d907      	bls.n	8009e58 <acc_sensor_protocol_r2_run_program+0x20>
 8009e48:	4b1e      	ldr	r3, [pc, #120]	; (8009ec4 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009e4a:	9600      	str	r6, [sp, #0]
 8009e4c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009e4e:	4a1e      	ldr	r2, [pc, #120]	; (8009ec8 <acc_sensor_protocol_r2_run_program+0x90>)
 8009e50:	491e      	ldr	r1, [pc, #120]	; (8009ecc <acc_sensor_protocol_r2_run_program+0x94>)
 8009e52:	4623      	mov	r3, r4
 8009e54:	2004      	movs	r0, #4
 8009e56:	47a8      	blx	r5
 8009e58:	f10d 020e 	add.w	r2, sp, #14
 8009e5c:	2700      	movs	r7, #0
 8009e5e:	2111      	movs	r1, #17
 8009e60:	4620      	mov	r0, r4
 8009e62:	f8ad 700e 	strh.w	r7, [sp, #14]
 8009e66:	f000 fd97 	bl	800a998 <acc_sensor_reg_read>
 8009e6a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009e6e:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 8009e72:	d11a      	bne.n	8009eaa <acc_sensor_protocol_r2_run_program+0x72>
 8009e74:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009e78:	d309      	bcc.n	8009e8e <acc_sensor_protocol_r2_run_program+0x56>
 8009e7a:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009e7c:	4a14      	ldr	r2, [pc, #80]	; (8009ed0 <acc_sensor_protocol_r2_run_program+0x98>)
 8009e7e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009e80:	4912      	ldr	r1, [pc, #72]	; (8009ecc <acc_sensor_protocol_r2_run_program+0x94>)
 8009e82:	4628      	mov	r0, r5
 8009e84:	4633      	mov	r3, r6
 8009e86:	47a0      	blx	r4
 8009e88:	4628      	mov	r0, r5
 8009e8a:	b005      	add	sp, #20
 8009e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e8e:	462a      	mov	r2, r5
 8009e90:	4620      	mov	r0, r4
 8009e92:	2110      	movs	r1, #16
 8009e94:	f000 fd96 	bl	800a9c4 <acc_sensor_reg_write>
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 8009e9e:	2110      	movs	r1, #16
 8009ea0:	f000 fd90 	bl	800a9c4 <acc_sensor_reg_write>
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	b005      	add	sp, #20
 8009ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009eac:	4a09      	ldr	r2, [pc, #36]	; (8009ed4 <acc_sensor_protocol_r2_run_program+0x9c>)
 8009eae:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009eb0:	4906      	ldr	r1, [pc, #24]	; (8009ecc <acc_sensor_protocol_r2_run_program+0x94>)
 8009eb2:	4623      	mov	r3, r4
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	47a8      	blx	r5
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f005 fc57 	bl	800f76c <acc_sensor_diagnostics_r2_sensor_status>
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	b005      	add	sp, #20
 8009ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec4:	20000640 	.word	0x20000640
 8009ec8:	080166f4 	.word	0x080166f4
 8009ecc:	080166b0 	.word	0x080166b0
 8009ed0:	08016748 	.word	0x08016748
 8009ed4:	08016718 	.word	0x08016718

08009ed8 <acc_sensor_protocol_r2_terminate_program>:
 8009ed8:	b530      	push	{r4, r5, lr}
 8009eda:	b083      	sub	sp, #12
 8009edc:	2300      	movs	r3, #0
 8009ede:	f10d 0206 	add.w	r2, sp, #6
 8009ee2:	2111      	movs	r1, #17
 8009ee4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009ee8:	4605      	mov	r5, r0
 8009eea:	f000 fd55 	bl	800a998 <acc_sensor_reg_read>
 8009eee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009ef2:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 8009ef6:	d10b      	bne.n	8009f10 <acc_sensor_protocol_r2_terminate_program+0x38>
 8009ef8:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <acc_sensor_protocol_r2_terminate_program+0x48>)
 8009efa:	4a0a      	ldr	r2, [pc, #40]	; (8009f24 <acc_sensor_protocol_r2_terminate_program+0x4c>)
 8009efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efe:	490a      	ldr	r1, [pc, #40]	; (8009f28 <acc_sensor_protocol_r2_terminate_program+0x50>)
 8009f00:	4620      	mov	r0, r4
 8009f02:	4798      	blx	r3
 8009f04:	4628      	mov	r0, r5
 8009f06:	f005 fc31 	bl	800f76c <acc_sensor_diagnostics_r2_sensor_status>
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	b003      	add	sp, #12
 8009f0e:	bd30      	pop	{r4, r5, pc}
 8009f10:	4628      	mov	r0, r5
 8009f12:	2201      	movs	r2, #1
 8009f14:	2174      	movs	r1, #116	; 0x74
 8009f16:	f000 fd55 	bl	800a9c4 <acc_sensor_reg_write>
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	b003      	add	sp, #12
 8009f1e:	bd30      	pop	{r4, r5, pc}
 8009f20:	20000640 	.word	0x20000640
 8009f24:	08016764 	.word	0x08016764
 8009f28:	080166b0 	.word	0x080166b0

08009f2c <acc_sensor_protocol_r2_is_sensor_running>:
 8009f2c:	b500      	push	{lr}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	2300      	movs	r3, #0
 8009f32:	f10d 0206 	add.w	r2, sp, #6
 8009f36:	2111      	movs	r1, #17
 8009f38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009f3c:	f000 fd2c 	bl	800a998 <acc_sensor_reg_read>
 8009f40:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8009f44:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8009f48:	b003      	add	sp, #12
 8009f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f4e:	bf00      	nop

08009f50 <acc_sensor_protocol_r2_ack_event>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	2300      	movs	r3, #0
 8009f56:	f10d 0206 	add.w	r2, sp, #6
 8009f5a:	2138      	movs	r1, #56	; 0x38
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009f62:	f000 fd19 	bl	800a998 <acc_sensor_reg_read>
 8009f66:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8009f6a:	b114      	cbz	r4, 8009f72 <acc_sensor_protocol_r2_ack_event+0x22>
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	b002      	add	sp, #8
 8009f70:	bd70      	pop	{r4, r5, r6, pc}
 8009f72:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <acc_sensor_protocol_r2_ack_event+0x3c>)
 8009f74:	4a06      	ldr	r2, [pc, #24]	; (8009f90 <acc_sensor_protocol_r2_ack_event+0x40>)
 8009f76:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009f78:	4906      	ldr	r1, [pc, #24]	; (8009f94 <acc_sensor_protocol_r2_ack_event+0x44>)
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	47b0      	blx	r6
 8009f80:	4628      	mov	r0, r5
 8009f82:	f005 fbf3 	bl	800f76c <acc_sensor_diagnostics_r2_sensor_status>
 8009f86:	4620      	mov	r0, r4
 8009f88:	b002      	add	sp, #8
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	20000640 	.word	0x20000640
 8009f90:	08016798 	.word	0x08016798
 8009f94:	080166b0 	.word	0x080166b0

08009f98 <acc_sensor_protocol_r2_get_event>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	b301      	cbz	r1, 8009fe2 <acc_sensor_protocol_r2_get_event+0x4a>
 8009fa0:	f10d 020e 	add.w	r2, sp, #14
 8009fa4:	2128      	movs	r1, #40	; 0x28
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	f000 fcf6 	bl	800a998 <acc_sensor_reg_read>
 8009fac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009fb0:	8062      	strh	r2, [r4, #2]
 8009fb2:	b2d3      	uxtb	r3, r2
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	7023      	strb	r3, [r4, #0]
 8009fb8:	d026      	beq.n	800a008 <acc_sensor_protocol_r2_get_event+0x70>
 8009fba:	d80c      	bhi.n	8009fd6 <acc_sensor_protocol_r2_get_event+0x3e>
 8009fbc:	4b22      	ldr	r3, [pc, #136]	; (800a048 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009fbe:	4a23      	ldr	r2, [pc, #140]	; (800a04c <acc_sensor_protocol_r2_get_event+0xb4>)
 8009fc0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009fc2:	4923      	ldr	r1, [pc, #140]	; (800a050 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	47a0      	blx	r4
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f005 fbce 	bl	800f76c <acc_sensor_diagnostics_r2_sensor_status>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	b004      	add	sp, #16
 8009fd4:	bd70      	pop	{r4, r5, r6, pc}
 8009fd6:	1e9a      	subs	r2, r3, #2
 8009fd8:	2a09      	cmp	r2, #9
 8009fda:	d80b      	bhi.n	8009ff4 <acc_sensor_protocol_r2_get_event+0x5c>
 8009fdc:	2001      	movs	r0, #1
 8009fde:	b004      	add	sp, #16
 8009fe0:	bd70      	pop	{r4, r5, r6, pc}
 8009fe2:	4b19      	ldr	r3, [pc, #100]	; (800a048 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009fe4:	4a1b      	ldr	r2, [pc, #108]	; (800a054 <acc_sensor_protocol_r2_get_event+0xbc>)
 8009fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe8:	4919      	ldr	r1, [pc, #100]	; (800a050 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009fea:	4620      	mov	r0, r4
 8009fec:	4798      	blx	r3
 8009fee:	4620      	mov	r0, r4
 8009ff0:	b004      	add	sp, #16
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
 8009ff4:	4a14      	ldr	r2, [pc, #80]	; (800a048 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009ff6:	9500      	str	r5, [sp, #0]
 8009ff8:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009ffa:	4915      	ldr	r1, [pc, #84]	; (800a050 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009ffc:	4a16      	ldr	r2, [pc, #88]	; (800a058 <acc_sensor_protocol_r2_get_event+0xc0>)
 8009ffe:	2000      	movs	r0, #0
 800a000:	47b0      	blx	r6
 800a002:	2300      	movs	r3, #0
 800a004:	7023      	strb	r3, [r4, #0]
 800a006:	e7e0      	b.n	8009fca <acc_sensor_protocol_r2_get_event+0x32>
 800a008:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 800a00c:	ea4f 2112 	mov.w	r1, r2, lsr #8
 800a010:	d203      	bcs.n	800a01a <acc_sensor_protocol_r2_get_event+0x82>
 800a012:	4a12      	ldr	r2, [pc, #72]	; (800a05c <acc_sensor_protocol_r2_get_event+0xc4>)
 800a014:	408b      	lsls	r3, r1
 800a016:	401a      	ands	r2, r3
 800a018:	b96a      	cbnz	r2, 800a036 <acc_sensor_protocol_r2_get_event+0x9e>
 800a01a:	4a0b      	ldr	r2, [pc, #44]	; (800a048 <acc_sensor_protocol_r2_get_event+0xb0>)
 800a01c:	f242 1301 	movw	r3, #8449	; 0x2101
 800a020:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800a022:	8063      	strh	r3, [r4, #2]
 800a024:	2320      	movs	r3, #32
 800a026:	4a0e      	ldr	r2, [pc, #56]	; (800a060 <acc_sensor_protocol_r2_get_event+0xc8>)
 800a028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a02c:	4a0d      	ldr	r2, [pc, #52]	; (800a064 <acc_sensor_protocol_r2_get_event+0xcc>)
 800a02e:	4908      	ldr	r1, [pc, #32]	; (800a050 <acc_sensor_protocol_r2_get_event+0xb8>)
 800a030:	2000      	movs	r0, #0
 800a032:	47b0      	blx	r6
 800a034:	e7c9      	b.n	8009fca <acc_sensor_protocol_r2_get_event+0x32>
 800a036:	1e4b      	subs	r3, r1, #1
 800a038:	4a03      	ldr	r2, [pc, #12]	; (800a048 <acc_sensor_protocol_r2_get_event+0xb0>)
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800a040:	d9f1      	bls.n	800a026 <acc_sensor_protocol_r2_get_event+0x8e>
 800a042:	4b09      	ldr	r3, [pc, #36]	; (800a068 <acc_sensor_protocol_r2_get_event+0xd0>)
 800a044:	e7f2      	b.n	800a02c <acc_sensor_protocol_r2_get_event+0x94>
 800a046:	bf00      	nop
 800a048:	20000640 	.word	0x20000640
 800a04c:	080167f0 	.word	0x080167f0
 800a050:	080166b0 	.word	0x080166b0
 800a054:	080167dc 	.word	0x080167dc
 800a058:	08016834 	.word	0x08016834
 800a05c:	00010016 	.word	0x00010016
 800a060:	08016b10 	.word	0x08016b10
 800a064:	08016814 	.word	0x08016814
 800a068:	080167cc 	.word	0x080167cc

0800a06c <acc_sensor_protocol_r2_wait_for_event>:
 800a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	b087      	sub	sp, #28
 800a072:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800a128 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 800a076:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a13c <acc_sensor_protocol_r2_wait_for_event+0xd0>
 800a07a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800a130 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 800a07e:	9303      	str	r3, [sp, #12]
 800a080:	4604      	mov	r4, r0
 800a082:	460e      	mov	r6, r1
 800a084:	4690      	mov	r8, r2
 800a086:	2500      	movs	r5, #0
 800a088:	e018      	b.n	800a0bc <acc_sensor_protocol_r2_wait_for_event+0x50>
 800a08a:	4620      	mov	r0, r4
 800a08c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a090:	f000 fc82 	bl	800a998 <acc_sensor_reg_read>
 800a094:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800a098:	065b      	lsls	r3, r3, #25
 800a09a:	d434      	bmi.n	800a106 <acc_sensor_protocol_r2_wait_for_event+0x9a>
 800a09c:	f7fc ff4c 	bl	8006f38 <acc_rss_integration_log_level>
 800a0a0:	4607      	mov	r7, r0
 800a0a2:	4623      	mov	r3, r4
 800a0a4:	4652      	mov	r2, sl
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	2001      	movs	r0, #1
 800a0aa:	b117      	cbz	r7, 800a0b2 <acc_sensor_protocol_r2_wait_for_event+0x46>
 800a0ac:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 800a0b0:	47b8      	blx	r7
 800a0b2:	4545      	cmp	r5, r8
 800a0b4:	f105 0301 	add.w	r3, r5, #1
 800a0b8:	d018      	beq.n	800a0ec <acc_sensor_protocol_r2_wait_for_event+0x80>
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f7fc feb2 	bl	8006e28 <acc_rss_integration_wait_for_sensor_interrupt>
 800a0c4:	f10d 0216 	add.w	r2, sp, #22
 800a0c8:	212a      	movs	r1, #42	; 0x2a
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d1db      	bne.n	800a08a <acc_sensor_protocol_r2_wait_for_event+0x1e>
 800a0d2:	4b15      	ldr	r3, [pc, #84]	; (800a128 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 800a0d4:	4a15      	ldr	r2, [pc, #84]	; (800a12c <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 800a0d6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800a0d8:	4915      	ldr	r1, [pc, #84]	; (800a130 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800a0da:	4623      	mov	r3, r4
 800a0dc:	47a8      	blx	r5
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f005 fb44 	bl	800f76c <acc_sensor_diagnostics_r2_sensor_status>
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	b007      	add	sp, #28
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ec:	4a0e      	ldr	r2, [pc, #56]	; (800a128 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 800a0ee:	9400      	str	r4, [sp, #0]
 800a0f0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a0f2:	490f      	ldr	r1, [pc, #60]	; (800a130 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800a0f4:	4a0f      	ldr	r2, [pc, #60]	; (800a134 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	47a0      	blx	r4
 800a0fc:	2700      	movs	r7, #0
 800a0fe:	4638      	mov	r0, r7
 800a100:	b007      	add	sp, #28
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	9903      	ldr	r1, [sp, #12]
 800a108:	4620      	mov	r0, r4
 800a10a:	f7ff ff45 	bl	8009f98 <acc_sensor_protocol_r2_get_event>
 800a10e:	4607      	mov	r7, r0
 800a110:	2800      	cmp	r0, #0
 800a112:	d1e7      	bne.n	800a0e4 <acc_sensor_protocol_r2_wait_for_event+0x78>
 800a114:	4b04      	ldr	r3, [pc, #16]	; (800a128 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 800a116:	4a08      	ldr	r2, [pc, #32]	; (800a138 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 800a118:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800a11a:	4905      	ldr	r1, [pc, #20]	; (800a130 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800a11c:	4623      	mov	r3, r4
 800a11e:	47a8      	blx	r5
 800a120:	4638      	mov	r0, r7
 800a122:	b007      	add	sp, #28
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	20000640 	.word	0x20000640
 800a12c:	08016864 	.word	0x08016864
 800a130:	080166b0 	.word	0x080166b0
 800a134:	080168b0 	.word	0x080168b0
 800a138:	080168ec 	.word	0x080168ec
 800a13c:	0801688c 	.word	0x0801688c

0800a140 <acc_sensor_protocol_r2_wait_for_specific_event>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	4616      	mov	r6, r2
 800a146:	461c      	mov	r4, r3
 800a148:	2264      	movs	r2, #100	; 0x64
 800a14a:	ab03      	add	r3, sp, #12
 800a14c:	4605      	mov	r5, r0
 800a14e:	f7ff ff8d 	bl	800a06c <acc_sensor_protocol_r2_wait_for_event>
 800a152:	b168      	cbz	r0, 800a170 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 800a154:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a158:	42b3      	cmp	r3, r6
 800a15a:	d00b      	beq.n	800a174 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 800a15c:	e9cd 3600 	strd	r3, r6, [sp]
 800a160:	4a08      	ldr	r2, [pc, #32]	; (800a184 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 800a162:	4b09      	ldr	r3, [pc, #36]	; (800a188 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 800a164:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a166:	4909      	ldr	r1, [pc, #36]	; (800a18c <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 800a168:	4a09      	ldr	r2, [pc, #36]	; (800a190 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 800a16a:	2000      	movs	r0, #0
 800a16c:	47a0      	blx	r4
 800a16e:	2000      	movs	r0, #0
 800a170:	b004      	add	sp, #16
 800a172:	bd70      	pop	{r4, r5, r6, pc}
 800a174:	2c00      	cmp	r4, #0
 800a176:	d0fb      	beq.n	800a170 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 800a178:	4628      	mov	r0, r5
 800a17a:	f7ff fee9 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800a17e:	b004      	add	sp, #16
 800a180:	bd70      	pop	{r4, r5, r6, pc}
 800a182:	bf00      	nop
 800a184:	20000640 	.word	0x20000640
 800a188:	08016b94 	.word	0x08016b94
 800a18c:	080166b0 	.word	0x080166b0
 800a190:	08016914 	.word	0x08016914

0800a194 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 800a194:	2301      	movs	r3, #1
 800a196:	220b      	movs	r2, #11
 800a198:	f7ff bfd2 	b.w	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>

0800a19c <acc_sensor_protocol_r2_stop>:
 800a19c:	b530      	push	{r4, r5, lr}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	f7ff fe98 	bl	8009ed8 <acc_sensor_protocol_r2_terminate_program>
 800a1a8:	b910      	cbnz	r0, 800a1b0 <acc_sensor_protocol_r2_stop+0x14>
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	b003      	add	sp, #12
 800a1ae:	bd30      	pop	{r4, r5, pc}
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f7ff fecd 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d0f7      	beq.n	800a1aa <acc_sensor_protocol_r2_stop+0xe>
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	ab01      	add	r3, sp, #4
 800a1be:	2264      	movs	r2, #100	; 0x64
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f7ff ff53 	bl	800a06c <acc_sensor_protocol_r2_wait_for_event>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d0ef      	beq.n	800a1aa <acc_sensor_protocol_r2_stop+0xe>
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f7ff fec0 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0ea      	beq.n	800a1aa <acc_sensor_protocol_r2_stop+0xe>
 800a1d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d0e7      	beq.n	800a1ac <acc_sensor_protocol_r2_stop+0x10>
 800a1dc:	4a05      	ldr	r2, [pc, #20]	; (800a1f4 <acc_sensor_protocol_r2_stop+0x58>)
 800a1de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a1e2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a1e4:	4904      	ldr	r1, [pc, #16]	; (800a1f8 <acc_sensor_protocol_r2_stop+0x5c>)
 800a1e6:	4a05      	ldr	r2, [pc, #20]	; (800a1fc <acc_sensor_protocol_r2_stop+0x60>)
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	47a0      	blx	r4
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	f005 fabd 	bl	800f76c <acc_sensor_diagnostics_r2_sensor_status>
 800a1f2:	e7da      	b.n	800a1aa <acc_sensor_protocol_r2_stop+0xe>
 800a1f4:	20000640 	.word	0x20000640
 800a1f8:	080166b0 	.word	0x080166b0
 800a1fc:	08016940 	.word	0x08016940

0800a200 <acc_sensor_protocol_r2_wait_for_radar_data>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	4616      	mov	r6, r2
 800a206:	ab03      	add	r3, sp, #12
 800a208:	2264      	movs	r2, #100	; 0x64
 800a20a:	4605      	mov	r5, r0
 800a20c:	f7ff ff2e 	bl	800a06c <acc_sensor_protocol_r2_wait_for_event>
 800a210:	4604      	mov	r4, r0
 800a212:	b180      	cbz	r0, 800a236 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800a214:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a218:	2b06      	cmp	r3, #6
 800a21a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a21e:	d10d      	bne.n	800a23c <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 800a220:	0519      	lsls	r1, r3, #20
 800a222:	d50b      	bpl.n	800a23c <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 800a224:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 800a228:	d114      	bne.n	800a254 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 800a22a:	b106      	cbz	r6, 800a22e <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 800a22c:	7032      	strb	r2, [r6, #0]
 800a22e:	05da      	lsls	r2, r3, #23
 800a230:	d425      	bmi.n	800a27e <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 800a232:	059b      	lsls	r3, r3, #22
 800a234:	d418      	bmi.n	800a268 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 800a236:	4620      	mov	r0, r4
 800a238:	b004      	add	sp, #16
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	4a16      	ldr	r2, [pc, #88]	; (800a298 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a242:	4916      	ldr	r1, [pc, #88]	; (800a29c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800a244:	4a16      	ldr	r2, [pc, #88]	; (800a2a0 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 800a246:	462b      	mov	r3, r5
 800a248:	2000      	movs	r0, #0
 800a24a:	47a0      	blx	r4
 800a24c:	2400      	movs	r4, #0
 800a24e:	4620      	mov	r0, r4
 800a250:	b004      	add	sp, #16
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	4629      	mov	r1, r5
 800a256:	200f      	movs	r0, #15
 800a258:	f7fc fea4 	bl	8006fa4 <acc_probes_execute_primitive_probe>
 800a25c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a260:	4622      	mov	r2, r4
 800a262:	2e00      	cmp	r6, #0
 800a264:	d1e2      	bne.n	800a22c <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 800a266:	e7e2      	b.n	800a22e <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 800a268:	f7fc fe66 	bl	8006f38 <acc_rss_integration_log_level>
 800a26c:	2803      	cmp	r0, #3
 800a26e:	d9e2      	bls.n	800a236 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800a270:	4b09      	ldr	r3, [pc, #36]	; (800a298 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800a272:	4a0c      	ldr	r2, [pc, #48]	; (800a2a4 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 800a274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a276:	4909      	ldr	r1, [pc, #36]	; (800a29c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800a278:	2004      	movs	r0, #4
 800a27a:	4798      	blx	r3
 800a27c:	e7db      	b.n	800a236 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800a27e:	f7fc fe5b 	bl	8006f38 <acc_rss_integration_log_level>
 800a282:	2803      	cmp	r0, #3
 800a284:	d905      	bls.n	800a292 <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 800a286:	4b04      	ldr	r3, [pc, #16]	; (800a298 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800a288:	4a07      	ldr	r2, [pc, #28]	; (800a2a8 <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 800a28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28c:	4903      	ldr	r1, [pc, #12]	; (800a29c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800a28e:	2004      	movs	r0, #4
 800a290:	4798      	blx	r3
 800a292:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a296:	e7cc      	b.n	800a232 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 800a298:	20000640 	.word	0x20000640
 800a29c:	080166b0 	.word	0x080166b0
 800a2a0:	08016960 	.word	0x08016960
 800a2a4:	080169ac 	.word	0x080169ac
 800a2a8:	08016990 	.word	0x08016990

0800a2ac <acc_sensor_protocol_r2_wait_for_sync_start>:
 800a2ac:	b570      	push	{r4, r5, r6, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	2264      	movs	r2, #100	; 0x64
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	f7ff fed9 	bl	800a06c <acc_sensor_protocol_r2_wait_for_event>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	b178      	cbz	r0, 800a2de <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 800a2be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a2c2:	2b06      	cmp	r3, #6
 800a2c4:	d008      	beq.n	800a2d8 <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 800a2c6:	4a0a      	ldr	r2, [pc, #40]	; (800a2f0 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a2cc:	4909      	ldr	r1, [pc, #36]	; (800a2f4 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800a2ce:	4a0a      	ldr	r2, [pc, #40]	; (800a2f8 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 800a2d0:	462b      	mov	r3, r5
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	47a0      	blx	r4
 800a2d6:	2400      	movs	r4, #0
 800a2d8:	4620      	mov	r0, r4
 800a2da:	b004      	add	sp, #16
 800a2dc:	bd70      	pop	{r4, r5, r6, pc}
 800a2de:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800a2e0:	4a06      	ldr	r2, [pc, #24]	; (800a2fc <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 800a2e2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a2e4:	4903      	ldr	r1, [pc, #12]	; (800a2f4 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	47b0      	blx	r6
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	b004      	add	sp, #16
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	20000640 	.word	0x20000640
 800a2f4:	080166b0 	.word	0x080166b0
 800a2f8:	080169f8 	.word	0x080169f8
 800a2fc:	080169c4 	.word	0x080169c4

0800a300 <acc_sensor_protocol_r2_transfer_data>:
 800a300:	b530      	push	{r4, r5, lr}
 800a302:	b083      	sub	sp, #12
 800a304:	4613      	mov	r3, r2
 800a306:	9201      	str	r2, [sp, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	4605      	mov	r5, r0
 800a30c:	f7ff fa4e 	bl	80097ac <acc_sensor_r2_buffer_processed_read>
 800a310:	9b01      	ldr	r3, [sp, #4]
 800a312:	4604      	mov	r4, r0
 800a314:	4602      	mov	r2, r0
 800a316:	4629      	mov	r1, r5
 800a318:	2000      	movs	r0, #0
 800a31a:	f7fc fe13 	bl	8006f44 <acc_probes_execute_uint16>
 800a31e:	4620      	mov	r0, r4
 800a320:	b003      	add	sp, #12
 800a322:	bd30      	pop	{r4, r5, pc}

0800a324 <acc_sensor_protocol_r2_check_asic_id>:
 800a324:	b530      	push	{r4, r5, lr}
 800a326:	2400      	movs	r4, #0
 800a328:	b085      	sub	sp, #20
 800a32a:	f10d 020e 	add.w	r2, sp, #14
 800a32e:	460d      	mov	r5, r1
 800a330:	4621      	mov	r1, r4
 800a332:	f8ad 400e 	strh.w	r4, [sp, #14]
 800a336:	f000 fb2f 	bl	800a998 <acc_sensor_reg_read>
 800a33a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a33e:	f241 1312 	movw	r3, #4370	; 0x1112
 800a342:	429a      	cmp	r2, r3
 800a344:	d00a      	beq.n	800a35c <acc_sensor_protocol_r2_check_asic_id+0x38>
 800a346:	b965      	cbnz	r5, 800a362 <acc_sensor_protocol_r2_check_asic_id+0x3e>
 800a348:	4907      	ldr	r1, [pc, #28]	; (800a368 <acc_sensor_protocol_r2_check_asic_id+0x44>)
 800a34a:	9200      	str	r2, [sp, #0]
 800a34c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800a34e:	4a07      	ldr	r2, [pc, #28]	; (800a36c <acc_sensor_protocol_r2_check_asic_id+0x48>)
 800a350:	4907      	ldr	r1, [pc, #28]	; (800a370 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 800a352:	4628      	mov	r0, r5
 800a354:	47a0      	blx	r4
 800a356:	4628      	mov	r0, r5
 800a358:	b005      	add	sp, #20
 800a35a:	bd30      	pop	{r4, r5, pc}
 800a35c:	2001      	movs	r0, #1
 800a35e:	b005      	add	sp, #20
 800a360:	bd30      	pop	{r4, r5, pc}
 800a362:	4620      	mov	r0, r4
 800a364:	b005      	add	sp, #20
 800a366:	bd30      	pop	{r4, r5, pc}
 800a368:	20000640 	.word	0x20000640
 800a36c:	08016a34 	.word	0x08016a34
 800a370:	080166b0 	.word	0x080166b0

0800a374 <acc_sweep_manager_prepare>:
 800a374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a378:	4680      	mov	r8, r0
 800a37a:	b095      	sub	sp, #84	; 0x54
 800a37c:	4608      	mov	r0, r1
 800a37e:	460c      	mov	r4, r1
 800a380:	4617      	mov	r7, r2
 800a382:	4699      	mov	r9, r3
 800a384:	f7fc fe60 	bl	8007048 <acc_base_configuration_sensor_get>
 800a388:	4601      	mov	r1, r0
 800a38a:	4620      	mov	r0, r4
 800a38c:	9101      	str	r1, [sp, #4]
 800a38e:	f7fd f811 	bl	80073b4 <acc_base_configuration_wg_duration_get>
 800a392:	4603      	mov	r3, r0
 800a394:	4620      	mov	r0, r4
 800a396:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a39a:	f7fc fff3 	bl	8007384 <acc_base_configuration_integrator_get>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a3a6:	f7fd f81d 	bl	80073e4 <acc_base_configuration_integrator_ramp_up_get>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f8ad 3010 	strh.w	r3, [sp, #16]
 800a3b2:	f7fc fedd 	bl	8007170 <acc_base_configuration_decrease_tx_emission_get>
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	9901      	ldr	r1, [sp, #4]
 800a3bc:	f8ad 5012 	strh.w	r5, [sp, #18]
 800a3c0:	aa03      	add	r2, sp, #12
 800a3c2:	2012      	movs	r0, #18
 800a3c4:	f108 0514 	add.w	r5, r8, #20
 800a3c8:	f7fc fdbc 	bl	8006f44 <acc_probes_execute_uint16>
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f006 fbe9 	bl	8010ba8 <memset>
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	4628      	mov	r0, r5
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4798      	blx	r3
 800a3de:	4606      	mov	r6, r0
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d04e      	beq.n	800a482 <acc_sweep_manager_prepare+0x10e>
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	a80c      	add	r0, sp, #48	; 0x30
 800a3ea:	f006 fbdd 	bl	8010ba8 <memset>
 800a3ee:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	6806      	ldr	r6, [r0, #0]
 800a3f6:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800a3fa:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800a3fe:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800a402:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 800a406:	aa0c      	add	r2, sp, #48	; 0x30
 800a408:	ab05      	add	r3, sp, #20
 800a40a:	4621      	mov	r1, r4
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b0      	blx	r6
 800a410:	4606      	mov	r6, r0
 800a412:	2800      	cmp	r0, #0
 800a414:	d039      	beq.n	800a48a <acc_sweep_manager_prepare+0x116>
 800a416:	b137      	cbz	r7, 800a426 <acc_sweep_manager_prepare+0xb2>
 800a418:	ad0c      	add	r5, sp, #48	; 0x30
 800a41a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a41c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a41e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a422:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800a426:	f1b9 0f00 	cmp.w	r9, #0
 800a42a:	d011      	beq.n	800a450 <acc_sweep_manager_prepare+0xdc>
 800a42c:	ad05      	add	r5, sp, #20
 800a42e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a430:	f8c9 0000 	str.w	r0, [r9]
 800a434:	f8c9 1004 	str.w	r1, [r9, #4]
 800a438:	cd03      	ldmia	r5!, {r0, r1}
 800a43a:	882d      	ldrh	r5, [r5, #0]
 800a43c:	f8c9 2008 	str.w	r2, [r9, #8]
 800a440:	f8c9 300c 	str.w	r3, [r9, #12]
 800a444:	f8a9 5018 	strh.w	r5, [r9, #24]
 800a448:	f8c9 0010 	str.w	r0, [r9, #16]
 800a44c:	f8c9 1014 	str.w	r1, [r9, #20]
 800a450:	4620      	mov	r0, r4
 800a452:	f7fc ff5d 	bl	8007310 <acc_base_configuration_repetition_mode_get>
 800a456:	2801      	cmp	r0, #1
 800a458:	d020      	beq.n	800a49c <acc_sweep_manager_prepare+0x128>
 800a45a:	4620      	mov	r0, r4
 800a45c:	f7fc ff62 	bl	8007324 <acc_base_configuration_update_rate_get>
 800a460:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a4a4 <acc_sweep_manager_prepare+0x130>
 800a464:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a468:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a46c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a470:	ee17 3a90 	vmov	r3, s15
 800a474:	2200      	movs	r2, #0
 800a476:	f8c8 3000 	str.w	r3, [r8]
 800a47a:	f8c8 2008 	str.w	r2, [r8, #8]
 800a47e:	f8a8 2006 	strh.w	r2, [r8, #6]
 800a482:	4630      	mov	r0, r6
 800a484:	b015      	add	sp, #84	; 0x54
 800a486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a48a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800a48e:	4628      	mov	r0, r5
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	4798      	blx	r3
 800a494:	4630      	mov	r0, r6
 800a496:	b015      	add	sp, #84	; 0x54
 800a498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a49c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a4a0:	e7e8      	b.n	800a474 <acc_sweep_manager_prepare+0x100>
 800a4a2:	bf00      	nop
 800a4a4:	44fa0000 	.word	0x44fa0000

0800a4a8 <acc_sweep_manager_release>:
 800a4a8:	b120      	cbz	r0, 800a4b4 <acc_sweep_manager_release+0xc>
 800a4aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a4ac:	b113      	cbz	r3, 800a4b4 <acc_sweep_manager_release+0xc>
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	3014      	adds	r0, #20
 800a4b2:	4718      	bx	r3
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop

0800a4b8 <acc_sweep_manager_is_sensor_connected>:
 800a4b8:	3014      	adds	r0, #20
 800a4ba:	f005 b8b1 	b.w	800f620 <acc_radar_engine_check_asic_id>
 800a4be:	bf00      	nop

0800a4c0 <acc_sweep_manager_calibrate>:
 800a4c0:	b410      	push	{r4}
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	3014      	adds	r0, #20
 800a4c6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800a4c8:	68a4      	ldr	r4, [r4, #8]
 800a4ca:	46a4      	mov	ip, r4
 800a4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d0:	4760      	bx	ip
 800a4d2:	bf00      	nop

0800a4d4 <acc_sweep_manager_measure_noise>:
 800a4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d8:	4604      	mov	r4, r0
 800a4da:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 800a4de:	686f      	ldr	r7, [r5, #4]
 800a4e0:	461e      	mov	r6, r3
 800a4e2:	4615      	mov	r5, r2
 800a4e4:	47b8      	blx	r7
 800a4e6:	b140      	cbz	r0, 800a4fa <acc_sweep_manager_measure_noise+0x26>
 800a4e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f104 0014 	add.w	r0, r4, #20
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f8:	4718      	bx	r3
 800a4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fe:	bf00      	nop

0800a500 <acc_sweep_manager_start>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4604      	mov	r4, r0
 800a504:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	4615      	mov	r5, r2
 800a50c:	4798      	blx	r3
 800a50e:	b138      	cbz	r0, 800a520 <acc_sweep_manager_start+0x20>
 800a510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a512:	4629      	mov	r1, r5
 800a514:	f104 0014 	add.w	r0, r4, #20
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a51e:	4718      	bx	r3
 800a520:	bd70      	pop	{r4, r5, r6, pc}
 800a522:	bf00      	nop

0800a524 <acc_sweep_manager_wait_for_data>:
 800a524:	f850 1b14 	ldr.w	r1, [r0], #20
 800a528:	2200      	movs	r2, #0
 800a52a:	f005 b87d 	b.w	800f628 <acc_radar_engine_wait_for_radar_data>
 800a52e:	bf00      	nop

0800a530 <acc_sweep_manager_wait_for_hibernate_ready>:
 800a530:	f850 1b14 	ldr.w	r1, [r0], #20
 800a534:	f005 b880 	b.w	800f638 <acc_radar_engine_wait_for_hibernate_ready>

0800a538 <acc_sweep_manager_measure>:
 800a538:	3014      	adds	r0, #20
 800a53a:	f005 b879 	b.w	800f630 <acc_radar_engine_measure>
 800a53e:	bf00      	nop

0800a540 <acc_sweep_manager_acquire_adc_data>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	2300      	movs	r3, #0
 800a544:	b084      	sub	sp, #16
 800a546:	4604      	mov	r4, r0
 800a548:	6043      	str	r3, [r0, #4]
 800a54a:	6083      	str	r3, [r0, #8]
 800a54c:	60c3      	str	r3, [r0, #12]
 800a54e:	6103      	str	r3, [r0, #16]
 800a550:	466a      	mov	r2, sp
 800a552:	3014      	adds	r0, #20
 800a554:	f005 f874 	bl	800f640 <acc_radar_engine_acquire_adc_data>
 800a558:	9b02      	ldr	r3, [sp, #8]
 800a55a:	f8bd 6000 	ldrh.w	r6, [sp]
 800a55e:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800a562:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800a566:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a56a:	60a0      	str	r0, [r4, #8]
 800a56c:	1d20      	adds	r0, r4, #4
 800a56e:	80e6      	strh	r6, [r4, #6]
 800a570:	80a5      	strh	r5, [r4, #4]
 800a572:	7321      	strb	r1, [r4, #12]
 800a574:	7362      	strb	r2, [r4, #13]
 800a576:	6123      	str	r3, [r4, #16]
 800a578:	b004      	add	sp, #16
 800a57a:	bd70      	pop	{r4, r5, r6, pc}

0800a57c <acc_sweep_manager_production_test>:
 800a57c:	b410      	push	{r4}
 800a57e:	4604      	mov	r4, r0
 800a580:	3014      	adds	r0, #20
 800a582:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800a584:	46a4      	mov	ip, r4
 800a586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a58a:	4760      	bx	ip

0800a58c <acc_alg_basic_subtract_mean_uint16>:
 800a58c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	d13c      	bne.n	800a60e <acc_alg_basic_subtract_mean_uint16+0x82>
 800a594:	2900      	cmp	r1, #0
 800a596:	d036      	beq.n	800a606 <acc_alg_basic_subtract_mean_uint16+0x7a>
 800a598:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800a59c:	4604      	mov	r4, r0
 800a59e:	2500      	movs	r5, #0
 800a5a0:	f834 2b02 	ldrh.w	r2, [r4], #2
 800a5a4:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800a5a8:	42a6      	cmp	r6, r4
 800a5aa:	4415      	add	r5, r2
 800a5ac:	d1f8      	bne.n	800a5a0 <acc_alg_basic_subtract_mean_uint16+0x14>
 800a5ae:	2d00      	cmp	r5, #0
 800a5b0:	bfac      	ite	ge
 800a5b2:	2401      	movge	r4, #1
 800a5b4:	f04f 34ff 	movlt.w	r4, #4294967295
 800a5b8:	084a      	lsrs	r2, r1, #1
 800a5ba:	fb04 5202 	mla	r2, r4, r2, r5
 800a5be:	fb92 f5f1 	sdiv	r5, r2, r1
 800a5c2:	b22c      	sxth	r4, r5
 800a5c4:	2c00      	cmp	r4, #0
 800a5c6:	dd0e      	ble.n	800a5e6 <acc_alg_basic_subtract_mean_uint16+0x5a>
 800a5c8:	b2ad      	uxth	r5, r5
 800a5ca:	f830 2b02 	ldrh.w	r2, [r0], #2
 800a5ce:	42aa      	cmp	r2, r5
 800a5d0:	bf26      	itte	cs
 800a5d2:	1b52      	subcs	r2, r2, r5
 800a5d4:	b292      	uxthcs	r2, r2
 800a5d6:	2200      	movcc	r2, #0
 800a5d8:	4286      	cmp	r6, r0
 800a5da:	f820 2c02 	strh.w	r2, [r0, #-2]
 800a5de:	d1f4      	bne.n	800a5ca <acc_alg_basic_subtract_mean_uint16+0x3e>
 800a5e0:	b103      	cbz	r3, 800a5e4 <acc_alg_basic_subtract_mean_uint16+0x58>
 800a5e2:	801c      	strh	r4, [r3, #0]
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	f504 417f 	add.w	r1, r4, #65280	; 0xff00
 800a5ea:	31ff      	adds	r1, #255	; 0xff
 800a5ec:	f830 2b02 	ldrh.w	r2, [r0], #2
 800a5f0:	4291      	cmp	r1, r2
 800a5f2:	bfa6      	itte	ge
 800a5f4:	1b52      	subge	r2, r2, r5
 800a5f6:	b292      	uxthge	r2, r2
 800a5f8:	f64f 72ff 	movwlt	r2, #65535	; 0xffff
 800a5fc:	42b0      	cmp	r0, r6
 800a5fe:	f820 2c02 	strh.w	r2, [r0, #-2]
 800a602:	d1f3      	bne.n	800a5ec <acc_alg_basic_subtract_mean_uint16+0x60>
 800a604:	e7ec      	b.n	800a5e0 <acc_alg_basic_subtract_mean_uint16+0x54>
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0ec      	beq.n	800a5e4 <acc_alg_basic_subtract_mean_uint16+0x58>
 800a60a:	8019      	strh	r1, [r3, #0]
 800a60c:	bd70      	pop	{r4, r5, r6, pc}
 800a60e:	4802      	ldr	r0, [pc, #8]	; (800a618 <acc_alg_basic_subtract_mean_uint16+0x8c>)
 800a610:	211b      	movs	r1, #27
 800a612:	f7fc fb73 	bl	8006cfc <acc_assert_fail>
 800a616:	bf00      	nop
 800a618:	08016bc4 	.word	0x08016bc4

0800a61c <acc_alg_basic_subtract_section_mean_q12_4>:
 800a61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	2a00      	cmp	r2, #0
 800a622:	bf14      	ite	ne
 800a624:	4690      	movne	r8, r2
 800a626:	4688      	moveq	r8, r1
 800a628:	b1b9      	cbz	r1, 800a65a <acc_alg_basic_subtract_section_mean_q12_4+0x3e>
 800a62a:	460f      	mov	r7, r1
 800a62c:	4681      	mov	r9, r0
 800a62e:	469a      	mov	sl, r3
 800a630:	460d      	mov	r5, r1
 800a632:	4646      	mov	r6, r8
 800a634:	2400      	movs	r4, #0
 800a636:	19a3      	adds	r3, r4, r6
 800a638:	42bb      	cmp	r3, r7
 800a63a:	bfc8      	it	gt
 800a63c:	462e      	movgt	r6, r5
 800a63e:	eb09 0044 	add.w	r0, r9, r4, lsl #1
 800a642:	4444      	add	r4, r8
 800a644:	4631      	mov	r1, r6
 800a646:	2300      	movs	r3, #0
 800a648:	4652      	mov	r2, sl
 800a64a:	b2a4      	uxth	r4, r4
 800a64c:	f7ff ff9e 	bl	800a58c <acc_alg_basic_subtract_mean_uint16>
 800a650:	eba5 0508 	sub.w	r5, r5, r8
 800a654:	42a7      	cmp	r7, r4
 800a656:	b2ad      	uxth	r5, r5
 800a658:	d8ed      	bhi.n	800a636 <acc_alg_basic_subtract_section_mean_q12_4+0x1a>
 800a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65e:	bf00      	nop

0800a660 <acc_alg_basic_utils_bubble_sort>:
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	b089      	sub	sp, #36	; 0x24
 800a666:	4690      	mov	r8, r2
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	1883      	adds	r3, r0, r2
 800a66c:	9003      	str	r0, [sp, #12]
 800a66e:	fb01 0902 	mla	r9, r1, r2, r0
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	9f02      	ldr	r7, [sp, #8]
 800a676:	45b9      	cmp	r9, r7
 800a678:	d932      	bls.n	800a6e0 <acc_alg_basic_utils_bubble_sort+0x80>
 800a67a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a67e:	2401      	movs	r4, #1
 800a680:	e003      	b.n	800a68a <acc_alg_basic_utils_bubble_sort+0x2a>
 800a682:	4447      	add	r7, r8
 800a684:	45b9      	cmp	r9, r7
 800a686:	44c3      	add	fp, r8
 800a688:	d928      	bls.n	800a6dc <acc_alg_basic_utils_bubble_sort+0x7c>
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	4639      	mov	r1, r7
 800a68e:	4658      	mov	r0, fp
 800a690:	4798      	blx	r3
 800a692:	2800      	cmp	r0, #0
 800a694:	ddf5      	ble.n	800a682 <acc_alg_basic_utils_bubble_sort+0x22>
 800a696:	f1b8 0f00 	cmp.w	r8, #0
 800a69a:	d019      	beq.n	800a6d0 <acc_alg_basic_utils_bubble_sort+0x70>
 800a69c:	46ba      	mov	sl, r7
 800a69e:	465e      	mov	r6, fp
 800a6a0:	4645      	mov	r5, r8
 800a6a2:	2d10      	cmp	r5, #16
 800a6a4:	462c      	mov	r4, r5
 800a6a6:	bf28      	it	cs
 800a6a8:	2410      	movcs	r4, #16
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	a804      	add	r0, sp, #16
 800a6b0:	f006 fa52 	bl	8010b58 <memcpy>
 800a6b4:	4651      	mov	r1, sl
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f006 fa4d 	bl	8010b58 <memcpy>
 800a6be:	4650      	mov	r0, sl
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	a904      	add	r1, sp, #16
 800a6c4:	f006 fa48 	bl	8010b58 <memcpy>
 800a6c8:	1b2d      	subs	r5, r5, r4
 800a6ca:	4426      	add	r6, r4
 800a6cc:	44a2      	add	sl, r4
 800a6ce:	d1e8      	bne.n	800a6a2 <acc_alg_basic_utils_bubble_sort+0x42>
 800a6d0:	4447      	add	r7, r8
 800a6d2:	45b9      	cmp	r9, r7
 800a6d4:	f04f 0400 	mov.w	r4, #0
 800a6d8:	44c3      	add	fp, r8
 800a6da:	d8d6      	bhi.n	800a68a <acc_alg_basic_utils_bubble_sort+0x2a>
 800a6dc:	2c00      	cmp	r4, #0
 800a6de:	d0c9      	beq.n	800a674 <acc_alg_basic_utils_bubble_sort+0x14>
 800a6e0:	b009      	add	sp, #36	; 0x24
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	bf00      	nop

0800a6e8 <acc_alg_basic_online_variance_f32_free>:
 800a6e8:	b180      	cbz	r0, 800a70c <acc_alg_basic_online_variance_f32_free+0x24>
 800a6ea:	6803      	ldr	r3, [r0, #0]
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	b15b      	cbz	r3, 800a70a <acc_alg_basic_online_variance_f32_free+0x22>
 800a6f2:	6898      	ldr	r0, [r3, #8]
 800a6f4:	f7fc fc08 	bl	8006f08 <acc_rss_integration_mem_free>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	68d8      	ldr	r0, [r3, #12]
 800a6fc:	f7fc fc04 	bl	8006f08 <acc_rss_integration_mem_free>
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	f7fc fc01 	bl	8006f08 <acc_rss_integration_mem_free>
 800a706:	2300      	movs	r3, #0
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd10      	pop	{r4, pc}
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop

0800a710 <acc_alg_cca_calculate>:
 800a710:	2901      	cmp	r1, #1
 800a712:	b538      	push	{r3, r4, r5, lr}
 800a714:	d922      	bls.n	800a75c <acc_alg_cca_calculate+0x4c>
 800a716:	1e8d      	subs	r5, r1, #2
 800a718:	1c83      	adds	r3, r0, #2
 800a71a:	b2ad      	uxth	r5, r5
 800a71c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800a720:	2400      	movs	r4, #0
 800a722:	4602      	mov	r2, r0
 800a724:	3002      	adds	r0, #2
 800a726:	8853      	ldrh	r3, [r2, #2]
 800a728:	8812      	ldrh	r2, [r2, #0]
 800a72a:	1a9b      	subs	r3, r3, r2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb8      	it	lt
 800a730:	425b      	neglt	r3, r3
 800a732:	4285      	cmp	r5, r0
 800a734:	441c      	add	r4, r3
 800a736:	d1f4      	bne.n	800a722 <acc_alg_cca_calculate+0x12>
 800a738:	ee07 4a90 	vmov	s15, r4
 800a73c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a740:	3901      	subs	r1, #1
 800a742:	ee07 1a10 	vmov	s14, r1
 800a746:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800a74a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a74e:	f007 fa67 	bl	8011c20 <log10f>
 800a752:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800a756:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	eddf 7a01 	vldr	s15, [pc, #4]	; 800a764 <acc_alg_cca_calculate+0x54>
 800a760:	e7ee      	b.n	800a740 <acc_alg_cca_calculate+0x30>
 800a762:	bf00      	nop
 800a764:	00000000 	.word	0x00000000

0800a768 <acc_diagnostic_log_set_scope>:
 800a768:	4b02      	ldr	r3, [pc, #8]	; (800a774 <acc_diagnostic_log_set_scope+0xc>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	b10b      	cbz	r3, 800a772 <acc_diagnostic_log_set_scope+0xa>
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4718      	bx	r3
 800a772:	4770      	bx	lr
 800a774:	20000248 	.word	0x20000248

0800a778 <acc_diagnostic_log_declare_parameter>:
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <acc_diagnostic_log_declare_parameter+0xc>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	b10b      	cbz	r3, 800a782 <acc_diagnostic_log_declare_parameter+0xa>
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	4718      	bx	r3
 800a782:	4770      	bx	lr
 800a784:	20000248 	.word	0x20000248

0800a788 <acc_diagnostic_log_set_parameter>:
 800a788:	4b02      	ldr	r3, [pc, #8]	; (800a794 <acc_diagnostic_log_set_parameter+0xc>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	b10b      	cbz	r3, 800a792 <acc_diagnostic_log_set_parameter+0xa>
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	4718      	bx	r3
 800a792:	4770      	bx	lr
 800a794:	20000248 	.word	0x20000248

0800a798 <acc_diagnostic_log_array>:
 800a798:	4b02      	ldr	r3, [pc, #8]	; (800a7a4 <acc_diagnostic_log_array+0xc>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	b10b      	cbz	r3, 800a7a2 <acc_diagnostic_log_array+0xa>
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	4718      	bx	r3
 800a7a2:	4770      	bx	lr
 800a7a4:	20000248 	.word	0x20000248

0800a7a8 <acc_diagnostic_log_array_sub_name>:
 800a7a8:	4b02      	ldr	r3, [pc, #8]	; (800a7b4 <acc_diagnostic_log_array_sub_name+0xc>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	b10b      	cbz	r3, 800a7b2 <acc_diagnostic_log_array_sub_name+0xa>
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	4718      	bx	r3
 800a7b2:	4770      	bx	lr
 800a7b4:	20000248 	.word	0x20000248

0800a7b8 <acc_diagnostic_log_scalar>:
 800a7b8:	4b02      	ldr	r3, [pc, #8]	; (800a7c4 <acc_diagnostic_log_scalar+0xc>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	b10b      	cbz	r3, 800a7c2 <acc_diagnostic_log_scalar+0xa>
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	4718      	bx	r3
 800a7c2:	4770      	bx	lr
 800a7c4:	20000248 	.word	0x20000248

0800a7c8 <acc_diagnostic_log_data_u16>:
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <acc_diagnostic_log_data_u16+0xc>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	b10b      	cbz	r3, 800a7d2 <acc_diagnostic_log_data_u16+0xa>
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	4718      	bx	r3
 800a7d2:	4770      	bx	lr
 800a7d4:	20000248 	.word	0x20000248

0800a7d8 <acc_diagnostic_log_data_i16>:
 800a7d8:	4b02      	ldr	r3, [pc, #8]	; (800a7e4 <acc_diagnostic_log_data_i16+0xc>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	b10b      	cbz	r3, 800a7e2 <acc_diagnostic_log_data_i16+0xa>
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	4718      	bx	r3
 800a7e2:	4770      	bx	lr
 800a7e4:	20000248 	.word	0x20000248

0800a7e8 <acc_diagnostic_log_data_u8>:
 800a7e8:	4b02      	ldr	r3, [pc, #8]	; (800a7f4 <acc_diagnostic_log_data_u8+0xc>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	b10b      	cbz	r3, 800a7f2 <acc_diagnostic_log_data_u8+0xa>
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f0:	4718      	bx	r3
 800a7f2:	4770      	bx	lr
 800a7f4:	20000248 	.word	0x20000248

0800a7f8 <acc_element_sizeof>:
 800a7f8:	3801      	subs	r0, #1
 800a7fa:	b2c0      	uxtb	r0, r0
 800a7fc:	2808      	cmp	r0, #8
 800a7fe:	bf9a      	itte	ls
 800a800:	4b02      	ldrls	r3, [pc, #8]	; (800a80c <acc_element_sizeof+0x14>)
 800a802:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800a806:	2000      	movhi	r0, #0
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	08016bdc 	.word	0x08016bdc

0800a810 <acc_element_connect>:
 800a810:	6001      	str	r1, [r0, #0]
 800a812:	4770      	bx	lr

0800a814 <event>:
 800a814:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a816:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a818:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 800a81c:	6811      	ldr	r1, [r2, #0]
 800a81e:	b570      	push	{r4, r5, r6, lr}
 800a820:	4604      	mov	r4, r0
 800a822:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 800a826:	4798      	blx	r3
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	7028      	strb	r0, [r5, #0]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a832:	4618      	mov	r0, r3
 800a834:	4710      	bx	r2
 800a836:	bf00      	nop

0800a838 <reset>:
 800a838:	6800      	ldr	r0, [r0, #0]
 800a83a:	68c3      	ldr	r3, [r0, #12]
 800a83c:	4718      	bx	r3
 800a83e:	bf00      	nop

0800a840 <validate>:
 800a840:	6983      	ldr	r3, [r0, #24]
 800a842:	b510      	push	{r4, lr}
 800a844:	4604      	mov	r4, r0
 800a846:	b113      	cbz	r3, 800a84e <validate+0xe>
 800a848:	f7fc fb76 	bl	8006f38 <acc_rss_integration_log_level>
 800a84c:	b978      	cbnz	r0, 800a86e <validate+0x2e>
 800a84e:	69e3      	ldr	r3, [r4, #28]
 800a850:	b143      	cbz	r3, 800a864 <validate+0x24>
 800a852:	f7fc fb71 	bl	8006f38 <acc_rss_integration_log_level>
 800a856:	b128      	cbz	r0, 800a864 <validate+0x24>
 800a858:	4b08      	ldr	r3, [pc, #32]	; (800a87c <validate+0x3c>)
 800a85a:	4a09      	ldr	r2, [pc, #36]	; (800a880 <validate+0x40>)
 800a85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85e:	4909      	ldr	r1, [pc, #36]	; (800a884 <validate+0x44>)
 800a860:	2001      	movs	r0, #1
 800a862:	4798      	blx	r3
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a86a:	6883      	ldr	r3, [r0, #8]
 800a86c:	4718      	bx	r3
 800a86e:	4b03      	ldr	r3, [pc, #12]	; (800a87c <validate+0x3c>)
 800a870:	4a05      	ldr	r2, [pc, #20]	; (800a888 <validate+0x48>)
 800a872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a874:	4903      	ldr	r1, [pc, #12]	; (800a884 <validate+0x44>)
 800a876:	2001      	movs	r0, #1
 800a878:	4798      	blx	r3
 800a87a:	e7e8      	b.n	800a84e <validate+0xe>
 800a87c:	20000640 	.word	0x20000640
 800a880:	08016c30 	.word	0x08016c30
 800a884:	08016c14 	.word	0x08016c14
 800a888:	08016c00 	.word	0x08016c00

0800a88c <saturation_check_i16>:
 800a88c:	f005 b9de 	b.w	800fc4c <acc_alg_basic_saturation_check_i16>

0800a890 <saturation_check_u16>:
 800a890:	f005 b9a8 	b.w	800fbe4 <acc_alg_basic_saturation_check_u16>

0800a894 <acc_element_saturation_check_init>:
 800a894:	2903      	cmp	r1, #3
 800a896:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 800a89a:	d00e      	beq.n	800a8ba <acc_element_saturation_check_init+0x26>
 800a89c:	2905      	cmp	r1, #5
 800a89e:	d016      	beq.n	800a8ce <acc_element_saturation_check_init+0x3a>
 800a8a0:	2902      	cmp	r1, #2
 800a8a2:	d014      	beq.n	800a8ce <acc_element_saturation_check_init+0x3a>
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <acc_element_saturation_check_init+0x40>)
 800a8a8:	4a0b      	ldr	r2, [pc, #44]	; (800a8d8 <acc_element_saturation_check_init+0x44>)
 800a8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ac:	490b      	ldr	r1, [pc, #44]	; (800a8dc <acc_element_saturation_check_init+0x48>)
 800a8ae:	2400      	movs	r4, #0
 800a8b0:	63c4      	str	r4, [r0, #60]	; 0x3c
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4798      	blx	r3
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	4b09      	ldr	r3, [pc, #36]	; (800a8e0 <acc_element_saturation_check_init+0x4c>)
 800a8bc:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a8be:	4909      	ldr	r1, [pc, #36]	; (800a8e4 <acc_element_saturation_check_init+0x50>)
 800a8c0:	4a09      	ldr	r2, [pc, #36]	; (800a8e8 <acc_element_saturation_check_init+0x54>)
 800a8c2:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <acc_element_saturation_check_init+0x58>)
 800a8c4:	60c3      	str	r3, [r0, #12]
 800a8c6:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a8ca:	2001      	movs	r0, #1
 800a8cc:	4770      	bx	lr
 800a8ce:	4b08      	ldr	r3, [pc, #32]	; (800a8f0 <acc_element_saturation_check_init+0x5c>)
 800a8d0:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a8d2:	e7f4      	b.n	800a8be <acc_element_saturation_check_init+0x2a>
 800a8d4:	20000640 	.word	0x20000640
 800a8d8:	08016c40 	.word	0x08016c40
 800a8dc:	08016c14 	.word	0x08016c14
 800a8e0:	0800a88d 	.word	0x0800a88d
 800a8e4:	0800a815 	.word	0x0800a815
 800a8e8:	0800a841 	.word	0x0800a841
 800a8ec:	0800a839 	.word	0x0800a839
 800a8f0:	0800a891 	.word	0x0800a891

0800a8f4 <consume>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 800a8fc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a8fe:	6900      	ldr	r0, [r0, #16]
 800a900:	4798      	blx	r3
 800a902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a904:	2200      	movs	r2, #0
 800a906:	611a      	str	r2, [r3, #16]
 800a908:	bd10      	pop	{r4, pc}
 800a90a:	bf00      	nop

0800a90c <reset>:
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop

0800a910 <validate>:
 800a910:	6983      	ldr	r3, [r0, #24]
 800a912:	b510      	push	{r4, lr}
 800a914:	4604      	mov	r4, r0
 800a916:	b113      	cbz	r3, 800a91e <validate+0xe>
 800a918:	f7fc fb0e 	bl	8006f38 <acc_rss_integration_log_level>
 800a91c:	b9c8      	cbnz	r0, 800a952 <validate+0x42>
 800a91e:	69e3      	ldr	r3, [r4, #28]
 800a920:	b113      	cbz	r3, 800a928 <validate+0x18>
 800a922:	f7fc fb09 	bl	8006f38 <acc_rss_integration_log_level>
 800a926:	b948      	cbnz	r0, 800a93c <validate+0x2c>
 800a928:	6963      	ldr	r3, [r4, #20]
 800a92a:	b183      	cbz	r3, 800a94e <validate+0x3e>
 800a92c:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <validate+0x50>)
 800a92e:	4a0d      	ldr	r2, [pc, #52]	; (800a964 <validate+0x54>)
 800a930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a932:	490d      	ldr	r1, [pc, #52]	; (800a968 <validate+0x58>)
 800a934:	2000      	movs	r0, #0
 800a936:	4798      	blx	r3
 800a938:	2000      	movs	r0, #0
 800a93a:	bd10      	pop	{r4, pc}
 800a93c:	4b08      	ldr	r3, [pc, #32]	; (800a960 <validate+0x50>)
 800a93e:	4a0b      	ldr	r2, [pc, #44]	; (800a96c <validate+0x5c>)
 800a940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a942:	4909      	ldr	r1, [pc, #36]	; (800a968 <validate+0x58>)
 800a944:	2001      	movs	r0, #1
 800a946:	4798      	blx	r3
 800a948:	6963      	ldr	r3, [r4, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1ee      	bne.n	800a92c <validate+0x1c>
 800a94e:	2001      	movs	r0, #1
 800a950:	bd10      	pop	{r4, pc}
 800a952:	4b03      	ldr	r3, [pc, #12]	; (800a960 <validate+0x50>)
 800a954:	4a06      	ldr	r2, [pc, #24]	; (800a970 <validate+0x60>)
 800a956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a958:	4903      	ldr	r1, [pc, #12]	; (800a968 <validate+0x58>)
 800a95a:	2001      	movs	r0, #1
 800a95c:	4798      	blx	r3
 800a95e:	e7de      	b.n	800a91e <validate+0xe>
 800a960:	20000640 	.word	0x20000640
 800a964:	08016c6c 	.word	0x08016c6c
 800a968:	08016c54 	.word	0x08016c54
 800a96c:	08016c30 	.word	0x08016c30
 800a970:	08016c00 	.word	0x08016c00

0800a974 <acc_element_sink_callback_init>:
 800a974:	b410      	push	{r4}
 800a976:	4a05      	ldr	r2, [pc, #20]	; (800a98c <acc_element_sink_callback_init+0x18>)
 800a978:	4c05      	ldr	r4, [pc, #20]	; (800a990 <acc_element_sink_callback_init+0x1c>)
 800a97a:	4b06      	ldr	r3, [pc, #24]	; (800a994 <acc_element_sink_callback_init+0x20>)
 800a97c:	6401      	str	r1, [r0, #64]	; 0x40
 800a97e:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800a982:	60c3      	str	r3, [r0, #12]
 800a984:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	0800a911 	.word	0x0800a911
 800a990:	0800a8f5 	.word	0x0800a8f5
 800a994:	0800a90d 	.word	0x0800a90d

0800a998 <acc_sensor_reg_read>:
 800a998:	b530      	push	{r4, r5, lr}
 800a99a:	b083      	sub	sp, #12
 800a99c:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	f8ad 1000 	strh.w	r1, [sp]
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	2203      	movs	r2, #3
 800a9ac:	4669      	mov	r1, sp
 800a9ae:	f8ad 5002 	strh.w	r5, [sp, #2]
 800a9b2:	f8ad 5004 	strh.w	r5, [sp, #4]
 800a9b6:	f7fc fa3d 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 800a9ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a9be:	8023      	strh	r3, [r4, #0]
 800a9c0:	b003      	add	sp, #12
 800a9c2:	bd30      	pop	{r4, r5, pc}

0800a9c4 <acc_sensor_reg_write>:
 800a9c4:	b530      	push	{r4, r5, lr}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	a901      	add	r1, sp, #4
 800a9d4:	f8ad 4004 	strh.w	r4, [sp, #4]
 800a9d8:	f8ad 5006 	strh.w	r5, [sp, #6]
 800a9dc:	f7fc fa2a 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 800a9e0:	b003      	add	sp, #12
 800a9e2:	bd30      	pop	{r4, r5, pc}

0800a9e4 <acc_sensor_reg_field_write>:
 800a9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	461d      	mov	r5, r3
 800a9ec:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a9f0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 800a9f4:	f8ad 3000 	strh.w	r3, [sp]
 800a9f8:	2700      	movs	r7, #0
 800a9fa:	468a      	mov	sl, r1
 800a9fc:	4691      	mov	r9, r2
 800a9fe:	4669      	mov	r1, sp
 800aa00:	2301      	movs	r3, #1
 800aa02:	2203      	movs	r2, #3
 800aa04:	4680      	mov	r8, r0
 800aa06:	f8ad 7002 	strh.w	r7, [sp, #2]
 800aa0a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800aa0e:	f7fc fa11 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 800aa12:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800aa16:	fa04 f10a 	lsl.w	r1, r4, sl
 800aa1a:	4071      	eors	r1, r6
 800aa1c:	ea01 0409 	and.w	r4, r1, r9
 800aa20:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800aa24:	4640      	mov	r0, r8
 800aa26:	463b      	mov	r3, r7
 800aa28:	4669      	mov	r1, sp
 800aa2a:	4074      	eors	r4, r6
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	f8ad 5000 	strh.w	r5, [sp]
 800aa32:	f8ad 4002 	strh.w	r4, [sp, #2]
 800aa36:	f7fc f9fd 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 800aa3a:	b002      	add	sp, #8
 800aa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aa40 <acc_sensor_conf_read_instr>:
 800aa40:	b530      	push	{r4, r5, lr}
 800aa42:	b085      	sub	sp, #20
 800aa44:	2401      	movs	r4, #1
 800aa46:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	2500      	movs	r5, #0
 800aa4e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800aa52:	2205      	movs	r2, #5
 800aa54:	a901      	add	r1, sp, #4
 800aa56:	f8ad 4006 	strh.w	r4, [sp, #6]
 800aa5a:	f8ad 5008 	strh.w	r5, [sp, #8]
 800aa5e:	f8cd 500a 	str.w	r5, [sp, #10]
 800aa62:	f7fc f9e7 	bl	8006e34 <acc_rss_integration_sensor_device_transfer>
 800aa66:	f10d 000a 	add.w	r0, sp, #10
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	4669      	mov	r1, sp
 800aa6e:	f7fc fac7 	bl	8007000 <acc_utils_transfer_buffer_to_uint32>
 800aa72:	9800      	ldr	r0, [sp, #0]
 800aa74:	b005      	add	sp, #20
 800aa76:	bd30      	pop	{r4, r5, pc}

0800aa78 <acc_cpd_pll_divisors_calculate>:
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	edd0 7a00 	vldr	s15, [r0]
 800aa7e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ab64 <acc_cpd_pll_divisors_calculate+0xec>
 800aa82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	dc3c      	bgt.n	800ab08 <acc_cpd_pll_divisors_calculate+0x90>
 800aa8e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ab68 <acc_cpd_pll_divisors_calculate+0xf0>
 800aa92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9a:	d435      	bmi.n	800ab08 <acc_cpd_pll_divisors_calculate+0x90>
 800aa9c:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800ab6c <acc_cpd_pll_divisors_calculate+0xf4>
 800aaa0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ab70 <acc_cpd_pll_divisors_calculate+0xf8>
 800aaa4:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800ab74 <acc_cpd_pll_divisors_calculate+0xfc>
 800aaa8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800aaac:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800aab0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800aab4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800aab8:	ee27 7a25 	vmul.f32	s14, s14, s11
 800aabc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800aac0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aac4:	ee16 3a90 	vmov	r3, s13
 800aac8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f1a3 0210 	sub.w	r2, r3, #16
 800aad2:	ee17 0a10 	vmov	r0, s14
 800aad6:	b292      	uxth	r2, r2
 800aad8:	2aef      	cmp	r2, #239	; 0xef
 800aada:	8108      	strh	r0, [r1, #8]
 800aadc:	d814      	bhi.n	800ab08 <acc_cpd_pll_divisors_calculate+0x90>
 800aade:	2b3f      	cmp	r3, #63	; 0x3f
 800aae0:	d938      	bls.n	800ab54 <acc_cpd_pll_divisors_calculate+0xdc>
 800aae2:	2bbf      	cmp	r3, #191	; 0xbf
 800aae4:	f04f 0201 	mov.w	r2, #1
 800aae8:	bf98      	it	ls
 800aaea:	f1a3 0040 	subls.w	r0, r3, #64	; 0x40
 800aaee:	804a      	strh	r2, [r1, #2]
 800aaf0:	bf8c      	ite	hi
 800aaf2:	08d8      	lsrhi	r0, r3, #3
 800aaf4:	f3c0 00cf 	ubfxls	r0, r0, #3, #16
 800aaf8:	f003 0207 	and.w	r2, r3, #7
 800aafc:	8088      	strh	r0, [r1, #4]
 800aafe:	80ca      	strh	r2, [r1, #6]
 800ab00:	2001      	movs	r0, #1
 800ab02:	800b      	strh	r3, [r1, #0]
 800ab04:	b002      	add	sp, #8
 800ab06:	bd10      	pop	{r4, pc}
 800ab08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab10:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800ab78 <acc_cpd_pll_divisors_calculate+0x100>
 800ab14:	eddf 6a19 	vldr	s13, [pc, #100]	; 800ab7c <acc_cpd_pll_divisors_calculate+0x104>
 800ab18:	4b19      	ldr	r3, [pc, #100]	; (800ab80 <acc_cpd_pll_divisors_calculate+0x108>)
 800ab1a:	4a1a      	ldr	r2, [pc, #104]	; (800ab84 <acc_cpd_pll_divisors_calculate+0x10c>)
 800ab1c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800ab1e:	491a      	ldr	r1, [pc, #104]	; (800ab88 <acc_cpd_pll_divisors_calculate+0x110>)
 800ab20:	bf4a      	itet	mi
 800ab22:	4b1a      	ldrmi	r3, [pc, #104]	; (800ab8c <acc_cpd_pll_divisors_calculate+0x114>)
 800ab24:	4b1a      	ldrpl	r3, [pc, #104]	; (800ab90 <acc_cpd_pll_divisors_calculate+0x118>)
 800ab26:	eef1 7a67 	vnegmi.f32	s15, s15
 800ab2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab2e:	2000      	movs	r0, #0
 800ab30:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ab34:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800ab38:	ed8d 7a00 	vstr	s14, [sp]
 800ab3c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ab40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ab44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab48:	edcd 7a01 	vstr	s15, [sp, #4]
 800ab4c:	47a0      	blx	r4
 800ab4e:	2000      	movs	r0, #0
 800ab50:	b002      	add	sp, #8
 800ab52:	bd10      	pop	{r4, pc}
 800ab54:	2000      	movs	r0, #0
 800ab56:	2b2f      	cmp	r3, #47	; 0x2f
 800ab58:	bf88      	it	hi
 800ab5a:	461a      	movhi	r2, r3
 800ab5c:	808a      	strh	r2, [r1, #4]
 800ab5e:	8048      	strh	r0, [r1, #2]
 800ab60:	80c8      	strh	r0, [r1, #6]
 800ab62:	e7cd      	b.n	800ab00 <acc_cpd_pll_divisors_calculate+0x88>
 800ab64:	4c989680 	.word	0x4c989680
 800ab68:	4b989680 	.word	0x4b989680
 800ab6c:	4f1502f9 	.word	0x4f1502f9
 800ab70:	b55b38e8 	.word	0xb55b38e8
 800ab74:	427c0000 	.word	0x427c0000
 800ab78:	350637bd 	.word	0x350637bd
 800ab7c:	49742400 	.word	0x49742400
 800ab80:	20000640 	.word	0x20000640
 800ab84:	08016c94 	.word	0x08016c94
 800ab88:	08016cc0 	.word	0x08016cc0
 800ab8c:	08016418 	.word	0x08016418
 800ab90:	08018e44 	.word	0x08018e44

0800ab94 <acc_cpd_pll_divisors_ref_divisor>:
 800ab94:	eddf 7a02 	vldr	s15, [pc, #8]	; 800aba0 <acc_cpd_pll_divisors_ref_divisor+0xc>
 800ab98:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ab9c:	f007 b81a 	b.w	8011bd4 <roundf>
 800aba0:	4f1502f9 	.word	0x4f1502f9

0800aba4 <acc_dll_calculate_area_settings>:
 800aba4:	0080      	lsls	r0, r0, #2
 800aba6:	b280      	uxth	r0, r0
 800aba8:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 800abac:	b29b      	uxth	r3, r3
 800abae:	428b      	cmp	r3, r1
 800abb0:	8010      	strh	r0, [r2, #0]
 800abb2:	8053      	strh	r3, [r2, #2]
 800abb4:	d20c      	bcs.n	800abd0 <acc_dll_calculate_area_settings+0x2c>
 800abb6:	2301      	movs	r3, #1
 800abb8:	2100      	movs	r1, #0
 800abba:	2003      	movs	r0, #3
 800abbc:	8093      	strh	r3, [r2, #4]
 800abbe:	8153      	strh	r3, [r2, #10]
 800abc0:	8193      	strh	r3, [r2, #12]
 800abc2:	8213      	strh	r3, [r2, #16]
 800abc4:	80d1      	strh	r1, [r2, #6]
 800abc6:	8251      	strh	r1, [r2, #18]
 800abc8:	8291      	strh	r1, [r2, #20]
 800abca:	8110      	strh	r0, [r2, #8]
 800abcc:	81d0      	strh	r0, [r2, #14]
 800abce:	4770      	bx	lr
 800abd0:	b430      	push	{r4, r5}
 800abd2:	fbb3 f4f1 	udiv	r4, r3, r1
 800abd6:	2500      	movs	r5, #0
 800abd8:	fb01 3114 	mls	r1, r1, r4, r3
 800abdc:	2401      	movs	r4, #1
 800abde:	2303      	movs	r3, #3
 800abe0:	8094      	strh	r4, [r2, #4]
 800abe2:	80d4      	strh	r4, [r2, #6]
 800abe4:	8154      	strh	r4, [r2, #10]
 800abe6:	8214      	strh	r4, [r2, #16]
 800abe8:	8254      	strh	r4, [r2, #18]
 800abea:	8195      	strh	r5, [r2, #12]
 800abec:	81d5      	strh	r5, [r2, #14]
 800abee:	8295      	strh	r5, [r2, #20]
 800abf0:	8050      	strh	r0, [r2, #2]
 800abf2:	bc30      	pop	{r4, r5}
 800abf4:	8011      	strh	r1, [r2, #0]
 800abf6:	8113      	strh	r3, [r2, #8]
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop

0800abfc <event>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ac02:	682a      	ldr	r2, [r5, #0]
 800ac04:	4604      	mov	r4, r0
 800ac06:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800ac0a:	4798      	blx	r3
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	6028      	str	r0, [r5, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac16:	4618      	mov	r0, r3
 800ac18:	4710      	bx	r2
 800ac1a:	bf00      	nop

0800ac1c <reset>:
 800ac1c:	6800      	ldr	r0, [r0, #0]
 800ac1e:	68c3      	ldr	r3, [r0, #12]
 800ac20:	4718      	bx	r3
 800ac22:	bf00      	nop

0800ac24 <validate>:
 800ac24:	6983      	ldr	r3, [r0, #24]
 800ac26:	b510      	push	{r4, lr}
 800ac28:	4604      	mov	r4, r0
 800ac2a:	b113      	cbz	r3, 800ac32 <validate+0xe>
 800ac2c:	f7fc f984 	bl	8006f38 <acc_rss_integration_log_level>
 800ac30:	b978      	cbnz	r0, 800ac52 <validate+0x2e>
 800ac32:	69e3      	ldr	r3, [r4, #28]
 800ac34:	b143      	cbz	r3, 800ac48 <validate+0x24>
 800ac36:	f7fc f97f 	bl	8006f38 <acc_rss_integration_log_level>
 800ac3a:	b128      	cbz	r0, 800ac48 <validate+0x24>
 800ac3c:	4b08      	ldr	r3, [pc, #32]	; (800ac60 <validate+0x3c>)
 800ac3e:	4a09      	ldr	r2, [pc, #36]	; (800ac64 <validate+0x40>)
 800ac40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac42:	4909      	ldr	r1, [pc, #36]	; (800ac68 <validate+0x44>)
 800ac44:	2001      	movs	r0, #1
 800ac46:	4798      	blx	r3
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac4e:	6883      	ldr	r3, [r0, #8]
 800ac50:	4718      	bx	r3
 800ac52:	4b03      	ldr	r3, [pc, #12]	; (800ac60 <validate+0x3c>)
 800ac54:	4a05      	ldr	r2, [pc, #20]	; (800ac6c <validate+0x48>)
 800ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac58:	4903      	ldr	r1, [pc, #12]	; (800ac68 <validate+0x44>)
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	4798      	blx	r3
 800ac5e:	e7e8      	b.n	800ac32 <validate+0xe>
 800ac60:	20000640 	.word	0x20000640
 800ac64:	08016c30 	.word	0x08016c30
 800ac68:	08016cd4 	.word	0x08016cd4
 800ac6c:	08016c00 	.word	0x08016c00

0800ac70 <abs_q3_12_complex>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	0897      	lsrs	r7, r2, #2
 800ac74:	d00b      	beq.n	800ac8e <abs_q3_12_complex+0x1e>
 800ac76:	4604      	mov	r4, r0
 800ac78:	1e8d      	subs	r5, r1, #2
 800ac7a:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 800ac7e:	f854 0b04 	ldr.w	r0, [r4], #4
 800ac82:	f7fb fc35 	bl	80064f0 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800ac86:	42b4      	cmp	r4, r6
 800ac88:	f825 0f02 	strh.w	r0, [r5, #2]!
 800ac8c:	d1f7      	bne.n	800ac7e <abs_q3_12_complex+0xe>
 800ac8e:	0078      	lsls	r0, r7, #1
 800ac90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac92:	bf00      	nop

0800ac94 <acc_element_abs_init>:
 800ac94:	b510      	push	{r4, lr}
 800ac96:	4a0b      	ldr	r2, [pc, #44]	; (800acc4 <acc_element_abs_init+0x30>)
 800ac98:	4c0b      	ldr	r4, [pc, #44]	; (800acc8 <acc_element_abs_init+0x34>)
 800ac9a:	4b0c      	ldr	r3, [pc, #48]	; (800accc <acc_element_abs_init+0x38>)
 800ac9c:	60c3      	str	r3, [r0, #12]
 800ac9e:	2908      	cmp	r1, #8
 800aca0:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800aca4:	d103      	bne.n	800acae <acc_element_abs_init+0x1a>
 800aca6:	4b0a      	ldr	r3, [pc, #40]	; (800acd0 <acc_element_abs_init+0x3c>)
 800aca8:	6383      	str	r3, [r0, #56]	; 0x38
 800acaa:	2001      	movs	r0, #1
 800acac:	bd10      	pop	{r4, pc}
 800acae:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <acc_element_abs_init+0x40>)
 800acb0:	4a09      	ldr	r2, [pc, #36]	; (800acd8 <acc_element_abs_init+0x44>)
 800acb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb4:	4909      	ldr	r1, [pc, #36]	; (800acdc <acc_element_abs_init+0x48>)
 800acb6:	2400      	movs	r4, #0
 800acb8:	6384      	str	r4, [r0, #56]	; 0x38
 800acba:	4620      	mov	r0, r4
 800acbc:	4798      	blx	r3
 800acbe:	4620      	mov	r0, r4
 800acc0:	bd10      	pop	{r4, pc}
 800acc2:	bf00      	nop
 800acc4:	0800ac25 	.word	0x0800ac25
 800acc8:	0800abfd 	.word	0x0800abfd
 800accc:	0800ac1d 	.word	0x0800ac1d
 800acd0:	0800ac71 	.word	0x0800ac71
 800acd4:	20000640 	.word	0x20000640
 800acd8:	08016c40 	.word	0x08016c40
 800acdc:	08016cd4 	.word	0x08016cd4

0800ace0 <event>:
 800ace0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ace2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ace4:	6811      	ldr	r1, [r2, #0]
 800ace6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800ace8:	b510      	push	{r4, lr}
 800acea:	4604      	mov	r4, r0
 800acec:	6900      	ldr	r0, [r0, #16]
 800acee:	4798      	blx	r3
 800acf0:	6820      	ldr	r0, [r4, #0]
 800acf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf6:	6843      	ldr	r3, [r0, #4]
 800acf8:	4718      	bx	r3
 800acfa:	bf00      	nop

0800acfc <reset>:
 800acfc:	6800      	ldr	r0, [r0, #0]
 800acfe:	68c3      	ldr	r3, [r0, #12]
 800ad00:	4718      	bx	r3
 800ad02:	bf00      	nop

0800ad04 <validate>:
 800ad04:	6983      	ldr	r3, [r0, #24]
 800ad06:	b510      	push	{r4, lr}
 800ad08:	4604      	mov	r4, r0
 800ad0a:	b113      	cbz	r3, 800ad12 <validate+0xe>
 800ad0c:	f7fc f914 	bl	8006f38 <acc_rss_integration_log_level>
 800ad10:	b978      	cbnz	r0, 800ad32 <validate+0x2e>
 800ad12:	69e3      	ldr	r3, [r4, #28]
 800ad14:	b143      	cbz	r3, 800ad28 <validate+0x24>
 800ad16:	f7fc f90f 	bl	8006f38 <acc_rss_integration_log_level>
 800ad1a:	b128      	cbz	r0, 800ad28 <validate+0x24>
 800ad1c:	4b08      	ldr	r3, [pc, #32]	; (800ad40 <validate+0x3c>)
 800ad1e:	4a09      	ldr	r2, [pc, #36]	; (800ad44 <validate+0x40>)
 800ad20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad22:	4909      	ldr	r1, [pc, #36]	; (800ad48 <validate+0x44>)
 800ad24:	2001      	movs	r0, #1
 800ad26:	4798      	blx	r3
 800ad28:	6820      	ldr	r0, [r4, #0]
 800ad2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2e:	6883      	ldr	r3, [r0, #8]
 800ad30:	4718      	bx	r3
 800ad32:	4b03      	ldr	r3, [pc, #12]	; (800ad40 <validate+0x3c>)
 800ad34:	4a05      	ldr	r2, [pc, #20]	; (800ad4c <validate+0x48>)
 800ad36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad38:	4903      	ldr	r1, [pc, #12]	; (800ad48 <validate+0x44>)
 800ad3a:	2001      	movs	r0, #1
 800ad3c:	4798      	blx	r3
 800ad3e:	e7e8      	b.n	800ad12 <validate+0xe>
 800ad40:	20000640 	.word	0x20000640
 800ad44:	08016c30 	.word	0x08016c30
 800ad48:	08016ce0 	.word	0x08016ce0
 800ad4c:	08016c00 	.word	0x08016c00

0800ad50 <centering_q12_4>:
 800ad50:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800ad54:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800ad58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad5c:	f7ff bc5e 	b.w	800a61c <acc_alg_basic_subtract_section_mean_q12_4>

0800ad60 <acc_element_centering_init>:
 800ad60:	b430      	push	{r4, r5}
 800ad62:	4b09      	ldr	r3, [pc, #36]	; (800ad88 <acc_element_centering_init+0x28>)
 800ad64:	60c3      	str	r3, [r0, #12]
 800ad66:	2905      	cmp	r1, #5
 800ad68:	4d08      	ldr	r5, [pc, #32]	; (800ad8c <acc_element_centering_init+0x2c>)
 800ad6a:	4c09      	ldr	r4, [pc, #36]	; (800ad90 <acc_element_centering_init+0x30>)
 800ad6c:	bf08      	it	eq
 800ad6e:	4909      	ldreq	r1, [pc, #36]	; (800ad94 <acc_element_centering_init+0x34>)
 800ad70:	8782      	strh	r2, [r0, #60]	; 0x3c
 800ad72:	bf1a      	itte	ne
 800ad74:	2300      	movne	r3, #0
 800ad76:	4619      	movne	r1, r3
 800ad78:	2301      	moveq	r3, #1
 800ad7a:	e9c0 5401 	strd	r5, r4, [r0, #4]
 800ad7e:	6381      	str	r1, [r0, #56]	; 0x38
 800ad80:	bc30      	pop	{r4, r5}
 800ad82:	4618      	mov	r0, r3
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	0800acfd 	.word	0x0800acfd
 800ad8c:	0800ace1 	.word	0x0800ace1
 800ad90:	0800ad05 	.word	0x0800ad05
 800ad94:	0800ad51 	.word	0x0800ad51

0800ad98 <convert_q3_12_to_u16>:
 800ad98:	0853      	lsrs	r3, r2, #1
 800ad9a:	d010      	beq.n	800adbe <convert_q3_12_to_u16+0x26>
 800ad9c:	b410      	push	{r4}
 800ad9e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800ada2:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 800ada6:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	4281      	cmp	r1, r0
 800adae:	f824 3d02 	strh.w	r3, [r4, #-2]!
 800adb2:	d1f8      	bne.n	800ada6 <convert_q3_12_to_u16+0xe>
 800adb4:	f022 0001 	bic.w	r0, r2, #1
 800adb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	f022 0001 	bic.w	r0, r2, #1
 800adc2:	4770      	bx	lr

0800adc4 <convert_q15_16_to_f32>:
 800adc4:	0893      	lsrs	r3, r2, #2
 800adc6:	d020      	beq.n	800ae0a <convert_q15_16_to_f32+0x46>
 800adc8:	eddf 6a11 	vldr	s13, [pc, #68]	; 800ae10 <convert_q15_16_to_f32+0x4c>
 800adcc:	b410      	push	{r4}
 800adce:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800add2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800add6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800adda:	fa1f fc83 	uxth.w	ip, r3
 800adde:	ee07 ca10 	vmov	s14, ip
 800ade2:	141b      	asrs	r3, r3, #16
 800ade4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ade8:	ee07 3a90 	vmov	s15, r3
 800adec:	ee27 7a26 	vmul.f32	s14, s14, s13
 800adf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adf4:	4288      	cmp	r0, r1
 800adf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adfa:	ed64 7a01 	vstmdb	r4!, {s15}
 800adfe:	d1ea      	bne.n	800add6 <convert_q15_16_to_f32+0x12>
 800ae00:	f022 0003 	bic.w	r0, r2, #3
 800ae04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	f022 0003 	bic.w	r0, r2, #3
 800ae0e:	4770      	bx	lr
 800ae10:	37800000 	.word	0x37800000

0800ae14 <convert_q3_12_complex_to_f32_complex>:
 800ae14:	0892      	lsrs	r2, r2, #2
 800ae16:	d024      	beq.n	800ae62 <convert_q3_12_complex_to_f32_complex+0x4e>
 800ae18:	eddf 6a13 	vldr	s13, [pc, #76]	; 800ae68 <convert_q3_12_complex_to_f32_complex+0x54>
 800ae1c:	eddf 5a13 	vldr	s11, [pc, #76]	; 800ae6c <convert_q3_12_complex_to_f32_complex+0x58>
 800ae20:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800ae24:	00d0      	lsls	r0, r2, #3
 800ae26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ae2a:	f933 cc02 	ldrsh.w	ip, [r3, #-2]
 800ae2e:	ee07 ca10 	vmov	s14, ip
 800ae32:	f933 cd04 	ldrsh.w	ip, [r3, #-4]!
 800ae36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae3a:	ee07 ca90 	vmov	s15, ip
 800ae3e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ae42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae46:	ee27 6a25 	vmul.f32	s12, s14, s11
 800ae4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ae4e:	ed02 7a01 	vstr	s14, [r2, #-4]
 800ae52:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ae56:	3a08      	subs	r2, #8
 800ae58:	edc2 7a00 	vstr	s15, [r2]
 800ae5c:	4291      	cmp	r1, r2
 800ae5e:	d1e4      	bne.n	800ae2a <convert_q3_12_complex_to_f32_complex+0x16>
 800ae60:	4770      	bx	lr
 800ae62:	4610      	mov	r0, r2
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	39800000 	.word	0x39800000
 800ae6c:	00000000 	.word	0x00000000

0800ae70 <convert_q12_4_to_q15_16>:
 800ae70:	b430      	push	{r4, r5}
 800ae72:	4605      	mov	r5, r0
 800ae74:	0850      	lsrs	r0, r2, #1
 800ae76:	d00b      	beq.n	800ae90 <convert_q12_4_to_q15_16+0x20>
 800ae78:	eb01 0480 	add.w	r4, r1, r0, lsl #2
 800ae7c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800ae80:	0080      	lsls	r0, r0, #2
 800ae82:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
 800ae86:	031b      	lsls	r3, r3, #12
 800ae88:	42a9      	cmp	r1, r5
 800ae8a:	f844 3d04 	str.w	r3, [r4, #-4]!
 800ae8e:	d1f8      	bne.n	800ae82 <convert_q12_4_to_q15_16+0x12>
 800ae90:	bc30      	pop	{r4, r5}
 800ae92:	4770      	bx	lr

0800ae94 <convert_q12_4_to_q3_12>:
 800ae94:	0853      	lsrs	r3, r2, #1
 800ae96:	d012      	beq.n	800aebe <convert_q12_4_to_q3_12+0x2a>
 800ae98:	b410      	push	{r4}
 800ae9a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800ae9e:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 800aea2:	f931 3d02 	ldrsh.w	r3, [r1, #-2]!
 800aea6:	105b      	asrs	r3, r3, #1
 800aea8:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800aeac:	4281      	cmp	r1, r0
 800aeae:	f824 3d02 	strh.w	r3, [r4, #-2]!
 800aeb2:	d1f6      	bne.n	800aea2 <convert_q12_4_to_q3_12+0xe>
 800aeb4:	f022 0001 	bic.w	r0, r2, #1
 800aeb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	f022 0001 	bic.w	r0, r2, #1
 800aec2:	4770      	bx	lr

0800aec4 <convert_q12_4_to_q3_12_complex>:
 800aec4:	b470      	push	{r4, r5, r6}
 800aec6:	4605      	mov	r5, r0
 800aec8:	0850      	lsrs	r0, r2, #1
 800aeca:	d012      	beq.n	800aef2 <convert_q12_4_to_q3_12_complex+0x2e>
 800aecc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800aed0:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 800aed4:	2600      	movs	r6, #0
 800aed6:	0080      	lsls	r0, r0, #2
 800aed8:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 800aedc:	f821 6c02 	strh.w	r6, [r1, #-2]
 800aee0:	105b      	asrs	r3, r3, #1
 800aee2:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800aee6:	42a5      	cmp	r5, r4
 800aee8:	f821 3c04 	strh.w	r3, [r1, #-4]
 800aeec:	f1a1 0104 	sub.w	r1, r1, #4
 800aef0:	d1f2      	bne.n	800aed8 <convert_q12_4_to_q3_12_complex+0x14>
 800aef2:	bc70      	pop	{r4, r5, r6}
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop

0800aef8 <event>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aefc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aefe:	682a      	ldr	r2, [r5, #0]
 800af00:	4604      	mov	r4, r0
 800af02:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800af06:	4798      	blx	r3
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	6028      	str	r0, [r5, #0]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af12:	4618      	mov	r0, r3
 800af14:	4710      	bx	r2
 800af16:	bf00      	nop

0800af18 <reset>:
 800af18:	6800      	ldr	r0, [r0, #0]
 800af1a:	68c3      	ldr	r3, [r0, #12]
 800af1c:	4718      	bx	r3
 800af1e:	bf00      	nop

0800af20 <validate>:
 800af20:	6983      	ldr	r3, [r0, #24]
 800af22:	b510      	push	{r4, lr}
 800af24:	4604      	mov	r4, r0
 800af26:	b113      	cbz	r3, 800af2e <validate+0xe>
 800af28:	f7fc f806 	bl	8006f38 <acc_rss_integration_log_level>
 800af2c:	b978      	cbnz	r0, 800af4e <validate+0x2e>
 800af2e:	69e3      	ldr	r3, [r4, #28]
 800af30:	b143      	cbz	r3, 800af44 <validate+0x24>
 800af32:	f7fc f801 	bl	8006f38 <acc_rss_integration_log_level>
 800af36:	b128      	cbz	r0, 800af44 <validate+0x24>
 800af38:	4b08      	ldr	r3, [pc, #32]	; (800af5c <validate+0x3c>)
 800af3a:	4a09      	ldr	r2, [pc, #36]	; (800af60 <validate+0x40>)
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3e:	4909      	ldr	r1, [pc, #36]	; (800af64 <validate+0x44>)
 800af40:	2001      	movs	r0, #1
 800af42:	4798      	blx	r3
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af4a:	6883      	ldr	r3, [r0, #8]
 800af4c:	4718      	bx	r3
 800af4e:	4b03      	ldr	r3, [pc, #12]	; (800af5c <validate+0x3c>)
 800af50:	4a05      	ldr	r2, [pc, #20]	; (800af68 <validate+0x48>)
 800af52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af54:	4903      	ldr	r1, [pc, #12]	; (800af64 <validate+0x44>)
 800af56:	2001      	movs	r0, #1
 800af58:	4798      	blx	r3
 800af5a:	e7e8      	b.n	800af2e <validate+0xe>
 800af5c:	20000640 	.word	0x20000640
 800af60:	08016c30 	.word	0x08016c30
 800af64:	08016cf4 	.word	0x08016cf4
 800af68:	08016c00 	.word	0x08016c00

0800af6c <acc_element_converter_init>:
 800af6c:	3a01      	subs	r2, #1
 800af6e:	b510      	push	{r4, lr}
 800af70:	2a07      	cmp	r2, #7
 800af72:	d805      	bhi.n	800af80 <acc_element_converter_init+0x14>
 800af74:	e8df f002 	tbb	[pc, r2]
 800af78:	22041e1a 	.word	0x22041e1a
 800af7c:	0e2a2604 	.word	0x0e2a2604
 800af80:	2300      	movs	r3, #0
 800af82:	6383      	str	r3, [r0, #56]	; 0x38
 800af84:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <acc_element_converter_init+0x68>)
 800af86:	4a14      	ldr	r2, [pc, #80]	; (800afd8 <acc_element_converter_init+0x6c>)
 800af88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8a:	4914      	ldr	r1, [pc, #80]	; (800afdc <acc_element_converter_init+0x70>)
 800af8c:	2000      	movs	r0, #0
 800af8e:	4798      	blx	r3
 800af90:	2000      	movs	r0, #0
 800af92:	bd10      	pop	{r4, pc}
 800af94:	2905      	cmp	r1, #5
 800af96:	d1f3      	bne.n	800af80 <acc_element_converter_init+0x14>
 800af98:	4c11      	ldr	r4, [pc, #68]	; (800afe0 <acc_element_converter_init+0x74>)
 800af9a:	4912      	ldr	r1, [pc, #72]	; (800afe4 <acc_element_converter_init+0x78>)
 800af9c:	4a12      	ldr	r2, [pc, #72]	; (800afe8 <acc_element_converter_init+0x7c>)
 800af9e:	4b13      	ldr	r3, [pc, #76]	; (800afec <acc_element_converter_init+0x80>)
 800afa0:	6384      	str	r4, [r0, #56]	; 0x38
 800afa2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800afa6:	60c3      	str	r3, [r0, #12]
 800afa8:	2001      	movs	r0, #1
 800afaa:	bd10      	pop	{r4, pc}
 800afac:	2906      	cmp	r1, #6
 800afae:	d1e7      	bne.n	800af80 <acc_element_converter_init+0x14>
 800afb0:	4c0f      	ldr	r4, [pc, #60]	; (800aff0 <acc_element_converter_init+0x84>)
 800afb2:	e7f2      	b.n	800af9a <acc_element_converter_init+0x2e>
 800afb4:	2904      	cmp	r1, #4
 800afb6:	d1e3      	bne.n	800af80 <acc_element_converter_init+0x14>
 800afb8:	4c0e      	ldr	r4, [pc, #56]	; (800aff4 <acc_element_converter_init+0x88>)
 800afba:	e7ee      	b.n	800af9a <acc_element_converter_init+0x2e>
 800afbc:	2905      	cmp	r1, #5
 800afbe:	d1df      	bne.n	800af80 <acc_element_converter_init+0x14>
 800afc0:	4c0d      	ldr	r4, [pc, #52]	; (800aff8 <acc_element_converter_init+0x8c>)
 800afc2:	e7ea      	b.n	800af9a <acc_element_converter_init+0x2e>
 800afc4:	2905      	cmp	r1, #5
 800afc6:	d1db      	bne.n	800af80 <acc_element_converter_init+0x14>
 800afc8:	4c0c      	ldr	r4, [pc, #48]	; (800affc <acc_element_converter_init+0x90>)
 800afca:	e7e6      	b.n	800af9a <acc_element_converter_init+0x2e>
 800afcc:	2908      	cmp	r1, #8
 800afce:	d1d7      	bne.n	800af80 <acc_element_converter_init+0x14>
 800afd0:	4c0b      	ldr	r4, [pc, #44]	; (800b000 <acc_element_converter_init+0x94>)
 800afd2:	e7e2      	b.n	800af9a <acc_element_converter_init+0x2e>
 800afd4:	20000640 	.word	0x20000640
 800afd8:	08016d08 	.word	0x08016d08
 800afdc:	08016cf4 	.word	0x08016cf4
 800afe0:	0800aec5 	.word	0x0800aec5
 800afe4:	0800aef9 	.word	0x0800aef9
 800afe8:	0800af21 	.word	0x0800af21
 800afec:	0800af19 	.word	0x0800af19
 800aff0:	0800adc5 	.word	0x0800adc5
 800aff4:	0800ad99 	.word	0x0800ad99
 800aff8:	0800ae95 	.word	0x0800ae95
 800affc:	0800ae71 	.word	0x0800ae71
 800b000:	0800ae15 	.word	0x0800ae15

0800b004 <event>:
 800b004:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800b006:	6803      	ldr	r3, [r0, #0]
 800b008:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b00a:	6011      	str	r1, [r2, #0]
 800b00c:	4618      	mov	r0, r3
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	4710      	bx	r2
 800b012:	bf00      	nop

0800b014 <reset>:
 800b014:	6800      	ldr	r0, [r0, #0]
 800b016:	68c3      	ldr	r3, [r0, #12]
 800b018:	4718      	bx	r3
 800b01a:	bf00      	nop

0800b01c <validate>:
 800b01c:	6983      	ldr	r3, [r0, #24]
 800b01e:	b510      	push	{r4, lr}
 800b020:	4604      	mov	r4, r0
 800b022:	b113      	cbz	r3, 800b02a <validate+0xe>
 800b024:	f7fb ff88 	bl	8006f38 <acc_rss_integration_log_level>
 800b028:	b978      	cbnz	r0, 800b04a <validate+0x2e>
 800b02a:	69e3      	ldr	r3, [r4, #28]
 800b02c:	b143      	cbz	r3, 800b040 <validate+0x24>
 800b02e:	f7fb ff83 	bl	8006f38 <acc_rss_integration_log_level>
 800b032:	b128      	cbz	r0, 800b040 <validate+0x24>
 800b034:	4b08      	ldr	r3, [pc, #32]	; (800b058 <validate+0x3c>)
 800b036:	4a09      	ldr	r2, [pc, #36]	; (800b05c <validate+0x40>)
 800b038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03a:	4909      	ldr	r1, [pc, #36]	; (800b060 <validate+0x44>)
 800b03c:	2001      	movs	r0, #1
 800b03e:	4798      	blx	r3
 800b040:	6820      	ldr	r0, [r4, #0]
 800b042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b046:	6883      	ldr	r3, [r0, #8]
 800b048:	4718      	bx	r3
 800b04a:	4b03      	ldr	r3, [pc, #12]	; (800b058 <validate+0x3c>)
 800b04c:	4a05      	ldr	r2, [pc, #20]	; (800b064 <validate+0x48>)
 800b04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b050:	4903      	ldr	r1, [pc, #12]	; (800b060 <validate+0x44>)
 800b052:	2001      	movs	r0, #1
 800b054:	4798      	blx	r3
 800b056:	e7e8      	b.n	800b02a <validate+0xe>
 800b058:	20000640 	.word	0x20000640
 800b05c:	08016c30 	.word	0x08016c30
 800b060:	08016d30 	.word	0x08016d30
 800b064:	08016c00 	.word	0x08016c00

0800b068 <acc_element_crop_init>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4604      	mov	r4, r0
 800b06c:	4608      	mov	r0, r1
 800b06e:	4615      	mov	r5, r2
 800b070:	f7ff fbc2 	bl	800a7f8 <acc_element_sizeof>
 800b074:	4904      	ldr	r1, [pc, #16]	; (800b088 <acc_element_crop_init+0x20>)
 800b076:	4a05      	ldr	r2, [pc, #20]	; (800b08c <acc_element_crop_init+0x24>)
 800b078:	4b05      	ldr	r3, [pc, #20]	; (800b090 <acc_element_crop_init+0x28>)
 800b07a:	60e3      	str	r3, [r4, #12]
 800b07c:	fb05 f000 	mul.w	r0, r5, r0
 800b080:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b084:	63a0      	str	r0, [r4, #56]	; 0x38
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	0800b005 	.word	0x0800b005
 800b08c:	0800b01d 	.word	0x0800b01d
 800b090:	0800b015 	.word	0x0800b015

0800b094 <filter_no_operation>:
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop

0800b098 <event>:
 800b098:	b510      	push	{r4, lr}
 800b09a:	4604      	mov	r4, r0
 800b09c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b09e:	4798      	blx	r3
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0a6:	6843      	ldr	r3, [r0, #4]
 800b0a8:	4718      	bx	r3
 800b0aa:	bf00      	nop

0800b0ac <reset>:
 800b0ac:	6800      	ldr	r0, [r0, #0]
 800b0ae:	68c3      	ldr	r3, [r0, #12]
 800b0b0:	4718      	bx	r3
 800b0b2:	bf00      	nop

0800b0b4 <filter_q3_12_complex>:
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	3040      	adds	r0, #64	; 0x40
 800b0b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0ba:	6919      	ldr	r1, [r3, #16]
 800b0bc:	6812      	ldr	r2, [r2, #0]
 800b0be:	0892      	lsrs	r2, r2, #2
 800b0c0:	f004 bfbe 	b.w	8010040 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

0800b0c4 <validate>:
 800b0c4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	d007      	beq.n	800b0de <validate+0x1a>
 800b0ce:	4b12      	ldr	r3, [pc, #72]	; (800b118 <validate+0x54>)
 800b0d0:	4a12      	ldr	r2, [pc, #72]	; (800b11c <validate+0x58>)
 800b0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d4:	4912      	ldr	r1, [pc, #72]	; (800b120 <validate+0x5c>)
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	4798      	blx	r3
 800b0da:	2000      	movs	r0, #0
 800b0dc:	bd10      	pop	{r4, pc}
 800b0de:	6983      	ldr	r3, [r0, #24]
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	b113      	cbz	r3, 800b0ea <validate+0x26>
 800b0e4:	f7fb ff28 	bl	8006f38 <acc_rss_integration_log_level>
 800b0e8:	b978      	cbnz	r0, 800b10a <validate+0x46>
 800b0ea:	69e3      	ldr	r3, [r4, #28]
 800b0ec:	b143      	cbz	r3, 800b100 <validate+0x3c>
 800b0ee:	f7fb ff23 	bl	8006f38 <acc_rss_integration_log_level>
 800b0f2:	b128      	cbz	r0, 800b100 <validate+0x3c>
 800b0f4:	4b08      	ldr	r3, [pc, #32]	; (800b118 <validate+0x54>)
 800b0f6:	4a0b      	ldr	r2, [pc, #44]	; (800b124 <validate+0x60>)
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	4909      	ldr	r1, [pc, #36]	; (800b120 <validate+0x5c>)
 800b0fc:	2001      	movs	r0, #1
 800b0fe:	4798      	blx	r3
 800b100:	6820      	ldr	r0, [r4, #0]
 800b102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b106:	6883      	ldr	r3, [r0, #8]
 800b108:	4718      	bx	r3
 800b10a:	4b03      	ldr	r3, [pc, #12]	; (800b118 <validate+0x54>)
 800b10c:	4a06      	ldr	r2, [pc, #24]	; (800b128 <validate+0x64>)
 800b10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b110:	4903      	ldr	r1, [pc, #12]	; (800b120 <validate+0x5c>)
 800b112:	2001      	movs	r0, #1
 800b114:	4798      	blx	r3
 800b116:	e7e8      	b.n	800b0ea <validate+0x26>
 800b118:	20000640 	.word	0x20000640
 800b11c:	08016d40 	.word	0x08016d40
 800b120:	08016d68 	.word	0x08016d68
 800b124:	08016c30 	.word	0x08016c30
 800b128:	08016c00 	.word	0x08016c00

0800b12c <acc_element_depth_domain_low_pass_filter_init>:
 800b12c:	b570      	push	{r4, r5, r6, lr}
 800b12e:	4604      	mov	r4, r0
 800b130:	4823      	ldr	r0, [pc, #140]	; (800b1c0 <acc_element_depth_domain_low_pass_filter_init+0x94>)
 800b132:	6060      	str	r0, [r4, #4]
 800b134:	4823      	ldr	r0, [pc, #140]	; (800b1c4 <acc_element_depth_domain_low_pass_filter_init+0x98>)
 800b136:	60a0      	str	r0, [r4, #8]
 800b138:	4823      	ldr	r0, [pc, #140]	; (800b1c8 <acc_element_depth_domain_low_pass_filter_init+0x9c>)
 800b13a:	60e0      	str	r0, [r4, #12]
 800b13c:	461e      	mov	r6, r3
 800b13e:	b30a      	cbz	r2, 800b184 <acc_element_depth_domain_low_pass_filter_init+0x58>
 800b140:	eddf 7a22 	vldr	s15, [pc, #136]	; 800b1cc <acc_element_depth_domain_low_pass_filter_init+0xa0>
 800b144:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14c:	d513      	bpl.n	800b176 <acc_element_depth_domain_low_pass_filter_init+0x4a>
 800b14e:	eeb0 0a67 	vmov.f32	s0, s15
 800b152:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800b156:	2908      	cmp	r1, #8
 800b158:	d124      	bne.n	800b1a4 <acc_element_depth_domain_low_pass_filter_init+0x78>
 800b15a:	4b1d      	ldr	r3, [pc, #116]	; (800b1d0 <acc_element_depth_domain_low_pass_filter_init+0xa4>)
 800b15c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b15e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800b162:	2300      	movs	r3, #0
 800b164:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800b168:	2001      	movs	r0, #1
 800b16a:	f004 fdcf 	bl	800fd0c <acc_alg_biquad_q3_12_lowpass_coeffs>
 800b16e:	4605      	mov	r5, r0
 800b170:	b188      	cbz	r0, 800b196 <acc_element_depth_domain_low_pass_filter_init+0x6a>
 800b172:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b174:	e00b      	b.n	800b18e <acc_element_depth_domain_low_pass_filter_init+0x62>
 800b176:	eddf 7a17 	vldr	s15, [pc, #92]	; 800b1d4 <acc_element_depth_domain_low_pass_filter_init+0xa8>
 800b17a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b182:	dd19      	ble.n	800b1b8 <acc_element_depth_domain_low_pass_filter_init+0x8c>
 800b184:	4b14      	ldr	r3, [pc, #80]	; (800b1d8 <acc_element_depth_domain_low_pass_filter_init+0xac>)
 800b186:	63a3      	str	r3, [r4, #56]	; 0x38
 800b188:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b18c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b18e:	2501      	movs	r5, #1
 800b190:	61f2      	str	r2, [r6, #28]
 800b192:	4628      	mov	r0, r5
 800b194:	bd70      	pop	{r4, r5, r6, pc}
 800b196:	4b11      	ldr	r3, [pc, #68]	; (800b1dc <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800b198:	4a11      	ldr	r2, [pc, #68]	; (800b1e0 <acc_element_depth_domain_low_pass_filter_init+0xb4>)
 800b19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19c:	4911      	ldr	r1, [pc, #68]	; (800b1e4 <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 800b19e:	4798      	blx	r3
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	4b0d      	ldr	r3, [pc, #52]	; (800b1dc <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800b1a6:	4a10      	ldr	r2, [pc, #64]	; (800b1e8 <acc_element_depth_domain_low_pass_filter_init+0xbc>)
 800b1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1aa:	490e      	ldr	r1, [pc, #56]	; (800b1e4 <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	63a0      	str	r0, [r4, #56]	; 0x38
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	4798      	blx	r3
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}
 800b1b8:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800b1bc:	e7cb      	b.n	800b156 <acc_element_depth_domain_low_pass_filter_init+0x2a>
 800b1be:	bf00      	nop
 800b1c0:	0800b099 	.word	0x0800b099
 800b1c4:	0800b0c5 	.word	0x0800b0c5
 800b1c8:	0800b0ad 	.word	0x0800b0ad
 800b1cc:	3b843809 	.word	0x3b843809
 800b1d0:	0800b0b5 	.word	0x0800b0b5
 800b1d4:	3efdca08 	.word	0x3efdca08
 800b1d8:	0800b095 	.word	0x0800b095
 800b1dc:	20000640 	.word	0x20000640
 800b1e0:	08016d90 	.word	0x08016d90
 800b1e4:	08016d68 	.word	0x08016d68
 800b1e8:	08016c40 	.word	0x08016c40

0800b1ec <event>:
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b1f2:	4798      	blx	r3
 800b1f4:	6820      	ldr	r0, [r4, #0]
 800b1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1fa:	6843      	ldr	r3, [r0, #4]
 800b1fc:	4718      	bx	r3
 800b1fe:	bf00      	nop

0800b200 <reset>:
 800b200:	6800      	ldr	r0, [r0, #0]
 800b202:	68c3      	ldr	r3, [r0, #12]
 800b204:	4718      	bx	r3
 800b206:	bf00      	nop

0800b208 <iq_mix_q3_12>:
 800b208:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800b20a:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800b20e:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800b212:	b538      	push	{r3, r4, r5, lr}
 800b214:	6815      	ldr	r5, [r2, #0]
 800b216:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b218:	4604      	mov	r4, r0
 800b21a:	086d      	lsrs	r5, r5, #1
 800b21c:	ed93 0a00 	vldr	s0, [r3]
 800b220:	462a      	mov	r2, r5
 800b222:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800b226:	f004 ff29 	bl	801007c <acc_alg_iq_demodulation_q3_12_real>
 800b22a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b22c:	00ad      	lsls	r5, r5, #2
 800b22e:	601d      	str	r5, [r3, #0]
 800b230:	bd38      	pop	{r3, r4, r5, pc}
 800b232:	bf00      	nop

0800b234 <iq_mix_q3_12_complex>:
 800b234:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800b236:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800b23a:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800b23e:	b538      	push	{r3, r4, r5, lr}
 800b240:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b242:	6815      	ldr	r5, [r2, #0]
 800b244:	ed93 0a00 	vldr	s0, [r3]
 800b248:	4604      	mov	r4, r0
 800b24a:	08a9      	lsrs	r1, r5, #2
 800b24c:	6900      	ldr	r0, [r0, #16]
 800b24e:	f004 ff77 	bl	8010140 <acc_alg_iq_demodulation_q3_12_complex>
 800b252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b254:	f025 0503 	bic.w	r5, r5, #3
 800b258:	601d      	str	r5, [r3, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}

0800b25c <validate>:
 800b25c:	4a21      	ldr	r2, [pc, #132]	; (800b2e4 <validate+0x88>)
 800b25e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b260:	4293      	cmp	r3, r2
 800b262:	b510      	push	{r4, lr}
 800b264:	4604      	mov	r4, r0
 800b266:	d023      	beq.n	800b2b0 <validate+0x54>
 800b268:	4a1f      	ldr	r2, [pc, #124]	; (800b2e8 <validate+0x8c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d007      	beq.n	800b27e <validate+0x22>
 800b26e:	4b1f      	ldr	r3, [pc, #124]	; (800b2ec <validate+0x90>)
 800b270:	4a1f      	ldr	r2, [pc, #124]	; (800b2f0 <validate+0x94>)
 800b272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b274:	491f      	ldr	r1, [pc, #124]	; (800b2f4 <validate+0x98>)
 800b276:	2000      	movs	r0, #0
 800b278:	4798      	blx	r3
 800b27a:	2000      	movs	r0, #0
 800b27c:	bd10      	pop	{r4, pc}
 800b27e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800b282:	429a      	cmp	r2, r3
 800b284:	d027      	beq.n	800b2d6 <validate+0x7a>
 800b286:	69a3      	ldr	r3, [r4, #24]
 800b288:	b113      	cbz	r3, 800b290 <validate+0x34>
 800b28a:	f7fb fe55 	bl	8006f38 <acc_rss_integration_log_level>
 800b28e:	b9d8      	cbnz	r0, 800b2c8 <validate+0x6c>
 800b290:	69e3      	ldr	r3, [r4, #28]
 800b292:	b143      	cbz	r3, 800b2a6 <validate+0x4a>
 800b294:	f7fb fe50 	bl	8006f38 <acc_rss_integration_log_level>
 800b298:	b128      	cbz	r0, 800b2a6 <validate+0x4a>
 800b29a:	4b14      	ldr	r3, [pc, #80]	; (800b2ec <validate+0x90>)
 800b29c:	4a16      	ldr	r2, [pc, #88]	; (800b2f8 <validate+0x9c>)
 800b29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a0:	4914      	ldr	r1, [pc, #80]	; (800b2f4 <validate+0x98>)
 800b2a2:	2001      	movs	r0, #1
 800b2a4:	4798      	blx	r3
 800b2a6:	6820      	ldr	r0, [r4, #0]
 800b2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ac:	6883      	ldr	r3, [r0, #8]
 800b2ae:	4718      	bx	r3
 800b2b0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d0e6      	beq.n	800b286 <validate+0x2a>
 800b2b8:	4b0c      	ldr	r3, [pc, #48]	; (800b2ec <validate+0x90>)
 800b2ba:	4a10      	ldr	r2, [pc, #64]	; (800b2fc <validate+0xa0>)
 800b2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2be:	490d      	ldr	r1, [pc, #52]	; (800b2f4 <validate+0x98>)
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	4798      	blx	r3
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	bd10      	pop	{r4, pc}
 800b2c8:	4b08      	ldr	r3, [pc, #32]	; (800b2ec <validate+0x90>)
 800b2ca:	4a0d      	ldr	r2, [pc, #52]	; (800b300 <validate+0xa4>)
 800b2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ce:	4909      	ldr	r1, [pc, #36]	; (800b2f4 <validate+0x98>)
 800b2d0:	2001      	movs	r0, #1
 800b2d2:	4798      	blx	r3
 800b2d4:	e7dc      	b.n	800b290 <validate+0x34>
 800b2d6:	4b05      	ldr	r3, [pc, #20]	; (800b2ec <validate+0x90>)
 800b2d8:	4a0a      	ldr	r2, [pc, #40]	; (800b304 <validate+0xa8>)
 800b2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2dc:	4905      	ldr	r1, [pc, #20]	; (800b2f4 <validate+0x98>)
 800b2de:	2000      	movs	r0, #0
 800b2e0:	4798      	blx	r3
 800b2e2:	e7ca      	b.n	800b27a <validate+0x1e>
 800b2e4:	0800b235 	.word	0x0800b235
 800b2e8:	0800b209 	.word	0x0800b209
 800b2ec:	20000640 	.word	0x20000640
 800b2f0:	08016e08 	.word	0x08016e08
 800b2f4:	08016dbc 	.word	0x08016dbc
 800b2f8:	08016c30 	.word	0x08016c30
 800b2fc:	08016d40 	.word	0x08016d40
 800b300:	08016c00 	.word	0x08016c00
 800b304:	08016dd0 	.word	0x08016dd0

0800b308 <acc_element_iq_mixer_init>:
 800b308:	4b10      	ldr	r3, [pc, #64]	; (800b34c <acc_element_iq_mixer_init+0x44>)
 800b30a:	4a11      	ldr	r2, [pc, #68]	; (800b350 <acc_element_iq_mixer_init+0x48>)
 800b30c:	6043      	str	r3, [r0, #4]
 800b30e:	4b11      	ldr	r3, [pc, #68]	; (800b354 <acc_element_iq_mixer_init+0x4c>)
 800b310:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800b314:	2904      	cmp	r1, #4
 800b316:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b31a:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 800b31e:	d00c      	beq.n	800b33a <acc_element_iq_mixer_init+0x32>
 800b320:	2908      	cmp	r1, #8
 800b322:	d00e      	beq.n	800b342 <acc_element_iq_mixer_init+0x3a>
 800b324:	b510      	push	{r4, lr}
 800b326:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <acc_element_iq_mixer_init+0x50>)
 800b328:	4a0c      	ldr	r2, [pc, #48]	; (800b35c <acc_element_iq_mixer_init+0x54>)
 800b32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32c:	490c      	ldr	r1, [pc, #48]	; (800b360 <acc_element_iq_mixer_init+0x58>)
 800b32e:	2400      	movs	r4, #0
 800b330:	6384      	str	r4, [r0, #56]	; 0x38
 800b332:	4620      	mov	r0, r4
 800b334:	4798      	blx	r3
 800b336:	4620      	mov	r0, r4
 800b338:	bd10      	pop	{r4, pc}
 800b33a:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <acc_element_iq_mixer_init+0x5c>)
 800b33c:	6383      	str	r3, [r0, #56]	; 0x38
 800b33e:	2001      	movs	r0, #1
 800b340:	4770      	bx	lr
 800b342:	4b09      	ldr	r3, [pc, #36]	; (800b368 <acc_element_iq_mixer_init+0x60>)
 800b344:	6383      	str	r3, [r0, #56]	; 0x38
 800b346:	2001      	movs	r0, #1
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	0800b1ed 	.word	0x0800b1ed
 800b350:	0800b25d 	.word	0x0800b25d
 800b354:	0800b201 	.word	0x0800b201
 800b358:	20000640 	.word	0x20000640
 800b35c:	08016c40 	.word	0x08016c40
 800b360:	08016dbc 	.word	0x08016dbc
 800b364:	0800b209 	.word	0x0800b209
 800b368:	0800b235 	.word	0x0800b235

0800b36c <noise_level_normalization_u16>:
 800b36c:	0849      	lsrs	r1, r1, #1
 800b36e:	d01f      	beq.n	800b3b0 <noise_level_normalization_u16+0x44>
 800b370:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800b374:	b470      	push	{r4, r5, r6}
 800b376:	3802      	subs	r0, #2
 800b378:	1e8c      	subs	r4, r1, #2
 800b37a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800b37e:	2600      	movs	r6, #0
 800b380:	e006      	b.n	800b390 <noise_level_normalization_u16+0x24>
 800b382:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b386:	bfa8      	it	ge
 800b388:	4629      	movge	r1, r5
 800b38a:	4284      	cmp	r4, r0
 800b38c:	8001      	strh	r1, [r0, #0]
 800b38e:	d00d      	beq.n	800b3ac <noise_level_normalization_u16+0x40>
 800b390:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 800b394:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800b398:	fb03 f101 	mul.w	r1, r3, r1
 800b39c:	fb91 f1f2 	sdiv	r1, r1, r2
 800b3a0:	f511 4100 	adds.w	r1, r1, #32768	; 0x8000
 800b3a4:	d5ed      	bpl.n	800b382 <noise_level_normalization_u16+0x16>
 800b3a6:	4284      	cmp	r4, r0
 800b3a8:	8006      	strh	r6, [r0, #0]
 800b3aa:	d1f1      	bne.n	800b390 <noise_level_normalization_u16+0x24>
 800b3ac:	bc70      	pop	{r4, r5, r6}
 800b3ae:	4770      	bx	lr
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop

0800b3b4 <event>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b3b8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800b3ba:	6819      	ldr	r1, [r3, #0]
 800b3bc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800b3be:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	6900      	ldr	r0, [r0, #16]
 800b3c4:	47a8      	blx	r5
 800b3c6:	6820      	ldr	r0, [r4, #0]
 800b3c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3cc:	6843      	ldr	r3, [r0, #4]
 800b3ce:	4718      	bx	r3

0800b3d0 <reset>:
 800b3d0:	6800      	ldr	r0, [r0, #0]
 800b3d2:	68c3      	ldr	r3, [r0, #12]
 800b3d4:	4718      	bx	r3
 800b3d6:	bf00      	nop

0800b3d8 <validate>:
 800b3d8:	6983      	ldr	r3, [r0, #24]
 800b3da:	b510      	push	{r4, lr}
 800b3dc:	4604      	mov	r4, r0
 800b3de:	b113      	cbz	r3, 800b3e6 <validate+0xe>
 800b3e0:	f7fb fdaa 	bl	8006f38 <acc_rss_integration_log_level>
 800b3e4:	b978      	cbnz	r0, 800b406 <validate+0x2e>
 800b3e6:	69e3      	ldr	r3, [r4, #28]
 800b3e8:	b143      	cbz	r3, 800b3fc <validate+0x24>
 800b3ea:	f7fb fda5 	bl	8006f38 <acc_rss_integration_log_level>
 800b3ee:	b128      	cbz	r0, 800b3fc <validate+0x24>
 800b3f0:	4b08      	ldr	r3, [pc, #32]	; (800b414 <validate+0x3c>)
 800b3f2:	4a09      	ldr	r2, [pc, #36]	; (800b418 <validate+0x40>)
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	4909      	ldr	r1, [pc, #36]	; (800b41c <validate+0x44>)
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	4798      	blx	r3
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b402:	6883      	ldr	r3, [r0, #8]
 800b404:	4718      	bx	r3
 800b406:	4b03      	ldr	r3, [pc, #12]	; (800b414 <validate+0x3c>)
 800b408:	4a05      	ldr	r2, [pc, #20]	; (800b420 <validate+0x48>)
 800b40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40c:	4903      	ldr	r1, [pc, #12]	; (800b41c <validate+0x44>)
 800b40e:	2001      	movs	r0, #1
 800b410:	4798      	blx	r3
 800b412:	e7e8      	b.n	800b3e6 <validate+0xe>
 800b414:	20000640 	.word	0x20000640
 800b418:	08016c30 	.word	0x08016c30
 800b41c:	08016e20 	.word	0x08016e20
 800b420:	08016c00 	.word	0x08016c00

0800b424 <acc_element_noise_level_normalization_init>:
 800b424:	2902      	cmp	r1, #2
 800b426:	b510      	push	{r4, lr}
 800b428:	8702      	strh	r2, [r0, #56]	; 0x38
 800b42a:	8743      	strh	r3, [r0, #58]	; 0x3a
 800b42c:	d001      	beq.n	800b432 <acc_element_noise_level_normalization_init+0xe>
 800b42e:	2905      	cmp	r1, #5
 800b430:	d109      	bne.n	800b446 <acc_element_noise_level_normalization_init+0x22>
 800b432:	490a      	ldr	r1, [pc, #40]	; (800b45c <acc_element_noise_level_normalization_init+0x38>)
 800b434:	4a0a      	ldr	r2, [pc, #40]	; (800b460 <acc_element_noise_level_normalization_init+0x3c>)
 800b436:	4c0b      	ldr	r4, [pc, #44]	; (800b464 <acc_element_noise_level_normalization_init+0x40>)
 800b438:	4b0b      	ldr	r3, [pc, #44]	; (800b468 <acc_element_noise_level_normalization_init+0x44>)
 800b43a:	63c4      	str	r4, [r0, #60]	; 0x3c
 800b43c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800b440:	60c3      	str	r3, [r0, #12]
 800b442:	2001      	movs	r0, #1
 800b444:	bd10      	pop	{r4, pc}
 800b446:	4b09      	ldr	r3, [pc, #36]	; (800b46c <acc_element_noise_level_normalization_init+0x48>)
 800b448:	4a09      	ldr	r2, [pc, #36]	; (800b470 <acc_element_noise_level_normalization_init+0x4c>)
 800b44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44c:	4909      	ldr	r1, [pc, #36]	; (800b474 <acc_element_noise_level_normalization_init+0x50>)
 800b44e:	2400      	movs	r4, #0
 800b450:	63c4      	str	r4, [r0, #60]	; 0x3c
 800b452:	4620      	mov	r0, r4
 800b454:	4798      	blx	r3
 800b456:	4620      	mov	r0, r4
 800b458:	bd10      	pop	{r4, pc}
 800b45a:	bf00      	nop
 800b45c:	0800b3b5 	.word	0x0800b3b5
 800b460:	0800b3d9 	.word	0x0800b3d9
 800b464:	0800b36d 	.word	0x0800b36d
 800b468:	0800b3d1 	.word	0x0800b3d1
 800b46c:	20000640 	.word	0x20000640
 800b470:	08016c40 	.word	0x08016c40
 800b474:	08016e20 	.word	0x08016e20

0800b478 <event>:
 800b478:	b510      	push	{r4, lr}
 800b47a:	4604      	mov	r4, r0
 800b47c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b47e:	4798      	blx	r3
 800b480:	6820      	ldr	r0, [r4, #0]
 800b482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b486:	6843      	ldr	r3, [r0, #4]
 800b488:	4718      	bx	r3
 800b48a:	bf00      	nop

0800b48c <reset>:
 800b48c:	6800      	ldr	r0, [r0, #0]
 800b48e:	68c3      	ldr	r3, [r0, #12]
 800b490:	4718      	bx	r3
 800b492:	bf00      	nop

0800b494 <do_phase_compensation_q3_12>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	2a7c      	cmp	r2, #124	; 0x7c
 800b49a:	b0fd      	sub	sp, #500	; 0x1f4
 800b49c:	d82a      	bhi.n	800b4f4 <do_phase_compensation_q3_12+0x60>
 800b49e:	4689      	mov	r9, r1
 800b4a0:	b329      	cbz	r1, 800b4ee <do_phase_compensation_q3_12+0x5a>
 800b4a2:	469a      	mov	sl, r3
 800b4a4:	ab7c      	add	r3, sp, #496	; 0x1f0
 800b4a6:	2600      	movs	r6, #0
 800b4a8:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 800b4ac:	4615      	mov	r5, r2
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	46b0      	mov	r8, r6
 800b4b2:	f5ab 7bfa 	sub.w	fp, fp, #500	; 0x1f4
 800b4b6:	0097      	lsls	r7, r2, #2
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	463a      	mov	r2, r7
 800b4bc:	4668      	mov	r0, sp
 800b4be:	f005 fb4b 	bl	8010b58 <memcpy>
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	4651      	mov	r1, sl
 800b4c6:	4668      	mov	r0, sp
 800b4c8:	f8cd 8000 	str.w	r8, [sp]
 800b4cc:	f8cb 8000 	str.w	r8, [fp]
 800b4d0:	f004 fea8 	bl	8010224 <acc_alg_phase_estimation_q3_12>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	4668      	mov	r0, sp
 800b4d8:	f7fb f83e 	bl	8006558 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 800b4dc:	3601      	adds	r6, #1
 800b4de:	4620      	mov	r0, r4
 800b4e0:	462a      	mov	r2, r5
 800b4e2:	4669      	mov	r1, sp
 800b4e4:	f7fa ffe0 	bl	80064a8 <acc_alg_basic_math_q3_12_complex_mul>
 800b4e8:	45b1      	cmp	r9, r6
 800b4ea:	443c      	add	r4, r7
 800b4ec:	d1e4      	bne.n	800b4b8 <do_phase_compensation_q3_12+0x24>
 800b4ee:	b07d      	add	sp, #500	; 0x1f4
 800b4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f4:	4801      	ldr	r0, [pc, #4]	; (800b4fc <do_phase_compensation_q3_12+0x68>)
 800b4f6:	217d      	movs	r1, #125	; 0x7d
 800b4f8:	f7fb fc00 	bl	8006cfc <acc_assert_fail>
 800b4fc:	08016e44 	.word	0x08016e44

0800b500 <phase_compensate_q3_12_complex>:
 800b500:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 800b504:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
 800b508:	6900      	ldr	r0, [r0, #16]
 800b50a:	f7ff bfc3 	b.w	800b494 <do_phase_compensation_q3_12>
 800b50e:	bf00      	nop

0800b510 <validate>:
 800b510:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800b514:	429a      	cmp	r2, r3
 800b516:	b510      	push	{r4, lr}
 800b518:	d007      	beq.n	800b52a <validate+0x1a>
 800b51a:	4b12      	ldr	r3, [pc, #72]	; (800b564 <validate+0x54>)
 800b51c:	4a12      	ldr	r2, [pc, #72]	; (800b568 <validate+0x58>)
 800b51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b520:	4912      	ldr	r1, [pc, #72]	; (800b56c <validate+0x5c>)
 800b522:	2000      	movs	r0, #0
 800b524:	4798      	blx	r3
 800b526:	2000      	movs	r0, #0
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	6983      	ldr	r3, [r0, #24]
 800b52c:	4604      	mov	r4, r0
 800b52e:	b113      	cbz	r3, 800b536 <validate+0x26>
 800b530:	f7fb fd02 	bl	8006f38 <acc_rss_integration_log_level>
 800b534:	b978      	cbnz	r0, 800b556 <validate+0x46>
 800b536:	69e3      	ldr	r3, [r4, #28]
 800b538:	b143      	cbz	r3, 800b54c <validate+0x3c>
 800b53a:	f7fb fcfd 	bl	8006f38 <acc_rss_integration_log_level>
 800b53e:	b128      	cbz	r0, 800b54c <validate+0x3c>
 800b540:	4b08      	ldr	r3, [pc, #32]	; (800b564 <validate+0x54>)
 800b542:	4a0b      	ldr	r2, [pc, #44]	; (800b570 <validate+0x60>)
 800b544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b546:	4909      	ldr	r1, [pc, #36]	; (800b56c <validate+0x5c>)
 800b548:	2001      	movs	r0, #1
 800b54a:	4798      	blx	r3
 800b54c:	6820      	ldr	r0, [r4, #0]
 800b54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b552:	6883      	ldr	r3, [r0, #8]
 800b554:	4718      	bx	r3
 800b556:	4b03      	ldr	r3, [pc, #12]	; (800b564 <validate+0x54>)
 800b558:	4a06      	ldr	r2, [pc, #24]	; (800b574 <validate+0x64>)
 800b55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55c:	4903      	ldr	r1, [pc, #12]	; (800b56c <validate+0x5c>)
 800b55e:	2001      	movs	r0, #1
 800b560:	4798      	blx	r3
 800b562:	e7e8      	b.n	800b536 <validate+0x26>
 800b564:	20000640 	.word	0x20000640
 800b568:	08016d40 	.word	0x08016d40
 800b56c:	08016e44 	.word	0x08016e44
 800b570:	08016c30 	.word	0x08016c30
 800b574:	08016c00 	.word	0x08016c00

0800b578 <acc_element_phase_compensation_init>:
 800b578:	eddf 6a17 	vldr	s13, [pc, #92]	; 800b5d8 <acc_element_phase_compensation_init+0x60>
 800b57c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b584:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b588:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b58c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800b590:	bfb8      	it	lt
 800b592:	eef0 7a47 	vmovlt.f32	s15, s14
 800b596:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b59a:	b538      	push	{r3, r4, r5, lr}
 800b59c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b5a0:	6403      	str	r3, [r0, #64]	; 0x40
 800b5a2:	4b0e      	ldr	r3, [pc, #56]	; (800b5dc <acc_element_phase_compensation_init+0x64>)
 800b5a4:	4d0e      	ldr	r5, [pc, #56]	; (800b5e0 <acc_element_phase_compensation_init+0x68>)
 800b5a6:	4c0f      	ldr	r4, [pc, #60]	; (800b5e4 <acc_element_phase_compensation_init+0x6c>)
 800b5a8:	60c3      	str	r3, [r0, #12]
 800b5aa:	ee10 3a10 	vmov	r3, s0
 800b5ae:	2908      	cmp	r1, #8
 800b5b0:	e9c0 5401 	strd	r5, r4, [r0, #4]
 800b5b4:	63c2      	str	r2, [r0, #60]	; 0x3c
 800b5b6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800b5ba:	d103      	bne.n	800b5c4 <acc_element_phase_compensation_init+0x4c>
 800b5bc:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <acc_element_phase_compensation_init+0x70>)
 800b5be:	6383      	str	r3, [r0, #56]	; 0x38
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	4b09      	ldr	r3, [pc, #36]	; (800b5ec <acc_element_phase_compensation_init+0x74>)
 800b5c6:	4a0a      	ldr	r2, [pc, #40]	; (800b5f0 <acc_element_phase_compensation_init+0x78>)
 800b5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ca:	490a      	ldr	r1, [pc, #40]	; (800b5f4 <acc_element_phase_compensation_init+0x7c>)
 800b5cc:	2400      	movs	r4, #0
 800b5ce:	6384      	str	r4, [r0, #56]	; 0x38
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	4798      	blx	r3
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	45800000 	.word	0x45800000
 800b5dc:	0800b48d 	.word	0x0800b48d
 800b5e0:	0800b479 	.word	0x0800b479
 800b5e4:	0800b511 	.word	0x0800b511
 800b5e8:	0800b501 	.word	0x0800b501
 800b5ec:	20000640 	.word	0x20000640
 800b5f0:	08016c40 	.word	0x08016c40
 800b5f4:	08016e44 	.word	0x08016e44

0800b5f8 <reset>:
 800b5f8:	69c3      	ldr	r3, [r0, #28]
 800b5fa:	6800      	ldr	r0, [r0, #0]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	701a      	strb	r2, [r3, #0]
 800b600:	68c3      	ldr	r3, [r0, #12]
 800b602:	4718      	bx	r3

0800b604 <event>:
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	69c5      	ldr	r5, [r0, #28]
 800b608:	462b      	mov	r3, r5
 800b60a:	4604      	mov	r4, r0
 800b60c:	f813 2b04 	ldrb.w	r2, [r3], #4
 800b610:	b962      	cbnz	r2, 800b62c <event+0x28>
 800b612:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800b614:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800b616:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 800b61a:	6812      	ldr	r2, [r2, #0]
 800b61c:	6900      	ldr	r0, [r0, #16]
 800b61e:	4619      	mov	r1, r3
 800b620:	47a8      	blx	r5
 800b622:	6820      	ldr	r0, [r4, #0]
 800b624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b628:	6843      	ldr	r3, [r0, #4]
 800b62a:	4718      	bx	r3
 800b62c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800b62e:	6901      	ldr	r1, [r0, #16]
 800b630:	6812      	ldr	r2, [r2, #0]
 800b632:	4618      	mov	r0, r3
 800b634:	f005 fa90 	bl	8010b58 <memcpy>
 800b638:	6820      	ldr	r0, [r4, #0]
 800b63a:	2300      	movs	r3, #0
 800b63c:	702b      	strb	r3, [r5, #0]
 800b63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b642:	6843      	ldr	r3, [r0, #4]
 800b644:	4718      	bx	r3
 800b646:	bf00      	nop

0800b648 <filter_q3_12_complex>:
 800b648:	b530      	push	{r4, r5, lr}
 800b64a:	ed2d 8b02 	vpush	{d8}
 800b64e:	b083      	sub	sp, #12
 800b650:	4604      	mov	r4, r0
 800b652:	2008      	movs	r0, #8
 800b654:	eeb0 8a40 	vmov.f32	s16, s0
 800b658:	4615      	mov	r5, r2
 800b65a:	9101      	str	r1, [sp, #4]
 800b65c:	f7ff f8cc 	bl	800a7f8 <acc_element_sizeof>
 800b660:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b6a4 <filter_q3_12_complex+0x5c>
 800b664:	9901      	ldr	r1, [sp, #4]
 800b666:	fbb5 f3f0 	udiv	r3, r5, r0
 800b66a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b672:	ee28 8a07 	vmul.f32	s16, s16, s14
 800b676:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800b67a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b67e:	bfb8      	it	lt
 800b680:	eeb0 0a67 	vmovlt.f32	s0, s15
 800b684:	ee38 8a00 	vadd.f32	s16, s16, s0
 800b688:	4620      	mov	r0, r4
 800b68a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800b68e:	ee18 2a10 	vmov	r2, s16
 800b692:	b212      	sxth	r2, r2
 800b694:	b003      	add	sp, #12
 800b696:	ecbd 8b02 	vpop	{d8}
 800b69a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b69e:	f004 bb0b 	b.w	800fcb8 <acc_alg_basic_exponential_smoothing_q3_12_complex>
 800b6a2:	bf00      	nop
 800b6a4:	45800000 	.word	0x45800000

0800b6a8 <validate>:
 800b6a8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	b510      	push	{r4, lr}
 800b6b0:	d015      	beq.n	800b6de <validate+0x36>
 800b6b2:	6984      	ldr	r4, [r0, #24]
 800b6b4:	b13c      	cbz	r4, 800b6c6 <validate+0x1e>
 800b6b6:	4b10      	ldr	r3, [pc, #64]	; (800b6f8 <validate+0x50>)
 800b6b8:	4a10      	ldr	r2, [pc, #64]	; (800b6fc <validate+0x54>)
 800b6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6bc:	4910      	ldr	r1, [pc, #64]	; (800b700 <validate+0x58>)
 800b6be:	2000      	movs	r0, #0
 800b6c0:	4798      	blx	r3
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	69c2      	ldr	r2, [r0, #28]
 800b6c8:	3204      	adds	r2, #4
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d00f      	beq.n	800b6ee <validate+0x46>
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <validate+0x50>)
 800b6d0:	4a0c      	ldr	r2, [pc, #48]	; (800b704 <validate+0x5c>)
 800b6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d4:	490a      	ldr	r1, [pc, #40]	; (800b700 <validate+0x58>)
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	4798      	blx	r3
 800b6da:	2000      	movs	r0, #0
 800b6dc:	bd10      	pop	{r4, pc}
 800b6de:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <validate+0x50>)
 800b6e0:	4a09      	ldr	r2, [pc, #36]	; (800b708 <validate+0x60>)
 800b6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e4:	4906      	ldr	r1, [pc, #24]	; (800b700 <validate+0x58>)
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	4798      	blx	r3
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	6800      	ldr	r0, [r0, #0]
 800b6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f4:	6883      	ldr	r3, [r0, #8]
 800b6f6:	4718      	bx	r3
 800b6f8:	20000640 	.word	0x20000640
 800b6fc:	08016eb0 	.word	0x08016eb0
 800b700:	08016e8c 	.word	0x08016e8c
 800b704:	08016ed0 	.word	0x08016ed0
 800b708:	08016e60 	.word	0x08016e60

0800b70c <acc_element_time_domain_low_pass_filter_init>:
 800b70c:	b510      	push	{r4, lr}
 800b70e:	4a0c      	ldr	r2, [pc, #48]	; (800b740 <acc_element_time_domain_low_pass_filter_init+0x34>)
 800b710:	4c0c      	ldr	r4, [pc, #48]	; (800b744 <acc_element_time_domain_low_pass_filter_init+0x38>)
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <acc_element_time_domain_low_pass_filter_init+0x3c>)
 800b714:	60c3      	str	r3, [r0, #12]
 800b716:	2908      	cmp	r1, #8
 800b718:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800b71c:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800b720:	d103      	bne.n	800b72a <acc_element_time_domain_low_pass_filter_init+0x1e>
 800b722:	4b0a      	ldr	r3, [pc, #40]	; (800b74c <acc_element_time_domain_low_pass_filter_init+0x40>)
 800b724:	6383      	str	r3, [r0, #56]	; 0x38
 800b726:	2001      	movs	r0, #1
 800b728:	bd10      	pop	{r4, pc}
 800b72a:	4b09      	ldr	r3, [pc, #36]	; (800b750 <acc_element_time_domain_low_pass_filter_init+0x44>)
 800b72c:	4a09      	ldr	r2, [pc, #36]	; (800b754 <acc_element_time_domain_low_pass_filter_init+0x48>)
 800b72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b730:	4909      	ldr	r1, [pc, #36]	; (800b758 <acc_element_time_domain_low_pass_filter_init+0x4c>)
 800b732:	2400      	movs	r4, #0
 800b734:	6384      	str	r4, [r0, #56]	; 0x38
 800b736:	4620      	mov	r0, r4
 800b738:	4798      	blx	r3
 800b73a:	4620      	mov	r0, r4
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop
 800b740:	0800b6a9 	.word	0x0800b6a9
 800b744:	0800b605 	.word	0x0800b605
 800b748:	0800b5f9 	.word	0x0800b5f9
 800b74c:	0800b649 	.word	0x0800b649
 800b750:	20000640 	.word	0x20000640
 800b754:	08016c40 	.word	0x08016c40
 800b758:	08016e8c 	.word	0x08016e8c

0800b75c <acc_element_source_adc_init_radar_engine>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	9d04      	ldr	r5, [sp, #16]
 800b760:	4604      	mov	r4, r0
 800b762:	4608      	mov	r0, r1
 800b764:	63e1      	str	r1, [r4, #60]	; 0x3c
 800b766:	4611      	mov	r1, r2
 800b768:	461a      	mov	r2, r3
 800b76a:	462b      	mov	r3, r5
 800b76c:	f7fe f9a6 	bl	8009abc <acc_sensor_manager_prepare_radar_engine>
 800b770:	896b      	ldrh	r3, [r5, #10]
 800b772:	8723      	strh	r3, [r4, #56]	; 0x38
 800b774:	bd38      	pop	{r3, r4, r5, pc}
 800b776:	bf00      	nop

0800b778 <acc_element_source_adc_init>:
 800b778:	b510      	push	{r4, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	4604      	mov	r4, r0
 800b77e:	4608      	mov	r0, r1
 800b780:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b784:	9101      	str	r1, [sp, #4]
 800b786:	f7fb ff75 	bl	8007674 <acc_base_configuration_print>
 800b78a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b78e:	9901      	ldr	r1, [sp, #4]
 800b790:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b792:	b004      	add	sp, #16
 800b794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b798:	f7fe b9dc 	b.w	8009b54 <acc_sensor_manager_prepare_measurement>

0800b79c <acc_element_source_adc_release>:
 800b79c:	b110      	cbz	r0, 800b7a4 <acc_element_source_adc_release+0x8>
 800b79e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800b7a0:	f7fe ba9e 	b.w	8009ce0 <acc_sensor_manager_release_measurement>
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop

0800b7a8 <acc_element_source_adc_reset>:
 800b7a8:	6800      	ldr	r0, [r0, #0]
 800b7aa:	68c3      	ldr	r3, [r0, #12]
 800b7ac:	4718      	bx	r3
 800b7ae:	bf00      	nop

0800b7b0 <acc_element_source_adc_validate>:
 800b7b0:	6800      	ldr	r0, [r0, #0]
 800b7b2:	6883      	ldr	r3, [r0, #8]
 800b7b4:	4718      	bx	r3
 800b7b6:	bf00      	nop

0800b7b8 <acc_element_source_adc_produce>:
 800b7b8:	b530      	push	{r4, r5, lr}
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800b7be:	b083      	sub	sp, #12
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d02f      	beq.n	800b824 <acc_element_source_adc_produce+0x6c>
 800b7c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b7c6:	4a19      	ldr	r2, [pc, #100]	; (800b82c <acc_element_source_adc_produce+0x74>)
 800b7c8:	6a25      	ldr	r5, [r4, #32]
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f7fe fa9c 	bl	8009d08 <acc_sensor_manager_get_sensor_id>
 800b7d0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800b7d2:	6028      	str	r0, [r5, #0]
 800b7d4:	6961      	ldr	r1, [r4, #20]
 800b7d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b7d8:	ab01      	add	r3, sp, #4
 800b7da:	f7fe f8e1 	bl	80099a0 <acc_sensor_manager_acquire_adc_data>
 800b7de:	4605      	mov	r5, r0
 800b7e0:	b1c0      	cbz	r0, 800b814 <acc_element_source_adc_produce+0x5c>
 800b7e2:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800b7e6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800b7e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b7ec:	005b      	lsls	r3, r3, #1
 800b7ee:	6003      	str	r3, [r0, #0]
 800b7f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b7f2:	7011      	strb	r1, [r2, #0]
 800b7f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b7f8:	701a      	strb	r2, [r3, #0]
 800b7fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b7fe:	b90b      	cbnz	r3, 800b804 <acc_element_source_adc_produce+0x4c>
 800b800:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b804:	6820      	ldr	r0, [r4, #0]
 800b806:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b808:	7013      	strb	r3, [r2, #0]
 800b80a:	6843      	ldr	r3, [r0, #4]
 800b80c:	4798      	blx	r3
 800b80e:	4628      	mov	r0, r5
 800b810:	b003      	add	sp, #12
 800b812:	bd30      	pop	{r4, r5, pc}
 800b814:	4b06      	ldr	r3, [pc, #24]	; (800b830 <acc_element_source_adc_produce+0x78>)
 800b816:	4a07      	ldr	r2, [pc, #28]	; (800b834 <acc_element_source_adc_produce+0x7c>)
 800b818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81a:	4907      	ldr	r1, [pc, #28]	; (800b838 <acc_element_source_adc_produce+0x80>)
 800b81c:	4798      	blx	r3
 800b81e:	4628      	mov	r0, r5
 800b820:	b003      	add	sp, #12
 800b822:	bd30      	pop	{r4, r5, pc}
 800b824:	4605      	mov	r5, r0
 800b826:	4628      	mov	r0, r5
 800b828:	b003      	add	sp, #12
 800b82a:	bd30      	pop	{r4, r5, pc}
 800b82c:	51645c3c 	.word	0x51645c3c
 800b830:	20000640 	.word	0x20000640
 800b834:	08016ef8 	.word	0x08016ef8
 800b838:	08016f18 	.word	0x08016f18

0800b83c <acc_element_source_adc_inject_data>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	4604      	mov	r4, r0
 800b840:	6940      	ldr	r0, [r0, #20]
 800b842:	4e08      	ldr	r6, [pc, #32]	; (800b864 <acc_element_source_adc_inject_data+0x28>)
 800b844:	4615      	mov	r5, r2
 800b846:	f005 f987 	bl	8010b58 <memcpy>
 800b84a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b84c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b84e:	6820      	ldr	r0, [r4, #0]
 800b850:	6a22      	ldr	r2, [r4, #32]
 800b852:	600d      	str	r5, [r1, #0]
 800b854:	2100      	movs	r1, #0
 800b856:	601e      	str	r6, [r3, #0]
 800b858:	6843      	ldr	r3, [r0, #4]
 800b85a:	6011      	str	r1, [r2, #0]
 800b85c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b860:	4718      	bx	r3
 800b862:	bf00      	nop
 800b864:	51645c3c 	.word	0x51645c3c

0800b868 <acc_cpd_cbank_and_vana_calibration>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	ed2d 8b02 	vpush	{d8}
 800b870:	4615      	mov	r5, r2
 800b872:	b08b      	sub	sp, #44	; 0x2c
 800b874:	461e      	mov	r6, r3
 800b876:	ab09      	add	r3, sp, #36	; 0x24
 800b878:	2400      	movs	r4, #0
 800b87a:	ee08 1a10 	vmov	s16, r1
 800b87e:	4683      	mov	fp, r0
 800b880:	460a      	mov	r2, r1
 800b882:	4601      	mov	r1, r0
 800b884:	6828      	ldr	r0, [r5, #0]
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	ab08      	add	r3, sp, #32
 800b88a:	e9cd 6407 	strd	r6, r4, [sp, #28]
 800b88e:	9409      	str	r4, [sp, #36]	; 0x24
 800b890:	f7fe fa6e 	bl	8009d70 <acc_sensor_protocol_r2_prepare_load>
 800b894:	2800      	cmp	r0, #0
 800b896:	d067      	beq.n	800b968 <acc_cpd_cbank_and_vana_calibration+0x100>
 800b898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89a:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800bbb8 <acc_cpd_cbank_and_vana_calibration+0x350>
 800b89e:	461e      	mov	r6, r3
 800b8a0:	f5c4 63ae 	rsb	r3, r4, #1392	; 0x570
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	429e      	cmp	r6, r3
 800b8a8:	bf28      	it	cs
 800b8aa:	461e      	movcs	r6, r3
 800b8ac:	9f08      	ldr	r7, [sp, #32]
 800b8ae:	4bb6      	ldr	r3, [pc, #728]	; (800bb88 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800b8b0:	ea4f 0954 	mov.w	r9, r4, lsr #1
 800b8b4:	0872      	lsrs	r2, r6, #1
 800b8b6:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	f004 ff36 	bl	801072c <acc_confprogram_copy>
 800b8c0:	686b      	ldr	r3, [r5, #4]
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	201b      	movs	r0, #27
 800b8c6:	b2b2      	uxth	r2, r6
 800b8c8:	b2a1      	uxth	r1, r4
 800b8ca:	9000      	str	r0, [sp, #0]
 800b8cc:	4643      	mov	r3, r8
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	9206      	str	r2, [sp, #24]
 800b8d2:	9105      	str	r1, [sp, #20]
 800b8d4:	f04f 0a19 	mov.w	sl, #25
 800b8d8:	f004 fe30 	bl	801053c <acc_confprogram_patch_offset>
 800b8dc:	68ab      	ldr	r3, [r5, #8]
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	4643      	mov	r3, r8
 800b8e8:	f8cd a000 	str.w	sl, [sp]
 800b8ec:	f004 fe26 	bl	801053c <acc_confprogram_patch_offset>
 800b8f0:	68eb      	ldr	r3, [r5, #12]
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	231a      	movs	r3, #26
 800b8f6:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	4643      	mov	r3, r8
 800b900:	f004 fe1c 	bl	801053c <acc_confprogram_patch_offset>
 800b904:	8a2b      	ldrh	r3, [r5, #16]
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	2317      	movs	r3, #23
 800b90a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800b90e:	4638      	mov	r0, r7
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	4643      	mov	r3, r8
 800b914:	f004 fe12 	bl	801053c <acc_confprogram_patch_offset>
 800b918:	2310      	movs	r3, #16
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	2300      	movs	r3, #0
 800b91e:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800b922:	4638      	mov	r0, r7
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	4643      	mov	r3, r8
 800b928:	f004 fe08 	bl	801053c <acc_confprogram_patch_offset>
 800b92c:	4633      	mov	r3, r6
 800b92e:	6828      	ldr	r0, [r5, #0]
 800b930:	465a      	mov	r2, fp
 800b932:	fa1f f189 	uxth.w	r1, r9
 800b936:	f7fd fef9 	bl	800972c <acc_sensor_r2_load_confmem>
 800b93a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b93c:	f240 5373 	movw	r3, #1395	; 0x573
 800b940:	4434      	add	r4, r6
 800b942:	429c      	cmp	r4, r3
 800b944:	d9ac      	bls.n	800b8a0 <acc_cpd_cbank_and_vana_calibration+0x38>
 800b946:	6828      	ldr	r0, [r5, #0]
 800b948:	4651      	mov	r1, sl
 800b94a:	f7fe fa75 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800b94e:	4606      	mov	r6, r0
 800b950:	b9b0      	cbnz	r0, 800b980 <acc_cpd_cbank_and_vana_calibration+0x118>
 800b952:	4b8e      	ldr	r3, [pc, #568]	; (800bb8c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800b954:	4a8e      	ldr	r2, [pc, #568]	; (800bb90 <acc_cpd_cbank_and_vana_calibration+0x328>)
 800b956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b958:	498e      	ldr	r1, [pc, #568]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800b95a:	4798      	blx	r3
 800b95c:	4630      	mov	r0, r6
 800b95e:	b00b      	add	sp, #44	; 0x2c
 800b960:	ecbd 8b02 	vpop	{d8}
 800b964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b968:	4b88      	ldr	r3, [pc, #544]	; (800bb8c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800b96a:	4a8b      	ldr	r2, [pc, #556]	; (800bb98 <acc_cpd_cbank_and_vana_calibration+0x330>)
 800b96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b96e:	4989      	ldr	r1, [pc, #548]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800b970:	4606      	mov	r6, r0
 800b972:	4798      	blx	r3
 800b974:	4630      	mov	r0, r6
 800b976:	b00b      	add	sp, #44	; 0x2c
 800b978:	ecbd 8b02 	vpop	{d8}
 800b97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b980:	4886      	ldr	r0, [pc, #536]	; (800bb9c <acc_cpd_cbank_and_vana_calibration+0x334>)
 800b982:	f7fe fef1 	bl	800a768 <acc_diagnostic_log_set_scope>
 800b986:	6829      	ldr	r1, [r5, #0]
 800b988:	4885      	ldr	r0, [pc, #532]	; (800bba0 <acc_cpd_cbank_and_vana_calibration+0x338>)
 800b98a:	f7fe ff15 	bl	800a7b8 <acc_diagnostic_log_scalar>
 800b98e:	4885      	ldr	r0, [pc, #532]	; (800bba4 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800b990:	2203      	movs	r2, #3
 800b992:	2100      	movs	r1, #0
 800b994:	f7fe fef0 	bl	800a778 <acc_diagnostic_log_declare_parameter>
 800b998:	682c      	ldr	r4, [r5, #0]
 800b99a:	2300      	movs	r3, #0
 800b99c:	4620      	mov	r0, r4
 800b99e:	2203      	movs	r2, #3
 800b9a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b9a4:	f7fe fbcc 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800b9a8:	b960      	cbnz	r0, 800b9c4 <acc_cpd_cbank_and_vana_calibration+0x15c>
 800b9aa:	4b78      	ldr	r3, [pc, #480]	; (800bb8c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800b9ac:	4a7e      	ldr	r2, [pc, #504]	; (800bba8 <acc_cpd_cbank_and_vana_calibration+0x340>)
 800b9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b0:	4978      	ldr	r1, [pc, #480]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	4798      	blx	r3
 800b9b6:	2600      	movs	r6, #0
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	b00b      	add	sp, #44	; 0x2c
 800b9bc:	ecbd 8b02 	vpop	{d8}
 800b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c4:	aa09      	add	r2, sp, #36	; 0x24
 800b9c6:	219d      	movs	r1, #157	; 0x9d
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7fe ffe5 	bl	800a998 <acc_sensor_reg_read>
 800b9ce:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800b9d2:	2006      	movs	r0, #6
 800b9d4:	aa09      	add	r2, sp, #36	; 0x24
 800b9d6:	f006 0607 	and.w	r6, r6, #7
 800b9da:	2301      	movs	r3, #1
 800b9dc:	4621      	mov	r1, r4
 800b9de:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800b9e2:	f7fb faaf 	bl	8006f44 <acc_probes_execute_uint16>
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f7fe fab2 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d0dc      	beq.n	800b9aa <acc_cpd_cbank_and_vana_calibration+0x142>
 800b9f0:	682c      	ldr	r4, [r5, #0]
 800b9f2:	9b07      	ldr	r3, [sp, #28]
 800b9f4:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800b9f8:	601e      	str	r6, [r3, #0]
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ba00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ba04:	f7fe fa92 	bl	8009f2c <acc_sensor_protocol_r2_is_sensor_running>
 800ba08:	4605      	mov	r5, r0
 800ba0a:	b168      	cbz	r0, 800ba28 <acc_cpd_cbank_and_vana_calibration+0x1c0>
 800ba0c:	4e5f      	ldr	r6, [pc, #380]	; (800bb8c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800ba0e:	4a67      	ldr	r2, [pc, #412]	; (800bbac <acc_cpd_cbank_and_vana_calibration+0x344>)
 800ba10:	6b75      	ldr	r5, [r6, #52]	; 0x34
 800ba12:	4960      	ldr	r1, [pc, #384]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800ba14:	4623      	mov	r3, r4
 800ba16:	2000      	movs	r0, #0
 800ba18:	47a8      	blx	r5
 800ba1a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800ba1c:	4a64      	ldr	r2, [pc, #400]	; (800bbb0 <acc_cpd_cbank_and_vana_calibration+0x348>)
 800ba1e:	495d      	ldr	r1, [pc, #372]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800ba20:	2000      	movs	r0, #0
 800ba22:	4798      	blx	r3
 800ba24:	2600      	movs	r6, #0
 800ba26:	e7a5      	b.n	800b974 <acc_cpd_cbank_and_vana_calibration+0x10c>
 800ba28:	9601      	str	r6, [sp, #4]
 800ba2a:	2311      	movs	r3, #17
 800ba2c:	4e61      	ldr	r6, [pc, #388]	; (800bbb4 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800ba2e:	4956      	ldr	r1, [pc, #344]	; (800bb88 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800ba30:	9602      	str	r6, [sp, #8]
 800ba32:	4602      	mov	r2, r0
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	4620      	mov	r0, r4
 800ba38:	4b5f      	ldr	r3, [pc, #380]	; (800bbb8 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800ba3a:	f004 fe07 	bl	801064c <acc_confprogram_live_patch>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	4950      	ldr	r1, [pc, #320]	; (800bb88 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800ba48:	4b5b      	ldr	r3, [pc, #364]	; (800bbb8 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800ba4a:	462a      	mov	r2, r5
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f004 fdfd 	bl	801064c <acc_confprogram_live_patch>
 800ba52:	462e      	mov	r6, r5
 800ba54:	4853      	ldr	r0, [pc, #332]	; (800bba4 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800ba56:	4629      	mov	r1, r5
 800ba58:	f7fe fe96 	bl	800a788 <acc_diagnostic_log_set_parameter>
 800ba5c:	4a55      	ldr	r2, [pc, #340]	; (800bbb4 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800ba5e:	494a      	ldr	r1, [pc, #296]	; (800bb88 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800ba60:	231f      	movs	r3, #31
 800ba62:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4b53      	ldr	r3, [pc, #332]	; (800bbb8 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f004 fded 	bl	801064c <acc_confprogram_live_patch>
 800ba72:	f240 11d1 	movw	r1, #465	; 0x1d1
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7fe f9de 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f000 80bf 	beq.w	800bc00 <acc_cpd_cbank_and_vana_calibration+0x398>
 800ba82:	2300      	movs	r3, #0
 800ba84:	2209      	movs	r2, #9
 800ba86:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f7fe fb58 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800ba90:	b938      	cbnz	r0, 800baa2 <acc_cpd_cbank_and_vana_calibration+0x23a>
 800ba92:	4e3e      	ldr	r6, [pc, #248]	; (800bb8c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800ba94:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800ba96:	4a49      	ldr	r2, [pc, #292]	; (800bbbc <acc_cpd_cbank_and_vana_calibration+0x354>)
 800ba98:	493e      	ldr	r1, [pc, #248]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	47a0      	blx	r4
 800baa0:	e7bb      	b.n	800ba1a <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800baa2:	ee18 0a10 	vmov	r0, s16
 800baa6:	2110      	movs	r1, #16
 800baa8:	f7fd fe78 	bl	800979c <acc_sensor_r2_buffer_processed_verify_size>
 800baac:	b928      	cbnz	r0, 800baba <acc_cpd_cbank_and_vana_calibration+0x252>
 800baae:	4e37      	ldr	r6, [pc, #220]	; (800bb8c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800bab0:	4a43      	ldr	r2, [pc, #268]	; (800bbc0 <acc_cpd_cbank_and_vana_calibration+0x358>)
 800bab2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800bab4:	4937      	ldr	r1, [pc, #220]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800bab6:	4798      	blx	r3
 800bab8:	e7ec      	b.n	800ba94 <acc_cpd_cbank_and_vana_calibration+0x22c>
 800baba:	2310      	movs	r3, #16
 800babc:	2200      	movs	r2, #0
 800babe:	4659      	mov	r1, fp
 800bac0:	4620      	mov	r0, r4
 800bac2:	f7fd fe73 	bl	80097ac <acc_sensor_r2_buffer_processed_read>
 800bac6:	2310      	movs	r3, #16
 800bac8:	4602      	mov	r2, r0
 800baca:	4621      	mov	r1, r4
 800bacc:	4682      	mov	sl, r0
 800bace:	2000      	movs	r0, #0
 800bad0:	f7fb fa38 	bl	8006f44 <acc_probes_execute_uint16>
 800bad4:	4620      	mov	r0, r4
 800bad6:	f7fe fa3b 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800bada:	4680      	mov	r8, r0
 800badc:	2800      	cmp	r0, #0
 800bade:	d0d8      	beq.n	800ba92 <acc_cpd_cbank_and_vana_calibration+0x22a>
 800bae0:	2700      	movs	r7, #0
 800bae2:	46b9      	mov	r9, r7
 800bae4:	4651      	mov	r1, sl
 800bae6:	f10a 0c1e 	add.w	ip, sl, #30
 800baea:	884b      	ldrh	r3, [r1, #2]
 800baec:	f831 2b02 	ldrh.w	r2, [r1], #2
 800baf0:	4293      	cmp	r3, r2
 800baf2:	4499      	add	r9, r3
 800baf4:	bf34      	ite	cc
 800baf6:	1ad3      	subcc	r3, r2, r3
 800baf8:	1a9b      	subcs	r3, r3, r2
 800bafa:	429f      	cmp	r7, r3
 800bafc:	bf38      	it	cc
 800bafe:	461f      	movcc	r7, r3
 800bb00:	458c      	cmp	ip, r1
 800bb02:	d1f2      	bne.n	800baea <acc_cpd_cbank_and_vana_calibration+0x282>
 800bb04:	4927      	ldr	r1, [pc, #156]	; (800bba4 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800bb06:	482f      	ldr	r0, [pc, #188]	; (800bbc4 <acc_cpd_cbank_and_vana_calibration+0x35c>)
 800bb08:	f7fe fe46 	bl	800a798 <acc_diagnostic_log_array>
 800bb0c:	2110      	movs	r1, #16
 800bb0e:	4650      	mov	r0, sl
 800bb10:	f7fe fe5a 	bl	800a7c8 <acc_diagnostic_log_data_u16>
 800bb14:	f8ba 3000 	ldrh.w	r3, [sl]
 800bb18:	4499      	add	r9, r3
 800bb1a:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800bb1e:	f5a9 43f2 	sub.w	r3, r9, #30976	; 0x7900
 800bb22:	3b18      	subs	r3, #24
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800bb2a:	428b      	cmp	r3, r1
 800bb2c:	d852      	bhi.n	800bbd4 <acc_cpd_cbank_and_vana_calibration+0x36c>
 800bb2e:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 800bb32:	d84f      	bhi.n	800bbd4 <acc_cpd_cbank_and_vana_calibration+0x36c>
 800bb34:	f7fb fa00 	bl	8006f38 <acc_rss_integration_log_level>
 800bb38:	2803      	cmp	r0, #3
 800bb3a:	4646      	mov	r6, r8
 800bb3c:	d90a      	bls.n	800bb54 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800bb3e:	4a13      	ldr	r2, [pc, #76]	; (800bb8c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800bb40:	9701      	str	r7, [sp, #4]
 800bb42:	fa1f f389 	uxth.w	r3, r9
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	4912      	ldr	r1, [pc, #72]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800bb4a:	4623      	mov	r3, r4
 800bb4c:	2004      	movs	r0, #4
 800bb4e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bb50:	4a1d      	ldr	r2, [pc, #116]	; (800bbc8 <acc_cpd_cbank_and_vana_calibration+0x360>)
 800bb52:	47a0      	blx	r4
 800bb54:	9b07      	ldr	r3, [sp, #28]
 800bb56:	711d      	strb	r5, [r3, #4]
 800bb58:	f7fb f9ee 	bl	8006f38 <acc_rss_integration_log_level>
 800bb5c:	2801      	cmp	r0, #1
 800bb5e:	d909      	bls.n	800bb74 <acc_cpd_cbank_and_vana_calibration+0x30c>
 800bb60:	9907      	ldr	r1, [sp, #28]
 800bb62:	4a0a      	ldr	r2, [pc, #40]	; (800bb8c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800bb64:	790b      	ldrb	r3, [r1, #4]
 800bb66:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bb68:	9300      	str	r3, [sp, #0]
 800bb6a:	680b      	ldr	r3, [r1, #0]
 800bb6c:	4a17      	ldr	r2, [pc, #92]	; (800bbcc <acc_cpd_cbank_and_vana_calibration+0x364>)
 800bb6e:	4909      	ldr	r1, [pc, #36]	; (800bb94 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800bb70:	2002      	movs	r0, #2
 800bb72:	47a0      	blx	r4
 800bb74:	9c07      	ldr	r4, [sp, #28]
 800bb76:	4816      	ldr	r0, [pc, #88]	; (800bbd0 <acc_cpd_cbank_and_vana_calibration+0x368>)
 800bb78:	6821      	ldr	r1, [r4, #0]
 800bb7a:	f7fe fe1d 	bl	800a7b8 <acc_diagnostic_log_scalar>
 800bb7e:	7921      	ldrb	r1, [r4, #4]
 800bb80:	4808      	ldr	r0, [pc, #32]	; (800bba4 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800bb82:	f7fe fe19 	bl	800a7b8 <acc_diagnostic_log_scalar>
 800bb86:	e6f5      	b.n	800b974 <acc_cpd_cbank_and_vana_calibration+0x10c>
 800bb88:	080122cc 	.word	0x080122cc
 800bb8c:	20000640 	.word	0x20000640
 800bb90:	08016f90 	.word	0x08016f90
 800bb94:	08016f70 	.word	0x08016f70
 800bb98:	08016f2c 	.word	0x08016f2c
 800bb9c:	08016f74 	.word	0x08016f74
 800bba0:	08016258 	.word	0x08016258
 800bba4:	08016fc4 	.word	0x08016fc4
 800bba8:	08016fd0 	.word	0x08016fd0
 800bbac:	08016fe8 	.word	0x08016fe8
 800bbb0:	080170b0 	.word	0x080170b0
 800bbb4:	080096d1 	.word	0x080096d1
 800bbb8:	0801902c 	.word	0x0801902c
 800bbbc:	08017084 	.word	0x08017084
 800bbc0:	0801705c 	.word	0x0801705c
 800bbc4:	08017074 	.word	0x08017074
 800bbc8:	080170e8 	.word	0x080170e8
 800bbcc:	080170c8 	.word	0x080170c8
 800bbd0:	080170dc 	.word	0x080170dc
 800bbd4:	f7fb f9b0 	bl	8006f38 <acc_rss_integration_log_level>
 800bbd8:	2803      	cmp	r0, #3
 800bbda:	d90a      	bls.n	800bbf2 <acc_cpd_cbank_and_vana_calibration+0x38a>
 800bbdc:	4b0c      	ldr	r3, [pc, #48]	; (800bc10 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800bbde:	9701      	str	r7, [sp, #4]
 800bbe0:	fa1f f289 	uxth.w	r2, r9
 800bbe4:	9200      	str	r2, [sp, #0]
 800bbe6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800bbe8:	4a0a      	ldr	r2, [pc, #40]	; (800bc14 <acc_cpd_cbank_and_vana_calibration+0x3ac>)
 800bbea:	490b      	ldr	r1, [pc, #44]	; (800bc18 <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 800bbec:	4623      	mov	r3, r4
 800bbee:	2004      	movs	r0, #4
 800bbf0:	47a8      	blx	r5
 800bbf2:	b10e      	cbz	r6, 800bbf8 <acc_cpd_cbank_and_vana_calibration+0x390>
 800bbf4:	4e06      	ldr	r6, [pc, #24]	; (800bc10 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800bbf6:	e710      	b.n	800ba1a <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800bbf8:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800bbfc:	2601      	movs	r6, #1
 800bbfe:	e729      	b.n	800ba54 <acc_cpd_cbank_and_vana_calibration+0x1ec>
 800bc00:	4e03      	ldr	r6, [pc, #12]	; (800bc10 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800bc02:	4a06      	ldr	r2, [pc, #24]	; (800bc1c <acc_cpd_cbank_and_vana_calibration+0x3b4>)
 800bc04:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800bc06:	4904      	ldr	r1, [pc, #16]	; (800bc18 <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 800bc08:	462b      	mov	r3, r5
 800bc0a:	47a0      	blx	r4
 800bc0c:	e705      	b.n	800ba1a <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800bc0e:	bf00      	nop
 800bc10:	20000640 	.word	0x20000640
 800bc14:	080170e8 	.word	0x080170e8
 800bc18:	08016f70 	.word	0x08016f70
 800bc1c:	0801701c 	.word	0x0801701c

0800bc20 <acc_cpd_clock_test>:
 800bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	461d      	mov	r5, r3
 800bc26:	6917      	ldr	r7, [r2, #16]
 800bc28:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800bcf0 <acc_cpd_clock_test+0xd0>
 800bc2c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800bd00 <acc_cpd_clock_test+0xe0>
 800bc30:	2302      	movs	r3, #2
 800bc32:	4688      	mov	r8, r1
 800bc34:	b085      	sub	sp, #20
 800bc36:	492c      	ldr	r1, [pc, #176]	; (800bce8 <acc_cpd_clock_test+0xc8>)
 800bc38:	702b      	strb	r3, [r5, #0]
 800bc3a:	4616      	mov	r6, r2
 800bc3c:	4683      	mov	fp, r0
 800bc3e:	706b      	strb	r3, [r5, #1]
 800bc40:	2400      	movs	r4, #0
 800bc42:	b19f      	cbz	r7, 800bc6c <acc_cpd_clock_test+0x4c>
 800bc44:	5d3b      	ldrb	r3, [r7, r4]
 800bc46:	b96b      	cbnz	r3, 800bc64 <acc_cpd_clock_test+0x44>
 800bc48:	b9b4      	cbnz	r4, 800bc78 <acc_cpd_clock_test+0x58>
 800bc4a:	89b3      	ldrh	r3, [r6, #12]
 800bc4c:	3b02      	subs	r3, #2
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	2b04      	cmp	r3, #4
 800bc52:	d92e      	bls.n	800bcb2 <acc_cpd_clock_test+0x92>
 800bc54:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800bc58:	4652      	mov	r2, sl
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	4798      	blx	r3
 800bc5e:	2303      	movs	r3, #3
 800bc60:	4921      	ldr	r1, [pc, #132]	; (800bce8 <acc_cpd_clock_test+0xc8>)
 800bc62:	702b      	strb	r3, [r5, #0]
 800bc64:	bb0c      	cbnz	r4, 800bcaa <acc_cpd_clock_test+0x8a>
 800bc66:	2401      	movs	r4, #1
 800bc68:	2f00      	cmp	r7, #0
 800bc6a:	d1eb      	bne.n	800bc44 <acc_cpd_clock_test+0x24>
 800bc6c:	4b1f      	ldr	r3, [pc, #124]	; (800bcec <acc_cpd_clock_test+0xcc>)
 800bc6e:	5ce3      	ldrb	r3, [r4, r3]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1f7      	bne.n	800bc64 <acc_cpd_clock_test+0x44>
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	d0e8      	beq.n	800bc4a <acc_cpd_clock_test+0x2a>
 800bc78:	88b3      	ldrh	r3, [r6, #4]
 800bc7a:	6832      	ldr	r2, [r6, #0]
 800bc7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bc80:	e9d6 4302 	ldrd	r4, r3, [r6, #8]
 800bc84:	9200      	str	r2, [sp, #0]
 800bc86:	88f2      	ldrh	r2, [r6, #6]
 800bc88:	f8ad 2004 	strh.w	r2, [sp, #4]
 800bc8c:	4641      	mov	r1, r8
 800bc8e:	4658      	mov	r0, fp
 800bc90:	466a      	mov	r2, sp
 800bc92:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc96:	f002 fbf7 	bl	800e488 <acc_cpd_refclk_stability_test>
 800bc9a:	b9c0      	cbnz	r0, 800bcce <acc_cpd_clock_test+0xae>
 800bc9c:	4b14      	ldr	r3, [pc, #80]	; (800bcf0 <acc_cpd_clock_test+0xd0>)
 800bc9e:	4a15      	ldr	r2, [pc, #84]	; (800bcf4 <acc_cpd_clock_test+0xd4>)
 800bca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca2:	4911      	ldr	r1, [pc, #68]	; (800bce8 <acc_cpd_clock_test+0xc8>)
 800bca4:	4798      	blx	r3
 800bca6:	2303      	movs	r3, #3
 800bca8:	706b      	strb	r3, [r5, #1]
 800bcaa:	2001      	movs	r0, #1
 800bcac:	b005      	add	sp, #20
 800bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb2:	f7fb f941 	bl	8006f38 <acc_rss_integration_log_level>
 800bcb6:	2801      	cmp	r0, #1
 800bcb8:	490b      	ldr	r1, [pc, #44]	; (800bce8 <acc_cpd_clock_test+0xc8>)
 800bcba:	d905      	bls.n	800bcc8 <acc_cpd_clock_test+0xa8>
 800bcbc:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800bcc0:	4a0d      	ldr	r2, [pc, #52]	; (800bcf8 <acc_cpd_clock_test+0xd8>)
 800bcc2:	2002      	movs	r0, #2
 800bcc4:	4798      	blx	r3
 800bcc6:	4908      	ldr	r1, [pc, #32]	; (800bce8 <acc_cpd_clock_test+0xc8>)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	702b      	strb	r3, [r5, #0]
 800bccc:	e7ca      	b.n	800bc64 <acc_cpd_clock_test+0x44>
 800bcce:	f7fb f933 	bl	8006f38 <acc_rss_integration_log_level>
 800bcd2:	2801      	cmp	r0, #1
 800bcd4:	d905      	bls.n	800bce2 <acc_cpd_clock_test+0xc2>
 800bcd6:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <acc_cpd_clock_test+0xd0>)
 800bcd8:	4a08      	ldr	r2, [pc, #32]	; (800bcfc <acc_cpd_clock_test+0xdc>)
 800bcda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcdc:	4902      	ldr	r1, [pc, #8]	; (800bce8 <acc_cpd_clock_test+0xc8>)
 800bcde:	2002      	movs	r0, #2
 800bce0:	4798      	blx	r3
 800bce2:	2300      	movs	r3, #0
 800bce4:	706b      	strb	r3, [r5, #1]
 800bce6:	e7e0      	b.n	800bcaa <acc_cpd_clock_test+0x8a>
 800bce8:	08017120 	.word	0x08017120
 800bcec:	08017170 	.word	0x08017170
 800bcf0:	20000640 	.word	0x20000640
 800bcf4:	0801715c 	.word	0x0801715c
 800bcf8:	08017108 	.word	0x08017108
 800bcfc:	08017148 	.word	0x08017148
 800bd00:	08017130 	.word	0x08017130

0800bd04 <acc_cpd_communication_test>:
 800bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	ed2d 8b08 	vpush	{d8-d11}
 800bd0c:	4614      	mov	r4, r2
 800bd0e:	b099      	sub	sp, #100	; 0x64
 800bd10:	68a4      	ldr	r4, [r4, #8]
 800bd12:	920c      	str	r2, [sp, #48]	; 0x30
 800bd14:	461a      	mov	r2, r3
 800bd16:	9308      	str	r3, [sp, #32]
 800bd18:	9406      	str	r4, [sp, #24]
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	7013      	strb	r3, [r2, #0]
 800bd1e:	7053      	strb	r3, [r2, #1]
 800bd20:	7093      	strb	r3, [r2, #2]
 800bd22:	70d3      	strb	r3, [r2, #3]
 800bd24:	7113      	strb	r3, [r2, #4]
 800bd26:	9b06      	ldr	r3, [sp, #24]
 800bd28:	f8df b310 	ldr.w	fp, [pc, #784]	; 800c03c <acc_cpd_communication_test+0x338>
 800bd2c:	910d      	str	r1, [sp, #52]	; 0x34
 800bd2e:	f04f 0800 	mov.w	r8, #0
 800bd32:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
 800bd36:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
 800bd3a:	ee08 0a10 	vmov	s16, r0
 800bd3e:	46c2      	mov	sl, r8
 800bd40:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bd44:	4647      	mov	r7, r8
 800bd46:	b15b      	cbz	r3, 800bd60 <acc_cpd_communication_test+0x5c>
 800bd48:	9b06      	ldr	r3, [sp, #24]
 800bd4a:	f813 300a 	ldrb.w	r3, [r3, sl]
 800bd4e:	b163      	cbz	r3, 800bd6a <acc_cpd_communication_test+0x66>
 800bd50:	f1ba 0f04 	cmp.w	sl, #4
 800bd54:	d014      	beq.n	800bd80 <acc_cpd_communication_test+0x7c>
 800bd56:	9b06      	ldr	r3, [sp, #24]
 800bd58:	f10a 0a01 	add.w	sl, sl, #1
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1f3      	bne.n	800bd48 <acc_cpd_communication_test+0x44>
 800bd60:	4bb5      	ldr	r3, [pc, #724]	; (800c038 <acc_cpd_communication_test+0x334>)
 800bd62:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1f2      	bne.n	800bd50 <acc_cpd_communication_test+0x4c>
 800bd6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	f200 8229 	bhi.w	800c1c6 <acc_cpd_communication_test+0x4c2>
 800bd74:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bd78:	004200d5 	.word	0x004200d5
 800bd7c:	00130027 	.word	0x00130027
 800bd80:	46ba      	mov	sl, r7
 800bd82:	9b08      	ldr	r3, [sp, #32]
 800bd84:	785b      	ldrb	r3, [r3, #1]
 800bd86:	b923      	cbnz	r3, 800bd92 <acc_cpd_communication_test+0x8e>
 800bd88:	9b08      	ldr	r3, [sp, #32]
 800bd8a:	789b      	ldrb	r3, [r3, #2]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 8183 	beq.w	800c098 <acc_cpd_communication_test+0x394>
 800bd92:	2001      	movs	r0, #1
 800bd94:	b019      	add	sp, #100	; 0x64
 800bd96:	ecbd 8b08 	vpop	{d8-d11}
 800bd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bda0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bda2:	6818      	ldr	r0, [r3, #0]
 800bda4:	ee18 1a10 	vmov	r1, s16
 800bda8:	46ba      	mov	sl, r7
 800bdaa:	f001 fb67 	bl	800d47c <acc_cpd_hibernate_test>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f040 81f7 	bne.w	800c1a2 <acc_cpd_communication_test+0x49e>
 800bdb4:	4ba1      	ldr	r3, [pc, #644]	; (800c03c <acc_cpd_communication_test+0x338>)
 800bdb6:	4aa2      	ldr	r2, [pc, #648]	; (800c040 <acc_cpd_communication_test+0x33c>)
 800bdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdba:	49a2      	ldr	r1, [pc, #648]	; (800c044 <acc_cpd_communication_test+0x340>)
 800bdbc:	4798      	blx	r3
 800bdbe:	9a08      	ldr	r2, [sp, #32]
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	7113      	strb	r3, [r2, #4]
 800bdc4:	e7dd      	b.n	800bd82 <acc_cpd_communication_test+0x7e>
 800bdc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bdca:	6853      	ldr	r3, [r2, #4]
 800bdcc:	7b10      	ldrb	r0, [r2, #12]
 800bdce:	6814      	ldr	r4, [r2, #0]
 800bdd0:	9315      	str	r3, [sp, #84]	; 0x54
 800bdd2:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
 800bdd6:	ab12      	add	r3, sp, #72	; 0x48
 800bdd8:	ee18 0a10 	vmov	r0, s16
 800bddc:	aa14      	add	r2, sp, #80	; 0x50
 800bdde:	9414      	str	r4, [sp, #80]	; 0x50
 800bde0:	f001 fbe2 	bl	800d5a8 <acc_cpd_interrupt_test>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f040 81b3 	bne.w	800c150 <acc_cpd_communication_test+0x44c>
 800bdea:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800bdee:	4a96      	ldr	r2, [pc, #600]	; (800c048 <acc_cpd_communication_test+0x344>)
 800bdf0:	4994      	ldr	r1, [pc, #592]	; (800c044 <acc_cpd_communication_test+0x340>)
 800bdf2:	4798      	blx	r3
 800bdf4:	9a08      	ldr	r2, [sp, #32]
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	70d3      	strb	r3, [r2, #3]
 800bdfa:	e7ac      	b.n	800bd56 <acc_cpd_communication_test+0x52>
 800bdfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdfe:	4b93      	ldr	r3, [pc, #588]	; (800c04c <acc_cpd_communication_test+0x348>)
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	ee08 2a90 	vmov	s17, r2
 800be06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be08:	ac18      	add	r4, sp, #96	; 0x60
 800be0a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 800be0e:	498d      	ldr	r1, [pc, #564]	; (800c044 <acc_cpd_communication_test+0x340>)
 800be10:	22f6      	movs	r2, #246	; 0xf6
 800be12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800be16:	f7fb f833 	bl	8006e80 <acc_rss_integration_mem_alloc_debug>
 800be1a:	4680      	mov	r8, r0
 800be1c:	2800      	cmp	r0, #0
 800be1e:	f000 81ce 	beq.w	800c1be <acc_cpd_communication_test+0x4ba>
 800be22:	2300      	movs	r3, #0
 800be24:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800be28:	1f01      	subs	r1, r0, #4
 800be2a:	910a      	str	r1, [sp, #40]	; 0x28
 800be2c:	f003 0203 	and.w	r2, r3, #3
 800be30:	a818      	add	r0, sp, #96	; 0x60
 800be32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800be36:	3301      	adds	r3, #1
 800be38:	f852 2c10 	ldr.w	r2, [r2, #-16]
 800be3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be44:	d1f2      	bne.n	800be2c <acc_cpd_communication_test+0x128>
 800be46:	f7fb f871 	bl	8006f2c <acc_rss_integration_get_time>
 800be4a:	2300      	movs	r3, #0
 800be4c:	9307      	str	r3, [sp, #28]
 800be4e:	ab12      	add	r3, sp, #72	; 0x48
 800be50:	9009      	str	r0, [sp, #36]	; 0x24
 800be52:	930b      	str	r3, [sp, #44]	; 0x2c
 800be54:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800be58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800be5a:	f8df a204 	ldr.w	sl, [pc, #516]	; 800c060 <acc_cpd_communication_test+0x35c>
 800be5e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 800c044 <acc_cpd_communication_test+0x340>
 800be62:	f44f 7400 	mov.w	r4, #512	; 0x200
 800be66:	e9cd 4500 	strd	r4, r5, [sp]
 800be6a:	ee18 1a10 	vmov	r1, s16
 800be6e:	ee18 0a90 	vmov	r0, s17
 800be72:	4643      	mov	r3, r8
 800be74:	2200      	movs	r2, #0
 800be76:	f7fd fb95 	bl	80095a4 <acc_sensor_r2_buffer_write>
 800be7a:	e9cd 4500 	strd	r4, r5, [sp]
 800be7e:	ee18 1a10 	vmov	r1, s16
 800be82:	ee18 0a90 	vmov	r0, s17
 800be86:	4643      	mov	r3, r8
 800be88:	2200      	movs	r2, #0
 800be8a:	f7fd fbcd 	bl	8009628 <acc_sensor_r2_buffer_raw_read>
 800be8e:	2500      	movs	r5, #0
 800be90:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800be92:	9505      	str	r5, [sp, #20]
 800be94:	462c      	mov	r4, r5
 800be96:	aa18      	add	r2, sp, #96	; 0x60
 800be98:	f004 0303 	and.w	r3, r4, #3
 800be9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bea0:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800bea4:	f853 7c10 	ldr.w	r7, [r3, #-16]
 800bea8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
 800beac:	4297      	cmp	r7, r2
 800beae:	d011      	beq.n	800bed4 <acc_cpd_communication_test+0x1d0>
 800beb0:	f7fb f842 	bl	8006f38 <acc_rss_integration_log_level>
 800beb4:	2803      	cmp	r0, #3
 800beb6:	4623      	mov	r3, r4
 800beb8:	4652      	mov	r2, sl
 800beba:	4649      	mov	r1, r9
 800bebc:	f04f 0004 	mov.w	r0, #4
 800bec0:	d905      	bls.n	800bece <acc_cpd_communication_test+0x1ca>
 800bec2:	6835      	ldr	r5, [r6, #0]
 800bec4:	e9cd 7500 	strd	r7, r5, [sp]
 800bec8:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 800becc:	47b8      	blx	r7
 800bece:	9b05      	ldr	r3, [sp, #20]
 800bed0:	3301      	adds	r3, #1
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	3401      	adds	r4, #1
 800bed6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800beda:	d1dc      	bne.n	800be96 <acc_cpd_communication_test+0x192>
 800bedc:	9d05      	ldr	r5, [sp, #20]
 800bede:	f7fb f825 	bl	8006f2c <acc_rss_integration_get_time>
 800bee2:	9b07      	ldr	r3, [sp, #28]
 800bee4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bee8:	9307      	str	r3, [sp, #28]
 800beea:	2d00      	cmp	r5, #0
 800beec:	f040 808b 	bne.w	800c006 <acc_cpd_communication_test+0x302>
 800bef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef2:	1ac0      	subs	r0, r0, r3
 800bef4:	2813      	cmp	r0, #19
 800bef6:	d9af      	bls.n	800be58 <acc_cpd_communication_test+0x154>
 800bef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800befa:	930b      	str	r3, [sp, #44]	; 0x2c
 800befc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800befe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800bf02:	930a      	str	r3, [sp, #40]	; 0x28
 800bf04:	4607      	mov	r7, r0
 800bf06:	f7fb f817 	bl	8006f38 <acc_rss_integration_log_level>
 800bf0a:	2801      	cmp	r0, #1
 800bf0c:	d905      	bls.n	800bf1a <acc_cpd_communication_test+0x216>
 800bf0e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800bf12:	4a4f      	ldr	r2, [pc, #316]	; (800c050 <acc_cpd_communication_test+0x34c>)
 800bf14:	494b      	ldr	r1, [pc, #300]	; (800c044 <acc_cpd_communication_test+0x340>)
 800bf16:	2002      	movs	r0, #2
 800bf18:	4798      	blx	r3
 800bf1a:	9a08      	ldr	r2, [sp, #32]
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	7093      	strb	r3, [r2, #2]
 800bf20:	e086      	b.n	800c030 <acc_cpd_communication_test+0x32c>
 800bf22:	2300      	movs	r3, #0
 800bf24:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800bf28:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 800bf2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf2e:	4a49      	ldr	r2, [pc, #292]	; (800c054 <acc_cpd_communication_test+0x350>)
 800bf30:	f8d3 8000 	ldr.w	r8, [r3]
 800bf34:	9215      	str	r2, [sp, #84]	; 0x54
 800bf36:	f7fa fff9 	bl	8006f2c <acc_rss_integration_get_time>
 800bf3a:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800c064 <acc_cpd_communication_test+0x360>
 800bf3e:	f8cd a014 	str.w	sl, [sp, #20]
 800bf42:	ab12      	add	r3, sp, #72	; 0x48
 800bf44:	9007      	str	r0, [sp, #28]
 800bf46:	2608      	movs	r6, #8
 800bf48:	9709      	str	r7, [sp, #36]	; 0x24
 800bf4a:	469a      	mov	sl, r3
 800bf4c:	9c05      	ldr	r4, [sp, #20]
 800bf4e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800bf52:	2500      	movs	r5, #0
 800bf54:	463a      	mov	r2, r7
 800bf56:	2121      	movs	r1, #33	; 0x21
 800bf58:	4640      	mov	r0, r8
 800bf5a:	f7fe fd33 	bl	800a9c4 <acc_sensor_reg_write>
 800bf5e:	4652      	mov	r2, sl
 800bf60:	2121      	movs	r1, #33	; 0x21
 800bf62:	4640      	mov	r0, r8
 800bf64:	f7fe fd18 	bl	800a998 <acc_sensor_reg_read>
 800bf68:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800bf6c:	42bb      	cmp	r3, r7
 800bf6e:	d01e      	beq.n	800bfae <acc_cpd_communication_test+0x2aa>
 800bf70:	f7fa ffe2 	bl	8006f38 <acc_rss_integration_log_level>
 800bf74:	f04f 0c04 	mov.w	ip, #4
 800bf78:	2803      	cmp	r0, #3
 800bf7a:	4932      	ldr	r1, [pc, #200]	; (800c044 <acc_cpd_communication_test+0x340>)
 800bf7c:	4623      	mov	r3, r4
 800bf7e:	464a      	mov	r2, r9
 800bf80:	4660      	mov	r0, ip
 800bf82:	d908      	bls.n	800bf96 <acc_cpd_communication_test+0x292>
 800bf84:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 800bf88:	f8cd e008 	str.w	lr, [sp, #8]
 800bf8c:	e9cd c700 	strd	ip, r7, [sp]
 800bf90:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 800bf94:	47b8      	blx	r7
 800bf96:	4623      	mov	r3, r4
 800bf98:	3401      	adds	r4, #1
 800bf9a:	aa18      	add	r2, sp, #96	; 0x60
 800bf9c:	2c05      	cmp	r4, #5
 800bf9e:	f105 0501 	add.w	r5, r5, #1
 800bfa2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800bfa6:	d009      	beq.n	800bfbc <acc_cpd_communication_test+0x2b8>
 800bfa8:	f833 7c10 	ldrh.w	r7, [r3, #-16]
 800bfac:	e7d2      	b.n	800bf54 <acc_cpd_communication_test+0x250>
 800bfae:	4623      	mov	r3, r4
 800bfb0:	3401      	adds	r4, #1
 800bfb2:	aa18      	add	r2, sp, #96	; 0x60
 800bfb4:	2c05      	cmp	r4, #5
 800bfb6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800bfba:	d1f5      	bne.n	800bfa8 <acc_cpd_communication_test+0x2a4>
 800bfbc:	f7fa ffb6 	bl	8006f2c <acc_rss_integration_get_time>
 800bfc0:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800bfc4:	b93d      	cbnz	r5, 800bfd6 <acc_cpd_communication_test+0x2d2>
 800bfc6:	9b07      	ldr	r3, [sp, #28]
 800bfc8:	1ac0      	subs	r0, r0, r3
 800bfca:	2813      	cmp	r0, #19
 800bfcc:	f106 0308 	add.w	r3, r6, #8
 800bfd0:	d84a      	bhi.n	800c068 <acc_cpd_communication_test+0x364>
 800bfd2:	461e      	mov	r6, r3
 800bfd4:	e7ba      	b.n	800bf4c <acc_cpd_communication_test+0x248>
 800bfd6:	e9cd 260e 	strd	r2, r6, [sp, #56]	; 0x38
 800bfda:	f8dd a014 	ldr.w	sl, [sp, #20]
 800bfde:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bfe0:	f7fa ffa4 	bl	8006f2c <acc_rss_integration_get_time>
 800bfe4:	462b      	mov	r3, r5
 800bfe6:	9d07      	ldr	r5, [sp, #28]
 800bfe8:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800bfec:	4915      	ldr	r1, [pc, #84]	; (800c044 <acc_cpd_communication_test+0x340>)
 800bfee:	4606      	mov	r6, r0
 800bff0:	2204      	movs	r2, #4
 800bff2:	9200      	str	r2, [sp, #0]
 800bff4:	2000      	movs	r0, #0
 800bff6:	4a18      	ldr	r2, [pc, #96]	; (800c058 <acc_cpd_communication_test+0x354>)
 800bff8:	1b75      	subs	r5, r6, r5
 800bffa:	9510      	str	r5, [sp, #64]	; 0x40
 800bffc:	47a0      	blx	r4
 800bffe:	9a08      	ldr	r2, [sp, #32]
 800c000:	2303      	movs	r3, #3
 800c002:	7053      	strb	r3, [r2, #1]
 800c004:	e6a7      	b.n	800bd56 <acc_cpd_communication_test+0x52>
 800c006:	4607      	mov	r7, r0
 800c008:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c00a:	9b07      	ldr	r3, [sp, #28]
 800c00c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c00e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c010:	4a12      	ldr	r2, [pc, #72]	; (800c05c <acc_cpd_communication_test+0x358>)
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	900a      	str	r0, [sp, #40]	; 0x28
 800c016:	462b      	mov	r3, r5
 800c018:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800c01c:	4909      	ldr	r1, [pc, #36]	; (800c044 <acc_cpd_communication_test+0x340>)
 800c01e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c020:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800c024:	2000      	movs	r0, #0
 800c026:	47a0      	blx	r4
 800c028:	9a08      	ldr	r2, [sp, #32]
 800c02a:	2303      	movs	r3, #3
 800c02c:	1b7f      	subs	r7, r7, r5
 800c02e:	7093      	strb	r3, [r2, #2]
 800c030:	4640      	mov	r0, r8
 800c032:	f7fa ff69 	bl	8006f08 <acc_rss_integration_mem_free>
 800c036:	e68e      	b.n	800bd56 <acc_cpd_communication_test+0x52>
 800c038:	08017428 	.word	0x08017428
 800c03c:	20000640 	.word	0x20000640
 800c040:	08017340 	.word	0x08017340
 800c044:	08017190 	.word	0x08017190
 800c048:	080172f0 	.word	0x080172f0
 800c04c:	080122b0 	.word	0x080122b0
 800c050:	080172cc 	.word	0x080172cc
 800c054:	aaaa5555 	.word	0xaaaa5555
 800c058:	080173ac 	.word	0x080173ac
 800c05c:	080173ec 	.word	0x080173ec
 800c060:	0801727c 	.word	0x0801727c
 800c064:	080171e8 	.word	0x080171e8
 800c068:	e9cd 260e 	strd	r2, r6, [sp, #56]	; 0x38
 800c06c:	f8dd a014 	ldr.w	sl, [sp, #20]
 800c070:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c072:	f7fa ff5b 	bl	8006f2c <acc_rss_integration_get_time>
 800c076:	9b07      	ldr	r3, [sp, #28]
 800c078:	1ac3      	subs	r3, r0, r3
 800c07a:	9310      	str	r3, [sp, #64]	; 0x40
 800c07c:	f7fa ff5c 	bl	8006f38 <acc_rss_integration_log_level>
 800c080:	2801      	cmp	r0, #1
 800c082:	d905      	bls.n	800c090 <acc_cpd_communication_test+0x38c>
 800c084:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800c088:	4a63      	ldr	r2, [pc, #396]	; (800c218 <acc_cpd_communication_test+0x514>)
 800c08a:	4964      	ldr	r1, [pc, #400]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c08c:	2002      	movs	r0, #2
 800c08e:	4798      	blx	r3
 800c090:	9a08      	ldr	r2, [sp, #32]
 800c092:	2300      	movs	r3, #0
 800c094:	7053      	strb	r3, [r2, #1]
 800c096:	e65e      	b.n	800bd56 <acc_cpd_communication_test+0x52>
 800c098:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800c09c:	eef8 8a67 	vcvt.f32.u32	s17, s15
 800c0a0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800c0a4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800c0a8:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800c0ac:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800c0b0:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800c0b4:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800c0b8:	ee07 aa10 	vmov	s14, sl
 800c0bc:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800c0c0:	ee28 9a88 	vmul.f32	s18, s17, s16
 800c0c4:	eef8 aa47 	vcvt.f32.u32	s21, s14
 800c0c8:	ee39 9a67 	vsub.f32	s18, s18, s15
 800c0cc:	f7fa ff34 	bl	8006f38 <acc_rss_integration_log_level>
 800c0d0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800c0d4:	2801      	cmp	r0, #1
 800c0d6:	eeb8 ba67 	vcvt.f32.u32	s22, s15
 800c0da:	d919      	bls.n	800c110 <acc_cpd_communication_test+0x40c>
 800c0dc:	ee68 8aaa 	vmul.f32	s17, s17, s21
 800c0e0:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800c0e4:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c0e8:	ee78 8aca 	vsub.f32	s17, s17, s20
 800c0ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c0f0:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800c0f4:	4b4a      	ldr	r3, [pc, #296]	; (800c220 <acc_cpd_communication_test+0x51c>)
 800c0f6:	4a4b      	ldr	r2, [pc, #300]	; (800c224 <acc_cpd_communication_test+0x520>)
 800c0f8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c0fa:	4948      	ldr	r1, [pc, #288]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c0fc:	2002      	movs	r0, #2
 800c0fe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800c102:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10a:	ee17 3a90 	vmov	r3, s15
 800c10e:	47a0      	blx	r4
 800c110:	f7fa ff12 	bl	8006f38 <acc_rss_integration_log_level>
 800c114:	2801      	cmp	r0, #1
 800c116:	f67f ae3c 	bls.w	800bd92 <acc_cpd_communication_test+0x8e>
 800c11a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800c11e:	ee69 9aaa 	vmul.f32	s19, s19, s21
 800c122:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c228 <acc_cpd_communication_test+0x524>
 800c126:	4b3e      	ldr	r3, [pc, #248]	; (800c220 <acc_cpd_communication_test+0x51c>)
 800c128:	4a40      	ldr	r2, [pc, #256]	; (800c22c <acc_cpd_communication_test+0x528>)
 800c12a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c12c:	493b      	ldr	r1, [pc, #236]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c12e:	ee38 8a69 	vsub.f32	s16, s16, s19
 800c132:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c136:	eec8 7a09 	vdiv.f32	s15, s16, s18
 800c13a:	2002      	movs	r0, #2
 800c13c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c140:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c148:	ee17 3a90 	vmov	r3, s15
 800c14c:	47a0      	blx	r4
 800c14e:	e620      	b.n	800bd92 <acc_cpd_communication_test+0x8e>
 800c150:	f7fa fef2 	bl	8006f38 <acc_rss_integration_log_level>
 800c154:	2801      	cmp	r0, #1
 800c156:	d905      	bls.n	800c164 <acc_cpd_communication_test+0x460>
 800c158:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800c15c:	4a34      	ldr	r2, [pc, #208]	; (800c230 <acc_cpd_communication_test+0x52c>)
 800c15e:	492f      	ldr	r1, [pc, #188]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c160:	2002      	movs	r0, #2
 800c162:	4798      	blx	r3
 800c164:	9b08      	ldr	r3, [sp, #32]
 800c166:	2400      	movs	r4, #0
 800c168:	70dc      	strb	r4, [r3, #3]
 800c16a:	f7fa fee5 	bl	8006f38 <acc_rss_integration_log_level>
 800c16e:	2801      	cmp	r0, #1
 800c170:	d908      	bls.n	800c184 <acc_cpd_communication_test+0x480>
 800c172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	4a2f      	ldr	r2, [pc, #188]	; (800c234 <acc_cpd_communication_test+0x530>)
 800c178:	4928      	ldr	r1, [pc, #160]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c17a:	4623      	mov	r3, r4
 800c17c:	2002      	movs	r0, #2
 800c17e:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800c182:	47a0      	blx	r4
 800c184:	f7fa fed8 	bl	8006f38 <acc_rss_integration_log_level>
 800c188:	2801      	cmp	r0, #1
 800c18a:	f67f ade4 	bls.w	800bd56 <acc_cpd_communication_test+0x52>
 800c18e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800c196:	4a27      	ldr	r2, [pc, #156]	; (800c234 <acc_cpd_communication_test+0x530>)
 800c198:	4920      	ldr	r1, [pc, #128]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c19a:	2301      	movs	r3, #1
 800c19c:	2002      	movs	r0, #2
 800c19e:	47a0      	blx	r4
 800c1a0:	e5d9      	b.n	800bd56 <acc_cpd_communication_test+0x52>
 800c1a2:	f7fa fec9 	bl	8006f38 <acc_rss_integration_log_level>
 800c1a6:	2801      	cmp	r0, #1
 800c1a8:	d905      	bls.n	800c1b6 <acc_cpd_communication_test+0x4b2>
 800c1aa:	4b1d      	ldr	r3, [pc, #116]	; (800c220 <acc_cpd_communication_test+0x51c>)
 800c1ac:	4a22      	ldr	r2, [pc, #136]	; (800c238 <acc_cpd_communication_test+0x534>)
 800c1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b0:	491a      	ldr	r1, [pc, #104]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c1b2:	2002      	movs	r0, #2
 800c1b4:	4798      	blx	r3
 800c1b6:	9a08      	ldr	r2, [sp, #32]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	7113      	strb	r3, [r2, #4]
 800c1bc:	e5e1      	b.n	800bd82 <acc_cpd_communication_test+0x7e>
 800c1be:	9a08      	ldr	r2, [sp, #32]
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	7093      	strb	r3, [r2, #2]
 800c1c4:	e5c7      	b.n	800bd56 <acc_cpd_communication_test+0x52>
 800c1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1c8:	2400      	movs	r4, #0
 800c1ca:	6818      	ldr	r0, [r3, #0]
 800c1cc:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
 800c1d0:	aa14      	add	r2, sp, #80	; 0x50
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	f7fe fbe0 	bl	800a998 <acc_sensor_reg_read>
 800c1d8:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800c1dc:	f241 1312 	movw	r3, #4370	; 0x1112
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d00a      	beq.n	800c1fa <acc_cpd_communication_test+0x4f6>
 800c1e4:	9200      	str	r2, [sp, #0]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4a14      	ldr	r2, [pc, #80]	; (800c23c <acc_cpd_communication_test+0x538>)
 800c1ea:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800c1ee:	490b      	ldr	r1, [pc, #44]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c1f0:	47a0      	blx	r4
 800c1f2:	9a08      	ldr	r2, [sp, #32]
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	7013      	strb	r3, [r2, #0]
 800c1f8:	e5aa      	b.n	800bd50 <acc_cpd_communication_test+0x4c>
 800c1fa:	f7fa fe9d 	bl	8006f38 <acc_rss_integration_log_level>
 800c1fe:	2801      	cmp	r0, #1
 800c200:	d905      	bls.n	800c20e <acc_cpd_communication_test+0x50a>
 800c202:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800c206:	4a0e      	ldr	r2, [pc, #56]	; (800c240 <acc_cpd_communication_test+0x53c>)
 800c208:	4904      	ldr	r1, [pc, #16]	; (800c21c <acc_cpd_communication_test+0x518>)
 800c20a:	2002      	movs	r0, #2
 800c20c:	4798      	blx	r3
 800c20e:	9a08      	ldr	r2, [sp, #32]
 800c210:	2300      	movs	r3, #0
 800c212:	7013      	strb	r3, [r2, #0]
 800c214:	e59c      	b.n	800bd50 <acc_cpd_communication_test+0x4c>
 800c216:	bf00      	nop
 800c218:	08017254 	.word	0x08017254
 800c21c:	08017190 	.word	0x08017190
 800c220:	20000640 	.word	0x20000640
 800c224:	08017370 	.word	0x08017370
 800c228:	447a0000 	.word	0x447a0000
 800c22c:	08017390 	.word	0x08017390
 800c230:	08017308 	.word	0x08017308
 800c234:	08017320 	.word	0x08017320
 800c238:	08017358 	.word	0x08017358
 800c23c:	080171a8 	.word	0x080171a8
 800c240:	08017174 	.word	0x08017174

0800c244 <acc_cpd_dll_calibration>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	ed2d 8b0a 	vpush	{d8-d12}
 800c24c:	b0c7      	sub	sp, #284	; 0x11c
 800c24e:	461d      	mov	r5, r3
 800c250:	930a      	str	r3, [sp, #40]	; 0x28
 800c252:	2400      	movs	r4, #0
 800c254:	4b63      	ldr	r3, [pc, #396]	; (800c3e4 <acc_cpd_dll_calibration+0x1a0>)
 800c256:	61eb      	str	r3, [r5, #28]
 800c258:	f5b1 7f45 	cmp.w	r1, #788	; 0x314
 800c25c:	ee0b 0a90 	vmov	s23, r0
 800c260:	4693      	mov	fp, r2
 800c262:	766c      	strb	r4, [r5, #25]
 800c264:	f0c0 846e 	bcc.w	800cb44 <acc_cpd_dll_calibration+0x900>
 800c268:	f5a1 7316 	sub.w	r3, r1, #600	; 0x258
 800c26c:	f023 0301 	bic.w	r3, r3, #1
 800c270:	f5a1 7145 	sub.w	r1, r1, #788	; 0x314
 800c274:	f021 0201 	bic.w	r2, r1, #1
 800c278:	18c3      	adds	r3, r0, r3
 800c27a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c27e:	ee0c 1a10 	vmov	s24, r1
 800c282:	9312      	str	r3, [sp, #72]	; 0x48
 800c284:	eb00 0a02 	add.w	sl, r0, r2
 800c288:	f0c0 8085 	bcc.w	800c396 <acc_cpd_dll_calibration+0x152>
 800c28c:	4856      	ldr	r0, [pc, #344]	; (800c3e8 <acc_cpd_dll_calibration+0x1a4>)
 800c28e:	ed9f 9a57 	vldr	s18, [pc, #348]	; 800c3ec <acc_cpd_dll_calibration+0x1a8>
 800c292:	eddf 8a57 	vldr	s17, [pc, #348]	; 800c3f0 <acc_cpd_dll_calibration+0x1ac>
 800c296:	f7fe fa67 	bl	800a768 <acc_diagnostic_log_set_scope>
 800c29a:	f8db 1000 	ldr.w	r1, [fp]
 800c29e:	4855      	ldr	r0, [pc, #340]	; (800c3f4 <acc_cpd_dll_calibration+0x1b0>)
 800c2a0:	f7fe fa8a 	bl	800a7b8 <acc_diagnostic_log_scalar>
 800c2a4:	4854      	ldr	r0, [pc, #336]	; (800c3f8 <acc_cpd_dll_calibration+0x1b4>)
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	f7fe fa65 	bl	800a778 <acc_diagnostic_log_declare_parameter>
 800c2ae:	4853      	ldr	r0, [pc, #332]	; (800c3fc <acc_cpd_dll_calibration+0x1b8>)
 800c2b0:	221f      	movs	r2, #31
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	f7fe fa60 	bl	800a778 <acc_diagnostic_log_declare_parameter>
 800c2b8:	4851      	ldr	r0, [pc, #324]	; (800c400 <acc_cpd_dll_calibration+0x1bc>)
 800c2ba:	227b      	movs	r2, #123	; 0x7b
 800c2bc:	2100      	movs	r1, #0
 800c2be:	f7fe fa5b 	bl	800a778 <acc_diagnostic_log_declare_parameter>
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	461c      	mov	r4, r3
 800c2c6:	484f      	ldr	r0, [pc, #316]	; (800c404 <acc_cpd_dll_calibration+0x1c0>)
 800c2c8:	9319      	str	r3, [sp, #100]	; 0x64
 800c2ca:	220b      	movs	r2, #11
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	f7fe fa53 	bl	800a778 <acc_diagnostic_log_declare_parameter>
 800c2d2:	46d1      	mov	r9, sl
 800c2d4:	940f      	str	r4, [sp, #60]	; 0x3c
 800c2d6:	46da      	mov	sl, fp
 800c2d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c2da:	4847      	ldr	r0, [pc, #284]	; (800c3f8 <acc_cpd_dll_calibration+0x1b4>)
 800c2dc:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 800c408 <acc_cpd_dll_calibration+0x1c4>
 800c2e0:	f7fe fa52 	bl	800a788 <acc_diagnostic_log_set_parameter>
 800c2e4:	ab20      	add	r3, sp, #128	; 0x80
 800c2e6:	464c      	mov	r4, r9
 800c2e8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c2ea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800c2ec:	ee1c ba10 	vmov	fp, s24
 800c2f0:	ee1b 9a90 	vmov	r9, s23
 800c2f4:	2500      	movs	r5, #0
 800c2f6:	4698      	mov	r8, r3
 800c2f8:	e023      	b.n	800c342 <acc_cpd_dll_calibration+0xfe>
 800c2fa:	f837 3b32 	ldrh.w	r3, [r7], #50
 800c2fe:	ee07 3a10 	vmov	s14, r3
 800c302:	4b42      	ldr	r3, [pc, #264]	; (800c40c <acc_cpd_dll_calibration+0x1c8>)
 800c304:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c308:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800c30c:	4b40      	ldr	r3, [pc, #256]	; (800c410 <acc_cpd_dll_calibration+0x1cc>)
 800c30e:	ee27 7a09 	vmul.f32	s14, s14, s18
 800c312:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800c316:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	b21b      	sxth	r3, r3
 800c31e:	ee07 3a90 	vmov	s15, r3
 800c322:	ee27 7a28 	vmul.f32	s14, s14, s17
 800c326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c32a:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c32e:	2d0c      	cmp	r5, #12
 800c330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c338:	ee17 3a90 	vmov	r3, s15
 800c33c:	f828 3b02 	strh.w	r3, [r8], #2
 800c340:	d035      	beq.n	800c3ae <acc_cpd_dll_calibration+0x16a>
 800c342:	4629      	mov	r1, r5
 800c344:	482f      	ldr	r0, [pc, #188]	; (800c404 <acc_cpd_dll_calibration+0x1c0>)
 800c346:	f7fe fa1f 	bl	800a788 <acc_diagnostic_log_set_parameter>
 800c34a:	e9da 1200 	ldrd	r1, r2, [sl]
 800c34e:	e9da 3002 	ldrd	r3, r0, [sl, #8]
 800c352:	9139      	str	r1, [sp, #228]	; 0xe4
 800c354:	e9cd 303b 	strd	r3, r0, [sp, #236]	; 0xec
 800c358:	f8da 1014 	ldr.w	r1, [sl, #20]
 800c35c:	f8da 0018 	ldr.w	r0, [sl, #24]
 800c360:	f8ba c010 	ldrh.w	ip, [sl, #16]
 800c364:	923a      	str	r2, [sp, #232]	; 0xe8
 800c366:	9140      	str	r1, [sp, #256]	; 0x100
 800c368:	9041      	str	r0, [sp, #260]	; 0x104
 800c36a:	463b      	mov	r3, r7
 800c36c:	aa39      	add	r2, sp, #228	; 0xe4
 800c36e:	4659      	mov	r1, fp
 800c370:	4648      	mov	r0, r9
 800c372:	e9cd 653e 	strd	r6, r5, [sp, #248]	; 0xf8
 800c376:	f8ad c0f4 	strh.w	ip, [sp, #244]	; 0xf4
 800c37a:	f002 fb39 	bl	800e9f0 <acc_cpd_rx_fine_dip_calibration>
 800c37e:	3501      	adds	r5, #1
 800c380:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c384:	2800      	cmp	r0, #0
 800c386:	d1b8      	bne.n	800c2fa <acc_cpd_dll_calibration+0xb6>
 800c388:	4604      	mov	r4, r0
 800c38a:	4620      	mov	r0, r4
 800c38c:	b047      	add	sp, #284	; 0x11c
 800c38e:	ecbd 8b0a 	vpop	{d8-d12}
 800c392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c396:	f7fa fdcf 	bl	8006f38 <acc_rss_integration_log_level>
 800c39a:	2801      	cmp	r0, #1
 800c39c:	f67f af76 	bls.w	800c28c <acc_cpd_dll_calibration+0x48>
 800c3a0:	4b1c      	ldr	r3, [pc, #112]	; (800c414 <acc_cpd_dll_calibration+0x1d0>)
 800c3a2:	4a1d      	ldr	r2, [pc, #116]	; (800c418 <acc_cpd_dll_calibration+0x1d4>)
 800c3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a6:	491d      	ldr	r1, [pc, #116]	; (800c41c <acc_cpd_dll_calibration+0x1d8>)
 800c3a8:	2002      	movs	r0, #2
 800c3aa:	4798      	blx	r3
 800c3ac:	e76e      	b.n	800c28c <acc_cpd_dll_calibration+0x48>
 800c3ae:	491c      	ldr	r1, [pc, #112]	; (800c420 <acc_cpd_dll_calibration+0x1dc>)
 800c3b0:	481c      	ldr	r0, [pc, #112]	; (800c424 <acc_cpd_dll_calibration+0x1e0>)
 800c3b2:	f7fe f9f1 	bl	800a798 <acc_diagnostic_log_array>
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	a820      	add	r0, sp, #128	; 0x80
 800c3ba:	f7fe fa05 	bl	800a7c8 <acc_diagnostic_log_data_u16>
 800c3be:	aa1d      	add	r2, sp, #116	; 0x74
 800c3c0:	a920      	add	r1, sp, #128	; 0x80
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f000 fd54 	bl	800ce70 <acc_dll_dly_coarse_priority_sort>
 800c3c8:	4915      	ldr	r1, [pc, #84]	; (800c420 <acc_cpd_dll_calibration+0x1dc>)
 800c3ca:	4817      	ldr	r0, [pc, #92]	; (800c428 <acc_cpd_dll_calibration+0x1e4>)
 800c3cc:	f7fe f9e4 	bl	800a798 <acc_diagnostic_log_array>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	a81d      	add	r0, sp, #116	; 0x74
 800c3d4:	f7fe fa08 	bl	800a7e8 <acc_diagnostic_log_data_u8>
 800c3d8:	ab1d      	add	r3, sp, #116	; 0x74
 800c3da:	930e      	str	r3, [sp, #56]	; 0x38
 800c3dc:	4653      	mov	r3, sl
 800c3de:	4699      	mov	r9, r3
 800c3e0:	46a2      	mov	sl, r4
 800c3e2:	e075      	b.n	800c4d0 <acc_cpd_dll_calibration+0x28c>
 800c3e4:	ff800000 	.word	0xff800000
 800c3e8:	08017480 	.word	0x08017480
 800c3ec:	37800000 	.word	0x37800000
 800c3f0:	3f99999a 	.word	0x3f99999a
 800c3f4:	08016258 	.word	0x08016258
 800c3f8:	08017490 	.word	0x08017490
 800c3fc:	0801749c 	.word	0x0801749c
 800c400:	080174a8 	.word	0x080174a8
 800c404:	080174b4 	.word	0x080174b4
 800c408:	447a0000 	.word	0x447a0000
 800c40c:	0801a9e4 	.word	0x0801a9e4
 800c410:	0801a9dc 	.word	0x0801a9dc
 800c414:	20000640 	.word	0x20000640
 800c418:	08017454 	.word	0x08017454
 800c41c:	08017440 	.word	0x08017440
 800c420:	080174c0 	.word	0x080174c0
 800c424:	080174d8 	.word	0x080174d8
 800c428:	080174ec 	.word	0x080174ec
 800c42c:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 800c430:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 800c434:	f200 82e5 	bhi.w	800ca02 <acc_cpd_dll_calibration+0x7be>
 800c438:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800c43c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c43e:	1a9b      	subs	r3, r3, r2
 800c440:	b21b      	sxth	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	bfb8      	it	lt
 800c446:	425b      	neglt	r3, r3
 800c448:	b21b      	sxth	r3, r3
 800c44a:	2b64      	cmp	r3, #100	; 0x64
 800c44c:	f300 82d9 	bgt.w	800ca02 <acc_cpd_dll_calibration+0x7be>
 800c450:	ee18 3a10 	vmov	r3, s16
 800c454:	4293      	cmp	r3, r2
 800c456:	f2c0 82d4 	blt.w	800ca02 <acc_cpd_dll_calibration+0x7be>
 800c45a:	49d5      	ldr	r1, [pc, #852]	; (800c7b0 <acc_cpd_dll_calibration+0x56c>)
 800c45c:	48d5      	ldr	r0, [pc, #852]	; (800c7b4 <acc_cpd_dll_calibration+0x570>)
 800c45e:	f7fe f99b 	bl	800a798 <acc_diagnostic_log_array>
 800c462:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c464:	4628      	mov	r0, r5
 800c466:	4621      	mov	r1, r4
 800c468:	f7fe f9ae 	bl	800a7c8 <acc_diagnostic_log_data_u16>
 800c46c:	4621      	mov	r1, r4
 800c46e:	4628      	mov	r0, r5
 800c470:	f000 fc64 	bl	800cd3c <acc_dll_check_direct_leakage>
 800c474:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c478:	4604      	mov	r4, r0
 800c47a:	4658      	mov	r0, fp
 800c47c:	f7fd fe8e 	bl	800a19c <acc_sensor_protocol_r2_stop>
 800c480:	2c00      	cmp	r4, #0
 800c482:	f040 83fd 	bne.w	800cc80 <acc_cpd_dll_calibration+0xa3c>
 800c486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c488:	2b01      	cmp	r3, #1
 800c48a:	f04f 0100 	mov.w	r1, #0
 800c48e:	f040 82df 	bne.w	800ca50 <acc_cpd_dll_calibration+0x80c>
 800c492:	f7fa fd51 	bl	8006f38 <acc_rss_integration_log_level>
 800c496:	2803      	cmp	r0, #3
 800c498:	d908      	bls.n	800c4ac <acc_cpd_dll_calibration+0x268>
 800c49a:	4bc7      	ldr	r3, [pc, #796]	; (800c7b8 <acc_cpd_dll_calibration+0x574>)
 800c49c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c49e:	9200      	str	r2, [sp, #0]
 800c4a0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c4a2:	4ac6      	ldr	r2, [pc, #792]	; (800c7bc <acc_cpd_dll_calibration+0x578>)
 800c4a4:	49c6      	ldr	r1, [pc, #792]	; (800c7c0 <acc_cpd_dll_calibration+0x57c>)
 800c4a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4a8:	2004      	movs	r0, #4
 800c4aa:	47a0      	blx	r4
 800c4ac:	f7fa fd44 	bl	8006f38 <acc_rss_integration_log_level>
 800c4b0:	2803      	cmp	r0, #3
 800c4b2:	d908      	bls.n	800c4c6 <acc_cpd_dll_calibration+0x282>
 800c4b4:	4bc0      	ldr	r3, [pc, #768]	; (800c7b8 <acc_cpd_dll_calibration+0x574>)
 800c4b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c4b8:	9200      	str	r2, [sp, #0]
 800c4ba:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c4bc:	4ac1      	ldr	r2, [pc, #772]	; (800c7c4 <acc_cpd_dll_calibration+0x580>)
 800c4be:	49c0      	ldr	r1, [pc, #768]	; (800c7c0 <acc_cpd_dll_calibration+0x57c>)
 800c4c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4c2:	2004      	movs	r0, #4
 800c4c4:	47a0      	blx	r4
 800c4c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4c8:	aa20      	add	r2, sp, #128	; 0x80
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	f000 8327 	beq.w	800cb1e <acc_cpd_dll_calibration+0x8da>
 800c4d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4d2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c4d4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c4d8:	9311      	str	r3, [sp, #68]	; 0x44
 800c4da:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800c4de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c4e2:	eb06 0544 	add.w	r5, r6, r4, lsl #1
 800c4e6:	920e      	str	r2, [sp, #56]	; 0x38
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	ab2c      	add	r3, sp, #176	; 0xb0
 800c4ec:	aa39      	add	r2, sp, #228	; 0xe4
 800c4ee:	2019      	movs	r0, #25
 800c4f0:	f000 fd82 	bl	800cff8 <acc_dll_plateau_finder>
 800c4f4:	9016      	str	r0, [sp, #88]	; 0x58
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d0d8      	beq.n	800c4ac <acc_cpd_dll_calibration+0x268>
 800c4fa:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 800c4fe:	49b2      	ldr	r1, [pc, #712]	; (800c7c8 <acc_cpd_dll_calibration+0x584>)
 800c500:	eddf 6abe 	vldr	s13, [pc, #760]	; 800c7fc <acc_cpd_dll_calibration+0x5b8>
 800c504:	ee07 3a10 	vmov	s14, r3
 800c508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c50a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c50e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c512:	49ae      	ldr	r1, [pc, #696]	; (800c7cc <acc_cpd_dll_calibration+0x588>)
 800c514:	ee27 7a09 	vmul.f32	s14, s14, s18
 800c518:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c51c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c526:	b21b      	sxth	r3, r3
 800c528:	ee07 3a90 	vmov	s15, r3
 800c52c:	ee27 7a28 	vmul.f32	s14, s14, s17
 800c530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c534:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c53c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c540:	ee17 3a90 	vmov	r3, s15
 800c544:	b21a      	sxth	r2, r3
 800c546:	f5a2 7343 	sub.w	r3, r2, #780	; 0x30c
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800c550:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800c554:	f200 82d7 	bhi.w	800cb06 <acc_cpd_dll_calibration+0x8c2>
 800c558:	f8bd 40e4 	ldrh.w	r4, [sp, #228]	; 0xe4
 800c55c:	4b9c      	ldr	r3, [pc, #624]	; (800c7d0 <acc_cpd_dll_calibration+0x58c>)
 800c55e:	a946      	add	r1, sp, #280	; 0x118
 800c560:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800c564:	ee07 2a90 	vmov	s15, r2
 800c568:	f831 6c68 	ldrh.w	r6, [r1, #-104]
 800c56c:	9613      	str	r6, [sp, #76]	; 0x4c
 800c56e:	4632      	mov	r2, r6
 800c570:	fba3 2302 	umull	r2, r3, r3, r2
 800c574:	f3c3 0387 	ubfx	r3, r3, #2, #8
 800c578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c57c:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800c580:	ee07 3a90 	vmov	s15, r3
 800c584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c588:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c58c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c590:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c594:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c59c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5a0:	ee17 3a90 	vmov	r3, s15
 800c5a4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800c5a8:	f7fa fcc6 	bl	8006f38 <acc_rss_integration_log_level>
 800c5ac:	2803      	cmp	r0, #3
 800c5ae:	d907      	bls.n	800c5c0 <acc_cpd_dll_calibration+0x37c>
 800c5b0:	4a81      	ldr	r2, [pc, #516]	; (800c7b8 <acc_cpd_dll_calibration+0x574>)
 800c5b2:	9600      	str	r6, [sp, #0]
 800c5b4:	4623      	mov	r3, r4
 800c5b6:	4982      	ldr	r1, [pc, #520]	; (800c7c0 <acc_cpd_dll_calibration+0x57c>)
 800c5b8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c5ba:	4a86      	ldr	r2, [pc, #536]	; (800c7d4 <acc_cpd_dll_calibration+0x590>)
 800c5bc:	2004      	movs	r0, #4
 800c5be:	47a0      	blx	r4
 800c5c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c5c2:	4885      	ldr	r0, [pc, #532]	; (800c7d8 <acc_cpd_dll_calibration+0x594>)
 800c5c4:	f7fe f8e0 	bl	800a788 <acc_diagnostic_log_set_parameter>
 800c5c8:	4984      	ldr	r1, [pc, #528]	; (800c7dc <acc_cpd_dll_calibration+0x598>)
 800c5ca:	4885      	ldr	r0, [pc, #532]	; (800c7e0 <acc_cpd_dll_calibration+0x59c>)
 800c5cc:	f7fe f8e4 	bl	800a798 <acc_diagnostic_log_array>
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	f10d 006a 	add.w	r0, sp, #106	; 0x6a
 800c5d6:	f7fe f8ff 	bl	800a7d8 <acc_diagnostic_log_data_i16>
 800c5da:	4980      	ldr	r1, [pc, #512]	; (800c7dc <acc_cpd_dll_calibration+0x598>)
 800c5dc:	4881      	ldr	r0, [pc, #516]	; (800c7e4 <acc_cpd_dll_calibration+0x5a0>)
 800c5de:	f7fe f8db 	bl	800a798 <acc_diagnostic_log_array>
 800c5e2:	2101      	movs	r1, #1
 800c5e4:	a81a      	add	r0, sp, #104	; 0x68
 800c5e6:	f7fe f8f7 	bl	800a7d8 <acc_diagnostic_log_data_i16>
 800c5ea:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800c5ee:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	2bc8      	cmp	r3, #200	; 0xc8
 800c5f6:	f200 8323 	bhi.w	800cc40 <acc_cpd_dll_calibration+0x9fc>
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	9315      	str	r3, [sp, #84]	; 0x54
 800c5fe:	211b      	movs	r1, #27
 800c600:	b28b      	uxth	r3, r1
 800c602:	461c      	mov	r4, r3
 800c604:	4878      	ldr	r0, [pc, #480]	; (800c7e8 <acc_cpd_dll_calibration+0x5a4>)
 800c606:	9318      	str	r3, [sp, #96]	; 0x60
 800c608:	f7fe f8be 	bl	800a788 <acc_diagnostic_log_set_parameter>
 800c60c:	4620      	mov	r0, r4
 800c60e:	aa26      	add	r2, sp, #152	; 0x98
 800c610:	217c      	movs	r1, #124	; 0x7c
 800c612:	f7fe fac7 	bl	800aba4 <acc_dll_calculate_area_settings>
 800c616:	f899 301c 	ldrb.w	r3, [r9, #28]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 826e 	beq.w	800cafc <acc_cpd_dll_calibration+0x8b8>
 800c620:	f899 301d 	ldrb.w	r3, [r9, #29]
 800c624:	f083 0301 	eor.w	r3, r3, #1
 800c628:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 800c62c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800c630:	f8bd b0ac 	ldrh.w	fp, [sp, #172]	; 0xac
 800c634:	f8bd c098 	ldrh.w	ip, [sp, #152]	; 0x98
 800c638:	f8bd 709a 	ldrh.w	r7, [sp, #154]	; 0x9a
 800c63c:	f8bd 609e 	ldrh.w	r6, [sp, #158]	; 0x9e
 800c640:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 800c644:	e9d9 4001 	ldrd	r4, r0, [r9, #4]
 800c648:	e9d9 8e05 	ldrd	r8, lr, [r9, #20]
 800c64c:	f8aa 200c 	strh.w	r2, [sl, #12]
 800c650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c652:	f8ca 2018 	str.w	r2, [sl, #24]
 800c656:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c658:	f8ca 1008 	str.w	r1, [sl, #8]
 800c65c:	f8ca 201c 	str.w	r2, [sl, #28]
 800c660:	f8bd 10aa 	ldrh.w	r1, [sp, #170]	; 0xaa
 800c664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c666:	f8ca 4000 	str.w	r4, [sl]
 800c66a:	e9ca 8e04 	strd	r8, lr, [sl, #16]
 800c66e:	f8bd 40a4 	ldrh.w	r4, [sp, #164]	; 0xa4
 800c672:	f8ca 0004 	str.w	r0, [sl, #4]
 800c676:	f04f 0e01 	mov.w	lr, #1
 800c67a:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
 800c67e:	f8ca 2020 	str.w	r2, [sl, #32]
 800c682:	2200      	movs	r2, #0
 800c684:	f8ca c028 	str.w	ip, [sl, #40]	; 0x28
 800c688:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
 800c68c:	f04f 0c06 	mov.w	ip, #6
 800c690:	2703      	movs	r7, #3
 800c692:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
 800c696:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 800c69a:	f06f 0601 	mvn.w	r6, #1
 800c69e:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 800c6a2:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 800c6a6:	240f      	movs	r4, #15
 800c6a8:	e9ca 1b10 	strd	r1, fp, [sl, #64]	; 0x40
 800c6ac:	2007      	movs	r0, #7
 800c6ae:	e9ca 2e12 	strd	r2, lr, [sl, #72]	; 0x48
 800c6b2:	e9ca e216 	strd	lr, r2, [sl, #88]	; 0x58
 800c6b6:	e9ca 2214 	strd	r2, r2, [sl, #80]	; 0x50
 800c6ba:	e9ca 2218 	strd	r2, r2, [sl, #96]	; 0x60
 800c6be:	e9ca 2227 	strd	r2, r2, [sl, #156]	; 0x9c
 800c6c2:	f8ca 2068 	str.w	r2, [sl, #104]	; 0x68
 800c6c6:	f8ca 2078 	str.w	r2, [sl, #120]	; 0x78
 800c6ca:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 800c6ce:	f8aa 208c 	strh.w	r2, [sl, #140]	; 0x8c
 800c6d2:	2516      	movs	r5, #22
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	e9ca c724 	strd	ip, r7, [sl, #144]	; 0x90
 800c6da:	e9ca ee1c 	strd	lr, lr, [sl, #112]	; 0x70
 800c6de:	e9ca 541f 	strd	r5, r4, [sl, #124]	; 0x7c
 800c6e2:	f8ca e0a4 	str.w	lr, [sl, #164]	; 0xa4
 800c6e6:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 800c6ea:	f88a e0ad 	strb.w	lr, [sl, #173]	; 0xad
 800c6ee:	f8ca 306c 	str.w	r3, [sl, #108]	; 0x6c
 800c6f2:	f8ca 6098 	str.w	r6, [sl, #152]	; 0x98
 800c6f6:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 800c6fa:	f7fa fb65 	bl	8006dc8 <acc_rss_integration_get_sensor_reference_frequency>
 800c6fe:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800c702:	f899 201c 	ldrb.w	r2, [r9, #28]
 800c706:	ed8a 0a2c 	vstr	s0, [sl, #176]	; 0xb0
 800c70a:	3b01      	subs	r3, #1
 800c70c:	e9ca 232d 	strd	r2, r3, [sl, #180]	; 0xb4
 800c710:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800c714:	9310      	str	r3, [sp, #64]	; 0x40
 800c716:	f04f 0100 	mov.w	r1, #0
 800c71a:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800c71e:	f88a 10ac 	strb.w	r1, [sl, #172]	; 0xac
 800c722:	9314      	str	r3, [sp, #80]	; 0x50
 800c724:	a926      	add	r1, sp, #152	; 0x98
 800c726:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 800c72a:	9309      	str	r3, [sp, #36]	; 0x24
 800c72c:	4650      	mov	r0, sl
 800c72e:	f8d9 b000 	ldr.w	fp, [r9]
 800c732:	f8da 4094 	ldr.w	r4, [sl, #148]	; 0x94
 800c736:	f8da 60a4 	ldr.w	r6, [sl, #164]	; 0xa4
 800c73a:	f8da 7080 	ldr.w	r7, [sl, #128]	; 0x80
 800c73e:	f001 fdb7 	bl	800e2b0 <acc_cpd_linear_sweep_get_info>
 800c742:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c744:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c746:	429a      	cmp	r2, r3
 800c748:	f000 81f5 	beq.w	800cb36 <acc_cpd_dll_calibration+0x8f2>
 800c74c:	f899 301c 	ldrb.w	r3, [r9, #28]
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 81d5 	beq.w	800cb00 <acc_cpd_dll_calibration+0x8bc>
 800c756:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800c75a:	ee0c 3a90 	vmov	s25, r3
 800c75e:	ee1c 2a10 	vmov	r2, s24
 800c762:	ee1b 1a90 	vmov	r1, s23
 800c766:	4653      	mov	r3, sl
 800c768:	4658      	mov	r0, fp
 800c76a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800c76c:	f001 f8c0 	bl	800d8f0 <acc_cpd_linear_sweep_load_program>
 800c770:	2800      	cmp	r0, #0
 800c772:	f000 81b3 	beq.w	800cadc <acc_cpd_dll_calibration+0x898>
 800c776:	f899 301c 	ldrb.w	r3, [r9, #28]
 800c77a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c77c:	b113      	cbz	r3, 800c784 <acc_cpd_dll_calibration+0x540>
 800c77e:	f899 301d 	ldrb.w	r3, [r9, #29]
 800c782:	930b      	str	r3, [sp, #44]	; 0x2c
 800c784:	ee07 6a90 	vmov	s15, r6
 800c788:	eddf 6a18 	vldr	s13, [pc, #96]	; 800c7ec <acc_cpd_dll_calibration+0x5a8>
 800c78c:	ed9f ba18 	vldr	s22, [pc, #96]	; 800c7f0 <acc_cpd_dll_calibration+0x5ac>
 800c790:	eddf aa18 	vldr	s21, [pc, #96]	; 800c7f4 <acc_cpd_dll_calibration+0x5b0>
 800c794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c798:	3401      	adds	r4, #1
 800c79a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c79e:	b2a4      	uxth	r4, r4
 800c7a0:	ee1c 2a90 	vmov	r2, s25
 800c7a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7a8:	ee17 3a90 	vmov	r3, s15
 800c7ac:	e028      	b.n	800c800 <acc_cpd_dll_calibration+0x5bc>
 800c7ae:	bf00      	nop
 800c7b0:	080177e8 	.word	0x080177e8
 800c7b4:	08017818 	.word	0x08017818
 800c7b8:	20000640 	.word	0x20000640
 800c7bc:	08017748 	.word	0x08017748
 800c7c0:	08017440 	.word	0x08017440
 800c7c4:	080177ac 	.word	0x080177ac
 800c7c8:	0801a9e4 	.word	0x0801a9e4
 800c7cc:	0801a9dc 	.word	0x0801a9dc
 800c7d0:	cccccccd 	.word	0xcccccccd
 800c7d4:	0801752c 	.word	0x0801752c
 800c7d8:	080174a8 	.word	0x080174a8
 800c7dc:	08017544 	.word	0x08017544
 800c7e0:	08017568 	.word	0x08017568
 800c7e4:	08017570 	.word	0x08017570
 800c7e8:	0801749c 	.word	0x0801749c
 800c7ec:	42f80000 	.word	0x42f80000
 800c7f0:	42640000 	.word	0x42640000
 800c7f4:	42172c98 	.word	0x42172c98
 800c7f8:	402ca8ad 	.word	0x402ca8ad
 800c7fc:	447a0000 	.word	0x447a0000
 800c800:	b29b      	uxth	r3, r3
 800c802:	fb04 f303 	mul.w	r3, r4, r3
 800c806:	441d      	add	r5, r3
 800c808:	18aa      	adds	r2, r5, r2
 800c80a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c80c:	920c      	str	r2, [sp, #48]	; 0x30
 800c80e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800c812:	4658      	mov	r0, fp
 800c814:	f001 fd08 	bl	800e228 <acc_cpd_linear_sweep_run_program>
 800c818:	2800      	cmp	r0, #0
 800c81a:	f000 815f 	beq.w	800cadc <acc_cpd_dll_calibration+0x898>
 800c81e:	ed1f aa0a 	vldr	s20, [pc, #-40]	; 800c7f8 <acc_cpd_dll_calibration+0x5b4>
 800c822:	ed5f 9a0a 	vldr	s19, [pc, #-40]	; 800c7fc <acc_cpd_dll_calibration+0x5b8>
 800c826:	2600      	movs	r6, #0
 800c828:	ab1c      	add	r3, sp, #112	; 0x70
 800c82a:	2264      	movs	r2, #100	; 0x64
 800c82c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c830:	4658      	mov	r0, fp
 800c832:	f7fd fc1b 	bl	800a06c <acc_sensor_protocol_r2_wait_for_event>
 800c836:	2800      	cmp	r0, #0
 800c838:	f000 8150 	beq.w	800cadc <acc_cpd_dll_calibration+0x898>
 800c83c:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800c840:	2b06      	cmp	r3, #6
 800c842:	f040 814b 	bne.w	800cadc <acc_cpd_dll_calibration+0x898>
 800c846:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800c84a:	ee1c 0a10 	vmov	r0, s24
 800c84e:	f7fc ffa5 	bl	800979c <acc_sensor_r2_buffer_processed_verify_size>
 800c852:	2800      	cmp	r0, #0
 800c854:	f000 8138 	beq.w	800cac8 <acc_cpd_dll_calibration+0x884>
 800c858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c85a:	ee1b 1a90 	vmov	r1, s23
 800c85e:	4658      	mov	r0, fp
 800c860:	f7fd fd4e 	bl	800a300 <acc_sensor_protocol_r2_transfer_data>
 800c864:	4604      	mov	r4, r0
 800c866:	2800      	cmp	r0, #0
 800c868:	f000 8138 	beq.w	800cadc <acc_cpd_dll_calibration+0x898>
 800c86c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800c86e:	f899 301c 	ldrb.w	r3, [r9, #28]
 800c872:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800c876:	b1fb      	cbz	r3, 800c8b8 <acc_cpd_dll_calibration+0x674>
 800c878:	ee1c 3a90 	vmov	r3, s25
 800c87c:	eb05 0208 	add.w	r2, r5, r8
 800c880:	4659      	mov	r1, fp
 800c882:	2001      	movs	r0, #1
 800c884:	920d      	str	r2, [sp, #52]	; 0x34
 800c886:	f7fa fb5d 	bl	8006f44 <acc_probes_execute_uint16>
 800c88a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c88c:	ee1c 1a90 	vmov	r1, s25
 800c890:	4610      	mov	r0, r2
 800c892:	f7fd ff3d 	bl	800a710 <acc_alg_cca_calculate>
 800c896:	eeb4 0acb 	vcmpe.f32	s0, s22
 800c89a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a0:	bfcc      	ite	gt
 800c8a2:	2301      	movgt	r3, #1
 800c8a4:	2300      	movle	r3, #0
 800c8a6:	ed82 0a07 	vstr	s0, [r2, #28]
 800c8aa:	7653      	strb	r3, [r2, #25]
 800c8ac:	f300 822b 	bgt.w	800cd06 <acc_cpd_dll_calibration+0xac2>
 800c8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f040 80f1 	bne.w	800ca9a <acc_cpd_dll_calibration+0x856>
 800c8b8:	eeb0 0a6a 	vmov.f32	s0, s21
 800c8bc:	4641      	mov	r1, r8
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f003 f990 	bl	800fbe4 <acc_alg_basic_saturation_check_u16>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f040 80c6 	bne.w	800ca56 <acc_cpd_dll_calibration+0x812>
 800c8ca:	2f00      	cmp	r7, #0
 800c8cc:	f040 8146 	bne.w	800cb5c <acc_cpd_dll_calibration+0x918>
 800c8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f040 819c 	bne.w	800cc10 <acc_cpd_dll_calibration+0x9cc>
 800c8d8:	f7fa fb2e 	bl	8006f38 <acc_rss_integration_log_level>
 800c8dc:	2803      	cmp	r0, #3
 800c8de:	d905      	bls.n	800c8ec <acc_cpd_dll_calibration+0x6a8>
 800c8e0:	4bb7      	ldr	r3, [pc, #732]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800c8e2:	4ab8      	ldr	r2, [pc, #736]	; (800cbc4 <acc_cpd_dll_calibration+0x980>)
 800c8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e6:	49b8      	ldr	r1, [pc, #736]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800c8e8:	2004      	movs	r0, #4
 800c8ea:	4798      	blx	r3
 800c8ec:	eeb0 0a4a 	vmov.f32	s0, s20
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f003 f976 	bl	800fbe4 <acc_alg_basic_saturation_check_u16>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	f040 8196 	bne.w	800cc2a <acc_cpd_dll_calibration+0x9e6>
 800c8fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c900:	f8da 2020 	ldr.w	r2, [sl, #32]
 800c904:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800c908:	49b0      	ldr	r1, [pc, #704]	; (800cbcc <acc_cpd_dll_calibration+0x988>)
 800c90a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800c90c:	ee06 3a90 	vmov	s13, r3
 800c910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c912:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 800c916:	615f      	str	r7, [r3, #20]
 800c918:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c91c:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800c920:	49ab      	ldr	r1, [pc, #684]	; (800cbd0 <acc_cpd_dll_calibration+0x98c>)
 800c922:	ee66 6a89 	vmul.f32	s13, s13, s18
 800c926:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800c92a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c92e:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800c932:	1a5b      	subs	r3, r3, r1
 800c934:	b21b      	sxth	r3, r3
 800c936:	ee07 0a90 	vmov	s15, r0
 800c93a:	ee08 3a10 	vmov	s16, r3
 800c93e:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	; 0x24
 800c942:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800c946:	eeb8 6ac8 	vcvt.f32.s32	s12, s16
 800c94a:	ee66 6aa9 	vmul.f32	s13, s13, s19
 800c94e:	7610      	strb	r0, [r2, #24]
 800c950:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c952:	49a0      	ldr	r1, [pc, #640]	; (800cbd4 <acc_cpd_dll_calibration+0x990>)
 800c954:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800c958:	489f      	ldr	r0, [pc, #636]	; (800cbd8 <acc_cpd_dll_calibration+0x994>)
 800c95a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c962:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c966:	ee07 3a10 	vmov	s14, r3
 800c96a:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c96e:	ee16 3a90 	vmov	r3, s13
 800c972:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c976:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c97a:	b21b      	sxth	r3, r3
 800c97c:	ee06 3a90 	vmov	s13, r3
 800c980:	ee27 7a09 	vmul.f32	s14, s14, s18
 800c984:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c988:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c98c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c990:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c994:	ee27 7a28 	vmul.f32	s14, s14, s17
 800c998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99c:	ee27 7a29 	vmul.f32	s14, s14, s19
 800c9a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9a4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c9a8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800c9ac:	ee17 3a90 	vmov	r3, s15
 800c9b0:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800c9b4:	ee17 3a10 	vmov	r3, s14
 800c9b8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 800c9bc:	f7fd feec 	bl	800a798 <acc_diagnostic_log_array>
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	a81b      	add	r0, sp, #108	; 0x6c
 800c9c4:	f7fd ff08 	bl	800a7d8 <acc_diagnostic_log_data_i16>
 800c9c8:	4982      	ldr	r1, [pc, #520]	; (800cbd4 <acc_cpd_dll_calibration+0x990>)
 800c9ca:	4883      	ldr	r0, [pc, #524]	; (800cbd8 <acc_cpd_dll_calibration+0x994>)
 800c9cc:	f7fd fee4 	bl	800a798 <acc_diagnostic_log_array>
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 800c9d6:	f7fd feff 	bl	800a7d8 <acc_diagnostic_log_data_i16>
 800c9da:	497e      	ldr	r1, [pc, #504]	; (800cbd4 <acc_cpd_dll_calibration+0x990>)
 800c9dc:	487f      	ldr	r0, [pc, #508]	; (800cbdc <acc_cpd_dll_calibration+0x998>)
 800c9de:	f7fd fedb 	bl	800a798 <acc_diagnostic_log_array>
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	a81c      	add	r0, sp, #112	; 0x70
 800c9e6:	f7fd fef7 	bl	800a7d8 <acc_diagnostic_log_data_i16>
 800c9ea:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800c9ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9f0:	1a9b      	subs	r3, r3, r2
 800c9f2:	b21b      	sxth	r3, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	bfb8      	it	lt
 800c9f8:	425b      	neglt	r3, r3
 800c9fa:	b21b      	sxth	r3, r3
 800c9fc:	2b64      	cmp	r3, #100	; 0x64
 800c9fe:	f77f ad15 	ble.w	800c42c <acc_cpd_dll_calibration+0x1e8>
 800ca02:	2e02      	cmp	r6, #2
 800ca04:	d00f      	beq.n	800ca26 <acc_cpd_dll_calibration+0x7e2>
 800ca06:	f7fa fa97 	bl	8006f38 <acc_rss_integration_log_level>
 800ca0a:	2803      	cmp	r0, #3
 800ca0c:	d906      	bls.n	800ca1c <acc_cpd_dll_calibration+0x7d8>
 800ca0e:	4b6c      	ldr	r3, [pc, #432]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800ca10:	4a73      	ldr	r2, [pc, #460]	; (800cbe0 <acc_cpd_dll_calibration+0x99c>)
 800ca12:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800ca14:	496c      	ldr	r1, [pc, #432]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800ca16:	4633      	mov	r3, r6
 800ca18:	2004      	movs	r0, #4
 800ca1a:	47a0      	blx	r4
 800ca1c:	4658      	mov	r0, fp
 800ca1e:	3601      	adds	r6, #1
 800ca20:	f7fd fa96 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800ca24:	e700      	b.n	800c828 <acc_cpd_dll_calibration+0x5e4>
 800ca26:	f7fa fa87 	bl	8006f38 <acc_rss_integration_log_level>
 800ca2a:	2803      	cmp	r0, #3
 800ca2c:	d92f      	bls.n	800ca8e <acc_cpd_dll_calibration+0x84a>
 800ca2e:	4b64      	ldr	r3, [pc, #400]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800ca30:	4a6c      	ldr	r2, [pc, #432]	; (800cbe4 <acc_cpd_dll_calibration+0x9a0>)
 800ca32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca34:	4964      	ldr	r1, [pc, #400]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800ca36:	2004      	movs	r0, #4
 800ca38:	4798      	blx	r3
 800ca3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ca3e:	4658      	mov	r0, fp
 800ca40:	f7fd fbac 	bl	800a19c <acc_sensor_protocol_r2_stop>
 800ca44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	f04f 0100 	mov.w	r1, #0
 800ca4c:	f43f ad21 	beq.w	800c492 <acc_cpd_dll_calibration+0x24e>
 800ca50:	2301      	movs	r3, #1
 800ca52:	9315      	str	r3, [sp, #84]	; 0x54
 800ca54:	e5d4      	b.n	800c600 <acc_cpd_dll_calibration+0x3bc>
 800ca56:	eeb0 0a4a 	vmov.f32	s0, s20
 800ca5a:	4641      	mov	r1, r8
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f003 f8c1 	bl	800fbe4 <acc_alg_basic_saturation_check_u16>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	f43f af4b 	beq.w	800c8fe <acc_cpd_dll_calibration+0x6ba>
 800ca68:	2f0f      	cmp	r7, #15
 800ca6a:	f040 80de 	bne.w	800cc2a <acc_cpd_dll_calibration+0x9e6>
 800ca6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 80f1 	beq.w	800cc58 <acc_cpd_dll_calibration+0xa14>
 800ca76:	f7fa fa5f 	bl	8006f38 <acc_rss_integration_log_level>
 800ca7a:	2803      	cmp	r0, #3
 800ca7c:	f67f af3f 	bls.w	800c8fe <acc_cpd_dll_calibration+0x6ba>
 800ca80:	4b4f      	ldr	r3, [pc, #316]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800ca82:	4a59      	ldr	r2, [pc, #356]	; (800cbe8 <acc_cpd_dll_calibration+0x9a4>)
 800ca84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca86:	4950      	ldr	r1, [pc, #320]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800ca88:	2004      	movs	r0, #4
 800ca8a:	4798      	blx	r3
 800ca8c:	e737      	b.n	800c8fe <acc_cpd_dll_calibration+0x6ba>
 800ca8e:	4658      	mov	r0, fp
 800ca90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ca94:	f7fd fb82 	bl	800a19c <acc_sensor_protocol_r2_stop>
 800ca98:	e4f5      	b.n	800c486 <acc_cpd_dll_calibration+0x242>
 800ca9a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ca9e:	4658      	mov	r0, fp
 800caa0:	f7fd fb7c 	bl	800a19c <acc_sensor_protocol_r2_stop>
 800caa4:	4658      	mov	r0, fp
 800caa6:	f7fd fa41 	bl	8009f2c <acc_sensor_protocol_r2_is_sensor_running>
 800caaa:	900b      	str	r0, [sp, #44]	; 0x2c
 800caac:	b9e8      	cbnz	r0, 800caea <acc_cpd_dll_calibration+0x8a6>
 800caae:	4b4f      	ldr	r3, [pc, #316]	; (800cbec <acc_cpd_dll_calibration+0x9a8>)
 800cab0:	9302      	str	r3, [sp, #8]
 800cab2:	2201      	movs	r2, #1
 800cab4:	2372      	movs	r3, #114	; 0x72
 800cab6:	e9cd 3200 	strd	r3, r2, [sp]
 800caba:	494d      	ldr	r1, [pc, #308]	; (800cbf0 <acc_cpd_dll_calibration+0x9ac>)
 800cabc:	4b4d      	ldr	r3, [pc, #308]	; (800cbf4 <acc_cpd_dll_calibration+0x9b0>)
 800cabe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cac0:	4658      	mov	r0, fp
 800cac2:	f003 fdc3 	bl	801064c <acc_confprogram_live_patch>
 800cac6:	e6a4      	b.n	800c812 <acc_cpd_dll_calibration+0x5ce>
 800cac8:	4b3d      	ldr	r3, [pc, #244]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800caca:	493f      	ldr	r1, [pc, #252]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800cacc:	4a4a      	ldr	r2, [pc, #296]	; (800cbf8 <acc_cpd_dll_calibration+0x9b4>)
 800cace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad0:	4798      	blx	r3
 800cad2:	4658      	mov	r0, fp
 800cad4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cad8:	f7fd fb60 	bl	800a19c <acc_sensor_protocol_r2_stop>
 800cadc:	2400      	movs	r4, #0
 800cade:	4620      	mov	r0, r4
 800cae0:	b047      	add	sp, #284	; 0x11c
 800cae2:	ecbd 8b0a 	vpop	{d8-d12}
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	4b35      	ldr	r3, [pc, #212]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800caec:	4a43      	ldr	r2, [pc, #268]	; (800cbfc <acc_cpd_dll_calibration+0x9b8>)
 800caee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800caf0:	4935      	ldr	r1, [pc, #212]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800caf2:	46d9      	mov	r9, fp
 800caf4:	464b      	mov	r3, r9
 800caf6:	2000      	movs	r0, #0
 800caf8:	47a0      	blx	r4
 800cafa:	e7ef      	b.n	800cadc <acc_cpd_dll_calibration+0x898>
 800cafc:	2301      	movs	r3, #1
 800cafe:	e593      	b.n	800c628 <acc_cpd_dll_calibration+0x3e4>
 800cb00:	ee0c 3a90 	vmov	s25, r3
 800cb04:	e62b      	b.n	800c75e <acc_cpd_dll_calibration+0x51a>
 800cb06:	f7fa fa17 	bl	8006f38 <acc_rss_integration_log_level>
 800cb0a:	2803      	cmp	r0, #3
 800cb0c:	f67f acce 	bls.w	800c4ac <acc_cpd_dll_calibration+0x268>
 800cb10:	4b2b      	ldr	r3, [pc, #172]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800cb12:	4a3b      	ldr	r2, [pc, #236]	; (800cc00 <acc_cpd_dll_calibration+0x9bc>)
 800cb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb16:	492c      	ldr	r1, [pc, #176]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800cb18:	2004      	movs	r0, #4
 800cb1a:	4798      	blx	r3
 800cb1c:	e4c6      	b.n	800c4ac <acc_cpd_dll_calibration+0x268>
 800cb1e:	464b      	mov	r3, r9
 800cb20:	46d1      	mov	r9, sl
 800cb22:	469a      	mov	sl, r3
 800cb24:	2301      	movs	r3, #1
 800cb26:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d0d6      	beq.n	800cadc <acc_cpd_dll_calibration+0x898>
 800cb2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb30:	9319      	str	r3, [sp, #100]	; 0x64
 800cb32:	f7ff bbd1 	b.w	800c2d8 <acc_cpd_dll_calibration+0x94>
 800cb36:	4b22      	ldr	r3, [pc, #136]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800cb38:	4a32      	ldr	r2, [pc, #200]	; (800cc04 <acc_cpd_dll_calibration+0x9c0>)
 800cb3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3c:	4922      	ldr	r1, [pc, #136]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800cb3e:	2000      	movs	r0, #0
 800cb40:	4798      	blx	r3
 800cb42:	e7cb      	b.n	800cadc <acc_cpd_dll_calibration+0x898>
 800cb44:	4b1e      	ldr	r3, [pc, #120]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800cb46:	4a30      	ldr	r2, [pc, #192]	; (800cc08 <acc_cpd_dll_calibration+0x9c4>)
 800cb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4a:	491f      	ldr	r1, [pc, #124]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	4798      	blx	r3
 800cb50:	4620      	mov	r0, r4
 800cb52:	b047      	add	sp, #284	; 0x11c
 800cb54:	ecbd 8b0a 	vpop	{d8-d12}
 800cb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb5c:	2f08      	cmp	r7, #8
 800cb5e:	bf38      	it	cc
 800cb60:	2708      	movcc	r7, #8
 800cb62:	f7fa f9e9 	bl	8006f38 <acc_rss_integration_log_level>
 800cb66:	2803      	cmp	r0, #3
 800cb68:	f1a7 0708 	sub.w	r7, r7, #8
 800cb6c:	d906      	bls.n	800cb7c <acc_cpd_dll_calibration+0x938>
 800cb6e:	4b14      	ldr	r3, [pc, #80]	; (800cbc0 <acc_cpd_dll_calibration+0x97c>)
 800cb70:	4a26      	ldr	r2, [pc, #152]	; (800cc0c <acc_cpd_dll_calibration+0x9c8>)
 800cb72:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800cb74:	4914      	ldr	r1, [pc, #80]	; (800cbc8 <acc_cpd_dll_calibration+0x984>)
 800cb76:	463b      	mov	r3, r7
 800cb78:	2004      	movs	r0, #4
 800cb7a:	47a0      	blx	r4
 800cb7c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cb80:	4658      	mov	r0, fp
 800cb82:	f7fd fb0b 	bl	800a19c <acc_sensor_protocol_r2_stop>
 800cb86:	4658      	mov	r0, fp
 800cb88:	f7fd f9d0 	bl	8009f2c <acc_sensor_protocol_r2_is_sensor_running>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d1ab      	bne.n	800caea <acc_cpd_dll_calibration+0x8a6>
 800cb92:	4c16      	ldr	r4, [pc, #88]	; (800cbec <acc_cpd_dll_calibration+0x9a8>)
 800cb94:	4916      	ldr	r1, [pc, #88]	; (800cbf0 <acc_cpd_dll_calibration+0x9ac>)
 800cb96:	9701      	str	r7, [sp, #4]
 800cb98:	2344      	movs	r3, #68	; 0x44
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	4658      	mov	r0, fp
 800cb9e:	4b15      	ldr	r3, [pc, #84]	; (800cbf4 <acc_cpd_dll_calibration+0x9b0>)
 800cba0:	9402      	str	r4, [sp, #8]
 800cba2:	920d      	str	r2, [sp, #52]	; 0x34
 800cba4:	f003 fd52 	bl	801064c <acc_confprogram_live_patch>
 800cba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	2342      	movs	r3, #66	; 0x42
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbb2:	4b10      	ldr	r3, [pc, #64]	; (800cbf4 <acc_cpd_dll_calibration+0x9b0>)
 800cbb4:	490e      	ldr	r1, [pc, #56]	; (800cbf0 <acc_cpd_dll_calibration+0x9ac>)
 800cbb6:	9402      	str	r4, [sp, #8]
 800cbb8:	4658      	mov	r0, fp
 800cbba:	f003 fd47 	bl	801064c <acc_confprogram_live_patch>
 800cbbe:	e628      	b.n	800c812 <acc_cpd_dll_calibration+0x5ce>
 800cbc0:	20000640 	.word	0x20000640
 800cbc4:	080175e8 	.word	0x080175e8
 800cbc8:	08017440 	.word	0x08017440
 800cbcc:	0801a9e4 	.word	0x0801a9e4
 800cbd0:	0801a9dc 	.word	0x0801a9dc
 800cbd4:	08017544 	.word	0x08017544
 800cbd8:	080176b8 	.word	0x080176b8
 800cbdc:	080176c8 	.word	0x080176c8
 800cbe0:	080176d8 	.word	0x080176d8
 800cbe4:	08017700 	.word	0x08017700
 800cbe8:	0801763c 	.word	0x0801763c
 800cbec:	080096d1 	.word	0x080096d1
 800cbf0:	08014660 	.word	0x08014660
 800cbf4:	0801a5a4 	.word	0x0801a5a4
 800cbf8:	0801705c 	.word	0x0801705c
 800cbfc:	08016fe8 	.word	0x08016fe8
 800cc00:	08017504 	.word	0x08017504
 800cc04:	080175a0 	.word	0x080175a0
 800cc08:	08015e0c 	.word	0x08015e0c
 800cc0c:	08017608 	.word	0x08017608
 800cc10:	f7fa f992 	bl	8006f38 <acc_rss_integration_log_level>
 800cc14:	2803      	cmp	r0, #3
 800cc16:	d92d      	bls.n	800cc74 <acc_cpd_dll_calibration+0xa30>
 800cc18:	4b3e      	ldr	r3, [pc, #248]	; (800cd14 <acc_cpd_dll_calibration+0xad0>)
 800cc1a:	4a3f      	ldr	r2, [pc, #252]	; (800cd18 <acc_cpd_dll_calibration+0xad4>)
 800cc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc1e:	493f      	ldr	r1, [pc, #252]	; (800cd1c <acc_cpd_dll_calibration+0xad8>)
 800cc20:	9709      	str	r7, [sp, #36]	; 0x24
 800cc22:	2004      	movs	r0, #4
 800cc24:	4798      	blx	r3
 800cc26:	270f      	movs	r7, #15
 800cc28:	e7a8      	b.n	800cb7c <acc_cpd_dll_calibration+0x938>
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	2f0f      	cmp	r7, #15
 800cc2e:	bf28      	it	cs
 800cc30:	270f      	movcs	r7, #15
 800cc32:	f7fa f981 	bl	8006f38 <acc_rss_integration_log_level>
 800cc36:	2803      	cmp	r0, #3
 800cc38:	d9a0      	bls.n	800cb7c <acc_cpd_dll_calibration+0x938>
 800cc3a:	4b36      	ldr	r3, [pc, #216]	; (800cd14 <acc_cpd_dll_calibration+0xad0>)
 800cc3c:	4a38      	ldr	r2, [pc, #224]	; (800cd20 <acc_cpd_dll_calibration+0xadc>)
 800cc3e:	e798      	b.n	800cb72 <acc_cpd_dll_calibration+0x92e>
 800cc40:	f7fa f97a 	bl	8006f38 <acc_rss_integration_log_level>
 800cc44:	2803      	cmp	r0, #3
 800cc46:	f67f ac31 	bls.w	800c4ac <acc_cpd_dll_calibration+0x268>
 800cc4a:	4b32      	ldr	r3, [pc, #200]	; (800cd14 <acc_cpd_dll_calibration+0xad0>)
 800cc4c:	4a35      	ldr	r2, [pc, #212]	; (800cd24 <acc_cpd_dll_calibration+0xae0>)
 800cc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc50:	4932      	ldr	r1, [pc, #200]	; (800cd1c <acc_cpd_dll_calibration+0xad8>)
 800cc52:	2004      	movs	r0, #4
 800cc54:	4798      	blx	r3
 800cc56:	e429      	b.n	800c4ac <acc_cpd_dll_calibration+0x268>
 800cc58:	9009      	str	r0, [sp, #36]	; 0x24
 800cc5a:	f7fa f96d 	bl	8006f38 <acc_rss_integration_log_level>
 800cc5e:	2803      	cmp	r0, #3
 800cc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc62:	d90a      	bls.n	800cc7a <acc_cpd_dll_calibration+0xa36>
 800cc64:	492b      	ldr	r1, [pc, #172]	; (800cd14 <acc_cpd_dll_calibration+0xad0>)
 800cc66:	4a30      	ldr	r2, [pc, #192]	; (800cd28 <acc_cpd_dll_calibration+0xae4>)
 800cc68:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800cc6a:	492c      	ldr	r1, [pc, #176]	; (800cd1c <acc_cpd_dll_calibration+0xad8>)
 800cc6c:	2004      	movs	r0, #4
 800cc6e:	47a0      	blx	r4
 800cc70:	2700      	movs	r7, #0
 800cc72:	e783      	b.n	800cb7c <acc_cpd_dll_calibration+0x938>
 800cc74:	9709      	str	r7, [sp, #36]	; 0x24
 800cc76:	270f      	movs	r7, #15
 800cc78:	e780      	b.n	800cb7c <acc_cpd_dll_calibration+0x938>
 800cc7a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc7c:	2700      	movs	r7, #0
 800cc7e:	e77d      	b.n	800cb7c <acc_cpd_dll_calibration+0x938>
 800cc80:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cc82:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800cc86:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cc88:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800cc8c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800cc8e:	6008      	str	r0, [r1, #0]
 800cc90:	818d      	strh	r5, [r1, #12]
 800cc92:	81ca      	strh	r2, [r1, #14]
 800cc94:	820b      	strh	r3, [r1, #16]
 800cc96:	f7fa f94f 	bl	8006f38 <acc_rss_integration_log_level>
 800cc9a:	2803      	cmp	r0, #3
 800cc9c:	d909      	bls.n	800ccb2 <acc_cpd_dll_calibration+0xa6e>
 800cc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca0:	4a1c      	ldr	r2, [pc, #112]	; (800cd14 <acc_cpd_dll_calibration+0xad0>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800cca6:	491d      	ldr	r1, [pc, #116]	; (800cd1c <acc_cpd_dll_calibration+0xad8>)
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	4a20      	ldr	r2, [pc, #128]	; (800cd2c <acc_cpd_dll_calibration+0xae8>)
 800ccac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccae:	2004      	movs	r0, #4
 800ccb0:	47a8      	blx	r5
 800ccb2:	f7fa f941 	bl	8006f38 <acc_rss_integration_log_level>
 800ccb6:	2801      	cmp	r0, #1
 800ccb8:	d91e      	bls.n	800ccf8 <acc_cpd_dll_calibration+0xab4>
 800ccba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ccbc:	4a1c      	ldr	r2, [pc, #112]	; (800cd30 <acc_cpd_dll_calibration+0xaec>)
 800ccbe:	7e39      	ldrb	r1, [r7, #24]
 800ccc0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800cd38 <acc_cpd_dll_calibration+0xaf4>
 800ccc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccc6:	89b8      	ldrh	r0, [r7, #12]
 800ccc8:	683e      	ldr	r6, [r7, #0]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	2900      	cmp	r1, #0
 800ccce:	bf14      	ite	ne
 800ccd0:	4663      	movne	r3, ip
 800ccd2:	4613      	moveq	r3, r2
 800ccd4:	4d0f      	ldr	r5, [pc, #60]	; (800cd14 <acc_cpd_dll_calibration+0xad0>)
 800ccd6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800ccda:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ccde:	9306      	str	r3, [sp, #24]
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800cce4:	9305      	str	r3, [sp, #20]
 800cce6:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800ccea:	e9cd 6001 	strd	r6, r0, [sp, #4]
 800ccee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccf0:	4a10      	ldr	r2, [pc, #64]	; (800cd34 <acc_cpd_dll_calibration+0xaf0>)
 800ccf2:	490a      	ldr	r1, [pc, #40]	; (800cd1c <acc_cpd_dll_calibration+0xad8>)
 800ccf4:	2002      	movs	r0, #2
 800ccf6:	47a8      	blx	r5
 800ccf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ccfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccfe:	6059      	str	r1, [r3, #4]
 800cd00:	609a      	str	r2, [r3, #8]
 800cd02:	f7ff bb42 	b.w	800c38a <acc_cpd_dll_calibration+0x146>
 800cd06:	4658      	mov	r0, fp
 800cd08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cd0c:	f7fd fa46 	bl	800a19c <acc_sensor_protocol_r2_stop>
 800cd10:	e6e4      	b.n	800cadc <acc_cpd_dll_calibration+0x898>
 800cd12:	bf00      	nop
 800cd14:	20000640 	.word	0x20000640
 800cd18:	080175c0 	.word	0x080175c0
 800cd1c:	08017440 	.word	0x08017440
 800cd20:	08017684 	.word	0x08017684
 800cd24:	08017578 	.word	0x08017578
 800cd28:	0801765c 	.word	0x0801765c
 800cd2c:	08017718 	.word	0x08017718
 800cd30:	08017438 	.word	0x08017438
 800cd34:	0801777c 	.word	0x0801777c
 800cd38:	08017430 	.word	0x08017430

0800cd3c <acc_dll_check_direct_leakage>:
 800cd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd40:	4b44      	ldr	r3, [pc, #272]	; (800ce54 <acc_dll_check_direct_leakage+0x118>)
 800cd42:	460d      	mov	r5, r1
 800cd44:	fba3 3101 	umull	r3, r1, r3, r1
 800cd48:	ea4f 0991 	mov.w	r9, r1, lsr #2
 800cd4c:	f021 0403 	bic.w	r4, r1, #3
 800cd50:	b084      	sub	sp, #16
 800cd52:	464b      	mov	r3, r9
 800cd54:	eb04 0191 	add.w	r1, r4, r1, lsr #2
 800cd58:	4602      	mov	r2, r0
 800cd5a:	4682      	mov	sl, r0
 800cd5c:	f003 fab8 	bl	80102d0 <acc_alg_power_bins>
 800cd60:	2d04      	cmp	r5, #4
 800cd62:	d924      	bls.n	800cdae <acc_dll_check_direct_leakage+0x72>
 800cd64:	f1aa 0602 	sub.w	r6, sl, #2
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4632      	mov	r2, r6
 800cd6c:	461c      	mov	r4, r3
 800cd6e:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800cd72:	3301      	adds	r3, #1
 800cd74:	428c      	cmp	r4, r1
 800cd76:	bf38      	it	cc
 800cd78:	460c      	movcc	r4, r1
 800cd7a:	4599      	cmp	r9, r3
 800cd7c:	d8f7      	bhi.n	800cd6e <acc_dll_check_direct_leakage+0x32>
 800cd7e:	4b36      	ldr	r3, [pc, #216]	; (800ce58 <acc_dll_check_direct_leakage+0x11c>)
 800cd80:	2d0e      	cmp	r5, #14
 800cd82:	fba3 3404 	umull	r3, r4, r3, r4
 800cd86:	f3c4 084f 	ubfx	r8, r4, #1, #16
 800cd8a:	d910      	bls.n	800cdae <acc_dll_check_direct_leakage+0x72>
 800cd8c:	2702      	movs	r7, #2
 800cd8e:	f836 5f02 	ldrh.w	r5, [r6, #2]!
 800cd92:	88b4      	ldrh	r4, [r6, #4]
 800cd94:	42a5      	cmp	r5, r4
 800cd96:	d902      	bls.n	800cd9e <acc_dll_check_direct_leakage+0x62>
 800cd98:	4623      	mov	r3, r4
 800cd9a:	462c      	mov	r4, r5
 800cd9c:	461d      	mov	r5, r3
 800cd9e:	4544      	cmp	r4, r8
 800cda0:	d902      	bls.n	800cda8 <acc_dll_check_direct_leakage+0x6c>
 800cda2:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 800cda6:	d834      	bhi.n	800ce12 <acc_dll_check_direct_leakage+0xd6>
 800cda8:	3701      	adds	r7, #1
 800cdaa:	45b9      	cmp	r9, r7
 800cdac:	d8ef      	bhi.n	800cd8e <acc_dll_check_direct_leakage+0x52>
 800cdae:	ea4f 0559 	mov.w	r5, r9, lsr #1
 800cdb2:	f105 0308 	add.w	r3, r5, #8
 800cdb6:	454b      	cmp	r3, r9
 800cdb8:	d821      	bhi.n	800cdfe <acc_dll_check_direct_leakage+0xc2>
 800cdba:	f1aa 0202 	sub.w	r2, sl, #2
 800cdbe:	f10a 000e 	add.w	r0, sl, #14
 800cdc2:	2400      	movs	r4, #0
 800cdc4:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800cdc8:	4290      	cmp	r0, r2
 800cdca:	440c      	add	r4, r1
 800cdcc:	d1fa      	bne.n	800cdc4 <acc_dll_check_direct_leakage+0x88>
 800cdce:	1c6a      	adds	r2, r5, #1
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	bf34      	ite	cc
 800cdd4:	2301      	movcc	r3, #1
 800cdd6:	2308      	movcs	r3, #8
 800cdd8:	442b      	add	r3, r5
 800cdda:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800cdde:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 800cde2:	2500      	movs	r5, #0
 800cde4:	f83a 2b02 	ldrh.w	r2, [sl], #2
 800cde8:	4553      	cmp	r3, sl
 800cdea:	4415      	add	r5, r2
 800cdec:	d1fa      	bne.n	800cde4 <acc_dll_check_direct_leakage+0xa8>
 800cdee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800cdf2:	42ab      	cmp	r3, r5
 800cdf4:	d81f      	bhi.n	800ce36 <acc_dll_check_direct_leakage+0xfa>
 800cdf6:	2001      	movs	r0, #1
 800cdf8:	b004      	add	sp, #16
 800cdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdfe:	4b17      	ldr	r3, [pc, #92]	; (800ce5c <acc_dll_check_direct_leakage+0x120>)
 800ce00:	4a17      	ldr	r2, [pc, #92]	; (800ce60 <acc_dll_check_direct_leakage+0x124>)
 800ce02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce04:	4917      	ldr	r1, [pc, #92]	; (800ce64 <acc_dll_check_direct_leakage+0x128>)
 800ce06:	2000      	movs	r0, #0
 800ce08:	4798      	blx	r3
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	b004      	add	sp, #16
 800ce0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce12:	f7fa f891 	bl	8006f38 <acc_rss_integration_log_level>
 800ce16:	2803      	cmp	r0, #3
 800ce18:	d909      	bls.n	800ce2e <acc_dll_check_direct_leakage+0xf2>
 800ce1a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800ce1e:	4a0f      	ldr	r2, [pc, #60]	; (800ce5c <acc_dll_check_direct_leakage+0x120>)
 800ce20:	9400      	str	r4, [sp, #0]
 800ce22:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ce24:	490f      	ldr	r1, [pc, #60]	; (800ce64 <acc_dll_check_direct_leakage+0x128>)
 800ce26:	4a10      	ldr	r2, [pc, #64]	; (800ce68 <acc_dll_check_direct_leakage+0x12c>)
 800ce28:	463b      	mov	r3, r7
 800ce2a:	2004      	movs	r0, #4
 800ce2c:	47a0      	blx	r4
 800ce2e:	2000      	movs	r0, #0
 800ce30:	b004      	add	sp, #16
 800ce32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce36:	f7fa f87f 	bl	8006f38 <acc_rss_integration_log_level>
 800ce3a:	2803      	cmp	r0, #3
 800ce3c:	d9f7      	bls.n	800ce2e <acc_dll_check_direct_leakage+0xf2>
 800ce3e:	4a07      	ldr	r2, [pc, #28]	; (800ce5c <acc_dll_check_direct_leakage+0x120>)
 800ce40:	9500      	str	r5, [sp, #0]
 800ce42:	4623      	mov	r3, r4
 800ce44:	2004      	movs	r0, #4
 800ce46:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ce48:	4906      	ldr	r1, [pc, #24]	; (800ce64 <acc_dll_check_direct_leakage+0x128>)
 800ce4a:	4a08      	ldr	r2, [pc, #32]	; (800ce6c <acc_dll_check_direct_leakage+0x130>)
 800ce4c:	47a0      	blx	r4
 800ce4e:	2000      	movs	r0, #0
 800ce50:	e7d2      	b.n	800cdf8 <acc_dll_check_direct_leakage+0xbc>
 800ce52:	bf00      	nop
 800ce54:	cccccccd 	.word	0xcccccccd
 800ce58:	aaaaaaab 	.word	0xaaaaaaab
 800ce5c:	20000640 	.word	0x20000640
 800ce60:	080178a4 	.word	0x080178a4
 800ce64:	08017888 	.word	0x08017888
 800ce68:	0801782c 	.word	0x0801782c
 800ce6c:	080178b4 	.word	0x080178b4

0800ce70 <acc_dll_dly_coarse_priority_sort>:
 800ce70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce74:	b084      	sub	sp, #16
 800ce76:	2800      	cmp	r0, #0
 800ce78:	f000 80ad 	beq.w	800cfd6 <acc_dll_dly_coarse_priority_sort+0x166>
 800ce7c:	280c      	cmp	r0, #12
 800ce7e:	f200 80a6 	bhi.w	800cfce <acc_dll_dly_coarse_priority_sort+0x15e>
 800ce82:	2400      	movs	r4, #0
 800ce84:	ed9f 4a56 	vldr	s8, [pc, #344]	; 800cfe0 <acc_dll_dly_coarse_priority_sort+0x170>
 800ce88:	eddf 4a56 	vldr	s9, [pc, #344]	; 800cfe4 <acc_dll_dly_coarse_priority_sort+0x174>
 800ce8c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800cfe8 <acc_dll_dly_coarse_priority_sort+0x178>
 800ce90:	ed9f 5a56 	vldr	s10, [pc, #344]	; 800cfec <acc_dll_dly_coarse_priority_sort+0x17c>
 800ce94:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cff0 <acc_dll_dly_coarse_priority_sort+0x180>
 800ce98:	4626      	mov	r6, r4
 800ce9a:	f10d 0e04 	add.w	lr, sp, #4
 800ce9e:	f102 3cff 	add.w	ip, r2, #4294967295
 800cea2:	460d      	mov	r5, r1
 800cea4:	1e47      	subs	r7, r0, #1
 800cea6:	f240 5813 	movw	r8, #1299	; 0x513
 800ceaa:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800ceae:	2c00      	cmp	r4, #0
 800ceb0:	d067      	beq.n	800cf82 <acc_dll_dly_coarse_priority_sort+0x112>
 800ceb2:	42bc      	cmp	r4, r7
 800ceb4:	d016      	beq.n	800cee4 <acc_dll_dly_coarse_priority_sort+0x74>
 800ceb6:	f935 ac02 	ldrsh.w	sl, [r5, #-2]
 800ceba:	f9b5 3000 	ldrsh.w	r3, [r5]
 800cebe:	459a      	cmp	sl, r3
 800cec0:	dd18      	ble.n	800cef4 <acc_dll_dly_coarse_priority_sort+0x84>
 800cec2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 800cec6:	454b      	cmp	r3, r9
 800cec8:	dd14      	ble.n	800cef4 <acc_dll_dly_coarse_priority_sort+0x84>
 800ceca:	45c2      	cmp	sl, r8
 800cecc:	dc12      	bgt.n	800cef4 <acc_dll_dly_coarse_priority_sort+0x84>
 800cece:	4543      	cmp	r3, r8
 800ced0:	dc10      	bgt.n	800cef4 <acc_dll_dly_coarse_priority_sort+0x84>
 800ced2:	eba9 090a 	sub.w	r9, r9, sl
 800ced6:	ee07 9a90 	vmov	s15, r9
 800ceda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cede:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800cee2:	e05e      	b.n	800cfa2 <acc_dll_dly_coarse_priority_sort+0x132>
 800cee4:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 800cee8:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ceec:	4599      	cmp	r9, r3
 800ceee:	dd01      	ble.n	800cef4 <acc_dll_dly_coarse_priority_sort+0x84>
 800cef0:	45c1      	cmp	r9, r8
 800cef2:	dd65      	ble.n	800cfc0 <acc_dll_dly_coarse_priority_sort+0x150>
 800cef4:	eef0 6a46 	vmov.f32	s13, s12
 800cef8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	bfb8      	it	lt
 800cf00:	425b      	neglt	r3, r3
 800cf02:	ee07 3a90 	vmov	s15, r3
 800cf06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf0a:	3401      	adds	r4, #1
 800cf0c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cf10:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cf14:	b2e6      	uxtb	r6, r4
 800cf16:	42b0      	cmp	r0, r6
 800cf18:	f105 0502 	add.w	r5, r5, #2
 800cf1c:	ee67 7a25 	vmul.f32	s15, s14, s11
 800cf20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf28:	ee17 3a90 	vmov	r3, s15
 800cf2c:	f80e 3b01 	strb.w	r3, [lr], #1
 800cf30:	d8bd      	bhi.n	800ceae <acc_dll_dly_coarse_priority_sort+0x3e>
 800cf32:	3802      	subs	r0, #2
 800cf34:	f102 0c01 	add.w	ip, r2, #1
 800cf38:	fa5f fe87 	uxtb.w	lr, r7
 800cf3c:	fa5c f780 	uxtab	r7, ip, r0
 800cf40:	eba7 0e0e 	sub.w	lr, r7, lr
 800cf44:	45be      	cmp	lr, r7
 800cf46:	d019      	beq.n	800cf7c <acc_dll_dly_coarse_priority_sort+0x10c>
 800cf48:	4613      	mov	r3, r2
 800cf4a:	2400      	movs	r4, #0
 800cf4c:	7819      	ldrb	r1, [r3, #0]
 800cf4e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800cf52:	ad04      	add	r5, sp, #16
 800cf54:	186e      	adds	r6, r5, r1
 800cf56:	4405      	add	r5, r0
 800cf58:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
 800cf5c:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
 800cf60:	42ae      	cmp	r6, r5
 800cf62:	d904      	bls.n	800cf6e <acc_dll_dly_coarse_priority_sort+0xfe>
 800cf64:	3401      	adds	r4, #1
 800cf66:	b2e4      	uxtb	r4, r4
 800cf68:	f803 0c01 	strb.w	r0, [r3, #-1]
 800cf6c:	7019      	strb	r1, [r3, #0]
 800cf6e:	429f      	cmp	r7, r3
 800cf70:	d1ec      	bne.n	800cf4c <acc_dll_dly_coarse_priority_sort+0xdc>
 800cf72:	45bc      	cmp	ip, r7
 800cf74:	d002      	beq.n	800cf7c <acc_dll_dly_coarse_priority_sort+0x10c>
 800cf76:	3f01      	subs	r7, #1
 800cf78:	2c00      	cmp	r4, #0
 800cf7a:	d1e3      	bne.n	800cf44 <acc_dll_dly_coarse_priority_sort+0xd4>
 800cf7c:	b004      	add	sp, #16
 800cf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf82:	f9b1 9000 	ldrsh.w	r9, [r1]
 800cf86:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800cf8a:	4599      	cmp	r9, r3
 800cf8c:	dd13      	ble.n	800cfb6 <acc_dll_dly_coarse_priority_sort+0x146>
 800cf8e:	45c1      	cmp	r9, r8
 800cf90:	dc11      	bgt.n	800cfb6 <acc_dll_dly_coarse_priority_sort+0x146>
 800cf92:	eba3 0309 	sub.w	r3, r3, r9
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800cf9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfa2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800cfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfaa:	bf54      	ite	pl
 800cfac:	eef0 6a46 	vmovpl.f32	s13, s12
 800cfb0:	eef0 6a64 	vmovmi.f32	s13, s9
 800cfb4:	e7a0      	b.n	800cef8 <acc_dll_dly_coarse_priority_sort+0x88>
 800cfb6:	f9b5 3000 	ldrsh.w	r3, [r5]
 800cfba:	eef0 6a46 	vmov.f32	s13, s12
 800cfbe:	e79b      	b.n	800cef8 <acc_dll_dly_coarse_priority_sort+0x88>
 800cfc0:	eba3 0909 	sub.w	r9, r3, r9
 800cfc4:	ee07 9a90 	vmov	s15, r9
 800cfc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfcc:	e7e9      	b.n	800cfa2 <acc_dll_dly_coarse_priority_sort+0x132>
 800cfce:	4809      	ldr	r0, [pc, #36]	; (800cff4 <acc_dll_dly_coarse_priority_sort+0x184>)
 800cfd0:	211f      	movs	r1, #31
 800cfd2:	f7f9 fe93 	bl	8006cfc <acc_assert_fail>
 800cfd6:	4807      	ldr	r0, [pc, #28]	; (800cff4 <acc_dll_dly_coarse_priority_sort+0x184>)
 800cfd8:	211a      	movs	r1, #26
 800cfda:	f7f9 fe8f 	bl	8006cfc <acc_assert_fail>
 800cfde:	bf00      	nop
 800cfe0:	c2c80000 	.word	0xc2c80000
 800cfe4:	00000000 	.word	0x00000000
 800cfe8:	42480000 	.word	0x42480000
 800cfec:	447a0000 	.word	0x447a0000
 800cff0:	42c80000 	.word	0x42c80000
 800cff4:	080178f4 	.word	0x080178f4

0800cff8 <acc_dll_plateau_finder>:
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	b0af      	sub	sp, #188	; 0xbc
 800cffe:	2819      	cmp	r0, #25
 800d000:	9104      	str	r1, [sp, #16]
 800d002:	f200 8226 	bhi.w	800d452 <acc_dll_plateau_finder+0x45a>
 800d006:	2801      	cmp	r0, #1
 800d008:	4683      	mov	fp, r0
 800d00a:	4615      	mov	r5, r2
 800d00c:	469a      	mov	sl, r3
 800d00e:	f240 8217 	bls.w	800d440 <acc_dll_plateau_finder+0x448>
 800d012:	f1a0 0902 	sub.w	r9, r0, #2
 800d016:	2100      	movs	r1, #0
 800d018:	fa1f f989 	uxth.w	r9, r9
 800d01c:	2301      	movs	r3, #1
 800d01e:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800d368 <acc_dll_plateau_finder+0x370>
 800d022:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d026:	9205      	str	r2, [sp, #20]
 800d028:	f109 0902 	add.w	r9, r9, #2
 800d02c:	460c      	mov	r4, r1
 800d02e:	460e      	mov	r6, r1
 800d030:	461d      	mov	r5, r3
 800d032:	e006      	b.n	800d042 <acc_dll_plateau_finder+0x4a>
 800d034:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d038:	42aa      	cmp	r2, r5
 800d03a:	d019      	beq.n	800d070 <acc_dll_plateau_finder+0x78>
 800d03c:	3501      	adds	r5, #1
 800d03e:	45a9      	cmp	r9, r5
 800d040:	d04b      	beq.n	800d0da <acc_dll_plateau_finder+0xe2>
 800d042:	f8b8 2000 	ldrh.w	r2, [r8]
 800d046:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 800d04a:	ee07 2a90 	vmov	s15, r2
 800d04e:	4282      	cmp	r2, r0
 800d050:	bf34      	ite	cc
 800d052:	1a82      	subcc	r2, r0, r2
 800d054:	1a12      	subcs	r2, r2, r0
 800d056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d05a:	b2af      	uxth	r7, r5
 800d05c:	b292      	uxth	r2, r2
 800d05e:	3401      	adds	r4, #1
 800d060:	4439      	add	r1, r7
 800d062:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800d066:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d06a:	b2a4      	uxth	r4, r4
 800d06c:	b289      	uxth	r1, r1
 800d06e:	d9e1      	bls.n	800d034 <acc_dll_plateau_finder+0x3c>
 800d070:	2c02      	cmp	r4, #2
 800d072:	f240 8191 	bls.w	800d398 <acc_dll_plateau_finder+0x3a0>
 800d076:	ee07 1a90 	vmov	s15, r1
 800d07a:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800d07e:	ee07 4a90 	vmov	s15, r4
 800d082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d086:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800d08a:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800d08e:	ab2e      	add	r3, sp, #184	; 0xb8
 800d090:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 800d094:	3501      	adds	r5, #1
 800d096:	f106 0c01 	add.w	ip, r6, #1
 800d09a:	2100      	movs	r1, #0
 800d09c:	45a9      	cmp	r9, r5
 800d09e:	f820 4c34 	strh.w	r4, [r0, #-52]
 800d0a2:	f820 7c9c 	strh.w	r7, [r0, #-156]
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800d0ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0b4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0bc:	ee16 3a90 	vmov	r3, s13
 800d0c0:	ee17 2a90 	vmov	r2, s15
 800d0c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d0c8:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
 800d0cc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800d368 <acc_dll_plateau_finder+0x370>
 800d0d0:	f820 3c68 	strh.w	r3, [r0, #-104]
 800d0d4:	fa1f f68c 	uxth.w	r6, ip
 800d0d8:	d1b3      	bne.n	800d042 <acc_dll_plateau_finder+0x4a>
 800d0da:	9d05      	ldr	r5, [sp, #20]
 800d0dc:	f7f9 ff2c 	bl	8006f38 <acc_rss_integration_log_level>
 800d0e0:	2803      	cmp	r0, #3
 800d0e2:	f200 817f 	bhi.w	800d3e4 <acc_dll_plateau_finder+0x3ec>
 800d0e6:	b33e      	cbz	r6, 800d138 <acc_dll_plateau_finder+0x140>
 800d0e8:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800d388 <acc_dll_plateau_finder+0x390>
 800d0ec:	4c9f      	ldr	r4, [pc, #636]	; (800d36c <acc_dll_plateau_finder+0x374>)
 800d0ee:	4fa0      	ldr	r7, [pc, #640]	; (800d370 <acc_dll_plateau_finder+0x378>)
 800d0f0:	f04f 0b00 	mov.w	fp, #0
 800d0f4:	46a8      	mov	r8, r5
 800d0f6:	f7f9 ff1f 	bl	8006f38 <acc_rss_integration_log_level>
 800d0fa:	2803      	cmp	r0, #3
 800d0fc:	d915      	bls.n	800d12a <acc_dll_plateau_finder+0x132>
 800d0fe:	a914      	add	r1, sp, #80	; 0x50
 800d100:	aa21      	add	r2, sp, #132	; 0x84
 800d102:	ab07      	add	r3, sp, #28
 800d104:	f831 001b 	ldrh.w	r0, [r1, fp, lsl #1]
 800d108:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
 800d10c:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 800d110:	f83a 301b 	ldrh.w	r3, [sl, fp, lsl #1]
 800d114:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800d118:	e9cd 2300 	strd	r2, r3, [sp]
 800d11c:	4639      	mov	r1, r7
 800d11e:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
 800d122:	465b      	mov	r3, fp
 800d124:	4622      	mov	r2, r4
 800d126:	2004      	movs	r0, #4
 800d128:	47a8      	blx	r5
 800d12a:	f10b 0b01 	add.w	fp, fp, #1
 800d12e:	fa1f f38b 	uxth.w	r3, fp
 800d132:	42b3      	cmp	r3, r6
 800d134:	d3df      	bcc.n	800d0f6 <acc_dll_plateau_finder+0xfe>
 800d136:	4645      	mov	r5, r8
 800d138:	9b04      	ldr	r3, [sp, #16]
 800d13a:	f8b3 b000 	ldrh.w	fp, [r3]
 800d13e:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800d142:	459b      	cmp	fp, r3
 800d144:	f240 8161 	bls.w	800d40a <acc_dll_plateau_finder+0x412>
 800d148:	f5ab 4300 	sub.w	r3, fp, #32768	; 0x8000
 800d14c:	ee07 3a90 	vmov	s15, r3
 800d150:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d374 <acc_dll_plateau_finder+0x37c>
 800d154:	ed9f 5a88 	vldr	s10, [pc, #544]	; 800d378 <acc_dll_plateau_finder+0x380>
 800d158:	eddf 6a88 	vldr	s13, [pc, #544]	; 800d37c <acc_dll_plateau_finder+0x384>
 800d15c:	eddf 5a88 	vldr	s11, [pc, #544]	; 800d380 <acc_dll_plateau_finder+0x388>
 800d160:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800d384 <acc_dll_plateau_finder+0x38c>
 800d164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d16c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d174:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d17c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d180:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d188:	ee17 3a90 	vmov	r3, s15
 800d18c:	b29c      	uxth	r4, r3
 800d18e:	f7f9 fed3 	bl	8006f38 <acc_rss_integration_log_level>
 800d192:	2803      	cmp	r0, #3
 800d194:	f200 812e 	bhi.w	800d3f4 <acc_dll_plateau_finder+0x3fc>
 800d198:	2e00      	cmp	r6, #0
 800d19a:	f000 814b 	beq.w	800d434 <acc_dll_plateau_finder+0x43c>
 800d19e:	f04f 0900 	mov.w	r9, #0
 800d1a2:	46c8      	mov	r8, r9
 800d1a4:	464b      	mov	r3, r9
 800d1a6:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800d1aa:	4627      	mov	r7, r4
 800d1ac:	e010      	b.n	800d1d0 <acc_dll_plateau_finder+0x1d8>
 800d1ae:	f5ab 62fa 	sub.w	r2, fp, #2000	; 0x7d0
 800d1b2:	4294      	cmp	r4, r2
 800d1b4:	f200 8109 	bhi.w	800d3ca <acc_dll_plateau_finder+0x3d2>
 800d1b8:	f108 0201 	add.w	r2, r8, #1
 800d1bc:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
 800d1c0:	fa1f f882 	uxth.w	r8, r2
 800d1c4:	f109 0901 	add.w	r9, r9, #1
 800d1c8:	fa1f f389 	uxth.w	r3, r9
 800d1cc:	429e      	cmp	r6, r3
 800d1ce:	d916      	bls.n	800d1fe <acc_dll_plateau_finder+0x206>
 800d1d0:	f83a 4b02 	ldrh.w	r4, [sl], #2
 800d1d4:	f241 3287 	movw	r2, #4999	; 0x1387
 800d1d8:	4294      	cmp	r4, r2
 800d1da:	d8e8      	bhi.n	800d1ae <acc_dll_plateau_finder+0x1b6>
 800d1dc:	f7f9 feac 	bl	8006f38 <acc_rss_integration_log_level>
 800d1e0:	2803      	cmp	r0, #3
 800d1e2:	d9ef      	bls.n	800d1c4 <acc_dll_plateau_finder+0x1cc>
 800d1e4:	4a68      	ldr	r2, [pc, #416]	; (800d388 <acc_dll_plateau_finder+0x390>)
 800d1e6:	4962      	ldr	r1, [pc, #392]	; (800d370 <acc_dll_plateau_finder+0x378>)
 800d1e8:	4623      	mov	r3, r4
 800d1ea:	2004      	movs	r0, #4
 800d1ec:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d1ee:	4a67      	ldr	r2, [pc, #412]	; (800d38c <acc_dll_plateau_finder+0x394>)
 800d1f0:	f109 0901 	add.w	r9, r9, #1
 800d1f4:	47a0      	blx	r4
 800d1f6:	fa1f f389 	uxth.w	r3, r9
 800d1fa:	429e      	cmp	r6, r3
 800d1fc:	d8e8      	bhi.n	800d1d0 <acc_dll_plateau_finder+0x1d8>
 800d1fe:	f1b8 0f01 	cmp.w	r8, #1
 800d202:	463c      	mov	r4, r7
 800d204:	f240 8112 	bls.w	800d42c <acc_dll_plateau_finder+0x434>
 800d208:	f1a8 0a02 	sub.w	sl, r8, #2
 800d20c:	fa0f fe8a 	sxth.w	lr, sl
 800d210:	f10e 0901 	add.w	r9, lr, #1
 800d214:	fa1f fa8a 	uxth.w	sl, sl
 800d218:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 800d21c:	46ac      	mov	ip, r5
 800d21e:	f1be 0f00 	cmp.w	lr, #0
 800d222:	db23      	blt.n	800d26c <acc_dll_plateau_finder+0x274>
 800d224:	4649      	mov	r1, r9
 800d226:	4670      	mov	r0, lr
 800d228:	2500      	movs	r5, #0
 800d22a:	f831 6d02 	ldrh.w	r6, [r1, #-2]!
 800d22e:	ab2e      	add	r3, sp, #184	; 0xb8
 800d230:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800d234:	884f      	ldrh	r7, [r1, #2]
 800d236:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 800d23a:	ab2e      	add	r3, sp, #184	; 0xb8
 800d23c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 800d240:	42a2      	cmp	r2, r4
 800d242:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800d246:	bf8c      	ite	hi
 800d248:	1b12      	subhi	r2, r2, r4
 800d24a:	1aa2      	subls	r2, r4, r2
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	bf8c      	ite	hi
 800d250:	1b1b      	subhi	r3, r3, r4
 800d252:	1ae3      	subls	r3, r4, r3
 800d254:	b292      	uxth	r2, r2
 800d256:	b29b      	uxth	r3, r3
 800d258:	429a      	cmp	r2, r3
 800d25a:	d902      	bls.n	800d262 <acc_dll_plateau_finder+0x26a>
 800d25c:	800f      	strh	r7, [r1, #0]
 800d25e:	804e      	strh	r6, [r1, #2]
 800d260:	2501      	movs	r5, #1
 800d262:	3801      	subs	r0, #1
 800d264:	0403      	lsls	r3, r0, #16
 800d266:	d5e0      	bpl.n	800d22a <acc_dll_plateau_finder+0x232>
 800d268:	2d00      	cmp	r5, #0
 800d26a:	d1d8      	bne.n	800d21e <acc_dll_plateau_finder+0x226>
 800d26c:	f8bc 3000 	ldrh.w	r3, [ip]
 800d270:	aa2e      	add	r2, sp, #184	; 0xb8
 800d272:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800d276:	4665      	mov	r5, ip
 800d278:	1ca8      	adds	r0, r5, #2
 800d27a:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 800d27e:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800d282:	4662      	mov	r2, ip
 800d284:	f04f 0a01 	mov.w	sl, #1
 800d288:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800d28c:	ac2e      	add	r4, sp, #184	; 0xb8
 800d28e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800d292:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800d296:	428b      	cmp	r3, r1
 800d298:	bf8c      	ite	hi
 800d29a:	1a5b      	subhi	r3, r3, r1
 800d29c:	1acb      	subls	r3, r1, r3
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d2a4:	bf3c      	itt	cc
 800d2a6:	f10a 0a01 	addcc.w	sl, sl, #1
 800d2aa:	fa1f fa8a 	uxthcc.w	sl, sl
 800d2ae:	4290      	cmp	r0, r2
 800d2b0:	d1ea      	bne.n	800d288 <acc_dll_plateau_finder+0x290>
 800d2b2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800d388 <acc_dll_plateau_finder+0x390>
 800d2b6:	4f36      	ldr	r7, [pc, #216]	; (800d390 <acc_dll_plateau_finder+0x398>)
 800d2b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2bc:	f1ba 0f00 	cmp.w	sl, #0
 800d2c0:	d031      	beq.n	800d326 <acc_dll_plateau_finder+0x32e>
 800d2c2:	2400      	movs	r4, #0
 800d2c4:	4e2a      	ldr	r6, [pc, #168]	; (800d370 <acc_dll_plateau_finder+0x378>)
 800d2c6:	46a6      	mov	lr, r4
 800d2c8:	4622      	mov	r2, r4
 800d2ca:	e004      	b.n	800d2d6 <acc_dll_plateau_finder+0x2de>
 800d2cc:	3401      	adds	r4, #1
 800d2ce:	b2a4      	uxth	r4, r4
 800d2d0:	4554      	cmp	r4, sl
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	d224      	bcs.n	800d320 <acc_dll_plateau_finder+0x328>
 800d2d6:	0053      	lsls	r3, r2, #1
 800d2d8:	3302      	adds	r3, #2
 800d2da:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 800d2de:	5ae8      	ldrh	r0, [r5, r3]
 800d2e0:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800d2e4:	eb0c 0b41 	add.w	fp, ip, r1, lsl #1
 800d2e8:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800d2ec:	f83b bc34 	ldrh.w	fp, [fp, #-52]
 800d2f0:	f83c cc34 	ldrh.w	ip, [ip, #-52]
 800d2f4:	45e3      	cmp	fp, ip
 800d2f6:	d2e9      	bcs.n	800d2cc <acc_dll_plateau_finder+0x2d4>
 800d2f8:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
 800d2fc:	52e9      	strh	r1, [r5, r3]
 800d2fe:	f7f9 fe1b 	bl	8006f38 <acc_rss_integration_log_level>
 800d302:	2803      	cmp	r0, #3
 800d304:	d97e      	bls.n	800d404 <acc_dll_plateau_finder+0x40c>
 800d306:	3401      	adds	r4, #1
 800d308:	463a      	mov	r2, r7
 800d30a:	b2a4      	uxth	r4, r4
 800d30c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800d310:	4631      	mov	r1, r6
 800d312:	2004      	movs	r0, #4
 800d314:	4798      	blx	r3
 800d316:	4554      	cmp	r4, sl
 800d318:	f04f 0e01 	mov.w	lr, #1
 800d31c:	4622      	mov	r2, r4
 800d31e:	d3da      	bcc.n	800d2d6 <acc_dll_plateau_finder+0x2de>
 800d320:	f1be 0f00 	cmp.w	lr, #0
 800d324:	d1ca      	bne.n	800d2bc <acc_dll_plateau_finder+0x2c4>
 800d326:	f8df a060 	ldr.w	sl, [pc, #96]	; 800d388 <acc_dll_plateau_finder+0x390>
 800d32a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800d394 <acc_dll_plateau_finder+0x39c>
 800d32e:	4f10      	ldr	r7, [pc, #64]	; (800d370 <acc_dll_plateau_finder+0x378>)
 800d330:	2400      	movs	r4, #0
 800d332:	f7f9 fe01 	bl	8006f38 <acc_rss_integration_log_level>
 800d336:	2803      	cmp	r0, #3
 800d338:	d90d      	bls.n	800d356 <acc_dll_plateau_finder+0x35e>
 800d33a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 800d33e:	aa2e      	add	r2, sp, #184	; 0xb8
 800d340:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800d344:	4639      	mov	r1, r7
 800d346:	f832 2c68 	ldrh.w	r2, [r2, #-104]
 800d34a:	9200      	str	r2, [sp, #0]
 800d34c:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800d350:	464a      	mov	r2, r9
 800d352:	2004      	movs	r0, #4
 800d354:	47b0      	blx	r6
 800d356:	3401      	adds	r4, #1
 800d358:	b2a3      	uxth	r3, r4
 800d35a:	4598      	cmp	r8, r3
 800d35c:	d8e9      	bhi.n	800d332 <acc_dll_plateau_finder+0x33a>
 800d35e:	4640      	mov	r0, r8
 800d360:	b02f      	add	sp, #188	; 0xbc
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	bf00      	nop
 800d368:	00000000 	.word	0x00000000
 800d36c:	08017990 	.word	0x08017990
 800d370:	08017914 	.word	0x08017914
 800d374:	3f99999a 	.word	0x3f99999a
 800d378:	37800000 	.word	0x37800000
 800d37c:	3f866666 	.word	0x3f866666
 800d380:	47800000 	.word	0x47800000
 800d384:	47000000 	.word	0x47000000
 800d388:	20000640 	.word	0x20000640
 800d38c:	08017a0c 	.word	0x08017a0c
 800d390:	08017a6c 	.word	0x08017a6c
 800d394:	08017aa0 	.word	0x08017aa0
 800d398:	f7f9 fdce 	bl	8006f38 <acc_rss_integration_log_level>
 800d39c:	2803      	cmp	r0, #3
 800d39e:	d90f      	bls.n	800d3c0 <acc_dll_plateau_finder+0x3c8>
 800d3a0:	9401      	str	r4, [sp, #4]
 800d3a2:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 800d3a6:	4b2d      	ldr	r3, [pc, #180]	; (800d45c <acc_dll_plateau_finder+0x464>)
 800d3a8:	9200      	str	r2, [sp, #0]
 800d3aa:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d3ac:	492c      	ldr	r1, [pc, #176]	; (800d460 <acc_dll_plateau_finder+0x468>)
 800d3ae:	4a2d      	ldr	r2, [pc, #180]	; (800d464 <acc_dll_plateau_finder+0x46c>)
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	2004      	movs	r0, #4
 800d3b4:	2400      	movs	r4, #0
 800d3b6:	47b8      	blx	r7
 800d3b8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800d468 <acc_dll_plateau_finder+0x470>
 800d3bc:	4621      	mov	r1, r4
 800d3be:	e63d      	b.n	800d03c <acc_dll_plateau_finder+0x44>
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d468 <acc_dll_plateau_finder+0x470>
 800d3c6:	460c      	mov	r4, r1
 800d3c8:	e638      	b.n	800d03c <acc_dll_plateau_finder+0x44>
 800d3ca:	f7f9 fdb5 	bl	8006f38 <acc_rss_integration_log_level>
 800d3ce:	2803      	cmp	r0, #3
 800d3d0:	f67f aef8 	bls.w	800d1c4 <acc_dll_plateau_finder+0x1cc>
 800d3d4:	4a21      	ldr	r2, [pc, #132]	; (800d45c <acc_dll_plateau_finder+0x464>)
 800d3d6:	4922      	ldr	r1, [pc, #136]	; (800d460 <acc_dll_plateau_finder+0x468>)
 800d3d8:	4623      	mov	r3, r4
 800d3da:	2004      	movs	r0, #4
 800d3dc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d3de:	4a23      	ldr	r2, [pc, #140]	; (800d46c <acc_dll_plateau_finder+0x474>)
 800d3e0:	47a0      	blx	r4
 800d3e2:	e6ef      	b.n	800d1c4 <acc_dll_plateau_finder+0x1cc>
 800d3e4:	4633      	mov	r3, r6
 800d3e6:	491d      	ldr	r1, [pc, #116]	; (800d45c <acc_dll_plateau_finder+0x464>)
 800d3e8:	4a21      	ldr	r2, [pc, #132]	; (800d470 <acc_dll_plateau_finder+0x478>)
 800d3ea:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800d3ec:	491c      	ldr	r1, [pc, #112]	; (800d460 <acc_dll_plateau_finder+0x468>)
 800d3ee:	2004      	movs	r0, #4
 800d3f0:	47a0      	blx	r4
 800d3f2:	e678      	b.n	800d0e6 <acc_dll_plateau_finder+0xee>
 800d3f4:	4b19      	ldr	r3, [pc, #100]	; (800d45c <acc_dll_plateau_finder+0x464>)
 800d3f6:	4a1f      	ldr	r2, [pc, #124]	; (800d474 <acc_dll_plateau_finder+0x47c>)
 800d3f8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d3fa:	4919      	ldr	r1, [pc, #100]	; (800d460 <acc_dll_plateau_finder+0x468>)
 800d3fc:	4623      	mov	r3, r4
 800d3fe:	2004      	movs	r0, #4
 800d400:	47b8      	blx	r7
 800d402:	e6c9      	b.n	800d198 <acc_dll_plateau_finder+0x1a0>
 800d404:	f04f 0e01 	mov.w	lr, #1
 800d408:	e760      	b.n	800d2cc <acc_dll_plateau_finder+0x2d4>
 800d40a:	f7f9 fd95 	bl	8006f38 <acc_rss_integration_log_level>
 800d40e:	2803      	cmp	r0, #3
 800d410:	d910      	bls.n	800d434 <acc_dll_plateau_finder+0x43c>
 800d412:	4b12      	ldr	r3, [pc, #72]	; (800d45c <acc_dll_plateau_finder+0x464>)
 800d414:	4a18      	ldr	r2, [pc, #96]	; (800d478 <acc_dll_plateau_finder+0x480>)
 800d416:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d418:	4911      	ldr	r1, [pc, #68]	; (800d460 <acc_dll_plateau_finder+0x468>)
 800d41a:	465b      	mov	r3, fp
 800d41c:	2004      	movs	r0, #4
 800d41e:	47a0      	blx	r4
 800d420:	f04f 0800 	mov.w	r8, #0
 800d424:	4640      	mov	r0, r8
 800d426:	b02f      	add	sp, #188	; 0xbc
 800d428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42c:	f1b8 0f00 	cmp.w	r8, #0
 800d430:	f47f af79 	bne.w	800d326 <acc_dll_plateau_finder+0x32e>
 800d434:	f04f 0800 	mov.w	r8, #0
 800d438:	4640      	mov	r0, r8
 800d43a:	b02f      	add	sp, #188	; 0xbc
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d440:	f7f9 fd7a 	bl	8006f38 <acc_rss_integration_log_level>
 800d444:	2803      	cmp	r0, #3
 800d446:	d801      	bhi.n	800d44c <acc_dll_plateau_finder+0x454>
 800d448:	2600      	movs	r6, #0
 800d44a:	e675      	b.n	800d138 <acc_dll_plateau_finder+0x140>
 800d44c:	2300      	movs	r3, #0
 800d44e:	461e      	mov	r6, r3
 800d450:	e7c9      	b.n	800d3e6 <acc_dll_plateau_finder+0x3ee>
 800d452:	4803      	ldr	r0, [pc, #12]	; (800d460 <acc_dll_plateau_finder+0x468>)
 800d454:	2128      	movs	r1, #40	; 0x28
 800d456:	f7f9 fc51 	bl	8006cfc <acc_assert_fail>
 800d45a:	bf00      	nop
 800d45c:	20000640 	.word	0x20000640
 800d460:	08017914 	.word	0x08017914
 800d464:	08017928 	.word	0x08017928
 800d468:	00000000 	.word	0x00000000
 800d46c:	08017a3c 	.word	0x08017a3c
 800d470:	0801797c 	.word	0x0801797c
 800d474:	080179fc 	.word	0x080179fc
 800d478:	080179d4 	.word	0x080179d4

0800d47c <acc_cpd_hibernate_test>:
 800d47c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d480:	b085      	sub	sp, #20
 800d482:	ab03      	add	r3, sp, #12
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	2400      	movs	r4, #0
 800d488:	ab02      	add	r3, sp, #8
 800d48a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800d48e:	4606      	mov	r6, r0
 800d490:	460f      	mov	r7, r1
 800d492:	f7fc fc6d 	bl	8009d70 <acc_sensor_protocol_r2_prepare_load>
 800d496:	b350      	cbz	r0, 800d4ee <acc_cpd_hibernate_test+0x72>
 800d498:	9b03      	ldr	r3, [sp, #12]
 800d49a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800d54c <acc_cpd_hibernate_test+0xd0>
 800d49e:	9902      	ldr	r1, [sp, #8]
 800d4a0:	f5c4 75d5 	rsb	r5, r4, #426	; 0x1aa
 800d4a4:	429d      	cmp	r5, r3
 800d4a6:	bf28      	it	cs
 800d4a8:	461d      	movcs	r5, r3
 800d4aa:	ea4f 0954 	mov.w	r9, r4, lsr #1
 800d4ae:	086a      	lsrs	r2, r5, #1
 800d4b0:	eb08 0089 	add.w	r0, r8, r9, lsl #2
 800d4b4:	f003 f93a 	bl	801072c <acc_confprogram_copy>
 800d4b8:	462b      	mov	r3, r5
 800d4ba:	463a      	mov	r2, r7
 800d4bc:	fa1f f189 	uxth.w	r1, r9
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	f7fc f933 	bl	800972c <acc_sensor_r2_load_confmem>
 800d4c6:	9b03      	ldr	r3, [sp, #12]
 800d4c8:	441c      	add	r4, r3
 800d4ca:	f5b4 7fd5 	cmp.w	r4, #426	; 0x1aa
 800d4ce:	d3e6      	bcc.n	800d49e <acc_cpd_hibernate_test+0x22>
 800d4d0:	2145      	movs	r1, #69	; 0x45
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	f7fc fcb0 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800d4d8:	4605      	mov	r5, r0
 800d4da:	b990      	cbnz	r0, 800d502 <acc_cpd_hibernate_test+0x86>
 800d4dc:	4b17      	ldr	r3, [pc, #92]	; (800d53c <acc_cpd_hibernate_test+0xc0>)
 800d4de:	4a18      	ldr	r2, [pc, #96]	; (800d540 <acc_cpd_hibernate_test+0xc4>)
 800d4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e2:	4918      	ldr	r1, [pc, #96]	; (800d544 <acc_cpd_hibernate_test+0xc8>)
 800d4e4:	4798      	blx	r3
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	b005      	add	sp, #20
 800d4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ee:	4b13      	ldr	r3, [pc, #76]	; (800d53c <acc_cpd_hibernate_test+0xc0>)
 800d4f0:	4a15      	ldr	r2, [pc, #84]	; (800d548 <acc_cpd_hibernate_test+0xcc>)
 800d4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f4:	4913      	ldr	r1, [pc, #76]	; (800d544 <acc_cpd_hibernate_test+0xc8>)
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	4798      	blx	r3
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	b005      	add	sp, #20
 800d4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d502:	2301      	movs	r3, #1
 800d504:	220b      	movs	r2, #11
 800d506:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7fc fe18 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800d510:	4605      	mov	r5, r0
 800d512:	2800      	cmp	r0, #0
 800d514:	d0f1      	beq.n	800d4fa <acc_cpd_hibernate_test+0x7e>
 800d516:	4630      	mov	r0, r6
 800d518:	f7f9 fc6e 	bl	8006df8 <acc_rss_integration_sensor_device_hibernate_enter>
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7f9 fc73 	bl	8006e08 <acc_rss_integration_sensor_device_hibernate_exit>
 800d522:	4630      	mov	r0, r6
 800d524:	2301      	movs	r3, #1
 800d526:	2202      	movs	r2, #2
 800d528:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d52c:	f7fc fe08 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800d530:	4605      	mov	r5, r0
 800d532:	4628      	mov	r0, r5
 800d534:	b005      	add	sp, #20
 800d536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d53a:	bf00      	nop
 800d53c:	20000640 	.word	0x20000640
 800d540:	08017b10 	.word	0x08017b10
 800d544:	08017afc 	.word	0x08017afc
 800d548:	08017ac4 	.word	0x08017ac4
 800d54c:	08012db4 	.word	0x08012db4

0800d550 <wait_for_event.constprop.0>:
 800d550:	b530      	push	{r4, r5, lr}
 800d552:	2a00      	cmp	r2, #0
 800d554:	bf18      	it	ne
 800d556:	2205      	movne	r2, #5
 800d558:	b083      	sub	sp, #12
 800d55a:	bf08      	it	eq
 800d55c:	2200      	moveq	r2, #0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	460c      	mov	r4, r1
 800d562:	bf18      	it	ne
 800d564:	2264      	movne	r2, #100	; 0x64
 800d566:	ab01      	add	r3, sp, #4
 800d568:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d56c:	4605      	mov	r5, r0
 800d56e:	f7fc fd7d 	bl	800a06c <acc_sensor_protocol_r2_wait_for_event>
 800d572:	b158      	cbz	r0, 800d58c <wait_for_event.constprop.0+0x3c>
 800d574:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d578:	42a3      	cmp	r3, r4
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	d008      	beq.n	800d590 <wait_for_event.constprop.0+0x40>
 800d57e:	4907      	ldr	r1, [pc, #28]	; (800d59c <wait_for_event.constprop.0+0x4c>)
 800d580:	4a07      	ldr	r2, [pc, #28]	; (800d5a0 <wait_for_event.constprop.0+0x50>)
 800d582:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800d584:	4907      	ldr	r1, [pc, #28]	; (800d5a4 <wait_for_event.constprop.0+0x54>)
 800d586:	2000      	movs	r0, #0
 800d588:	47a0      	blx	r4
 800d58a:	2000      	movs	r0, #0
 800d58c:	b003      	add	sp, #12
 800d58e:	bd30      	pop	{r4, r5, pc}
 800d590:	2a02      	cmp	r2, #2
 800d592:	d1fb      	bne.n	800d58c <wait_for_event.constprop.0+0x3c>
 800d594:	4628      	mov	r0, r5
 800d596:	f7fc fcdb 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800d59a:	e7f7      	b.n	800d58c <wait_for_event.constprop.0+0x3c>
 800d59c:	20000640 	.word	0x20000640
 800d5a0:	08017b3c 	.word	0x08017b3c
 800d5a4:	08017b68 	.word	0x08017b68

0800d5a8 <acc_cpd_interrupt_test>:
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	ed2d 8b02 	vpush	{d8}
 800d5b0:	f8d2 a000 	ldr.w	sl, [r2]
 800d5b4:	ed92 8a01 	vldr	s16, [r2, #4]
 800d5b8:	b091      	sub	sp, #68	; 0x44
 800d5ba:	4683      	mov	fp, r0
 800d5bc:	ac0e      	add	r4, sp, #56	; 0x38
 800d5be:	461d      	mov	r5, r3
 800d5c0:	9203      	str	r2, [sp, #12]
 800d5c2:	9400      	str	r4, [sp, #0]
 800d5c4:	460a      	mov	r2, r1
 800d5c6:	2400      	movs	r4, #0
 800d5c8:	4650      	mov	r0, sl
 800d5ca:	4659      	mov	r1, fp
 800d5cc:	ab0d      	add	r3, sp, #52	; 0x34
 800d5ce:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800d5d2:	950b      	str	r5, [sp, #44]	; 0x2c
 800d5d4:	f7fc fbcc 	bl	8009d70 <acc_sensor_protocol_r2_prepare_load>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	f000 8131 	beq.w	800d840 <acc_cpd_interrupt_test+0x298>
 800d5de:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800d8ac <acc_cpd_interrupt_test+0x304>
 800d5e2:	eddf 7ab3 	vldr	s15, [pc, #716]	; 800d8b0 <acc_cpd_interrupt_test+0x308>
 800d5e6:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800d8b4 <acc_cpd_interrupt_test+0x30c>
 800d5ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d5ec:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 800d8e8 <acc_cpd_interrupt_test+0x340>
 800d5f0:	ee68 6a26 	vmul.f32	s13, s16, s13
 800d5f4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d5f8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d5fc:	ee28 7a07 	vmul.f32	s14, s16, s14
 800d600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d604:	ee16 3a90 	vmov	r3, s13
 800d608:	ee17 1a90 	vmov	r1, s15
 800d60c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800d610:	b29e      	uxth	r6, r3
 800d612:	0c1b      	lsrs	r3, r3, #16
 800d614:	ee17 5a90 	vmov	r5, s15
 800d618:	3b01      	subs	r3, #1
 800d61a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800d61e:	3901      	subs	r1, #1
 800d620:	9308      	str	r3, [sp, #32]
 800d622:	b28b      	uxth	r3, r1
 800d624:	ee17 2a90 	vmov	r2, s15
 800d628:	9306      	str	r3, [sp, #24]
 800d62a:	0c2b      	lsrs	r3, r5, #16
 800d62c:	9309      	str	r3, [sp, #36]	; 0x24
 800d62e:	b2ab      	uxth	r3, r5
 800d630:	930a      	str	r3, [sp, #40]	; 0x28
 800d632:	b293      	uxth	r3, r2
 800d634:	3e01      	subs	r6, #1
 800d636:	9304      	str	r3, [sp, #16]
 800d638:	0c13      	lsrs	r3, r2, #16
 800d63a:	ee08 aa10 	vmov	s16, sl
 800d63e:	9607      	str	r6, [sp, #28]
 800d640:	9305      	str	r3, [sp, #20]
 800d642:	46da      	mov	sl, fp
 800d644:	f5c4 78d5 	rsb	r8, r4, #426	; 0x1aa
 800d648:	4580      	cmp	r8, r0
 800d64a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d64c:	4b9a      	ldr	r3, [pc, #616]	; (800d8b8 <acc_cpd_interrupt_test+0x310>)
 800d64e:	bf28      	it	cs
 800d650:	4680      	movcs	r8, r0
 800d652:	ea4f 0b54 	mov.w	fp, r4, lsr #1
 800d656:	4629      	mov	r1, r5
 800d658:	eb03 008b 	add.w	r0, r3, fp, lsl #2
 800d65c:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800d660:	f003 f864 	bl	801072c <acc_confprogram_copy>
 800d664:	9b05      	ldr	r3, [sp, #20]
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	b2a6      	uxth	r6, r4
 800d66a:	fa1f f788 	uxth.w	r7, r8
 800d66e:	2300      	movs	r3, #0
 800d670:	4628      	mov	r0, r5
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	463a      	mov	r2, r7
 800d676:	4631      	mov	r1, r6
 800d678:	464b      	mov	r3, r9
 800d67a:	f002 ff5f 	bl	801053c <acc_confprogram_patch_offset>
 800d67e:	9b04      	ldr	r3, [sp, #16]
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	2301      	movs	r3, #1
 800d684:	4628      	mov	r0, r5
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	463a      	mov	r2, r7
 800d68a:	4631      	mov	r1, r6
 800d68c:	464b      	mov	r3, r9
 800d68e:	f002 ff55 	bl	801053c <acc_confprogram_patch_offset>
 800d692:	9b06      	ldr	r3, [sp, #24]
 800d694:	9301      	str	r3, [sp, #4]
 800d696:	2310      	movs	r3, #16
 800d698:	4628      	mov	r0, r5
 800d69a:	463a      	mov	r2, r7
 800d69c:	4631      	mov	r1, r6
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	464b      	mov	r3, r9
 800d6a2:	f002 ff4b 	bl	801053c <acc_confprogram_patch_offset>
 800d6a6:	9a08      	ldr	r2, [sp, #32]
 800d6a8:	9201      	str	r2, [sp, #4]
 800d6aa:	2311      	movs	r3, #17
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	463a      	mov	r2, r7
 800d6b0:	4631      	mov	r1, r6
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	464b      	mov	r3, r9
 800d6b6:	f002 ff41 	bl	801053c <acc_confprogram_patch_offset>
 800d6ba:	9a07      	ldr	r2, [sp, #28]
 800d6bc:	9201      	str	r2, [sp, #4]
 800d6be:	2312      	movs	r3, #18
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	463a      	mov	r2, r7
 800d6c4:	4631      	mov	r1, r6
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	464b      	mov	r3, r9
 800d6ca:	f002 ff37 	bl	801053c <acc_confprogram_patch_offset>
 800d6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6d0:	9201      	str	r2, [sp, #4]
 800d6d2:	2309      	movs	r3, #9
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	463a      	mov	r2, r7
 800d6d8:	4631      	mov	r1, r6
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	464b      	mov	r3, r9
 800d6de:	f002 ff2d 	bl	801053c <acc_confprogram_patch_offset>
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d6e6:	230a      	movs	r3, #10
 800d6e8:	e9cd 3500 	strd	r3, r5, [sp]
 800d6ec:	463a      	mov	r2, r7
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	464b      	mov	r3, r9
 800d6f2:	f002 ff23 	bl	801053c <acc_confprogram_patch_offset>
 800d6f6:	9803      	ldr	r0, [sp, #12]
 800d6f8:	4643      	mov	r3, r8
 800d6fa:	6800      	ldr	r0, [r0, #0]
 800d6fc:	4652      	mov	r2, sl
 800d6fe:	fa1f f18b 	uxth.w	r1, fp
 800d702:	f7fc f813 	bl	800972c <acc_sensor_r2_load_confmem>
 800d706:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d708:	4404      	add	r4, r0
 800d70a:	f5b4 7fd5 	cmp.w	r4, #426	; 0x1aa
 800d70e:	d399      	bcc.n	800d644 <acc_cpd_interrupt_test+0x9c>
 800d710:	ee18 0a10 	vmov	r0, s16
 800d714:	2110      	movs	r1, #16
 800d716:	f7fc fb8f 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800d71a:	ee18 aa10 	vmov	sl, s16
 800d71e:	4605      	mov	r5, r0
 800d720:	2800      	cmp	r0, #0
 800d722:	f000 8099 	beq.w	800d858 <acc_cpd_interrupt_test+0x2b0>
 800d726:	2400      	movs	r4, #0
 800d728:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800d8c8 <acc_cpd_interrupt_test+0x320>
 800d72c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800d8ec <acc_cpd_interrupt_test+0x344>
 800d730:	ed9f 8a62 	vldr	s16, [pc, #392]	; 800d8bc <acc_cpd_interrupt_test+0x314>
 800d734:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d738:	4625      	mov	r5, r4
 800d73a:	f7f9 fbfd 	bl	8006f38 <acc_rss_integration_log_level>
 800d73e:	2803      	cmp	r0, #3
 800d740:	b2a6      	uxth	r6, r4
 800d742:	d907      	bls.n	800d754 <acc_cpd_interrupt_test+0x1ac>
 800d744:	ee18 1a10 	vmov	r1, s16
 800d748:	f8d8 7034 	ldr.w	r7, [r8, #52]	; 0x34
 800d74c:	1c63      	adds	r3, r4, #1
 800d74e:	464a      	mov	r2, r9
 800d750:	2004      	movs	r0, #4
 800d752:	47b8      	blx	r7
 800d754:	fab6 f386 	clz	r3, r6
 800d758:	f89b 2008 	ldrb.w	r2, [fp, #8]
 800d75c:	095b      	lsrs	r3, r3, #5
 800d75e:	210a      	movs	r1, #10
 800d760:	4650      	mov	r0, sl
 800d762:	f7ff fef5 	bl	800d550 <wait_for_event.constprop.0>
 800d766:	2800      	cmp	r0, #0
 800d768:	f000 8081 	beq.w	800d86e <acc_cpd_interrupt_test+0x2c6>
 800d76c:	b16c      	cbz	r4, 800d78a <acc_cpd_interrupt_test+0x1e2>
 800d76e:	aa0d      	add	r2, sp, #52	; 0x34
 800d770:	21ed      	movs	r1, #237	; 0xed
 800d772:	4650      	mov	r0, sl
 800d774:	f7fd f910 	bl	800a998 <acc_sensor_reg_read>
 800d778:	ab10      	add	r3, sp, #64	; 0x40
 800d77a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800d77e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d782:	f823 2c08 	strh.w	r2, [r3, #-8]
 800d786:	3501      	adds	r5, #1
 800d788:	b2ad      	uxth	r5, r5
 800d78a:	4650      	mov	r0, sl
 800d78c:	aa0d      	add	r2, sp, #52	; 0x34
 800d78e:	2127      	movs	r1, #39	; 0x27
 800d790:	f7fd f902 	bl	800a998 <acc_sensor_reg_read>
 800d794:	4650      	mov	r0, sl
 800d796:	f7fc fbdb 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d06d      	beq.n	800d87a <acc_cpd_interrupt_test+0x2d2>
 800d79e:	f7f9 fbcb 	bl	8006f38 <acc_rss_integration_log_level>
 800d7a2:	2803      	cmp	r0, #3
 800d7a4:	d908      	bls.n	800d7b8 <acc_cpd_interrupt_test+0x210>
 800d7a6:	f8d8 6034 	ldr.w	r6, [r8, #52]	; 0x34
 800d7aa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800d7ae:	4a44      	ldr	r2, [pc, #272]	; (800d8c0 <acc_cpd_interrupt_test+0x318>)
 800d7b0:	ee18 1a10 	vmov	r1, s16
 800d7b4:	2004      	movs	r0, #4
 800d7b6:	47b0      	blx	r6
 800d7b8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800d7bc:	3401      	adds	r4, #1
 800d7be:	42a3      	cmp	r3, r4
 800d7c0:	d15d      	bne.n	800d87e <acc_cpd_interrupt_test+0x2d6>
 800d7c2:	f7f9 fbb9 	bl	8006f38 <acc_rss_integration_log_level>
 800d7c6:	2803      	cmp	r0, #3
 800d7c8:	d906      	bls.n	800d7d8 <acc_cpd_interrupt_test+0x230>
 800d7ca:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800d7ce:	4a3d      	ldr	r2, [pc, #244]	; (800d8c4 <acc_cpd_interrupt_test+0x31c>)
 800d7d0:	ee18 1a10 	vmov	r1, s16
 800d7d4:	2004      	movs	r0, #4
 800d7d6:	4798      	blx	r3
 800d7d8:	2c05      	cmp	r4, #5
 800d7da:	d1ae      	bne.n	800d73a <acc_cpd_interrupt_test+0x192>
 800d7dc:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800d7e0:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 800d7e4:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800d7e8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d7ec:	9a03      	ldr	r2, [sp, #12]
 800d7ee:	1a1b      	subs	r3, r3, r0
 800d7f0:	1b09      	subs	r1, r1, r4
 800d7f2:	b289      	uxth	r1, r1
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	ee07 1a10 	vmov	s14, r1
 800d7fa:	ee07 3a90 	vmov	s15, r3
 800d7fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d806:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800d80a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d80e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d814:	7a12      	ldrb	r2, [r2, #8]
 800d816:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d81a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d81e:	ed83 7a00 	vstr	s14, [r3]
 800d822:	edc3 7a01 	vstr	s15, [r3, #4]
 800d826:	4650      	mov	r0, sl
 800d828:	2300      	movs	r3, #0
 800d82a:	2102      	movs	r1, #2
 800d82c:	f7ff fe90 	bl	800d550 <wait_for_event.constprop.0>
 800d830:	4605      	mov	r5, r0
 800d832:	b958      	cbnz	r0, 800d84c <acc_cpd_interrupt_test+0x2a4>
 800d834:	4b24      	ldr	r3, [pc, #144]	; (800d8c8 <acc_cpd_interrupt_test+0x320>)
 800d836:	4a25      	ldr	r2, [pc, #148]	; (800d8cc <acc_cpd_interrupt_test+0x324>)
 800d838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d83a:	4920      	ldr	r1, [pc, #128]	; (800d8bc <acc_cpd_interrupt_test+0x314>)
 800d83c:	4798      	blx	r3
 800d83e:	e005      	b.n	800d84c <acc_cpd_interrupt_test+0x2a4>
 800d840:	4b21      	ldr	r3, [pc, #132]	; (800d8c8 <acc_cpd_interrupt_test+0x320>)
 800d842:	4a23      	ldr	r2, [pc, #140]	; (800d8d0 <acc_cpd_interrupt_test+0x328>)
 800d844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d846:	491d      	ldr	r1, [pc, #116]	; (800d8bc <acc_cpd_interrupt_test+0x314>)
 800d848:	4605      	mov	r5, r0
 800d84a:	4798      	blx	r3
 800d84c:	4628      	mov	r0, r5
 800d84e:	b011      	add	sp, #68	; 0x44
 800d850:	ecbd 8b02 	vpop	{d8}
 800d854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d858:	4b1b      	ldr	r3, [pc, #108]	; (800d8c8 <acc_cpd_interrupt_test+0x320>)
 800d85a:	4a1e      	ldr	r2, [pc, #120]	; (800d8d4 <acc_cpd_interrupt_test+0x32c>)
 800d85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85e:	4917      	ldr	r1, [pc, #92]	; (800d8bc <acc_cpd_interrupt_test+0x314>)
 800d860:	4798      	blx	r3
 800d862:	4628      	mov	r0, r5
 800d864:	b011      	add	sp, #68	; 0x44
 800d866:	ecbd 8b02 	vpop	{d8}
 800d86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86e:	4b16      	ldr	r3, [pc, #88]	; (800d8c8 <acc_cpd_interrupt_test+0x320>)
 800d870:	b9be      	cbnz	r6, 800d8a2 <acc_cpd_interrupt_test+0x2fa>
 800d872:	4a19      	ldr	r2, [pc, #100]	; (800d8d8 <acc_cpd_interrupt_test+0x330>)
 800d874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d876:	4911      	ldr	r1, [pc, #68]	; (800d8bc <acc_cpd_interrupt_test+0x314>)
 800d878:	4798      	blx	r3
 800d87a:	2500      	movs	r5, #0
 800d87c:	e7e6      	b.n	800d84c <acc_cpd_interrupt_test+0x2a4>
 800d87e:	4c12      	ldr	r4, [pc, #72]	; (800d8c8 <acc_cpd_interrupt_test+0x320>)
 800d880:	490e      	ldr	r1, [pc, #56]	; (800d8bc <acc_cpd_interrupt_test+0x314>)
 800d882:	4a16      	ldr	r2, [pc, #88]	; (800d8dc <acc_cpd_interrupt_test+0x334>)
 800d884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d886:	2000      	movs	r0, #0
 800d888:	4798      	blx	r3
 800d88a:	4650      	mov	r0, sl
 800d88c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d890:	f7fc fc84 	bl	800a19c <acc_sensor_protocol_r2_stop>
 800d894:	2800      	cmp	r0, #0
 800d896:	d1f0      	bne.n	800d87a <acc_cpd_interrupt_test+0x2d2>
 800d898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d89a:	4a11      	ldr	r2, [pc, #68]	; (800d8e0 <acc_cpd_interrupt_test+0x338>)
 800d89c:	4907      	ldr	r1, [pc, #28]	; (800d8bc <acc_cpd_interrupt_test+0x314>)
 800d89e:	4798      	blx	r3
 800d8a0:	e7eb      	b.n	800d87a <acc_cpd_interrupt_test+0x2d2>
 800d8a2:	4a10      	ldr	r2, [pc, #64]	; (800d8e4 <acc_cpd_interrupt_test+0x33c>)
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a6:	4905      	ldr	r1, [pc, #20]	; (800d8bc <acc_cpd_interrupt_test+0x314>)
 800d8a8:	4798      	blx	r3
 800d8aa:	e7e6      	b.n	800d87a <acc_cpd_interrupt_test+0x2d2>
 800d8ac:	3dcccccd 	.word	0x3dcccccd
 800d8b0:	3751b717 	.word	0x3751b717
 800d8b4:	36a7c5ac 	.word	0x36a7c5ac
 800d8b8:	08012db4 	.word	0x08012db4
 800d8bc:	08017b68 	.word	0x08017b68
 800d8c0:	08017cc0 	.word	0x08017cc0
 800d8c4:	08017cdc 	.word	0x08017cdc
 800d8c8:	20000640 	.word	0x20000640
 800d8cc:	08017d74 	.word	0x08017d74
 800d8d0:	08017b7c 	.word	0x08017b7c
 800d8d4:	08017bb4 	.word	0x08017bb4
 800d8d8:	08017bf8 	.word	0x08017bf8
 800d8dc:	08017d0c 	.word	0x08017d0c
 800d8e0:	08017d60 	.word	0x08017d60
 800d8e4:	08017c50 	.word	0x08017c50
 800d8e8:	0801923c 	.word	0x0801923c
 800d8ec:	08017be0 	.word	0x08017be0

0800d8f0 <acc_cpd_linear_sweep_load_program>:
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	ed2d 8b04 	vpush	{d8-d9}
 800d8f8:	4614      	mov	r4, r2
 800d8fa:	b08f      	sub	sp, #60	; 0x3c
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	4606      	mov	r6, r0
 800d900:	460d      	mov	r5, r1
 800d902:	ee08 0a90 	vmov	s17, r0
 800d906:	4601      	mov	r1, r0
 800d908:	469b      	mov	fp, r3
 800d90a:	2016      	movs	r0, #22
 800d90c:	23bc      	movs	r3, #188	; 0xbc
 800d90e:	f7f9 fb31 	bl	8006f74 <acc_probes_execute_struct>
 800d912:	ab0d      	add	r3, sp, #52	; 0x34
 800d914:	4622      	mov	r2, r4
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	4629      	mov	r1, r5
 800d91a:	4630      	mov	r0, r6
 800d91c:	2400      	movs	r4, #0
 800d91e:	ab0c      	add	r3, sp, #48	; 0x30
 800d920:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800d924:	f7fc fa24 	bl	8009d70 <acc_sensor_protocol_r2_prepare_load>
 800d928:	900b      	str	r0, [sp, #44]	; 0x2c
 800d92a:	b928      	cbnz	r0, 800d938 <acc_cpd_linear_sweep_load_program+0x48>
 800d92c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d92e:	b00f      	add	sp, #60	; 0x3c
 800d930:	ecbd 8b04 	vpop	{d8-d9}
 800d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d938:	f7f9 fafe 	bl	8006f38 <acc_rss_integration_log_level>
 800d93c:	2803      	cmp	r0, #3
 800d93e:	ee09 5a10 	vmov	s18, r5
 800d942:	d905      	bls.n	800d950 <acc_cpd_linear_sweep_load_program+0x60>
 800d944:	4b06      	ldr	r3, [pc, #24]	; (800d960 <acc_cpd_linear_sweep_load_program+0x70>)
 800d946:	4a07      	ldr	r2, [pc, #28]	; (800d964 <acc_cpd_linear_sweep_load_program+0x74>)
 800d948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d94a:	4907      	ldr	r1, [pc, #28]	; (800d968 <acc_cpd_linear_sweep_load_program+0x78>)
 800d94c:	2004      	movs	r0, #4
 800d94e:	4798      	blx	r3
 800d950:	2200      	movs	r2, #0
 800d952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d954:	f8df a018 	ldr.w	sl, [pc, #24]	; 800d970 <acc_cpd_linear_sweep_load_program+0x80>
 800d958:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800d96c <acc_cpd_linear_sweep_load_program+0x7c>
 800d95c:	9202      	str	r2, [sp, #8]
 800d95e:	e071      	b.n	800da44 <acc_cpd_linear_sweep_load_program+0x154>
 800d960:	20000640 	.word	0x20000640
 800d964:	08017d94 	.word	0x08017d94
 800d968:	08017dbc 	.word	0x08017dbc
 800d96c:	3751b717 	.word	0x3751b717
 800d970:	0801a5a4 	.word	0x0801a5a4
 800d974:	2323      	movs	r3, #35	; 0x23
 800d976:	2203      	movs	r2, #3
 800d978:	e9cd 3200 	strd	r3, r2, [sp]
 800d97c:	4629      	mov	r1, r5
 800d97e:	4653      	mov	r3, sl
 800d980:	4632      	mov	r2, r6
 800d982:	4620      	mov	r0, r4
 800d984:	f002 fdda 	bl	801053c <acc_confprogram_patch_offset>
 800d988:	237d      	movs	r3, #125	; 0x7d
 800d98a:	2200      	movs	r2, #0
 800d98c:	e9cd 3200 	strd	r3, r2, [sp]
 800d990:	4629      	mov	r1, r5
 800d992:	4653      	mov	r3, sl
 800d994:	4632      	mov	r2, r6
 800d996:	4620      	mov	r0, r4
 800d998:	f002 fdd0 	bl	801053c <acc_confprogram_patch_offset>
 800d99c:	2381      	movs	r3, #129	; 0x81
 800d99e:	2201      	movs	r2, #1
 800d9a0:	e9cd 3200 	strd	r3, r2, [sp]
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	4653      	mov	r3, sl
 800d9a8:	4632      	mov	r2, r6
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f002 fdc6 	bl	801053c <acc_confprogram_patch_offset>
 800d9b0:	2375      	movs	r3, #117	; 0x75
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	e9cd 3200 	strd	r3, r2, [sp]
 800d9b8:	4653      	mov	r3, sl
 800d9ba:	4632      	mov	r2, r6
 800d9bc:	4629      	mov	r1, r5
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f002 fdbc 	bl	801053c <acc_confprogram_patch_offset>
 800d9c4:	f89b 30ac 	ldrb.w	r3, [fp, #172]	; 0xac
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	2352      	movs	r3, #82	; 0x52
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	4632      	mov	r2, r6
 800d9d0:	4653      	mov	r3, sl
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f002 fdb1 	bl	801053c <acc_confprogram_patch_offset>
 800d9da:	eddb 7a2c 	vldr	s15, [fp, #176]	; 0xb0
 800d9de:	ee67 7a88 	vmul.f32	s15, s15, s16
 800d9e2:	2268      	movs	r2, #104	; 0x68
 800d9e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9e8:	9200      	str	r2, [sp, #0]
 800d9ea:	ee17 3a90 	vmov	r3, s15
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	9301      	str	r3, [sp, #4]
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	4653      	mov	r3, sl
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f002 fd9e 	bl	801053c <acc_confprogram_patch_offset>
 800da00:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	2353      	movs	r3, #83	; 0x53
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	4632      	mov	r2, r6
 800da0c:	4653      	mov	r3, sl
 800da0e:	4629      	mov	r1, r5
 800da10:	4620      	mov	r0, r4
 800da12:	f002 fd93 	bl	801053c <acc_confprogram_patch_offset>
 800da16:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f040 83d6 	bne.w	800e1cc <acc_cpd_linear_sweep_load_program+0x8dc>
 800da20:	9b03      	ldr	r3, [sp, #12]
 800da22:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800da26:	ee19 2a10 	vmov	r2, s18
 800da2a:	ee18 0a90 	vmov	r0, s17
 800da2e:	f7fb fe7d 	bl	800972c <acc_sensor_r2_load_confmem>
 800da32:	9902      	ldr	r1, [sp, #8]
 800da34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da36:	f240 7211 	movw	r2, #1809	; 0x711
 800da3a:	4419      	add	r1, r3
 800da3c:	4291      	cmp	r1, r2
 800da3e:	9102      	str	r1, [sp, #8]
 800da40:	f200 83d0 	bhi.w	800e1e4 <acc_cpd_linear_sweep_load_program+0x8f4>
 800da44:	9d02      	ldr	r5, [sp, #8]
 800da46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800da48:	48ab      	ldr	r0, [pc, #684]	; (800dcf8 <acc_cpd_linear_sweep_load_program+0x408>)
 800da4a:	f5c5 62e2 	rsb	r2, r5, #1808	; 0x710
 800da4e:	3202      	adds	r2, #2
 800da50:	429a      	cmp	r2, r3
 800da52:	4616      	mov	r6, r2
 800da54:	bf28      	it	cs
 800da56:	461e      	movcs	r6, r3
 800da58:	086b      	lsrs	r3, r5, #1
 800da5a:	0872      	lsrs	r2, r6, #1
 800da5c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800da60:	4621      	mov	r1, r4
 800da62:	9603      	str	r6, [sp, #12]
 800da64:	9304      	str	r3, [sp, #16]
 800da66:	f002 fe61 	bl	801072c <acc_confprogram_copy>
 800da6a:	f8db 3000 	ldr.w	r3, [fp]
 800da6e:	9301      	str	r3, [sp, #4]
 800da70:	b2b6      	uxth	r6, r6
 800da72:	b2ad      	uxth	r5, r5
 800da74:	2350      	movs	r3, #80	; 0x50
 800da76:	4632      	mov	r2, r6
 800da78:	4620      	mov	r0, r4
 800da7a:	4629      	mov	r1, r5
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4653      	mov	r3, sl
 800da80:	f002 fd5c 	bl	801053c <acc_confprogram_patch_offset>
 800da84:	f8db 3004 	ldr.w	r3, [fp, #4]
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	234e      	movs	r3, #78	; 0x4e
 800da8c:	4632      	mov	r2, r6
 800da8e:	4629      	mov	r1, r5
 800da90:	4620      	mov	r0, r4
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	4653      	mov	r3, sl
 800da96:	f002 fd51 	bl	801053c <acc_confprogram_patch_offset>
 800da9a:	f8db 3008 	ldr.w	r3, [fp, #8]
 800da9e:	9301      	str	r3, [sp, #4]
 800daa0:	234f      	movs	r3, #79	; 0x4f
 800daa2:	4632      	mov	r2, r6
 800daa4:	4629      	mov	r1, r5
 800daa6:	4620      	mov	r0, r4
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	4653      	mov	r3, sl
 800daac:	f002 fd46 	bl	801053c <acc_confprogram_patch_offset>
 800dab0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800dab4:	9301      	str	r3, [sp, #4]
 800dab6:	234c      	movs	r3, #76	; 0x4c
 800dab8:	4632      	mov	r2, r6
 800daba:	4629      	mov	r1, r5
 800dabc:	4620      	mov	r0, r4
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	4653      	mov	r3, sl
 800dac2:	f002 fd3b 	bl	801053c <acc_confprogram_patch_offset>
 800dac6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800daca:	9301      	str	r3, [sp, #4]
 800dacc:	2326      	movs	r3, #38	; 0x26
 800dace:	4632      	mov	r2, r6
 800dad0:	4629      	mov	r1, r5
 800dad2:	4620      	mov	r0, r4
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	4653      	mov	r3, sl
 800dad8:	f002 fd30 	bl	801053c <acc_confprogram_patch_offset>
 800dadc:	f8db 3014 	ldr.w	r3, [fp, #20]
 800dae0:	9301      	str	r3, [sp, #4]
 800dae2:	2373      	movs	r3, #115	; 0x73
 800dae4:	4632      	mov	r2, r6
 800dae6:	4629      	mov	r1, r5
 800dae8:	4620      	mov	r0, r4
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	4653      	mov	r3, sl
 800daee:	f002 fd25 	bl	801053c <acc_confprogram_patch_offset>
 800daf2:	f8db 3018 	ldr.w	r3, [fp, #24]
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	2362      	movs	r3, #98	; 0x62
 800dafa:	4632      	mov	r2, r6
 800dafc:	4629      	mov	r1, r5
 800dafe:	4620      	mov	r0, r4
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	4653      	mov	r3, sl
 800db04:	f002 fd1a 	bl	801053c <acc_confprogram_patch_offset>
 800db08:	f8db 301c 	ldr.w	r3, [fp, #28]
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	2337      	movs	r3, #55	; 0x37
 800db10:	4632      	mov	r2, r6
 800db12:	4629      	mov	r1, r5
 800db14:	4620      	mov	r0, r4
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	4653      	mov	r3, sl
 800db1a:	f002 fd0f 	bl	801053c <acc_confprogram_patch_offset>
 800db1e:	f8db 3020 	ldr.w	r3, [fp, #32]
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	2376      	movs	r3, #118	; 0x76
 800db26:	4632      	mov	r2, r6
 800db28:	4629      	mov	r1, r5
 800db2a:	4620      	mov	r0, r4
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	4653      	mov	r3, sl
 800db30:	f002 fd04 	bl	801053c <acc_confprogram_patch_offset>
 800db34:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	2369      	movs	r3, #105	; 0x69
 800db3c:	4632      	mov	r2, r6
 800db3e:	4629      	mov	r1, r5
 800db40:	4620      	mov	r0, r4
 800db42:	9300      	str	r3, [sp, #0]
 800db44:	4653      	mov	r3, sl
 800db46:	f002 fcf9 	bl	801053c <acc_confprogram_patch_offset>
 800db4a:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	236a      	movs	r3, #106	; 0x6a
 800db52:	4632      	mov	r2, r6
 800db54:	4629      	mov	r1, r5
 800db56:	4620      	mov	r0, r4
 800db58:	9300      	str	r3, [sp, #0]
 800db5a:	4653      	mov	r3, sl
 800db5c:	f002 fcee 	bl	801053c <acc_confprogram_patch_offset>
 800db60:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 800db64:	9301      	str	r3, [sp, #4]
 800db66:	2319      	movs	r3, #25
 800db68:	4632      	mov	r2, r6
 800db6a:	4629      	mov	r1, r5
 800db6c:	4620      	mov	r0, r4
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	4653      	mov	r3, sl
 800db72:	f002 fce3 	bl	801053c <acc_confprogram_patch_offset>
 800db76:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800db7a:	9301      	str	r3, [sp, #4]
 800db7c:	231a      	movs	r3, #26
 800db7e:	4632      	mov	r2, r6
 800db80:	4629      	mov	r1, r5
 800db82:	4620      	mov	r0, r4
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	4653      	mov	r3, sl
 800db88:	f002 fcd8 	bl	801053c <acc_confprogram_patch_offset>
 800db8c:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	231b      	movs	r3, #27
 800db94:	4632      	mov	r2, r6
 800db96:	4629      	mov	r1, r5
 800db98:	4620      	mov	r0, r4
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	4653      	mov	r3, sl
 800db9e:	f002 fccd 	bl	801053c <acc_confprogram_patch_offset>
 800dba2:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	231c      	movs	r3, #28
 800dbaa:	4632      	mov	r2, r6
 800dbac:	4629      	mov	r1, r5
 800dbae:	4620      	mov	r0, r4
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	4653      	mov	r3, sl
 800dbb4:	f002 fcc2 	bl	801053c <acc_confprogram_patch_offset>
 800dbb8:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 800dbbc:	9301      	str	r3, [sp, #4]
 800dbbe:	231d      	movs	r3, #29
 800dbc0:	4632      	mov	r2, r6
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	4653      	mov	r3, sl
 800dbca:	f002 fcb7 	bl	801053c <acc_confprogram_patch_offset>
 800dbce:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800dbd2:	9301      	str	r3, [sp, #4]
 800dbd4:	231e      	movs	r3, #30
 800dbd6:	4632      	mov	r2, r6
 800dbd8:	4629      	mov	r1, r5
 800dbda:	4620      	mov	r0, r4
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	4653      	mov	r3, sl
 800dbe0:	f002 fcac 	bl	801053c <acc_confprogram_patch_offset>
 800dbe4:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 800dbe8:	9301      	str	r3, [sp, #4]
 800dbea:	2355      	movs	r3, #85	; 0x55
 800dbec:	4632      	mov	r2, r6
 800dbee:	4629      	mov	r1, r5
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	9300      	str	r3, [sp, #0]
 800dbf4:	4653      	mov	r3, sl
 800dbf6:	f002 fca1 	bl	801053c <acc_confprogram_patch_offset>
 800dbfa:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
 800dbfe:	9301      	str	r3, [sp, #4]
 800dc00:	2356      	movs	r3, #86	; 0x56
 800dc02:	4632      	mov	r2, r6
 800dc04:	4629      	mov	r1, r5
 800dc06:	4620      	mov	r0, r4
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	4653      	mov	r3, sl
 800dc0c:	f002 fc96 	bl	801053c <acc_confprogram_patch_offset>
 800dc10:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	2358      	movs	r3, #88	; 0x58
 800dc18:	4632      	mov	r2, r6
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	4653      	mov	r3, sl
 800dc22:	f002 fc8b 	bl	801053c <acc_confprogram_patch_offset>
 800dc26:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 800dc2a:	9301      	str	r3, [sp, #4]
 800dc2c:	236b      	movs	r3, #107	; 0x6b
 800dc2e:	4632      	mov	r2, r6
 800dc30:	4629      	mov	r1, r5
 800dc32:	4620      	mov	r0, r4
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	4653      	mov	r3, sl
 800dc38:	f002 fc80 	bl	801053c <acc_confprogram_patch_offset>
 800dc3c:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800dc40:	9301      	str	r3, [sp, #4]
 800dc42:	2386      	movs	r3, #134	; 0x86
 800dc44:	4632      	mov	r2, r6
 800dc46:	4629      	mov	r1, r5
 800dc48:	4620      	mov	r0, r4
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	4653      	mov	r3, sl
 800dc4e:	f002 fc75 	bl	801053c <acc_confprogram_patch_offset>
 800dc52:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 800dc56:	9301      	str	r3, [sp, #4]
 800dc58:	2364      	movs	r3, #100	; 0x64
 800dc5a:	4632      	mov	r2, r6
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	4620      	mov	r0, r4
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	4653      	mov	r3, sl
 800dc64:	f002 fc6a 	bl	801053c <acc_confprogram_patch_offset>
 800dc68:	f8db 3060 	ldr.w	r3, [fp, #96]	; 0x60
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	2365      	movs	r3, #101	; 0x65
 800dc70:	4632      	mov	r2, r6
 800dc72:	4629      	mov	r1, r5
 800dc74:	4620      	mov	r0, r4
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	4653      	mov	r3, sl
 800dc7a:	f002 fc5f 	bl	801053c <acc_confprogram_patch_offset>
 800dc7e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 800dc82:	9301      	str	r3, [sp, #4]
 800dc84:	2340      	movs	r3, #64	; 0x40
 800dc86:	4632      	mov	r2, r6
 800dc88:	4629      	mov	r1, r5
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	4653      	mov	r3, sl
 800dc90:	f002 fc54 	bl	801053c <acc_confprogram_patch_offset>
 800dc94:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	2341      	movs	r3, #65	; 0x41
 800dc9c:	4632      	mov	r2, r6
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4620      	mov	r0, r4
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	4653      	mov	r3, sl
 800dca6:	f002 fc49 	bl	801053c <acc_confprogram_patch_offset>
 800dcaa:	f8db 306c 	ldr.w	r3, [fp, #108]	; 0x6c
 800dcae:	9301      	str	r3, [sp, #4]
 800dcb0:	2372      	movs	r3, #114	; 0x72
 800dcb2:	4632      	mov	r2, r6
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	4653      	mov	r3, sl
 800dcbc:	f002 fc3e 	bl	801053c <acc_confprogram_patch_offset>
 800dcc0:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	2354      	movs	r3, #84	; 0x54
 800dcc8:	4632      	mov	r2, r6
 800dcca:	4629      	mov	r1, r5
 800dccc:	4620      	mov	r0, r4
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	4653      	mov	r3, sl
 800dcd2:	f002 fc33 	bl	801053c <acc_confprogram_patch_offset>
 800dcd6:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 800dcda:	9301      	str	r3, [sp, #4]
 800dcdc:	2339      	movs	r3, #57	; 0x39
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	4632      	mov	r2, r6
 800dce2:	4653      	mov	r3, sl
 800dce4:	4629      	mov	r1, r5
 800dce6:	4620      	mov	r0, r4
 800dce8:	f002 fc28 	bl	801053c <acc_confprogram_patch_offset>
 800dcec:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f040 81fc 	bne.w	800e0ee <acc_cpd_linear_sweep_load_program+0x7fe>
 800dcf6:	e001      	b.n	800dcfc <acc_cpd_linear_sweep_load_program+0x40c>
 800dcf8:	08014660 	.word	0x08014660
 800dcfc:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	2351      	movs	r3, #81	; 0x51
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	4632      	mov	r2, r6
 800dd08:	4653      	mov	r3, sl
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f002 fc15 	bl	801053c <acc_confprogram_patch_offset>
 800dd12:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
 800dd16:	9301      	str	r3, [sp, #4]
 800dd18:	2377      	movs	r3, #119	; 0x77
 800dd1a:	9300      	str	r3, [sp, #0]
 800dd1c:	4632      	mov	r2, r6
 800dd1e:	4653      	mov	r3, sl
 800dd20:	4629      	mov	r1, r5
 800dd22:	4620      	mov	r0, r4
 800dd24:	f002 fc0a 	bl	801053c <acc_confprogram_patch_offset>
 800dd28:	f8db 3080 	ldr.w	r3, [fp, #128]	; 0x80
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	2344      	movs	r3, #68	; 0x44
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	4632      	mov	r2, r6
 800dd34:	4653      	mov	r3, sl
 800dd36:	4629      	mov	r1, r5
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f002 fbff 	bl	801053c <acc_confprogram_patch_offset>
 800dd3e:	f8db 3084 	ldr.w	r3, [fp, #132]	; 0x84
 800dd42:	9301      	str	r3, [sp, #4]
 800dd44:	2343      	movs	r3, #67	; 0x43
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	4632      	mov	r2, r6
 800dd4a:	4653      	mov	r3, sl
 800dd4c:	4629      	mov	r1, r5
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f002 fbf4 	bl	801053c <acc_confprogram_patch_offset>
 800dd54:	f8db 7088 	ldr.w	r7, [fp, #136]	; 0x88
 800dd58:	b2bb      	uxth	r3, r7
 800dd5a:	2b08      	cmp	r3, #8
 800dd5c:	f200 81b1 	bhi.w	800e0c2 <acc_cpd_linear_sweep_load_program+0x7d2>
 800dd60:	4698      	mov	r8, r3
 800dd62:	2700      	movs	r7, #0
 800dd64:	236c      	movs	r3, #108	; 0x6c
 800dd66:	e9cd 3800 	strd	r3, r8, [sp]
 800dd6a:	4632      	mov	r2, r6
 800dd6c:	4653      	mov	r3, sl
 800dd6e:	4629      	mov	r1, r5
 800dd70:	4620      	mov	r0, r4
 800dd72:	f002 fbe3 	bl	801053c <acc_confprogram_patch_offset>
 800dd76:	2359      	movs	r3, #89	; 0x59
 800dd78:	4632      	mov	r2, r6
 800dd7a:	e9cd 3800 	strd	r3, r8, [sp]
 800dd7e:	4629      	mov	r1, r5
 800dd80:	4653      	mov	r3, sl
 800dd82:	4620      	mov	r0, r4
 800dd84:	f002 fbda 	bl	801053c <acc_confprogram_patch_offset>
 800dd88:	216e      	movs	r1, #110	; 0x6e
 800dd8a:	4650      	mov	r0, sl
 800dd8c:	f002 fcca 	bl	8010724 <acc_confprogram_get_default_value>
 800dd90:	2170      	movs	r1, #112	; 0x70
 800dd92:	4603      	mov	r3, r0
 800dd94:	4650      	mov	r0, sl
 800dd96:	930a      	str	r3, [sp, #40]	; 0x28
 800dd98:	f002 fcc4 	bl	8010724 <acc_confprogram_get_default_value>
 800dd9c:	216f      	movs	r1, #111	; 0x6f
 800dd9e:	4681      	mov	r9, r0
 800dda0:	4650      	mov	r0, sl
 800dda2:	f002 fcbf 	bl	8010724 <acc_confprogram_get_default_value>
 800dda6:	215b      	movs	r1, #91	; 0x5b
 800dda8:	4680      	mov	r8, r0
 800ddaa:	4650      	mov	r0, sl
 800ddac:	f002 fcba 	bl	8010724 <acc_confprogram_get_default_value>
 800ddb0:	215d      	movs	r1, #93	; 0x5d
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	4650      	mov	r0, sl
 800ddb6:	9205      	str	r2, [sp, #20]
 800ddb8:	f002 fcb4 	bl	8010724 <acc_confprogram_get_default_value>
 800ddbc:	215c      	movs	r1, #92	; 0x5c
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	4650      	mov	r0, sl
 800ddc2:	9206      	str	r2, [sp, #24]
 800ddc4:	f002 fcae 	bl	8010724 <acc_confprogram_get_default_value>
 800ddc8:	214a      	movs	r1, #74	; 0x4a
 800ddca:	4602      	mov	r2, r0
 800ddcc:	4650      	mov	r0, sl
 800ddce:	9207      	str	r2, [sp, #28]
 800ddd0:	f002 fca8 	bl	8010724 <acc_confprogram_get_default_value>
 800ddd4:	2145      	movs	r1, #69	; 0x45
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	4650      	mov	r0, sl
 800ddda:	9208      	str	r2, [sp, #32]
 800dddc:	f002 fca2 	bl	8010724 <acc_confprogram_get_default_value>
 800dde0:	2122      	movs	r1, #34	; 0x22
 800dde2:	4602      	mov	r2, r0
 800dde4:	4650      	mov	r0, sl
 800dde6:	9209      	str	r2, [sp, #36]	; 0x24
 800dde8:	f002 fc9c 	bl	8010724 <acc_confprogram_get_default_value>
 800ddec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddee:	216e      	movs	r1, #110	; 0x6e
 800ddf0:	433b      	orrs	r3, r7
 800ddf2:	4684      	mov	ip, r0
 800ddf4:	9301      	str	r3, [sp, #4]
 800ddf6:	9100      	str	r1, [sp, #0]
 800ddf8:	4653      	mov	r3, sl
 800ddfa:	4632      	mov	r2, r6
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	4620      	mov	r0, r4
 800de00:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800de04:	f002 fb9a 	bl	801053c <acc_confprogram_patch_offset>
 800de08:	ea49 0307 	orr.w	r3, r9, r7
 800de0c:	2270      	movs	r2, #112	; 0x70
 800de0e:	e9cd 2300 	strd	r2, r3, [sp]
 800de12:	4629      	mov	r1, r5
 800de14:	4653      	mov	r3, sl
 800de16:	4632      	mov	r2, r6
 800de18:	4620      	mov	r0, r4
 800de1a:	f002 fb8f 	bl	801053c <acc_confprogram_patch_offset>
 800de1e:	ea48 0307 	orr.w	r3, r8, r7
 800de22:	226f      	movs	r2, #111	; 0x6f
 800de24:	e9cd 2300 	strd	r2, r3, [sp]
 800de28:	4629      	mov	r1, r5
 800de2a:	4653      	mov	r3, sl
 800de2c:	4632      	mov	r2, r6
 800de2e:	4620      	mov	r0, r4
 800de30:	f002 fb84 	bl	801053c <acc_confprogram_patch_offset>
 800de34:	9b05      	ldr	r3, [sp, #20]
 800de36:	225b      	movs	r2, #91	; 0x5b
 800de38:	433b      	orrs	r3, r7
 800de3a:	e9cd 2300 	strd	r2, r3, [sp]
 800de3e:	4629      	mov	r1, r5
 800de40:	4653      	mov	r3, sl
 800de42:	4632      	mov	r2, r6
 800de44:	4620      	mov	r0, r4
 800de46:	f002 fb79 	bl	801053c <acc_confprogram_patch_offset>
 800de4a:	9b06      	ldr	r3, [sp, #24]
 800de4c:	225d      	movs	r2, #93	; 0x5d
 800de4e:	433b      	orrs	r3, r7
 800de50:	e9cd 2300 	strd	r2, r3, [sp]
 800de54:	4629      	mov	r1, r5
 800de56:	4653      	mov	r3, sl
 800de58:	4632      	mov	r2, r6
 800de5a:	4620      	mov	r0, r4
 800de5c:	f002 fb6e 	bl	801053c <acc_confprogram_patch_offset>
 800de60:	9b07      	ldr	r3, [sp, #28]
 800de62:	225c      	movs	r2, #92	; 0x5c
 800de64:	433b      	orrs	r3, r7
 800de66:	e9cd 2300 	strd	r2, r3, [sp]
 800de6a:	4629      	mov	r1, r5
 800de6c:	4653      	mov	r3, sl
 800de6e:	4632      	mov	r2, r6
 800de70:	4620      	mov	r0, r4
 800de72:	f002 fb63 	bl	801053c <acc_confprogram_patch_offset>
 800de76:	9b08      	ldr	r3, [sp, #32]
 800de78:	224a      	movs	r2, #74	; 0x4a
 800de7a:	433b      	orrs	r3, r7
 800de7c:	e9cd 2300 	strd	r2, r3, [sp]
 800de80:	4629      	mov	r1, r5
 800de82:	4653      	mov	r3, sl
 800de84:	4632      	mov	r2, r6
 800de86:	4620      	mov	r0, r4
 800de88:	f002 fb58 	bl	801053c <acc_confprogram_patch_offset>
 800de8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de8e:	2245      	movs	r2, #69	; 0x45
 800de90:	433b      	orrs	r3, r7
 800de92:	e9cd 2300 	strd	r2, r3, [sp]
 800de96:	4629      	mov	r1, r5
 800de98:	4653      	mov	r3, sl
 800de9a:	4632      	mov	r2, r6
 800de9c:	4620      	mov	r0, r4
 800de9e:	f002 fb4d 	bl	801053c <acc_confprogram_patch_offset>
 800dea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dea4:	433b      	orrs	r3, r7
 800dea6:	461f      	mov	r7, r3
 800dea8:	2322      	movs	r3, #34	; 0x22
 800deaa:	4632      	mov	r2, r6
 800deac:	e9cd 3700 	strd	r3, r7, [sp]
 800deb0:	4629      	mov	r1, r5
 800deb2:	4653      	mov	r3, sl
 800deb4:	4620      	mov	r0, r4
 800deb6:	f002 fb41 	bl	801053c <acc_confprogram_patch_offset>
 800deba:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800debe:	2b05      	cmp	r3, #5
 800dec0:	bf8c      	ite	hi
 800dec2:	2264      	movhi	r2, #100	; 0x64
 800dec4:	2244      	movls	r2, #68	; 0x44
 800dec6:	2305      	movs	r3, #5
 800dec8:	e9cd 3200 	strd	r3, r2, [sp]
 800decc:	4629      	mov	r1, r5
 800dece:	4653      	mov	r3, sl
 800ded0:	4632      	mov	r2, r6
 800ded2:	4620      	mov	r0, r4
 800ded4:	f002 fb32 	bl	801053c <acc_confprogram_patch_offset>
 800ded8:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800dedc:	015b      	lsls	r3, r3, #5
 800dede:	3b03      	subs	r3, #3
 800dee0:	2224      	movs	r2, #36	; 0x24
 800dee2:	e9cd 2300 	strd	r2, r3, [sp]
 800dee6:	4629      	mov	r1, r5
 800dee8:	4653      	mov	r3, sl
 800deea:	4632      	mov	r2, r6
 800deec:	4620      	mov	r0, r4
 800deee:	f002 fb25 	bl	801053c <acc_confprogram_patch_offset>
 800def2:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800def6:	015b      	lsls	r3, r3, #5
 800def8:	085b      	lsrs	r3, r3, #1
 800defa:	3b03      	subs	r3, #3
 800defc:	2225      	movs	r2, #37	; 0x25
 800defe:	e9cd 2300 	strd	r2, r3, [sp]
 800df02:	4629      	mov	r1, r5
 800df04:	4653      	mov	r3, sl
 800df06:	4632      	mov	r2, r6
 800df08:	4620      	mov	r0, r4
 800df0a:	f002 fb17 	bl	801053c <acc_confprogram_patch_offset>
 800df0e:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
 800df12:	9301      	str	r3, [sp, #4]
 800df14:	2336      	movs	r3, #54	; 0x36
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	4632      	mov	r2, r6
 800df1a:	4653      	mov	r3, sl
 800df1c:	4629      	mov	r1, r5
 800df1e:	4620      	mov	r0, r4
 800df20:	f002 fb0c 	bl	801053c <acc_confprogram_patch_offset>
 800df24:	f8db 3098 	ldr.w	r3, [fp, #152]	; 0x98
 800df28:	225e      	movs	r2, #94	; 0x5e
 800df2a:	330e      	adds	r3, #14
 800df2c:	e9cd 2300 	strd	r2, r3, [sp]
 800df30:	4629      	mov	r1, r5
 800df32:	4653      	mov	r3, sl
 800df34:	4632      	mov	r2, r6
 800df36:	4620      	mov	r0, r4
 800df38:	f002 fb00 	bl	801053c <acc_confprogram_patch_offset>
 800df3c:	2120      	movs	r1, #32
 800df3e:	4650      	mov	r0, sl
 800df40:	f002 fbf0 	bl	8010724 <acc_confprogram_get_default_value>
 800df44:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800df48:	2b05      	cmp	r3, #5
 800df4a:	bf98      	it	ls
 800df4c:	3002      	addls	r0, #2
 800df4e:	fbb0 f7f3 	udiv	r7, r0, r3
 800df52:	fb03 0717 	mls	r7, r3, r7, r0
 800df56:	b107      	cbz	r7, 800df5a <acc_cpd_linear_sweep_load_program+0x66a>
 800df58:	1bdf      	subs	r7, r3, r7
 800df5a:	f8db 209c 	ldr.w	r2, [fp, #156]	; 0x9c
 800df5e:	231f      	movs	r3, #31
 800df60:	eb07 0802 	add.w	r8, r7, r2
 800df64:	e9cd 3800 	strd	r3, r8, [sp]
 800df68:	4632      	mov	r2, r6
 800df6a:	4653      	mov	r3, sl
 800df6c:	4629      	mov	r1, r5
 800df6e:	4620      	mov	r0, r4
 800df70:	f002 fae4 	bl	801053c <acc_confprogram_patch_offset>
 800df74:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f040 8089 	bne.w	800e090 <acc_cpd_linear_sweep_load_program+0x7a0>
 800df7e:	213a      	movs	r1, #58	; 0x3a
 800df80:	4650      	mov	r0, sl
 800df82:	f002 fbcf 	bl	8010724 <acc_confprogram_get_default_value>
 800df86:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800df8a:	2b05      	cmp	r3, #5
 800df8c:	bf8c      	ite	hi
 800df8e:	3007      	addhi	r0, #7
 800df90:	3009      	addls	r0, #9
 800df92:	fbb0 f7f3 	udiv	r7, r0, r3
 800df96:	fb03 0717 	mls	r7, r3, r7, r0
 800df9a:	b107      	cbz	r7, 800df9e <acc_cpd_linear_sweep_load_program+0x6ae>
 800df9c:	1bdf      	subs	r7, r3, r7
 800df9e:	f8db 20a0 	ldr.w	r2, [fp, #160]	; 0xa0
 800dfa2:	2366      	movs	r3, #102	; 0x66
 800dfa4:	eb07 0802 	add.w	r8, r7, r2
 800dfa8:	e9cd 3800 	strd	r3, r8, [sp]
 800dfac:	4632      	mov	r2, r6
 800dfae:	4653      	mov	r3, sl
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f002 fac2 	bl	801053c <acc_confprogram_patch_offset>
 800dfb8:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d14f      	bne.n	800e060 <acc_cpd_linear_sweep_load_program+0x770>
 800dfc0:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 800dfc4:	bbbb      	cbnz	r3, 800e036 <acc_cpd_linear_sweep_load_program+0x746>
 800dfc6:	f8db 70a4 	ldr.w	r7, [fp, #164]	; 0xa4
 800dfca:	2306      	movs	r3, #6
 800dfcc:	1e7a      	subs	r2, r7, #1
 800dfce:	e9cd 3200 	strd	r3, r2, [sp]
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	4653      	mov	r3, sl
 800dfd6:	4632      	mov	r2, r6
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f002 faaf 	bl	801053c <acc_confprogram_patch_offset>
 800dfde:	2304      	movs	r3, #4
 800dfe0:	2263      	movs	r2, #99	; 0x63
 800dfe2:	fbb3 f7f7 	udiv	r7, r3, r7
 800dfe6:	3f01      	subs	r7, #1
 800dfe8:	e9cd 2700 	strd	r2, r7, [sp]
 800dfec:	4653      	mov	r3, sl
 800dfee:	4632      	mov	r2, r6
 800dff0:	4629      	mov	r1, r5
 800dff2:	4620      	mov	r0, r4
 800dff4:	f002 faa2 	bl	801053c <acc_confprogram_patch_offset>
 800dff8:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	2361      	movs	r3, #97	; 0x61
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	4632      	mov	r2, r6
 800e004:	4653      	mov	r3, sl
 800e006:	4629      	mov	r1, r5
 800e008:	4620      	mov	r0, r4
 800e00a:	f002 fa97 	bl	801053c <acc_confprogram_patch_offset>
 800e00e:	f89b 30ad 	ldrb.w	r3, [fp, #173]	; 0xad
 800e012:	9301      	str	r3, [sp, #4]
 800e014:	2346      	movs	r3, #70	; 0x46
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	4632      	mov	r2, r6
 800e01a:	4653      	mov	r3, sl
 800e01c:	4629      	mov	r1, r5
 800e01e:	4620      	mov	r0, r4
 800e020:	f002 fa8c 	bl	801053c <acc_confprogram_patch_offset>
 800e024:	f89b 30ad 	ldrb.w	r3, [fp, #173]	; 0xad
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f47f aca3 	bne.w	800d974 <acc_cpd_linear_sweep_load_program+0x84>
 800e02e:	2223      	movs	r2, #35	; 0x23
 800e030:	e9cd 2300 	strd	r2, r3, [sp]
 800e034:	e4c0      	b.n	800d9b8 <acc_cpd_linear_sweep_load_program+0xc8>
 800e036:	233b      	movs	r3, #59	; 0x3b
 800e038:	2200      	movs	r2, #0
 800e03a:	e9cd 3200 	strd	r3, r2, [sp]
 800e03e:	4629      	mov	r1, r5
 800e040:	4653      	mov	r3, sl
 800e042:	4632      	mov	r2, r6
 800e044:	4620      	mov	r0, r4
 800e046:	f002 fa79 	bl	801053c <acc_confprogram_patch_offset>
 800e04a:	f7f8 ff75 	bl	8006f38 <acc_rss_integration_log_level>
 800e04e:	2801      	cmp	r0, #1
 800e050:	d9b9      	bls.n	800dfc6 <acc_cpd_linear_sweep_load_program+0x6d6>
 800e052:	4b6d      	ldr	r3, [pc, #436]	; (800e208 <acc_cpd_linear_sweep_load_program+0x918>)
 800e054:	4a6d      	ldr	r2, [pc, #436]	; (800e20c <acc_cpd_linear_sweep_load_program+0x91c>)
 800e056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e058:	496d      	ldr	r1, [pc, #436]	; (800e210 <acc_cpd_linear_sweep_load_program+0x920>)
 800e05a:	2002      	movs	r0, #2
 800e05c:	4798      	blx	r3
 800e05e:	e7b2      	b.n	800dfc6 <acc_cpd_linear_sweep_load_program+0x6d6>
 800e060:	f7f8 ff6a 	bl	8006f38 <acc_rss_integration_log_level>
 800e064:	2801      	cmp	r0, #1
 800e066:	d907      	bls.n	800e078 <acc_cpd_linear_sweep_load_program+0x788>
 800e068:	4b67      	ldr	r3, [pc, #412]	; (800e208 <acc_cpd_linear_sweep_load_program+0x918>)
 800e06a:	4a6a      	ldr	r2, [pc, #424]	; (800e214 <acc_cpd_linear_sweep_load_program+0x924>)
 800e06c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800e070:	4967      	ldr	r1, [pc, #412]	; (800e210 <acc_cpd_linear_sweep_load_program+0x920>)
 800e072:	463b      	mov	r3, r7
 800e074:	2002      	movs	r0, #2
 800e076:	47c8      	blx	r9
 800e078:	f7f8 ff5e 	bl	8006f38 <acc_rss_integration_log_level>
 800e07c:	2801      	cmp	r0, #1
 800e07e:	d99f      	bls.n	800dfc0 <acc_cpd_linear_sweep_load_program+0x6d0>
 800e080:	4b61      	ldr	r3, [pc, #388]	; (800e208 <acc_cpd_linear_sweep_load_program+0x918>)
 800e082:	4a65      	ldr	r2, [pc, #404]	; (800e218 <acc_cpd_linear_sweep_load_program+0x928>)
 800e084:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800e086:	4962      	ldr	r1, [pc, #392]	; (800e210 <acc_cpd_linear_sweep_load_program+0x920>)
 800e088:	4643      	mov	r3, r8
 800e08a:	2002      	movs	r0, #2
 800e08c:	47b8      	blx	r7
 800e08e:	e797      	b.n	800dfc0 <acc_cpd_linear_sweep_load_program+0x6d0>
 800e090:	f7f8 ff52 	bl	8006f38 <acc_rss_integration_log_level>
 800e094:	2801      	cmp	r0, #1
 800e096:	d907      	bls.n	800e0a8 <acc_cpd_linear_sweep_load_program+0x7b8>
 800e098:	4b5b      	ldr	r3, [pc, #364]	; (800e208 <acc_cpd_linear_sweep_load_program+0x918>)
 800e09a:	4a60      	ldr	r2, [pc, #384]	; (800e21c <acc_cpd_linear_sweep_load_program+0x92c>)
 800e09c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800e0a0:	495b      	ldr	r1, [pc, #364]	; (800e210 <acc_cpd_linear_sweep_load_program+0x920>)
 800e0a2:	463b      	mov	r3, r7
 800e0a4:	2002      	movs	r0, #2
 800e0a6:	47c8      	blx	r9
 800e0a8:	f7f8 ff46 	bl	8006f38 <acc_rss_integration_log_level>
 800e0ac:	2801      	cmp	r0, #1
 800e0ae:	f67f af66 	bls.w	800df7e <acc_cpd_linear_sweep_load_program+0x68e>
 800e0b2:	4b55      	ldr	r3, [pc, #340]	; (800e208 <acc_cpd_linear_sweep_load_program+0x918>)
 800e0b4:	4a5a      	ldr	r2, [pc, #360]	; (800e220 <acc_cpd_linear_sweep_load_program+0x930>)
 800e0b6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800e0b8:	4955      	ldr	r1, [pc, #340]	; (800e210 <acc_cpd_linear_sweep_load_program+0x920>)
 800e0ba:	4643      	mov	r3, r8
 800e0bc:	2002      	movs	r0, #2
 800e0be:	47b8      	blx	r7
 800e0c0:	e75d      	b.n	800df7e <acc_cpd_linear_sweep_load_program+0x68e>
 800e0c2:	fa1f f887 	uxth.w	r8, r7
 800e0c6:	2367      	movs	r3, #103	; 0x67
 800e0c8:	2202      	movs	r2, #2
 800e0ca:	f1a8 0808 	sub.w	r8, r8, #8
 800e0ce:	27ff      	movs	r7, #255	; 0xff
 800e0d0:	e9cd 3200 	strd	r3, r2, [sp]
 800e0d4:	fa07 f708 	lsl.w	r7, r7, r8
 800e0d8:	4653      	mov	r3, sl
 800e0da:	4632      	mov	r2, r6
 800e0dc:	4629      	mov	r1, r5
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f002 fa2c 	bl	801053c <acc_confprogram_patch_offset>
 800e0e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800e0e8:	f04f 0808 	mov.w	r8, #8
 800e0ec:	e63a      	b.n	800dd64 <acc_cpd_linear_sweep_load_program+0x474>
 800e0ee:	2310      	movs	r3, #16
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	e9cd 3200 	strd	r3, r2, [sp]
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	4653      	mov	r3, sl
 800e0fa:	4632      	mov	r2, r6
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f002 fa1d 	bl	801053c <acc_confprogram_patch_offset>
 800e102:	f64f 7880 	movw	r8, #65408	; 0xff80
 800e106:	2312      	movs	r3, #18
 800e108:	e9cd 3800 	strd	r3, r8, [sp]
 800e10c:	4632      	mov	r2, r6
 800e10e:	4653      	mov	r3, sl
 800e110:	4629      	mov	r1, r5
 800e112:	4620      	mov	r0, r4
 800e114:	f002 fa12 	bl	801053c <acc_confprogram_patch_offset>
 800e118:	2707      	movs	r7, #7
 800e11a:	2314      	movs	r3, #20
 800e11c:	e9cd 3700 	strd	r3, r7, [sp]
 800e120:	4632      	mov	r2, r6
 800e122:	4653      	mov	r3, sl
 800e124:	4629      	mov	r1, r5
 800e126:	4620      	mov	r0, r4
 800e128:	f002 fa08 	bl	801053c <acc_confprogram_patch_offset>
 800e12c:	2311      	movs	r3, #17
 800e12e:	e9cd 3800 	strd	r3, r8, [sp]
 800e132:	4632      	mov	r2, r6
 800e134:	4653      	mov	r3, sl
 800e136:	4629      	mov	r1, r5
 800e138:	4620      	mov	r0, r4
 800e13a:	f002 f9ff 	bl	801053c <acc_confprogram_patch_offset>
 800e13e:	2313      	movs	r3, #19
 800e140:	2200      	movs	r2, #0
 800e142:	e9cd 3200 	strd	r3, r2, [sp]
 800e146:	4629      	mov	r1, r5
 800e148:	4653      	mov	r3, sl
 800e14a:	4632      	mov	r2, r6
 800e14c:	4620      	mov	r0, r4
 800e14e:	f002 f9f5 	bl	801053c <acc_confprogram_patch_offset>
 800e152:	2315      	movs	r3, #21
 800e154:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 800e158:	e9cd 3200 	strd	r3, r2, [sp]
 800e15c:	4629      	mov	r1, r5
 800e15e:	4653      	mov	r3, sl
 800e160:	4632      	mov	r2, r6
 800e162:	4620      	mov	r0, r4
 800e164:	f002 f9ea 	bl	801053c <acc_confprogram_patch_offset>
 800e168:	2316      	movs	r3, #22
 800e16a:	e9cd 3700 	strd	r3, r7, [sp]
 800e16e:	4632      	mov	r2, r6
 800e170:	4653      	mov	r3, sl
 800e172:	4629      	mov	r1, r5
 800e174:	4620      	mov	r0, r4
 800e176:	f002 f9e1 	bl	801053c <acc_confprogram_patch_offset>
 800e17a:	230e      	movs	r3, #14
 800e17c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800e180:	e9cd 3200 	strd	r3, r2, [sp]
 800e184:	4629      	mov	r1, r5
 800e186:	4653      	mov	r3, sl
 800e188:	4632      	mov	r2, r6
 800e18a:	4620      	mov	r0, r4
 800e18c:	f002 f9d6 	bl	801053c <acc_confprogram_patch_offset>
 800e190:	230f      	movs	r3, #15
 800e192:	e9cd 3700 	strd	r3, r7, [sp]
 800e196:	4632      	mov	r2, r6
 800e198:	4653      	mov	r3, sl
 800e19a:	4629      	mov	r1, r5
 800e19c:	4620      	mov	r0, r4
 800e19e:	f002 f9cd 	bl	801053c <acc_confprogram_patch_offset>
 800e1a2:	2317      	movs	r3, #23
 800e1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1a8:	e9cd 3200 	strd	r3, r2, [sp]
 800e1ac:	4629      	mov	r1, r5
 800e1ae:	4653      	mov	r3, sl
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f002 f9c2 	bl	801053c <acc_confprogram_patch_offset>
 800e1b8:	2318      	movs	r3, #24
 800e1ba:	e9cd 3700 	strd	r3, r7, [sp]
 800e1be:	4632      	mov	r2, r6
 800e1c0:	4653      	mov	r3, sl
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f002 f9b9 	bl	801053c <acc_confprogram_patch_offset>
 800e1ca:	e597      	b.n	800dcfc <acc_cpd_linear_sweep_load_program+0x40c>
 800e1cc:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	2332      	movs	r3, #50	; 0x32
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	4632      	mov	r2, r6
 800e1d8:	4629      	mov	r1, r5
 800e1da:	4620      	mov	r0, r4
 800e1dc:	4653      	mov	r3, sl
 800e1de:	f002 f9ad 	bl	801053c <acc_confprogram_patch_offset>
 800e1e2:	e41d      	b.n	800da20 <acc_cpd_linear_sweep_load_program+0x130>
 800e1e4:	f7f8 fea8 	bl	8006f38 <acc_rss_integration_log_level>
 800e1e8:	2803      	cmp	r0, #3
 800e1ea:	f67f ab9f 	bls.w	800d92c <acc_cpd_linear_sweep_load_program+0x3c>
 800e1ee:	4b06      	ldr	r3, [pc, #24]	; (800e208 <acc_cpd_linear_sweep_load_program+0x918>)
 800e1f0:	4a0c      	ldr	r2, [pc, #48]	; (800e224 <acc_cpd_linear_sweep_load_program+0x934>)
 800e1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f4:	4906      	ldr	r1, [pc, #24]	; (800e210 <acc_cpd_linear_sweep_load_program+0x920>)
 800e1f6:	2004      	movs	r0, #4
 800e1f8:	4798      	blx	r3
 800e1fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e1fc:	b00f      	add	sp, #60	; 0x3c
 800e1fe:	ecbd 8b04 	vpop	{d8-d9}
 800e202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e206:	bf00      	nop
 800e208:	20000640 	.word	0x20000640
 800e20c:	08017e90 	.word	0x08017e90
 800e210:	08017dbc 	.word	0x08017dbc
 800e214:	08017e40 	.word	0x08017e40
 800e218:	08017e68 	.word	0x08017e68
 800e21c:	08017dd0 	.word	0x08017dd0
 800e220:	08017e08 	.word	0x08017e08
 800e224:	08017eac 	.word	0x08017eac

0800e228 <acc_cpd_linear_sweep_run_program>:
 800e228:	f240 213b 	movw	r1, #571	; 0x23b
 800e22c:	f7fb be04 	b.w	8009e38 <acc_sensor_protocol_r2_run_program>

0800e230 <acc_cpd_linear_sweep_update_program>:
 800e230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e232:	784b      	ldrb	r3, [r1, #1]
 800e234:	684f      	ldr	r7, [r1, #4]
 800e236:	68ce      	ldr	r6, [r1, #12]
 800e238:	b085      	sub	sp, #20
 800e23a:	460c      	mov	r4, r1
 800e23c:	4605      	mov	r5, r0
 800e23e:	b933      	cbnz	r3, 800e24e <acc_cpd_linear_sweep_update_program+0x1e>
 800e240:	7823      	ldrb	r3, [r4, #0]
 800e242:	b99b      	cbnz	r3, 800e26c <acc_cpd_linear_sweep_update_program+0x3c>
 800e244:	78a3      	ldrb	r3, [r4, #2]
 800e246:	b9fb      	cbnz	r3, 800e288 <acc_cpd_linear_sweep_update_program+0x58>
 800e248:	2001      	movs	r0, #1
 800e24a:	b005      	add	sp, #20
 800e24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e24e:	688b      	ldr	r3, [r1, #8]
 800e250:	4a14      	ldr	r2, [pc, #80]	; (800e2a4 <acc_cpd_linear_sweep_update_program+0x74>)
 800e252:	9202      	str	r2, [sp, #8]
 800e254:	330e      	adds	r3, #14
 800e256:	225e      	movs	r2, #94	; 0x5e
 800e258:	e9cd 2300 	strd	r2, r3, [sp]
 800e25c:	4912      	ldr	r1, [pc, #72]	; (800e2a8 <acc_cpd_linear_sweep_update_program+0x78>)
 800e25e:	4b13      	ldr	r3, [pc, #76]	; (800e2ac <acc_cpd_linear_sweep_update_program+0x7c>)
 800e260:	2200      	movs	r2, #0
 800e262:	f002 f9f3 	bl	801064c <acc_confprogram_live_patch>
 800e266:	7823      	ldrb	r3, [r4, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d0eb      	beq.n	800e244 <acc_cpd_linear_sweep_update_program+0x14>
 800e26c:	4a0d      	ldr	r2, [pc, #52]	; (800e2a4 <acc_cpd_linear_sweep_update_program+0x74>)
 800e26e:	9202      	str	r2, [sp, #8]
 800e270:	2336      	movs	r3, #54	; 0x36
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	490c      	ldr	r1, [pc, #48]	; (800e2a8 <acc_cpd_linear_sweep_update_program+0x78>)
 800e276:	4b0d      	ldr	r3, [pc, #52]	; (800e2ac <acc_cpd_linear_sweep_update_program+0x7c>)
 800e278:	9701      	str	r7, [sp, #4]
 800e27a:	2200      	movs	r2, #0
 800e27c:	4628      	mov	r0, r5
 800e27e:	f002 f9e5 	bl	801064c <acc_confprogram_live_patch>
 800e282:	78a3      	ldrb	r3, [r4, #2]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d0df      	beq.n	800e248 <acc_cpd_linear_sweep_update_program+0x18>
 800e288:	4a06      	ldr	r2, [pc, #24]	; (800e2a4 <acc_cpd_linear_sweep_update_program+0x74>)
 800e28a:	9202      	str	r2, [sp, #8]
 800e28c:	2372      	movs	r3, #114	; 0x72
 800e28e:	4628      	mov	r0, r5
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	4905      	ldr	r1, [pc, #20]	; (800e2a8 <acc_cpd_linear_sweep_update_program+0x78>)
 800e294:	4b05      	ldr	r3, [pc, #20]	; (800e2ac <acc_cpd_linear_sweep_update_program+0x7c>)
 800e296:	9601      	str	r6, [sp, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	f002 f9d7 	bl	801064c <acc_confprogram_live_patch>
 800e29e:	2001      	movs	r0, #1
 800e2a0:	b005      	add	sp, #20
 800e2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2a4:	080096d1 	.word	0x080096d1
 800e2a8:	08014660 	.word	0x08014660
 800e2ac:	0801a5a4 	.word	0x0801a5a4

0800e2b0 <acc_cpd_linear_sweep_get_info>:
 800e2b0:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800e2b4:	b16b      	cbz	r3, 800e2d2 <acc_cpd_linear_sweep_get_info+0x22>
 800e2b6:	b410      	push	{r4}
 800e2b8:	2203      	movs	r2, #3
 800e2ba:	2401      	movs	r4, #1
 800e2bc:	2300      	movs	r3, #0
 800e2be:	2002      	movs	r0, #2
 800e2c0:	e9c1 4003 	strd	r4, r0, [r1, #12]
 800e2c4:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800e2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2cc:	600a      	str	r2, [r1, #0]
 800e2ce:	614a      	str	r2, [r1, #20]
 800e2d0:	4770      	bx	lr
 800e2d2:	e9c1 3300 	strd	r3, r3, [r1]
 800e2d6:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800e2da:	e9c1 3304 	strd	r3, r3, [r1, #16]
 800e2de:	4770      	bx	lr

0800e2e0 <acc_cpd_linear_sweep_check>:
 800e2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e4:	461e      	mov	r6, r3
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	7033      	strb	r3, [r6, #0]
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	f891 10ad 	ldrb.w	r1, [r1, #173]	; 0xad
 800e2f0:	b082      	sub	sp, #8
 800e2f2:	b911      	cbnz	r1, 800e2fa <acc_cpd_linear_sweep_check+0x1a>
 800e2f4:	b002      	add	sp, #8
 800e2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fa:	6813      	ldr	r3, [r2, #0]
 800e2fc:	005b      	lsls	r3, r3, #1
 800e2fe:	f003 031f 	and.w	r3, r3, #31
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	4607      	mov	r7, r0
 800e306:	4615      	mov	r5, r2
 800e308:	f7f8 fe16 	bl	8006f38 <acc_rss_integration_log_level>
 800e30c:	2803      	cmp	r0, #3
 800e30e:	d907      	bls.n	800e320 <acc_cpd_linear_sweep_check+0x40>
 800e310:	4a16      	ldr	r2, [pc, #88]	; (800e36c <acc_cpd_linear_sweep_check+0x8c>)
 800e312:	682b      	ldr	r3, [r5, #0]
 800e314:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 800e318:	4915      	ldr	r1, [pc, #84]	; (800e370 <acc_cpd_linear_sweep_check+0x90>)
 800e31a:	4a16      	ldr	r2, [pc, #88]	; (800e374 <acc_cpd_linear_sweep_check+0x94>)
 800e31c:	2004      	movs	r0, #4
 800e31e:	47c0      	blx	r8
 800e320:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800e324:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800e328:	8c21      	ldrh	r1, [r4, #32]
 800e32a:	4638      	mov	r0, r7
 800e32c:	f001 f906 	bl	800f53c <acc_cpd_sweep_check_voffset_vslope>
 800e330:	b1b0      	cbz	r0, 800e360 <acc_cpd_linear_sweep_check+0x80>
 800e332:	6828      	ldr	r0, [r5, #0]
 800e334:	f001 f968 	bl	800f608 <acc_cpd_sweep_check_count_bad_sweeps>
 800e338:	2802      	cmp	r0, #2
 800e33a:	4604      	mov	r4, r0
 800e33c:	d9da      	bls.n	800e2f4 <acc_cpd_linear_sweep_check+0x14>
 800e33e:	f7f8 fdfb 	bl	8006f38 <acc_rss_integration_log_level>
 800e342:	b140      	cbz	r0, 800e356 <acc_cpd_linear_sweep_check+0x76>
 800e344:	4b09      	ldr	r3, [pc, #36]	; (800e36c <acc_cpd_linear_sweep_check+0x8c>)
 800e346:	4a0c      	ldr	r2, [pc, #48]	; (800e378 <acc_cpd_linear_sweep_check+0x98>)
 800e348:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800e34a:	4909      	ldr	r1, [pc, #36]	; (800e370 <acc_cpd_linear_sweep_check+0x90>)
 800e34c:	2005      	movs	r0, #5
 800e34e:	9000      	str	r0, [sp, #0]
 800e350:	4623      	mov	r3, r4
 800e352:	2001      	movs	r0, #1
 800e354:	47a8      	blx	r5
 800e356:	2301      	movs	r3, #1
 800e358:	7033      	strb	r3, [r6, #0]
 800e35a:	b002      	add	sp, #8
 800e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e360:	6828      	ldr	r0, [r5, #0]
 800e362:	f040 0001 	orr.w	r0, r0, #1
 800e366:	6028      	str	r0, [r5, #0]
 800e368:	e7e4      	b.n	800e334 <acc_cpd_linear_sweep_check+0x54>
 800e36a:	bf00      	nop
 800e36c:	20000640 	.word	0x20000640
 800e370:	08017dbc 	.word	0x08017dbc
 800e374:	08017ed0 	.word	0x08017ed0
 800e378:	08017ee8 	.word	0x08017ee8

0800e37c <acc_cpd_power_cycle_test>:
 800e37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e380:	b082      	sub	sp, #8
 800e382:	4605      	mov	r5, r0
 800e384:	f7f8 fdd8 	bl	8006f38 <acc_rss_integration_log_level>
 800e388:	2801      	cmp	r0, #1
 800e38a:	d905      	bls.n	800e398 <acc_cpd_power_cycle_test+0x1c>
 800e38c:	4b35      	ldr	r3, [pc, #212]	; (800e464 <acc_cpd_power_cycle_test+0xe8>)
 800e38e:	4a36      	ldr	r2, [pc, #216]	; (800e468 <acc_cpd_power_cycle_test+0xec>)
 800e390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e392:	4936      	ldr	r1, [pc, #216]	; (800e46c <acc_cpd_power_cycle_test+0xf0>)
 800e394:	2002      	movs	r0, #2
 800e396:	4798      	blx	r3
 800e398:	4f35      	ldr	r7, [pc, #212]	; (800e470 <acc_cpd_power_cycle_test+0xf4>)
 800e39a:	2421      	movs	r4, #33	; 0x21
 800e39c:	f241 2634 	movw	r6, #4660	; 0x1234
 800e3a0:	f04f 0800 	mov.w	r8, #0
 800e3a4:	e002      	b.n	800e3ac <acc_cpd_power_cycle_test+0x30>
 800e3a6:	f837 6b02 	ldrh.w	r6, [r7], #2
 800e3aa:	b29c      	uxth	r4, r3
 800e3ac:	4632      	mov	r2, r6
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f7fc fb07 	bl	800a9c4 <acc_sensor_reg_write>
 800e3b6:	f10d 0206 	add.w	r2, sp, #6
 800e3ba:	4621      	mov	r1, r4
 800e3bc:	4628      	mov	r0, r5
 800e3be:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e3c2:	f7fc fae9 	bl	800a998 <acc_sensor_reg_read>
 800e3c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e3ca:	42b3      	cmp	r3, r6
 800e3cc:	f104 0301 	add.w	r3, r4, #1
 800e3d0:	d13a      	bne.n	800e448 <acc_cpd_power_cycle_test+0xcc>
 800e3d2:	2c28      	cmp	r4, #40	; 0x28
 800e3d4:	d1e7      	bne.n	800e3a6 <acc_cpd_power_cycle_test+0x2a>
 800e3d6:	f7f8 fdaf 	bl	8006f38 <acc_rss_integration_log_level>
 800e3da:	2801      	cmp	r0, #1
 800e3dc:	d905      	bls.n	800e3ea <acc_cpd_power_cycle_test+0x6e>
 800e3de:	4b21      	ldr	r3, [pc, #132]	; (800e464 <acc_cpd_power_cycle_test+0xe8>)
 800e3e0:	4a24      	ldr	r2, [pc, #144]	; (800e474 <acc_cpd_power_cycle_test+0xf8>)
 800e3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e4:	4921      	ldr	r1, [pc, #132]	; (800e46c <acc_cpd_power_cycle_test+0xf0>)
 800e3e6:	2002      	movs	r0, #2
 800e3e8:	4798      	blx	r3
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	f7f8 fcfe 	bl	8006dec <acc_rss_integration_sensor_device_power_off>
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f7f8 fcf5 	bl	8006de0 <acc_rss_integration_sensor_device_power_on>
 800e3f6:	f7f8 fd9f 	bl	8006f38 <acc_rss_integration_log_level>
 800e3fa:	2801      	cmp	r0, #1
 800e3fc:	d905      	bls.n	800e40a <acc_cpd_power_cycle_test+0x8e>
 800e3fe:	4b19      	ldr	r3, [pc, #100]	; (800e464 <acc_cpd_power_cycle_test+0xe8>)
 800e400:	4a1d      	ldr	r2, [pc, #116]	; (800e478 <acc_cpd_power_cycle_test+0xfc>)
 800e402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e404:	4919      	ldr	r1, [pc, #100]	; (800e46c <acc_cpd_power_cycle_test+0xf0>)
 800e406:	2002      	movs	r0, #2
 800e408:	4798      	blx	r3
 800e40a:	f7f8 fd95 	bl	8006f38 <acc_rss_integration_log_level>
 800e40e:	2801      	cmp	r0, #1
 800e410:	d905      	bls.n	800e41e <acc_cpd_power_cycle_test+0xa2>
 800e412:	4b14      	ldr	r3, [pc, #80]	; (800e464 <acc_cpd_power_cycle_test+0xe8>)
 800e414:	4a19      	ldr	r2, [pc, #100]	; (800e47c <acc_cpd_power_cycle_test+0x100>)
 800e416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e418:	4914      	ldr	r1, [pc, #80]	; (800e46c <acc_cpd_power_cycle_test+0xf0>)
 800e41a:	2002      	movs	r0, #2
 800e41c:	4798      	blx	r3
 800e41e:	2421      	movs	r4, #33	; 0x21
 800e420:	2600      	movs	r6, #0
 800e422:	4621      	mov	r1, r4
 800e424:	f10d 0206 	add.w	r2, sp, #6
 800e428:	4628      	mov	r0, r5
 800e42a:	f8ad 6006 	strh.w	r6, [sp, #6]
 800e42e:	f7fc fab3 	bl	800a998 <acc_sensor_reg_read>
 800e432:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e436:	3401      	adds	r4, #1
 800e438:	b2a4      	uxth	r4, r4
 800e43a:	b97b      	cbnz	r3, 800e45c <acc_cpd_power_cycle_test+0xe0>
 800e43c:	2c29      	cmp	r4, #41	; 0x29
 800e43e:	d1f0      	bne.n	800e422 <acc_cpd_power_cycle_test+0xa6>
 800e440:	2001      	movs	r0, #1
 800e442:	b002      	add	sp, #8
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e448:	4b06      	ldr	r3, [pc, #24]	; (800e464 <acc_cpd_power_cycle_test+0xe8>)
 800e44a:	4a0d      	ldr	r2, [pc, #52]	; (800e480 <acc_cpd_power_cycle_test+0x104>)
 800e44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44e:	4907      	ldr	r1, [pc, #28]	; (800e46c <acc_cpd_power_cycle_test+0xf0>)
 800e450:	2000      	movs	r0, #0
 800e452:	4798      	blx	r3
 800e454:	2000      	movs	r0, #0
 800e456:	b002      	add	sp, #8
 800e458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e45c:	4b01      	ldr	r3, [pc, #4]	; (800e464 <acc_cpd_power_cycle_test+0xe8>)
 800e45e:	4a09      	ldr	r2, [pc, #36]	; (800e484 <acc_cpd_power_cycle_test+0x108>)
 800e460:	e7f4      	b.n	800e44c <acc_cpd_power_cycle_test+0xd0>
 800e462:	bf00      	nop
 800e464:	20000640 	.word	0x20000640
 800e468:	08017f24 	.word	0x08017f24
 800e46c:	08017f3c 	.word	0x08017f3c
 800e470:	08017fbe 	.word	0x08017fbe
 800e474:	08017f70 	.word	0x08017f70
 800e478:	08017f80 	.word	0x08017f80
 800e47c:	08017f8c 	.word	0x08017f8c
 800e480:	08017f54 	.word	0x08017f54
 800e484:	08017fa4 	.word	0x08017fa4

0800e488 <acc_cpd_refclk_stability_test>:
 800e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48c:	ed2d 8b08 	vpush	{d8-d11}
 800e490:	4614      	mov	r4, r2
 800e492:	b08f      	sub	sp, #60	; 0x3c
 800e494:	4683      	mov	fp, r0
 800e496:	4892      	ldr	r0, [pc, #584]	; (800e6e0 <acc_cpd_refclk_stability_test+0x258>)
 800e498:	460d      	mov	r5, r1
 800e49a:	ee0b 1a10 	vmov	s22, r1
 800e49e:	f7fc f963 	bl	800a768 <acc_diagnostic_log_set_scope>
 800e4a2:	6821      	ldr	r1, [r4, #0]
 800e4a4:	488f      	ldr	r0, [pc, #572]	; (800e6e4 <acc_cpd_refclk_stability_test+0x25c>)
 800e4a6:	f7fc f987 	bl	800a7b8 <acc_diagnostic_log_scalar>
 800e4aa:	ab0b      	add	r3, sp, #44	; 0x2c
 800e4ac:	6820      	ldr	r0, [r4, #0]
 800e4ae:	9300      	str	r3, [sp, #0]
 800e4b0:	2700      	movs	r7, #0
 800e4b2:	462a      	mov	r2, r5
 800e4b4:	4659      	mov	r1, fp
 800e4b6:	ab09      	add	r3, sp, #36	; 0x24
 800e4b8:	9709      	str	r7, [sp, #36]	; 0x24
 800e4ba:	970b      	str	r7, [sp, #44]	; 0x2c
 800e4bc:	f7fb fc58 	bl	8009d70 <acc_sensor_protocol_r2_prepare_load>
 800e4c0:	4605      	mov	r5, r0
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d076      	beq.n	800e5b4 <acc_cpd_refclk_stability_test+0x12c>
 800e4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4c8:	f8df 825c 	ldr.w	r8, [pc, #604]	; 800e728 <acc_cpd_refclk_stability_test+0x2a0>
 800e4cc:	463d      	mov	r5, r7
 800e4ce:	461f      	mov	r7, r3
 800e4d0:	f5c5 7300 	rsb	r3, r5, #512	; 0x200
 800e4d4:	429f      	cmp	r7, r3
 800e4d6:	bf28      	it	cs
 800e4d8:	461f      	movcs	r7, r3
 800e4da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e4dc:	4b82      	ldr	r3, [pc, #520]	; (800e6e8 <acc_cpd_refclk_stability_test+0x260>)
 800e4de:	ea4f 0955 	mov.w	r9, r5, lsr #1
 800e4e2:	087a      	lsrs	r2, r7, #1
 800e4e4:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 800e4e8:	4631      	mov	r1, r6
 800e4ea:	f002 f91f 	bl	801072c <acc_confprogram_copy>
 800e4ee:	8923      	ldrh	r3, [r4, #8]
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	201a      	movs	r0, #26
 800e4f4:	b2ba      	uxth	r2, r7
 800e4f6:	b2a9      	uxth	r1, r5
 800e4f8:	9000      	str	r0, [sp, #0]
 800e4fa:	4643      	mov	r3, r8
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	9207      	str	r2, [sp, #28]
 800e500:	9106      	str	r1, [sp, #24]
 800e502:	f002 f81b 	bl	801053c <acc_confprogram_patch_offset>
 800e506:	88a3      	ldrh	r3, [r4, #4]
 800e508:	9301      	str	r3, [sp, #4]
 800e50a:	2218      	movs	r2, #24
 800e50c:	9200      	str	r2, [sp, #0]
 800e50e:	4630      	mov	r0, r6
 800e510:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e514:	4643      	mov	r3, r8
 800e516:	f002 f811 	bl	801053c <acc_confprogram_patch_offset>
 800e51a:	f04f 0a19 	mov.w	sl, #25
 800e51e:	88e3      	ldrh	r3, [r4, #6]
 800e520:	9301      	str	r3, [sp, #4]
 800e522:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e526:	4630      	mov	r0, r6
 800e528:	4643      	mov	r3, r8
 800e52a:	f8cd a000 	str.w	sl, [sp]
 800e52e:	f002 f805 	bl	801053c <acc_confprogram_patch_offset>
 800e532:	8963      	ldrh	r3, [r4, #10]
 800e534:	9301      	str	r3, [sp, #4]
 800e536:	2316      	movs	r3, #22
 800e538:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e53c:	4630      	mov	r0, r6
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	4643      	mov	r3, r8
 800e542:	f001 fffb 	bl	801053c <acc_confprogram_patch_offset>
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	9301      	str	r3, [sp, #4]
 800e54a:	2310      	movs	r3, #16
 800e54c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e550:	4630      	mov	r0, r6
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	4643      	mov	r3, r8
 800e556:	f001 fff1 	bl	801053c <acc_confprogram_patch_offset>
 800e55a:	89e3      	ldrh	r3, [r4, #14]
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	231e      	movs	r3, #30
 800e560:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e564:	4630      	mov	r0, r6
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	4643      	mov	r3, r8
 800e56a:	f001 ffe7 	bl	801053c <acc_confprogram_patch_offset>
 800e56e:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 800e572:	2300      	movs	r3, #0
 800e574:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e578:	e9cd 3c00 	strd	r3, ip, [sp]
 800e57c:	4630      	mov	r0, r6
 800e57e:	4643      	mov	r3, r8
 800e580:	f001 ffdc 	bl	801053c <acc_confprogram_patch_offset>
 800e584:	463b      	mov	r3, r7
 800e586:	6820      	ldr	r0, [r4, #0]
 800e588:	465a      	mov	r2, fp
 800e58a:	fa1f f189 	uxth.w	r1, r9
 800e58e:	f7fb f8cd 	bl	800972c <acc_sensor_r2_load_confmem>
 800e592:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e594:	443d      	add	r5, r7
 800e596:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800e59a:	d399      	bcc.n	800e4d0 <acc_cpd_refclk_stability_test+0x48>
 800e59c:	6826      	ldr	r6, [r4, #0]
 800e59e:	4651      	mov	r1, sl
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f7fb fc49 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	b950      	cbnz	r0, 800e5c0 <acc_cpd_refclk_stability_test+0x138>
 800e5aa:	4b50      	ldr	r3, [pc, #320]	; (800e6ec <acc_cpd_refclk_stability_test+0x264>)
 800e5ac:	4a50      	ldr	r2, [pc, #320]	; (800e6f0 <acc_cpd_refclk_stability_test+0x268>)
 800e5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b0:	4950      	ldr	r1, [pc, #320]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e5b2:	4798      	blx	r3
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	b00f      	add	sp, #60	; 0x3c
 800e5b8:	ecbd 8b08 	vpop	{d8-d11}
 800e5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c0:	f7f8 fcba 	bl	8006f38 <acc_rss_integration_log_level>
 800e5c4:	2803      	cmp	r0, #3
 800e5c6:	d905      	bls.n	800e5d4 <acc_cpd_refclk_stability_test+0x14c>
 800e5c8:	4d48      	ldr	r5, [pc, #288]	; (800e6ec <acc_cpd_refclk_stability_test+0x264>)
 800e5ca:	4a4b      	ldr	r2, [pc, #300]	; (800e6f8 <acc_cpd_refclk_stability_test+0x270>)
 800e5cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e5ce:	4949      	ldr	r1, [pc, #292]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e5d0:	2004      	movs	r0, #4
 800e5d2:	4798      	blx	r3
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	2202      	movs	r2, #2
 800e5da:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e5de:	f7fb fdaf 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800e5e2:	b930      	cbnz	r0, 800e5f2 <acc_cpd_refclk_stability_test+0x16a>
 800e5e4:	2500      	movs	r5, #0
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	b00f      	add	sp, #60	; 0x3c
 800e5ea:	ecbd 8b08 	vpop	{d8-d11}
 800e5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f2:	f7f8 fca1 	bl	8006f38 <acc_rss_integration_log_level>
 800e5f6:	2803      	cmp	r0, #3
 800e5f8:	d905      	bls.n	800e606 <acc_cpd_refclk_stability_test+0x17e>
 800e5fa:	4d3c      	ldr	r5, [pc, #240]	; (800e6ec <acc_cpd_refclk_stability_test+0x264>)
 800e5fc:	4a3f      	ldr	r2, [pc, #252]	; (800e6fc <acc_cpd_refclk_stability_test+0x274>)
 800e5fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e600:	493c      	ldr	r1, [pc, #240]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e602:	2004      	movs	r0, #4
 800e604:	4798      	blx	r3
 800e606:	4b3e      	ldr	r3, [pc, #248]	; (800e700 <acc_cpd_refclk_stability_test+0x278>)
 800e608:	89a2      	ldrh	r2, [r4, #12]
 800e60a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e60e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e612:	ab0b      	add	r3, sp, #44	; 0x2c
 800e614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e618:	f04f 0807 	mov.w	r8, #7
 800e61c:	2600      	movs	r6, #0
 800e61e:	eddf aa39 	vldr	s21, [pc, #228]	; 800e704 <acc_cpd_refclk_stability_test+0x27c>
 800e622:	ed9f aa39 	vldr	s20, [pc, #228]	; 800e708 <acc_cpd_refclk_stability_test+0x280>
 800e626:	ed9f 9a39 	vldr	s18, [pc, #228]	; 800e70c <acc_cpd_refclk_stability_test+0x284>
 800e62a:	eddf 8a39 	vldr	s17, [pc, #228]	; 800e710 <acc_cpd_refclk_stability_test+0x288>
 800e62e:	eddf 9a39 	vldr	s19, [pc, #228]	; 800e714 <acc_cpd_refclk_stability_test+0x28c>
 800e632:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 800e636:	469a      	mov	sl, r3
 800e638:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800e63c:	9406      	str	r4, [sp, #24]
 800e63e:	9b06      	ldr	r3, [sp, #24]
 800e640:	681f      	ldr	r7, [r3, #0]
 800e642:	4638      	mov	r0, r7
 800e644:	f7fb fc72 	bl	8009f2c <acc_sensor_protocol_r2_is_sensor_running>
 800e648:	4605      	mov	r5, r0
 800e64a:	b190      	cbz	r0, 800e672 <acc_cpd_refclk_stability_test+0x1ea>
 800e64c:	4d27      	ldr	r5, [pc, #156]	; (800e6ec <acc_cpd_refclk_stability_test+0x264>)
 800e64e:	4a32      	ldr	r2, [pc, #200]	; (800e718 <acc_cpd_refclk_stability_test+0x290>)
 800e650:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800e652:	4928      	ldr	r1, [pc, #160]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e654:	463b      	mov	r3, r7
 800e656:	2000      	movs	r0, #0
 800e658:	47a0      	blx	r4
 800e65a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e65c:	4a2f      	ldr	r2, [pc, #188]	; (800e71c <acc_cpd_refclk_stability_test+0x294>)
 800e65e:	4925      	ldr	r1, [pc, #148]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e660:	2000      	movs	r0, #0
 800e662:	4798      	blx	r3
 800e664:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e666:	4a2e      	ldr	r2, [pc, #184]	; (800e720 <acc_cpd_refclk_stability_test+0x298>)
 800e668:	4922      	ldr	r1, [pc, #136]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e66a:	2000      	movs	r0, #0
 800e66c:	4798      	blx	r3
 800e66e:	2500      	movs	r5, #0
 800e670:	e7b9      	b.n	800e5e6 <acc_cpd_refclk_stability_test+0x15e>
 800e672:	4a2c      	ldr	r2, [pc, #176]	; (800e724 <acc_cpd_refclk_stability_test+0x29c>)
 800e674:	491c      	ldr	r1, [pc, #112]	; (800e6e8 <acc_cpd_refclk_stability_test+0x260>)
 800e676:	2310      	movs	r3, #16
 800e678:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	4602      	mov	r2, r0
 800e680:	4b29      	ldr	r3, [pc, #164]	; (800e728 <acc_cpd_refclk_stability_test+0x2a0>)
 800e682:	4638      	mov	r0, r7
 800e684:	f001 ffe2 	bl	801064c <acc_confprogram_live_patch>
 800e688:	2144      	movs	r1, #68	; 0x44
 800e68a:	4638      	mov	r0, r7
 800e68c:	f7fb fbd4 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800e690:	b928      	cbnz	r0, 800e69e <acc_cpd_refclk_stability_test+0x216>
 800e692:	4d16      	ldr	r5, [pc, #88]	; (800e6ec <acc_cpd_refclk_stability_test+0x264>)
 800e694:	4a25      	ldr	r2, [pc, #148]	; (800e72c <acc_cpd_refclk_stability_test+0x2a4>)
 800e696:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e698:	4916      	ldr	r1, [pc, #88]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e69a:	4798      	blx	r3
 800e69c:	e7dd      	b.n	800e65a <acc_cpd_refclk_stability_test+0x1d2>
 800e69e:	f7f8 fc4b 	bl	8006f38 <acc_rss_integration_log_level>
 800e6a2:	2803      	cmp	r0, #3
 800e6a4:	d905      	bls.n	800e6b2 <acc_cpd_refclk_stability_test+0x22a>
 800e6a6:	4911      	ldr	r1, [pc, #68]	; (800e6ec <acc_cpd_refclk_stability_test+0x264>)
 800e6a8:	4a21      	ldr	r2, [pc, #132]	; (800e730 <acc_cpd_refclk_stability_test+0x2a8>)
 800e6aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e6ac:	4911      	ldr	r1, [pc, #68]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e6ae:	2004      	movs	r0, #4
 800e6b0:	4798      	blx	r3
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	2209      	movs	r2, #9
 800e6b6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	f7fb fd40 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800e6c0:	b158      	cbz	r0, 800e6da <acc_cpd_refclk_stability_test+0x252>
 800e6c2:	ee1b 0a10 	vmov	r0, s22
 800e6c6:	2180      	movs	r1, #128	; 0x80
 800e6c8:	f7fb f868 	bl	800979c <acc_sensor_r2_buffer_processed_verify_size>
 800e6cc:	bba0      	cbnz	r0, 800e738 <acc_cpd_refclk_stability_test+0x2b0>
 800e6ce:	4d07      	ldr	r5, [pc, #28]	; (800e6ec <acc_cpd_refclk_stability_test+0x264>)
 800e6d0:	4a18      	ldr	r2, [pc, #96]	; (800e734 <acc_cpd_refclk_stability_test+0x2ac>)
 800e6d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e6d4:	4907      	ldr	r1, [pc, #28]	; (800e6f4 <acc_cpd_refclk_stability_test+0x26c>)
 800e6d6:	4798      	blx	r3
 800e6d8:	e7bf      	b.n	800e65a <acc_cpd_refclk_stability_test+0x1d2>
 800e6da:	4d04      	ldr	r5, [pc, #16]	; (800e6ec <acc_cpd_refclk_stability_test+0x264>)
 800e6dc:	e7bd      	b.n	800e65a <acc_cpd_refclk_stability_test+0x1d2>
 800e6de:	bf00      	nop
 800e6e0:	08017fcc 	.word	0x08017fcc
 800e6e4:	08016258 	.word	0x08016258
 800e6e8:	08013108 	.word	0x08013108
 800e6ec:	20000640 	.word	0x20000640
 800e6f0:	08017fe0 	.word	0x08017fe0
 800e6f4:	08018024 	.word	0x08018024
 800e6f8:	08018040 	.word	0x08018040
 800e6fc:	08018080 	.word	0x08018080
 800e700:	080122c0 	.word	0x080122c0
 800e704:	37800000 	.word	0x37800000
 800e708:	3f99999a 	.word	0x3f99999a
 800e70c:	350637bd 	.word	0x350637bd
 800e710:	49742400 	.word	0x49742400
 800e714:	3f19999a 	.word	0x3f19999a
 800e718:	08016fe8 	.word	0x08016fe8
 800e71c:	08018758 	.word	0x08018758
 800e720:	080181cc 	.word	0x080181cc
 800e724:	080096d1 	.word	0x080096d1
 800e728:	08019464 	.word	0x08019464
 800e72c:	080180c0 	.word	0x080180c0
 800e730:	08018108 	.word	0x08018108
 800e734:	0801705c 	.word	0x0801705c
 800e738:	2380      	movs	r3, #128	; 0x80
 800e73a:	2200      	movs	r2, #0
 800e73c:	4659      	mov	r1, fp
 800e73e:	4638      	mov	r0, r7
 800e740:	f7fb f834 	bl	80097ac <acc_sensor_r2_buffer_processed_read>
 800e744:	2380      	movs	r3, #128	; 0x80
 800e746:	4602      	mov	r2, r0
 800e748:	4681      	mov	r9, r0
 800e74a:	4639      	mov	r1, r7
 800e74c:	2000      	movs	r0, #0
 800e74e:	f7f8 fbf9 	bl	8006f44 <acc_probes_execute_uint16>
 800e752:	4638      	mov	r0, r7
 800e754:	f7fb fbfc 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800e758:	2800      	cmp	r0, #0
 800e75a:	d0be      	beq.n	800e6da <acc_cpd_refclk_stability_test+0x252>
 800e75c:	f7f8 fbec 	bl	8006f38 <acc_rss_integration_log_level>
 800e760:	2803      	cmp	r0, #3
 800e762:	d905      	bls.n	800e770 <acc_cpd_refclk_stability_test+0x2e8>
 800e764:	4991      	ldr	r1, [pc, #580]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e766:	4a92      	ldr	r2, [pc, #584]	; (800e9b0 <acc_cpd_refclk_stability_test+0x528>)
 800e768:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e76a:	4992      	ldr	r1, [pc, #584]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e76c:	2004      	movs	r0, #4
 800e76e:	4798      	blx	r3
 800e770:	4991      	ldr	r1, [pc, #580]	; (800e9b8 <acc_cpd_refclk_stability_test+0x530>)
 800e772:	4892      	ldr	r0, [pc, #584]	; (800e9bc <acc_cpd_refclk_stability_test+0x534>)
 800e774:	f7fc f810 	bl	800a798 <acc_diagnostic_log_array>
 800e778:	4648      	mov	r0, r9
 800e77a:	2180      	movs	r1, #128	; 0x80
 800e77c:	f7fc f824 	bl	800a7c8 <acc_diagnostic_log_data_u16>
 800e780:	9c06      	ldr	r4, [sp, #24]
 800e782:	f1a9 0302 	sub.w	r3, r9, #2
 800e786:	f109 00fe 	add.w	r0, r9, #254	; 0xfe
 800e78a:	2200      	movs	r2, #0
 800e78c:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 800e790:	4298      	cmp	r0, r3
 800e792:	440a      	add	r2, r1
 800e794:	d1fa      	bne.n	800e78c <acc_cpd_refclk_stability_test+0x304>
 800e796:	9406      	str	r4, [sp, #24]
 800e798:	ea4f 19d2 	mov.w	r9, r2, lsr #7
 800e79c:	f7f8 fbcc 	bl	8006f38 <acc_rss_integration_log_level>
 800e7a0:	2803      	cmp	r0, #3
 800e7a2:	d909      	bls.n	800e7b8 <acc_cpd_refclk_stability_test+0x330>
 800e7a4:	4981      	ldr	r1, [pc, #516]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e7a6:	f8cd 9000 	str.w	r9, [sp]
 800e7aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e7ac:	4a84      	ldr	r2, [pc, #528]	; (800e9c0 <acc_cpd_refclk_stability_test+0x538>)
 800e7ae:	4981      	ldr	r1, [pc, #516]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e7b0:	461c      	mov	r4, r3
 800e7b2:	2004      	movs	r0, #4
 800e7b4:	463b      	mov	r3, r7
 800e7b6:	47a0      	blx	r4
 800e7b8:	ee07 9a90 	vmov	s15, r9
 800e7bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800e7c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e7c4:	ee28 8a2a 	vmul.f32	s16, s16, s21
 800e7c8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e7cc:	f7f8 fbb4 	bl	8006f38 <acc_rss_integration_log_level>
 800e7d0:	2803      	cmp	r0, #3
 800e7d2:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800e7d6:	d925      	bls.n	800e824 <acc_cpd_refclk_stability_test+0x39c>
 800e7d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e0:	bf4c      	ite	mi
 800e7e2:	eef1 7a48 	vnegmi.f32	s15, s16
 800e7e6:	eef0 7a48 	vmovpl.f32	s15, s16
 800e7ea:	ee77 7a89 	vadd.f32	s15, s15, s18
 800e7ee:	496f      	ldr	r1, [pc, #444]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e7f0:	bf48      	it	mi
 800e7f2:	4b74      	ldrmi	r3, [pc, #464]	; (800e9c4 <acc_cpd_refclk_stability_test+0x53c>)
 800e7f4:	f8d1 9034 	ldr.w	r9, [r1, #52]	; 0x34
 800e7f8:	bf58      	it	pl
 800e7fa:	4b6f      	ldrpl	r3, [pc, #444]	; (800e9b8 <acc_cpd_refclk_stability_test+0x530>)
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e802:	4a71      	ldr	r2, [pc, #452]	; (800e9c8 <acc_cpd_refclk_stability_test+0x540>)
 800e804:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e808:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e80c:	4969      	ldr	r1, [pc, #420]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e80e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e812:	463b      	mov	r3, r7
 800e814:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e818:	2004      	movs	r0, #4
 800e81a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e81e:	edcd 7a02 	vstr	s15, [sp, #8]
 800e822:	47c8      	blx	r9
 800e824:	ee39 8ac8 	vsub.f32	s16, s19, s16
 800e828:	ecaa 8a01 	vstmia	sl!, {s16}
 800e82c:	f7f8 fb84 	bl	8006f38 <acc_rss_integration_log_level>
 800e830:	2803      	cmp	r0, #3
 800e832:	d925      	bls.n	800e880 <acc_cpd_refclk_stability_test+0x3f8>
 800e834:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83c:	bf4c      	ite	mi
 800e83e:	eef1 7a48 	vnegmi.f32	s15, s16
 800e842:	eef0 7a48 	vmovpl.f32	s15, s16
 800e846:	ee77 7a89 	vadd.f32	s15, s15, s18
 800e84a:	4958      	ldr	r1, [pc, #352]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e84c:	bf48      	it	mi
 800e84e:	4b5d      	ldrmi	r3, [pc, #372]	; (800e9c4 <acc_cpd_refclk_stability_test+0x53c>)
 800e850:	f8d1 9034 	ldr.w	r9, [r1, #52]	; 0x34
 800e854:	bf58      	it	pl
 800e856:	4b58      	ldrpl	r3, [pc, #352]	; (800e9b8 <acc_cpd_refclk_stability_test+0x530>)
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e85e:	4a5b      	ldr	r2, [pc, #364]	; (800e9cc <acc_cpd_refclk_stability_test+0x544>)
 800e860:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e864:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e868:	4952      	ldr	r1, [pc, #328]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e86a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e86e:	463b      	mov	r3, r7
 800e870:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e874:	2004      	movs	r0, #4
 800e876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e87a:	edcd 7a02 	vstr	s15, [sp, #8]
 800e87e:	47c8      	blx	r9
 800e880:	f7f8 fb5a 	bl	8006f38 <acc_rss_integration_log_level>
 800e884:	2803      	cmp	r0, #3
 800e886:	d925      	bls.n	800e8d4 <acc_cpd_refclk_stability_test+0x44c>
 800e888:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e890:	bf48      	it	mi
 800e892:	eeb1 8a48 	vnegmi.f32	s16, s16
 800e896:	ee38 8a09 	vadd.f32	s16, s16, s18
 800e89a:	4944      	ldr	r1, [pc, #272]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e89c:	9b06      	ldr	r3, [sp, #24]
 800e89e:	bf4c      	ite	mi
 800e8a0:	4a48      	ldrmi	r2, [pc, #288]	; (800e9c4 <acc_cpd_refclk_stability_test+0x53c>)
 800e8a2:	4a45      	ldrpl	r2, [pc, #276]	; (800e9b8 <acc_cpd_refclk_stability_test+0x530>)
 800e8a4:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4942      	ldr	r1, [pc, #264]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e8aa:	9200      	str	r2, [sp, #0]
 800e8ac:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800e8b0:	4a47      	ldr	r2, [pc, #284]	; (800e9d0 <acc_cpd_refclk_stability_test+0x548>)
 800e8b2:	9604      	str	r6, [sp, #16]
 800e8b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e8b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8bc:	ee38 8a47 	vsub.f32	s16, s16, s14
 800e8c0:	edcd 7a01 	vstr	s15, [sp, #4]
 800e8c4:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e8c8:	2004      	movs	r0, #4
 800e8ca:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800e8ce:	ed8d 8a02 	vstr	s16, [sp, #8]
 800e8d2:	47b8      	blx	r7
 800e8d4:	3601      	adds	r6, #1
 800e8d6:	2e03      	cmp	r6, #3
 800e8d8:	d003      	beq.n	800e8e2 <acc_cpd_refclk_stability_test+0x45a>
 800e8da:	ab09      	add	r3, sp, #36	; 0x24
 800e8dc:	f833 8016 	ldrh.w	r8, [r3, r6, lsl #1]
 800e8e0:	e6ad      	b.n	800e63e <acc_cpd_refclk_stability_test+0x1b6>
 800e8e2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800e8e6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800e9d4 <acc_cpd_refclk_stability_test+0x54c>
 800e8ea:	9c06      	ldr	r4, [sp, #24]
 800e8ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f4:	dd14      	ble.n	800e920 <acc_cpd_refclk_stability_test+0x498>
 800e8f6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e9d8 <acc_cpd_refclk_stability_test+0x550>
 800e8fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e902:	d50d      	bpl.n	800e920 <acc_cpd_refclk_stability_test+0x498>
 800e904:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 800e908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e910:	dd06      	ble.n	800e920 <acc_cpd_refclk_stability_test+0x498>
 800e912:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91e:	d40c      	bmi.n	800e93a <acc_cpd_refclk_stability_test+0x4b2>
 800e920:	f7f8 fb0a 	bl	8006f38 <acc_rss_integration_log_level>
 800e924:	2803      	cmp	r0, #3
 800e926:	f67f ae45 	bls.w	800e5b4 <acc_cpd_refclk_stability_test+0x12c>
 800e92a:	4a20      	ldr	r2, [pc, #128]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	4921      	ldr	r1, [pc, #132]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e930:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800e932:	4a2a      	ldr	r2, [pc, #168]	; (800e9dc <acc_cpd_refclk_stability_test+0x554>)
 800e934:	2004      	movs	r0, #4
 800e936:	47a0      	blx	r4
 800e938:	e63c      	b.n	800e5b4 <acc_cpd_refclk_stability_test+0x12c>
 800e93a:	f7f8 fafd 	bl	8006f38 <acc_rss_integration_log_level>
 800e93e:	2803      	cmp	r0, #3
 800e940:	d906      	bls.n	800e950 <acc_cpd_refclk_stability_test+0x4c8>
 800e942:	4a1a      	ldr	r2, [pc, #104]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800e948:	491a      	ldr	r1, [pc, #104]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e94a:	4a25      	ldr	r2, [pc, #148]	; (800e9e0 <acc_cpd_refclk_stability_test+0x558>)
 800e94c:	2004      	movs	r0, #4
 800e94e:	47a8      	blx	r5
 800e950:	6824      	ldr	r4, [r4, #0]
 800e952:	2138      	movs	r1, #56	; 0x38
 800e954:	4620      	mov	r0, r4
 800e956:	f7fb fa6f 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800e95a:	4605      	mov	r5, r0
 800e95c:	b928      	cbnz	r0, 800e96a <acc_cpd_refclk_stability_test+0x4e2>
 800e95e:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e960:	4a20      	ldr	r2, [pc, #128]	; (800e9e4 <acc_cpd_refclk_stability_test+0x55c>)
 800e962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e964:	4913      	ldr	r1, [pc, #76]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e966:	4798      	blx	r3
 800e968:	e624      	b.n	800e5b4 <acc_cpd_refclk_stability_test+0x12c>
 800e96a:	f7f8 fae5 	bl	8006f38 <acc_rss_integration_log_level>
 800e96e:	2803      	cmp	r0, #3
 800e970:	d905      	bls.n	800e97e <acc_cpd_refclk_stability_test+0x4f6>
 800e972:	4b0e      	ldr	r3, [pc, #56]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e974:	4a1c      	ldr	r2, [pc, #112]	; (800e9e8 <acc_cpd_refclk_stability_test+0x560>)
 800e976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e978:	490e      	ldr	r1, [pc, #56]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e97a:	2004      	movs	r0, #4
 800e97c:	4798      	blx	r3
 800e97e:	4620      	mov	r0, r4
 800e980:	2301      	movs	r3, #1
 800e982:	2202      	movs	r2, #2
 800e984:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e988:	f7fb fbda 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800e98c:	4605      	mov	r5, r0
 800e98e:	2800      	cmp	r0, #0
 800e990:	f43f ae28 	beq.w	800e5e4 <acc_cpd_refclk_stability_test+0x15c>
 800e994:	f7f8 fad0 	bl	8006f38 <acc_rss_integration_log_level>
 800e998:	2803      	cmp	r0, #3
 800e99a:	f67f ae0b 	bls.w	800e5b4 <acc_cpd_refclk_stability_test+0x12c>
 800e99e:	4b03      	ldr	r3, [pc, #12]	; (800e9ac <acc_cpd_refclk_stability_test+0x524>)
 800e9a0:	4a12      	ldr	r2, [pc, #72]	; (800e9ec <acc_cpd_refclk_stability_test+0x564>)
 800e9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a4:	4903      	ldr	r1, [pc, #12]	; (800e9b4 <acc_cpd_refclk_stability_test+0x52c>)
 800e9a6:	2004      	movs	r0, #4
 800e9a8:	4798      	blx	r3
 800e9aa:	e603      	b.n	800e5b4 <acc_cpd_refclk_stability_test+0x12c>
 800e9ac:	20000640 	.word	0x20000640
 800e9b0:	08018148 	.word	0x08018148
 800e9b4:	08018024 	.word	0x08018024
 800e9b8:	08018e44 	.word	0x08018e44
 800e9bc:	08018188 	.word	0x08018188
 800e9c0:	08018198 	.word	0x08018198
 800e9c4:	08016418 	.word	0x08016418
 800e9c8:	080181ac 	.word	0x080181ac
 800e9cc:	08018200 	.word	0x08018200
 800e9d0:	0801821c 	.word	0x0801821c
 800e9d4:	3e19999a 	.word	0x3e19999a
 800e9d8:	3f866666 	.word	0x3f866666
 800e9dc:	08018284 	.word	0x08018284
 800e9e0:	08018254 	.word	0x08018254
 800e9e4:	080182bc 	.word	0x080182bc
 800e9e8:	08018304 	.word	0x08018304
 800e9ec:	08018348 	.word	0x08018348

0800e9f0 <acc_cpd_rx_fine_dip_calibration>:
 800e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f4:	ed2d 8b04 	vpush	{d8-d9}
 800e9f8:	f8d2 a000 	ldr.w	sl, [r2]
 800e9fc:	b087      	sub	sp, #28
 800e9fe:	4681      	mov	r9, r0
 800ea00:	ad05      	add	r5, sp, #20
 800ea02:	461e      	mov	r6, r3
 800ea04:	ee09 1a10 	vmov	s18, r1
 800ea08:	4614      	mov	r4, r2
 800ea0a:	9500      	str	r5, [sp, #0]
 800ea0c:	460a      	mov	r2, r1
 800ea0e:	2500      	movs	r5, #0
 800ea10:	4650      	mov	r0, sl
 800ea12:	4649      	mov	r1, r9
 800ea14:	ab04      	add	r3, sp, #16
 800ea16:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800ea1a:	9505      	str	r5, [sp, #20]
 800ea1c:	f7fb f9a8 	bl	8009d70 <acc_sensor_protocol_r2_prepare_load>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	f000 8095 	beq.w	800eb50 <acc_cpd_rx_fine_dip_calibration+0x160>
 800ea26:	9b05      	ldr	r3, [sp, #20]
 800ea28:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800ec1c <acc_cpd_rx_fine_dip_calibration+0x22c>
 800ea2c:	ee08 aa90 	vmov	s17, sl
 800ea30:	ee08 9a10 	vmov	s16, r9
 800ea34:	46a9      	mov	r9, r5
 800ea36:	461d      	mov	r5, r3
 800ea38:	f5c9 63d5 	rsb	r3, r9, #1704	; 0x6a8
 800ea3c:	3306      	adds	r3, #6
 800ea3e:	429d      	cmp	r5, r3
 800ea40:	bf28      	it	cs
 800ea42:	461d      	movcs	r5, r3
 800ea44:	9e04      	ldr	r6, [sp, #16]
 800ea46:	4b6d      	ldr	r3, [pc, #436]	; (800ebfc <acc_cpd_rx_fine_dip_calibration+0x20c>)
 800ea48:	ea4f 0a59 	mov.w	sl, r9, lsr #1
 800ea4c:	086a      	lsrs	r2, r5, #1
 800ea4e:	eb03 008a 	add.w	r0, r3, sl, lsl #2
 800ea52:	4631      	mov	r1, r6
 800ea54:	f001 fe6a 	bl	801072c <acc_confprogram_copy>
 800ea58:	fa1f f789 	uxth.w	r7, r9
 800ea5c:	6863      	ldr	r3, [r4, #4]
 800ea5e:	9301      	str	r3, [sp, #4]
 800ea60:	211b      	movs	r1, #27
 800ea62:	b2aa      	uxth	r2, r5
 800ea64:	9100      	str	r1, [sp, #0]
 800ea66:	4630      	mov	r0, r6
 800ea68:	4639      	mov	r1, r7
 800ea6a:	4643      	mov	r3, r8
 800ea6c:	9202      	str	r2, [sp, #8]
 800ea6e:	f04f 0b19 	mov.w	fp, #25
 800ea72:	f001 fd63 	bl	801053c <acc_confprogram_patch_offset>
 800ea76:	68a3      	ldr	r3, [r4, #8]
 800ea78:	9a02      	ldr	r2, [sp, #8]
 800ea7a:	9301      	str	r3, [sp, #4]
 800ea7c:	4639      	mov	r1, r7
 800ea7e:	4630      	mov	r0, r6
 800ea80:	4643      	mov	r3, r8
 800ea82:	f8cd b000 	str.w	fp, [sp]
 800ea86:	f001 fd59 	bl	801053c <acc_confprogram_patch_offset>
 800ea8a:	68e3      	ldr	r3, [r4, #12]
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	231a      	movs	r3, #26
 800ea90:	9a02      	ldr	r2, [sp, #8]
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	4639      	mov	r1, r7
 800ea96:	4630      	mov	r0, r6
 800ea98:	4643      	mov	r3, r8
 800ea9a:	f001 fd4f 	bl	801053c <acc_confprogram_patch_offset>
 800ea9e:	8a23      	ldrh	r3, [r4, #16]
 800eaa0:	9301      	str	r3, [sp, #4]
 800eaa2:	2317      	movs	r3, #23
 800eaa4:	9a02      	ldr	r2, [sp, #8]
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	4639      	mov	r1, r7
 800eaaa:	4630      	mov	r0, r6
 800eaac:	4643      	mov	r3, r8
 800eaae:	f001 fd45 	bl	801053c <acc_confprogram_patch_offset>
 800eab2:	69e3      	ldr	r3, [r4, #28]
 800eab4:	9301      	str	r3, [sp, #4]
 800eab6:	230d      	movs	r3, #13
 800eab8:	9a02      	ldr	r2, [sp, #8]
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	4639      	mov	r1, r7
 800eabe:	4630      	mov	r0, r6
 800eac0:	4643      	mov	r3, r8
 800eac2:	f001 fd3b 	bl	801053c <acc_confprogram_patch_offset>
 800eac6:	6a23      	ldr	r3, [r4, #32]
 800eac8:	9301      	str	r3, [sp, #4]
 800eaca:	232a      	movs	r3, #42	; 0x2a
 800eacc:	9a02      	ldr	r2, [sp, #8]
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	4639      	mov	r1, r7
 800ead2:	4630      	mov	r0, r6
 800ead4:	4643      	mov	r3, r8
 800ead6:	f001 fd31 	bl	801053c <acc_confprogram_patch_offset>
 800eada:	69a3      	ldr	r3, [r4, #24]
 800eadc:	9301      	str	r3, [sp, #4]
 800eade:	230f      	movs	r3, #15
 800eae0:	9a02      	ldr	r2, [sp, #8]
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	4639      	mov	r1, r7
 800eae6:	4630      	mov	r0, r6
 800eae8:	4643      	mov	r3, r8
 800eaea:	f001 fd27 	bl	801053c <acc_confprogram_patch_offset>
 800eaee:	6963      	ldr	r3, [r4, #20]
 800eaf0:	9301      	str	r3, [sp, #4]
 800eaf2:	232c      	movs	r3, #44	; 0x2c
 800eaf4:	9a02      	ldr	r2, [sp, #8]
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	4639      	mov	r1, r7
 800eafa:	4630      	mov	r0, r6
 800eafc:	4643      	mov	r3, r8
 800eafe:	f001 fd1d 	bl	801053c <acc_confprogram_patch_offset>
 800eb02:	462b      	mov	r3, r5
 800eb04:	ee18 2a10 	vmov	r2, s16
 800eb08:	6820      	ldr	r0, [r4, #0]
 800eb0a:	fa1f f18a 	uxth.w	r1, sl
 800eb0e:	f7fa fe0d 	bl	800972c <acc_sensor_r2_load_confmem>
 800eb12:	9d05      	ldr	r5, [sp, #20]
 800eb14:	f240 63ad 	movw	r3, #1709	; 0x6ad
 800eb18:	44a9      	add	r9, r5
 800eb1a:	4599      	cmp	r9, r3
 800eb1c:	d98c      	bls.n	800ea38 <acc_cpd_rx_fine_dip_calibration+0x48>
 800eb1e:	ee18 0a90 	vmov	r0, s17
 800eb22:	4659      	mov	r1, fp
 800eb24:	f7fb f988 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800eb28:	ee18 aa90 	vmov	sl, s17
 800eb2c:	4606      	mov	r6, r0
 800eb2e:	b1d8      	cbz	r0, 800eb68 <acc_cpd_rx_fine_dip_calibration+0x178>
 800eb30:	ee18 0a90 	vmov	r0, s17
 800eb34:	2300      	movs	r3, #0
 800eb36:	2208      	movs	r2, #8
 800eb38:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800eb3c:	f7fb fb00 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800eb40:	b9e8      	cbnz	r0, 800eb7e <acc_cpd_rx_fine_dip_calibration+0x18e>
 800eb42:	2600      	movs	r6, #0
 800eb44:	4630      	mov	r0, r6
 800eb46:	b007      	add	sp, #28
 800eb48:	ecbd 8b04 	vpop	{d8-d9}
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb50:	4b2b      	ldr	r3, [pc, #172]	; (800ec00 <acc_cpd_rx_fine_dip_calibration+0x210>)
 800eb52:	4a2c      	ldr	r2, [pc, #176]	; (800ec04 <acc_cpd_rx_fine_dip_calibration+0x214>)
 800eb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb56:	492c      	ldr	r1, [pc, #176]	; (800ec08 <acc_cpd_rx_fine_dip_calibration+0x218>)
 800eb58:	4606      	mov	r6, r0
 800eb5a:	4798      	blx	r3
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	b007      	add	sp, #28
 800eb60:	ecbd 8b04 	vpop	{d8-d9}
 800eb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb68:	4b25      	ldr	r3, [pc, #148]	; (800ec00 <acc_cpd_rx_fine_dip_calibration+0x210>)
 800eb6a:	4a28      	ldr	r2, [pc, #160]	; (800ec0c <acc_cpd_rx_fine_dip_calibration+0x21c>)
 800eb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6e:	4926      	ldr	r1, [pc, #152]	; (800ec08 <acc_cpd_rx_fine_dip_calibration+0x218>)
 800eb70:	4798      	blx	r3
 800eb72:	4630      	mov	r0, r6
 800eb74:	b007      	add	sp, #28
 800eb76:	ecbd 8b04 	vpop	{d8-d9}
 800eb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7e:	ee19 0a10 	vmov	r0, s18
 800eb82:	4659      	mov	r1, fp
 800eb84:	f7fa fe0a 	bl	800979c <acc_sensor_r2_buffer_processed_verify_size>
 800eb88:	4606      	mov	r6, r0
 800eb8a:	b928      	cbnz	r0, 800eb98 <acc_cpd_rx_fine_dip_calibration+0x1a8>
 800eb8c:	4b1c      	ldr	r3, [pc, #112]	; (800ec00 <acc_cpd_rx_fine_dip_calibration+0x210>)
 800eb8e:	4a20      	ldr	r2, [pc, #128]	; (800ec10 <acc_cpd_rx_fine_dip_calibration+0x220>)
 800eb90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb92:	491d      	ldr	r1, [pc, #116]	; (800ec08 <acc_cpd_rx_fine_dip_calibration+0x218>)
 800eb94:	4798      	blx	r3
 800eb96:	e7e1      	b.n	800eb5c <acc_cpd_rx_fine_dip_calibration+0x16c>
 800eb98:	ee18 1a10 	vmov	r1, s16
 800eb9c:	465b      	mov	r3, fp
 800eb9e:	2200      	movs	r2, #0
 800eba0:	ee18 0a90 	vmov	r0, s17
 800eba4:	f7fa fe02 	bl	80097ac <acc_sensor_r2_buffer_processed_read>
 800eba8:	465b      	mov	r3, fp
 800ebaa:	4604      	mov	r4, r0
 800ebac:	4602      	mov	r2, r0
 800ebae:	ee18 1a90 	vmov	r1, s17
 800ebb2:	200a      	movs	r0, #10
 800ebb4:	f7f8 f9c6 	bl	8006f44 <acc_probes_execute_uint16>
 800ebb8:	9b03      	ldr	r3, [sp, #12]
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ebc0:	6804      	ldr	r4, [r0, #0]
 800ebc2:	6841      	ldr	r1, [r0, #4]
 800ebc4:	6882      	ldr	r2, [r0, #8]
 800ebc6:	68c5      	ldr	r5, [r0, #12]
 800ebc8:	60dd      	str	r5, [r3, #12]
 800ebca:	3010      	adds	r0, #16
 800ebcc:	42b0      	cmp	r0, r6
 800ebce:	601c      	str	r4, [r3, #0]
 800ebd0:	6059      	str	r1, [r3, #4]
 800ebd2:	609a      	str	r2, [r3, #8]
 800ebd4:	f103 0310 	add.w	r3, r3, #16
 800ebd8:	d1f2      	bne.n	800ebc0 <acc_cpd_rx_fine_dip_calibration+0x1d0>
 800ebda:	8802      	ldrh	r2, [r0, #0]
 800ebdc:	801a      	strh	r2, [r3, #0]
 800ebde:	4650      	mov	r0, sl
 800ebe0:	f7fb f9b6 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d0ab      	beq.n	800eb42 <acc_cpd_rx_fine_dip_calibration+0x152>
 800ebea:	490a      	ldr	r1, [pc, #40]	; (800ec14 <acc_cpd_rx_fine_dip_calibration+0x224>)
 800ebec:	480a      	ldr	r0, [pc, #40]	; (800ec18 <acc_cpd_rx_fine_dip_calibration+0x228>)
 800ebee:	f7fb fdd3 	bl	800a798 <acc_diagnostic_log_array>
 800ebf2:	9803      	ldr	r0, [sp, #12]
 800ebf4:	2119      	movs	r1, #25
 800ebf6:	f7fb fde7 	bl	800a7c8 <acc_diagnostic_log_data_u16>
 800ebfa:	e7af      	b.n	800eb5c <acc_cpd_rx_fine_dip_calibration+0x16c>
 800ebfc:	08013508 	.word	0x08013508
 800ec00:	20000640 	.word	0x20000640
 800ec04:	08018388 	.word	0x08018388
 800ec08:	080183b0 	.word	0x080183b0
 800ec0c:	080183cc 	.word	0x080183cc
 800ec10:	0801705c 	.word	0x0801705c
 800ec14:	080174c0 	.word	0x080174c0
 800ec18:	08018400 	.word	0x08018400
 800ec1c:	080199a8 	.word	0x080199a8

0800ec20 <measure>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	ed2d 8b02 	vpush	{d8}
 800ec28:	b089      	sub	sp, #36	; 0x24
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
 800ec30:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
 800ec34:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
 800ec38:	9105      	str	r1, [sp, #20]
 800ec3a:	f106 3cff 	add.w	ip, r6, #4294967295
 800ec3e:	f1bc 0f06 	cmp.w	ip, #6
 800ec42:	4693      	mov	fp, r2
 800ec44:	461d      	mov	r5, r3
 800ec46:	d911      	bls.n	800ec6c <measure+0x4c>
 800ec48:	f1a6 0211 	sub.w	r2, r6, #17
 800ec4c:	2a06      	cmp	r2, #6
 800ec4e:	d92e      	bls.n	800ecae <measure+0x8e>
 800ec50:	4ab4      	ldr	r2, [pc, #720]	; (800ef24 <measure+0x304>)
 800ec52:	9600      	str	r6, [sp, #0]
 800ec54:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ec56:	49b4      	ldr	r1, [pc, #720]	; (800ef28 <measure+0x308>)
 800ec58:	4ab4      	ldr	r2, [pc, #720]	; (800ef2c <measure+0x30c>)
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	47a0      	blx	r4
 800ec5e:	2600      	movs	r6, #0
 800ec60:	4630      	mov	r0, r6
 800ec62:	b009      	add	sp, #36	; 0x24
 800ec64:	ecbd 8b02 	vpop	{d8}
 800ec68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6c:	f7f8 f964 	bl	8006f38 <acc_rss_integration_log_level>
 800ec70:	2803      	cmp	r0, #3
 800ec72:	f04f 0900 	mov.w	r9, #0
 800ec76:	d823      	bhi.n	800ecc0 <measure+0xa0>
 800ec78:	f7f8 f95e 	bl	8006f38 <acc_rss_integration_log_level>
 800ec7c:	2803      	cmp	r0, #3
 800ec7e:	d909      	bls.n	800ec94 <measure+0x74>
 800ec80:	4ba8      	ldr	r3, [pc, #672]	; (800ef24 <measure+0x304>)
 800ec82:	f8cd 9000 	str.w	r9, [sp]
 800ec86:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800ec8a:	4aa9      	ldr	r2, [pc, #676]	; (800ef30 <measure+0x310>)
 800ec8c:	49a6      	ldr	r1, [pc, #664]	; (800ef28 <measure+0x308>)
 800ec8e:	462b      	mov	r3, r5
 800ec90:	2004      	movs	r0, #4
 800ec92:	47d0      	blx	sl
 800ec94:	2f0f      	cmp	r7, #15
 800ec96:	d01d      	beq.n	800ecd4 <measure+0xb4>
 800ec98:	f1a7 0319 	sub.w	r3, r7, #25
 800ec9c:	2b06      	cmp	r3, #6
 800ec9e:	f200 8095 	bhi.w	800edcc <measure+0x1ac>
 800eca2:	3f18      	subs	r7, #24
 800eca4:	b2fb      	uxtb	r3, r7
 800eca6:	9307      	str	r3, [sp, #28]
 800eca8:	2300      	movs	r3, #0
 800ecaa:	9306      	str	r3, [sp, #24]
 800ecac:	e016      	b.n	800ecdc <measure+0xbc>
 800ecae:	f7f8 f943 	bl	8006f38 <acc_rss_integration_log_level>
 800ecb2:	3e10      	subs	r6, #16
 800ecb4:	2803      	cmp	r0, #3
 800ecb6:	fa5f f986 	uxtb.w	r9, r6
 800ecba:	f04f 0600 	mov.w	r6, #0
 800ecbe:	d9db      	bls.n	800ec78 <measure+0x58>
 800ecc0:	4b98      	ldr	r3, [pc, #608]	; (800ef24 <measure+0x304>)
 800ecc2:	9600      	str	r6, [sp, #0]
 800ecc4:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800ecc8:	4a9a      	ldr	r2, [pc, #616]	; (800ef34 <measure+0x314>)
 800ecca:	4997      	ldr	r1, [pc, #604]	; (800ef28 <measure+0x308>)
 800eccc:	462b      	mov	r3, r5
 800ecce:	2004      	movs	r0, #4
 800ecd0:	47d0      	blx	sl
 800ecd2:	e7d1      	b.n	800ec78 <measure+0x58>
 800ecd4:	2307      	movs	r3, #7
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800ecdc:	f7f8 f92c 	bl	8006f38 <acc_rss_integration_log_level>
 800ece0:	2803      	cmp	r0, #3
 800ece2:	d908      	bls.n	800ecf6 <measure+0xd6>
 800ece4:	4b8f      	ldr	r3, [pc, #572]	; (800ef24 <measure+0x304>)
 800ece6:	9a06      	ldr	r2, [sp, #24]
 800ece8:	9200      	str	r2, [sp, #0]
 800ecea:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800ecec:	4a92      	ldr	r2, [pc, #584]	; (800ef38 <measure+0x318>)
 800ecee:	498e      	ldr	r1, [pc, #568]	; (800ef28 <measure+0x308>)
 800ecf0:	462b      	mov	r3, r5
 800ecf2:	2004      	movs	r0, #4
 800ecf4:	47b8      	blx	r7
 800ecf6:	f7f8 f91f 	bl	8006f38 <acc_rss_integration_log_level>
 800ecfa:	2803      	cmp	r0, #3
 800ecfc:	d908      	bls.n	800ed10 <measure+0xf0>
 800ecfe:	4b89      	ldr	r3, [pc, #548]	; (800ef24 <measure+0x304>)
 800ed00:	9a07      	ldr	r2, [sp, #28]
 800ed02:	9200      	str	r2, [sp, #0]
 800ed04:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800ed06:	4a8d      	ldr	r2, [pc, #564]	; (800ef3c <measure+0x31c>)
 800ed08:	4987      	ldr	r1, [pc, #540]	; (800ef28 <measure+0x308>)
 800ed0a:	462b      	mov	r3, r5
 800ed0c:	2004      	movs	r0, #4
 800ed0e:	47b8      	blx	r7
 800ed10:	4620      	mov	r0, r4
 800ed12:	f7fb f90b 	bl	8009f2c <acc_sensor_protocol_r2_is_sensor_running>
 800ed16:	4607      	mov	r7, r0
 800ed18:	b168      	cbz	r0, 800ed36 <measure+0x116>
 800ed1a:	4b82      	ldr	r3, [pc, #520]	; (800ef24 <measure+0x304>)
 800ed1c:	4a88      	ldr	r2, [pc, #544]	; (800ef40 <measure+0x320>)
 800ed1e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800ed20:	4981      	ldr	r1, [pc, #516]	; (800ef28 <measure+0x308>)
 800ed22:	4623      	mov	r3, r4
 800ed24:	2000      	movs	r0, #0
 800ed26:	47a8      	blx	r5
 800ed28:	2600      	movs	r6, #0
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	b009      	add	sp, #36	; 0x24
 800ed2e:	ecbd 8b02 	vpop	{d8}
 800ed32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed36:	f8df a244 	ldr.w	sl, [pc, #580]	; 800ef7c <measure+0x35c>
 800ed3a:	4982      	ldr	r1, [pc, #520]	; (800ef44 <measure+0x324>)
 800ed3c:	9601      	str	r6, [sp, #4]
 800ed3e:	2307      	movs	r3, #7
 800ed40:	4602      	mov	r2, r0
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	4620      	mov	r0, r4
 800ed46:	4b80      	ldr	r3, [pc, #512]	; (800ef48 <measure+0x328>)
 800ed48:	f8cd a008 	str.w	sl, [sp, #8]
 800ed4c:	f001 fc7e 	bl	801064c <acc_confprogram_live_patch>
 800ed50:	9a06      	ldr	r2, [sp, #24]
 800ed52:	497c      	ldr	r1, [pc, #496]	; (800ef44 <measure+0x324>)
 800ed54:	f8cd a008 	str.w	sl, [sp, #8]
 800ed58:	2308      	movs	r3, #8
 800ed5a:	e9cd 3200 	strd	r3, r2, [sp]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	463a      	mov	r2, r7
 800ed62:	4b79      	ldr	r3, [pc, #484]	; (800ef48 <measure+0x328>)
 800ed64:	f001 fc72 	bl	801064c <acc_confprogram_live_patch>
 800ed68:	2309      	movs	r3, #9
 800ed6a:	463a      	mov	r2, r7
 800ed6c:	4975      	ldr	r1, [pc, #468]	; (800ef44 <measure+0x324>)
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	4620      	mov	r0, r4
 800ed72:	4b75      	ldr	r3, [pc, #468]	; (800ef48 <measure+0x328>)
 800ed74:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800ed78:	f001 fc68 	bl	801064c <acc_confprogram_live_patch>
 800ed7c:	9a07      	ldr	r2, [sp, #28]
 800ed7e:	4971      	ldr	r1, [pc, #452]	; (800ef44 <measure+0x324>)
 800ed80:	f8cd a008 	str.w	sl, [sp, #8]
 800ed84:	230a      	movs	r3, #10
 800ed86:	e9cd 3200 	strd	r3, r2, [sp]
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	463a      	mov	r2, r7
 800ed8e:	4b6e      	ldr	r3, [pc, #440]	; (800ef48 <measure+0x328>)
 800ed90:	f001 fc5c 	bl	801064c <acc_confprogram_live_patch>
 800ed94:	463a      	mov	r2, r7
 800ed96:	4b6c      	ldr	r3, [pc, #432]	; (800ef48 <measure+0x328>)
 800ed98:	496a      	ldr	r1, [pc, #424]	; (800ef44 <measure+0x324>)
 800ed9a:	9700      	str	r7, [sp, #0]
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 800eda2:	f001 fc53 	bl	801064c <acc_confprogram_live_patch>
 800eda6:	2144      	movs	r1, #68	; 0x44
 800eda8:	4620      	mov	r0, r4
 800edaa:	f7fb f845 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800edae:	4647      	mov	r7, r8
 800edb0:	4606      	mov	r6, r0
 800edb2:	b978      	cbnz	r0, 800edd4 <measure+0x1b4>
 800edb4:	4b5b      	ldr	r3, [pc, #364]	; (800ef24 <measure+0x304>)
 800edb6:	4a65      	ldr	r2, [pc, #404]	; (800ef4c <measure+0x32c>)
 800edb8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800edba:	495b      	ldr	r1, [pc, #364]	; (800ef28 <measure+0x308>)
 800edbc:	462b      	mov	r3, r5
 800edbe:	47a0      	blx	r4
 800edc0:	4630      	mov	r0, r6
 800edc2:	b009      	add	sp, #36	; 0x24
 800edc4:	ecbd 8b02 	vpop	{d8}
 800edc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edcc:	2300      	movs	r3, #0
 800edce:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800edd2:	e783      	b.n	800ecdc <measure+0xbc>
 800edd4:	f7f8 f8b0 	bl	8006f38 <acc_rss_integration_log_level>
 800edd8:	2803      	cmp	r0, #3
 800edda:	d906      	bls.n	800edea <measure+0x1ca>
 800eddc:	4b51      	ldr	r3, [pc, #324]	; (800ef24 <measure+0x304>)
 800edde:	4a5c      	ldr	r2, [pc, #368]	; (800ef50 <measure+0x330>)
 800ede0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800ede2:	4951      	ldr	r1, [pc, #324]	; (800ef28 <measure+0x308>)
 800ede4:	462b      	mov	r3, r5
 800ede6:	2004      	movs	r0, #4
 800ede8:	47b0      	blx	r6
 800edea:	2300      	movs	r3, #0
 800edec:	2209      	movs	r2, #9
 800edee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800edf2:	4620      	mov	r0, r4
 800edf4:	f7fb f9a4 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800edf8:	b158      	cbz	r0, 800ee12 <measure+0x1f2>
 800edfa:	4658      	mov	r0, fp
 800edfc:	4641      	mov	r1, r8
 800edfe:	f7fa fccd 	bl	800979c <acc_sensor_r2_buffer_processed_verify_size>
 800ee02:	4606      	mov	r6, r0
 800ee04:	b938      	cbnz	r0, 800ee16 <measure+0x1f6>
 800ee06:	4b47      	ldr	r3, [pc, #284]	; (800ef24 <measure+0x304>)
 800ee08:	4a52      	ldr	r2, [pc, #328]	; (800ef54 <measure+0x334>)
 800ee0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee0c:	4946      	ldr	r1, [pc, #280]	; (800ef28 <measure+0x308>)
 800ee0e:	4798      	blx	r3
 800ee10:	e726      	b.n	800ec60 <measure+0x40>
 800ee12:	2600      	movs	r6, #0
 800ee14:	e724      	b.n	800ec60 <measure+0x40>
 800ee16:	9905      	ldr	r1, [sp, #20]
 800ee18:	4643      	mov	r3, r8
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f7fa fcc5 	bl	80097ac <acc_sensor_r2_buffer_processed_read>
 800ee22:	4643      	mov	r3, r8
 800ee24:	4602      	mov	r2, r0
 800ee26:	4621      	mov	r1, r4
 800ee28:	4681      	mov	r9, r0
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	f7f8 f88a 	bl	8006f44 <acc_probes_execute_uint16>
 800ee30:	4620      	mov	r0, r4
 800ee32:	f7fb f88d 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800ee36:	4606      	mov	r6, r0
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d0ea      	beq.n	800ee12 <measure+0x1f2>
 800ee3c:	f7f8 f87c 	bl	8006f38 <acc_rss_integration_log_level>
 800ee40:	2803      	cmp	r0, #3
 800ee42:	d907      	bls.n	800ee54 <measure+0x234>
 800ee44:	4b37      	ldr	r3, [pc, #220]	; (800ef24 <measure+0x304>)
 800ee46:	4a44      	ldr	r2, [pc, #272]	; (800ef58 <measure+0x338>)
 800ee48:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800ee4c:	4936      	ldr	r1, [pc, #216]	; (800ef28 <measure+0x308>)
 800ee4e:	462b      	mov	r3, r5
 800ee50:	2004      	movs	r0, #4
 800ee52:	47d0      	blx	sl
 800ee54:	4941      	ldr	r1, [pc, #260]	; (800ef5c <measure+0x33c>)
 800ee56:	4a42      	ldr	r2, [pc, #264]	; (800ef60 <measure+0x340>)
 800ee58:	4628      	mov	r0, r5
 800ee5a:	f7fb fca5 	bl	800a7a8 <acc_diagnostic_log_array_sub_name>
 800ee5e:	4641      	mov	r1, r8
 800ee60:	4648      	mov	r0, r9
 800ee62:	f7fb fcb1 	bl	800a7c8 <acc_diagnostic_log_data_u16>
 800ee66:	f1b8 0f00 	cmp.w	r8, #0
 800ee6a:	d058      	beq.n	800ef1e <measure+0x2fe>
 800ee6c:	4648      	mov	r0, r9
 800ee6e:	eb09 0248 	add.w	r2, r9, r8, lsl #1
 800ee72:	2700      	movs	r7, #0
 800ee74:	f830 3b02 	ldrh.w	r3, [r0], #2
 800ee78:	4290      	cmp	r0, r2
 800ee7a:	441f      	add	r7, r3
 800ee7c:	d1fa      	bne.n	800ee74 <measure+0x254>
 800ee7e:	fbb7 f7f8 	udiv	r7, r7, r8
 800ee82:	b2bb      	uxth	r3, r7
 800ee84:	ee08 3a10 	vmov	s16, r3
 800ee88:	f7f8 f856 	bl	8006f38 <acc_rss_integration_log_level>
 800ee8c:	2803      	cmp	r0, #3
 800ee8e:	d909      	bls.n	800eea4 <measure+0x284>
 800ee90:	4b24      	ldr	r3, [pc, #144]	; (800ef24 <measure+0x304>)
 800ee92:	9500      	str	r5, [sp, #0]
 800ee94:	b2bf      	uxth	r7, r7
 800ee96:	9701      	str	r7, [sp, #4]
 800ee98:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800ee9a:	4a32      	ldr	r2, [pc, #200]	; (800ef64 <measure+0x344>)
 800ee9c:	4922      	ldr	r1, [pc, #136]	; (800ef28 <measure+0x308>)
 800ee9e:	4623      	mov	r3, r4
 800eea0:	2004      	movs	r0, #4
 800eea2:	47b8      	blx	r7
 800eea4:	eebb 8ac8 	vcvt.f32.u32	s16, s16, #16
 800eea8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eeac:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800ef68 <measure+0x348>
 800eeb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eeb2:	ee78 7a67 	vsub.f32	s15, s16, s15
 800eeb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eeba:	edc3 7a00 	vstr	s15, [r3]
 800eebe:	f7f8 f83b 	bl	8006f38 <acc_rss_integration_log_level>
 800eec2:	2803      	cmp	r0, #3
 800eec4:	f67f aecc 	bls.w	800ec60 <measure+0x40>
 800eec8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eeca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ef6c <measure+0x34c>
 800eece:	edd2 7a00 	vldr	s15, [r2]
 800eed2:	eddf 6a27 	vldr	s13, [pc, #156]	; 800ef70 <measure+0x350>
 800eed6:	4b13      	ldr	r3, [pc, #76]	; (800ef24 <measure+0x304>)
 800eed8:	4a26      	ldr	r2, [pc, #152]	; (800ef74 <measure+0x354>)
 800eeda:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800eedc:	4912      	ldr	r1, [pc, #72]	; (800ef28 <measure+0x308>)
 800eede:	9500      	str	r5, [sp, #0]
 800eee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee8:	bf48      	it	mi
 800eeea:	eef1 7a67 	vnegmi.f32	s15, s15
 800eeee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eef2:	bf4c      	ite	mi
 800eef4:	4b20      	ldrmi	r3, [pc, #128]	; (800ef78 <measure+0x358>)
 800eef6:	4b1a      	ldrpl	r3, [pc, #104]	; (800ef60 <measure+0x340>)
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800eefe:	4623      	mov	r3, r4
 800ef00:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800ef04:	ed8d 7a02 	vstr	s14, [sp, #8]
 800ef08:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ef0c:	2004      	movs	r0, #4
 800ef0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ef12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef16:	edcd 7a03 	vstr	s15, [sp, #12]
 800ef1a:	47b8      	blx	r7
 800ef1c:	e6a0      	b.n	800ec60 <measure+0x40>
 800ef1e:	ee08 8a10 	vmov	s16, r8
 800ef22:	e7b1      	b.n	800ee88 <measure+0x268>
 800ef24:	20000640 	.word	0x20000640
 800ef28:	08018454 	.word	0x08018454
 800ef2c:	08018410 	.word	0x08018410
 800ef30:	080184a8 	.word	0x080184a8
 800ef34:	08018464 	.word	0x08018464
 800ef38:	080184ec 	.word	0x080184ec
 800ef3c:	08018530 	.word	0x08018530
 800ef40:	08016fe8 	.word	0x08016fe8
 800ef44:	08014264 	.word	0x08014264
 800ef48:	08019ce4 	.word	0x08019ce4
 800ef4c:	08018574 	.word	0x08018574
 800ef50:	080185b0 	.word	0x080185b0
 800ef54:	0801705c 	.word	0x0801705c
 800ef58:	080185e4 	.word	0x080185e4
 800ef5c:	080174e0 	.word	0x080174e0
 800ef60:	08018e44 	.word	0x08018e44
 800ef64:	0801861c 	.word	0x0801861c
 800ef68:	3f99999a 	.word	0x3f99999a
 800ef6c:	350637bd 	.word	0x350637bd
 800ef70:	49742400 	.word	0x49742400
 800ef74:	08018634 	.word	0x08018634
 800ef78:	08016418 	.word	0x08016418
 800ef7c:	080096d1 	.word	0x080096d1

0800ef80 <acc_cpd_supply_test>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	ed2d 8b06 	vpush	{d8-d10}
 800ef88:	4615      	mov	r5, r2
 800ef8a:	b091      	sub	sp, #68	; 0x44
 800ef8c:	4683      	mov	fp, r0
 800ef8e:	48b0      	ldr	r0, [pc, #704]	; (800f250 <acc_cpd_supply_test+0x2d0>)
 800ef90:	930d      	str	r3, [sp, #52]	; 0x34
 800ef92:	461c      	mov	r4, r3
 800ef94:	ee0a 1a10 	vmov	s20, r1
 800ef98:	f7fb fbe6 	bl	800a768 <acc_diagnostic_log_set_scope>
 800ef9c:	6829      	ldr	r1, [r5, #0]
 800ef9e:	48ad      	ldr	r0, [pc, #692]	; (800f254 <acc_cpd_supply_test+0x2d4>)
 800efa0:	f7fb fc0a 	bl	800a7b8 <acc_diagnostic_log_scalar>
 800efa4:	1e63      	subs	r3, r4, #1
 800efa6:	1d61      	adds	r1, r4, #5
 800efa8:	2202      	movs	r2, #2
 800efaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efae:	4299      	cmp	r1, r3
 800efb0:	d1fb      	bne.n	800efaa <acc_cpd_supply_test+0x2a>
 800efb2:	ab0f      	add	r3, sp, #60	; 0x3c
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	ee1a 2a10 	vmov	r2, s20
 800efba:	6828      	ldr	r0, [r5, #0]
 800efbc:	2600      	movs	r6, #0
 800efbe:	ab0e      	add	r3, sp, #56	; 0x38
 800efc0:	4659      	mov	r1, fp
 800efc2:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
 800efc6:	f7fa fed3 	bl	8009d70 <acc_sensor_protocol_r2_prepare_load>
 800efca:	4604      	mov	r4, r0
 800efcc:	2800      	cmp	r0, #0
 800efce:	f000 810e 	beq.w	800f1ee <acc_cpd_supply_test+0x26e>
 800efd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efd4:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 800f27c <acc_cpd_supply_test+0x2fc>
 800efd8:	4f9f      	ldr	r7, [pc, #636]	; (800f258 <acc_cpd_supply_test+0x2d8>)
 800efda:	46b0      	mov	r8, r6
 800efdc:	461e      	mov	r6, r3
 800efde:	e014      	b.n	800f00a <acc_cpd_supply_test+0x8a>
 800efe0:	3801      	subs	r0, #1
 800efe2:	2300      	movs	r3, #0
 800efe4:	9001      	str	r0, [sp, #4]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	4620      	mov	r0, r4
 800efea:	463b      	mov	r3, r7
 800efec:	f001 faa6 	bl	801053c <acc_confprogram_patch_offset>
 800eff0:	4633      	mov	r3, r6
 800eff2:	6828      	ldr	r0, [r5, #0]
 800eff4:	465a      	mov	r2, fp
 800eff6:	fa1f f189 	uxth.w	r1, r9
 800effa:	f7fa fb97 	bl	800972c <acc_sensor_r2_load_confmem>
 800effe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800f000:	44b0      	add	r8, r6
 800f002:	f5b8 7fff 	cmp.w	r8, #510	; 0x1fe
 800f006:	f080 80f8 	bcs.w	800f1fa <acc_cpd_supply_test+0x27a>
 800f00a:	f5c8 73ff 	rsb	r3, r8, #510	; 0x1fe
 800f00e:	429e      	cmp	r6, r3
 800f010:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f012:	bf28      	it	cs
 800f014:	461e      	movcs	r6, r3
 800f016:	ea4f 0958 	mov.w	r9, r8, lsr #1
 800f01a:	0872      	lsrs	r2, r6, #1
 800f01c:	4621      	mov	r1, r4
 800f01e:	eb0a 0089 	add.w	r0, sl, r9, lsl #2
 800f022:	f001 fb83 	bl	801072c <acc_confprogram_copy>
 800f026:	88ab      	ldrh	r3, [r5, #4]
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	201e      	movs	r0, #30
 800f02c:	b2b2      	uxth	r2, r6
 800f02e:	fa1f f188 	uxth.w	r1, r8
 800f032:	9000      	str	r0, [sp, #0]
 800f034:	463b      	mov	r3, r7
 800f036:	4620      	mov	r0, r4
 800f038:	920c      	str	r2, [sp, #48]	; 0x30
 800f03a:	910b      	str	r1, [sp, #44]	; 0x2c
 800f03c:	f001 fa7e 	bl	801053c <acc_confprogram_patch_offset>
 800f040:	88eb      	ldrh	r3, [r5, #6]
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	221c      	movs	r2, #28
 800f046:	9200      	str	r2, [sp, #0]
 800f048:	4620      	mov	r0, r4
 800f04a:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 800f04e:	463b      	mov	r3, r7
 800f050:	f001 fa74 	bl	801053c <acc_confprogram_patch_offset>
 800f054:	892b      	ldrh	r3, [r5, #8]
 800f056:	9301      	str	r3, [sp, #4]
 800f058:	231d      	movs	r3, #29
 800f05a:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 800f05e:	4620      	mov	r0, r4
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	463b      	mov	r3, r7
 800f064:	f001 fa6a 	bl	801053c <acc_confprogram_patch_offset>
 800f068:	896b      	ldrh	r3, [r5, #10]
 800f06a:	9301      	str	r3, [sp, #4]
 800f06c:	231a      	movs	r3, #26
 800f06e:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 800f072:	4620      	mov	r0, r4
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	463b      	mov	r3, r7
 800f078:	f001 fa60 	bl	801053c <acc_confprogram_patch_offset>
 800f07c:	89ab      	ldrh	r3, [r5, #12]
 800f07e:	9301      	str	r3, [sp, #4]
 800f080:	2314      	movs	r3, #20
 800f082:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 800f086:	4620      	mov	r0, r4
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	463b      	mov	r3, r7
 800f08c:	f001 fa56 	bl	801053c <acc_confprogram_patch_offset>
 800f090:	89eb      	ldrh	r3, [r5, #14]
 800f092:	9301      	str	r3, [sp, #4]
 800f094:	2322      	movs	r3, #34	; 0x22
 800f096:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 800f09a:	4620      	mov	r0, r4
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	463b      	mov	r3, r7
 800f0a0:	f001 fa4c 	bl	801053c <acc_confprogram_patch_offset>
 800f0a4:	8a28      	ldrh	r0, [r5, #16]
 800f0a6:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d198      	bne.n	800efe0 <acc_cpd_supply_test+0x60>
 800f0ae:	207f      	movs	r0, #127	; 0x7f
 800f0b0:	e797      	b.n	800efe2 <acc_cpd_supply_test+0x62>
 800f0b2:	ab0f      	add	r3, sp, #60	; 0x3c
 800f0b4:	210f      	movs	r1, #15
 800f0b6:	2212      	movs	r2, #18
 800f0b8:	9303      	str	r3, [sp, #12]
 800f0ba:	f8cd 8008 	str.w	r8, [sp, #8]
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	4650      	mov	r0, sl
 800f0c2:	e9cd 2100 	strd	r2, r1, [sp]
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	4659      	mov	r1, fp
 800f0ca:	f7ff fda9 	bl	800ec20 <measure>
 800f0ce:	2800      	cmp	r0, #0
 800f0d0:	f000 81e5 	beq.w	800f49e <acc_cpd_supply_test+0x51e>
 800f0d4:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800f0d8:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800f0dc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800f0e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0e4:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 800f0e8:	f1b9 0f00 	cmp.w	r9, #0
 800f0ec:	f000 811d 	beq.w	800f32a <acc_cpd_supply_test+0x3aa>
 800f0f0:	eb09 03c4 	add.w	r3, r9, r4, lsl #3
 800f0f4:	ed93 7a00 	vldr	s14, [r3]
 800f0f8:	edd3 6a01 	vldr	s13, [r3, #4]
 800f0fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f104:	dc05      	bgt.n	800f112 <acc_cpd_supply_test+0x192>
 800f106:	eef4 6ae7 	vcmpe.f32	s13, s15
 800f10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10e:	f140 8165 	bpl.w	800f3dc <acc_cpd_supply_test+0x45c>
 800f112:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11a:	bf48      	it	mi
 800f11c:	eeb1 7a47 	vnegmi.f32	s14, s14
 800f120:	4a4e      	ldr	r2, [pc, #312]	; (800f25c <acc_cpd_supply_test+0x2dc>)
 800f122:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800f126:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800f128:	bf4c      	ite	mi
 800f12a:	4a4d      	ldrmi	r2, [pc, #308]	; (800f260 <acc_cpd_supply_test+0x2e0>)
 800f12c:	4a4d      	ldrpl	r2, [pc, #308]	; (800f264 <acc_cpd_supply_test+0x2e4>)
 800f12e:	9200      	str	r2, [sp, #0]
 800f130:	ee37 7a28 	vadd.f32	s14, s14, s17
 800f134:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13c:	eebc 6ac7 	vcvt.u32.f32	s12, s14
 800f140:	bf48      	it	mi
 800f142:	eef1 6a66 	vnegmi.f32	s13, s13
 800f146:	eef8 5a46 	vcvt.f32.u32	s11, s12
 800f14a:	ee76 6aa8 	vadd.f32	s13, s13, s17
 800f14e:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f152:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 800f156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f15a:	eeb8 5a65 	vcvt.f32.u32	s10, s11
 800f15e:	bf4c      	ite	mi
 800f160:	493f      	ldrmi	r1, [pc, #252]	; (800f260 <acc_cpd_supply_test+0x2e0>)
 800f162:	4940      	ldrpl	r1, [pc, #256]	; (800f264 <acc_cpd_supply_test+0x2e4>)
 800f164:	edcd 5a04 	vstr	s11, [sp, #16]
 800f168:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f170:	ee66 6a88 	vmul.f32	s13, s13, s16
 800f174:	bf48      	it	mi
 800f176:	eef1 7a67 	vnegmi.f32	s15, s15
 800f17a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f17e:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800f182:	edcd 6a05 	vstr	s13, [sp, #20]
 800f186:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800f18a:	ee27 7a08 	vmul.f32	s14, s14, s16
 800f18e:	eef8 5a66 	vcvt.f32.u32	s11, s13
 800f192:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f196:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f19a:	bf4c      	ite	mi
 800f19c:	4830      	ldrmi	r0, [pc, #192]	; (800f260 <acc_cpd_supply_test+0x2e0>)
 800f19e:	4831      	ldrpl	r0, [pc, #196]	; (800f264 <acc_cpd_supply_test+0x2e4>)
 800f1a0:	4a31      	ldr	r2, [pc, #196]	; (800f268 <acc_cpd_supply_test+0x2e8>)
 800f1a2:	9006      	str	r0, [sp, #24]
 800f1a4:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f1a8:	9103      	str	r1, [sp, #12]
 800f1aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f1ae:	492f      	ldr	r1, [pc, #188]	; (800f26c <acc_cpd_supply_test+0x2ec>)
 800f1b0:	ed8d 7a02 	vstr	s14, [sp, #8]
 800f1b4:	ed8d 6a01 	vstr	s12, [sp, #4]
 800f1b8:	edcd 6a07 	vstr	s13, [sp, #28]
 800f1bc:	edcd 7a08 	vstr	s15, [sp, #32]
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	47b8      	blx	r7
 800f1c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1c6:	2303      	movs	r3, #3
 800f1c8:	5513      	strb	r3, [r2, r4]
 800f1ca:	3401      	adds	r4, #1
 800f1cc:	2c06      	cmp	r4, #6
 800f1ce:	d17b      	bne.n	800f2c8 <acc_cpd_supply_test+0x348>
 800f1d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f1d2:	682d      	ldr	r5, [r5, #0]
 800f1d4:	2138      	movs	r1, #56	; 0x38
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f7fa fe2e 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800f1dc:	4604      	mov	r4, r0
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	f040 812a 	bne.w	800f438 <acc_cpd_supply_test+0x4b8>
 800f1e4:	4b1d      	ldr	r3, [pc, #116]	; (800f25c <acc_cpd_supply_test+0x2dc>)
 800f1e6:	4a22      	ldr	r2, [pc, #136]	; (800f270 <acc_cpd_supply_test+0x2f0>)
 800f1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ea:	4920      	ldr	r1, [pc, #128]	; (800f26c <acc_cpd_supply_test+0x2ec>)
 800f1ec:	4798      	blx	r3
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	b011      	add	sp, #68	; 0x44
 800f1f2:	ecbd 8b06 	vpop	{d8-d10}
 800f1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1fa:	682e      	ldr	r6, [r5, #0]
 800f1fc:	2119      	movs	r1, #25
 800f1fe:	4630      	mov	r0, r6
 800f200:	f7fa fe1a 	bl	8009e38 <acc_sensor_protocol_r2_run_program>
 800f204:	4604      	mov	r4, r0
 800f206:	b950      	cbnz	r0, 800f21e <acc_cpd_supply_test+0x29e>
 800f208:	4b14      	ldr	r3, [pc, #80]	; (800f25c <acc_cpd_supply_test+0x2dc>)
 800f20a:	4a1a      	ldr	r2, [pc, #104]	; (800f274 <acc_cpd_supply_test+0x2f4>)
 800f20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f20e:	4917      	ldr	r1, [pc, #92]	; (800f26c <acc_cpd_supply_test+0x2ec>)
 800f210:	4798      	blx	r3
 800f212:	4620      	mov	r0, r4
 800f214:	b011      	add	sp, #68	; 0x44
 800f216:	ecbd 8b06 	vpop	{d8-d10}
 800f21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21e:	f7f7 fe8b 	bl	8006f38 <acc_rss_integration_log_level>
 800f222:	2803      	cmp	r0, #3
 800f224:	d905      	bls.n	800f232 <acc_cpd_supply_test+0x2b2>
 800f226:	4b0d      	ldr	r3, [pc, #52]	; (800f25c <acc_cpd_supply_test+0x2dc>)
 800f228:	4a13      	ldr	r2, [pc, #76]	; (800f278 <acc_cpd_supply_test+0x2f8>)
 800f22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f22c:	490f      	ldr	r1, [pc, #60]	; (800f26c <acc_cpd_supply_test+0x2ec>)
 800f22e:	2004      	movs	r0, #4
 800f230:	4798      	blx	r3
 800f232:	4630      	mov	r0, r6
 800f234:	2301      	movs	r3, #1
 800f236:	2202      	movs	r2, #2
 800f238:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f23c:	f7fa ff80 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800f240:	b9f0      	cbnz	r0, 800f280 <acc_cpd_supply_test+0x300>
 800f242:	2400      	movs	r4, #0
 800f244:	4620      	mov	r0, r4
 800f246:	b011      	add	sp, #68	; 0x44
 800f248:	ecbd 8b06 	vpop	{d8-d10}
 800f24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f250:	08018458 	.word	0x08018458
 800f254:	08016258 	.word	0x08016258
 800f258:	08019ce4 	.word	0x08019ce4
 800f25c:	20000640 	.word	0x20000640
 800f260:	08016418 	.word	0x08016418
 800f264:	08018e44 	.word	0x08018e44
 800f268:	08018778 	.word	0x08018778
 800f26c:	08018454 	.word	0x08018454
 800f270:	0801882c 	.word	0x0801882c
 800f274:	08018658 	.word	0x08018658
 800f278:	08018688 	.word	0x08018688
 800f27c:	08014264 	.word	0x08014264
 800f280:	f7f7 fe5a 	bl	8006f38 <acc_rss_integration_log_level>
 800f284:	2803      	cmp	r0, #3
 800f286:	d905      	bls.n	800f294 <acc_cpd_supply_test+0x314>
 800f288:	4b9b      	ldr	r3, [pc, #620]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f28a:	4a9c      	ldr	r2, [pc, #624]	; (800f4fc <acc_cpd_supply_test+0x57c>)
 800f28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f28e:	499c      	ldr	r1, [pc, #624]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f290:	2004      	movs	r0, #4
 800f292:	4798      	blx	r3
 800f294:	f8b5 8010 	ldrh.w	r8, [r5, #16]
 800f298:	f8d5 a000 	ldr.w	sl, [r5]
 800f29c:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
 800f2a0:	f1b8 0f00 	cmp.w	r8, #0
 800f2a4:	f000 8097 	beq.w	800f3d6 <acc_cpd_supply_test+0x456>
 800f2a8:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
 800f2ac:	f200 80e5 	bhi.w	800f47a <acc_cpd_supply_test+0x4fa>
 800f2b0:	950b      	str	r5, [sp, #44]	; 0x2c
 800f2b2:	ed9f 9a94 	vldr	s18, [pc, #592]	; 800f504 <acc_cpd_supply_test+0x584>
 800f2b6:	eddf 8a94 	vldr	s17, [pc, #592]	; 800f508 <acc_cpd_supply_test+0x588>
 800f2ba:	ed9f 8a94 	vldr	s16, [pc, #592]	; 800f50c <acc_cpd_supply_test+0x58c>
 800f2be:	eddf 9a94 	vldr	s19, [pc, #592]	; 800f510 <acc_cpd_supply_test+0x590>
 800f2c2:	ee1a 5a10 	vmov	r5, s20
 800f2c6:	2400      	movs	r4, #0
 800f2c8:	2e00      	cmp	r6, #0
 800f2ca:	d07e      	beq.n	800f3ca <acc_cpd_supply_test+0x44a>
 800f2cc:	5d33      	ldrb	r3, [r6, r4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f47f af7b 	bne.w	800f1ca <acc_cpd_supply_test+0x24a>
 800f2d4:	1e63      	subs	r3, r4, #1
 800f2d6:	4f8f      	ldr	r7, [pc, #572]	; (800f514 <acc_cpd_supply_test+0x594>)
 800f2d8:	ed8d 9a0f 	vstr	s18, [sp, #60]	; 0x3c
 800f2dc:	2b04      	cmp	r3, #4
 800f2de:	f200 80f3 	bhi.w	800f4c8 <acc_cpd_supply_test+0x548>
 800f2e2:	a201      	add	r2, pc, #4	; (adr r2, 800f2e8 <acc_cpd_supply_test+0x368>)
 800f2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e8:	0800f2fd 	.word	0x0800f2fd
 800f2ec:	0800f36b 	.word	0x0800f36b
 800f2f0:	0800f333 	.word	0x0800f333
 800f2f4:	0800f39b 	.word	0x0800f39b
 800f2f8:	0800f0b3 	.word	0x0800f0b3
 800f2fc:	ab0f      	add	r3, sp, #60	; 0x3c
 800f2fe:	211f      	movs	r1, #31
 800f300:	2207      	movs	r2, #7
 800f302:	9303      	str	r3, [sp, #12]
 800f304:	f8cd 8008 	str.w	r8, [sp, #8]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4650      	mov	r0, sl
 800f30c:	e9cd 2100 	strd	r2, r1, [sp]
 800f310:	462a      	mov	r2, r5
 800f312:	4659      	mov	r1, fp
 800f314:	f7ff fc84 	bl	800ec20 <measure>
 800f318:	2800      	cmp	r0, #0
 800f31a:	f000 80ce 	beq.w	800f4ba <acc_cpd_supply_test+0x53a>
 800f31e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800f322:	f1b9 0f00 	cmp.w	r9, #0
 800f326:	f47f aee3 	bne.w	800f0f0 <acc_cpd_supply_test+0x170>
 800f32a:	4b7b      	ldr	r3, [pc, #492]	; (800f518 <acc_cpd_supply_test+0x598>)
 800f32c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f330:	e6e0      	b.n	800f0f4 <acc_cpd_supply_test+0x174>
 800f332:	ab0f      	add	r3, sp, #60	; 0x3c
 800f334:	211a      	movs	r1, #26
 800f336:	2207      	movs	r2, #7
 800f338:	9303      	str	r3, [sp, #12]
 800f33a:	f8cd 8008 	str.w	r8, [sp, #8]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	4650      	mov	r0, sl
 800f342:	e9cd 2100 	strd	r2, r1, [sp]
 800f346:	462a      	mov	r2, r5
 800f348:	4659      	mov	r1, fp
 800f34a:	f7ff fc69 	bl	800ec20 <measure>
 800f34e:	2800      	cmp	r0, #0
 800f350:	f000 80ac 	beq.w	800f4ac <acc_cpd_supply_test+0x52c>
 800f354:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800f358:	ee79 7ae7 	vsub.f32	s15, s19, s15
 800f35c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800f360:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f364:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 800f368:	e6be      	b.n	800f0e8 <acc_cpd_supply_test+0x168>
 800f36a:	ab0f      	add	r3, sp, #60	; 0x3c
 800f36c:	210f      	movs	r1, #15
 800f36e:	2204      	movs	r2, #4
 800f370:	9303      	str	r3, [sp, #12]
 800f372:	f8cd 8008 	str.w	r8, [sp, #8]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	4650      	mov	r0, sl
 800f37a:	e9cd 2100 	strd	r2, r1, [sp]
 800f37e:	462a      	mov	r2, r5
 800f380:	4659      	mov	r1, fp
 800f382:	f7ff fc4d 	bl	800ec20 <measure>
 800f386:	2800      	cmp	r0, #0
 800f388:	f47f aea4 	bne.w	800f0d4 <acc_cpd_supply_test+0x154>
 800f38c:	4a5a      	ldr	r2, [pc, #360]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f392:	495b      	ldr	r1, [pc, #364]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f394:	4a61      	ldr	r2, [pc, #388]	; (800f51c <acc_cpd_supply_test+0x59c>)
 800f396:	47a0      	blx	r4
 800f398:	e753      	b.n	800f242 <acc_cpd_supply_test+0x2c2>
 800f39a:	ab0f      	add	r3, sp, #60	; 0x3c
 800f39c:	210f      	movs	r1, #15
 800f39e:	2205      	movs	r2, #5
 800f3a0:	9303      	str	r3, [sp, #12]
 800f3a2:	f8cd 8008 	str.w	r8, [sp, #8]
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	4650      	mov	r0, sl
 800f3aa:	e9cd 2100 	strd	r2, r1, [sp]
 800f3ae:	462a      	mov	r2, r5
 800f3b0:	4659      	mov	r1, fp
 800f3b2:	f7ff fc35 	bl	800ec20 <measure>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f47f ae8c 	bne.w	800f0d4 <acc_cpd_supply_test+0x154>
 800f3bc:	4a4e      	ldr	r2, [pc, #312]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f3c2:	494f      	ldr	r1, [pc, #316]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f3c4:	4a55      	ldr	r2, [pc, #340]	; (800f51c <acc_cpd_supply_test+0x59c>)
 800f3c6:	47a0      	blx	r4
 800f3c8:	e73b      	b.n	800f242 <acc_cpd_supply_test+0x2c2>
 800f3ca:	4b55      	ldr	r3, [pc, #340]	; (800f520 <acc_cpd_supply_test+0x5a0>)
 800f3cc:	5ce3      	ldrb	r3, [r4, r3]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f47f aefb 	bne.w	800f1ca <acc_cpd_supply_test+0x24a>
 800f3d4:	e77e      	b.n	800f2d4 <acc_cpd_supply_test+0x354>
 800f3d6:	f04f 0880 	mov.w	r8, #128	; 0x80
 800f3da:	e769      	b.n	800f2b0 <acc_cpd_supply_test+0x330>
 800f3dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f3de:	2300      	movs	r3, #0
 800f3e0:	5513      	strb	r3, [r2, r4]
 800f3e2:	f7f7 fda9 	bl	8006f38 <acc_rss_integration_log_level>
 800f3e6:	2801      	cmp	r0, #1
 800f3e8:	f67f aeef 	bls.w	800f1ca <acc_cpd_supply_test+0x24a>
 800f3ec:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800f3f0:	4a41      	ldr	r2, [pc, #260]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f3f2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800f3f6:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800f3f8:	4941      	ldr	r1, [pc, #260]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f3fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f402:	bf48      	it	mi
 800f404:	eef1 7a67 	vnegmi.f32	s15, s15
 800f408:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800f40c:	bf4c      	ite	mi
 800f40e:	4a45      	ldrmi	r2, [pc, #276]	; (800f524 <acc_cpd_supply_test+0x5a4>)
 800f410:	4a45      	ldrpl	r2, [pc, #276]	; (800f528 <acc_cpd_supply_test+0x5a8>)
 800f412:	9200      	str	r2, [sp, #0]
 800f414:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800f418:	4a44      	ldr	r2, [pc, #272]	; (800f52c <acc_cpd_supply_test+0x5ac>)
 800f41a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800f41e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f422:	2002      	movs	r0, #2
 800f424:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f428:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f42c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f430:	edcd 7a02 	vstr	s15, [sp, #8]
 800f434:	47b8      	blx	r7
 800f436:	e6c8      	b.n	800f1ca <acc_cpd_supply_test+0x24a>
 800f438:	f7f7 fd7e 	bl	8006f38 <acc_rss_integration_log_level>
 800f43c:	2803      	cmp	r0, #3
 800f43e:	d905      	bls.n	800f44c <acc_cpd_supply_test+0x4cc>
 800f440:	4b2d      	ldr	r3, [pc, #180]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f442:	4a3b      	ldr	r2, [pc, #236]	; (800f530 <acc_cpd_supply_test+0x5b0>)
 800f444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f446:	492e      	ldr	r1, [pc, #184]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f448:	2004      	movs	r0, #4
 800f44a:	4798      	blx	r3
 800f44c:	4628      	mov	r0, r5
 800f44e:	2301      	movs	r3, #1
 800f450:	2202      	movs	r2, #2
 800f452:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f456:	f7fa fe73 	bl	800a140 <acc_sensor_protocol_r2_wait_for_specific_event>
 800f45a:	4604      	mov	r4, r0
 800f45c:	2800      	cmp	r0, #0
 800f45e:	f43f aef0 	beq.w	800f242 <acc_cpd_supply_test+0x2c2>
 800f462:	f7f7 fd69 	bl	8006f38 <acc_rss_integration_log_level>
 800f466:	2803      	cmp	r0, #3
 800f468:	f67f aec1 	bls.w	800f1ee <acc_cpd_supply_test+0x26e>
 800f46c:	4b22      	ldr	r3, [pc, #136]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f46e:	4a31      	ldr	r2, [pc, #196]	; (800f534 <acc_cpd_supply_test+0x5b4>)
 800f470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f472:	4923      	ldr	r1, [pc, #140]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f474:	2004      	movs	r0, #4
 800f476:	4798      	blx	r3
 800f478:	e6b9      	b.n	800f1ee <acc_cpd_supply_test+0x26e>
 800f47a:	f7f7 fd5d 	bl	8006f38 <acc_rss_integration_log_level>
 800f47e:	b158      	cbz	r0, 800f498 <acc_cpd_supply_test+0x518>
 800f480:	4b1d      	ldr	r3, [pc, #116]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f482:	4a2d      	ldr	r2, [pc, #180]	; (800f538 <acc_cpd_supply_test+0x5b8>)
 800f484:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800f486:	491e      	ldr	r1, [pc, #120]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f488:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800f48c:	4643      	mov	r3, r8
 800f48e:	9700      	str	r7, [sp, #0]
 800f490:	2001      	movs	r0, #1
 800f492:	46b8      	mov	r8, r7
 800f494:	47a0      	blx	r4
 800f496:	e70b      	b.n	800f2b0 <acc_cpd_supply_test+0x330>
 800f498:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800f49c:	e708      	b.n	800f2b0 <acc_cpd_supply_test+0x330>
 800f49e:	4a16      	ldr	r2, [pc, #88]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f4a4:	4916      	ldr	r1, [pc, #88]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f4a6:	4a1d      	ldr	r2, [pc, #116]	; (800f51c <acc_cpd_supply_test+0x59c>)
 800f4a8:	47a0      	blx	r4
 800f4aa:	e6ca      	b.n	800f242 <acc_cpd_supply_test+0x2c2>
 800f4ac:	4a12      	ldr	r2, [pc, #72]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f4b2:	4913      	ldr	r1, [pc, #76]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f4b4:	4a19      	ldr	r2, [pc, #100]	; (800f51c <acc_cpd_supply_test+0x59c>)
 800f4b6:	47a0      	blx	r4
 800f4b8:	e6c3      	b.n	800f242 <acc_cpd_supply_test+0x2c2>
 800f4ba:	4a0f      	ldr	r2, [pc, #60]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f4c0:	490f      	ldr	r1, [pc, #60]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f4c2:	4a16      	ldr	r2, [pc, #88]	; (800f51c <acc_cpd_supply_test+0x59c>)
 800f4c4:	47a0      	blx	r4
 800f4c6:	e6bc      	b.n	800f242 <acc_cpd_supply_test+0x2c2>
 800f4c8:	ab0f      	add	r3, sp, #60	; 0x3c
 800f4ca:	210f      	movs	r1, #15
 800f4cc:	2207      	movs	r2, #7
 800f4ce:	9303      	str	r3, [sp, #12]
 800f4d0:	f8cd 8008 	str.w	r8, [sp, #8]
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	4650      	mov	r0, sl
 800f4d8:	e9cd 2100 	strd	r2, r1, [sp]
 800f4dc:	462a      	mov	r2, r5
 800f4de:	4659      	mov	r1, fp
 800f4e0:	f7ff fb9e 	bl	800ec20 <measure>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	f47f af1a 	bne.w	800f31e <acc_cpd_supply_test+0x39e>
 800f4ea:	4a03      	ldr	r2, [pc, #12]	; (800f4f8 <acc_cpd_supply_test+0x578>)
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f4f0:	4903      	ldr	r1, [pc, #12]	; (800f500 <acc_cpd_supply_test+0x580>)
 800f4f2:	4a0a      	ldr	r2, [pc, #40]	; (800f51c <acc_cpd_supply_test+0x59c>)
 800f4f4:	47a0      	blx	r4
 800f4f6:	e6a4      	b.n	800f242 <acc_cpd_supply_test+0x2c2>
 800f4f8:	20000640 	.word	0x20000640
 800f4fc:	080186b0 	.word	0x080186b0
 800f500:	08018454 	.word	0x08018454
 800f504:	7fc00000 	.word	0x7fc00000
 800f508:	350637bd 	.word	0x350637bd
 800f50c:	49742400 	.word	0x49742400
 800f510:	3f19999a 	.word	0x3f19999a
 800f514:	20000130 	.word	0x20000130
 800f518:	080188f8 	.word	0x080188f8
 800f51c:	08018754 	.word	0x08018754
 800f520:	080188f0 	.word	0x080188f0
 800f524:	08016418 	.word	0x08016418
 800f528:	08018e44 	.word	0x08018e44
 800f52c:	08018808 	.word	0x08018808
 800f530:	0801885c 	.word	0x0801885c
 800f534:	08018884 	.word	0x08018884
 800f538:	080186dc 	.word	0x080186dc

0800f53c <acc_cpd_sweep_check_voffset_vslope>:
 800f53c:	8802      	ldrh	r2, [r0, #0]
 800f53e:	eddf 4a2e 	vldr	s9, [pc, #184]	; 800f5f8 <acc_cpd_sweep_check_voffset_vslope+0xbc>
 800f542:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f5fc <acc_cpd_sweep_check_voffset_vslope+0xc0>
 800f546:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800f600 <acc_cpd_sweep_check_voffset_vslope+0xc4>
 800f54a:	ee07 2a90 	vmov	s15, r2
 800f54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f552:	b410      	push	{r4}
 800f554:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800f558:	4c2a      	ldr	r4, [pc, #168]	; (800f604 <acc_cpd_sweep_check_voffset_vslope+0xc8>)
 800f55a:	8842      	ldrh	r2, [r0, #2]
 800f55c:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800f560:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800f564:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f568:	ee07 1a10 	vmov	s14, r1
 800f56c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f570:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f574:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f578:	b083      	sub	sp, #12
 800f57a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f57e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f582:	edcd 7a01 	vstr	s15, [sp, #4]
 800f586:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800f58a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800f58e:	f2a0 24ee 	subw	r4, r0, #750	; 0x2ee
 800f592:	f5b4 7f06 	cmp.w	r4, #536	; 0x218
 800f596:	d224      	bcs.n	800f5e2 <acc_cpd_sweep_check_voffset_vslope+0xa6>
 800f598:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 800f59c:	f5b0 7fe6 	cmp.w	r0, #460	; 0x1cc
 800f5a0:	d924      	bls.n	800f5ec <acc_cpd_sweep_check_voffset_vslope+0xb0>
 800f5a2:	ee07 2a90 	vmov	s15, r2
 800f5a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f5aa:	ee07 1a90 	vmov	s15, r1
 800f5ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f5b2:	ee67 7a24 	vmul.f32	s15, s14, s9
 800f5b6:	3364      	adds	r3, #100	; 0x64
 800f5b8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f5bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f5c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f5c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5cc:	ee17 2a90 	vmov	r2, s15
 800f5d0:	b210      	sxth	r0, r2
 800f5d2:	4298      	cmp	r0, r3
 800f5d4:	bfcc      	ite	gt
 800f5d6:	2000      	movgt	r0, #0
 800f5d8:	2001      	movle	r0, #1
 800f5da:	b003      	add	sp, #12
 800f5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5e0:	4770      	bx	lr
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	b003      	add	sp, #12
 800f5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ea:	4770      	bx	lr
 800f5ec:	2001      	movs	r0, #1
 800f5ee:	b003      	add	sp, #12
 800f5f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	37800000 	.word	0x37800000
 800f5fc:	3f99999a 	.word	0x3f99999a
 800f600:	447a0000 	.word	0x447a0000
 800f604:	0801a9e4 	.word	0x0801a9e4

0800f608 <acc_cpd_sweep_check_count_bad_sweeps>:
 800f608:	b138      	cbz	r0, 800f61a <acc_cpd_sweep_check_count_bad_sweeps+0x12>
 800f60a:	2200      	movs	r2, #0
 800f60c:	1e43      	subs	r3, r0, #1
 800f60e:	4018      	ands	r0, r3
 800f610:	f102 0201 	add.w	r2, r2, #1
 800f614:	d1fa      	bne.n	800f60c <acc_cpd_sweep_check_count_bad_sweeps+0x4>
 800f616:	4610      	mov	r0, r2
 800f618:	4770      	bx	lr
 800f61a:	4602      	mov	r2, r0
 800f61c:	4610      	mov	r0, r2
 800f61e:	4770      	bx	lr

0800f620 <acc_radar_engine_check_asic_id>:
 800f620:	6800      	ldr	r0, [r0, #0]
 800f622:	2100      	movs	r1, #0
 800f624:	f7fa be7e 	b.w	800a324 <acc_sensor_protocol_r2_check_asic_id>

0800f628 <acc_radar_engine_wait_for_radar_data>:
 800f628:	6800      	ldr	r0, [r0, #0]
 800f62a:	f7fa bde9 	b.w	800a200 <acc_sensor_protocol_r2_wait_for_radar_data>
 800f62e:	bf00      	nop

0800f630 <acc_radar_engine_measure>:
 800f630:	6800      	ldr	r0, [r0, #0]
 800f632:	f7fa bc8d 	b.w	8009f50 <acc_sensor_protocol_r2_ack_event>
 800f636:	bf00      	nop

0800f638 <acc_radar_engine_wait_for_hibernate_ready>:
 800f638:	6800      	ldr	r0, [r0, #0]
 800f63a:	f7fa bdab 	b.w	800a194 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800f63e:	bf00      	nop

0800f640 <acc_radar_engine_acquire_adc_data>:
 800f640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f644:	ed2d 8b02 	vpush	{d8}
 800f648:	2600      	movs	r6, #0
 800f64a:	6016      	str	r6, [r2, #0]
 800f64c:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800f650:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800f768 <acc_radar_engine_acquire_adc_data+0x128>
 800f654:	7bc3      	ldrb	r3, [r0, #15]
 800f656:	f890 800e 	ldrb.w	r8, [r0, #14]
 800f65a:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800f65e:	7316      	strb	r6, [r2, #12]
 800f660:	b089      	sub	sp, #36	; 0x24
 800f662:	460f      	mov	r7, r1
 800f664:	7116      	strb	r6, [r2, #4]
 800f666:	f88d 600e 	strb.w	r6, [sp, #14]
 800f66a:	f88d 600f 	strb.w	r6, [sp, #15]
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	ed82 8a02 	vstr	s16, [r2, #8]
 800f674:	f1ba 0f00 	cmp.w	sl, #0
 800f678:	d05b      	beq.n	800f732 <acc_radar_engine_acquire_adc_data+0xf2>
 800f67a:	4647      	mov	r7, r8
 800f67c:	4614      	mov	r4, r2
 800f67e:	4605      	mov	r5, r0
 800f680:	4688      	mov	r8, r1
 800f682:	b927      	cbnz	r7, 800f68e <acc_radar_engine_acquire_adc_data+0x4e>
 800f684:	6828      	ldr	r0, [r5, #0]
 800f686:	f7fa fc63 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	d05e      	beq.n	800f74c <acc_radar_engine_acquire_adc_data+0x10c>
 800f68e:	6828      	ldr	r0, [r5, #0]
 800f690:	f10d 020e 	add.w	r2, sp, #14
 800f694:	4659      	mov	r1, fp
 800f696:	f7fa fdb3 	bl	800a200 <acc_sensor_protocol_r2_wait_for_radar_data>
 800f69a:	2800      	cmp	r0, #0
 800f69c:	d056      	beq.n	800f74c <acc_radar_engine_acquire_adc_data+0x10c>
 800f69e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800f6a2:	b903      	cbnz	r3, 800f6a6 <acc_radar_engine_acquire_adc_data+0x66>
 800f6a4:	78a3      	ldrb	r3, [r4, #2]
 800f6a6:	69aa      	ldr	r2, [r5, #24]
 800f6a8:	70a3      	strb	r3, [r4, #2]
 800f6aa:	4641      	mov	r1, r8
 800f6ac:	6953      	ldr	r3, [r2, #20]
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f10d 020f 	add.w	r2, sp, #15
 800f6b4:	4798      	blx	r3
 800f6b6:	69aa      	ldr	r2, [r5, #24]
 800f6b8:	9004      	str	r0, [sp, #16]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800f6c0:	f88d 3014 	strb.w	r3, [sp, #20]
 800f6c4:	f88d 301c 	strb.w	r3, [sp, #28]
 800f6c8:	ed8d 8a06 	vstr	s16, [sp, #24]
 800f6cc:	ab05      	add	r3, sp, #20
 800f6ce:	aa04      	add	r2, sp, #16
 800f6d0:	4641      	mov	r1, r8
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	47c8      	blx	r9
 800f6d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f6da:	b903      	cbnz	r3, 800f6de <acc_radar_engine_acquire_adc_data+0x9e>
 800f6dc:	7b23      	ldrb	r3, [r4, #12]
 800f6de:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800f6e2:	7323      	strb	r3, [r4, #12]
 800f6e4:	f1b9 0f00 	cmp.w	r9, #0
 800f6e8:	d129      	bne.n	800f73e <acc_radar_engine_acquire_adc_data+0xfe>
 800f6ea:	7923      	ldrb	r3, [r4, #4]
 800f6ec:	edd4 0a02 	vldr	s1, [r4, #8]
 800f6f0:	ed9d 0a06 	vldr	s0, [sp, #24]
 800f6f4:	7123      	strb	r3, [r4, #4]
 800f6f6:	f002 fa35 	bl	8011b64 <fmaxf>
 800f6fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f6fe:	ed84 0a02 	vstr	s0, [r4, #8]
 800f702:	b902      	cbnz	r2, 800f706 <acc_radar_engine_acquire_adc_data+0xc6>
 800f704:	78e2      	ldrb	r2, [r4, #3]
 800f706:	8821      	ldrh	r1, [r4, #0]
 800f708:	9b04      	ldr	r3, [sp, #16]
 800f70a:	70e2      	strb	r2, [r4, #3]
 800f70c:	69aa      	ldr	r2, [r5, #24]
 800f70e:	440b      	add	r3, r1
 800f710:	8023      	strh	r3, [r4, #0]
 800f712:	4649      	mov	r1, r9
 800f714:	69d3      	ldr	r3, [r2, #28]
 800f716:	4628      	mov	r0, r5
 800f718:	4798      	blx	r3
 800f71a:	9b01      	ldr	r3, [sp, #4]
 800f71c:	b11b      	cbz	r3, 800f726 <acc_radar_engine_acquire_adc_data+0xe6>
 800f71e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f722:	42b3      	cmp	r3, r6
 800f724:	d018      	beq.n	800f758 <acc_radar_engine_acquire_adc_data+0x118>
 800f726:	b967      	cbnz	r7, 800f742 <acc_radar_engine_acquire_adc_data+0x102>
 800f728:	3601      	adds	r6, #1
 800f72a:	b2b3      	uxth	r3, r6
 800f72c:	4553      	cmp	r3, sl
 800f72e:	d3a8      	bcc.n	800f682 <acc_radar_engine_acquire_adc_data+0x42>
 800f730:	4647      	mov	r7, r8
 800f732:	6838      	ldr	r0, [r7, #0]
 800f734:	b009      	add	sp, #36	; 0x24
 800f736:	ecbd 8b02 	vpop	{d8}
 800f73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73e:	464b      	mov	r3, r9
 800f740:	e7d4      	b.n	800f6ec <acc_radar_engine_acquire_adc_data+0xac>
 800f742:	6828      	ldr	r0, [r5, #0]
 800f744:	f7fa fc04 	bl	8009f50 <acc_sensor_protocol_r2_ack_event>
 800f748:	2800      	cmp	r0, #0
 800f74a:	d1ed      	bne.n	800f728 <acc_radar_engine_acquire_adc_data+0xe8>
 800f74c:	2000      	movs	r0, #0
 800f74e:	b009      	add	sp, #36	; 0x24
 800f750:	ecbd 8b02 	vpop	{d8}
 800f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f758:	f8d8 0000 	ldr.w	r0, [r8]
 800f75c:	b009      	add	sp, #36	; 0x24
 800f75e:	ecbd 8b02 	vpop	{d8}
 800f762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f766:	bf00      	nop
 800f768:	ff800000 	.word	0xff800000

0800f76c <acc_sensor_diagnostics_r2_sensor_status>:
 800f76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f770:	b094      	sub	sp, #80	; 0x50
 800f772:	4604      	mov	r4, r0
 800f774:	f7f7 fbe0 	bl	8006f38 <acc_rss_integration_log_level>
 800f778:	2801      	cmp	r0, #1
 800f77a:	d905      	bls.n	800f788 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800f77c:	4b9c      	ldr	r3, [pc, #624]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f77e:	4a9d      	ldr	r2, [pc, #628]	; (800f9f4 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800f780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f782:	499d      	ldr	r1, [pc, #628]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f784:	2002      	movs	r0, #2
 800f786:	4798      	blx	r3
 800f788:	2201      	movs	r2, #1
 800f78a:	21b2      	movs	r1, #178	; 0xb2
 800f78c:	4620      	mov	r0, r4
 800f78e:	f7fb f919 	bl	800a9c4 <acc_sensor_reg_write>
 800f792:	2300      	movs	r3, #0
 800f794:	f8df a258 	ldr.w	sl, [pc, #600]	; 800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800f798:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800fa24 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800f79c:	4f96      	ldr	r7, [pc, #600]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f79e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800f7a2:	2564      	movs	r5, #100	; 0x64
 800f7a4:	e013      	b.n	800f7ce <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800f7a6:	f7f7 fbc7 	bl	8006f38 <acc_rss_integration_log_level>
 800f7aa:	2801      	cmp	r0, #1
 800f7ac:	4623      	mov	r3, r4
 800f7ae:	464a      	mov	r2, r9
 800f7b0:	4639      	mov	r1, r7
 800f7b2:	f04f 0002 	mov.w	r0, #2
 800f7b6:	d907      	bls.n	800f7c8 <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800f7b8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800f7bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800f7c0:	9600      	str	r6, [sp, #0]
 800f7c2:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800f7c6:	47b0      	blx	r6
 800f7c8:	3d01      	subs	r5, #1
 800f7ca:	b2ad      	uxth	r5, r5
 800f7cc:	b1c5      	cbz	r5, 800f800 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800f7ce:	aa0c      	add	r2, sp, #48	; 0x30
 800f7d0:	2111      	movs	r1, #17
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f7fb f8e0 	bl	800a998 <acc_sensor_reg_read>
 800f7d8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f7dc:	055b      	lsls	r3, r3, #21
 800f7de:	d4e2      	bmi.n	800f7a6 <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800f7e0:	f7f7 fbaa 	bl	8006f38 <acc_rss_integration_log_level>
 800f7e4:	2801      	cmp	r0, #1
 800f7e6:	d90b      	bls.n	800f800 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800f7e8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f7ec:	4980      	ldr	r1, [pc, #512]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f7ee:	4a83      	ldr	r2, [pc, #524]	; (800f9fc <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800f7f0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800f7f2:	4981      	ldr	r1, [pc, #516]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f7f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7f8:	9300      	str	r3, [sp, #0]
 800f7fa:	2002      	movs	r0, #2
 800f7fc:	4623      	mov	r3, r4
 800f7fe:	47a8      	blx	r5
 800f800:	2600      	movs	r6, #0
 800f802:	4631      	mov	r1, r6
 800f804:	aa09      	add	r2, sp, #36	; 0x24
 800f806:	4620      	mov	r0, r4
 800f808:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800f80c:	4d7c      	ldr	r5, [pc, #496]	; (800fa00 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800f80e:	f7fb f8c3 	bl	800a998 <acc_sensor_reg_read>
 800f812:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800f816:	212a      	movs	r1, #42	; 0x2a
 800f818:	4620      	mov	r0, r4
 800f81a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800f81e:	f7fb f8bb 	bl	800a998 <acc_sensor_reg_read>
 800f822:	2128      	movs	r1, #40	; 0x28
 800f824:	aa0a      	add	r2, sp, #40	; 0x28
 800f826:	4620      	mov	r0, r4
 800f828:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800f82c:	f105 071e 	add.w	r7, r5, #30
 800f830:	f7fb f8b2 	bl	800a998 <acc_sensor_reg_read>
 800f834:	ae0c      	add	r6, sp, #48	; 0x30
 800f836:	2163      	movs	r1, #99	; 0x63
 800f838:	e001      	b.n	800f83e <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800f83a:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800f83e:	4632      	mov	r2, r6
 800f840:	4620      	mov	r0, r4
 800f842:	f7fb f8a9 	bl	800a998 <acc_sensor_reg_read>
 800f846:	42af      	cmp	r7, r5
 800f848:	f106 0602 	add.w	r6, r6, #2
 800f84c:	d1f5      	bne.n	800f83a <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800f84e:	f7f7 fb73 	bl	8006f38 <acc_rss_integration_log_level>
 800f852:	2801      	cmp	r0, #1
 800f854:	d91e      	bls.n	800f894 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800f856:	4d66      	ldr	r5, [pc, #408]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f858:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800f85c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800f860:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800f862:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800f866:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800f86a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800f86e:	9107      	str	r1, [sp, #28]
 800f870:	9206      	str	r2, [sp, #24]
 800f872:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800f876:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800f87a:	9305      	str	r3, [sp, #20]
 800f87c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f880:	9300      	str	r3, [sp, #0]
 800f882:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f886:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800f88a:	4a5e      	ldr	r2, [pc, #376]	; (800fa04 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800f88c:	495a      	ldr	r1, [pc, #360]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f88e:	4623      	mov	r3, r4
 800f890:	2002      	movs	r0, #2
 800f892:	47a8      	blx	r5
 800f894:	f7f7 fb50 	bl	8006f38 <acc_rss_integration_log_level>
 800f898:	2801      	cmp	r0, #1
 800f89a:	d91e      	bls.n	800f8da <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800f89c:	4d54      	ldr	r5, [pc, #336]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f89e:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800f8a2:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800f8a6:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800f8a8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800f8ac:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800f8b0:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800f8b4:	9107      	str	r1, [sp, #28]
 800f8b6:	9206      	str	r2, [sp, #24]
 800f8b8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800f8bc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800f8c0:	9305      	str	r3, [sp, #20]
 800f8c2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f8cc:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800f8d0:	4a4d      	ldr	r2, [pc, #308]	; (800fa08 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800f8d2:	4949      	ldr	r1, [pc, #292]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f8d4:	4623      	mov	r3, r4
 800f8d6:	2002      	movs	r0, #2
 800f8d8:	47a8      	blx	r5
 800f8da:	aa0c      	add	r2, sp, #48	; 0x30
 800f8dc:	2168      	movs	r1, #104	; 0x68
 800f8de:	4620      	mov	r0, r4
 800f8e0:	f7fb f85a 	bl	800a998 <acc_sensor_reg_read>
 800f8e4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800f8e8:	2167      	movs	r1, #103	; 0x67
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f7fb f854 	bl	800a998 <acc_sensor_reg_read>
 800f8f0:	aa0d      	add	r2, sp, #52	; 0x34
 800f8f2:	2166      	movs	r1, #102	; 0x66
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	f7fb f84f 	bl	800a998 <acc_sensor_reg_read>
 800f8fa:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800f8fe:	2165      	movs	r1, #101	; 0x65
 800f900:	4620      	mov	r0, r4
 800f902:	f7fb f849 	bl	800a998 <acc_sensor_reg_read>
 800f906:	f7f7 fb17 	bl	8006f38 <acc_rss_integration_log_level>
 800f90a:	2801      	cmp	r0, #1
 800f90c:	d912      	bls.n	800f934 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800f90e:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800f912:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800f916:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800f91a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f91e:	4d34      	ldr	r5, [pc, #208]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f920:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800f922:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f926:	e9cd 3200 	strd	r3, r2, [sp]
 800f92a:	4933      	ldr	r1, [pc, #204]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f92c:	4a37      	ldr	r2, [pc, #220]	; (800fa0c <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800f92e:	4623      	mov	r3, r4
 800f930:	2002      	movs	r0, #2
 800f932:	47a8      	blx	r5
 800f934:	2500      	movs	r5, #0
 800f936:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800f93a:	2153      	movs	r1, #83	; 0x53
 800f93c:	4620      	mov	r0, r4
 800f93e:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800f942:	f7fb f829 	bl	800a998 <acc_sensor_reg_read>
 800f946:	aa0c      	add	r2, sp, #48	; 0x30
 800f948:	2140      	movs	r1, #64	; 0x40
 800f94a:	4620      	mov	r0, r4
 800f94c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800f950:	f7fb f822 	bl	800a998 <acc_sensor_reg_read>
 800f954:	f7f7 faf0 	bl	8006f38 <acc_rss_integration_log_level>
 800f958:	2801      	cmp	r0, #1
 800f95a:	d909      	bls.n	800f970 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800f95c:	4a24      	ldr	r2, [pc, #144]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f95e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f962:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800f964:	4924      	ldr	r1, [pc, #144]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	4a29      	ldr	r2, [pc, #164]	; (800fa10 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800f96a:	4623      	mov	r3, r4
 800f96c:	2002      	movs	r0, #2
 800f96e:	47a8      	blx	r5
 800f970:	f7f7 fae2 	bl	8006f38 <acc_rss_integration_log_level>
 800f974:	2801      	cmp	r0, #1
 800f976:	d90e      	bls.n	800f996 <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800f978:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f97c:	491c      	ldr	r1, [pc, #112]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f97e:	4a25      	ldr	r2, [pc, #148]	; (800fa14 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800f980:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800f982:	491d      	ldr	r1, [pc, #116]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f984:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800f988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f98c:	e9cd 3000 	strd	r3, r0, [sp]
 800f990:	4623      	mov	r3, r4
 800f992:	2002      	movs	r0, #2
 800f994:	47a8      	blx	r5
 800f996:	f7f7 facf 	bl	8006f38 <acc_rss_integration_log_level>
 800f99a:	2801      	cmp	r0, #1
 800f99c:	d90e      	bls.n	800f9bc <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800f99e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f9a2:	4913      	ldr	r1, [pc, #76]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f9a4:	4a1c      	ldr	r2, [pc, #112]	; (800fa18 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800f9a6:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800f9a8:	4913      	ldr	r1, [pc, #76]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f9aa:	f003 0010 	and.w	r0, r3, #16
 800f9ae:	f003 0320 	and.w	r3, r3, #32
 800f9b2:	e9cd 3000 	strd	r3, r0, [sp]
 800f9b6:	4623      	mov	r3, r4
 800f9b8:	2002      	movs	r0, #2
 800f9ba:	47a8      	blx	r5
 800f9bc:	f7f7 fabc 	bl	8006f38 <acc_rss_integration_log_level>
 800f9c0:	2801      	cmp	r0, #1
 800f9c2:	d90e      	bls.n	800f9e2 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800f9c4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f9c8:	4909      	ldr	r1, [pc, #36]	; (800f9f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800f9ca:	4a14      	ldr	r2, [pc, #80]	; (800fa1c <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800f9cc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800f9ce:	490a      	ldr	r1, [pc, #40]	; (800f9f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800f9d0:	f003 0004 	and.w	r0, r3, #4
 800f9d4:	f003 0308 	and.w	r3, r3, #8
 800f9d8:	e9cd 3000 	strd	r3, r0, [sp]
 800f9dc:	4623      	mov	r3, r4
 800f9de:	2002      	movs	r0, #2
 800f9e0:	47a8      	blx	r5
 800f9e2:	4d0f      	ldr	r5, [pc, #60]	; (800fa20 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800f9e4:	ae0c      	add	r6, sp, #48	; 0x30
 800f9e6:	f105 071e 	add.w	r7, r5, #30
 800f9ea:	21f0      	movs	r1, #240	; 0xf0
 800f9ec:	e01e      	b.n	800fa2c <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800f9ee:	bf00      	nop
 800f9f0:	20000640 	.word	0x20000640
 800f9f4:	08018928 	.word	0x08018928
 800f9f8:	08018968 	.word	0x08018968
 800f9fc:	080189a0 	.word	0x080189a0
 800fa00:	08018cb0 	.word	0x08018cb0
 800fa04:	080189c0 	.word	0x080189c0
 800fa08:	08018a08 	.word	0x08018a08
 800fa0c:	08018a54 	.word	0x08018a54
 800fa10:	08018a88 	.word	0x08018a88
 800fa14:	08018aa8 	.word	0x08018aa8
 800fa18:	08018ad4 	.word	0x08018ad4
 800fa1c:	08018b08 	.word	0x08018b08
 800fa20:	08018cd0 	.word	0x08018cd0
 800fa24:	08018980 	.word	0x08018980
 800fa28:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800fa2c:	4632      	mov	r2, r6
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f7fa ffb2 	bl	800a998 <acc_sensor_reg_read>
 800fa34:	42bd      	cmp	r5, r7
 800fa36:	f106 0602 	add.w	r6, r6, #2
 800fa3a:	d1f5      	bne.n	800fa28 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800fa3c:	f7f7 fa7c 	bl	8006f38 <acc_rss_integration_log_level>
 800fa40:	2801      	cmp	r0, #1
 800fa42:	f240 80b6 	bls.w	800fbb2 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800fa46:	4a5c      	ldr	r2, [pc, #368]	; (800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800fa48:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800fa4c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800fa4e:	495b      	ldr	r1, [pc, #364]	; (800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800fa50:	9300      	str	r3, [sp, #0]
 800fa52:	4a5b      	ldr	r2, [pc, #364]	; (800fbc0 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800fa54:	4623      	mov	r3, r4
 800fa56:	2002      	movs	r0, #2
 800fa58:	47a8      	blx	r5
 800fa5a:	2501      	movs	r5, #1
 800fa5c:	f7f7 fa6c 	bl	8006f38 <acc_rss_integration_log_level>
 800fa60:	2801      	cmp	r0, #1
 800fa62:	d90e      	bls.n	800fa82 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800fa64:	ab14      	add	r3, sp, #80	; 0x50
 800fa66:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800fa6a:	4b53      	ldr	r3, [pc, #332]	; (800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800fa6c:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800fa70:	9200      	str	r2, [sp, #0]
 800fa72:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800fa74:	4a53      	ldr	r2, [pc, #332]	; (800fbc4 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800fa76:	4951      	ldr	r1, [pc, #324]	; (800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800fa78:	3501      	adds	r5, #1
 800fa7a:	4623      	mov	r3, r4
 800fa7c:	2002      	movs	r0, #2
 800fa7e:	b2ed      	uxtb	r5, r5
 800fa80:	47b0      	blx	r6
 800fa82:	f8df a134 	ldr.w	sl, [pc, #308]	; 800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800fa86:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800fbe0 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800fa8a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800fa8e:	2601      	movs	r6, #1
 800fa90:	f7f7 fa52 	bl	8006f38 <acc_rss_integration_log_level>
 800fa94:	ab14      	add	r3, sp, #80	; 0x50
 800fa96:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800fa9a:	2801      	cmp	r0, #1
 800fa9c:	4667      	mov	r7, ip
 800fa9e:	4623      	mov	r3, r4
 800faa0:	464a      	mov	r2, r9
 800faa2:	4641      	mov	r1, r8
 800faa4:	f04f 0002 	mov.w	r0, #2
 800faa8:	d909      	bls.n	800fabe <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800faaa:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800faae:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800fab2:	9600      	str	r6, [sp, #0]
 800fab4:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800fab8:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800fabc:	47b8      	blx	r7
 800fabe:	3601      	adds	r6, #1
 800fac0:	3502      	adds	r5, #2
 800fac2:	2e08      	cmp	r6, #8
 800fac4:	b2ed      	uxtb	r5, r5
 800fac6:	d1e3      	bne.n	800fa90 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800fac8:	2500      	movs	r5, #0
 800faca:	aa0b      	add	r2, sp, #44	; 0x2c
 800facc:	219d      	movs	r1, #157	; 0x9d
 800face:	4620      	mov	r0, r4
 800fad0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800fad4:	f7fa ff60 	bl	800a998 <acc_sensor_reg_read>
 800fad8:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800fadc:	2199      	movs	r1, #153	; 0x99
 800fade:	4620      	mov	r0, r4
 800fae0:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800fae4:	f7fa ff58 	bl	800a998 <acc_sensor_reg_read>
 800fae8:	aa0c      	add	r2, sp, #48	; 0x30
 800faea:	2196      	movs	r1, #150	; 0x96
 800faec:	4620      	mov	r0, r4
 800faee:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800faf2:	f7fa ff51 	bl	800a998 <acc_sensor_reg_read>
 800faf6:	462a      	mov	r2, r5
 800faf8:	21b2      	movs	r1, #178	; 0xb2
 800fafa:	4620      	mov	r0, r4
 800fafc:	f7fa ff62 	bl	800a9c4 <acc_sensor_reg_write>
 800fb00:	f7f7 fa1a 	bl	8006f38 <acc_rss_integration_log_level>
 800fb04:	2801      	cmp	r0, #1
 800fb06:	d90f      	bls.n	800fb28 <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800fb08:	482b      	ldr	r0, [pc, #172]	; (800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800fb0a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800fb0e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800fb12:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800fb16:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800fb18:	9300      	str	r3, [sp, #0]
 800fb1a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fb1e:	4623      	mov	r3, r4
 800fb20:	4a29      	ldr	r2, [pc, #164]	; (800fbc8 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800fb22:	4926      	ldr	r1, [pc, #152]	; (800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800fb24:	2002      	movs	r0, #2
 800fb26:	47a8      	blx	r5
 800fb28:	f7f7 fa06 	bl	8006f38 <acc_rss_integration_log_level>
 800fb2c:	2801      	cmp	r0, #1
 800fb2e:	d909      	bls.n	800fb44 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800fb30:	4a21      	ldr	r2, [pc, #132]	; (800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800fb32:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800fb36:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800fb38:	4920      	ldr	r1, [pc, #128]	; (800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	4a23      	ldr	r2, [pc, #140]	; (800fbcc <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800fb3e:	4623      	mov	r3, r4
 800fb40:	2002      	movs	r0, #2
 800fb42:	47a8      	blx	r5
 800fb44:	f7f7 f9f8 	bl	8006f38 <acc_rss_integration_log_level>
 800fb48:	2801      	cmp	r0, #1
 800fb4a:	d909      	bls.n	800fb60 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800fb4c:	4a1a      	ldr	r2, [pc, #104]	; (800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800fb4e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800fb52:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800fb54:	4919      	ldr	r1, [pc, #100]	; (800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	4a1d      	ldr	r2, [pc, #116]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800fb5a:	4623      	mov	r3, r4
 800fb5c:	2002      	movs	r0, #2
 800fb5e:	47a8      	blx	r5
 800fb60:	f7f7 f9ea 	bl	8006f38 <acc_rss_integration_log_level>
 800fb64:	2801      	cmp	r0, #1
 800fb66:	d909      	bls.n	800fb7c <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800fb68:	4a13      	ldr	r2, [pc, #76]	; (800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800fb6a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800fb6e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800fb70:	4912      	ldr	r1, [pc, #72]	; (800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	4a17      	ldr	r2, [pc, #92]	; (800fbd4 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800fb76:	4623      	mov	r3, r4
 800fb78:	2002      	movs	r0, #2
 800fb7a:	47a8      	blx	r5
 800fb7c:	f7f7 f9dc 	bl	8006f38 <acc_rss_integration_log_level>
 800fb80:	2801      	cmp	r0, #1
 800fb82:	d909      	bls.n	800fb98 <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800fb84:	4a0c      	ldr	r2, [pc, #48]	; (800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800fb86:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800fb8a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800fb8c:	490b      	ldr	r1, [pc, #44]	; (800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800fb8e:	9300      	str	r3, [sp, #0]
 800fb90:	4a11      	ldr	r2, [pc, #68]	; (800fbd8 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800fb92:	4623      	mov	r3, r4
 800fb94:	2002      	movs	r0, #2
 800fb96:	47a8      	blx	r5
 800fb98:	f7f7 f9ce 	bl	8006f38 <acc_rss_integration_log_level>
 800fb9c:	2801      	cmp	r0, #1
 800fb9e:	d905      	bls.n	800fbac <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800fba0:	4b05      	ldr	r3, [pc, #20]	; (800fbb8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800fba2:	4a0e      	ldr	r2, [pc, #56]	; (800fbdc <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800fba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fba6:	4905      	ldr	r1, [pc, #20]	; (800fbbc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800fba8:	2002      	movs	r0, #2
 800fbaa:	4798      	blx	r3
 800fbac:	b014      	add	sp, #80	; 0x50
 800fbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbb2:	2500      	movs	r5, #0
 800fbb4:	e752      	b.n	800fa5c <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800fbb6:	bf00      	nop
 800fbb8:	20000640 	.word	0x20000640
 800fbbc:	08018968 	.word	0x08018968
 800fbc0:	08018b38 	.word	0x08018b38
 800fbc4:	08018b60 	.word	0x08018b60
 800fbc8:	08018ba8 	.word	0x08018ba8
 800fbcc:	08018bfc 	.word	0x08018bfc
 800fbd0:	08018c20 	.word	0x08018c20
 800fbd4:	08018c3c 	.word	0x08018c3c
 800fbd8:	08018c54 	.word	0x08018c54
 800fbdc:	08018c70 	.word	0x08018c70
 800fbe0:	08018b80 	.word	0x08018b80

0800fbe4 <acc_alg_basic_saturation_check_u16>:
 800fbe4:	eddf 6a17 	vldr	s13, [pc, #92]	; 800fc44 <acc_alg_basic_saturation_check_u16+0x60>
 800fbe8:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800fc48 <acc_alg_basic_saturation_check_u16+0x64>
 800fbec:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800fbf0:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800fbf4:	0849      	lsrs	r1, r1, #1
 800fbf6:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800fbfa:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fbfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fc02:	d01c      	beq.n	800fc3e <acc_alg_basic_saturation_check_u16+0x5a>
 800fc04:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fc08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc0c:	ee17 3a10 	vmov	r3, s14
 800fc10:	b430      	push	{r4, r5}
 800fc12:	b29d      	uxth	r5, r3
 800fc14:	ee17 3a90 	vmov	r3, s15
 800fc18:	b29c      	uxth	r4, r3
 800fc1a:	1e83      	subs	r3, r0, #2
 800fc1c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800fc20:	e003      	b.n	800fc2a <acc_alg_basic_saturation_check_u16+0x46>
 800fc22:	42aa      	cmp	r2, r5
 800fc24:	d905      	bls.n	800fc32 <acc_alg_basic_saturation_check_u16+0x4e>
 800fc26:	428b      	cmp	r3, r1
 800fc28:	d006      	beq.n	800fc38 <acc_alg_basic_saturation_check_u16+0x54>
 800fc2a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800fc2e:	42a2      	cmp	r2, r4
 800fc30:	d3f7      	bcc.n	800fc22 <acc_alg_basic_saturation_check_u16+0x3e>
 800fc32:	2001      	movs	r0, #1
 800fc34:	bc30      	pop	{r4, r5}
 800fc36:	4770      	bx	lr
 800fc38:	2000      	movs	r0, #0
 800fc3a:	bc30      	pop	{r4, r5}
 800fc3c:	4770      	bx	lr
 800fc3e:	4608      	mov	r0, r1
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	42c80000 	.word	0x42c80000
 800fc48:	477fff00 	.word	0x477fff00

0800fc4c <acc_alg_basic_saturation_check_i16>:
 800fc4c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800fcac <acc_alg_basic_saturation_check_i16+0x60>
 800fc50:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800fcb0 <acc_alg_basic_saturation_check_i16+0x64>
 800fc54:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800fcb4 <acc_alg_basic_saturation_check_i16+0x68>
 800fc58:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800fc5c:	0849      	lsrs	r1, r1, #1
 800fc5e:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800fc62:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fc66:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fc6a:	d01c      	beq.n	800fca6 <acc_alg_basic_saturation_check_i16+0x5a>
 800fc6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800fc70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc74:	ee17 3a10 	vmov	r3, s14
 800fc78:	b430      	push	{r4, r5}
 800fc7a:	b21d      	sxth	r5, r3
 800fc7c:	ee17 3a90 	vmov	r3, s15
 800fc80:	b21c      	sxth	r4, r3
 800fc82:	1e83      	subs	r3, r0, #2
 800fc84:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800fc88:	e003      	b.n	800fc92 <acc_alg_basic_saturation_check_i16+0x46>
 800fc8a:	42aa      	cmp	r2, r5
 800fc8c:	dd05      	ble.n	800fc9a <acc_alg_basic_saturation_check_i16+0x4e>
 800fc8e:	428b      	cmp	r3, r1
 800fc90:	d006      	beq.n	800fca0 <acc_alg_basic_saturation_check_i16+0x54>
 800fc92:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800fc96:	42a2      	cmp	r2, r4
 800fc98:	dbf7      	blt.n	800fc8a <acc_alg_basic_saturation_check_i16+0x3e>
 800fc9a:	2001      	movs	r0, #1
 800fc9c:	bc30      	pop	{r4, r5}
 800fc9e:	4770      	bx	lr
 800fca0:	2000      	movs	r0, #0
 800fca2:	bc30      	pop	{r4, r5}
 800fca4:	4770      	bx	lr
 800fca6:	4608      	mov	r0, r1
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	42c80000 	.word	0x42c80000
 800fcb0:	c7000000 	.word	0xc7000000
 800fcb4:	46fffe00 	.word	0x46fffe00

0800fcb8 <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 800fcb8:	b33b      	cbz	r3, 800fd0a <acc_alg_basic_exponential_smoothing_q3_12_complex+0x52>
 800fcba:	b4f0      	push	{r4, r5, r6, r7}
 800fcbc:	f100 0c02 	add.w	ip, r0, #2
 800fcc0:	2400      	movs	r4, #0
 800fcc2:	1c8f      	adds	r7, r1, #2
 800fcc4:	f931 6024 	ldrsh.w	r6, [r1, r4, lsl #2]
 800fcc8:	f930 5024 	ldrsh.w	r5, [r0, r4, lsl #2]
 800fccc:	1bad      	subs	r5, r5, r6
 800fcce:	fb02 f505 	mul.w	r5, r2, r5
 800fcd2:	2d00      	cmp	r5, #0
 800fcd4:	bfb8      	it	lt
 800fcd6:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800fcda:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800fcde:	f821 5024 	strh.w	r5, [r1, r4, lsl #2]
 800fce2:	f93c 5024 	ldrsh.w	r5, [ip, r4, lsl #2]
 800fce6:	f937 6024 	ldrsh.w	r6, [r7, r4, lsl #2]
 800fcea:	1bad      	subs	r5, r5, r6
 800fcec:	fb02 f505 	mul.w	r5, r2, r5
 800fcf0:	2d00      	cmp	r5, #0
 800fcf2:	bfb8      	it	lt
 800fcf4:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800fcf8:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800fcfc:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800fd00:	3401      	adds	r4, #1
 800fd02:	42a3      	cmp	r3, r4
 800fd04:	d1de      	bne.n	800fcc4 <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 800fd06:	bcf0      	pop	{r4, r5, r6, r7}
 800fd08:	4770      	bx	lr
 800fd0a:	4770      	bx	lr

0800fd0c <acc_alg_biquad_q3_12_lowpass_coeffs>:
 800fd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd10:	eddf 7abd 	vldr	s15, [pc, #756]	; 8010008 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 800fd14:	eeb0 0ac0 	vabs.f32	s0, s0
 800fd18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd20:	ed2d 8b02 	vpush	{d8}
 800fd24:	4680      	mov	r8, r0
 800fd26:	4689      	mov	r9, r1
 800fd28:	4616      	mov	r6, r2
 800fd2a:	461f      	mov	r7, r3
 800fd2c:	f300 810a 	bgt.w	800ff44 <acc_alg_biquad_q3_12_lowpass_coeffs+0x238>
 800fd30:	eddf 7ab6 	vldr	s15, [pc, #728]	; 801000c <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 800fd34:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd38:	f001 ff4c 	bl	8011bd4 <roundf>
 800fd3c:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8010010 <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 800fd40:	eddf 7ab4 	vldr	s15, [pc, #720]	; 8010014 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800fd44:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fd48:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd4c:	f1b8 0f00 	cmp.w	r8, #0
 800fd50:	d036      	beq.n	800fdc0 <acc_alg_biquad_q3_12_lowpass_coeffs+0xb4>
 800fd52:	f7f6 fc83 	bl	800665c <acc_alg_basic_math_restricted_tan_f32>
 800fd56:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8010018 <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 800fd5a:	eddf 7ab0 	vldr	s15, [pc, #704]	; 801001c <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800fd5e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fd62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd66:	ee30 7a27 	vadd.f32	s14, s0, s15
 800fd6a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fd6e:	ee27 0a00 	vmul.f32	s0, s14, s0
 800fd72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fd76:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800fd7a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800fd7e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800fd82:	eef4 7ac6 	vcmpe.f32	s15, s12
 800fd86:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd8e:	eef1 5ac7 	vsqrt.f32	s11, s14
 800fd92:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800fd96:	d533      	bpl.n	800fe00 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 800fd98:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda0:	f340 80d3 	ble.w	800ff4a <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800fda4:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8010020 <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 800fda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fdb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdb8:	ee17 3a90 	vmov	r3, s15
 800fdbc:	005c      	lsls	r4, r3, #1
 800fdbe:	e0d0      	b.n	800ff62 <acc_alg_biquad_q3_12_lowpass_coeffs+0x256>
 800fdc0:	f7f6 fc4c 	bl	800665c <acc_alg_basic_math_restricted_tan_f32>
 800fdc4:	eddf 7a95 	vldr	s15, [pc, #596]	; 801001c <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800fdc8:	ee30 7a27 	vadd.f32	s14, s0, s15
 800fdcc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fdd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdd4:	ee27 0a00 	vmul.f32	s0, s14, s0
 800fdd8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fddc:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800fde0:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800fde4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800fde8:	eef4 7ac6 	vcmpe.f32	s15, s12
 800fdec:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf4:	eef1 5ac7 	vsqrt.f32	s11, s14
 800fdf8:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800fdfc:	f100 80a5 	bmi.w	800ff4a <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800fe00:	eddf 6a88 	vldr	s13, [pc, #544]	; 8010024 <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 800fe04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe08:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800fe0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe18:	ee17 5a90 	vmov	r5, s15
 800fe1c:	fb05 f305 	mul.w	r3, r5, r5
 800fe20:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800fe24:	ee07 3a90 	vmov	s15, r3
 800fe28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fe2c:	eef1 7ac7 	vsqrt.f32	s15, s14
 800fe30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe3c:	ee17 4a90 	vmov	r4, s15
 800fe40:	2c00      	cmp	r4, #0
 800fe42:	f000 80a4 	beq.w	800ff8e <acc_alg_biquad_q3_12_lowpass_coeffs+0x282>
 800fe46:	f1b9 0f00 	cmp.w	r9, #0
 800fe4a:	d017      	beq.n	800fe7c <acc_alg_biquad_q3_12_lowpass_coeffs+0x170>
 800fe4c:	b2a3      	uxth	r3, r4
 800fe4e:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800fe52:	b208      	sxth	r0, r1
 800fe54:	b2aa      	uxth	r2, r5
 800fe56:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800fe5a:	f8a9 0000 	strh.w	r0, [r9]
 800fe5e:	f8a9 0004 	strh.w	r0, [r9, #4]
 800fe62:	f5c4 50c0 	rsb	r0, r4, #6144	; 0x1800
 800fe66:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800fe6a:	0049      	lsls	r1, r1, #1
 800fe6c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800fe70:	f8a9 1002 	strh.w	r1, [r9, #2]
 800fe74:	f8a9 3006 	strh.w	r3, [r9, #6]
 800fe78:	f8a9 2008 	strh.w	r2, [r9, #8]
 800fe7c:	2d00      	cmp	r5, #0
 800fe7e:	f000 80a1 	beq.w	800ffc4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2b8>
 800fe82:	2e00      	cmp	r6, #0
 800fe84:	f000 80b8 	beq.w	800fff8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 800fe88:	f5c4 5280 	rsb	r2, r4, #4096	; 0x1000
 800fe8c:	fb05 f305 	mul.w	r3, r5, r5
 800fe90:	fb04 f404 	mul.w	r4, r4, r4
 800fe94:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 800fe98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe9c:	f104 447c 	add.w	r4, r4, #4227858432	; 0xfc000000
 800fea0:	fb02 f202 	mul.w	r2, r2, r2
 800fea4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800fea8:	ee07 2a90 	vmov	s15, r2
 800feac:	0064      	lsls	r4, r4, #1
 800feae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800feb2:	ee07 4a90 	vmov	s15, r4
 800feb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800feba:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800febe:	b356      	cbz	r6, 800ff16 <acc_alg_biquad_q3_12_lowpass_coeffs+0x20a>
 800fec0:	f1b8 0f00 	cmp.w	r8, #0
 800fec4:	f040 8089 	bne.w	800ffda <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ce>
 800fec8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fecc:	ee78 6a27 	vadd.f32	s13, s16, s15
 800fed0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800fed4:	ee76 7aa6 	vadd.f32	s15, s13, s13
 800fed8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fedc:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fee0:	eef1 6ae7 	vsqrt.f32	s13, s15
 800fee4:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
 800fee8:	006d      	lsls	r5, r5, #1
 800feea:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800feee:	ee07 5a90 	vmov	s15, r5
 800fef2:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800fef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fefa:	eef1 6ac7 	vsqrt.f32	s13, s14
 800fefe:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800ff02:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ff06:	f7f6 fbb9 	bl	800667c <acc_alg_basic_math_restricted_atan_f32>
 800ff0a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8010014 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800ff0e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800ff12:	edc6 7a00 	vstr	s15, [r6]
 800ff16:	2f00      	cmp	r7, #0
 800ff18:	d071      	beq.n	800fffe <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f2>
 800ff1a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8010028 <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 800ff1e:	eddf 6a43 	vldr	s13, [pc, #268]	; 801002c <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 800ff22:	ee28 7a27 	vmul.f32	s14, s16, s15
 800ff26:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ff2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff2e:	2001      	movs	r0, #1
 800ff30:	ee28 8a67 	vnmul.f32	s16, s16, s15
 800ff34:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800ff38:	ecbd 8b02 	vpop	{d8}
 800ff3c:	edc7 7a00 	vstr	s15, [r7]
 800ff40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff44:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8010030 <acc_alg_biquad_q3_12_lowpass_coeffs+0x324>
 800ff48:	e700      	b.n	800fd4c <acc_alg_biquad_q3_12_lowpass_coeffs+0x40>
 800ff4a:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8010034 <acc_alg_biquad_q3_12_lowpass_coeffs+0x328>
 800ff4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ff56:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff5e:	ee17 4a90 	vmov	r4, s15
 800ff62:	fb04 f304 	mul.w	r3, r4, r4
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800ff6c:	ee07 3a90 	vmov	s15, r3
 800ff70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff74:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ff78:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800ff7c:	ee77 7a26 	vadd.f32	s15, s14, s13
 800ff80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff84:	ee17 5a90 	vmov	r5, s15
 800ff88:	2c00      	cmp	r4, #0
 800ff8a:	f47f af5c 	bne.w	800fe46 <acc_alg_biquad_q3_12_lowpass_coeffs+0x13a>
 800ff8e:	f1b9 0f00 	cmp.w	r9, #0
 800ff92:	d00b      	beq.n	800ffac <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a0>
 800ff94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff98:	f8a9 4002 	strh.w	r4, [r9, #2]
 800ff9c:	f8a9 4004 	strh.w	r4, [r9, #4]
 800ffa0:	f8a9 4006 	strh.w	r4, [r9, #6]
 800ffa4:	f8a9 4008 	strh.w	r4, [r9, #8]
 800ffa8:	f8a9 3000 	strh.w	r3, [r9]
 800ffac:	b116      	cbz	r6, 800ffb4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800ffae:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800ffb2:	6033      	str	r3, [r6, #0]
 800ffb4:	b167      	cbz	r7, 800ffd0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 800ffb6:	ecbd 8b02 	vpop	{d8}
 800ffba:	2300      	movs	r3, #0
 800ffbc:	2000      	movs	r0, #0
 800ffbe:	603b      	str	r3, [r7, #0]
 800ffc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffc4:	2e00      	cmp	r6, #0
 800ffc6:	d0f5      	beq.n	800ffb4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	6033      	str	r3, [r6, #0]
 800ffcc:	2f00      	cmp	r7, #0
 800ffce:	d1f2      	bne.n	800ffb6 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2aa>
 800ffd0:	ecbd 8b02 	vpop	{d8}
 800ffd4:	4638      	mov	r0, r7
 800ffd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffda:	eddf 6a17 	vldr	s13, [pc, #92]	; 8010038 <acc_alg_biquad_q3_12_lowpass_coeffs+0x32c>
 800ffde:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801001c <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800ffe2:	ed9f 6a16 	vldr	s12, [pc, #88]	; 801003c <acc_alg_biquad_q3_12_lowpass_coeffs+0x330>
 800ffe6:	ee78 6a26 	vadd.f32	s13, s16, s13
 800ffea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fff2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fff6:	e773      	b.n	800fee0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d4>
 800fff8:	2f00      	cmp	r7, #0
 800fffa:	f47f af45 	bne.w	800fe88 <acc_alg_biquad_q3_12_lowpass_coeffs+0x17c>
 800fffe:	ecbd 8b02 	vpop	{d8}
 8010002:	2001      	movs	r0, #1
 8010004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010008:	3effffde 	.word	0x3effffde
 801000c:	48800000 	.word	0x48800000
 8010010:	36800000 	.word	0x36800000
 8010014:	40490fdb 	.word	0x40490fdb
 8010018:	3f9f8d77 	.word	0x3f9f8d77
 801001c:	3fb504f3 	.word	0x3fb504f3
 8010020:	45000000 	.word	0x45000000
 8010024:	46000000 	.word	0x46000000
 8010028:	4113c6ef 	.word	0x4113c6ef
 801002c:	42a646e1 	.word	0x42a646e1
 8010030:	3fc90fdb 	.word	0x3fc90fdb
 8010034:	45800000 	.word	0x45800000
 8010038:	3f15f61a 	.word	0x3f15f61a
 801003c:	3f95f61a 	.word	0x3f95f61a

08010040 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 8010040:	b570      	push	{r4, r5, r6, lr}
 8010042:	2300      	movs	r3, #0
 8010044:	b082      	sub	sp, #8
 8010046:	4615      	mov	r5, r2
 8010048:	460c      	mov	r4, r1
 801004a:	4606      	mov	r6, r0
 801004c:	f7f0 f89c 	bl	8000188 <acc_alg_biquad_q3_12_complex_direct_form_1>
 8010050:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8010054:	3b01      	subs	r3, #1
 8010056:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801005a:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 801005e:	8852      	ldrh	r2, [r2, #2]
 8010060:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010064:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010068:	9b01      	ldr	r3, [sp, #4]
 801006a:	4630      	mov	r0, r6
 801006c:	462a      	mov	r2, r5
 801006e:	4621      	mov	r1, r4
 8010070:	b002      	add	sp, #8
 8010072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010076:	f7f0 b883 	b.w	8000180 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 801007a:	bf00      	nop

0801007c <acc_alg_iq_demodulation_q3_12_real>:
 801007c:	ee20 1a01 	vmul.f32	s2, s0, s2
 8010080:	ee60 0a20 	vmul.f32	s1, s0, s1
 8010084:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 8010088:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 801008c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010090:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8010094:	ee31 1a67 	vsub.f32	s2, s2, s15
 8010098:	ee30 0ac0 	vsub.f32	s0, s1, s0
 801009c:	eddf 7a26 	vldr	s15, [pc, #152]	; 8010138 <acc_alg_iq_demodulation_q3_12_real+0xbc>
 80100a0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801013c <acc_alg_iq_demodulation_q3_12_real+0xc0>
 80100a4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80100a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80100b4:	bfb4      	ite	lt
 80100b6:	eeb0 6a66 	vmovlt.f32	s12, s13
 80100ba:	eeb0 6a67 	vmovge.f32	s12, s15
 80100be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c2:	bfb8      	it	lt
 80100c4:	eef0 7a66 	vmovlt.f32	s15, s13
 80100c8:	ee31 1a06 	vadd.f32	s2, s2, s12
 80100cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80100d0:	ee21 1a07 	vmul.f32	s2, s2, s14
 80100d4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80100d8:	b36a      	cbz	r2, 8010136 <acc_alg_iq_demodulation_q3_12_real+0xba>
 80100da:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 80100de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100e2:	ee17 9a90 	vmov	r9, s15
 80100e6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80100ea:	1e85      	subs	r5, r0, #2
 80100ec:	ee17 7a90 	vmov	r7, s15
 80100f0:	eb05 0842 	add.w	r8, r5, r2, lsl #1
 80100f4:	1c8e      	adds	r6, r1, #2
 80100f6:	4648      	mov	r0, r9
 80100f8:	f935 4f02 	ldrsh.w	r4, [r5, #2]!
 80100fc:	f7f6 fa96 	bl	800662c <acc_alg_basic_math_q3_12_cos>
 8010100:	4603      	mov	r3, r0
 8010102:	fb04 f303 	mul.w	r3, r4, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	bfb8      	it	lt
 801010a:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 801010e:	131b      	asrs	r3, r3, #12
 8010110:	4648      	mov	r0, r9
 8010112:	f826 3c02 	strh.w	r3, [r6, #-2]
 8010116:	f7f6 fa73 	bl	8006600 <acc_alg_basic_math_q3_12_sin>
 801011a:	fb04 f000 	mul.w	r0, r4, r0
 801011e:	2800      	cmp	r0, #0
 8010120:	bfb8      	it	lt
 8010122:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 8010126:	1300      	asrs	r0, r0, #12
 8010128:	45a8      	cmp	r8, r5
 801012a:	f826 0b04 	strh.w	r0, [r6], #4
 801012e:	44b9      	add	r9, r7
 8010130:	d1e1      	bne.n	80100f6 <acc_alg_iq_demodulation_q3_12_real+0x7a>
 8010132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010136:	4770      	bx	lr
 8010138:	00000000 	.word	0x00000000
 801013c:	4f800000 	.word	0x4f800000

08010140 <acc_alg_iq_demodulation_q3_12_complex>:
 8010140:	ee20 1a01 	vmul.f32	s2, s0, s2
 8010144:	ee60 0a20 	vmul.f32	s1, s0, s1
 8010148:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 801014c:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 8010150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010154:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8010158:	ee31 1a67 	vsub.f32	s2, s2, s15
 801015c:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8010160:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801021c <acc_alg_iq_demodulation_q3_12_complex+0xdc>
 8010164:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8010220 <acc_alg_iq_demodulation_q3_12_complex+0xe0>
 8010168:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801016c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010174:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010178:	bfb4      	ite	lt
 801017a:	eeb0 6a66 	vmovlt.f32	s12, s13
 801017e:	eeb0 6a67 	vmovge.f32	s12, s15
 8010182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010186:	bfb8      	it	lt
 8010188:	eef0 7a66 	vmovlt.f32	s15, s13
 801018c:	ee31 1a06 	vadd.f32	s2, s2, s12
 8010190:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010194:	ee21 1a07 	vmul.f32	s2, s2, s14
 8010198:	ee20 0a07 	vmul.f32	s0, s0, s14
 801019c:	b3e9      	cbz	r1, 801021a <acc_alg_iq_demodulation_q3_12_complex+0xda>
 801019e:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 80101a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101a6:	ee17 8a90 	vmov	r8, s15
 80101aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80101ae:	4607      	mov	r7, r0
 80101b0:	ee17 5a90 	vmov	r5, s15
 80101b4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 80101b8:	4640      	mov	r0, r8
 80101ba:	f9b7 9000 	ldrsh.w	r9, [r7]
 80101be:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
 80101c2:	f7f6 fa33 	bl	800662c <acc_alg_basic_math_q3_12_cos>
 80101c6:	4604      	mov	r4, r0
 80101c8:	4640      	mov	r0, r8
 80101ca:	f7f6 fa19 	bl	8006600 <acc_alg_basic_math_q3_12_sin>
 80101ce:	fb09 f204 	mul.w	r2, r9, r4
 80101d2:	fb0a f100 	mul.w	r1, sl, r0
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	fb04 f30a 	mul.w	r3, r4, sl
 80101dc:	bfb8      	it	lt
 80101de:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 80101e2:	2900      	cmp	r1, #0
 80101e4:	fb09 f000 	mul.w	r0, r9, r0
 80101e8:	bfb8      	it	lt
 80101ea:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	bfb8      	it	lt
 80101f2:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 80101f6:	2800      	cmp	r0, #0
 80101f8:	bfb8      	it	lt
 80101fa:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 80101fe:	1312      	asrs	r2, r2, #12
 8010200:	131b      	asrs	r3, r3, #12
 8010202:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 8010206:	eb03 3320 	add.w	r3, r3, r0, asr #12
 801020a:	803a      	strh	r2, [r7, #0]
 801020c:	807b      	strh	r3, [r7, #2]
 801020e:	3704      	adds	r7, #4
 8010210:	42be      	cmp	r6, r7
 8010212:	44a8      	add	r8, r5
 8010214:	d1d0      	bne.n	80101b8 <acc_alg_iq_demodulation_q3_12_complex+0x78>
 8010216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021a:	4770      	bx	lr
 801021c:	00000000 	.word	0x00000000
 8010220:	4f800000 	.word	0x4f800000

08010224 <acc_alg_phase_estimation_q3_12>:
 8010224:	2a01      	cmp	r2, #1
 8010226:	b4f0      	push	{r4, r5, r6, r7}
 8010228:	d94c      	bls.n	80102c4 <acc_alg_phase_estimation_q3_12+0xa0>
 801022a:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 801022e:	f1ac 0c04 	sub.w	ip, ip, #4
 8010232:	4603      	mov	r3, r0
 8010234:	f9b3 7000 	ldrsh.w	r7, [r3]
 8010238:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801023c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8010240:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8010244:	1bed      	subs	r5, r5, r7
 8010246:	fb01 f505 	mul.w	r5, r1, r5
 801024a:	1ba4      	subs	r4, r4, r6
 801024c:	2d00      	cmp	r5, #0
 801024e:	fb01 f404 	mul.w	r4, r1, r4
 8010252:	bfb8      	it	lt
 8010254:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 8010258:	2c00      	cmp	r4, #0
 801025a:	bfb8      	it	lt
 801025c:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 8010260:	eb07 3525 	add.w	r5, r7, r5, asr #12
 8010264:	eb06 3424 	add.w	r4, r6, r4, asr #12
 8010268:	809d      	strh	r5, [r3, #4]
 801026a:	80dc      	strh	r4, [r3, #6]
 801026c:	3304      	adds	r3, #4
 801026e:	4563      	cmp	r3, ip
 8010270:	d1e0      	bne.n	8010234 <acc_alg_phase_estimation_q3_12+0x10>
 8010272:	1e53      	subs	r3, r2, #1
 8010274:	3a02      	subs	r2, #2
 8010276:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 801027a:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 801027e:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 8010282:	1c87      	adds	r7, r0, #2
 8010284:	f930 4022 	ldrsh.w	r4, [r0, r2, lsl #2]
 8010288:	1ba4      	subs	r4, r4, r6
 801028a:	fb01 f404 	mul.w	r4, r1, r4
 801028e:	2c00      	cmp	r4, #0
 8010290:	bfb8      	it	lt
 8010292:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 8010296:	eb06 3624 	add.w	r6, r6, r4, asr #12
 801029a:	b236      	sxth	r6, r6
 801029c:	f820 6022 	strh.w	r6, [r0, r2, lsl #2]
 80102a0:	f937 3022 	ldrsh.w	r3, [r7, r2, lsl #2]
 80102a4:	1b5b      	subs	r3, r3, r5
 80102a6:	fb01 f303 	mul.w	r3, r1, r3
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	bfb8      	it	lt
 80102ae:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 80102b2:	eb05 3523 	add.w	r5, r5, r3, asr #12
 80102b6:	b22d      	sxth	r5, r5
 80102b8:	f827 5022 	strh.w	r5, [r7, r2, lsl #2]
 80102bc:	3a01      	subs	r2, #1
 80102be:	d2e1      	bcs.n	8010284 <acc_alg_phase_estimation_q3_12+0x60>
 80102c0:	bcf0      	pop	{r4, r5, r6, r7}
 80102c2:	4770      	bx	lr
 80102c4:	d0fc      	beq.n	80102c0 <acc_alg_phase_estimation_q3_12+0x9c>
 80102c6:	f06f 0201 	mvn.w	r2, #1
 80102ca:	f04f 33ff 	mov.w	r3, #4294967295
 80102ce:	e7d2      	b.n	8010276 <acc_alg_phase_estimation_q3_12+0x52>

080102d0 <acc_alg_power_bins>:
 80102d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	2900      	cmp	r1, #0
 80102d6:	d03e      	beq.n	8010356 <acc_alg_power_bins+0x86>
 80102d8:	1e87      	subs	r7, r0, #2
 80102da:	eb07 0c41 	add.w	ip, r7, r1, lsl #1
 80102de:	463e      	mov	r6, r7
 80102e0:	004d      	lsls	r5, r1, #1
 80102e2:	2400      	movs	r4, #0
 80102e4:	f836 ef02 	ldrh.w	lr, [r6, #2]!
 80102e8:	4566      	cmp	r6, ip
 80102ea:	4474      	add	r4, lr
 80102ec:	d1fa      	bne.n	80102e4 <acc_alg_power_bins+0x14>
 80102ee:	fbb4 f4f1 	udiv	r4, r4, r1
 80102f2:	b2a6      	uxth	r6, r4
 80102f4:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 80102f8:	42b4      	cmp	r4, r6
 80102fa:	bf8c      	ite	hi
 80102fc:	1ba4      	subhi	r4, r4, r6
 80102fe:	1b34      	subls	r4, r6, r4
 8010300:	b2a4      	uxth	r4, r4
 8010302:	4567      	cmp	r7, ip
 8010304:	803c      	strh	r4, [r7, #0]
 8010306:	d1f5      	bne.n	80102f4 <acc_alg_power_bins+0x24>
 8010308:	b31b      	cbz	r3, 8010352 <acc_alg_power_bins+0x82>
 801030a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 801030e:	f04f 0800 	mov.w	r8, #0
 8010312:	e00c      	b.n	801032e <acc_alg_power_bins+0x5e>
 8010314:	f8a2 8000 	strh.w	r8, [r2]
 8010318:	3b01      	subs	r3, #1
 801031a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 801031e:	eba1 0106 	sub.w	r1, r1, r6
 8010322:	f1ae 0e02 	sub.w	lr, lr, #2
 8010326:	f102 0202 	add.w	r2, r2, #2
 801032a:	d012      	beq.n	8010352 <acc_alg_power_bins+0x82>
 801032c:	004d      	lsls	r5, r1, #1
 801032e:	441d      	add	r5, r3
 8010330:	4575      	cmp	r5, lr
 8010332:	fbb5 f6fe 	udiv	r6, r5, lr
 8010336:	d3ed      	bcc.n	8010314 <acc_alg_power_bins+0x44>
 8010338:	2500      	movs	r5, #0
 801033a:	462c      	mov	r4, r5
 801033c:	1e87      	subs	r7, r0, #2
 801033e:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 8010342:	3401      	adds	r4, #1
 8010344:	42a6      	cmp	r6, r4
 8010346:	4465      	add	r5, ip
 8010348:	d8f9      	bhi.n	801033e <acc_alg_power_bins+0x6e>
 801034a:	fbb5 f5f6 	udiv	r5, r5, r6
 801034e:	8015      	strh	r5, [r2, #0]
 8010350:	e7e2      	b.n	8010318 <acc_alg_power_bins+0x48>
 8010352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010356:	4802      	ldr	r0, [pc, #8]	; (8010360 <acc_alg_power_bins+0x90>)
 8010358:	2124      	movs	r1, #36	; 0x24
 801035a:	f7f6 fccf 	bl	8006cfc <acc_assert_fail>
 801035e:	bf00      	nop
 8010360:	08018cf0 	.word	0x08018cf0

08010364 <acc_confprogram_modify_bin_sensor>:
 8010364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010368:	b082      	sub	sp, #8
 801036a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801036e:	2501      	movs	r5, #1
 8010370:	409d      	lsls	r5, r3
 8010372:	42b5      	cmp	r5, r6
 8010374:	4688      	mov	r8, r1
 8010376:	d917      	bls.n	80103a8 <acc_confprogram_modify_bin_sensor+0x44>
 8010378:	461c      	mov	r4, r3
 801037a:	4692      	mov	sl, r2
 801037c:	4681      	mov	r9, r0
 801037e:	f1c4 0420 	rsb	r4, r4, #32
 8010382:	f7fa fb5d 	bl	800aa40 <acc_sensor_conf_read_instr>
 8010386:	f04f 35ff 	mov.w	r5, #4294967295
 801038a:	40e5      	lsrs	r5, r4
 801038c:	fa05 f40a 	lsl.w	r4, r5, sl
 8010390:	ea20 0404 	bic.w	r4, r0, r4
 8010394:	fa06 f20a 	lsl.w	r2, r6, sl
 8010398:	4641      	mov	r1, r8
 801039a:	4648      	mov	r0, r9
 801039c:	4322      	orrs	r2, r4
 801039e:	463b      	mov	r3, r7
 80103a0:	b002      	add	sp, #8
 80103a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103a6:	4718      	bx	r3
 80103a8:	4a06      	ldr	r2, [pc, #24]	; (80103c4 <acc_confprogram_modify_bin_sensor+0x60>)
 80103aa:	9600      	str	r6, [sp, #0]
 80103ac:	3d01      	subs	r5, #1
 80103ae:	9501      	str	r5, [sp, #4]
 80103b0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80103b2:	4a05      	ldr	r2, [pc, #20]	; (80103c8 <acc_confprogram_modify_bin_sensor+0x64>)
 80103b4:	460b      	mov	r3, r1
 80103b6:	2000      	movs	r0, #0
 80103b8:	4904      	ldr	r1, [pc, #16]	; (80103cc <acc_confprogram_modify_bin_sensor+0x68>)
 80103ba:	47a0      	blx	r4
 80103bc:	4803      	ldr	r0, [pc, #12]	; (80103cc <acc_confprogram_modify_bin_sensor+0x68>)
 80103be:	2128      	movs	r1, #40	; 0x28
 80103c0:	f7f6 fc9c 	bl	8006cfc <acc_assert_fail>
 80103c4:	20000640 	.word	0x20000640
 80103c8:	08018d00 	.word	0x08018d00
 80103cc:	08018d38 	.word	0x08018d38

080103d0 <acc_confprogram_modify_bin>:
 80103d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d4:	b084      	sub	sp, #16
 80103d6:	2701      	movs	r7, #1
 80103d8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80103da:	fa07 f503 	lsl.w	r5, r7, r3
 80103de:	42b5      	cmp	r5, r6
 80103e0:	d91e      	bls.n	8010420 <acc_confprogram_modify_bin+0x50>
 80103e2:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 80103e6:	4690      	mov	r8, r2
 80103e8:	461c      	mov	r4, r3
 80103ea:	4628      	mov	r0, r5
 80103ec:	463a      	mov	r2, r7
 80103ee:	a902      	add	r1, sp, #8
 80103f0:	f7f6 fe06 	bl	8007000 <acc_utils_transfer_buffer_to_uint32>
 80103f4:	f1c4 0420 	rsb	r4, r4, #32
 80103f8:	f04f 33ff 	mov.w	r3, #4294967295
 80103fc:	9902      	ldr	r1, [sp, #8]
 80103fe:	40e3      	lsrs	r3, r4
 8010400:	fa03 f308 	lsl.w	r3, r3, r8
 8010404:	fa06 f608 	lsl.w	r6, r6, r8
 8010408:	ea21 0303 	bic.w	r3, r1, r3
 801040c:	4333      	orrs	r3, r6
 801040e:	4629      	mov	r1, r5
 8010410:	463a      	mov	r2, r7
 8010412:	a803      	add	r0, sp, #12
 8010414:	9303      	str	r3, [sp, #12]
 8010416:	f7f6 fde5 	bl	8006fe4 <acc_utils_uint32_to_transfer_buffer>
 801041a:	b004      	add	sp, #16
 801041c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010420:	4a06      	ldr	r2, [pc, #24]	; (801043c <acc_confprogram_modify_bin+0x6c>)
 8010422:	9600      	str	r6, [sp, #0]
 8010424:	3d01      	subs	r5, #1
 8010426:	9501      	str	r5, [sp, #4]
 8010428:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801042a:	4a05      	ldr	r2, [pc, #20]	; (8010440 <acc_confprogram_modify_bin+0x70>)
 801042c:	460b      	mov	r3, r1
 801042e:	2000      	movs	r0, #0
 8010430:	4904      	ldr	r1, [pc, #16]	; (8010444 <acc_confprogram_modify_bin+0x74>)
 8010432:	47a0      	blx	r4
 8010434:	4803      	ldr	r0, [pc, #12]	; (8010444 <acc_confprogram_modify_bin+0x74>)
 8010436:	2138      	movs	r1, #56	; 0x38
 8010438:	f7f6 fc60 	bl	8006cfc <acc_assert_fail>
 801043c:	20000640 	.word	0x20000640
 8010440:	08018d44 	.word	0x08018d44
 8010444:	08018d38 	.word	0x08018d38

08010448 <acc_confprogram_modify_runif_sensor>:
 8010448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801044c:	4614      	mov	r4, r2
 801044e:	b082      	sub	sp, #8
 8010450:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8010454:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8010458:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801045c:	f025 050f 	bic.w	r5, r5, #15
 8010460:	4606      	mov	r6, r0
 8010462:	b1b2      	cbz	r2, 8010492 <acc_confprogram_modify_runif_sensor+0x4a>
 8010464:	461f      	mov	r7, r3
 8010466:	f7f6 fd67 	bl	8006f38 <acc_rss_integration_log_level>
 801046a:	2803      	cmp	r0, #3
 801046c:	ea45 0507 	orr.w	r5, r5, r7
 8010470:	d907      	bls.n	8010482 <acc_confprogram_modify_runif_sensor+0x3a>
 8010472:	4b0e      	ldr	r3, [pc, #56]	; (80104ac <acc_confprogram_modify_runif_sensor+0x64>)
 8010474:	9700      	str	r7, [sp, #0]
 8010476:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8010478:	4a0d      	ldr	r2, [pc, #52]	; (80104b0 <acc_confprogram_modify_runif_sensor+0x68>)
 801047a:	490e      	ldr	r1, [pc, #56]	; (80104b4 <acc_confprogram_modify_runif_sensor+0x6c>)
 801047c:	4623      	mov	r3, r4
 801047e:	2004      	movs	r0, #4
 8010480:	47b8      	blx	r7
 8010482:	462a      	mov	r2, r5
 8010484:	4621      	mov	r1, r4
 8010486:	4630      	mov	r0, r6
 8010488:	4643      	mov	r3, r8
 801048a:	b002      	add	sp, #8
 801048c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010490:	4718      	bx	r3
 8010492:	f7f6 fd51 	bl	8006f38 <acc_rss_integration_log_level>
 8010496:	2803      	cmp	r0, #3
 8010498:	d9f3      	bls.n	8010482 <acc_confprogram_modify_runif_sensor+0x3a>
 801049a:	4b04      	ldr	r3, [pc, #16]	; (80104ac <acc_confprogram_modify_runif_sensor+0x64>)
 801049c:	4a06      	ldr	r2, [pc, #24]	; (80104b8 <acc_confprogram_modify_runif_sensor+0x70>)
 801049e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80104a0:	4904      	ldr	r1, [pc, #16]	; (80104b4 <acc_confprogram_modify_runif_sensor+0x6c>)
 80104a2:	4623      	mov	r3, r4
 80104a4:	2004      	movs	r0, #4
 80104a6:	47b8      	blx	r7
 80104a8:	e7eb      	b.n	8010482 <acc_confprogram_modify_runif_sensor+0x3a>
 80104aa:	bf00      	nop
 80104ac:	20000640 	.word	0x20000640
 80104b0:	08018d7c 	.word	0x08018d7c
 80104b4:	08018d38 	.word	0x08018d38
 80104b8:	08018db4 	.word	0x08018db4

080104bc <acc_confprogram_modify_runif>:
 80104bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c0:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 80104c4:	b084      	sub	sp, #16
 80104c6:	4616      	mov	r6, r2
 80104c8:	460f      	mov	r7, r1
 80104ca:	4628      	mov	r0, r5
 80104cc:	2201      	movs	r2, #1
 80104ce:	a902      	add	r1, sp, #8
 80104d0:	4698      	mov	r8, r3
 80104d2:	f7f6 fd95 	bl	8007000 <acc_utils_transfer_buffer_to_uint32>
 80104d6:	9c02      	ldr	r4, [sp, #8]
 80104d8:	f024 040f 	bic.w	r4, r4, #15
 80104dc:	9403      	str	r4, [sp, #12]
 80104de:	f1b8 0f00 	cmp.w	r8, #0
 80104e2:	d015      	beq.n	8010510 <acc_confprogram_modify_runif+0x54>
 80104e4:	433c      	orrs	r4, r7
 80104e6:	9403      	str	r4, [sp, #12]
 80104e8:	f7f6 fd26 	bl	8006f38 <acc_rss_integration_log_level>
 80104ec:	2803      	cmp	r0, #3
 80104ee:	d907      	bls.n	8010500 <acc_confprogram_modify_runif+0x44>
 80104f0:	4a0e      	ldr	r2, [pc, #56]	; (801052c <acc_confprogram_modify_runif+0x70>)
 80104f2:	9700      	str	r7, [sp, #0]
 80104f4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80104f6:	490e      	ldr	r1, [pc, #56]	; (8010530 <acc_confprogram_modify_runif+0x74>)
 80104f8:	4a0e      	ldr	r2, [pc, #56]	; (8010534 <acc_confprogram_modify_runif+0x78>)
 80104fa:	0873      	lsrs	r3, r6, #1
 80104fc:	2004      	movs	r0, #4
 80104fe:	47a0      	blx	r4
 8010500:	4629      	mov	r1, r5
 8010502:	2201      	movs	r2, #1
 8010504:	a803      	add	r0, sp, #12
 8010506:	f7f6 fd6d 	bl	8006fe4 <acc_utils_uint32_to_transfer_buffer>
 801050a:	b004      	add	sp, #16
 801050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010510:	f7f6 fd12 	bl	8006f38 <acc_rss_integration_log_level>
 8010514:	2803      	cmp	r0, #3
 8010516:	d9f3      	bls.n	8010500 <acc_confprogram_modify_runif+0x44>
 8010518:	4a04      	ldr	r2, [pc, #16]	; (801052c <acc_confprogram_modify_runif+0x70>)
 801051a:	9700      	str	r7, [sp, #0]
 801051c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801051e:	4904      	ldr	r1, [pc, #16]	; (8010530 <acc_confprogram_modify_runif+0x74>)
 8010520:	4a05      	ldr	r2, [pc, #20]	; (8010538 <acc_confprogram_modify_runif+0x7c>)
 8010522:	0873      	lsrs	r3, r6, #1
 8010524:	2004      	movs	r0, #4
 8010526:	47a0      	blx	r4
 8010528:	e7ea      	b.n	8010500 <acc_confprogram_modify_runif+0x44>
 801052a:	bf00      	nop
 801052c:	20000640 	.word	0x20000640
 8010530:	08018d38 	.word	0x08018d38
 8010534:	08018d7c 	.word	0x08018d7c
 8010538:	08018de4 	.word	0x08018de4

0801053c <acc_confprogram_patch_offset>:
 801053c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010540:	b083      	sub	sp, #12
 8010542:	4680      	mov	r8, r0
 8010544:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8010548:	460e      	mov	r6, r1
 801054a:	4617      	mov	r7, r2
 801054c:	461d      	mov	r5, r3
 801054e:	f7f6 fcf3 	bl	8006f38 <acc_rss_integration_log_level>
 8010552:	2803      	cmp	r0, #3
 8010554:	d909      	bls.n	801056a <acc_confprogram_patch_offset+0x2e>
 8010556:	4b39      	ldr	r3, [pc, #228]	; (801063c <acc_confprogram_patch_offset+0x100>)
 8010558:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801055a:	9200      	str	r2, [sp, #0]
 801055c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8010560:	4a37      	ldr	r2, [pc, #220]	; (8010640 <acc_confprogram_patch_offset+0x104>)
 8010562:	4938      	ldr	r1, [pc, #224]	; (8010644 <acc_confprogram_patch_offset+0x108>)
 8010564:	4623      	mov	r3, r4
 8010566:	2004      	movs	r0, #4
 8010568:	47c8      	blx	r9
 801056a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801056e:	8869      	ldrh	r1, [r5, #2]
 8010570:	2900      	cmp	r1, #0
 8010572:	d03a      	beq.n	80105ea <acc_confprogram_patch_offset+0xae>
 8010574:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801063c <acc_confprogram_patch_offset+0x100>
 8010578:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8010648 <acc_confprogram_patch_offset+0x10c>
 801057c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8010644 <acc_confprogram_patch_offset+0x108>
 8010580:	2400      	movs	r4, #0
 8010582:	e01c      	b.n	80105be <acc_confprogram_patch_offset+0x82>
 8010584:	f10c 33ff 	add.w	r3, ip, #4294967295
 8010588:	2b01      	cmp	r3, #1
 801058a:	d824      	bhi.n	80105d6 <acc_confprogram_patch_offset+0x9a>
 801058c:	8882      	ldrh	r2, [r0, #4]
 801058e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010592:	429a      	cmp	r2, r3
 8010594:	d010      	beq.n	80105b8 <acc_confprogram_patch_offset+0x7c>
 8010596:	0052      	lsls	r2, r2, #1
 8010598:	fa1f fe82 	uxth.w	lr, r2
 801059c:	45b6      	cmp	lr, r6
 801059e:	d30b      	bcc.n	80105b8 <acc_confprogram_patch_offset+0x7c>
 80105a0:	19f3      	adds	r3, r6, r7
 80105a2:	459e      	cmp	lr, r3
 80105a4:	da08      	bge.n	80105b8 <acc_confprogram_patch_offset+0x7c>
 80105a6:	f1bc 0f01 	cmp.w	ip, #1
 80105aa:	d021      	beq.n	80105f0 <acc_confprogram_patch_offset+0xb4>
 80105ac:	f1bc 0f02 	cmp.w	ip, #2
 80105b0:	d037      	beq.n	8010622 <acc_confprogram_patch_offset+0xe6>
 80105b2:	f1bc 0f00 	cmp.w	ip, #0
 80105b6:	d028      	beq.n	801060a <acc_confprogram_patch_offset+0xce>
 80105b8:	3401      	adds	r4, #1
 80105ba:	42a1      	cmp	r1, r4
 80105bc:	d915      	bls.n	80105ea <acc_confprogram_patch_offset+0xae>
 80105be:	6868      	ldr	r0, [r5, #4]
 80105c0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80105c4:	f810 c013 	ldrb.w	ip, [r0, r3, lsl #1]
 80105c8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80105cc:	f1bc 0f00 	cmp.w	ip, #0
 80105d0:	d1d8      	bne.n	8010584 <acc_confprogram_patch_offset+0x48>
 80105d2:	8842      	ldrh	r2, [r0, #2]
 80105d4:	e7db      	b.n	801058e <acc_confprogram_patch_offset+0x52>
 80105d6:	4649      	mov	r1, r9
 80105d8:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80105dc:	4652      	mov	r2, sl
 80105de:	2000      	movs	r0, #0
 80105e0:	4798      	blx	r3
 80105e2:	8869      	ldrh	r1, [r5, #2]
 80105e4:	3401      	adds	r4, #1
 80105e6:	42a1      	cmp	r1, r4
 80105e8:	d8e9      	bhi.n	80105be <acc_confprogram_patch_offset+0x82>
 80105ea:	b003      	add	sp, #12
 80105ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105f2:	8841      	ldrh	r1, [r0, #2]
 80105f4:	ebae 0206 	sub.w	r2, lr, r6
 80105f8:	3b00      	subs	r3, #0
 80105fa:	b292      	uxth	r2, r2
 80105fc:	bf18      	it	ne
 80105fe:	2301      	movne	r3, #1
 8010600:	4640      	mov	r0, r8
 8010602:	f7ff ff5b 	bl	80104bc <acc_confprogram_modify_runif>
 8010606:	8869      	ldrh	r1, [r5, #2]
 8010608:	e7d6      	b.n	80105b8 <acc_confprogram_patch_offset+0x7c>
 801060a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801060c:	7943      	ldrb	r3, [r0, #5]
 801060e:	7902      	ldrb	r2, [r0, #4]
 8010610:	9100      	str	r1, [sp, #0]
 8010612:	ebae 0106 	sub.w	r1, lr, r6
 8010616:	b289      	uxth	r1, r1
 8010618:	4640      	mov	r0, r8
 801061a:	f7ff fed9 	bl	80103d0 <acc_confprogram_modify_bin>
 801061e:	8869      	ldrh	r1, [r5, #2]
 8010620:	e7ca      	b.n	80105b8 <acc_confprogram_patch_offset+0x7c>
 8010622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010624:	8841      	ldrh	r1, [r0, #2]
 8010626:	ebae 0206 	sub.w	r2, lr, r6
 801062a:	fab3 f383 	clz	r3, r3
 801062e:	b292      	uxth	r2, r2
 8010630:	095b      	lsrs	r3, r3, #5
 8010632:	4640      	mov	r0, r8
 8010634:	f7ff ff42 	bl	80104bc <acc_confprogram_modify_runif>
 8010638:	8869      	ldrh	r1, [r5, #2]
 801063a:	e7bd      	b.n	80105b8 <acc_confprogram_patch_offset+0x7c>
 801063c:	20000640 	.word	0x20000640
 8010640:	08018e4c 	.word	0x08018e4c
 8010644:	08018d38 	.word	0x08018d38
 8010648:	08018e18 	.word	0x08018e18

0801064c <acc_confprogram_live_patch>:
 801064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010650:	b083      	sub	sp, #12
 8010652:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
 8010656:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801065a:	4607      	mov	r7, r0
 801065c:	468b      	mov	fp, r1
 801065e:	4690      	mov	r8, r2
 8010660:	461e      	mov	r6, r3
 8010662:	f7f6 fc69 	bl	8006f38 <acc_rss_integration_log_level>
 8010666:	2803      	cmp	r0, #3
 8010668:	d908      	bls.n	801067c <acc_confprogram_live_patch+0x30>
 801066a:	4b2a      	ldr	r3, [pc, #168]	; (8010714 <acc_confprogram_live_patch+0xc8>)
 801066c:	f8cd 9000 	str.w	r9, [sp]
 8010670:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8010672:	4a29      	ldr	r2, [pc, #164]	; (8010718 <acc_confprogram_live_patch+0xcc>)
 8010674:	4929      	ldr	r1, [pc, #164]	; (801071c <acc_confprogram_live_patch+0xd0>)
 8010676:	4623      	mov	r3, r4
 8010678:	2004      	movs	r0, #4
 801067a:	47a8      	blx	r5
 801067c:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8010680:	8873      	ldrh	r3, [r6, #2]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d043      	beq.n	801070e <acc_confprogram_live_patch+0xc2>
 8010686:	2500      	movs	r5, #0
 8010688:	e011      	b.n	80106ae <acc_confprogram_live_patch+0x62>
 801068a:	88a2      	ldrh	r2, [r4, #4]
 801068c:	8863      	ldrh	r3, [r4, #2]
 801068e:	f8cd a004 	str.w	sl, [sp, #4]
 8010692:	fab9 f189 	clz	r1, r9
 8010696:	4442      	add	r2, r8
 8010698:	0949      	lsrs	r1, r1, #5
 801069a:	9100      	str	r1, [sp, #0]
 801069c:	b292      	uxth	r2, r2
 801069e:	4659      	mov	r1, fp
 80106a0:	4638      	mov	r0, r7
 80106a2:	f7ff fed1 	bl	8010448 <acc_confprogram_modify_runif_sensor>
 80106a6:	8873      	ldrh	r3, [r6, #2]
 80106a8:	3501      	adds	r5, #1
 80106aa:	42ab      	cmp	r3, r5
 80106ac:	d92f      	bls.n	801070e <acc_confprogram_live_patch+0xc2>
 80106ae:	6873      	ldr	r3, [r6, #4]
 80106b0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80106b4:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
 80106b8:	2a01      	cmp	r2, #1
 80106ba:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80106be:	d00c      	beq.n	80106da <acc_confprogram_live_patch+0x8e>
 80106c0:	2a02      	cmp	r2, #2
 80106c2:	d0e2      	beq.n	801068a <acc_confprogram_live_patch+0x3e>
 80106c4:	b19a      	cbz	r2, 80106ee <acc_confprogram_live_patch+0xa2>
 80106c6:	4b13      	ldr	r3, [pc, #76]	; (8010714 <acc_confprogram_live_patch+0xc8>)
 80106c8:	4914      	ldr	r1, [pc, #80]	; (801071c <acc_confprogram_live_patch+0xd0>)
 80106ca:	4a15      	ldr	r2, [pc, #84]	; (8010720 <acc_confprogram_live_patch+0xd4>)
 80106cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ce:	2000      	movs	r0, #0
 80106d0:	4798      	blx	r3
 80106d2:	4812      	ldr	r0, [pc, #72]	; (801071c <acc_confprogram_live_patch+0xd0>)
 80106d4:	21e6      	movs	r1, #230	; 0xe6
 80106d6:	f7f6 fb11 	bl	8006cfc <acc_assert_fail>
 80106da:	88a2      	ldrh	r2, [r4, #4]
 80106dc:	8863      	ldrh	r3, [r4, #2]
 80106de:	f8cd a004 	str.w	sl, [sp, #4]
 80106e2:	f1b9 0100 	subs.w	r1, r9, #0
 80106e6:	4442      	add	r2, r8
 80106e8:	bf18      	it	ne
 80106ea:	2101      	movne	r1, #1
 80106ec:	e7d5      	b.n	801069a <acc_confprogram_live_patch+0x4e>
 80106ee:	8861      	ldrh	r1, [r4, #2]
 80106f0:	7963      	ldrb	r3, [r4, #5]
 80106f2:	7922      	ldrb	r2, [r4, #4]
 80106f4:	f8cd a004 	str.w	sl, [sp, #4]
 80106f8:	4441      	add	r1, r8
 80106fa:	b289      	uxth	r1, r1
 80106fc:	f8cd 9000 	str.w	r9, [sp]
 8010700:	4638      	mov	r0, r7
 8010702:	f7ff fe2f 	bl	8010364 <acc_confprogram_modify_bin_sensor>
 8010706:	8873      	ldrh	r3, [r6, #2]
 8010708:	3501      	adds	r5, #1
 801070a:	42ab      	cmp	r3, r5
 801070c:	d8cf      	bhi.n	80106ae <acc_confprogram_live_patch+0x62>
 801070e:	b003      	add	sp, #12
 8010710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010714:	20000640 	.word	0x20000640
 8010718:	08018e48 	.word	0x08018e48
 801071c:	08018d38 	.word	0x08018d38
 8010720:	08018e6c 	.word	0x08018e6c

08010724 <acc_confprogram_get_default_value>:
 8010724:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop

0801072c <acc_confprogram_copy>:
 801072c:	b152      	cbz	r2, 8010744 <acc_confprogram_copy+0x18>
 801072e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010732:	3804      	subs	r0, #4
 8010734:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8010738:	804b      	strh	r3, [r1, #2]
 801073a:	0c1b      	lsrs	r3, r3, #16
 801073c:	800b      	strh	r3, [r1, #0]
 801073e:	3104      	adds	r1, #4
 8010740:	4291      	cmp	r1, r2
 8010742:	d1f7      	bne.n	8010734 <acc_confprogram_copy+0x8>
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop

08010748 <__errno>:
 8010748:	4b01      	ldr	r3, [pc, #4]	; (8010750 <__errno+0x8>)
 801074a:	6818      	ldr	r0, [r3, #0]
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	20000148 	.word	0x20000148

08010754 <__sflush_r>:
 8010754:	898a      	ldrh	r2, [r1, #12]
 8010756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801075a:	4605      	mov	r5, r0
 801075c:	0710      	lsls	r0, r2, #28
 801075e:	460c      	mov	r4, r1
 8010760:	d458      	bmi.n	8010814 <__sflush_r+0xc0>
 8010762:	684b      	ldr	r3, [r1, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	dc05      	bgt.n	8010774 <__sflush_r+0x20>
 8010768:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801076a:	2b00      	cmp	r3, #0
 801076c:	dc02      	bgt.n	8010774 <__sflush_r+0x20>
 801076e:	2000      	movs	r0, #0
 8010770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010776:	2e00      	cmp	r6, #0
 8010778:	d0f9      	beq.n	801076e <__sflush_r+0x1a>
 801077a:	2300      	movs	r3, #0
 801077c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010780:	682f      	ldr	r7, [r5, #0]
 8010782:	602b      	str	r3, [r5, #0]
 8010784:	d032      	beq.n	80107ec <__sflush_r+0x98>
 8010786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010788:	89a3      	ldrh	r3, [r4, #12]
 801078a:	075a      	lsls	r2, r3, #29
 801078c:	d505      	bpl.n	801079a <__sflush_r+0x46>
 801078e:	6863      	ldr	r3, [r4, #4]
 8010790:	1ac0      	subs	r0, r0, r3
 8010792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010794:	b10b      	cbz	r3, 801079a <__sflush_r+0x46>
 8010796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010798:	1ac0      	subs	r0, r0, r3
 801079a:	2300      	movs	r3, #0
 801079c:	4602      	mov	r2, r0
 801079e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107a0:	6a21      	ldr	r1, [r4, #32]
 80107a2:	4628      	mov	r0, r5
 80107a4:	47b0      	blx	r6
 80107a6:	1c43      	adds	r3, r0, #1
 80107a8:	89a3      	ldrh	r3, [r4, #12]
 80107aa:	d106      	bne.n	80107ba <__sflush_r+0x66>
 80107ac:	6829      	ldr	r1, [r5, #0]
 80107ae:	291d      	cmp	r1, #29
 80107b0:	d82c      	bhi.n	801080c <__sflush_r+0xb8>
 80107b2:	4a2a      	ldr	r2, [pc, #168]	; (801085c <__sflush_r+0x108>)
 80107b4:	40ca      	lsrs	r2, r1
 80107b6:	07d6      	lsls	r6, r2, #31
 80107b8:	d528      	bpl.n	801080c <__sflush_r+0xb8>
 80107ba:	2200      	movs	r2, #0
 80107bc:	6062      	str	r2, [r4, #4]
 80107be:	04d9      	lsls	r1, r3, #19
 80107c0:	6922      	ldr	r2, [r4, #16]
 80107c2:	6022      	str	r2, [r4, #0]
 80107c4:	d504      	bpl.n	80107d0 <__sflush_r+0x7c>
 80107c6:	1c42      	adds	r2, r0, #1
 80107c8:	d101      	bne.n	80107ce <__sflush_r+0x7a>
 80107ca:	682b      	ldr	r3, [r5, #0]
 80107cc:	b903      	cbnz	r3, 80107d0 <__sflush_r+0x7c>
 80107ce:	6560      	str	r0, [r4, #84]	; 0x54
 80107d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107d2:	602f      	str	r7, [r5, #0]
 80107d4:	2900      	cmp	r1, #0
 80107d6:	d0ca      	beq.n	801076e <__sflush_r+0x1a>
 80107d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107dc:	4299      	cmp	r1, r3
 80107de:	d002      	beq.n	80107e6 <__sflush_r+0x92>
 80107e0:	4628      	mov	r0, r5
 80107e2:	f000 f9e9 	bl	8010bb8 <_free_r>
 80107e6:	2000      	movs	r0, #0
 80107e8:	6360      	str	r0, [r4, #52]	; 0x34
 80107ea:	e7c1      	b.n	8010770 <__sflush_r+0x1c>
 80107ec:	6a21      	ldr	r1, [r4, #32]
 80107ee:	2301      	movs	r3, #1
 80107f0:	4628      	mov	r0, r5
 80107f2:	47b0      	blx	r6
 80107f4:	1c41      	adds	r1, r0, #1
 80107f6:	d1c7      	bne.n	8010788 <__sflush_r+0x34>
 80107f8:	682b      	ldr	r3, [r5, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d0c4      	beq.n	8010788 <__sflush_r+0x34>
 80107fe:	2b1d      	cmp	r3, #29
 8010800:	d001      	beq.n	8010806 <__sflush_r+0xb2>
 8010802:	2b16      	cmp	r3, #22
 8010804:	d101      	bne.n	801080a <__sflush_r+0xb6>
 8010806:	602f      	str	r7, [r5, #0]
 8010808:	e7b1      	b.n	801076e <__sflush_r+0x1a>
 801080a:	89a3      	ldrh	r3, [r4, #12]
 801080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010810:	81a3      	strh	r3, [r4, #12]
 8010812:	e7ad      	b.n	8010770 <__sflush_r+0x1c>
 8010814:	690f      	ldr	r7, [r1, #16]
 8010816:	2f00      	cmp	r7, #0
 8010818:	d0a9      	beq.n	801076e <__sflush_r+0x1a>
 801081a:	0793      	lsls	r3, r2, #30
 801081c:	680e      	ldr	r6, [r1, #0]
 801081e:	bf08      	it	eq
 8010820:	694b      	ldreq	r3, [r1, #20]
 8010822:	600f      	str	r7, [r1, #0]
 8010824:	bf18      	it	ne
 8010826:	2300      	movne	r3, #0
 8010828:	eba6 0807 	sub.w	r8, r6, r7
 801082c:	608b      	str	r3, [r1, #8]
 801082e:	f1b8 0f00 	cmp.w	r8, #0
 8010832:	dd9c      	ble.n	801076e <__sflush_r+0x1a>
 8010834:	6a21      	ldr	r1, [r4, #32]
 8010836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010838:	4643      	mov	r3, r8
 801083a:	463a      	mov	r2, r7
 801083c:	4628      	mov	r0, r5
 801083e:	47b0      	blx	r6
 8010840:	2800      	cmp	r0, #0
 8010842:	dc06      	bgt.n	8010852 <__sflush_r+0xfe>
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801084a:	81a3      	strh	r3, [r4, #12]
 801084c:	f04f 30ff 	mov.w	r0, #4294967295
 8010850:	e78e      	b.n	8010770 <__sflush_r+0x1c>
 8010852:	4407      	add	r7, r0
 8010854:	eba8 0800 	sub.w	r8, r8, r0
 8010858:	e7e9      	b.n	801082e <__sflush_r+0xda>
 801085a:	bf00      	nop
 801085c:	20400001 	.word	0x20400001

08010860 <_fflush_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	690b      	ldr	r3, [r1, #16]
 8010864:	4605      	mov	r5, r0
 8010866:	460c      	mov	r4, r1
 8010868:	b913      	cbnz	r3, 8010870 <_fflush_r+0x10>
 801086a:	2500      	movs	r5, #0
 801086c:	4628      	mov	r0, r5
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	b118      	cbz	r0, 801087a <_fflush_r+0x1a>
 8010872:	6983      	ldr	r3, [r0, #24]
 8010874:	b90b      	cbnz	r3, 801087a <_fflush_r+0x1a>
 8010876:	f000 f899 	bl	80109ac <__sinit>
 801087a:	4b14      	ldr	r3, [pc, #80]	; (80108cc <_fflush_r+0x6c>)
 801087c:	429c      	cmp	r4, r3
 801087e:	d11b      	bne.n	80108b8 <_fflush_r+0x58>
 8010880:	686c      	ldr	r4, [r5, #4]
 8010882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d0ef      	beq.n	801086a <_fflush_r+0xa>
 801088a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801088c:	07d0      	lsls	r0, r2, #31
 801088e:	d404      	bmi.n	801089a <_fflush_r+0x3a>
 8010890:	0599      	lsls	r1, r3, #22
 8010892:	d402      	bmi.n	801089a <_fflush_r+0x3a>
 8010894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010896:	f000 f94c 	bl	8010b32 <__retarget_lock_acquire_recursive>
 801089a:	4628      	mov	r0, r5
 801089c:	4621      	mov	r1, r4
 801089e:	f7ff ff59 	bl	8010754 <__sflush_r>
 80108a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108a4:	07da      	lsls	r2, r3, #31
 80108a6:	4605      	mov	r5, r0
 80108a8:	d4e0      	bmi.n	801086c <_fflush_r+0xc>
 80108aa:	89a3      	ldrh	r3, [r4, #12]
 80108ac:	059b      	lsls	r3, r3, #22
 80108ae:	d4dd      	bmi.n	801086c <_fflush_r+0xc>
 80108b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108b2:	f000 f93f 	bl	8010b34 <__retarget_lock_release_recursive>
 80108b6:	e7d9      	b.n	801086c <_fflush_r+0xc>
 80108b8:	4b05      	ldr	r3, [pc, #20]	; (80108d0 <_fflush_r+0x70>)
 80108ba:	429c      	cmp	r4, r3
 80108bc:	d101      	bne.n	80108c2 <_fflush_r+0x62>
 80108be:	68ac      	ldr	r4, [r5, #8]
 80108c0:	e7df      	b.n	8010882 <_fflush_r+0x22>
 80108c2:	4b04      	ldr	r3, [pc, #16]	; (80108d4 <_fflush_r+0x74>)
 80108c4:	429c      	cmp	r4, r3
 80108c6:	bf08      	it	eq
 80108c8:	68ec      	ldreq	r4, [r5, #12]
 80108ca:	e7da      	b.n	8010882 <_fflush_r+0x22>
 80108cc:	0801aa0c 	.word	0x0801aa0c
 80108d0:	0801aa2c 	.word	0x0801aa2c
 80108d4:	0801a9ec 	.word	0x0801a9ec

080108d8 <fflush>:
 80108d8:	4601      	mov	r1, r0
 80108da:	b920      	cbnz	r0, 80108e6 <fflush+0xe>
 80108dc:	4b04      	ldr	r3, [pc, #16]	; (80108f0 <fflush+0x18>)
 80108de:	4905      	ldr	r1, [pc, #20]	; (80108f4 <fflush+0x1c>)
 80108e0:	6818      	ldr	r0, [r3, #0]
 80108e2:	f000 b8e1 	b.w	8010aa8 <_fwalk_reent>
 80108e6:	4b04      	ldr	r3, [pc, #16]	; (80108f8 <fflush+0x20>)
 80108e8:	6818      	ldr	r0, [r3, #0]
 80108ea:	f7ff bfb9 	b.w	8010860 <_fflush_r>
 80108ee:	bf00      	nop
 80108f0:	0801aa4c 	.word	0x0801aa4c
 80108f4:	08010861 	.word	0x08010861
 80108f8:	20000148 	.word	0x20000148

080108fc <std>:
 80108fc:	2300      	movs	r3, #0
 80108fe:	b510      	push	{r4, lr}
 8010900:	4604      	mov	r4, r0
 8010902:	e9c0 3300 	strd	r3, r3, [r0]
 8010906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801090a:	6083      	str	r3, [r0, #8]
 801090c:	8181      	strh	r1, [r0, #12]
 801090e:	6643      	str	r3, [r0, #100]	; 0x64
 8010910:	81c2      	strh	r2, [r0, #14]
 8010912:	6183      	str	r3, [r0, #24]
 8010914:	4619      	mov	r1, r3
 8010916:	2208      	movs	r2, #8
 8010918:	305c      	adds	r0, #92	; 0x5c
 801091a:	f000 f945 	bl	8010ba8 <memset>
 801091e:	4b05      	ldr	r3, [pc, #20]	; (8010934 <std+0x38>)
 8010920:	6263      	str	r3, [r4, #36]	; 0x24
 8010922:	4b05      	ldr	r3, [pc, #20]	; (8010938 <std+0x3c>)
 8010924:	62a3      	str	r3, [r4, #40]	; 0x28
 8010926:	4b05      	ldr	r3, [pc, #20]	; (801093c <std+0x40>)
 8010928:	62e3      	str	r3, [r4, #44]	; 0x2c
 801092a:	4b05      	ldr	r3, [pc, #20]	; (8010940 <std+0x44>)
 801092c:	6224      	str	r4, [r4, #32]
 801092e:	6323      	str	r3, [r4, #48]	; 0x30
 8010930:	bd10      	pop	{r4, pc}
 8010932:	bf00      	nop
 8010934:	08010e49 	.word	0x08010e49
 8010938:	08010e6b 	.word	0x08010e6b
 801093c:	08010ea3 	.word	0x08010ea3
 8010940:	08010ec7 	.word	0x08010ec7

08010944 <_cleanup_r>:
 8010944:	4901      	ldr	r1, [pc, #4]	; (801094c <_cleanup_r+0x8>)
 8010946:	f000 b8af 	b.w	8010aa8 <_fwalk_reent>
 801094a:	bf00      	nop
 801094c:	08010861 	.word	0x08010861

08010950 <__sfmoreglue>:
 8010950:	b570      	push	{r4, r5, r6, lr}
 8010952:	1e4a      	subs	r2, r1, #1
 8010954:	2568      	movs	r5, #104	; 0x68
 8010956:	4355      	muls	r5, r2
 8010958:	460e      	mov	r6, r1
 801095a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801095e:	f000 f97b 	bl	8010c58 <_malloc_r>
 8010962:	4604      	mov	r4, r0
 8010964:	b140      	cbz	r0, 8010978 <__sfmoreglue+0x28>
 8010966:	2100      	movs	r1, #0
 8010968:	e9c0 1600 	strd	r1, r6, [r0]
 801096c:	300c      	adds	r0, #12
 801096e:	60a0      	str	r0, [r4, #8]
 8010970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010974:	f000 f918 	bl	8010ba8 <memset>
 8010978:	4620      	mov	r0, r4
 801097a:	bd70      	pop	{r4, r5, r6, pc}

0801097c <__sfp_lock_acquire>:
 801097c:	4801      	ldr	r0, [pc, #4]	; (8010984 <__sfp_lock_acquire+0x8>)
 801097e:	f000 b8d8 	b.w	8010b32 <__retarget_lock_acquire_recursive>
 8010982:	bf00      	nop
 8010984:	20000684 	.word	0x20000684

08010988 <__sfp_lock_release>:
 8010988:	4801      	ldr	r0, [pc, #4]	; (8010990 <__sfp_lock_release+0x8>)
 801098a:	f000 b8d3 	b.w	8010b34 <__retarget_lock_release_recursive>
 801098e:	bf00      	nop
 8010990:	20000684 	.word	0x20000684

08010994 <__sinit_lock_acquire>:
 8010994:	4801      	ldr	r0, [pc, #4]	; (801099c <__sinit_lock_acquire+0x8>)
 8010996:	f000 b8cc 	b.w	8010b32 <__retarget_lock_acquire_recursive>
 801099a:	bf00      	nop
 801099c:	2000067f 	.word	0x2000067f

080109a0 <__sinit_lock_release>:
 80109a0:	4801      	ldr	r0, [pc, #4]	; (80109a8 <__sinit_lock_release+0x8>)
 80109a2:	f000 b8c7 	b.w	8010b34 <__retarget_lock_release_recursive>
 80109a6:	bf00      	nop
 80109a8:	2000067f 	.word	0x2000067f

080109ac <__sinit>:
 80109ac:	b510      	push	{r4, lr}
 80109ae:	4604      	mov	r4, r0
 80109b0:	f7ff fff0 	bl	8010994 <__sinit_lock_acquire>
 80109b4:	69a3      	ldr	r3, [r4, #24]
 80109b6:	b11b      	cbz	r3, 80109c0 <__sinit+0x14>
 80109b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109bc:	f7ff bff0 	b.w	80109a0 <__sinit_lock_release>
 80109c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80109c4:	6523      	str	r3, [r4, #80]	; 0x50
 80109c6:	4b13      	ldr	r3, [pc, #76]	; (8010a14 <__sinit+0x68>)
 80109c8:	4a13      	ldr	r2, [pc, #76]	; (8010a18 <__sinit+0x6c>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80109ce:	42a3      	cmp	r3, r4
 80109d0:	bf04      	itt	eq
 80109d2:	2301      	moveq	r3, #1
 80109d4:	61a3      	streq	r3, [r4, #24]
 80109d6:	4620      	mov	r0, r4
 80109d8:	f000 f820 	bl	8010a1c <__sfp>
 80109dc:	6060      	str	r0, [r4, #4]
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 f81c 	bl	8010a1c <__sfp>
 80109e4:	60a0      	str	r0, [r4, #8]
 80109e6:	4620      	mov	r0, r4
 80109e8:	f000 f818 	bl	8010a1c <__sfp>
 80109ec:	2200      	movs	r2, #0
 80109ee:	60e0      	str	r0, [r4, #12]
 80109f0:	2104      	movs	r1, #4
 80109f2:	6860      	ldr	r0, [r4, #4]
 80109f4:	f7ff ff82 	bl	80108fc <std>
 80109f8:	68a0      	ldr	r0, [r4, #8]
 80109fa:	2201      	movs	r2, #1
 80109fc:	2109      	movs	r1, #9
 80109fe:	f7ff ff7d 	bl	80108fc <std>
 8010a02:	68e0      	ldr	r0, [r4, #12]
 8010a04:	2202      	movs	r2, #2
 8010a06:	2112      	movs	r1, #18
 8010a08:	f7ff ff78 	bl	80108fc <std>
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	61a3      	str	r3, [r4, #24]
 8010a10:	e7d2      	b.n	80109b8 <__sinit+0xc>
 8010a12:	bf00      	nop
 8010a14:	0801aa4c 	.word	0x0801aa4c
 8010a18:	08010945 	.word	0x08010945

08010a1c <__sfp>:
 8010a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a1e:	4607      	mov	r7, r0
 8010a20:	f7ff ffac 	bl	801097c <__sfp_lock_acquire>
 8010a24:	4b1e      	ldr	r3, [pc, #120]	; (8010aa0 <__sfp+0x84>)
 8010a26:	681e      	ldr	r6, [r3, #0]
 8010a28:	69b3      	ldr	r3, [r6, #24]
 8010a2a:	b913      	cbnz	r3, 8010a32 <__sfp+0x16>
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f7ff ffbd 	bl	80109ac <__sinit>
 8010a32:	3648      	adds	r6, #72	; 0x48
 8010a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a38:	3b01      	subs	r3, #1
 8010a3a:	d503      	bpl.n	8010a44 <__sfp+0x28>
 8010a3c:	6833      	ldr	r3, [r6, #0]
 8010a3e:	b30b      	cbz	r3, 8010a84 <__sfp+0x68>
 8010a40:	6836      	ldr	r6, [r6, #0]
 8010a42:	e7f7      	b.n	8010a34 <__sfp+0x18>
 8010a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a48:	b9d5      	cbnz	r5, 8010a80 <__sfp+0x64>
 8010a4a:	4b16      	ldr	r3, [pc, #88]	; (8010aa4 <__sfp+0x88>)
 8010a4c:	60e3      	str	r3, [r4, #12]
 8010a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a52:	6665      	str	r5, [r4, #100]	; 0x64
 8010a54:	f000 f86c 	bl	8010b30 <__retarget_lock_init_recursive>
 8010a58:	f7ff ff96 	bl	8010988 <__sfp_lock_release>
 8010a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a64:	6025      	str	r5, [r4, #0]
 8010a66:	61a5      	str	r5, [r4, #24]
 8010a68:	2208      	movs	r2, #8
 8010a6a:	4629      	mov	r1, r5
 8010a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a70:	f000 f89a 	bl	8010ba8 <memset>
 8010a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a80:	3468      	adds	r4, #104	; 0x68
 8010a82:	e7d9      	b.n	8010a38 <__sfp+0x1c>
 8010a84:	2104      	movs	r1, #4
 8010a86:	4638      	mov	r0, r7
 8010a88:	f7ff ff62 	bl	8010950 <__sfmoreglue>
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	6030      	str	r0, [r6, #0]
 8010a90:	2800      	cmp	r0, #0
 8010a92:	d1d5      	bne.n	8010a40 <__sfp+0x24>
 8010a94:	f7ff ff78 	bl	8010988 <__sfp_lock_release>
 8010a98:	230c      	movs	r3, #12
 8010a9a:	603b      	str	r3, [r7, #0]
 8010a9c:	e7ee      	b.n	8010a7c <__sfp+0x60>
 8010a9e:	bf00      	nop
 8010aa0:	0801aa4c 	.word	0x0801aa4c
 8010aa4:	ffff0001 	.word	0xffff0001

08010aa8 <_fwalk_reent>:
 8010aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aac:	4606      	mov	r6, r0
 8010aae:	4688      	mov	r8, r1
 8010ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ab4:	2700      	movs	r7, #0
 8010ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010aba:	f1b9 0901 	subs.w	r9, r9, #1
 8010abe:	d505      	bpl.n	8010acc <_fwalk_reent+0x24>
 8010ac0:	6824      	ldr	r4, [r4, #0]
 8010ac2:	2c00      	cmp	r4, #0
 8010ac4:	d1f7      	bne.n	8010ab6 <_fwalk_reent+0xe>
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010acc:	89ab      	ldrh	r3, [r5, #12]
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d907      	bls.n	8010ae2 <_fwalk_reent+0x3a>
 8010ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	d003      	beq.n	8010ae2 <_fwalk_reent+0x3a>
 8010ada:	4629      	mov	r1, r5
 8010adc:	4630      	mov	r0, r6
 8010ade:	47c0      	blx	r8
 8010ae0:	4307      	orrs	r7, r0
 8010ae2:	3568      	adds	r5, #104	; 0x68
 8010ae4:	e7e9      	b.n	8010aba <_fwalk_reent+0x12>
	...

08010ae8 <__libc_init_array>:
 8010ae8:	b570      	push	{r4, r5, r6, lr}
 8010aea:	4d0d      	ldr	r5, [pc, #52]	; (8010b20 <__libc_init_array+0x38>)
 8010aec:	4c0d      	ldr	r4, [pc, #52]	; (8010b24 <__libc_init_array+0x3c>)
 8010aee:	1b64      	subs	r4, r4, r5
 8010af0:	10a4      	asrs	r4, r4, #2
 8010af2:	2600      	movs	r6, #0
 8010af4:	42a6      	cmp	r6, r4
 8010af6:	d109      	bne.n	8010b0c <__libc_init_array+0x24>
 8010af8:	4d0b      	ldr	r5, [pc, #44]	; (8010b28 <__libc_init_array+0x40>)
 8010afa:	4c0c      	ldr	r4, [pc, #48]	; (8010b2c <__libc_init_array+0x44>)
 8010afc:	f001 fa14 	bl	8011f28 <_init>
 8010b00:	1b64      	subs	r4, r4, r5
 8010b02:	10a4      	asrs	r4, r4, #2
 8010b04:	2600      	movs	r6, #0
 8010b06:	42a6      	cmp	r6, r4
 8010b08:	d105      	bne.n	8010b16 <__libc_init_array+0x2e>
 8010b0a:	bd70      	pop	{r4, r5, r6, pc}
 8010b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b10:	4798      	blx	r3
 8010b12:	3601      	adds	r6, #1
 8010b14:	e7ee      	b.n	8010af4 <__libc_init_array+0xc>
 8010b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b1a:	4798      	blx	r3
 8010b1c:	3601      	adds	r6, #1
 8010b1e:	e7f2      	b.n	8010b06 <__libc_init_array+0x1e>
 8010b20:	0801aa8c 	.word	0x0801aa8c
 8010b24:	0801aa8c 	.word	0x0801aa8c
 8010b28:	0801aa8c 	.word	0x0801aa8c
 8010b2c:	0801aa90 	.word	0x0801aa90

08010b30 <__retarget_lock_init_recursive>:
 8010b30:	4770      	bx	lr

08010b32 <__retarget_lock_acquire_recursive>:
 8010b32:	4770      	bx	lr

08010b34 <__retarget_lock_release_recursive>:
 8010b34:	4770      	bx	lr
	...

08010b38 <malloc>:
 8010b38:	4b02      	ldr	r3, [pc, #8]	; (8010b44 <malloc+0xc>)
 8010b3a:	4601      	mov	r1, r0
 8010b3c:	6818      	ldr	r0, [r3, #0]
 8010b3e:	f000 b88b 	b.w	8010c58 <_malloc_r>
 8010b42:	bf00      	nop
 8010b44:	20000148 	.word	0x20000148

08010b48 <free>:
 8010b48:	4b02      	ldr	r3, [pc, #8]	; (8010b54 <free+0xc>)
 8010b4a:	4601      	mov	r1, r0
 8010b4c:	6818      	ldr	r0, [r3, #0]
 8010b4e:	f000 b833 	b.w	8010bb8 <_free_r>
 8010b52:	bf00      	nop
 8010b54:	20000148 	.word	0x20000148

08010b58 <memcpy>:
 8010b58:	440a      	add	r2, r1
 8010b5a:	4291      	cmp	r1, r2
 8010b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b60:	d100      	bne.n	8010b64 <memcpy+0xc>
 8010b62:	4770      	bx	lr
 8010b64:	b510      	push	{r4, lr}
 8010b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b6e:	4291      	cmp	r1, r2
 8010b70:	d1f9      	bne.n	8010b66 <memcpy+0xe>
 8010b72:	bd10      	pop	{r4, pc}

08010b74 <memmove>:
 8010b74:	4288      	cmp	r0, r1
 8010b76:	b510      	push	{r4, lr}
 8010b78:	eb01 0402 	add.w	r4, r1, r2
 8010b7c:	d902      	bls.n	8010b84 <memmove+0x10>
 8010b7e:	4284      	cmp	r4, r0
 8010b80:	4623      	mov	r3, r4
 8010b82:	d807      	bhi.n	8010b94 <memmove+0x20>
 8010b84:	1e43      	subs	r3, r0, #1
 8010b86:	42a1      	cmp	r1, r4
 8010b88:	d008      	beq.n	8010b9c <memmove+0x28>
 8010b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b92:	e7f8      	b.n	8010b86 <memmove+0x12>
 8010b94:	4402      	add	r2, r0
 8010b96:	4601      	mov	r1, r0
 8010b98:	428a      	cmp	r2, r1
 8010b9a:	d100      	bne.n	8010b9e <memmove+0x2a>
 8010b9c:	bd10      	pop	{r4, pc}
 8010b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ba6:	e7f7      	b.n	8010b98 <memmove+0x24>

08010ba8 <memset>:
 8010ba8:	4402      	add	r2, r0
 8010baa:	4603      	mov	r3, r0
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d100      	bne.n	8010bb2 <memset+0xa>
 8010bb0:	4770      	bx	lr
 8010bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8010bb6:	e7f9      	b.n	8010bac <memset+0x4>

08010bb8 <_free_r>:
 8010bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bba:	2900      	cmp	r1, #0
 8010bbc:	d048      	beq.n	8010c50 <_free_r+0x98>
 8010bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bc2:	9001      	str	r0, [sp, #4]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f1a1 0404 	sub.w	r4, r1, #4
 8010bca:	bfb8      	it	lt
 8010bcc:	18e4      	addlt	r4, r4, r3
 8010bce:	f000 fb11 	bl	80111f4 <__malloc_lock>
 8010bd2:	4a20      	ldr	r2, [pc, #128]	; (8010c54 <_free_r+0x9c>)
 8010bd4:	9801      	ldr	r0, [sp, #4]
 8010bd6:	6813      	ldr	r3, [r2, #0]
 8010bd8:	4615      	mov	r5, r2
 8010bda:	b933      	cbnz	r3, 8010bea <_free_r+0x32>
 8010bdc:	6063      	str	r3, [r4, #4]
 8010bde:	6014      	str	r4, [r2, #0]
 8010be0:	b003      	add	sp, #12
 8010be2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010be6:	f000 bb0b 	b.w	8011200 <__malloc_unlock>
 8010bea:	42a3      	cmp	r3, r4
 8010bec:	d90b      	bls.n	8010c06 <_free_r+0x4e>
 8010bee:	6821      	ldr	r1, [r4, #0]
 8010bf0:	1862      	adds	r2, r4, r1
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	bf04      	itt	eq
 8010bf6:	681a      	ldreq	r2, [r3, #0]
 8010bf8:	685b      	ldreq	r3, [r3, #4]
 8010bfa:	6063      	str	r3, [r4, #4]
 8010bfc:	bf04      	itt	eq
 8010bfe:	1852      	addeq	r2, r2, r1
 8010c00:	6022      	streq	r2, [r4, #0]
 8010c02:	602c      	str	r4, [r5, #0]
 8010c04:	e7ec      	b.n	8010be0 <_free_r+0x28>
 8010c06:	461a      	mov	r2, r3
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	b10b      	cbz	r3, 8010c10 <_free_r+0x58>
 8010c0c:	42a3      	cmp	r3, r4
 8010c0e:	d9fa      	bls.n	8010c06 <_free_r+0x4e>
 8010c10:	6811      	ldr	r1, [r2, #0]
 8010c12:	1855      	adds	r5, r2, r1
 8010c14:	42a5      	cmp	r5, r4
 8010c16:	d10b      	bne.n	8010c30 <_free_r+0x78>
 8010c18:	6824      	ldr	r4, [r4, #0]
 8010c1a:	4421      	add	r1, r4
 8010c1c:	1854      	adds	r4, r2, r1
 8010c1e:	42a3      	cmp	r3, r4
 8010c20:	6011      	str	r1, [r2, #0]
 8010c22:	d1dd      	bne.n	8010be0 <_free_r+0x28>
 8010c24:	681c      	ldr	r4, [r3, #0]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	6053      	str	r3, [r2, #4]
 8010c2a:	4421      	add	r1, r4
 8010c2c:	6011      	str	r1, [r2, #0]
 8010c2e:	e7d7      	b.n	8010be0 <_free_r+0x28>
 8010c30:	d902      	bls.n	8010c38 <_free_r+0x80>
 8010c32:	230c      	movs	r3, #12
 8010c34:	6003      	str	r3, [r0, #0]
 8010c36:	e7d3      	b.n	8010be0 <_free_r+0x28>
 8010c38:	6825      	ldr	r5, [r4, #0]
 8010c3a:	1961      	adds	r1, r4, r5
 8010c3c:	428b      	cmp	r3, r1
 8010c3e:	bf04      	itt	eq
 8010c40:	6819      	ldreq	r1, [r3, #0]
 8010c42:	685b      	ldreq	r3, [r3, #4]
 8010c44:	6063      	str	r3, [r4, #4]
 8010c46:	bf04      	itt	eq
 8010c48:	1949      	addeq	r1, r1, r5
 8010c4a:	6021      	streq	r1, [r4, #0]
 8010c4c:	6054      	str	r4, [r2, #4]
 8010c4e:	e7c7      	b.n	8010be0 <_free_r+0x28>
 8010c50:	b003      	add	sp, #12
 8010c52:	bd30      	pop	{r4, r5, pc}
 8010c54:	2000024c 	.word	0x2000024c

08010c58 <_malloc_r>:
 8010c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5a:	1ccd      	adds	r5, r1, #3
 8010c5c:	f025 0503 	bic.w	r5, r5, #3
 8010c60:	3508      	adds	r5, #8
 8010c62:	2d0c      	cmp	r5, #12
 8010c64:	bf38      	it	cc
 8010c66:	250c      	movcc	r5, #12
 8010c68:	2d00      	cmp	r5, #0
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	db01      	blt.n	8010c72 <_malloc_r+0x1a>
 8010c6e:	42a9      	cmp	r1, r5
 8010c70:	d903      	bls.n	8010c7a <_malloc_r+0x22>
 8010c72:	230c      	movs	r3, #12
 8010c74:	6033      	str	r3, [r6, #0]
 8010c76:	2000      	movs	r0, #0
 8010c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c7a:	f000 fabb 	bl	80111f4 <__malloc_lock>
 8010c7e:	4921      	ldr	r1, [pc, #132]	; (8010d04 <_malloc_r+0xac>)
 8010c80:	680a      	ldr	r2, [r1, #0]
 8010c82:	4614      	mov	r4, r2
 8010c84:	b99c      	cbnz	r4, 8010cae <_malloc_r+0x56>
 8010c86:	4f20      	ldr	r7, [pc, #128]	; (8010d08 <_malloc_r+0xb0>)
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	b923      	cbnz	r3, 8010c96 <_malloc_r+0x3e>
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f000 f8ca 	bl	8010e28 <_sbrk_r>
 8010c94:	6038      	str	r0, [r7, #0]
 8010c96:	4629      	mov	r1, r5
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f000 f8c5 	bl	8010e28 <_sbrk_r>
 8010c9e:	1c43      	adds	r3, r0, #1
 8010ca0:	d123      	bne.n	8010cea <_malloc_r+0x92>
 8010ca2:	230c      	movs	r3, #12
 8010ca4:	6033      	str	r3, [r6, #0]
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f000 faaa 	bl	8011200 <__malloc_unlock>
 8010cac:	e7e3      	b.n	8010c76 <_malloc_r+0x1e>
 8010cae:	6823      	ldr	r3, [r4, #0]
 8010cb0:	1b5b      	subs	r3, r3, r5
 8010cb2:	d417      	bmi.n	8010ce4 <_malloc_r+0x8c>
 8010cb4:	2b0b      	cmp	r3, #11
 8010cb6:	d903      	bls.n	8010cc0 <_malloc_r+0x68>
 8010cb8:	6023      	str	r3, [r4, #0]
 8010cba:	441c      	add	r4, r3
 8010cbc:	6025      	str	r5, [r4, #0]
 8010cbe:	e004      	b.n	8010cca <_malloc_r+0x72>
 8010cc0:	6863      	ldr	r3, [r4, #4]
 8010cc2:	42a2      	cmp	r2, r4
 8010cc4:	bf0c      	ite	eq
 8010cc6:	600b      	streq	r3, [r1, #0]
 8010cc8:	6053      	strne	r3, [r2, #4]
 8010cca:	4630      	mov	r0, r6
 8010ccc:	f000 fa98 	bl	8011200 <__malloc_unlock>
 8010cd0:	f104 000b 	add.w	r0, r4, #11
 8010cd4:	1d23      	adds	r3, r4, #4
 8010cd6:	f020 0007 	bic.w	r0, r0, #7
 8010cda:	1ac2      	subs	r2, r0, r3
 8010cdc:	d0cc      	beq.n	8010c78 <_malloc_r+0x20>
 8010cde:	1a1b      	subs	r3, r3, r0
 8010ce0:	50a3      	str	r3, [r4, r2]
 8010ce2:	e7c9      	b.n	8010c78 <_malloc_r+0x20>
 8010ce4:	4622      	mov	r2, r4
 8010ce6:	6864      	ldr	r4, [r4, #4]
 8010ce8:	e7cc      	b.n	8010c84 <_malloc_r+0x2c>
 8010cea:	1cc4      	adds	r4, r0, #3
 8010cec:	f024 0403 	bic.w	r4, r4, #3
 8010cf0:	42a0      	cmp	r0, r4
 8010cf2:	d0e3      	beq.n	8010cbc <_malloc_r+0x64>
 8010cf4:	1a21      	subs	r1, r4, r0
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	f000 f896 	bl	8010e28 <_sbrk_r>
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	d1dd      	bne.n	8010cbc <_malloc_r+0x64>
 8010d00:	e7cf      	b.n	8010ca2 <_malloc_r+0x4a>
 8010d02:	bf00      	nop
 8010d04:	2000024c 	.word	0x2000024c
 8010d08:	20000250 	.word	0x20000250

08010d0c <iprintf>:
 8010d0c:	b40f      	push	{r0, r1, r2, r3}
 8010d0e:	4b0a      	ldr	r3, [pc, #40]	; (8010d38 <iprintf+0x2c>)
 8010d10:	b513      	push	{r0, r1, r4, lr}
 8010d12:	681c      	ldr	r4, [r3, #0]
 8010d14:	b124      	cbz	r4, 8010d20 <iprintf+0x14>
 8010d16:	69a3      	ldr	r3, [r4, #24]
 8010d18:	b913      	cbnz	r3, 8010d20 <iprintf+0x14>
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f7ff fe46 	bl	80109ac <__sinit>
 8010d20:	ab05      	add	r3, sp, #20
 8010d22:	9a04      	ldr	r2, [sp, #16]
 8010d24:	68a1      	ldr	r1, [r4, #8]
 8010d26:	9301      	str	r3, [sp, #4]
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f000 fbf5 	bl	8011518 <_vfiprintf_r>
 8010d2e:	b002      	add	sp, #8
 8010d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d34:	b004      	add	sp, #16
 8010d36:	4770      	bx	lr
 8010d38:	20000148 	.word	0x20000148

08010d3c <_puts_r>:
 8010d3c:	b570      	push	{r4, r5, r6, lr}
 8010d3e:	460e      	mov	r6, r1
 8010d40:	4605      	mov	r5, r0
 8010d42:	b118      	cbz	r0, 8010d4c <_puts_r+0x10>
 8010d44:	6983      	ldr	r3, [r0, #24]
 8010d46:	b90b      	cbnz	r3, 8010d4c <_puts_r+0x10>
 8010d48:	f7ff fe30 	bl	80109ac <__sinit>
 8010d4c:	69ab      	ldr	r3, [r5, #24]
 8010d4e:	68ac      	ldr	r4, [r5, #8]
 8010d50:	b913      	cbnz	r3, 8010d58 <_puts_r+0x1c>
 8010d52:	4628      	mov	r0, r5
 8010d54:	f7ff fe2a 	bl	80109ac <__sinit>
 8010d58:	4b2c      	ldr	r3, [pc, #176]	; (8010e0c <_puts_r+0xd0>)
 8010d5a:	429c      	cmp	r4, r3
 8010d5c:	d120      	bne.n	8010da0 <_puts_r+0x64>
 8010d5e:	686c      	ldr	r4, [r5, #4]
 8010d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d62:	07db      	lsls	r3, r3, #31
 8010d64:	d405      	bmi.n	8010d72 <_puts_r+0x36>
 8010d66:	89a3      	ldrh	r3, [r4, #12]
 8010d68:	0598      	lsls	r0, r3, #22
 8010d6a:	d402      	bmi.n	8010d72 <_puts_r+0x36>
 8010d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d6e:	f7ff fee0 	bl	8010b32 <__retarget_lock_acquire_recursive>
 8010d72:	89a3      	ldrh	r3, [r4, #12]
 8010d74:	0719      	lsls	r1, r3, #28
 8010d76:	d51d      	bpl.n	8010db4 <_puts_r+0x78>
 8010d78:	6923      	ldr	r3, [r4, #16]
 8010d7a:	b1db      	cbz	r3, 8010db4 <_puts_r+0x78>
 8010d7c:	3e01      	subs	r6, #1
 8010d7e:	68a3      	ldr	r3, [r4, #8]
 8010d80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d84:	3b01      	subs	r3, #1
 8010d86:	60a3      	str	r3, [r4, #8]
 8010d88:	bb39      	cbnz	r1, 8010dda <_puts_r+0x9e>
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	da38      	bge.n	8010e00 <_puts_r+0xc4>
 8010d8e:	4622      	mov	r2, r4
 8010d90:	210a      	movs	r1, #10
 8010d92:	4628      	mov	r0, r5
 8010d94:	f000 f8d6 	bl	8010f44 <__swbuf_r>
 8010d98:	3001      	adds	r0, #1
 8010d9a:	d011      	beq.n	8010dc0 <_puts_r+0x84>
 8010d9c:	250a      	movs	r5, #10
 8010d9e:	e011      	b.n	8010dc4 <_puts_r+0x88>
 8010da0:	4b1b      	ldr	r3, [pc, #108]	; (8010e10 <_puts_r+0xd4>)
 8010da2:	429c      	cmp	r4, r3
 8010da4:	d101      	bne.n	8010daa <_puts_r+0x6e>
 8010da6:	68ac      	ldr	r4, [r5, #8]
 8010da8:	e7da      	b.n	8010d60 <_puts_r+0x24>
 8010daa:	4b1a      	ldr	r3, [pc, #104]	; (8010e14 <_puts_r+0xd8>)
 8010dac:	429c      	cmp	r4, r3
 8010dae:	bf08      	it	eq
 8010db0:	68ec      	ldreq	r4, [r5, #12]
 8010db2:	e7d5      	b.n	8010d60 <_puts_r+0x24>
 8010db4:	4621      	mov	r1, r4
 8010db6:	4628      	mov	r0, r5
 8010db8:	f000 f928 	bl	801100c <__swsetup_r>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	d0dd      	beq.n	8010d7c <_puts_r+0x40>
 8010dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8010dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dc6:	07da      	lsls	r2, r3, #31
 8010dc8:	d405      	bmi.n	8010dd6 <_puts_r+0x9a>
 8010dca:	89a3      	ldrh	r3, [r4, #12]
 8010dcc:	059b      	lsls	r3, r3, #22
 8010dce:	d402      	bmi.n	8010dd6 <_puts_r+0x9a>
 8010dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dd2:	f7ff feaf 	bl	8010b34 <__retarget_lock_release_recursive>
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	bd70      	pop	{r4, r5, r6, pc}
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	da04      	bge.n	8010de8 <_puts_r+0xac>
 8010dde:	69a2      	ldr	r2, [r4, #24]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	dc06      	bgt.n	8010df2 <_puts_r+0xb6>
 8010de4:	290a      	cmp	r1, #10
 8010de6:	d004      	beq.n	8010df2 <_puts_r+0xb6>
 8010de8:	6823      	ldr	r3, [r4, #0]
 8010dea:	1c5a      	adds	r2, r3, #1
 8010dec:	6022      	str	r2, [r4, #0]
 8010dee:	7019      	strb	r1, [r3, #0]
 8010df0:	e7c5      	b.n	8010d7e <_puts_r+0x42>
 8010df2:	4622      	mov	r2, r4
 8010df4:	4628      	mov	r0, r5
 8010df6:	f000 f8a5 	bl	8010f44 <__swbuf_r>
 8010dfa:	3001      	adds	r0, #1
 8010dfc:	d1bf      	bne.n	8010d7e <_puts_r+0x42>
 8010dfe:	e7df      	b.n	8010dc0 <_puts_r+0x84>
 8010e00:	6823      	ldr	r3, [r4, #0]
 8010e02:	250a      	movs	r5, #10
 8010e04:	1c5a      	adds	r2, r3, #1
 8010e06:	6022      	str	r2, [r4, #0]
 8010e08:	701d      	strb	r5, [r3, #0]
 8010e0a:	e7db      	b.n	8010dc4 <_puts_r+0x88>
 8010e0c:	0801aa0c 	.word	0x0801aa0c
 8010e10:	0801aa2c 	.word	0x0801aa2c
 8010e14:	0801a9ec 	.word	0x0801a9ec

08010e18 <puts>:
 8010e18:	4b02      	ldr	r3, [pc, #8]	; (8010e24 <puts+0xc>)
 8010e1a:	4601      	mov	r1, r0
 8010e1c:	6818      	ldr	r0, [r3, #0]
 8010e1e:	f7ff bf8d 	b.w	8010d3c <_puts_r>
 8010e22:	bf00      	nop
 8010e24:	20000148 	.word	0x20000148

08010e28 <_sbrk_r>:
 8010e28:	b538      	push	{r3, r4, r5, lr}
 8010e2a:	4d06      	ldr	r5, [pc, #24]	; (8010e44 <_sbrk_r+0x1c>)
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	4604      	mov	r4, r0
 8010e30:	4608      	mov	r0, r1
 8010e32:	602b      	str	r3, [r5, #0]
 8010e34:	f7f0 fb38 	bl	80014a8 <_sbrk>
 8010e38:	1c43      	adds	r3, r0, #1
 8010e3a:	d102      	bne.n	8010e42 <_sbrk_r+0x1a>
 8010e3c:	682b      	ldr	r3, [r5, #0]
 8010e3e:	b103      	cbz	r3, 8010e42 <_sbrk_r+0x1a>
 8010e40:	6023      	str	r3, [r4, #0]
 8010e42:	bd38      	pop	{r3, r4, r5, pc}
 8010e44:	20000688 	.word	0x20000688

08010e48 <__sread>:
 8010e48:	b510      	push	{r4, lr}
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e50:	f000 fe26 	bl	8011aa0 <_read_r>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	bfab      	itete	ge
 8010e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8010e5c:	181b      	addge	r3, r3, r0
 8010e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e62:	bfac      	ite	ge
 8010e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e66:	81a3      	strhlt	r3, [r4, #12]
 8010e68:	bd10      	pop	{r4, pc}

08010e6a <__swrite>:
 8010e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6e:	461f      	mov	r7, r3
 8010e70:	898b      	ldrh	r3, [r1, #12]
 8010e72:	05db      	lsls	r3, r3, #23
 8010e74:	4605      	mov	r5, r0
 8010e76:	460c      	mov	r4, r1
 8010e78:	4616      	mov	r6, r2
 8010e7a:	d505      	bpl.n	8010e88 <__swrite+0x1e>
 8010e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e80:	2302      	movs	r3, #2
 8010e82:	2200      	movs	r2, #0
 8010e84:	f000 f940 	bl	8011108 <_lseek_r>
 8010e88:	89a3      	ldrh	r3, [r4, #12]
 8010e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e92:	81a3      	strh	r3, [r4, #12]
 8010e94:	4632      	mov	r2, r6
 8010e96:	463b      	mov	r3, r7
 8010e98:	4628      	mov	r0, r5
 8010e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e9e:	f000 b8a3 	b.w	8010fe8 <_write_r>

08010ea2 <__sseek>:
 8010ea2:	b510      	push	{r4, lr}
 8010ea4:	460c      	mov	r4, r1
 8010ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eaa:	f000 f92d 	bl	8011108 <_lseek_r>
 8010eae:	1c43      	adds	r3, r0, #1
 8010eb0:	89a3      	ldrh	r3, [r4, #12]
 8010eb2:	bf15      	itete	ne
 8010eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ebe:	81a3      	strheq	r3, [r4, #12]
 8010ec0:	bf18      	it	ne
 8010ec2:	81a3      	strhne	r3, [r4, #12]
 8010ec4:	bd10      	pop	{r4, pc}

08010ec6 <__sclose>:
 8010ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eca:	f000 b90d 	b.w	80110e8 <_close_r>

08010ece <_vsniprintf_r>:
 8010ece:	b530      	push	{r4, r5, lr}
 8010ed0:	1e14      	subs	r4, r2, #0
 8010ed2:	4605      	mov	r5, r0
 8010ed4:	b09b      	sub	sp, #108	; 0x6c
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	da05      	bge.n	8010ee6 <_vsniprintf_r+0x18>
 8010eda:	238b      	movs	r3, #139	; 0x8b
 8010edc:	602b      	str	r3, [r5, #0]
 8010ede:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee2:	b01b      	add	sp, #108	; 0x6c
 8010ee4:	bd30      	pop	{r4, r5, pc}
 8010ee6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010eea:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010eee:	bf14      	ite	ne
 8010ef0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010ef4:	4623      	moveq	r3, r4
 8010ef6:	9302      	str	r3, [sp, #8]
 8010ef8:	9305      	str	r3, [sp, #20]
 8010efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010efe:	9100      	str	r1, [sp, #0]
 8010f00:	9104      	str	r1, [sp, #16]
 8010f02:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010f06:	4602      	mov	r2, r0
 8010f08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010f0a:	4669      	mov	r1, sp
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f000 f9d9 	bl	80112c4 <_svfiprintf_r>
 8010f12:	1c43      	adds	r3, r0, #1
 8010f14:	bfbc      	itt	lt
 8010f16:	238b      	movlt	r3, #139	; 0x8b
 8010f18:	602b      	strlt	r3, [r5, #0]
 8010f1a:	2c00      	cmp	r4, #0
 8010f1c:	d0e1      	beq.n	8010ee2 <_vsniprintf_r+0x14>
 8010f1e:	9b00      	ldr	r3, [sp, #0]
 8010f20:	2200      	movs	r2, #0
 8010f22:	701a      	strb	r2, [r3, #0]
 8010f24:	e7dd      	b.n	8010ee2 <_vsniprintf_r+0x14>
	...

08010f28 <vsniprintf>:
 8010f28:	b507      	push	{r0, r1, r2, lr}
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	460a      	mov	r2, r1
 8010f30:	4601      	mov	r1, r0
 8010f32:	4803      	ldr	r0, [pc, #12]	; (8010f40 <vsniprintf+0x18>)
 8010f34:	6800      	ldr	r0, [r0, #0]
 8010f36:	f7ff ffca 	bl	8010ece <_vsniprintf_r>
 8010f3a:	b003      	add	sp, #12
 8010f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f40:	20000148 	.word	0x20000148

08010f44 <__swbuf_r>:
 8010f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f46:	460e      	mov	r6, r1
 8010f48:	4614      	mov	r4, r2
 8010f4a:	4605      	mov	r5, r0
 8010f4c:	b118      	cbz	r0, 8010f56 <__swbuf_r+0x12>
 8010f4e:	6983      	ldr	r3, [r0, #24]
 8010f50:	b90b      	cbnz	r3, 8010f56 <__swbuf_r+0x12>
 8010f52:	f7ff fd2b 	bl	80109ac <__sinit>
 8010f56:	4b21      	ldr	r3, [pc, #132]	; (8010fdc <__swbuf_r+0x98>)
 8010f58:	429c      	cmp	r4, r3
 8010f5a:	d12b      	bne.n	8010fb4 <__swbuf_r+0x70>
 8010f5c:	686c      	ldr	r4, [r5, #4]
 8010f5e:	69a3      	ldr	r3, [r4, #24]
 8010f60:	60a3      	str	r3, [r4, #8]
 8010f62:	89a3      	ldrh	r3, [r4, #12]
 8010f64:	071a      	lsls	r2, r3, #28
 8010f66:	d52f      	bpl.n	8010fc8 <__swbuf_r+0x84>
 8010f68:	6923      	ldr	r3, [r4, #16]
 8010f6a:	b36b      	cbz	r3, 8010fc8 <__swbuf_r+0x84>
 8010f6c:	6923      	ldr	r3, [r4, #16]
 8010f6e:	6820      	ldr	r0, [r4, #0]
 8010f70:	1ac0      	subs	r0, r0, r3
 8010f72:	6963      	ldr	r3, [r4, #20]
 8010f74:	b2f6      	uxtb	r6, r6
 8010f76:	4283      	cmp	r3, r0
 8010f78:	4637      	mov	r7, r6
 8010f7a:	dc04      	bgt.n	8010f86 <__swbuf_r+0x42>
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f7ff fc6e 	bl	8010860 <_fflush_r>
 8010f84:	bb30      	cbnz	r0, 8010fd4 <__swbuf_r+0x90>
 8010f86:	68a3      	ldr	r3, [r4, #8]
 8010f88:	3b01      	subs	r3, #1
 8010f8a:	60a3      	str	r3, [r4, #8]
 8010f8c:	6823      	ldr	r3, [r4, #0]
 8010f8e:	1c5a      	adds	r2, r3, #1
 8010f90:	6022      	str	r2, [r4, #0]
 8010f92:	701e      	strb	r6, [r3, #0]
 8010f94:	6963      	ldr	r3, [r4, #20]
 8010f96:	3001      	adds	r0, #1
 8010f98:	4283      	cmp	r3, r0
 8010f9a:	d004      	beq.n	8010fa6 <__swbuf_r+0x62>
 8010f9c:	89a3      	ldrh	r3, [r4, #12]
 8010f9e:	07db      	lsls	r3, r3, #31
 8010fa0:	d506      	bpl.n	8010fb0 <__swbuf_r+0x6c>
 8010fa2:	2e0a      	cmp	r6, #10
 8010fa4:	d104      	bne.n	8010fb0 <__swbuf_r+0x6c>
 8010fa6:	4621      	mov	r1, r4
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f7ff fc59 	bl	8010860 <_fflush_r>
 8010fae:	b988      	cbnz	r0, 8010fd4 <__swbuf_r+0x90>
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fb4:	4b0a      	ldr	r3, [pc, #40]	; (8010fe0 <__swbuf_r+0x9c>)
 8010fb6:	429c      	cmp	r4, r3
 8010fb8:	d101      	bne.n	8010fbe <__swbuf_r+0x7a>
 8010fba:	68ac      	ldr	r4, [r5, #8]
 8010fbc:	e7cf      	b.n	8010f5e <__swbuf_r+0x1a>
 8010fbe:	4b09      	ldr	r3, [pc, #36]	; (8010fe4 <__swbuf_r+0xa0>)
 8010fc0:	429c      	cmp	r4, r3
 8010fc2:	bf08      	it	eq
 8010fc4:	68ec      	ldreq	r4, [r5, #12]
 8010fc6:	e7ca      	b.n	8010f5e <__swbuf_r+0x1a>
 8010fc8:	4621      	mov	r1, r4
 8010fca:	4628      	mov	r0, r5
 8010fcc:	f000 f81e 	bl	801100c <__swsetup_r>
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	d0cb      	beq.n	8010f6c <__swbuf_r+0x28>
 8010fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8010fd8:	e7ea      	b.n	8010fb0 <__swbuf_r+0x6c>
 8010fda:	bf00      	nop
 8010fdc:	0801aa0c 	.word	0x0801aa0c
 8010fe0:	0801aa2c 	.word	0x0801aa2c
 8010fe4:	0801a9ec 	.word	0x0801a9ec

08010fe8 <_write_r>:
 8010fe8:	b538      	push	{r3, r4, r5, lr}
 8010fea:	4d07      	ldr	r5, [pc, #28]	; (8011008 <_write_r+0x20>)
 8010fec:	4604      	mov	r4, r0
 8010fee:	4608      	mov	r0, r1
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	602a      	str	r2, [r5, #0]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f7f0 fa05 	bl	8001406 <_write>
 8010ffc:	1c43      	adds	r3, r0, #1
 8010ffe:	d102      	bne.n	8011006 <_write_r+0x1e>
 8011000:	682b      	ldr	r3, [r5, #0]
 8011002:	b103      	cbz	r3, 8011006 <_write_r+0x1e>
 8011004:	6023      	str	r3, [r4, #0]
 8011006:	bd38      	pop	{r3, r4, r5, pc}
 8011008:	20000688 	.word	0x20000688

0801100c <__swsetup_r>:
 801100c:	4b32      	ldr	r3, [pc, #200]	; (80110d8 <__swsetup_r+0xcc>)
 801100e:	b570      	push	{r4, r5, r6, lr}
 8011010:	681d      	ldr	r5, [r3, #0]
 8011012:	4606      	mov	r6, r0
 8011014:	460c      	mov	r4, r1
 8011016:	b125      	cbz	r5, 8011022 <__swsetup_r+0x16>
 8011018:	69ab      	ldr	r3, [r5, #24]
 801101a:	b913      	cbnz	r3, 8011022 <__swsetup_r+0x16>
 801101c:	4628      	mov	r0, r5
 801101e:	f7ff fcc5 	bl	80109ac <__sinit>
 8011022:	4b2e      	ldr	r3, [pc, #184]	; (80110dc <__swsetup_r+0xd0>)
 8011024:	429c      	cmp	r4, r3
 8011026:	d10f      	bne.n	8011048 <__swsetup_r+0x3c>
 8011028:	686c      	ldr	r4, [r5, #4]
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011030:	0719      	lsls	r1, r3, #28
 8011032:	d42c      	bmi.n	801108e <__swsetup_r+0x82>
 8011034:	06dd      	lsls	r5, r3, #27
 8011036:	d411      	bmi.n	801105c <__swsetup_r+0x50>
 8011038:	2309      	movs	r3, #9
 801103a:	6033      	str	r3, [r6, #0]
 801103c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011040:	81a3      	strh	r3, [r4, #12]
 8011042:	f04f 30ff 	mov.w	r0, #4294967295
 8011046:	e03e      	b.n	80110c6 <__swsetup_r+0xba>
 8011048:	4b25      	ldr	r3, [pc, #148]	; (80110e0 <__swsetup_r+0xd4>)
 801104a:	429c      	cmp	r4, r3
 801104c:	d101      	bne.n	8011052 <__swsetup_r+0x46>
 801104e:	68ac      	ldr	r4, [r5, #8]
 8011050:	e7eb      	b.n	801102a <__swsetup_r+0x1e>
 8011052:	4b24      	ldr	r3, [pc, #144]	; (80110e4 <__swsetup_r+0xd8>)
 8011054:	429c      	cmp	r4, r3
 8011056:	bf08      	it	eq
 8011058:	68ec      	ldreq	r4, [r5, #12]
 801105a:	e7e6      	b.n	801102a <__swsetup_r+0x1e>
 801105c:	0758      	lsls	r0, r3, #29
 801105e:	d512      	bpl.n	8011086 <__swsetup_r+0x7a>
 8011060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011062:	b141      	cbz	r1, 8011076 <__swsetup_r+0x6a>
 8011064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011068:	4299      	cmp	r1, r3
 801106a:	d002      	beq.n	8011072 <__swsetup_r+0x66>
 801106c:	4630      	mov	r0, r6
 801106e:	f7ff fda3 	bl	8010bb8 <_free_r>
 8011072:	2300      	movs	r3, #0
 8011074:	6363      	str	r3, [r4, #52]	; 0x34
 8011076:	89a3      	ldrh	r3, [r4, #12]
 8011078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801107c:	81a3      	strh	r3, [r4, #12]
 801107e:	2300      	movs	r3, #0
 8011080:	6063      	str	r3, [r4, #4]
 8011082:	6923      	ldr	r3, [r4, #16]
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	89a3      	ldrh	r3, [r4, #12]
 8011088:	f043 0308 	orr.w	r3, r3, #8
 801108c:	81a3      	strh	r3, [r4, #12]
 801108e:	6923      	ldr	r3, [r4, #16]
 8011090:	b94b      	cbnz	r3, 80110a6 <__swsetup_r+0x9a>
 8011092:	89a3      	ldrh	r3, [r4, #12]
 8011094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801109c:	d003      	beq.n	80110a6 <__swsetup_r+0x9a>
 801109e:	4621      	mov	r1, r4
 80110a0:	4630      	mov	r0, r6
 80110a2:	f000 f867 	bl	8011174 <__smakebuf_r>
 80110a6:	89a0      	ldrh	r0, [r4, #12]
 80110a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110ac:	f010 0301 	ands.w	r3, r0, #1
 80110b0:	d00a      	beq.n	80110c8 <__swsetup_r+0xbc>
 80110b2:	2300      	movs	r3, #0
 80110b4:	60a3      	str	r3, [r4, #8]
 80110b6:	6963      	ldr	r3, [r4, #20]
 80110b8:	425b      	negs	r3, r3
 80110ba:	61a3      	str	r3, [r4, #24]
 80110bc:	6923      	ldr	r3, [r4, #16]
 80110be:	b943      	cbnz	r3, 80110d2 <__swsetup_r+0xc6>
 80110c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80110c4:	d1ba      	bne.n	801103c <__swsetup_r+0x30>
 80110c6:	bd70      	pop	{r4, r5, r6, pc}
 80110c8:	0781      	lsls	r1, r0, #30
 80110ca:	bf58      	it	pl
 80110cc:	6963      	ldrpl	r3, [r4, #20]
 80110ce:	60a3      	str	r3, [r4, #8]
 80110d0:	e7f4      	b.n	80110bc <__swsetup_r+0xb0>
 80110d2:	2000      	movs	r0, #0
 80110d4:	e7f7      	b.n	80110c6 <__swsetup_r+0xba>
 80110d6:	bf00      	nop
 80110d8:	20000148 	.word	0x20000148
 80110dc:	0801aa0c 	.word	0x0801aa0c
 80110e0:	0801aa2c 	.word	0x0801aa2c
 80110e4:	0801a9ec 	.word	0x0801a9ec

080110e8 <_close_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4d06      	ldr	r5, [pc, #24]	; (8011104 <_close_r+0x1c>)
 80110ec:	2300      	movs	r3, #0
 80110ee:	4604      	mov	r4, r0
 80110f0:	4608      	mov	r0, r1
 80110f2:	602b      	str	r3, [r5, #0]
 80110f4:	f7f0 f9a3 	bl	800143e <_close>
 80110f8:	1c43      	adds	r3, r0, #1
 80110fa:	d102      	bne.n	8011102 <_close_r+0x1a>
 80110fc:	682b      	ldr	r3, [r5, #0]
 80110fe:	b103      	cbz	r3, 8011102 <_close_r+0x1a>
 8011100:	6023      	str	r3, [r4, #0]
 8011102:	bd38      	pop	{r3, r4, r5, pc}
 8011104:	20000688 	.word	0x20000688

08011108 <_lseek_r>:
 8011108:	b538      	push	{r3, r4, r5, lr}
 801110a:	4d07      	ldr	r5, [pc, #28]	; (8011128 <_lseek_r+0x20>)
 801110c:	4604      	mov	r4, r0
 801110e:	4608      	mov	r0, r1
 8011110:	4611      	mov	r1, r2
 8011112:	2200      	movs	r2, #0
 8011114:	602a      	str	r2, [r5, #0]
 8011116:	461a      	mov	r2, r3
 8011118:	f7f0 f9b8 	bl	800148c <_lseek>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_lseek_r+0x1e>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_lseek_r+0x1e>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	20000688 	.word	0x20000688

0801112c <__swhatbuf_r>:
 801112c:	b570      	push	{r4, r5, r6, lr}
 801112e:	460e      	mov	r6, r1
 8011130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011134:	2900      	cmp	r1, #0
 8011136:	b096      	sub	sp, #88	; 0x58
 8011138:	4614      	mov	r4, r2
 801113a:	461d      	mov	r5, r3
 801113c:	da07      	bge.n	801114e <__swhatbuf_r+0x22>
 801113e:	2300      	movs	r3, #0
 8011140:	602b      	str	r3, [r5, #0]
 8011142:	89b3      	ldrh	r3, [r6, #12]
 8011144:	061a      	lsls	r2, r3, #24
 8011146:	d410      	bmi.n	801116a <__swhatbuf_r+0x3e>
 8011148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801114c:	e00e      	b.n	801116c <__swhatbuf_r+0x40>
 801114e:	466a      	mov	r2, sp
 8011150:	f000 fcb8 	bl	8011ac4 <_fstat_r>
 8011154:	2800      	cmp	r0, #0
 8011156:	dbf2      	blt.n	801113e <__swhatbuf_r+0x12>
 8011158:	9a01      	ldr	r2, [sp, #4]
 801115a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801115e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011162:	425a      	negs	r2, r3
 8011164:	415a      	adcs	r2, r3
 8011166:	602a      	str	r2, [r5, #0]
 8011168:	e7ee      	b.n	8011148 <__swhatbuf_r+0x1c>
 801116a:	2340      	movs	r3, #64	; 0x40
 801116c:	2000      	movs	r0, #0
 801116e:	6023      	str	r3, [r4, #0]
 8011170:	b016      	add	sp, #88	; 0x58
 8011172:	bd70      	pop	{r4, r5, r6, pc}

08011174 <__smakebuf_r>:
 8011174:	898b      	ldrh	r3, [r1, #12]
 8011176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011178:	079d      	lsls	r5, r3, #30
 801117a:	4606      	mov	r6, r0
 801117c:	460c      	mov	r4, r1
 801117e:	d507      	bpl.n	8011190 <__smakebuf_r+0x1c>
 8011180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011184:	6023      	str	r3, [r4, #0]
 8011186:	6123      	str	r3, [r4, #16]
 8011188:	2301      	movs	r3, #1
 801118a:	6163      	str	r3, [r4, #20]
 801118c:	b002      	add	sp, #8
 801118e:	bd70      	pop	{r4, r5, r6, pc}
 8011190:	ab01      	add	r3, sp, #4
 8011192:	466a      	mov	r2, sp
 8011194:	f7ff ffca 	bl	801112c <__swhatbuf_r>
 8011198:	9900      	ldr	r1, [sp, #0]
 801119a:	4605      	mov	r5, r0
 801119c:	4630      	mov	r0, r6
 801119e:	f7ff fd5b 	bl	8010c58 <_malloc_r>
 80111a2:	b948      	cbnz	r0, 80111b8 <__smakebuf_r+0x44>
 80111a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111a8:	059a      	lsls	r2, r3, #22
 80111aa:	d4ef      	bmi.n	801118c <__smakebuf_r+0x18>
 80111ac:	f023 0303 	bic.w	r3, r3, #3
 80111b0:	f043 0302 	orr.w	r3, r3, #2
 80111b4:	81a3      	strh	r3, [r4, #12]
 80111b6:	e7e3      	b.n	8011180 <__smakebuf_r+0xc>
 80111b8:	4b0d      	ldr	r3, [pc, #52]	; (80111f0 <__smakebuf_r+0x7c>)
 80111ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80111bc:	89a3      	ldrh	r3, [r4, #12]
 80111be:	6020      	str	r0, [r4, #0]
 80111c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111c4:	81a3      	strh	r3, [r4, #12]
 80111c6:	9b00      	ldr	r3, [sp, #0]
 80111c8:	6163      	str	r3, [r4, #20]
 80111ca:	9b01      	ldr	r3, [sp, #4]
 80111cc:	6120      	str	r0, [r4, #16]
 80111ce:	b15b      	cbz	r3, 80111e8 <__smakebuf_r+0x74>
 80111d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111d4:	4630      	mov	r0, r6
 80111d6:	f000 fc87 	bl	8011ae8 <_isatty_r>
 80111da:	b128      	cbz	r0, 80111e8 <__smakebuf_r+0x74>
 80111dc:	89a3      	ldrh	r3, [r4, #12]
 80111de:	f023 0303 	bic.w	r3, r3, #3
 80111e2:	f043 0301 	orr.w	r3, r3, #1
 80111e6:	81a3      	strh	r3, [r4, #12]
 80111e8:	89a0      	ldrh	r0, [r4, #12]
 80111ea:	4305      	orrs	r5, r0
 80111ec:	81a5      	strh	r5, [r4, #12]
 80111ee:	e7cd      	b.n	801118c <__smakebuf_r+0x18>
 80111f0:	08010945 	.word	0x08010945

080111f4 <__malloc_lock>:
 80111f4:	4801      	ldr	r0, [pc, #4]	; (80111fc <__malloc_lock+0x8>)
 80111f6:	f7ff bc9c 	b.w	8010b32 <__retarget_lock_acquire_recursive>
 80111fa:	bf00      	nop
 80111fc:	20000680 	.word	0x20000680

08011200 <__malloc_unlock>:
 8011200:	4801      	ldr	r0, [pc, #4]	; (8011208 <__malloc_unlock+0x8>)
 8011202:	f7ff bc97 	b.w	8010b34 <__retarget_lock_release_recursive>
 8011206:	bf00      	nop
 8011208:	20000680 	.word	0x20000680

0801120c <__ssputs_r>:
 801120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011210:	688e      	ldr	r6, [r1, #8]
 8011212:	429e      	cmp	r6, r3
 8011214:	4682      	mov	sl, r0
 8011216:	460c      	mov	r4, r1
 8011218:	4690      	mov	r8, r2
 801121a:	461f      	mov	r7, r3
 801121c:	d838      	bhi.n	8011290 <__ssputs_r+0x84>
 801121e:	898a      	ldrh	r2, [r1, #12]
 8011220:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011224:	d032      	beq.n	801128c <__ssputs_r+0x80>
 8011226:	6825      	ldr	r5, [r4, #0]
 8011228:	6909      	ldr	r1, [r1, #16]
 801122a:	eba5 0901 	sub.w	r9, r5, r1
 801122e:	6965      	ldr	r5, [r4, #20]
 8011230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011234:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011238:	3301      	adds	r3, #1
 801123a:	444b      	add	r3, r9
 801123c:	106d      	asrs	r5, r5, #1
 801123e:	429d      	cmp	r5, r3
 8011240:	bf38      	it	cc
 8011242:	461d      	movcc	r5, r3
 8011244:	0553      	lsls	r3, r2, #21
 8011246:	d531      	bpl.n	80112ac <__ssputs_r+0xa0>
 8011248:	4629      	mov	r1, r5
 801124a:	f7ff fd05 	bl	8010c58 <_malloc_r>
 801124e:	4606      	mov	r6, r0
 8011250:	b950      	cbnz	r0, 8011268 <__ssputs_r+0x5c>
 8011252:	230c      	movs	r3, #12
 8011254:	f8ca 3000 	str.w	r3, [sl]
 8011258:	89a3      	ldrh	r3, [r4, #12]
 801125a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801125e:	81a3      	strh	r3, [r4, #12]
 8011260:	f04f 30ff 	mov.w	r0, #4294967295
 8011264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011268:	6921      	ldr	r1, [r4, #16]
 801126a:	464a      	mov	r2, r9
 801126c:	f7ff fc74 	bl	8010b58 <memcpy>
 8011270:	89a3      	ldrh	r3, [r4, #12]
 8011272:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801127a:	81a3      	strh	r3, [r4, #12]
 801127c:	6126      	str	r6, [r4, #16]
 801127e:	6165      	str	r5, [r4, #20]
 8011280:	444e      	add	r6, r9
 8011282:	eba5 0509 	sub.w	r5, r5, r9
 8011286:	6026      	str	r6, [r4, #0]
 8011288:	60a5      	str	r5, [r4, #8]
 801128a:	463e      	mov	r6, r7
 801128c:	42be      	cmp	r6, r7
 801128e:	d900      	bls.n	8011292 <__ssputs_r+0x86>
 8011290:	463e      	mov	r6, r7
 8011292:	4632      	mov	r2, r6
 8011294:	6820      	ldr	r0, [r4, #0]
 8011296:	4641      	mov	r1, r8
 8011298:	f7ff fc6c 	bl	8010b74 <memmove>
 801129c:	68a3      	ldr	r3, [r4, #8]
 801129e:	6822      	ldr	r2, [r4, #0]
 80112a0:	1b9b      	subs	r3, r3, r6
 80112a2:	4432      	add	r2, r6
 80112a4:	60a3      	str	r3, [r4, #8]
 80112a6:	6022      	str	r2, [r4, #0]
 80112a8:	2000      	movs	r0, #0
 80112aa:	e7db      	b.n	8011264 <__ssputs_r+0x58>
 80112ac:	462a      	mov	r2, r5
 80112ae:	f000 fc2b 	bl	8011b08 <_realloc_r>
 80112b2:	4606      	mov	r6, r0
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d1e1      	bne.n	801127c <__ssputs_r+0x70>
 80112b8:	6921      	ldr	r1, [r4, #16]
 80112ba:	4650      	mov	r0, sl
 80112bc:	f7ff fc7c 	bl	8010bb8 <_free_r>
 80112c0:	e7c7      	b.n	8011252 <__ssputs_r+0x46>
	...

080112c4 <_svfiprintf_r>:
 80112c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c8:	4698      	mov	r8, r3
 80112ca:	898b      	ldrh	r3, [r1, #12]
 80112cc:	061b      	lsls	r3, r3, #24
 80112ce:	b09d      	sub	sp, #116	; 0x74
 80112d0:	4607      	mov	r7, r0
 80112d2:	460d      	mov	r5, r1
 80112d4:	4614      	mov	r4, r2
 80112d6:	d50e      	bpl.n	80112f6 <_svfiprintf_r+0x32>
 80112d8:	690b      	ldr	r3, [r1, #16]
 80112da:	b963      	cbnz	r3, 80112f6 <_svfiprintf_r+0x32>
 80112dc:	2140      	movs	r1, #64	; 0x40
 80112de:	f7ff fcbb 	bl	8010c58 <_malloc_r>
 80112e2:	6028      	str	r0, [r5, #0]
 80112e4:	6128      	str	r0, [r5, #16]
 80112e6:	b920      	cbnz	r0, 80112f2 <_svfiprintf_r+0x2e>
 80112e8:	230c      	movs	r3, #12
 80112ea:	603b      	str	r3, [r7, #0]
 80112ec:	f04f 30ff 	mov.w	r0, #4294967295
 80112f0:	e0d1      	b.n	8011496 <_svfiprintf_r+0x1d2>
 80112f2:	2340      	movs	r3, #64	; 0x40
 80112f4:	616b      	str	r3, [r5, #20]
 80112f6:	2300      	movs	r3, #0
 80112f8:	9309      	str	r3, [sp, #36]	; 0x24
 80112fa:	2320      	movs	r3, #32
 80112fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011300:	f8cd 800c 	str.w	r8, [sp, #12]
 8011304:	2330      	movs	r3, #48	; 0x30
 8011306:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80114b0 <_svfiprintf_r+0x1ec>
 801130a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801130e:	f04f 0901 	mov.w	r9, #1
 8011312:	4623      	mov	r3, r4
 8011314:	469a      	mov	sl, r3
 8011316:	f813 2b01 	ldrb.w	r2, [r3], #1
 801131a:	b10a      	cbz	r2, 8011320 <_svfiprintf_r+0x5c>
 801131c:	2a25      	cmp	r2, #37	; 0x25
 801131e:	d1f9      	bne.n	8011314 <_svfiprintf_r+0x50>
 8011320:	ebba 0b04 	subs.w	fp, sl, r4
 8011324:	d00b      	beq.n	801133e <_svfiprintf_r+0x7a>
 8011326:	465b      	mov	r3, fp
 8011328:	4622      	mov	r2, r4
 801132a:	4629      	mov	r1, r5
 801132c:	4638      	mov	r0, r7
 801132e:	f7ff ff6d 	bl	801120c <__ssputs_r>
 8011332:	3001      	adds	r0, #1
 8011334:	f000 80aa 	beq.w	801148c <_svfiprintf_r+0x1c8>
 8011338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801133a:	445a      	add	r2, fp
 801133c:	9209      	str	r2, [sp, #36]	; 0x24
 801133e:	f89a 3000 	ldrb.w	r3, [sl]
 8011342:	2b00      	cmp	r3, #0
 8011344:	f000 80a2 	beq.w	801148c <_svfiprintf_r+0x1c8>
 8011348:	2300      	movs	r3, #0
 801134a:	f04f 32ff 	mov.w	r2, #4294967295
 801134e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011352:	f10a 0a01 	add.w	sl, sl, #1
 8011356:	9304      	str	r3, [sp, #16]
 8011358:	9307      	str	r3, [sp, #28]
 801135a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801135e:	931a      	str	r3, [sp, #104]	; 0x68
 8011360:	4654      	mov	r4, sl
 8011362:	2205      	movs	r2, #5
 8011364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011368:	4851      	ldr	r0, [pc, #324]	; (80114b0 <_svfiprintf_r+0x1ec>)
 801136a:	f7ee ff81 	bl	8000270 <memchr>
 801136e:	9a04      	ldr	r2, [sp, #16]
 8011370:	b9d8      	cbnz	r0, 80113aa <_svfiprintf_r+0xe6>
 8011372:	06d0      	lsls	r0, r2, #27
 8011374:	bf44      	itt	mi
 8011376:	2320      	movmi	r3, #32
 8011378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801137c:	0711      	lsls	r1, r2, #28
 801137e:	bf44      	itt	mi
 8011380:	232b      	movmi	r3, #43	; 0x2b
 8011382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011386:	f89a 3000 	ldrb.w	r3, [sl]
 801138a:	2b2a      	cmp	r3, #42	; 0x2a
 801138c:	d015      	beq.n	80113ba <_svfiprintf_r+0xf6>
 801138e:	9a07      	ldr	r2, [sp, #28]
 8011390:	4654      	mov	r4, sl
 8011392:	2000      	movs	r0, #0
 8011394:	f04f 0c0a 	mov.w	ip, #10
 8011398:	4621      	mov	r1, r4
 801139a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801139e:	3b30      	subs	r3, #48	; 0x30
 80113a0:	2b09      	cmp	r3, #9
 80113a2:	d94e      	bls.n	8011442 <_svfiprintf_r+0x17e>
 80113a4:	b1b0      	cbz	r0, 80113d4 <_svfiprintf_r+0x110>
 80113a6:	9207      	str	r2, [sp, #28]
 80113a8:	e014      	b.n	80113d4 <_svfiprintf_r+0x110>
 80113aa:	eba0 0308 	sub.w	r3, r0, r8
 80113ae:	fa09 f303 	lsl.w	r3, r9, r3
 80113b2:	4313      	orrs	r3, r2
 80113b4:	9304      	str	r3, [sp, #16]
 80113b6:	46a2      	mov	sl, r4
 80113b8:	e7d2      	b.n	8011360 <_svfiprintf_r+0x9c>
 80113ba:	9b03      	ldr	r3, [sp, #12]
 80113bc:	1d19      	adds	r1, r3, #4
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	9103      	str	r1, [sp, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	bfbb      	ittet	lt
 80113c6:	425b      	neglt	r3, r3
 80113c8:	f042 0202 	orrlt.w	r2, r2, #2
 80113cc:	9307      	strge	r3, [sp, #28]
 80113ce:	9307      	strlt	r3, [sp, #28]
 80113d0:	bfb8      	it	lt
 80113d2:	9204      	strlt	r2, [sp, #16]
 80113d4:	7823      	ldrb	r3, [r4, #0]
 80113d6:	2b2e      	cmp	r3, #46	; 0x2e
 80113d8:	d10c      	bne.n	80113f4 <_svfiprintf_r+0x130>
 80113da:	7863      	ldrb	r3, [r4, #1]
 80113dc:	2b2a      	cmp	r3, #42	; 0x2a
 80113de:	d135      	bne.n	801144c <_svfiprintf_r+0x188>
 80113e0:	9b03      	ldr	r3, [sp, #12]
 80113e2:	1d1a      	adds	r2, r3, #4
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	9203      	str	r2, [sp, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	bfb8      	it	lt
 80113ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80113f0:	3402      	adds	r4, #2
 80113f2:	9305      	str	r3, [sp, #20]
 80113f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80114c0 <_svfiprintf_r+0x1fc>
 80113f8:	7821      	ldrb	r1, [r4, #0]
 80113fa:	2203      	movs	r2, #3
 80113fc:	4650      	mov	r0, sl
 80113fe:	f7ee ff37 	bl	8000270 <memchr>
 8011402:	b140      	cbz	r0, 8011416 <_svfiprintf_r+0x152>
 8011404:	2340      	movs	r3, #64	; 0x40
 8011406:	eba0 000a 	sub.w	r0, r0, sl
 801140a:	fa03 f000 	lsl.w	r0, r3, r0
 801140e:	9b04      	ldr	r3, [sp, #16]
 8011410:	4303      	orrs	r3, r0
 8011412:	3401      	adds	r4, #1
 8011414:	9304      	str	r3, [sp, #16]
 8011416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141a:	4826      	ldr	r0, [pc, #152]	; (80114b4 <_svfiprintf_r+0x1f0>)
 801141c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011420:	2206      	movs	r2, #6
 8011422:	f7ee ff25 	bl	8000270 <memchr>
 8011426:	2800      	cmp	r0, #0
 8011428:	d038      	beq.n	801149c <_svfiprintf_r+0x1d8>
 801142a:	4b23      	ldr	r3, [pc, #140]	; (80114b8 <_svfiprintf_r+0x1f4>)
 801142c:	bb1b      	cbnz	r3, 8011476 <_svfiprintf_r+0x1b2>
 801142e:	9b03      	ldr	r3, [sp, #12]
 8011430:	3307      	adds	r3, #7
 8011432:	f023 0307 	bic.w	r3, r3, #7
 8011436:	3308      	adds	r3, #8
 8011438:	9303      	str	r3, [sp, #12]
 801143a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801143c:	4433      	add	r3, r6
 801143e:	9309      	str	r3, [sp, #36]	; 0x24
 8011440:	e767      	b.n	8011312 <_svfiprintf_r+0x4e>
 8011442:	fb0c 3202 	mla	r2, ip, r2, r3
 8011446:	460c      	mov	r4, r1
 8011448:	2001      	movs	r0, #1
 801144a:	e7a5      	b.n	8011398 <_svfiprintf_r+0xd4>
 801144c:	2300      	movs	r3, #0
 801144e:	3401      	adds	r4, #1
 8011450:	9305      	str	r3, [sp, #20]
 8011452:	4619      	mov	r1, r3
 8011454:	f04f 0c0a 	mov.w	ip, #10
 8011458:	4620      	mov	r0, r4
 801145a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801145e:	3a30      	subs	r2, #48	; 0x30
 8011460:	2a09      	cmp	r2, #9
 8011462:	d903      	bls.n	801146c <_svfiprintf_r+0x1a8>
 8011464:	2b00      	cmp	r3, #0
 8011466:	d0c5      	beq.n	80113f4 <_svfiprintf_r+0x130>
 8011468:	9105      	str	r1, [sp, #20]
 801146a:	e7c3      	b.n	80113f4 <_svfiprintf_r+0x130>
 801146c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011470:	4604      	mov	r4, r0
 8011472:	2301      	movs	r3, #1
 8011474:	e7f0      	b.n	8011458 <_svfiprintf_r+0x194>
 8011476:	ab03      	add	r3, sp, #12
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	462a      	mov	r2, r5
 801147c:	4b0f      	ldr	r3, [pc, #60]	; (80114bc <_svfiprintf_r+0x1f8>)
 801147e:	a904      	add	r1, sp, #16
 8011480:	4638      	mov	r0, r7
 8011482:	f3af 8000 	nop.w
 8011486:	1c42      	adds	r2, r0, #1
 8011488:	4606      	mov	r6, r0
 801148a:	d1d6      	bne.n	801143a <_svfiprintf_r+0x176>
 801148c:	89ab      	ldrh	r3, [r5, #12]
 801148e:	065b      	lsls	r3, r3, #25
 8011490:	f53f af2c 	bmi.w	80112ec <_svfiprintf_r+0x28>
 8011494:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011496:	b01d      	add	sp, #116	; 0x74
 8011498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149c:	ab03      	add	r3, sp, #12
 801149e:	9300      	str	r3, [sp, #0]
 80114a0:	462a      	mov	r2, r5
 80114a2:	4b06      	ldr	r3, [pc, #24]	; (80114bc <_svfiprintf_r+0x1f8>)
 80114a4:	a904      	add	r1, sp, #16
 80114a6:	4638      	mov	r0, r7
 80114a8:	f000 f9d4 	bl	8011854 <_printf_i>
 80114ac:	e7eb      	b.n	8011486 <_svfiprintf_r+0x1c2>
 80114ae:	bf00      	nop
 80114b0:	0801aa50 	.word	0x0801aa50
 80114b4:	0801aa5a 	.word	0x0801aa5a
 80114b8:	00000000 	.word	0x00000000
 80114bc:	0801120d 	.word	0x0801120d
 80114c0:	0801aa56 	.word	0x0801aa56

080114c4 <__sfputc_r>:
 80114c4:	6893      	ldr	r3, [r2, #8]
 80114c6:	3b01      	subs	r3, #1
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	b410      	push	{r4}
 80114cc:	6093      	str	r3, [r2, #8]
 80114ce:	da08      	bge.n	80114e2 <__sfputc_r+0x1e>
 80114d0:	6994      	ldr	r4, [r2, #24]
 80114d2:	42a3      	cmp	r3, r4
 80114d4:	db01      	blt.n	80114da <__sfputc_r+0x16>
 80114d6:	290a      	cmp	r1, #10
 80114d8:	d103      	bne.n	80114e2 <__sfputc_r+0x1e>
 80114da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114de:	f7ff bd31 	b.w	8010f44 <__swbuf_r>
 80114e2:	6813      	ldr	r3, [r2, #0]
 80114e4:	1c58      	adds	r0, r3, #1
 80114e6:	6010      	str	r0, [r2, #0]
 80114e8:	7019      	strb	r1, [r3, #0]
 80114ea:	4608      	mov	r0, r1
 80114ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114f0:	4770      	bx	lr

080114f2 <__sfputs_r>:
 80114f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114f4:	4606      	mov	r6, r0
 80114f6:	460f      	mov	r7, r1
 80114f8:	4614      	mov	r4, r2
 80114fa:	18d5      	adds	r5, r2, r3
 80114fc:	42ac      	cmp	r4, r5
 80114fe:	d101      	bne.n	8011504 <__sfputs_r+0x12>
 8011500:	2000      	movs	r0, #0
 8011502:	e007      	b.n	8011514 <__sfputs_r+0x22>
 8011504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011508:	463a      	mov	r2, r7
 801150a:	4630      	mov	r0, r6
 801150c:	f7ff ffda 	bl	80114c4 <__sfputc_r>
 8011510:	1c43      	adds	r3, r0, #1
 8011512:	d1f3      	bne.n	80114fc <__sfputs_r+0xa>
 8011514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011518 <_vfiprintf_r>:
 8011518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801151c:	460d      	mov	r5, r1
 801151e:	b09d      	sub	sp, #116	; 0x74
 8011520:	4614      	mov	r4, r2
 8011522:	4698      	mov	r8, r3
 8011524:	4606      	mov	r6, r0
 8011526:	b118      	cbz	r0, 8011530 <_vfiprintf_r+0x18>
 8011528:	6983      	ldr	r3, [r0, #24]
 801152a:	b90b      	cbnz	r3, 8011530 <_vfiprintf_r+0x18>
 801152c:	f7ff fa3e 	bl	80109ac <__sinit>
 8011530:	4b89      	ldr	r3, [pc, #548]	; (8011758 <_vfiprintf_r+0x240>)
 8011532:	429d      	cmp	r5, r3
 8011534:	d11b      	bne.n	801156e <_vfiprintf_r+0x56>
 8011536:	6875      	ldr	r5, [r6, #4]
 8011538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801153a:	07d9      	lsls	r1, r3, #31
 801153c:	d405      	bmi.n	801154a <_vfiprintf_r+0x32>
 801153e:	89ab      	ldrh	r3, [r5, #12]
 8011540:	059a      	lsls	r2, r3, #22
 8011542:	d402      	bmi.n	801154a <_vfiprintf_r+0x32>
 8011544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011546:	f7ff faf4 	bl	8010b32 <__retarget_lock_acquire_recursive>
 801154a:	89ab      	ldrh	r3, [r5, #12]
 801154c:	071b      	lsls	r3, r3, #28
 801154e:	d501      	bpl.n	8011554 <_vfiprintf_r+0x3c>
 8011550:	692b      	ldr	r3, [r5, #16]
 8011552:	b9eb      	cbnz	r3, 8011590 <_vfiprintf_r+0x78>
 8011554:	4629      	mov	r1, r5
 8011556:	4630      	mov	r0, r6
 8011558:	f7ff fd58 	bl	801100c <__swsetup_r>
 801155c:	b1c0      	cbz	r0, 8011590 <_vfiprintf_r+0x78>
 801155e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011560:	07dc      	lsls	r4, r3, #31
 8011562:	d50e      	bpl.n	8011582 <_vfiprintf_r+0x6a>
 8011564:	f04f 30ff 	mov.w	r0, #4294967295
 8011568:	b01d      	add	sp, #116	; 0x74
 801156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801156e:	4b7b      	ldr	r3, [pc, #492]	; (801175c <_vfiprintf_r+0x244>)
 8011570:	429d      	cmp	r5, r3
 8011572:	d101      	bne.n	8011578 <_vfiprintf_r+0x60>
 8011574:	68b5      	ldr	r5, [r6, #8]
 8011576:	e7df      	b.n	8011538 <_vfiprintf_r+0x20>
 8011578:	4b79      	ldr	r3, [pc, #484]	; (8011760 <_vfiprintf_r+0x248>)
 801157a:	429d      	cmp	r5, r3
 801157c:	bf08      	it	eq
 801157e:	68f5      	ldreq	r5, [r6, #12]
 8011580:	e7da      	b.n	8011538 <_vfiprintf_r+0x20>
 8011582:	89ab      	ldrh	r3, [r5, #12]
 8011584:	0598      	lsls	r0, r3, #22
 8011586:	d4ed      	bmi.n	8011564 <_vfiprintf_r+0x4c>
 8011588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801158a:	f7ff fad3 	bl	8010b34 <__retarget_lock_release_recursive>
 801158e:	e7e9      	b.n	8011564 <_vfiprintf_r+0x4c>
 8011590:	2300      	movs	r3, #0
 8011592:	9309      	str	r3, [sp, #36]	; 0x24
 8011594:	2320      	movs	r3, #32
 8011596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801159a:	f8cd 800c 	str.w	r8, [sp, #12]
 801159e:	2330      	movs	r3, #48	; 0x30
 80115a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011764 <_vfiprintf_r+0x24c>
 80115a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115a8:	f04f 0901 	mov.w	r9, #1
 80115ac:	4623      	mov	r3, r4
 80115ae:	469a      	mov	sl, r3
 80115b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115b4:	b10a      	cbz	r2, 80115ba <_vfiprintf_r+0xa2>
 80115b6:	2a25      	cmp	r2, #37	; 0x25
 80115b8:	d1f9      	bne.n	80115ae <_vfiprintf_r+0x96>
 80115ba:	ebba 0b04 	subs.w	fp, sl, r4
 80115be:	d00b      	beq.n	80115d8 <_vfiprintf_r+0xc0>
 80115c0:	465b      	mov	r3, fp
 80115c2:	4622      	mov	r2, r4
 80115c4:	4629      	mov	r1, r5
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff ff93 	bl	80114f2 <__sfputs_r>
 80115cc:	3001      	adds	r0, #1
 80115ce:	f000 80aa 	beq.w	8011726 <_vfiprintf_r+0x20e>
 80115d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115d4:	445a      	add	r2, fp
 80115d6:	9209      	str	r2, [sp, #36]	; 0x24
 80115d8:	f89a 3000 	ldrb.w	r3, [sl]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f000 80a2 	beq.w	8011726 <_vfiprintf_r+0x20e>
 80115e2:	2300      	movs	r3, #0
 80115e4:	f04f 32ff 	mov.w	r2, #4294967295
 80115e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115ec:	f10a 0a01 	add.w	sl, sl, #1
 80115f0:	9304      	str	r3, [sp, #16]
 80115f2:	9307      	str	r3, [sp, #28]
 80115f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115f8:	931a      	str	r3, [sp, #104]	; 0x68
 80115fa:	4654      	mov	r4, sl
 80115fc:	2205      	movs	r2, #5
 80115fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011602:	4858      	ldr	r0, [pc, #352]	; (8011764 <_vfiprintf_r+0x24c>)
 8011604:	f7ee fe34 	bl	8000270 <memchr>
 8011608:	9a04      	ldr	r2, [sp, #16]
 801160a:	b9d8      	cbnz	r0, 8011644 <_vfiprintf_r+0x12c>
 801160c:	06d1      	lsls	r1, r2, #27
 801160e:	bf44      	itt	mi
 8011610:	2320      	movmi	r3, #32
 8011612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011616:	0713      	lsls	r3, r2, #28
 8011618:	bf44      	itt	mi
 801161a:	232b      	movmi	r3, #43	; 0x2b
 801161c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011620:	f89a 3000 	ldrb.w	r3, [sl]
 8011624:	2b2a      	cmp	r3, #42	; 0x2a
 8011626:	d015      	beq.n	8011654 <_vfiprintf_r+0x13c>
 8011628:	9a07      	ldr	r2, [sp, #28]
 801162a:	4654      	mov	r4, sl
 801162c:	2000      	movs	r0, #0
 801162e:	f04f 0c0a 	mov.w	ip, #10
 8011632:	4621      	mov	r1, r4
 8011634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011638:	3b30      	subs	r3, #48	; 0x30
 801163a:	2b09      	cmp	r3, #9
 801163c:	d94e      	bls.n	80116dc <_vfiprintf_r+0x1c4>
 801163e:	b1b0      	cbz	r0, 801166e <_vfiprintf_r+0x156>
 8011640:	9207      	str	r2, [sp, #28]
 8011642:	e014      	b.n	801166e <_vfiprintf_r+0x156>
 8011644:	eba0 0308 	sub.w	r3, r0, r8
 8011648:	fa09 f303 	lsl.w	r3, r9, r3
 801164c:	4313      	orrs	r3, r2
 801164e:	9304      	str	r3, [sp, #16]
 8011650:	46a2      	mov	sl, r4
 8011652:	e7d2      	b.n	80115fa <_vfiprintf_r+0xe2>
 8011654:	9b03      	ldr	r3, [sp, #12]
 8011656:	1d19      	adds	r1, r3, #4
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	9103      	str	r1, [sp, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	bfbb      	ittet	lt
 8011660:	425b      	neglt	r3, r3
 8011662:	f042 0202 	orrlt.w	r2, r2, #2
 8011666:	9307      	strge	r3, [sp, #28]
 8011668:	9307      	strlt	r3, [sp, #28]
 801166a:	bfb8      	it	lt
 801166c:	9204      	strlt	r2, [sp, #16]
 801166e:	7823      	ldrb	r3, [r4, #0]
 8011670:	2b2e      	cmp	r3, #46	; 0x2e
 8011672:	d10c      	bne.n	801168e <_vfiprintf_r+0x176>
 8011674:	7863      	ldrb	r3, [r4, #1]
 8011676:	2b2a      	cmp	r3, #42	; 0x2a
 8011678:	d135      	bne.n	80116e6 <_vfiprintf_r+0x1ce>
 801167a:	9b03      	ldr	r3, [sp, #12]
 801167c:	1d1a      	adds	r2, r3, #4
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	9203      	str	r2, [sp, #12]
 8011682:	2b00      	cmp	r3, #0
 8011684:	bfb8      	it	lt
 8011686:	f04f 33ff 	movlt.w	r3, #4294967295
 801168a:	3402      	adds	r4, #2
 801168c:	9305      	str	r3, [sp, #20]
 801168e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011774 <_vfiprintf_r+0x25c>
 8011692:	7821      	ldrb	r1, [r4, #0]
 8011694:	2203      	movs	r2, #3
 8011696:	4650      	mov	r0, sl
 8011698:	f7ee fdea 	bl	8000270 <memchr>
 801169c:	b140      	cbz	r0, 80116b0 <_vfiprintf_r+0x198>
 801169e:	2340      	movs	r3, #64	; 0x40
 80116a0:	eba0 000a 	sub.w	r0, r0, sl
 80116a4:	fa03 f000 	lsl.w	r0, r3, r0
 80116a8:	9b04      	ldr	r3, [sp, #16]
 80116aa:	4303      	orrs	r3, r0
 80116ac:	3401      	adds	r4, #1
 80116ae:	9304      	str	r3, [sp, #16]
 80116b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116b4:	482c      	ldr	r0, [pc, #176]	; (8011768 <_vfiprintf_r+0x250>)
 80116b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116ba:	2206      	movs	r2, #6
 80116bc:	f7ee fdd8 	bl	8000270 <memchr>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	d03f      	beq.n	8011744 <_vfiprintf_r+0x22c>
 80116c4:	4b29      	ldr	r3, [pc, #164]	; (801176c <_vfiprintf_r+0x254>)
 80116c6:	bb1b      	cbnz	r3, 8011710 <_vfiprintf_r+0x1f8>
 80116c8:	9b03      	ldr	r3, [sp, #12]
 80116ca:	3307      	adds	r3, #7
 80116cc:	f023 0307 	bic.w	r3, r3, #7
 80116d0:	3308      	adds	r3, #8
 80116d2:	9303      	str	r3, [sp, #12]
 80116d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116d6:	443b      	add	r3, r7
 80116d8:	9309      	str	r3, [sp, #36]	; 0x24
 80116da:	e767      	b.n	80115ac <_vfiprintf_r+0x94>
 80116dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80116e0:	460c      	mov	r4, r1
 80116e2:	2001      	movs	r0, #1
 80116e4:	e7a5      	b.n	8011632 <_vfiprintf_r+0x11a>
 80116e6:	2300      	movs	r3, #0
 80116e8:	3401      	adds	r4, #1
 80116ea:	9305      	str	r3, [sp, #20]
 80116ec:	4619      	mov	r1, r3
 80116ee:	f04f 0c0a 	mov.w	ip, #10
 80116f2:	4620      	mov	r0, r4
 80116f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116f8:	3a30      	subs	r2, #48	; 0x30
 80116fa:	2a09      	cmp	r2, #9
 80116fc:	d903      	bls.n	8011706 <_vfiprintf_r+0x1ee>
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d0c5      	beq.n	801168e <_vfiprintf_r+0x176>
 8011702:	9105      	str	r1, [sp, #20]
 8011704:	e7c3      	b.n	801168e <_vfiprintf_r+0x176>
 8011706:	fb0c 2101 	mla	r1, ip, r1, r2
 801170a:	4604      	mov	r4, r0
 801170c:	2301      	movs	r3, #1
 801170e:	e7f0      	b.n	80116f2 <_vfiprintf_r+0x1da>
 8011710:	ab03      	add	r3, sp, #12
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	462a      	mov	r2, r5
 8011716:	4b16      	ldr	r3, [pc, #88]	; (8011770 <_vfiprintf_r+0x258>)
 8011718:	a904      	add	r1, sp, #16
 801171a:	4630      	mov	r0, r6
 801171c:	f3af 8000 	nop.w
 8011720:	4607      	mov	r7, r0
 8011722:	1c78      	adds	r0, r7, #1
 8011724:	d1d6      	bne.n	80116d4 <_vfiprintf_r+0x1bc>
 8011726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011728:	07d9      	lsls	r1, r3, #31
 801172a:	d405      	bmi.n	8011738 <_vfiprintf_r+0x220>
 801172c:	89ab      	ldrh	r3, [r5, #12]
 801172e:	059a      	lsls	r2, r3, #22
 8011730:	d402      	bmi.n	8011738 <_vfiprintf_r+0x220>
 8011732:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011734:	f7ff f9fe 	bl	8010b34 <__retarget_lock_release_recursive>
 8011738:	89ab      	ldrh	r3, [r5, #12]
 801173a:	065b      	lsls	r3, r3, #25
 801173c:	f53f af12 	bmi.w	8011564 <_vfiprintf_r+0x4c>
 8011740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011742:	e711      	b.n	8011568 <_vfiprintf_r+0x50>
 8011744:	ab03      	add	r3, sp, #12
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	462a      	mov	r2, r5
 801174a:	4b09      	ldr	r3, [pc, #36]	; (8011770 <_vfiprintf_r+0x258>)
 801174c:	a904      	add	r1, sp, #16
 801174e:	4630      	mov	r0, r6
 8011750:	f000 f880 	bl	8011854 <_printf_i>
 8011754:	e7e4      	b.n	8011720 <_vfiprintf_r+0x208>
 8011756:	bf00      	nop
 8011758:	0801aa0c 	.word	0x0801aa0c
 801175c:	0801aa2c 	.word	0x0801aa2c
 8011760:	0801a9ec 	.word	0x0801a9ec
 8011764:	0801aa50 	.word	0x0801aa50
 8011768:	0801aa5a 	.word	0x0801aa5a
 801176c:	00000000 	.word	0x00000000
 8011770:	080114f3 	.word	0x080114f3
 8011774:	0801aa56 	.word	0x0801aa56

08011778 <_printf_common>:
 8011778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801177c:	4616      	mov	r6, r2
 801177e:	4699      	mov	r9, r3
 8011780:	688a      	ldr	r2, [r1, #8]
 8011782:	690b      	ldr	r3, [r1, #16]
 8011784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011788:	4293      	cmp	r3, r2
 801178a:	bfb8      	it	lt
 801178c:	4613      	movlt	r3, r2
 801178e:	6033      	str	r3, [r6, #0]
 8011790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011794:	4607      	mov	r7, r0
 8011796:	460c      	mov	r4, r1
 8011798:	b10a      	cbz	r2, 801179e <_printf_common+0x26>
 801179a:	3301      	adds	r3, #1
 801179c:	6033      	str	r3, [r6, #0]
 801179e:	6823      	ldr	r3, [r4, #0]
 80117a0:	0699      	lsls	r1, r3, #26
 80117a2:	bf42      	ittt	mi
 80117a4:	6833      	ldrmi	r3, [r6, #0]
 80117a6:	3302      	addmi	r3, #2
 80117a8:	6033      	strmi	r3, [r6, #0]
 80117aa:	6825      	ldr	r5, [r4, #0]
 80117ac:	f015 0506 	ands.w	r5, r5, #6
 80117b0:	d106      	bne.n	80117c0 <_printf_common+0x48>
 80117b2:	f104 0a19 	add.w	sl, r4, #25
 80117b6:	68e3      	ldr	r3, [r4, #12]
 80117b8:	6832      	ldr	r2, [r6, #0]
 80117ba:	1a9b      	subs	r3, r3, r2
 80117bc:	42ab      	cmp	r3, r5
 80117be:	dc26      	bgt.n	801180e <_printf_common+0x96>
 80117c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80117c4:	1e13      	subs	r3, r2, #0
 80117c6:	6822      	ldr	r2, [r4, #0]
 80117c8:	bf18      	it	ne
 80117ca:	2301      	movne	r3, #1
 80117cc:	0692      	lsls	r2, r2, #26
 80117ce:	d42b      	bmi.n	8011828 <_printf_common+0xb0>
 80117d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80117d4:	4649      	mov	r1, r9
 80117d6:	4638      	mov	r0, r7
 80117d8:	47c0      	blx	r8
 80117da:	3001      	adds	r0, #1
 80117dc:	d01e      	beq.n	801181c <_printf_common+0xa4>
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	68e5      	ldr	r5, [r4, #12]
 80117e2:	6832      	ldr	r2, [r6, #0]
 80117e4:	f003 0306 	and.w	r3, r3, #6
 80117e8:	2b04      	cmp	r3, #4
 80117ea:	bf08      	it	eq
 80117ec:	1aad      	subeq	r5, r5, r2
 80117ee:	68a3      	ldr	r3, [r4, #8]
 80117f0:	6922      	ldr	r2, [r4, #16]
 80117f2:	bf0c      	ite	eq
 80117f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80117f8:	2500      	movne	r5, #0
 80117fa:	4293      	cmp	r3, r2
 80117fc:	bfc4      	itt	gt
 80117fe:	1a9b      	subgt	r3, r3, r2
 8011800:	18ed      	addgt	r5, r5, r3
 8011802:	2600      	movs	r6, #0
 8011804:	341a      	adds	r4, #26
 8011806:	42b5      	cmp	r5, r6
 8011808:	d11a      	bne.n	8011840 <_printf_common+0xc8>
 801180a:	2000      	movs	r0, #0
 801180c:	e008      	b.n	8011820 <_printf_common+0xa8>
 801180e:	2301      	movs	r3, #1
 8011810:	4652      	mov	r2, sl
 8011812:	4649      	mov	r1, r9
 8011814:	4638      	mov	r0, r7
 8011816:	47c0      	blx	r8
 8011818:	3001      	adds	r0, #1
 801181a:	d103      	bne.n	8011824 <_printf_common+0xac>
 801181c:	f04f 30ff 	mov.w	r0, #4294967295
 8011820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011824:	3501      	adds	r5, #1
 8011826:	e7c6      	b.n	80117b6 <_printf_common+0x3e>
 8011828:	18e1      	adds	r1, r4, r3
 801182a:	1c5a      	adds	r2, r3, #1
 801182c:	2030      	movs	r0, #48	; 0x30
 801182e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011832:	4422      	add	r2, r4
 8011834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801183c:	3302      	adds	r3, #2
 801183e:	e7c7      	b.n	80117d0 <_printf_common+0x58>
 8011840:	2301      	movs	r3, #1
 8011842:	4622      	mov	r2, r4
 8011844:	4649      	mov	r1, r9
 8011846:	4638      	mov	r0, r7
 8011848:	47c0      	blx	r8
 801184a:	3001      	adds	r0, #1
 801184c:	d0e6      	beq.n	801181c <_printf_common+0xa4>
 801184e:	3601      	adds	r6, #1
 8011850:	e7d9      	b.n	8011806 <_printf_common+0x8e>
	...

08011854 <_printf_i>:
 8011854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011858:	460c      	mov	r4, r1
 801185a:	4691      	mov	r9, r2
 801185c:	7e27      	ldrb	r7, [r4, #24]
 801185e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011860:	2f78      	cmp	r7, #120	; 0x78
 8011862:	4680      	mov	r8, r0
 8011864:	469a      	mov	sl, r3
 8011866:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801186a:	d807      	bhi.n	801187c <_printf_i+0x28>
 801186c:	2f62      	cmp	r7, #98	; 0x62
 801186e:	d80a      	bhi.n	8011886 <_printf_i+0x32>
 8011870:	2f00      	cmp	r7, #0
 8011872:	f000 80d8 	beq.w	8011a26 <_printf_i+0x1d2>
 8011876:	2f58      	cmp	r7, #88	; 0x58
 8011878:	f000 80a3 	beq.w	80119c2 <_printf_i+0x16e>
 801187c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011884:	e03a      	b.n	80118fc <_printf_i+0xa8>
 8011886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801188a:	2b15      	cmp	r3, #21
 801188c:	d8f6      	bhi.n	801187c <_printf_i+0x28>
 801188e:	a001      	add	r0, pc, #4	; (adr r0, 8011894 <_printf_i+0x40>)
 8011890:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011894:	080118ed 	.word	0x080118ed
 8011898:	08011901 	.word	0x08011901
 801189c:	0801187d 	.word	0x0801187d
 80118a0:	0801187d 	.word	0x0801187d
 80118a4:	0801187d 	.word	0x0801187d
 80118a8:	0801187d 	.word	0x0801187d
 80118ac:	08011901 	.word	0x08011901
 80118b0:	0801187d 	.word	0x0801187d
 80118b4:	0801187d 	.word	0x0801187d
 80118b8:	0801187d 	.word	0x0801187d
 80118bc:	0801187d 	.word	0x0801187d
 80118c0:	08011a0d 	.word	0x08011a0d
 80118c4:	08011931 	.word	0x08011931
 80118c8:	080119ef 	.word	0x080119ef
 80118cc:	0801187d 	.word	0x0801187d
 80118d0:	0801187d 	.word	0x0801187d
 80118d4:	08011a2f 	.word	0x08011a2f
 80118d8:	0801187d 	.word	0x0801187d
 80118dc:	08011931 	.word	0x08011931
 80118e0:	0801187d 	.word	0x0801187d
 80118e4:	0801187d 	.word	0x0801187d
 80118e8:	080119f7 	.word	0x080119f7
 80118ec:	680b      	ldr	r3, [r1, #0]
 80118ee:	1d1a      	adds	r2, r3, #4
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	600a      	str	r2, [r1, #0]
 80118f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80118f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80118fc:	2301      	movs	r3, #1
 80118fe:	e0a3      	b.n	8011a48 <_printf_i+0x1f4>
 8011900:	6825      	ldr	r5, [r4, #0]
 8011902:	6808      	ldr	r0, [r1, #0]
 8011904:	062e      	lsls	r6, r5, #24
 8011906:	f100 0304 	add.w	r3, r0, #4
 801190a:	d50a      	bpl.n	8011922 <_printf_i+0xce>
 801190c:	6805      	ldr	r5, [r0, #0]
 801190e:	600b      	str	r3, [r1, #0]
 8011910:	2d00      	cmp	r5, #0
 8011912:	da03      	bge.n	801191c <_printf_i+0xc8>
 8011914:	232d      	movs	r3, #45	; 0x2d
 8011916:	426d      	negs	r5, r5
 8011918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801191c:	485e      	ldr	r0, [pc, #376]	; (8011a98 <_printf_i+0x244>)
 801191e:	230a      	movs	r3, #10
 8011920:	e019      	b.n	8011956 <_printf_i+0x102>
 8011922:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011926:	6805      	ldr	r5, [r0, #0]
 8011928:	600b      	str	r3, [r1, #0]
 801192a:	bf18      	it	ne
 801192c:	b22d      	sxthne	r5, r5
 801192e:	e7ef      	b.n	8011910 <_printf_i+0xbc>
 8011930:	680b      	ldr	r3, [r1, #0]
 8011932:	6825      	ldr	r5, [r4, #0]
 8011934:	1d18      	adds	r0, r3, #4
 8011936:	6008      	str	r0, [r1, #0]
 8011938:	0628      	lsls	r0, r5, #24
 801193a:	d501      	bpl.n	8011940 <_printf_i+0xec>
 801193c:	681d      	ldr	r5, [r3, #0]
 801193e:	e002      	b.n	8011946 <_printf_i+0xf2>
 8011940:	0669      	lsls	r1, r5, #25
 8011942:	d5fb      	bpl.n	801193c <_printf_i+0xe8>
 8011944:	881d      	ldrh	r5, [r3, #0]
 8011946:	4854      	ldr	r0, [pc, #336]	; (8011a98 <_printf_i+0x244>)
 8011948:	2f6f      	cmp	r7, #111	; 0x6f
 801194a:	bf0c      	ite	eq
 801194c:	2308      	moveq	r3, #8
 801194e:	230a      	movne	r3, #10
 8011950:	2100      	movs	r1, #0
 8011952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011956:	6866      	ldr	r6, [r4, #4]
 8011958:	60a6      	str	r6, [r4, #8]
 801195a:	2e00      	cmp	r6, #0
 801195c:	bfa2      	ittt	ge
 801195e:	6821      	ldrge	r1, [r4, #0]
 8011960:	f021 0104 	bicge.w	r1, r1, #4
 8011964:	6021      	strge	r1, [r4, #0]
 8011966:	b90d      	cbnz	r5, 801196c <_printf_i+0x118>
 8011968:	2e00      	cmp	r6, #0
 801196a:	d04d      	beq.n	8011a08 <_printf_i+0x1b4>
 801196c:	4616      	mov	r6, r2
 801196e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011972:	fb03 5711 	mls	r7, r3, r1, r5
 8011976:	5dc7      	ldrb	r7, [r0, r7]
 8011978:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801197c:	462f      	mov	r7, r5
 801197e:	42bb      	cmp	r3, r7
 8011980:	460d      	mov	r5, r1
 8011982:	d9f4      	bls.n	801196e <_printf_i+0x11a>
 8011984:	2b08      	cmp	r3, #8
 8011986:	d10b      	bne.n	80119a0 <_printf_i+0x14c>
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	07df      	lsls	r7, r3, #31
 801198c:	d508      	bpl.n	80119a0 <_printf_i+0x14c>
 801198e:	6923      	ldr	r3, [r4, #16]
 8011990:	6861      	ldr	r1, [r4, #4]
 8011992:	4299      	cmp	r1, r3
 8011994:	bfde      	ittt	le
 8011996:	2330      	movle	r3, #48	; 0x30
 8011998:	f806 3c01 	strble.w	r3, [r6, #-1]
 801199c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80119a0:	1b92      	subs	r2, r2, r6
 80119a2:	6122      	str	r2, [r4, #16]
 80119a4:	f8cd a000 	str.w	sl, [sp]
 80119a8:	464b      	mov	r3, r9
 80119aa:	aa03      	add	r2, sp, #12
 80119ac:	4621      	mov	r1, r4
 80119ae:	4640      	mov	r0, r8
 80119b0:	f7ff fee2 	bl	8011778 <_printf_common>
 80119b4:	3001      	adds	r0, #1
 80119b6:	d14c      	bne.n	8011a52 <_printf_i+0x1fe>
 80119b8:	f04f 30ff 	mov.w	r0, #4294967295
 80119bc:	b004      	add	sp, #16
 80119be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c2:	4835      	ldr	r0, [pc, #212]	; (8011a98 <_printf_i+0x244>)
 80119c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80119c8:	6823      	ldr	r3, [r4, #0]
 80119ca:	680e      	ldr	r6, [r1, #0]
 80119cc:	061f      	lsls	r7, r3, #24
 80119ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80119d2:	600e      	str	r6, [r1, #0]
 80119d4:	d514      	bpl.n	8011a00 <_printf_i+0x1ac>
 80119d6:	07d9      	lsls	r1, r3, #31
 80119d8:	bf44      	itt	mi
 80119da:	f043 0320 	orrmi.w	r3, r3, #32
 80119de:	6023      	strmi	r3, [r4, #0]
 80119e0:	b91d      	cbnz	r5, 80119ea <_printf_i+0x196>
 80119e2:	6823      	ldr	r3, [r4, #0]
 80119e4:	f023 0320 	bic.w	r3, r3, #32
 80119e8:	6023      	str	r3, [r4, #0]
 80119ea:	2310      	movs	r3, #16
 80119ec:	e7b0      	b.n	8011950 <_printf_i+0xfc>
 80119ee:	6823      	ldr	r3, [r4, #0]
 80119f0:	f043 0320 	orr.w	r3, r3, #32
 80119f4:	6023      	str	r3, [r4, #0]
 80119f6:	2378      	movs	r3, #120	; 0x78
 80119f8:	4828      	ldr	r0, [pc, #160]	; (8011a9c <_printf_i+0x248>)
 80119fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80119fe:	e7e3      	b.n	80119c8 <_printf_i+0x174>
 8011a00:	065e      	lsls	r6, r3, #25
 8011a02:	bf48      	it	mi
 8011a04:	b2ad      	uxthmi	r5, r5
 8011a06:	e7e6      	b.n	80119d6 <_printf_i+0x182>
 8011a08:	4616      	mov	r6, r2
 8011a0a:	e7bb      	b.n	8011984 <_printf_i+0x130>
 8011a0c:	680b      	ldr	r3, [r1, #0]
 8011a0e:	6826      	ldr	r6, [r4, #0]
 8011a10:	6960      	ldr	r0, [r4, #20]
 8011a12:	1d1d      	adds	r5, r3, #4
 8011a14:	600d      	str	r5, [r1, #0]
 8011a16:	0635      	lsls	r5, r6, #24
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	d501      	bpl.n	8011a20 <_printf_i+0x1cc>
 8011a1c:	6018      	str	r0, [r3, #0]
 8011a1e:	e002      	b.n	8011a26 <_printf_i+0x1d2>
 8011a20:	0671      	lsls	r1, r6, #25
 8011a22:	d5fb      	bpl.n	8011a1c <_printf_i+0x1c8>
 8011a24:	8018      	strh	r0, [r3, #0]
 8011a26:	2300      	movs	r3, #0
 8011a28:	6123      	str	r3, [r4, #16]
 8011a2a:	4616      	mov	r6, r2
 8011a2c:	e7ba      	b.n	80119a4 <_printf_i+0x150>
 8011a2e:	680b      	ldr	r3, [r1, #0]
 8011a30:	1d1a      	adds	r2, r3, #4
 8011a32:	600a      	str	r2, [r1, #0]
 8011a34:	681e      	ldr	r6, [r3, #0]
 8011a36:	6862      	ldr	r2, [r4, #4]
 8011a38:	2100      	movs	r1, #0
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	f7ee fc18 	bl	8000270 <memchr>
 8011a40:	b108      	cbz	r0, 8011a46 <_printf_i+0x1f2>
 8011a42:	1b80      	subs	r0, r0, r6
 8011a44:	6060      	str	r0, [r4, #4]
 8011a46:	6863      	ldr	r3, [r4, #4]
 8011a48:	6123      	str	r3, [r4, #16]
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a50:	e7a8      	b.n	80119a4 <_printf_i+0x150>
 8011a52:	6923      	ldr	r3, [r4, #16]
 8011a54:	4632      	mov	r2, r6
 8011a56:	4649      	mov	r1, r9
 8011a58:	4640      	mov	r0, r8
 8011a5a:	47d0      	blx	sl
 8011a5c:	3001      	adds	r0, #1
 8011a5e:	d0ab      	beq.n	80119b8 <_printf_i+0x164>
 8011a60:	6823      	ldr	r3, [r4, #0]
 8011a62:	079b      	lsls	r3, r3, #30
 8011a64:	d413      	bmi.n	8011a8e <_printf_i+0x23a>
 8011a66:	68e0      	ldr	r0, [r4, #12]
 8011a68:	9b03      	ldr	r3, [sp, #12]
 8011a6a:	4298      	cmp	r0, r3
 8011a6c:	bfb8      	it	lt
 8011a6e:	4618      	movlt	r0, r3
 8011a70:	e7a4      	b.n	80119bc <_printf_i+0x168>
 8011a72:	2301      	movs	r3, #1
 8011a74:	4632      	mov	r2, r6
 8011a76:	4649      	mov	r1, r9
 8011a78:	4640      	mov	r0, r8
 8011a7a:	47d0      	blx	sl
 8011a7c:	3001      	adds	r0, #1
 8011a7e:	d09b      	beq.n	80119b8 <_printf_i+0x164>
 8011a80:	3501      	adds	r5, #1
 8011a82:	68e3      	ldr	r3, [r4, #12]
 8011a84:	9903      	ldr	r1, [sp, #12]
 8011a86:	1a5b      	subs	r3, r3, r1
 8011a88:	42ab      	cmp	r3, r5
 8011a8a:	dcf2      	bgt.n	8011a72 <_printf_i+0x21e>
 8011a8c:	e7eb      	b.n	8011a66 <_printf_i+0x212>
 8011a8e:	2500      	movs	r5, #0
 8011a90:	f104 0619 	add.w	r6, r4, #25
 8011a94:	e7f5      	b.n	8011a82 <_printf_i+0x22e>
 8011a96:	bf00      	nop
 8011a98:	0801aa61 	.word	0x0801aa61
 8011a9c:	0801aa72 	.word	0x0801aa72

08011aa0 <_read_r>:
 8011aa0:	b538      	push	{r3, r4, r5, lr}
 8011aa2:	4d07      	ldr	r5, [pc, #28]	; (8011ac0 <_read_r+0x20>)
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	4608      	mov	r0, r1
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	2200      	movs	r2, #0
 8011aac:	602a      	str	r2, [r5, #0]
 8011aae:	461a      	mov	r2, r3
 8011ab0:	f7ef fc8c 	bl	80013cc <_read>
 8011ab4:	1c43      	adds	r3, r0, #1
 8011ab6:	d102      	bne.n	8011abe <_read_r+0x1e>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	b103      	cbz	r3, 8011abe <_read_r+0x1e>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	bd38      	pop	{r3, r4, r5, pc}
 8011ac0:	20000688 	.word	0x20000688

08011ac4 <_fstat_r>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4d07      	ldr	r5, [pc, #28]	; (8011ae4 <_fstat_r+0x20>)
 8011ac8:	2300      	movs	r3, #0
 8011aca:	4604      	mov	r4, r0
 8011acc:	4608      	mov	r0, r1
 8011ace:	4611      	mov	r1, r2
 8011ad0:	602b      	str	r3, [r5, #0]
 8011ad2:	f7ef fcc0 	bl	8001456 <_fstat>
 8011ad6:	1c43      	adds	r3, r0, #1
 8011ad8:	d102      	bne.n	8011ae0 <_fstat_r+0x1c>
 8011ada:	682b      	ldr	r3, [r5, #0]
 8011adc:	b103      	cbz	r3, 8011ae0 <_fstat_r+0x1c>
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	bd38      	pop	{r3, r4, r5, pc}
 8011ae2:	bf00      	nop
 8011ae4:	20000688 	.word	0x20000688

08011ae8 <_isatty_r>:
 8011ae8:	b538      	push	{r3, r4, r5, lr}
 8011aea:	4d06      	ldr	r5, [pc, #24]	; (8011b04 <_isatty_r+0x1c>)
 8011aec:	2300      	movs	r3, #0
 8011aee:	4604      	mov	r4, r0
 8011af0:	4608      	mov	r0, r1
 8011af2:	602b      	str	r3, [r5, #0]
 8011af4:	f7ef fcbf 	bl	8001476 <_isatty>
 8011af8:	1c43      	adds	r3, r0, #1
 8011afa:	d102      	bne.n	8011b02 <_isatty_r+0x1a>
 8011afc:	682b      	ldr	r3, [r5, #0]
 8011afe:	b103      	cbz	r3, 8011b02 <_isatty_r+0x1a>
 8011b00:	6023      	str	r3, [r4, #0]
 8011b02:	bd38      	pop	{r3, r4, r5, pc}
 8011b04:	20000688 	.word	0x20000688

08011b08 <_realloc_r>:
 8011b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b0a:	4607      	mov	r7, r0
 8011b0c:	4614      	mov	r4, r2
 8011b0e:	460e      	mov	r6, r1
 8011b10:	b921      	cbnz	r1, 8011b1c <_realloc_r+0x14>
 8011b12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011b16:	4611      	mov	r1, r2
 8011b18:	f7ff b89e 	b.w	8010c58 <_malloc_r>
 8011b1c:	b922      	cbnz	r2, 8011b28 <_realloc_r+0x20>
 8011b1e:	f7ff f84b 	bl	8010bb8 <_free_r>
 8011b22:	4625      	mov	r5, r4
 8011b24:	4628      	mov	r0, r5
 8011b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b28:	f000 f814 	bl	8011b54 <_malloc_usable_size_r>
 8011b2c:	42a0      	cmp	r0, r4
 8011b2e:	d20f      	bcs.n	8011b50 <_realloc_r+0x48>
 8011b30:	4621      	mov	r1, r4
 8011b32:	4638      	mov	r0, r7
 8011b34:	f7ff f890 	bl	8010c58 <_malloc_r>
 8011b38:	4605      	mov	r5, r0
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	d0f2      	beq.n	8011b24 <_realloc_r+0x1c>
 8011b3e:	4631      	mov	r1, r6
 8011b40:	4622      	mov	r2, r4
 8011b42:	f7ff f809 	bl	8010b58 <memcpy>
 8011b46:	4631      	mov	r1, r6
 8011b48:	4638      	mov	r0, r7
 8011b4a:	f7ff f835 	bl	8010bb8 <_free_r>
 8011b4e:	e7e9      	b.n	8011b24 <_realloc_r+0x1c>
 8011b50:	4635      	mov	r5, r6
 8011b52:	e7e7      	b.n	8011b24 <_realloc_r+0x1c>

08011b54 <_malloc_usable_size_r>:
 8011b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b58:	1f18      	subs	r0, r3, #4
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	bfbc      	itt	lt
 8011b5e:	580b      	ldrlt	r3, [r1, r0]
 8011b60:	18c0      	addlt	r0, r0, r3
 8011b62:	4770      	bx	lr

08011b64 <fmaxf>:
 8011b64:	b508      	push	{r3, lr}
 8011b66:	ed2d 8b02 	vpush	{d8}
 8011b6a:	eeb0 8a40 	vmov.f32	s16, s0
 8011b6e:	eef0 8a60 	vmov.f32	s17, s1
 8011b72:	f000 f813 	bl	8011b9c <__fpclassifyf>
 8011b76:	b148      	cbz	r0, 8011b8c <fmaxf+0x28>
 8011b78:	eeb0 0a68 	vmov.f32	s0, s17
 8011b7c:	f000 f80e 	bl	8011b9c <__fpclassifyf>
 8011b80:	b130      	cbz	r0, 8011b90 <fmaxf+0x2c>
 8011b82:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b8a:	dc01      	bgt.n	8011b90 <fmaxf+0x2c>
 8011b8c:	eeb0 8a68 	vmov.f32	s16, s17
 8011b90:	eeb0 0a48 	vmov.f32	s0, s16
 8011b94:	ecbd 8b02 	vpop	{d8}
 8011b98:	bd08      	pop	{r3, pc}
	...

08011b9c <__fpclassifyf>:
 8011b9c:	ee10 3a10 	vmov	r3, s0
 8011ba0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011ba4:	d00d      	beq.n	8011bc2 <__fpclassifyf+0x26>
 8011ba6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8011baa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011bae:	d30a      	bcc.n	8011bc6 <__fpclassifyf+0x2a>
 8011bb0:	4b07      	ldr	r3, [pc, #28]	; (8011bd0 <__fpclassifyf+0x34>)
 8011bb2:	1e42      	subs	r2, r0, #1
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d908      	bls.n	8011bca <__fpclassifyf+0x2e>
 8011bb8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011bbc:	4258      	negs	r0, r3
 8011bbe:	4158      	adcs	r0, r3
 8011bc0:	4770      	bx	lr
 8011bc2:	2002      	movs	r0, #2
 8011bc4:	4770      	bx	lr
 8011bc6:	2004      	movs	r0, #4
 8011bc8:	4770      	bx	lr
 8011bca:	2003      	movs	r0, #3
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop
 8011bd0:	007ffffe 	.word	0x007ffffe

08011bd4 <roundf>:
 8011bd4:	ee10 0a10 	vmov	r0, s0
 8011bd8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011bdc:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8011be0:	2a16      	cmp	r2, #22
 8011be2:	dc15      	bgt.n	8011c10 <roundf+0x3c>
 8011be4:	2a00      	cmp	r2, #0
 8011be6:	da08      	bge.n	8011bfa <roundf+0x26>
 8011be8:	3201      	adds	r2, #1
 8011bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8011bee:	d101      	bne.n	8011bf4 <roundf+0x20>
 8011bf0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8011bf4:	ee00 3a10 	vmov	s0, r3
 8011bf8:	4770      	bx	lr
 8011bfa:	4908      	ldr	r1, [pc, #32]	; (8011c1c <roundf+0x48>)
 8011bfc:	4111      	asrs	r1, r2
 8011bfe:	4208      	tst	r0, r1
 8011c00:	d0fa      	beq.n	8011bf8 <roundf+0x24>
 8011c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011c06:	4113      	asrs	r3, r2
 8011c08:	4403      	add	r3, r0
 8011c0a:	ea23 0301 	bic.w	r3, r3, r1
 8011c0e:	e7f1      	b.n	8011bf4 <roundf+0x20>
 8011c10:	2a80      	cmp	r2, #128	; 0x80
 8011c12:	d1f1      	bne.n	8011bf8 <roundf+0x24>
 8011c14:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011c18:	4770      	bx	lr
 8011c1a:	bf00      	nop
 8011c1c:	007fffff 	.word	0x007fffff

08011c20 <log10f>:
 8011c20:	b508      	push	{r3, lr}
 8011c22:	ed2d 8b02 	vpush	{d8}
 8011c26:	eeb0 8a40 	vmov.f32	s16, s0
 8011c2a:	f000 f82f 	bl	8011c8c <__ieee754_log10f>
 8011c2e:	4b14      	ldr	r3, [pc, #80]	; (8011c80 <log10f+0x60>)
 8011c30:	f993 3000 	ldrsb.w	r3, [r3]
 8011c34:	3301      	adds	r3, #1
 8011c36:	d014      	beq.n	8011c62 <log10f+0x42>
 8011c38:	eeb4 8a48 	vcmp.f32	s16, s16
 8011c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c40:	d60f      	bvs.n	8011c62 <log10f+0x42>
 8011c42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4a:	d80a      	bhi.n	8011c62 <log10f+0x42>
 8011c4c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c54:	d108      	bne.n	8011c68 <log10f+0x48>
 8011c56:	f7fe fd77 	bl	8010748 <__errno>
 8011c5a:	2322      	movs	r3, #34	; 0x22
 8011c5c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8011c84 <log10f+0x64>
 8011c60:	6003      	str	r3, [r0, #0]
 8011c62:	ecbd 8b02 	vpop	{d8}
 8011c66:	bd08      	pop	{r3, pc}
 8011c68:	f7fe fd6e 	bl	8010748 <__errno>
 8011c6c:	ecbd 8b02 	vpop	{d8}
 8011c70:	2321      	movs	r3, #33	; 0x21
 8011c72:	6003      	str	r3, [r0, #0]
 8011c74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011c78:	4803      	ldr	r0, [pc, #12]	; (8011c88 <log10f+0x68>)
 8011c7a:	f000 b85f 	b.w	8011d3c <nanf>
 8011c7e:	bf00      	nop
 8011c80:	200001ac 	.word	0x200001ac
 8011c84:	ff800000 	.word	0xff800000
 8011c88:	0801aa55 	.word	0x0801aa55

08011c8c <__ieee754_log10f>:
 8011c8c:	b508      	push	{r3, lr}
 8011c8e:	ee10 2a10 	vmov	r2, s0
 8011c92:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8011c96:	ed2d 8b02 	vpush	{d8}
 8011c9a:	d108      	bne.n	8011cae <__ieee754_log10f+0x22>
 8011c9c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8011d24 <__ieee754_log10f+0x98>
 8011ca0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8011d28 <__ieee754_log10f+0x9c>
 8011ca4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011ca8:	ecbd 8b02 	vpop	{d8}
 8011cac:	bd08      	pop	{r3, pc}
 8011cae:	2a00      	cmp	r2, #0
 8011cb0:	da02      	bge.n	8011cb8 <__ieee754_log10f+0x2c>
 8011cb2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011cb6:	e7f3      	b.n	8011ca0 <__ieee754_log10f+0x14>
 8011cb8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011cbc:	db02      	blt.n	8011cc4 <__ieee754_log10f+0x38>
 8011cbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011cc2:	e7f1      	b.n	8011ca8 <__ieee754_log10f+0x1c>
 8011cc4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8011cc8:	bfbf      	itttt	lt
 8011cca:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8011d2c <__ieee754_log10f+0xa0>
 8011cce:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011cd2:	f06f 0118 	mvnlt.w	r1, #24
 8011cd6:	ee17 2a90 	vmovlt	r2, s15
 8011cda:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8011cde:	bfa8      	it	ge
 8011ce0:	2100      	movge	r1, #0
 8011ce2:	3b7f      	subs	r3, #127	; 0x7f
 8011ce4:	440b      	add	r3, r1
 8011ce6:	0fd9      	lsrs	r1, r3, #31
 8011ce8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8011cec:	ee07 3a90 	vmov	s15, r3
 8011cf0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011cf4:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8011cf8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8011cfc:	ee00 3a10 	vmov	s0, r3
 8011d00:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8011d04:	f000 f820 	bl	8011d48 <__ieee754_logf>
 8011d08:	eddf 7a09 	vldr	s15, [pc, #36]	; 8011d30 <__ieee754_log10f+0xa4>
 8011d0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011d10:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011d34 <__ieee754_log10f+0xa8>
 8011d14:	eea8 0a27 	vfma.f32	s0, s16, s15
 8011d18:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011d38 <__ieee754_log10f+0xac>
 8011d1c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8011d20:	e7c2      	b.n	8011ca8 <__ieee754_log10f+0x1c>
 8011d22:	bf00      	nop
 8011d24:	cc000000 	.word	0xcc000000
 8011d28:	00000000 	.word	0x00000000
 8011d2c:	4c000000 	.word	0x4c000000
 8011d30:	3ede5bd9 	.word	0x3ede5bd9
 8011d34:	355427db 	.word	0x355427db
 8011d38:	3e9a2080 	.word	0x3e9a2080

08011d3c <nanf>:
 8011d3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011d44 <nanf+0x8>
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	7fc00000 	.word	0x7fc00000

08011d48 <__ieee754_logf>:
 8011d48:	ee10 3a10 	vmov	r3, s0
 8011d4c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011d50:	d106      	bne.n	8011d60 <__ieee754_logf+0x18>
 8011d52:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8011ee8 <__ieee754_logf+0x1a0>
 8011d56:	eddf 7a65 	vldr	s15, [pc, #404]	; 8011eec <__ieee754_logf+0x1a4>
 8011d5a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011d5e:	4770      	bx	lr
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	da02      	bge.n	8011d6a <__ieee754_logf+0x22>
 8011d64:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011d68:	e7f5      	b.n	8011d56 <__ieee754_logf+0xe>
 8011d6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011d6e:	db02      	blt.n	8011d76 <__ieee754_logf+0x2e>
 8011d70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011d74:	4770      	bx	lr
 8011d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011d7a:	bfb8      	it	lt
 8011d7c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8011ef0 <__ieee754_logf+0x1a8>
 8011d80:	485c      	ldr	r0, [pc, #368]	; (8011ef4 <__ieee754_logf+0x1ac>)
 8011d82:	bfbe      	ittt	lt
 8011d84:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011d88:	f06f 0118 	mvnlt.w	r1, #24
 8011d8c:	ee17 3a90 	vmovlt	r3, s15
 8011d90:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8011d94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011d98:	4418      	add	r0, r3
 8011d9a:	bfa8      	it	ge
 8011d9c:	2100      	movge	r1, #0
 8011d9e:	3a7f      	subs	r2, #127	; 0x7f
 8011da0:	440a      	add	r2, r1
 8011da2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8011da6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8011daa:	4319      	orrs	r1, r3
 8011dac:	ee00 1a10 	vmov	s0, r1
 8011db0:	4951      	ldr	r1, [pc, #324]	; (8011ef8 <__ieee754_logf+0x1b0>)
 8011db2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8011db6:	f103 000f 	add.w	r0, r3, #15
 8011dba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011dbe:	4001      	ands	r1, r0
 8011dc0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011dc4:	bb89      	cbnz	r1, 8011e2a <__ieee754_logf+0xe2>
 8011dc6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dce:	d10f      	bne.n	8011df0 <__ieee754_logf+0xa8>
 8011dd0:	2a00      	cmp	r2, #0
 8011dd2:	f000 8085 	beq.w	8011ee0 <__ieee754_logf+0x198>
 8011dd6:	ee07 2a90 	vmov	s15, r2
 8011dda:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8011efc <__ieee754_logf+0x1b4>
 8011dde:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8011f00 <__ieee754_logf+0x1b8>
 8011de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011de6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011dea:	eea7 0a87 	vfma.f32	s0, s15, s14
 8011dee:	4770      	bx	lr
 8011df0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8011f04 <__ieee754_logf+0x1bc>
 8011df4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011df8:	eee0 7a66 	vfms.f32	s15, s0, s13
 8011dfc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011e04:	b912      	cbnz	r2, 8011e0c <__ieee754_logf+0xc4>
 8011e06:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011e0a:	4770      	bx	lr
 8011e0c:	ee07 2a90 	vmov	s15, r2
 8011e10:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8011efc <__ieee754_logf+0x1b4>
 8011e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e18:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011e1c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011e20:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011f00 <__ieee754_logf+0x1b8>
 8011e24:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8011e28:	4770      	bx	lr
 8011e2a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011e2e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011e32:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011f08 <__ieee754_logf+0x1c0>
 8011e36:	eddf 4a35 	vldr	s9, [pc, #212]	; 8011f0c <__ieee754_logf+0x1c4>
 8011e3a:	4935      	ldr	r1, [pc, #212]	; (8011f10 <__ieee754_logf+0x1c8>)
 8011e3c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011e40:	4419      	add	r1, r3
 8011e42:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8011e46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011e4a:	430b      	orrs	r3, r1
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	ee07 2a90 	vmov	s15, r2
 8011e52:	ee26 5a06 	vmul.f32	s10, s12, s12
 8011e56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011e5a:	ee25 7a05 	vmul.f32	s14, s10, s10
 8011e5e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8011f14 <__ieee754_logf+0x1cc>
 8011e62:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011e66:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8011f18 <__ieee754_logf+0x1d0>
 8011e6a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011e6e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011f1c <__ieee754_logf+0x1d4>
 8011e72:	eee7 7a24 	vfma.f32	s15, s14, s9
 8011e76:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8011f20 <__ieee754_logf+0x1d8>
 8011e7a:	eee7 4a87 	vfma.f32	s9, s15, s14
 8011e7e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8011f24 <__ieee754_logf+0x1dc>
 8011e82:	eee4 7a87 	vfma.f32	s15, s9, s14
 8011e86:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011e8a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011e8e:	dd1c      	ble.n	8011eca <__ieee754_logf+0x182>
 8011e90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011e94:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011e98:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ea0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011ea4:	b922      	cbnz	r2, 8011eb0 <__ieee754_logf+0x168>
 8011ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011eaa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011eae:	4770      	bx	lr
 8011eb0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8011efc <__ieee754_logf+0x1b4>
 8011eb4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ebc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011ec0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011f00 <__ieee754_logf+0x1b8>
 8011ec4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8011ec8:	4770      	bx	lr
 8011eca:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011ece:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011ed2:	2a00      	cmp	r2, #0
 8011ed4:	d0e9      	beq.n	8011eaa <__ieee754_logf+0x162>
 8011ed6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8011efc <__ieee754_logf+0x1b4>
 8011eda:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011ede:	e7ed      	b.n	8011ebc <__ieee754_logf+0x174>
 8011ee0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8011eec <__ieee754_logf+0x1a4>
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop
 8011ee8:	cc000000 	.word	0xcc000000
 8011eec:	00000000 	.word	0x00000000
 8011ef0:	4c000000 	.word	0x4c000000
 8011ef4:	004afb20 	.word	0x004afb20
 8011ef8:	007ffff0 	.word	0x007ffff0
 8011efc:	3717f7d1 	.word	0x3717f7d1
 8011f00:	3f317180 	.word	0x3f317180
 8011f04:	3eaaaaab 	.word	0x3eaaaaab
 8011f08:	3e1cd04f 	.word	0x3e1cd04f
 8011f0c:	3e178897 	.word	0x3e178897
 8011f10:	ffcf5c30 	.word	0xffcf5c30
 8011f14:	3e638e29 	.word	0x3e638e29
 8011f18:	3ecccccd 	.word	0x3ecccccd
 8011f1c:	3e3a3325 	.word	0x3e3a3325
 8011f20:	3e924925 	.word	0x3e924925
 8011f24:	3f2aaaab 	.word	0x3f2aaaab

08011f28 <_init>:
 8011f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f2a:	bf00      	nop
 8011f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f2e:	bc08      	pop	{r3}
 8011f30:	469e      	mov	lr, r3
 8011f32:	4770      	bx	lr

08011f34 <_fini>:
 8011f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f36:	bf00      	nop
 8011f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f3a:	bc08      	pop	{r3}
 8011f3c:	469e      	mov	lr, r3
 8011f3e:	4770      	bx	lr
