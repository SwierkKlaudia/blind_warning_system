
STM_radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f35c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f34  0800f4a0  0800f4a0  0001f4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080143d4  080143d4  000243d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080143dc  080143dc  000243dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080143e0  080143e0  000243e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000300  20000004  080143e4  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004e8  20000304  080146e4  00030304  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200007ec  080146e4  000307ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 10 .debug_info   000536e7  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b189  00000000  00000000  00083a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029c0  00000000  00000000  0008eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00005928  00000000  00000000  00091568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000248a2  00000000  00000000  00096e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000285c7  00000000  00000000  000bb732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7571  00000000  00000000  000e3cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000009c  00000000  00000000  001cb26a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000afd0  00000000  00000000  001cb308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000178da  00000000  00000000  001d62d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000304 	.word	0x20000304
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f484 	.word	0x0800f484

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000308 	.word	0x20000308
 800017c:	0800f484 	.word	0x0800f484

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
	__disable_irq();
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000e72:	b662      	cpsie	i
}
 8000e74:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000e94:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e98:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f001 fa5b 	bl	800235c <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <acc_hal_integration_sensor_transfer+0x48>)
 8000eb6:	f003 fa39 	bl	800432c <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f001 fa4b 	bl	800235c <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000334 	.word	0x20000334

08000ed4 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2120      	movs	r1, #32
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f001 fa3a 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2110      	movs	r1, #16
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 fa34 	bl	800235c <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f000 ff75 	bl	8001de4 <HAL_Delay>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f001 fa23 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f001 fa1d 	bl	800235c <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f000 ff5e 	bl	8001de4 <HAL_Delay>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 8000f3a:	f000 ff3b 	bl	8001db4 <HAL_GetTick>
 8000f3e:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f40:	e00d      	b.n	8000f5e <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8000f42:	f7ff ff8b 	bl	8000e5c <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f001 f9ed 	bl	800232c <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d000      	beq.n	8000f5a <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 8000f58:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8000f5a:	f7ff ff88 	bl	8000e6e <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 f9e1 	bl	800232c <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d007      	beq.n	8000f80 <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000f70:	f000 ff20 	bl	8001db4 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8e0      	bhi.n	8000f42 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8000f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f001 f9d0 	bl	800232c <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <acc_hal_integration_get_reference_frequency+0x18>)
 8000fa6:	ee07 3a90 	vmov	s15, r3
}
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	4bc65d40 	.word	0x4bc65d40

08000fbc <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	return &hal;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <acc_hal_integration_get_implementation+0x10>)
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	08010f84 	.word	0x08010f84

08000fd0 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8000fd0:	b40c      	push	{r2, r3}
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b0b4      	sub	sp, #208	; 0xd0
 8000fd6:	af04      	add	r7, sp, #16
 8000fd8:	4603      	mov	r3, r0
 8000fda:	6039      	str	r1, [r7, #0]
 8000fdc:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 8000fde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe2:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8000fe4:	f107 000c 	add.w	r0, r7, #12
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000fee:	2196      	movs	r1, #150	; 0x96
 8000ff0:	f00b ffda 	bl	800cfa8 <vsniprintf>
 8000ff4:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8000ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ffc:	2b95      	cmp	r3, #149	; 0x95
 8000ffe:	dd0b      	ble.n	8001018 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8001000:	232e      	movs	r3, #46	; 0x2e
 8001002:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8001006:	232e      	movs	r3, #46	; 0x2e
 8001008:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 800100c:	232e      	movs	r3, #46	; 0x2e
 800100e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8001018:	f000 f881 	bl	800111e <acc_integration_get_time>
 800101c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8001020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <acc_integration_log+0x11c>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0d5b      	lsrs	r3, r3, #21
 8001034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8001038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800103c:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <acc_integration_log+0x120>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0b9a      	lsrs	r2, r3, #14
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <acc_integration_log+0x124>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	0959      	lsrs	r1, r3, #5
 800104c:	460b      	mov	r3, r1
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800105a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <acc_integration_log+0x128>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	099a      	lsrs	r2, r3, #6
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <acc_integration_log+0x124>)
 8001068:	fba3 1302 	umull	r1, r3, r3, r2
 800106c:	0959      	lsrs	r1, r3, #5
 800106e:	460b      	mov	r3, r1
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	1a5b      	subs	r3, r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 800107c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <acc_integration_log+0x128>)
 8001082:	fba2 1203 	umull	r1, r2, r2, r3
 8001086:	0992      	lsrs	r2, r2, #6
 8001088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800108c:	fb01 f202 	mul.w	r2, r1, r2
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d803      	bhi.n	80010a4 <acc_integration_log+0xd4>
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <acc_integration_log+0x12c>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	e000      	b.n	80010a6 <acc_integration_log+0xd6>
 80010a4:	233f      	movs	r3, #63	; 0x3f
 80010a6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80010aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80010ae:	f107 020c 	add.w	r2, r7, #12
 80010b2:	9203      	str	r2, [sp, #12]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	9202      	str	r2, [sp, #8]
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80010c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <acc_integration_log+0x130>)
 80010ce:	f00b fe3f 	bl	800cd50 <iprintf>

	fflush(stdout);
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <acc_integration_log+0x134>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4618      	mov	r0, r3
 80010da:	f00a ff7f 	bl	800bfdc <fflush>

	va_end(ap);
}
 80010de:	bf00      	nop
 80010e0:	37c0      	adds	r7, #192	; 0xc0
 80010e2:	46bd      	mov	sp, r7
 80010e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010e8:	b002      	add	sp, #8
 80010ea:	4770      	bx	lr
 80010ec:	95217cb1 	.word	0x95217cb1
 80010f0:	45e7b273 	.word	0x45e7b273
 80010f4:	88888889 	.word	0x88888889
 80010f8:	10624dd3 	.word	0x10624dd3
 80010fc:	0800f4c4 	.word	0x0800f4c4
 8001100:	0800f4a0 	.word	0x0800f4a0
 8001104:	20000134 	.word	0x20000134

08001108 <acc_integration_sleep_ms>:

#include "acc_integration.h"


void acc_integration_sleep_ms(uint32_t time_msec)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_msec);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fe67 	bl	8001de4 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001122:	f000 fe47 	bl	8001db4 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}

0800112c <Detector_Init>:

static void Update_Configuration(acc_detector_presence_configuration_t presence_configuration);
static float Average(float *tab, int N);

int Detector_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8001132:	f7ff ff43 	bl	8000fbc <acc_hal_integration_get_implementation>
 8001136:	6078      	str	r0, [r7, #4]

	if (!acc_rss_activate(hal))
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f005 f827 	bl	800618c <acc_rss_activate>
 800113e:	4603      	mov	r3, r0
 8001140:	f083 0301 	eor.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <Detector_Init+0x28>
	{
		printf("Failed to activate RSS\n");
 800114a:	4825      	ldr	r0, [pc, #148]	; (80011e0 <Detector_Init+0xb4>)
 800114c:	f00b fe86 	bl	800ce5c <puts>
		return EXIT_FAILURE;
 8001150:	2301      	movs	r3, #1
 8001152:	e041      	b.n	80011d8 <Detector_Init+0xac>
	}

	acc_detector_presence_configuration_t presence_configuration = acc_detector_presence_configuration_create();
 8001154:	f004 fab4 	bl	80056c0 <acc_detector_presence_configuration_create>
 8001158:	4603      	mov	r3, r0
 800115a:	603b      	str	r3, [r7, #0]
	if (presence_configuration == NULL)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <Detector_Init+0x44>
	{
		printf("Failed to create configuration\n");
 8001162:	4820      	ldr	r0, [pc, #128]	; (80011e4 <Detector_Init+0xb8>)
 8001164:	f00b fe7a 	bl	800ce5c <puts>
		acc_rss_deactivate();
 8001168:	f005 f84e 	bl	8006208 <acc_rss_deactivate>
		return EXIT_FAILURE;
 800116c:	2301      	movs	r3, #1
 800116e:	e033      	b.n	80011d8 <Detector_Init+0xac>
	}

	Update_Configuration(presence_configuration);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f89a 	bl	80012ac <Update_Configuration>

	handle = acc_detector_presence_create(presence_configuration);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f004 fb18 	bl	80057b0 <acc_detector_presence_create>
 8001180:	4603      	mov	r3, r0
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <Detector_Init+0xbc>)
 8001184:	6013      	str	r3, [r2, #0]
	if (handle == NULL)
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <Detector_Init+0xbc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10a      	bne.n	80011a4 <Detector_Init+0x78>
	{
		printf("Failed to create detector\n");
 800118e:	4817      	ldr	r0, [pc, #92]	; (80011ec <Detector_Init+0xc0>)
 8001190:	f00b fe64 	bl	800ce5c <puts>
		acc_detector_presence_configuration_destroy(&presence_configuration);
 8001194:	463b      	mov	r3, r7
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fae6 	bl	8005768 <acc_detector_presence_configuration_destroy>
		acc_rss_deactivate();
 800119c:	f005 f834 	bl	8006208 <acc_rss_deactivate>
		return EXIT_FAILURE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e019      	b.n	80011d8 <Detector_Init+0xac>
	}

	acc_detector_presence_configuration_destroy(&presence_configuration);
 80011a4:	463b      	mov	r3, r7
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fade 	bl	8005768 <acc_detector_presence_configuration_destroy>

	if (!acc_detector_presence_activate(handle))
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <Detector_Init+0xbc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fb61 	bl	8005878 <acc_detector_presence_activate>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f083 0301 	eor.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <Detector_Init+0xaa>
	{
		printf("Failed to activate detector\n");
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <Detector_Init+0xc4>)
 80011c4:	f00b fe4a 	bl	800ce5c <puts>
		acc_detector_presence_destroy(&handle);
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <Detector_Init+0xbc>)
 80011ca:	f004 fb2f 	bl	800582c <acc_detector_presence_destroy>
		acc_rss_deactivate();
 80011ce:	f005 f81b 	bl	8006208 <acc_rss_deactivate>
		return EXIT_FAILURE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <Detector_Init+0xac>
	}

	return EXIT_SUCCESS;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0800f4cc 	.word	0x0800f4cc
 80011e4:	0800f4e4 	.word	0x0800f4e4
 80011e8:	20000320 	.word	0x20000320
 80011ec:	0800f504 	.word	0x0800f504
 80011f0:	0800f520 	.word	0x0800f520

080011f4 <Detector_Presence>:

int Detector_Presence(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	bool success = true;
 80011fa:	2301      	movs	r3, #1
 80011fc:	71fb      	strb	r3, [r7, #7]

	success = acc_detector_presence_get_next(handle, &result);
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <Detector_Presence+0x40>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <Detector_Presence+0x44>)
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fb79 	bl	80058fc <acc_detector_presence_get_next>
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	if (!success)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f083 0301 	eor.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <Detector_Presence+0x30>
	{
		printf("acc_detector_presence_get_next() failed\n");
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <Detector_Presence+0x48>)
 800121c:	f00b fe1e 	bl	800ce5c <puts>
		return EXIT_FAILURE;
 8001220:	2301      	movs	r3, #1
 8001222:	e003      	b.n	800122c <Detector_Presence+0x38>
	}

	acc_integration_sleep_ms(100 / DEFAULT_UPDATE_RATE);
 8001224:	200a      	movs	r0, #10
 8001226:	f7ff ff6f 	bl	8001108 <acc_integration_sleep_ms>

	return EXIT_SUCCESS;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000320 	.word	0x20000320
 8001238:	20000324 	.word	0x20000324
 800123c:	0800f53c 	.word	0x0800f53c

08001240 <Detector_Deactivate>:

int Detector_Deactivate(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	bool deactivated = acc_detector_presence_deactivate(handle);
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <Detector_Deactivate+0x38>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fb30 	bl	80058b0 <acc_detector_presence_deactivate>
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]

	acc_detector_presence_destroy(&handle);
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <Detector_Deactivate+0x38>)
 8001256:	f004 fae9 	bl	800582c <acc_detector_presence_destroy>

	acc_rss_deactivate();
 800125a:	f004 ffd5 	bl	8006208 <acc_rss_deactivate>

	if (deactivated)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <Detector_Deactivate+0x2e>
	{
		printf("Application finished OK\n");
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <Detector_Deactivate+0x3c>)
 8001266:	f00b fdf9 	bl	800ce5c <puts>
		return EXIT_SUCCESS;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <Detector_Deactivate+0x30>
	}

	return EXIT_FAILURE;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000320 	.word	0x20000320
 800127c:	0800f564 	.word	0x0800f564

08001280 <Get_Detector_Distance>:

float Get_Detector_Distance(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	if (true == result.presence_detected)
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <Get_Detector_Distance+0x24>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <Get_Detector_Distance+0x12>
	{
		return result.presence_distance;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <Get_Detector_Distance+0x24>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	e000      	b.n	8001294 <Get_Detector_Distance+0x14>
	}
	else
	{
		return 9999;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <Get_Detector_Distance+0x28>)
	}
}
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000324 	.word	0x20000324
 80012a8:	461c3c00 	.word	0x461c3c00

080012ac <Update_Configuration>:

static void Update_Configuration(acc_detector_presence_configuration_t presence_configuration)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	acc_detector_presence_configuration_update_rate_set(presence_configuration, DEFAULT_UPDATE_RATE);
 80012b4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f004 fb9f 	bl	80059fc <acc_detector_presence_configuration_update_rate_set>
	acc_detector_presence_configuration_detection_threshold_set(presence_configuration, DEFAULT_DETECTION_THRESHOLD);
 80012be:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f004 fb84 	bl	80059d0 <acc_detector_presence_configuration_detection_threshold_set>
	acc_detector_presence_configuration_start_set(presence_configuration, DEFAULT_START_M);
 80012c8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80012f4 <Update_Configuration+0x48>
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f004 fb53 	bl	8005978 <acc_detector_presence_configuration_start_set>
	acc_detector_presence_configuration_length_set(presence_configuration, DEFAULT_LENGTH_M);
 80012d2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80012f8 <Update_Configuration+0x4c>
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f004 fb64 	bl	80059a4 <acc_detector_presence_configuration_length_set>
	acc_detector_presence_configuration_power_save_mode_set(presence_configuration, DEFAULT_POWER_SAVE_MODE);
 80012dc:	2101      	movs	r1, #1
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f004 fbb8 	bl	8005a54 <acc_detector_presence_configuration_power_save_mode_set>
	acc_detector_presence_configuration_nbr_removed_pc_set(presence_configuration, DEFAULT_NBR_REMOVED_PC);
 80012e4:	2100      	movs	r1, #0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f004 fb9e 	bl	8005a28 <acc_detector_presence_configuration_nbr_removed_pc_set>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	3e4ccccd 	.word	0x3e4ccccd
 80012f8:	3fb33333 	.word	0x3fb33333

080012fc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130c:	f023 0218 	bic.w	r2, r3, #24
 8001310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4313      	orrs	r3, r2
 8001318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4313      	orrs	r3, r2
 800133e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800134c:	68fb      	ldr	r3, [r7, #12]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001360:	f000 fcba 	bl	8001cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001364:	f000 f830 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001368:	f000 f986 	bl	8001678 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800136c:	f000 f910 	bl	8001590 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001370:	f000 f95a 	bl	8001628 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8001374:	f000 f8ce 	bl	8001514 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  detector_result = Detector_Init();
 8001378:	f7ff fed8 	bl	800112c <Detector_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <main+0x68>)
 8001380:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (EXIT_SUCCESS == detector_result)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <main+0x68>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <main+0x4a>
	  {
		  detector_result = Detector_Presence();
 800138a:	f7ff ff33 	bl	80011f4 <Detector_Presence>
 800138e:	4603      	mov	r3, r0
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <main+0x68>)
 8001392:	6013      	str	r3, [r2, #0]
		  Send_Distance_UART(Get_Detector_Distance());
 8001394:	f7ff ff74 	bl	8001280 <Get_Detector_Distance>
 8001398:	eef0 7a40 	vmov.f32	s15, s0
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	f000 f9de 	bl	8001760 <Send_Distance_UART>
 80013a4:	e7ed      	b.n	8001382 <main+0x26>
	  }
	  else
	  {
		  detector_result = Detector_Deactivate();
 80013a6:	f7ff ff4b 	bl	8001240 <Detector_Deactivate>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <main+0x68>)
 80013ae:	6013      	str	r3, [r2, #0]
		  if (EXIT_SUCCESS == detector_result)
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <main+0x68>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e4      	bne.n	8001382 <main+0x26>
		  {
			  detector_result = Detector_Init();
 80013b8:	f7ff feb8 	bl	800112c <Detector_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a01      	ldr	r2, [pc, #4]	; (80013c4 <main+0x68>)
 80013c0:	6013      	str	r3, [r2, #0]
	  if (EXIT_SUCCESS == detector_result)
 80013c2:	e7de      	b.n	8001382 <main+0x26>
 80013c4:	20000004 	.word	0x20000004

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ae      	sub	sp, #184	; 0xb8
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d2:	2248      	movs	r2, #72	; 0x48
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00a ff68 	bl	800c2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2250      	movs	r2, #80	; 0x50
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00a ff58 	bl	800c2ac <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800140a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	f023 0303 	bic.w	r3, r3, #3
 8001416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001420:	f001 f8e6 	bl	80025f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ff69 	bl	80012fc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142a:	4b39      	ldr	r3, [pc, #228]	; (8001510 <SystemClock_Config+0x148>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001432:	4a37      	ldr	r2, [pc, #220]	; (8001510 <SystemClock_Config+0x148>)
 8001434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <SystemClock_Config+0x148>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001446:	2327      	movs	r3, #39	; 0x27
 8001448:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001458:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800145a:	2301      	movs	r3, #1
 800145c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fc4b 	bl	8002d18 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001488:	f000 f9bc 	bl	8001804 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800148c:	236f      	movs	r3, #111	; 0x6f
 800148e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001490:	2302      	movs	r3, #2
 8001492:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 ffc0 	bl	8003434 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80014ba:	f000 f9a3 	bl	8001804 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80014be:	f242 1301 	movw	r3, #8449	; 0x2101
 80014c2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80014c4:	2318      	movs	r3, #24
 80014c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80014c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80014ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80014d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80014da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014de:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80014ea:	2300      	movs	r3, #0
 80014ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fbe9 	bl	8003ccc <HAL_RCCEx_PeriphCLKConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8001500:	f000 f980 	bl	8001804 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001504:	f002 fd58 	bl	8003fb8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001508:	bf00      	nop
 800150a:	37b8      	adds	r7, #184	; 0xb8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	58000400 	.word	0x58000400

08001514 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_SPI1_Init+0x74>)
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <MX_SPI1_Init+0x78>)
 800151c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_SPI1_Init+0x74>)
 8001520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_SPI1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_SPI1_Init+0x74>)
 800152e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001532:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_SPI1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_SPI1_Init+0x74>)
 8001542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001546:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_SPI1_Init+0x74>)
 800154a:	2220      	movs	r2, #32
 800154c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_SPI1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_SPI1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_SPI1_Init+0x74>)
 8001562:	2207      	movs	r2, #7
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_SPI1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_SPI1_Init+0x74>)
 800156e:	2208      	movs	r2, #8
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_SPI1_Init+0x74>)
 8001574:	f002 fe37 	bl	80041e6 <HAL_SPI_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800157e:	f000 f941 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000334 	.word	0x20000334
 800158c:	40013000 	.word	0x40013000

08001590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <MX_USART1_UART_Init+0x90>)
 8001596:	4a23      	ldr	r2, [pc, #140]	; (8001624 <MX_USART1_UART_Init+0x94>)
 8001598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <MX_USART1_UART_Init+0x90>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015da:	f003 fa37 	bl	8004a4c <HAL_UART_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015e4:	f000 f90e 	bl	8001804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e8:	2100      	movs	r1, #0
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015ec:	f003 fee2 	bl	80053b4 <HAL_UARTEx_SetTxFifoThreshold>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015f6:	f000 f905 	bl	8001804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015fa:	2100      	movs	r1, #0
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <MX_USART1_UART_Init+0x90>)
 80015fe:	f003 ff17 	bl	8005430 <HAL_UARTEx_SetRxFifoThreshold>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001608:	f000 f8fc 	bl	8001804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_USART1_UART_Init+0x90>)
 800160e:	f003 fe98 	bl	8005342 <HAL_UARTEx_DisableFifoMode>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001618:	f000 f8f4 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000398 	.word	0x20000398
 8001624:	40013800 	.word	0x40013800

08001628 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USB_PCD_Init+0x48>)
 800162e:	4a11      	ldr	r2, [pc, #68]	; (8001674 <MX_USB_PCD_Init+0x4c>)
 8001630:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001634:	2208      	movs	r2, #8
 8001636:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <MX_USB_PCD_Init+0x48>)
 800163a:	2202      	movs	r2, #2
 800163c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001640:	2202      	movs	r2, #2
 8001642:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USB_PCD_Init+0x48>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USB_PCD_Init+0x48>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_USB_PCD_Init+0x48>)
 800165e:	f000 feb8 	bl	80023d2 <HAL_PCD_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001668:	f000 f8cc 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000428 	.word	0x20000428
 8001674:	40006800 	.word	0x40006800

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168c:	2004      	movs	r0, #4
 800168e:	f7ff fe4b 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff fe48 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	2002      	movs	r0, #2
 800169a:	f7ff fe45 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	2008      	movs	r0, #8
 80016a0:	f7ff fe42 	bl	8001328 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A111_CS_N_Pin|A111_ENABLE_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2130      	movs	r1, #48	; 0x30
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f000 fe56 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|SPEAKER_VCC_Pin|LD1_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2133      	movs	r1, #51	; 0x33
 80016b4:	4826      	ldr	r0, [pc, #152]	; (8001750 <MX_GPIO_Init+0xd8>)
 80016b6:	f000 fe51 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A111_CS_N_Pin A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|A111_ENABLE_Pin;
 80016ba:	2330      	movs	r3, #48	; 0x30
 80016bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2302      	movs	r3, #2
 80016c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f000 fcbb 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 80016d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_GPIO_Init+0xdc>)
 80016de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f000 fcae 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f0:	2310      	movs	r3, #16
 80016f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4815      	ldr	r0, [pc, #84]	; (8001758 <MX_GPIO_Init+0xe0>)
 8001702:	f000 fca3 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin SPEAKER_VCC_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|SPEAKER_VCC_Pin|LD1_Pin;
 8001706:	2333      	movs	r3, #51	; 0x33
 8001708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_GPIO_Init+0xd8>)
 800171c:	f000 fc96 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001720:	2303      	movs	r3, #3
 8001722:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <MX_GPIO_Init+0xe4>)
 8001732:	f000 fc8b 	bl	800204c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2017      	movs	r0, #23
 800173c:	f000 fc51 	bl	8001fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001740:	2017      	movs	r0, #23
 8001742:	f000 fc68 	bl	8002016 <HAL_NVIC_EnableIRQ>

}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	48000400 	.word	0x48000400
 8001754:	10110000 	.word	0x10110000
 8001758:	48000800 	.word	0x48000800
 800175c:	48000c00 	.word	0x48000c00

08001760 <Send_Distance_UART>:

/* USER CODE BEGIN 4 */
static void Send_Distance_UART(float distance)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
	if (distance < 9999)
 800176a:	edd7 7a01 	vldr	s15, [r7, #4]
 800176e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80017ec <Send_Distance_UART+0x8c>
 8001772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	d51e      	bpl.n	80017ba <Send_Distance_UART+0x5a>
	{
		distance = distance * 100;
 800177c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001780:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80017f0 <Send_Distance_UART+0x90>
 8001784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001788:	edc7 7a01 	vstr	s15, [r7, #4]
		char uart_buf[23];
		sprintf(uart_buf, "Distance: %.1f [cm]\r\n", (distance));
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7fe feb3 	bl	80004f8 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	f107 0008 	add.w	r0, r7, #8
 800179a:	4916      	ldr	r1, [pc, #88]	; (80017f4 <Send_Distance_UART+0x94>)
 800179c:	f00b fb76 	bl	800ce8c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fceb 	bl	8000180 <strlen>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	f107 0108 	add.w	r1, r7, #8
 80017b2:	2364      	movs	r3, #100	; 0x64
 80017b4:	4810      	ldr	r0, [pc, #64]	; (80017f8 <Send_Distance_UART+0x98>)
 80017b6:	f003 f999 	bl	8004aec <HAL_UART_Transmit>
	}

	if (distance < 60)
 80017ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80017be:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80017fc <Send_Distance_UART+0x9c>
 80017c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d505      	bpl.n	80017d8 <Send_Distance_UART+0x78>
	{
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2110      	movs	r1, #16
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <Send_Distance_UART+0xa0>)
 80017d2:	f000 fdc3 	bl	800235c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_RESET);
	}
}
 80017d6:	e004      	b.n	80017e2 <Send_Distance_UART+0x82>
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	2110      	movs	r1, #16
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <Send_Distance_UART+0xa0>)
 80017de:	f000 fdbd 	bl	800235c <HAL_GPIO_WritePin>
}
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	461c3c00 	.word	0x461c3c00
 80017f0:	42c80000 	.word	0x42c80000
 80017f4:	0800f57c 	.word	0x0800f57c
 80017f8:	20000398 	.word	0x20000398
 80017fc:	42700000 	.word	0x42700000
 8001800:	48000400 	.word	0x48000400

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180c:	e7fe      	b.n	800180c <Error_Handler+0x8>

0800180e <LL_AHB2_GRP1_EnableClock>:
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4313      	orrs	r3, r2
 8001824:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4013      	ands	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4313      	orrs	r3, r2
 8001888:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4013      	ands	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_SPI_MspInit+0x5c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d117      	bne.n	8001906 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018da:	f7ff ffca 	bl	8001872 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff ff95 	bl	800180e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 80018e4:	23c2      	movs	r3, #194	; 0xc2
 80018e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f4:	2305      	movs	r3, #5
 80018f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001902:	f000 fba3 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40013000 	.word	0x40013000

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_UART_MspInit+0x58>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d116      	bne.n	8001964 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001936:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800193a:	f7ff ff9a 	bl	8001872 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2002      	movs	r0, #2
 8001940:	f7ff ff65 	bl	800180e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001954:	2307      	movs	r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4619      	mov	r1, r3
 800195e:	4804      	ldr	r0, [pc, #16]	; (8001970 <HAL_UART_MspInit+0x5c>)
 8001960:	f000 fb74 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013800 	.word	0x40013800
 8001970:	48000400 	.word	0x48000400

08001974 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_PCD_MspInit+0x5c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d118      	bne.n	80019c8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff ff39 	bl	800180e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800199c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80019ae:	230a      	movs	r3, #10
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f000 fb46 	bl	800204c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019c0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80019c4:	f7ff ff3c 	bl	8001840 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40006800 	.word	0x40006800

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a20:	f000 f9b4 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a30:	f000 fcac 	bl	800238c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_kill>:

int _kill(int pid, int sig)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a52:	f00a f9fb 	bl	800be4c <__errno>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2216      	movs	r2, #22
 8001a5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_exit>:

void _exit (int status)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe7 	bl	8001a48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a7a:	e7fe      	b.n	8001a7a <_exit+0x12>

08001a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e00a      	b.n	8001aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a8e:	f3af 8000 	nop.w
 8001a92:	4601      	mov	r1, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	b2ca      	uxtb	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf0      	blt.n	8001a8e <_read+0x12>
	}

return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e009      	b.n	8001adc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf1      	blt.n	8001ac8 <_write+0x12>
	}
	return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_close>:

int _close(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	return -1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b16:	605a      	str	r2, [r3, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_isatty>:

int _isatty(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
	return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f00a f960 	bl	800be4c <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20030000 	.word	0x20030000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	2000071c 	.word	0x2000071c
 8001bc0:	200007f0 	.word	0x200007f0

08001bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <SystemInit+0x98>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <SystemInit+0x98>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001bf0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <SystemInit+0x9c>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0e:	f023 0305 	bic.w	r3, r3, #5
 8001c12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <SystemInit+0xa0>)
 8001c30:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <SystemInit+0xa0>)
 8001c38:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00
 8001c60:	faf6fefb 	.word	0xfaf6fefb
 8001c64:	22041000 	.word	0x22041000

08001c68 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001c68:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6c:	3304      	adds	r3, #4

08001c6e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c70:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001c72:	d3f9      	bcc.n	8001c68 <CopyDataInit>
  bx lr
 8001c74:	4770      	bx	lr

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001c76:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001c78:	3004      	adds	r0, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001c7a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>
  bx lr
 8001c7e:	4770      	bx	lr

08001c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001c82:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c84:	f7ff ff9e 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <LoopForever+0x8>)
 8001c8a:	490c      	ldr	r1, [pc, #48]	; (8001cbc <LoopForever+0xc>)
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <LoopForever+0x10>)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f7ff ffed 	bl	8001c6e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <LoopForever+0x14>)
 8001c96:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <LoopForever+0x18>)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f7ff ffee 	bl	8001c7a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <LoopForever+0x1c>)
 8001ca0:	490b      	ldr	r1, [pc, #44]	; (8001cd0 <LoopForever+0x20>)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f7ff ffe9 	bl	8001c7a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ca8:	f00a faa0 	bl	800c1ec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001cac:	f7ff fb56 	bl	800135c <main>

08001cb0 <LoopForever>:

LoopForever:
  b LoopForever
 8001cb0:	e7fe      	b.n	8001cb0 <LoopForever>
 8001cb2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001cb4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	20000304 	.word	0x20000304
 8001cc0:	080143e4 	.word	0x080143e4
  INIT_BSS _sbss, _ebss
 8001cc4:	20000304 	.word	0x20000304
 8001cc8:	200007ec 	.word	0x200007ec
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ccc:	20030000 	.word	0x20030000
 8001cd0:	20030000 	.word	0x20030000

08001cd4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_Init+0x3c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_Init+0x3c>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cee:	2003      	movs	r0, #3
 8001cf0:	f000 f96c 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f000 f80f 	bl	8001d18 <HAL_InitTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	e001      	b.n	8001d0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d06:	f7ff fdcd 	bl	80018a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	58004000 	.word	0x58004000

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_InitTick+0x6c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d024      	beq.n	8001d76 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d2c:	f001 fd2e 	bl	800378c <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_InitTick+0x6c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f974 	bl	8002032 <HAL_SYSTICK_Config>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10f      	bne.n	8001d70 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	d809      	bhi.n	8001d6a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d56:	2200      	movs	r2, #0
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5e:	f000 f940 	bl	8001fe2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_InitTick+0x70>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e007      	b.n	8001d7a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e004      	b.n	8001d7a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000010 	.word	0x20000010
 8001d88:	2000000c 	.word	0x2000000c

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000010 	.word	0x20000010
 8001db0:	20000720 	.word	0x20000720

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000720 	.word	0x20000720

08001dcc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_GetTickPrio+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	2000000c 	.word	0x2000000c

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff ffe2 	bl	8001db4 <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001e0a:	bf00      	nop
 8001e0c:	f7ff ffd2 	bl	8001db4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
    {
    }
  }
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000010 	.word	0x20000010

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db0b      	blt.n	8001eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <__NVIC_EnableIRQ+0x38>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	; (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f98:	d301      	bcc.n	8001f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00f      	b.n	8001fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <SysTick_Config+0x40>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ff8e 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff29 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff40 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff90 	bl	8001f20 <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5f 	bl	8001ecc <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff33 	bl	8001e90 <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa4 	bl	8001f88 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205a:	e14c      	b.n	80022f6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 813e 	beq.w	80022f0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d00b      	beq.n	8002094 <HAL_GPIO_Init+0x48>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d007      	beq.n	8002094 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002088:	2b11      	cmp	r3, #17
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b12      	cmp	r3, #18
 8002092:	d130      	bne.n	80020f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ca:	2201      	movs	r2, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 0201 	and.w	r2, r3, #1
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0xea>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b12      	cmp	r3, #18
 8002134:	d123      	bne.n	800217e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0203 	and.w	r2, r3, #3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8098 	beq.w	80022f0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021c0:	4a54      	ldr	r2, [pc, #336]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	3302      	adds	r3, #2
 80021c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ea:	d019      	beq.n	8002220 <HAL_GPIO_Init+0x1d4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a4a      	ldr	r2, [pc, #296]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <HAL_GPIO_Init+0x1d0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a49      	ldr	r2, [pc, #292]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00d      	beq.n	8002218 <HAL_GPIO_Init+0x1cc>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a48      	ldr	r2, [pc, #288]	; (8002320 <HAL_GPIO_Init+0x2d4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <HAL_GPIO_Init+0x1c8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a47      	ldr	r2, [pc, #284]	; (8002324 <HAL_GPIO_Init+0x2d8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_GPIO_Init+0x1c4>
 800220c:	2304      	movs	r3, #4
 800220e:	e008      	b.n	8002222 <HAL_GPIO_Init+0x1d6>
 8002210:	2307      	movs	r3, #7
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x1d6>
 8002214:	2303      	movs	r3, #3
 8002216:	e004      	b.n	8002222 <HAL_GPIO_Init+0x1d6>
 8002218:	2302      	movs	r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x1d6>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_GPIO_Init+0x1d6>
 8002220:	2300      	movs	r3, #0
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	4093      	lsls	r3, r2
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002232:	4938      	ldr	r1, [pc, #224]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002240:	4b39      	ldr	r3, [pc, #228]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 8002242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800226e:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 8002270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ea:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f aeab 	bne.w	800205c <HAL_GPIO_Init+0x10>
  }
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40010000 	.word	0x40010000
 8002318:	48000400 	.word	0x48000400
 800231c:	48000800 	.word	0x48000800
 8002320:	48000c00 	.word	0x48000c00
 8002324:	48001000 	.word	0x48001000
 8002328:	58000800 	.word	0x58000800

0800232c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002378:	e002      	b.n	8002380 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f806 	bl	80023bc <HAL_GPIO_EXTI_Callback>
  }
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	58000800 	.word	0x58000800

080023bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d4:	b08b      	sub	sp, #44	; 0x2c
 80023d6:	af06      	add	r7, sp, #24
 80023d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d7      	b.n	8002594 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fabb 	bl	8001974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 f89c 	bl	8005548 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e04c      	b.n	80024b0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	3301      	adds	r3, #1
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	b298      	uxth	r0, r3
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	3336      	adds	r3, #54	; 0x36
 8002454:	4602      	mov	r2, r0
 8002456:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	3303      	adds	r3, #3
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3338      	adds	r3, #56	; 0x38
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	333c      	adds	r3, #60	; 0x3c
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	3340      	adds	r3, #64	; 0x40
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	3301      	adds	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d3ad      	bcc.n	8002416 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	e044      	b.n	800254a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	3301      	adds	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d3b5      	bcc.n	80024c0 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	687e      	ldr	r6, [r7, #4]
 800255c:	466d      	mov	r5, sp
 800255e:	f106 0410 	add.w	r4, r6, #16
 8002562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	602b      	str	r3, [r5, #0]
 800256a:	1d33      	adds	r3, r6, #4
 800256c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800256e:	6838      	ldr	r0, [r7, #0]
 8002570:	f003 f805 	bl	800557e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f805 	bl	800259c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	58000400 	.word	0x58000400

08002610 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_PWREx_GetVoltageRange+0x18>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	58000400 	.word	0x58000400

0800262c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800263e:	d101      	bne.n	8002644 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_RCC_HSE_Enable>:
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_RCC_HSE_Disable>:
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_RCC_HSE_IsReady>:
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800269e:	d101      	bne.n	80026a4 <LL_RCC_HSE_IsReady+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_RCC_HSE_IsReady+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_RCC_HSI_Enable>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_HSI_Disable>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_RCC_HSI_IsReady>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	d101      	bne.n	8002704 <LL_RCC_HSI_IsReady+0x18>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <LL_RCC_HSI_IsReady+0x1a>
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_RCC_HSI48_Enable>:
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800273e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_RCC_HSI48_Disable>:
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_RCC_HSI48_IsReady>:
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d101      	bne.n	8002796 <LL_RCC_HSI48_IsReady+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_RCC_HSI48_IsReady+0x1a>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_RCC_LSE_Enable>:
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_LSE_Disable>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_RCC_LSE_EnableBypass>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_RCC_LSE_DisableBypass>:
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b02      	cmp	r3, #2
 800283c:	d101      	bne.n	8002842 <LL_RCC_LSE_IsReady+0x18>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_RCC_LSE_IsReady+0x1a>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d101      	bne.n	80028aa <LL_RCC_LSI1_IsReady+0x18>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_RCC_LSI1_IsReady+0x1a>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80028fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b08      	cmp	r3, #8
 800290c:	d101      	bne.n	8002912 <LL_RCC_LSI2_IsReady+0x18>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_RCC_LSI2_IsReady+0x1a>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d101      	bne.n	800299e <LL_RCC_MSI_IsReady+0x16>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <LL_RCC_MSI_IsReady+0x18>
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2bb0      	cmp	r3, #176	; 0xb0
 80029e8:	d901      	bls.n	80029ee <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80029ea:	23b0      	movs	r3, #176	; 0xb0
 80029ec:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 0203 	bic.w	r2, r3, #3
 8002a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002aca:	f023 020f 	bic.w	r2, r3, #15
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	6013      	str	r3, [r2, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bea:	d101      	bne.n	8002bf0 <LL_RCC_PLL_IsReady+0x18>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <LL_RCC_PLL_IsReady+0x1a>
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0303 	and.w	r3, r3, #3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c70:	d101      	bne.n	8002c76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c96:	d101      	bne.n	8002c9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d101      	bne.n	8002cc2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ce0:	d101      	bne.n	8002ce6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d04:	d101      	bne.n	8002d0a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b08d      	sub	sp, #52	; 0x34
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e37f      	b.n	800342a <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8092 	beq.w	8002e5c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d38:	f7ff fe89 	bl	8002a4e <LL_RCC_GetSysClkSource>
 8002d3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d3e:	f7ff ff82 	bl	8002c46 <LL_RCC_PLL_GetMainSource>
 8002d42:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x3e>
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	d14c      	bne.n	8002dea <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d149      	bne.n	8002dea <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d56:	f7ff fe17 	bl	8002988 <LL_RCC_MSI_IsReady>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_OscConfig+0x54>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e35e      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d70:	f7ff fe2f 	bl	80029d2 <LL_RCC_MSI_GetRange>
 8002d74:	4603      	mov	r3, r0
 8002d76:	429c      	cmp	r4, r3
 8002d78:	d914      	bls.n	8002da4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fd44 	bl	800380c <RCC_SetFlashLatencyFromMSIRange>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e34d      	b.n	800342a <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fe09 	bl	80029aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fe2d 	bl	80029fc <LL_RCC_MSI_SetCalibTrimming>
 8002da2:	e013      	b.n	8002dcc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fdfe 	bl	80029aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fe22 	bl	80029fc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fd25 	bl	800380c <RCC_SetFlashLatencyFromMSIRange>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e32e      	b.n	800342a <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dcc:	f000 fcde 	bl	800378c <HAL_RCC_GetHCLKFreq>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4aa5      	ldr	r2, [pc, #660]	; (8003068 <HAL_RCC_OscConfig+0x350>)
 8002dd4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dd6:	4ba5      	ldr	r3, [pc, #660]	; (800306c <HAL_RCC_OscConfig+0x354>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe ff9c 	bl	8001d18 <HAL_InitTick>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d039      	beq.n	8002e5a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e31f      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01e      	beq.n	8002e30 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df2:	f7ff fdab 	bl	800294c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002df6:	f7fe ffdd 	bl	8001db4 <HAL_GetTick>
 8002dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dfe:	f7fe ffd9 	bl	8001db4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e30c      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e10:	f7ff fdba 	bl	8002988 <LL_RCC_MSI_IsReady>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f1      	beq.n	8002dfe <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fdc3 	bl	80029aa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fde7 	bl	80029fc <LL_RCC_MSI_SetCalibTrimming>
 8002e2e:	e015      	b.n	8002e5c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e30:	f7ff fd9b 	bl	800296a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e34:	f7fe ffbe 	bl	8001db4 <HAL_GetTick>
 8002e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e3c:	f7fe ffba 	bl	8001db4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e2ed      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e4e:	f7ff fd9b 	bl	8002988 <LL_RCC_MSI_IsReady>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f1      	bne.n	8002e3c <HAL_RCC_OscConfig+0x124>
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d04e      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e68:	f7ff fdf1 	bl	8002a4e <LL_RCC_GetSysClkSource>
 8002e6c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6e:	f7ff feea 	bl	8002c46 <LL_RCC_PLL_GetMainSource>
 8002e72:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x16e>
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d10a      	bne.n	8002e9c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	f7ff fc01 	bl	800268c <LL_RCC_HSE_IsReady>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d039      	beq.n	8002f04 <HAL_RCC_OscConfig+0x1ec>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d135      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e2c6      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d102      	bne.n	8002eac <HAL_RCC_OscConfig+0x194>
 8002ea6:	f7ff fbd3 	bl	8002650 <LL_RCC_HSE_Enable>
 8002eaa:	e001      	b.n	8002eb0 <HAL_RCC_OscConfig+0x198>
 8002eac:	f7ff fbdf 	bl	800266e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe ff7c 	bl	8001db4 <HAL_GetTick>
 8002ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe ff78 	bl	8001db4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e2ab      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ed2:	f7ff fbdb 	bl	800268c <LL_RCC_HSE_IsReady>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f1      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x1a8>
 8002edc:	e013      	b.n	8002f06 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe ff69 	bl	8001db4 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee6:	f7fe ff65 	bl	8001db4 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e298      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ef8:	f7ff fbc8 	bl	800268c <LL_RCC_HSE_IsReady>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f1      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x1ce>
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d051      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f12:	f7ff fd9c 	bl	8002a4e <LL_RCC_GetSysClkSource>
 8002f16:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f18:	f7ff fe95 	bl	8002c46 <LL_RCC_PLL_GetMainSource>
 8002f1c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_OscConfig+0x218>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d113      	bne.n	8002f52 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d110      	bne.n	8002f52 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f30:	f7ff fbdc 	bl	80026ec <LL_RCC_HSI_IsReady>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x22e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e271      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fbe0 	bl	8002710 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f50:	e031      	b.n	8002fb6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d019      	beq.n	8002f8e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5a:	f7ff fba9 	bl	80026b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe ff29 	bl	8001db4 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe ff25 	bl	8001db4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e258      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f78:	f7ff fbb8 	bl	80026ec <LL_RCC_HSI_IsReady>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f1      	beq.n	8002f66 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fbc2 	bl	8002710 <LL_RCC_HSI_SetCalibTrimming>
 8002f8c:	e013      	b.n	8002fb6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8e:	f7ff fb9e 	bl	80026ce <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe ff0f 	bl	8001db4 <HAL_GetTick>
 8002f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe ff0b 	bl	8001db4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e23e      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fac:	f7ff fb9e 	bl	80026ec <LL_RCC_HSI_IsReady>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f1      	bne.n	8002f9a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80a4 	beq.w	8003118 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d077      	beq.n	80030c8 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d04b      	beq.n	800307c <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002fe4:	f7ff fc55 	bl	8002892 <LL_RCC_LSI1_IsReady>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d113      	bne.n	8003016 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002fee:	f7ff fc2e 	bl	800284e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ff2:	f7fe fedf 	bl	8001db4 <HAL_GetTick>
 8002ff6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ffa:	f7fe fedb 	bl	8001db4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e20e      	b.n	800342a <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800300c:	f7ff fc41 	bl	8002892 <LL_RCC_LSI1_IsReady>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f1      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003016:	f7ff fc4e 	bl	80028b6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fe fecb 	bl	8001db4 <HAL_GetTick>
 800301e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003022:	f7fe fec7 	bl	8001db4 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1fa      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003034:	f7ff fc61 	bl	80028fa <LL_RCC_LSI2_IsReady>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f1      	beq.n	8003022 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fc6b 	bl	800291e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003048:	f7ff fc12 	bl	8002870 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe feb2 	bl	8001db4 <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003052:	e00d      	b.n	8003070 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003054:	f7fe feae 	bl	8001db4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d906      	bls.n	8003070 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e1e1      	b.n	800342a <HAL_RCC_OscConfig+0x712>
 8003066:	bf00      	nop
 8003068:	20000008 	.word	0x20000008
 800306c:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003070:	f7ff fc0f 	bl	8002892 <LL_RCC_LSI1_IsReady>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1ec      	bne.n	8003054 <HAL_RCC_OscConfig+0x33c>
 800307a:	e04d      	b.n	8003118 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800307c:	f7ff fbe7 	bl	800284e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fe98 	bl	8001db4 <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003088:	f7fe fe94 	bl	8001db4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1c7      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800309a:	f7ff fbfa 	bl	8002892 <LL_RCC_LSI1_IsReady>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f1      	beq.n	8003088 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80030a4:	f7ff fc18 	bl	80028d8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030aa:	f7fe fe83 	bl	8001db4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1b6      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030bc:	f7ff fc1d 	bl	80028fa <LL_RCC_LSI2_IsReady>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f1      	bne.n	80030aa <HAL_RCC_OscConfig+0x392>
 80030c6:	e027      	b.n	8003118 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80030c8:	f7ff fc06 	bl	80028d8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe fe72 	bl	8001db4 <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030d4:	f7fe fe6e 	bl	8001db4 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1a1      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030e6:	f7ff fc08 	bl	80028fa <LL_RCC_LSI2_IsReady>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f1      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80030f0:	f7ff fbbe 	bl	8002870 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe fe5e 	bl	8001db4 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030fc:	f7fe fe5a 	bl	8001db4 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e18d      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800310e:	f7ff fbc0 	bl	8002892 <LL_RCC_LSI1_IsReady>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f1      	bne.n	80030fc <HAL_RCC_OscConfig+0x3e4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d05b      	beq.n	80031dc <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003124:	4ba7      	ldr	r3, [pc, #668]	; (80033c4 <HAL_RCC_OscConfig+0x6ac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d114      	bne.n	800315a <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003130:	f7ff fa5e 	bl	80025f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003134:	f7fe fe3e 	bl	8001db4 <HAL_GetTick>
 8003138:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7fe fe3a 	bl	8001db4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e16d      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314e:	4b9d      	ldr	r3, [pc, #628]	; (80033c4 <HAL_RCC_OscConfig+0x6ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_RCC_OscConfig+0x450>
 8003162:	f7ff fb1e 	bl	80027a2 <LL_RCC_LSE_Enable>
 8003166:	e00c      	b.n	8003182 <HAL_RCC_OscConfig+0x46a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d104      	bne.n	800317a <HAL_RCC_OscConfig+0x462>
 8003170:	f7ff fb39 	bl	80027e6 <LL_RCC_LSE_EnableBypass>
 8003174:	f7ff fb15 	bl	80027a2 <LL_RCC_LSE_Enable>
 8003178:	e003      	b.n	8003182 <HAL_RCC_OscConfig+0x46a>
 800317a:	f7ff fb23 	bl	80027c4 <LL_RCC_LSE_Disable>
 800317e:	f7ff fb43 	bl	8002808 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d014      	beq.n	80031b4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fe fe13 	bl	8001db4 <HAL_GetTick>
 800318e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fe0f 	bl	8001db4 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e140      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031a8:	f7ff fb3f 	bl	800282a <LL_RCC_LSE_IsReady>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ef      	beq.n	8003192 <HAL_RCC_OscConfig+0x47a>
 80031b2:	e013      	b.n	80031dc <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fdfe 	bl	8001db4 <HAL_GetTick>
 80031b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe fdfa 	bl	8001db4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e12b      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 80031d2:	f7ff fb2a 	bl	800282a <LL_RCC_LSE_IsReady>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ef      	bne.n	80031bc <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d02c      	beq.n	8003242 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d014      	beq.n	800321a <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031f0:	f7ff faa3 	bl	800273a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe fdde 	bl	8001db4 <HAL_GetTick>
 80031f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031fc:	f7fe fdda 	bl	8001db4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e10d      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800320e:	f7ff fab6 	bl	800277e <LL_RCC_HSI48_IsReady>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f1      	beq.n	80031fc <HAL_RCC_OscConfig+0x4e4>
 8003218:	e013      	b.n	8003242 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800321a:	f7ff fa9f 	bl	800275c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fdc9 	bl	8001db4 <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003226:	f7fe fdc5 	bl	8001db4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0f8      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003238:	f7ff faa1 	bl	800277e <LL_RCC_HSI48_IsReady>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f1      	bne.n	8003226 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80ee 	beq.w	8003428 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324c:	f7ff fbff 	bl	8002a4e <LL_RCC_GetSysClkSource>
 8003250:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	2b02      	cmp	r3, #2
 8003260:	f040 80b4 	bne.w	80033cc <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0203 	and.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	429a      	cmp	r2, r3
 8003270:	d123      	bne.n	80032ba <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d11c      	bne.n	80032ba <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d114      	bne.n	80032ba <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d10d      	bne.n	80032ba <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d05d      	beq.n	8003376 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	d058      	beq.n	8003372 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0ab      	b.n	800342a <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032d2:	f7ff fc72 	bl	8002bba <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032d6:	f7fe fd6d 	bl	8001db4 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe fd69 	bl	8001db4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e09c      	b.n	800342a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1ef      	bne.n	80032de <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_RCC_OscConfig+0x6b0>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003316:	0212      	lsls	r2, r2, #8
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003324:	4311      	orrs	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800332a:	430a      	orrs	r2, r1
 800332c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003330:	4313      	orrs	r3, r2
 8003332:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003334:	f7ff fc32 	bl	8002b9c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003346:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003348:	f7fe fd34 	bl	8001db4 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fd30 	bl	8001db4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e063      	b.n	800342a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ef      	beq.n	8003350 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003370:	e05a      	b.n	8003428 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e059      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d151      	bne.n	8003428 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003384:	f7ff fc0a 	bl	8002b9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003398:	f7fe fd0c 	bl	8001db4 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fd08 	bl	8001db4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e03b      	b.n	800342a <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ef      	beq.n	80033a0 <HAL_RCC_OscConfig+0x688>
 80033c0:	e032      	b.n	8003428 <HAL_RCC_OscConfig+0x710>
 80033c2:	bf00      	nop
 80033c4:	58000400 	.word	0x58000400
 80033c8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d028      	beq.n	8003424 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	f7ff fbf2 	bl	8002bba <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80033d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe fcdb 	bl	8001db4 <HAL_GetTick>
 80033fe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe fcd7 	bl	8001db4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ef      	bne.n	8003402 <HAL_RCC_OscConfig+0x6ea>
 8003422:	e001      	b.n	8003428 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3734      	adds	r7, #52	; 0x34
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}
 8003432:	bf00      	nop

08003434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e12d      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b98      	ldr	r3, [pc, #608]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d91b      	bls.n	800348e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b95      	ldr	r3, [pc, #596]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	4993      	ldr	r1, [pc, #588]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003466:	f7fe fca5 	bl	8001db4 <HAL_GetTick>
 800346a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346c:	e008      	b.n	8003480 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800346e:	f7fe fca1 	bl	8001db4 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e111      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003480:	4b8a      	ldr	r3, [pc, #552]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d1ef      	bne.n	800346e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fae1 	bl	8002a66 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034a4:	f7fe fc86 	bl	8001db4 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ac:	f7fe fc82 	bl	8001db4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0f2      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034be:	f7ff fbce 	bl	8002c5e <LL_RCC_IsActiveFlag_HPRE>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f1      	beq.n	80034ac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d016      	beq.n	8003502 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fad8 	bl	8002a8e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034de:	f7fe fc69 	bl	8001db4 <HAL_GetTick>
 80034e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034e6:	f7fe fc65 	bl	8001db4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0d5      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034f8:	f7ff fbc3 	bl	8002c82 <LL_RCC_IsActiveFlag_C2HPRE>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f1      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fad1 	bl	8002aba <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003518:	f7fe fc4c 	bl	8001db4 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003520:	f7fe fc48 	bl	8001db4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0b8      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003532:	f7ff fbb9 	bl	8002ca8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f1      	beq.n	8003520 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d016      	beq.n	8003576 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff facb 	bl	8002ae8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003552:	f7fe fc2f 	bl	8001db4 <HAL_GetTick>
 8003556:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800355a:	f7fe fc2b 	bl	8001db4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e09b      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800356c:	f7ff fbaf 	bl	8002cce <LL_RCC_IsActiveFlag_PPRE1>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f1      	beq.n	800355a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d017      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fac1 	bl	8002b10 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800358e:	f7fe fc11 	bl	8001db4 <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003596:	f7fe fc0d 	bl	8001db4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e07d      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035a8:	f7ff fba3 	bl	8002cf2 <LL_RCC_IsActiveFlag_PPRE2>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f1      	beq.n	8003596 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d043      	beq.n	8003646 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035c6:	f7ff f861 	bl	800268c <LL_RCC_HSE_IsReady>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11e      	bne.n	800360e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e067      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d106      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035dc:	f7ff fafc 	bl	8002bd8 <LL_RCC_PLL_IsReady>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e05c      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035f2:	f7ff f9c9 	bl	8002988 <LL_RCC_MSI_IsReady>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d108      	bne.n	800360e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e051      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003600:	f7ff f874 	bl	80026ec <LL_RCC_HSI_IsReady>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e04a      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fa07 	bl	8002a26 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003618:	f7fe fbcc 	bl	8001db4 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fe fbc8 	bl	8001db4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e036      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	f7ff fa0a 	bl	8002a4e <LL_RCC_GetSysClkSource>
 800363a:	4602      	mov	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	429a      	cmp	r2, r3
 8003644:	d1ec      	bne.n	8003620 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d21b      	bcs.n	800368c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 0207 	bic.w	r2, r3, #7
 800365c:	4913      	ldr	r1, [pc, #76]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003664:	f7fe fba6 	bl	8001db4 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	e008      	b.n	800367e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800366c:	f7fe fba2 	bl	8001db4 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e012      	b.n	80036a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d1ef      	bne.n	800366c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800368c:	f000 f87e 	bl	800378c <HAL_RCC_GetHCLKFreq>
 8003690:	4603      	mov	r3, r0
 8003692:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_RCC_ClockConfig+0x27c>)
 8003694:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003696:	f7fe fb99 	bl	8001dcc <HAL_GetTickPrio>
 800369a:	4603      	mov	r3, r0
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fb3b 	bl	8001d18 <HAL_InitTick>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	58004000 	.word	0x58004000
 80036b0:	20000008 	.word	0x20000008

080036b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ba:	f7ff f9c8 	bl	8002a4e <LL_RCC_GetSysClkSource>
 80036be:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036c6:	f7ff f984 	bl	80029d2 <LL_RCC_MSI_GetRange>
 80036ca:	4603      	mov	r3, r0
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	4a2b      	ldr	r2, [pc, #172]	; (8003780 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e04b      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d102      	bne.n	80036e8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e045      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d10a      	bne.n	8003704 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036ee:	f7fe ff9d 	bl	800262c <LL_RCC_HSE_IsEnabledDiv2>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d102      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e03a      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e037      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003704:	f7ff fa9f 	bl	8002c46 <LL_RCC_PLL_GetMainSource>
 8003708:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d003      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x64>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d003      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x6a>
 8003716:	e00d      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HAL_RCC_GetSysClockFreq+0xd0>)
 800371a:	60bb      	str	r3, [r7, #8]
        break;
 800371c:	e015      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800371e:	f7fe ff85 	bl	800262c <LL_RCC_HSE_IsEnabledDiv2>
 8003722:	4603      	mov	r3, r0
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003728:	4b16      	ldr	r3, [pc, #88]	; (8003784 <HAL_RCC_GetSysClockFreq+0xd0>)
 800372a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800372c:	e00d      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003730:	60bb      	str	r3, [r7, #8]
        break;
 8003732:	e00a      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003734:	f7ff f94d 	bl	80029d2 <LL_RCC_MSI_GetRange>
 8003738:	4603      	mov	r3, r0
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	60bb      	str	r3, [r7, #8]
        break;
 8003748:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800374a:	f7ff fa57 	bl	8002bfc <LL_RCC_PLL_GetN>
 800374e:	4602      	mov	r2, r0
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	fb03 f402 	mul.w	r4, r3, r2
 8003756:	f7ff fa6a 	bl	8002c2e <LL_RCC_PLL_GetDivider>
 800375a:	4603      	mov	r3, r0
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	3301      	adds	r3, #1
 8003760:	fbb4 f4f3 	udiv	r4, r4, r3
 8003764:	f7ff fa57 	bl	8002c16 <LL_RCC_PLL_GetR>
 8003768:	4603      	mov	r3, r0
 800376a:	0f5b      	lsrs	r3, r3, #29
 800376c:	3301      	adds	r3, #1
 800376e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003772:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}
 800377e:	bf00      	nop
 8003780:	08011020 	.word	0x08011020
 8003784:	00f42400 	.word	0x00f42400
 8003788:	01e84800 	.word	0x01e84800

0800378c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b598      	push	{r3, r4, r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003790:	f7ff ff90 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8003794:	4604      	mov	r4, r0
 8003796:	f7ff f9cf 	bl	8002b38 <LL_RCC_GetAHBPrescaler>
 800379a:	4603      	mov	r3, r0
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	4a03      	ldr	r2, [pc, #12]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80037a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd98      	pop	{r3, r4, r7, pc}
 80037b0:	08010fc0 	.word	0x08010fc0

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b598      	push	{r3, r4, r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037b8:	f7ff ffe8 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037bc:	4604      	mov	r4, r0
 80037be:	f7ff f9d5 	bl	8002b6c <LL_RCC_GetAPB1Prescaler>
 80037c2:	4603      	mov	r3, r0
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd98      	pop	{r3, r4, r7, pc}
 80037dc:	08011000 	.word	0x08011000

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b598      	push	{r3, r4, r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037e4:	f7ff ffd2 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037e8:	4604      	mov	r4, r0
 80037ea:	f7ff f9cb 	bl	8002b84 <LL_RCC_GetAPB2Prescaler>
 80037ee:	4603      	mov	r3, r0
 80037f0:	0adb      	lsrs	r3, r3, #11
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	4a04      	ldr	r2, [pc, #16]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd98      	pop	{r3, r4, r7, pc}
 8003808:	08011000 	.word	0x08011000

0800380c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2bb0      	cmp	r3, #176	; 0xb0
 8003818:	d903      	bls.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e007      	b.n	8003832 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	4a11      	ldr	r2, [pc, #68]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800382c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003830:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003832:	f7ff f98d 	bl	8002b50 <LL_RCC_GetAHB4Prescaler>
 8003836:	4603      	mov	r3, r0
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	0c9c      	lsrs	r4, r3, #18
 8003856:	f7fe fedb 	bl	8002610 <HAL_PWREx_GetVoltageRange>
 800385a:	4603      	mov	r3, r0
 800385c:	4619      	mov	r1, r3
 800385e:	4620      	mov	r0, r4
 8003860:	f000 f80c 	bl	800387c <RCC_SetFlashLatency>
 8003864:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	bf00      	nop
 8003870:	08011020 	.word	0x08011020
 8003874:	08010fc0 	.word	0x08010fc0
 8003878:	431bde83 	.word	0x431bde83

0800387c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b093      	sub	sp, #76	; 0x4c
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <RCC_SetFlashLatency+0xe8>)
 8003888:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800388c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800388e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003892:	4a35      	ldr	r2, [pc, #212]	; (8003968 <RCC_SetFlashLatency+0xec>)
 8003894:	f107 031c 	add.w	r3, r7, #28
 8003898:	ca07      	ldmia	r2, {r0, r1, r2}
 800389a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800389e:	4b33      	ldr	r3, [pc, #204]	; (800396c <RCC_SetFlashLatency+0xf0>)
 80038a0:	f107 040c 	add.w	r4, r7, #12
 80038a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038aa:	2300      	movs	r3, #0
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b4:	d11a      	bne.n	80038ec <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	643b      	str	r3, [r7, #64]	; 0x40
 80038ba:	e013      	b.n	80038e4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3348      	adds	r3, #72	; 0x48
 80038c2:	443b      	add	r3, r7
 80038c4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d807      	bhi.n	80038de <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	3348      	adds	r3, #72	; 0x48
 80038d4:	443b      	add	r3, r7
 80038d6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038da:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80038dc:	e020      	b.n	8003920 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e0:	3301      	adds	r3, #1
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
 80038e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d9e8      	bls.n	80038bc <RCC_SetFlashLatency+0x40>
 80038ea:	e019      	b.n	8003920 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f0:	e013      	b.n	800391a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	3348      	adds	r3, #72	; 0x48
 80038f8:	443b      	add	r3, r7
 80038fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	d807      	bhi.n	8003914 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	3348      	adds	r3, #72	; 0x48
 800390a:	443b      	add	r3, r7
 800390c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003912:	e005      	b.n	8003920 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	3301      	adds	r3, #1
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	2b02      	cmp	r3, #2
 800391e:	d9e8      	bls.n	80038f2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <RCC_SetFlashLatency+0xf4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 0207 	bic.w	r2, r3, #7
 8003928:	4911      	ldr	r1, [pc, #68]	; (8003970 <RCC_SetFlashLatency+0xf4>)
 800392a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003930:	f7fe fa40 	bl	8001db4 <HAL_GetTick>
 8003934:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003936:	e008      	b.n	800394a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003938:	f7fe fa3c 	bl	8001db4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e007      	b.n	800395a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <RCC_SetFlashLatency+0xf4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003954:	429a      	cmp	r2, r3
 8003956:	d1ef      	bne.n	8003938 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	374c      	adds	r7, #76	; 0x4c
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}
 8003962:	bf00      	nop
 8003964:	0800f594 	.word	0x0800f594
 8003968:	0800f5a4 	.word	0x0800f5a4
 800396c:	0800f5b0 	.word	0x0800f5b0
 8003970:	58004000 	.word	0x58004000

08003974 <LL_RCC_LSE_IsEnabled>:
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <LL_RCC_LSE_IsEnabled+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_RCC_LSE_IsEnabled+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_RCC_LSE_IsReady>:
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d101      	bne.n	80039b0 <LL_RCC_LSE_IsReady+0x18>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <LL_RCC_LSE_IsReady+0x1a>
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_RCC_MSI_EnablePLLMode>:
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ca:	f043 0304 	orr.w	r3, r3, #4
 80039ce:	6013      	str	r3, [r2, #0]
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_RCC_SetRFWKPClockSource>:
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_RCC_SetSMPSClockSource>:
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f023 0203 	bic.w	r2, r3, #3
 8003a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_RCC_SetSMPSPrescaler>:
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <LL_RCC_SetUSARTClockSource>:
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 0203 	bic.w	r2, r3, #3
 8003a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <LL_RCC_SetLPUARTClockSource>:
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_RCC_SetI2CClockSource>:
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	401a      	ands	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_SetLPTIMClockSource>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	43db      	mvns	r3, r3
 8003b00:	401a      	ands	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_RCC_SetSAIClockSource>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_SetRNGClockSource>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_RCC_SetCLK48ClockSource>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_SetUSBClockSource>:
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ffe3 	bl	8003b74 <LL_RCC_SetCLK48ClockSource>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <LL_RCC_SetADCClockSource>:
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_SetRTCClockSource>:
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_RCC_GetRTCClockSource>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_RCC_ForceBackupDomainReset>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c62:	bf00      	nop
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_RCC_PLLSAI1_Enable>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_RCC_PLLSAI1_Disable>:
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c9c:	6013      	str	r3, [r2, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_RCC_PLLSAI1_IsReady>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cba:	d101      	bne.n	8003cc0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d034      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cf0:	d021      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003cf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cf6:	d81b      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cfc:	d01d      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d02:	d815      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0c:	d110      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d1e:	e00d      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f94d 	bl	8003fc4 <RCCEx_PLLSAI1_ConfigNP>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d2e:	e005      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	77fb      	strb	r3, [r7, #31]
        break;
 8003d34:	e002      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3c:	7ffb      	ldrb	r3, [r7, #31]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fee8 	bl	8003b1c <LL_RCC_SetSAIClockSource>
 8003d4c:	e001      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4e:	7ffb      	ldrb	r3, [r7, #31]
 8003d50:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d046      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003d5e:	f7ff ff56 	bl	8003c0e <LL_RCC_GetRTCClockSource>
 8003d62:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d03c      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d6e:	f7fe fc3f 	bl	80025f0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff30 	bl	8003be2 <LL_RCC_SetRTCClockSource>
 8003d82:	e02e      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003d8e:	f7ff ff4b 	bl	8003c28 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d92:	f7ff ff5a 	bl	8003c4a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003dae:	f7ff fde1 	bl	8003974 <LL_RCC_LSE_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d114      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003db8:	f7fd fffc 	bl	8001db4 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fd fff8 	bl	8001db4 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d902      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	77fb      	strb	r3, [r7, #31]
              break;
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003dd8:	f7ff fdde 	bl	8003998 <LL_RCC_LSE_IsReady>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d1ee      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003de2:	7ffb      	ldrb	r3, [r7, #31]
 8003de4:	77bb      	strb	r3, [r7, #30]
 8003de6:	e001      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fe2a 	bl	8003a56 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fe35 	bl	8003a82 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fe5d 	bl	8003ae8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fe52 	bl	8003ae8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fe2a 	bl	8003aae <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fe1f 	bl	8003aae <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d022      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fe8d 	bl	8003ba0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f8e3 	bl	800407a <RCCEx_PLLSAI1_ConfigNQ>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d02b      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d008      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee0:	d003      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fe2a 	bl	8003b48 <LL_RCC_SetRNGClockSource>
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	2000      	movs	r0, #0
 8003f02:	f7ff fe21 	bl	8003b48 <LL_RCC_SetRNGClockSource>
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff fe34 	bl	8003b74 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003f14:	d107      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f24:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d022      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fe3d 	bl	8003bb6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f44:	d107      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f8e3 	bl	8004130 <RCCEx_PLLSAI1_ConfigNR>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003f6e:	7ffb      	ldrb	r3, [r7, #31]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003f74:	7ffb      	ldrb	r3, [r7, #31]
 8003f76:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fd26 	bl	80039da <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fd45 	bl	8003a2e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fd2c 	bl	8003a06 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003fae:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003fbc:	f7ff fcfe 	bl	80039bc <LL_RCC_MSI_EnablePLLMode>
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fd0:	f7ff fe5b 	bl	8003c8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fd4:	f7fd feee 	bl	8001db4 <HAL_GetTick>
 8003fd8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fda:	e009      	b.n	8003ff0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fdc:	f7fd feea 	bl	8001db4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d902      	bls.n	8003ff0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	73fb      	strb	r3, [r7, #15]
      break;
 8003fee:	e004      	b.n	8003ffa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ff0:	f7ff fe5a 	bl	8003ca8 <LL_RCC_PLLSAI1_IsReady>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d137      	bne.n	8004070 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004014:	4313      	orrs	r3, r2
 8004016:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800402a:	4313      	orrs	r3, r2
 800402c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800402e:	f7ff fe1d 	bl	8003c6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004032:	f7fd febf 	bl	8001db4 <HAL_GetTick>
 8004036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004038:	e009      	b.n	800404e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800403a:	f7fd febb 	bl	8001db4 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d902      	bls.n	800404e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	73fb      	strb	r3, [r7, #15]
        break;
 800404c:	e004      	b.n	8004058 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800404e:	f7ff fe2b 	bl	8003ca8 <LL_RCC_PLLSAI1_IsReady>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d1f0      	bne.n	800403a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d108      	bne.n	8004070 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800406c:	4313      	orrs	r3, r2
 800406e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004086:	f7ff fe00 	bl	8003c8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800408a:	f7fd fe93 	bl	8001db4 <HAL_GetTick>
 800408e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004090:	e009      	b.n	80040a6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004092:	f7fd fe8f 	bl	8001db4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d902      	bls.n	80040a6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	73fb      	strb	r3, [r7, #15]
      break;
 80040a4:	e004      	b.n	80040b0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040a6:	f7ff fdff 	bl	8003ca8 <LL_RCC_PLLSAI1_IsReady>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d137      	bne.n	8004126 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ca:	4313      	orrs	r3, r2
 80040cc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e0:	4313      	orrs	r3, r2
 80040e2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040e4:	f7ff fdc2 	bl	8003c6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fd fe64 	bl	8001db4 <HAL_GetTick>
 80040ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040ee:	e009      	b.n	8004104 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040f0:	f7fd fe60 	bl	8001db4 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d902      	bls.n	8004104 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	73fb      	strb	r3, [r7, #15]
        break;
 8004102:	e004      	b.n	800410e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004104:	f7ff fdd0 	bl	8003ca8 <LL_RCC_PLLSAI1_IsReady>
 8004108:	4603      	mov	r3, r0
 800410a:	2b01      	cmp	r3, #1
 800410c:	d1f0      	bne.n	80040f0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004122:	4313      	orrs	r3, r2
 8004124:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800413c:	f7ff fda5 	bl	8003c8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004140:	f7fd fe38 	bl	8001db4 <HAL_GetTick>
 8004144:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004146:	e009      	b.n	800415c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004148:	f7fd fe34 	bl	8001db4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d902      	bls.n	800415c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	73fb      	strb	r3, [r7, #15]
      break;
 800415a:	e004      	b.n	8004166 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800415c:	f7ff fda4 	bl	8003ca8 <LL_RCC_PLLSAI1_IsReady>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d137      	bne.n	80041dc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004180:	4313      	orrs	r3, r2
 8004182:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004196:	4313      	orrs	r3, r2
 8004198:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800419a:	f7ff fd67 	bl	8003c6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419e:	f7fd fe09 	bl	8001db4 <HAL_GetTick>
 80041a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041a4:	e009      	b.n	80041ba <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a6:	f7fd fe05 	bl	8001db4 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d902      	bls.n	80041ba <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	73fb      	strb	r3, [r7, #15]
        break;
 80041b8:	e004      	b.n	80041c4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041ba:	f7ff fd75 	bl	8003ca8 <LL_RCC_PLLSAI1_IsReady>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d1f0      	bne.n	80041a6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d108      	bne.n	80041dc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d8:	4313      	orrs	r3, r2
 80041da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e095      	b.n	8004324 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004208:	d009      	beq.n	800421e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	61da      	str	r2, [r3, #28]
 8004210:	e005      	b.n	800421e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fd fb3b 	bl	80018b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004254:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800425e:	d902      	bls.n	8004266 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	e002      	b.n	800426c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800426a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004274:	d007      	beq.n	8004286 <HAL_SPI_Init+0xa0>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800427e:	d002      	beq.n	8004286 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	ea42 0103 	orr.w	r1, r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 0204 	and.w	r2, r3, #4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004302:	ea42 0103 	orr.w	r1, r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800433a:	2301      	movs	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_SPI_TransmitReceive+0x26>
 800434e:	2302      	movs	r3, #2
 8004350:	e1fb      	b.n	800474a <HAL_SPI_TransmitReceive+0x41e>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800435a:	f7fd fd2b 	bl	8001db4 <HAL_GetTick>
 800435e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004366:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800436e:	887b      	ldrh	r3, [r7, #2]
 8004370:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004372:	887b      	ldrh	r3, [r7, #2]
 8004374:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004376:	7efb      	ldrb	r3, [r7, #27]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d00e      	beq.n	800439a <HAL_SPI_TransmitReceive+0x6e>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004382:	d106      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x66>
 800438c:	7efb      	ldrb	r3, [r7, #27]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d003      	beq.n	800439a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004392:	2302      	movs	r3, #2
 8004394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004398:	e1cd      	b.n	8004736 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_SPI_TransmitReceive+0x80>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_SPI_TransmitReceive+0x80>
 80043a6:	887b      	ldrh	r3, [r7, #2]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d103      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043b2:	e1c0      	b.n	8004736 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d003      	beq.n	80043c8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2205      	movs	r2, #5
 80043c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	887a      	ldrh	r2, [r7, #2]
 80043ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800440a:	d802      	bhi.n	8004412 <HAL_SPI_TransmitReceive+0xe6>
 800440c:	8a3b      	ldrh	r3, [r7, #16]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d908      	bls.n	8004424 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e007      	b.n	8004434 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004432:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d007      	beq.n	8004452 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800445a:	d97c      	bls.n	8004556 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_TransmitReceive+0x13e>
 8004464:	8a7b      	ldrh	r3, [r7, #18]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d169      	bne.n	800453e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448e:	e056      	b.n	800453e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d11b      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x1aa>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d016      	beq.n	80044d6 <HAL_SPI_TransmitReceive+0x1aa>
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d113      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	881a      	ldrh	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	1c9a      	adds	r2, r3, #2
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d11c      	bne.n	800451e <HAL_SPI_TransmitReceive+0x1f2>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d016      	beq.n	800451e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	b292      	uxth	r2, r2
 80044fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800451a:	2301      	movs	r3, #1
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800451e:	f7fd fc49 	bl	8001db4 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452a:	429a      	cmp	r2, r3
 800452c:	d807      	bhi.n	800453e <HAL_SPI_TransmitReceive+0x212>
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d003      	beq.n	800453e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800453c:	e0fb      	b.n	8004736 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1a3      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x164>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d19d      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x164>
 8004554:	e0df      	b.n	8004716 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x23a>
 800455e:	8a7b      	ldrh	r3, [r7, #18]
 8004560:	2b01      	cmp	r3, #1
 8004562:	f040 80cb 	bne.w	80046fc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d912      	bls.n	8004596 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	881a      	ldrh	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b02      	subs	r3, #2
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004594:	e0b2      	b.n	80046fc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045bc:	e09e      	b.n	80046fc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d134      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x30a>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02f      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x30a>
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d12c      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d912      	bls.n	800460c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b02      	subs	r3, #2
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	87da      	strh	r2, [r3, #62]	; 0x3e
 800460a:	e012      	b.n	8004632 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	7812      	ldrb	r2, [r2, #0]
 8004618:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d148      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x3aa>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d042      	beq.n	80046d6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d923      	bls.n	80046a4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	b292      	uxth	r2, r2
 8004668:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	1c9a      	adds	r2, r3, #2
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b02      	subs	r3, #2
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d81f      	bhi.n	80046d2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	e016      	b.n	80046d2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f103 020c 	add.w	r2, r3, #12
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	7812      	ldrb	r2, [r2, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d2:	2301      	movs	r3, #1
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046d6:	f7fd fb6d 	bl	8001db4 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d803      	bhi.n	80046ee <HAL_SPI_TransmitReceive+0x3c2>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x3c8>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046fa:	e01c      	b.n	8004736 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	f47f af5b 	bne.w	80045be <HAL_SPI_TransmitReceive+0x292>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	f47f af54 	bne.w	80045be <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f930 	bl	8004980 <SPI_EndRxTxTransaction>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d006      	beq.n	8004734 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	661a      	str	r2, [r3, #96]	; 0x60
 8004732:	e000      	b.n	8004736 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004734:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800474a:	4618      	mov	r0, r3
 800474c:	3728      	adds	r7, #40	; 0x28
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004764:	f7fd fb26 	bl	8001db4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	4413      	add	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004774:	f7fd fb1e 	bl	8001db4 <HAL_GetTick>
 8004778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800477a:	4b39      	ldr	r3, [pc, #228]	; (8004860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	015b      	lsls	r3, r3, #5
 8004780:	0d1b      	lsrs	r3, r3, #20
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800478a:	e054      	b.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d050      	beq.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004794:	f7fd fb0e 	bl	8001db4 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d902      	bls.n	80047aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d13d      	bne.n	8004826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c2:	d111      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047cc:	d004      	beq.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d6:	d107      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f0:	d10f      	bne.n	8004812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e017      	b.n	8004856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3b01      	subs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4013      	ands	r3, r2
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	429a      	cmp	r2, r3
 8004852:	d19b      	bne.n	800478c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000008 	.word	0x20000008

08004864 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004872:	f7fd fa9f 	bl	8001db4 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	4413      	add	r3, r2
 8004880:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004882:	f7fd fa97 	bl	8001db4 <HAL_GetTick>
 8004886:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004888:	4b3c      	ldr	r3, [pc, #240]	; (800497c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00da      	lsls	r2, r3, #3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	0d1b      	lsrs	r3, r3, #20
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80048a0:	e05f      	b.n	8004962 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048a8:	d106      	bne.n	80048b8 <SPI_WaitFifoStateUntilTimeout+0x54>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d050      	beq.n	8004962 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048c0:	f7fd fa78 	bl	8001db4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d902      	bls.n	80048d6 <SPI_WaitFifoStateUntilTimeout+0x72>
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d13d      	bne.n	8004952 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ee:	d111      	bne.n	8004914 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d004      	beq.n	8004904 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d107      	bne.n	8004914 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491c:	d10f      	bne.n	800493e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e010      	b.n	8004974 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3b01      	subs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d197      	bne.n	80048a2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000008 	.word	0x20000008

08004980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2200      	movs	r2, #0
 8004994:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff ff63 	bl	8004864 <SPI_WaitFifoStateUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	f043 0220 	orr.w	r2, r3, #32
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e027      	b.n	8004a04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2200      	movs	r2, #0
 80049bc:	2180      	movs	r1, #128	; 0x80
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff fec8 	bl	8004754 <SPI_WaitFlagStateUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e014      	b.n	8004a04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff ff3c 	bl	8004864 <SPI_WaitFifoStateUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	f043 0220 	orr.w	r2, r3, #32
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e000      	b.n	8004a04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <LL_RCC_GetUSARTClockSource>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4013      	ands	r3, r2
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <LL_RCC_GetLPUARTClockSource>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4013      	ands	r3, r2
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e042      	b.n	8004ae4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fc ff4f 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2224      	movs	r2, #36	; 0x24
 8004a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8c2 	bl	8004c18 <UART_SetConfig>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e022      	b.n	8004ae4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fade 	bl	8005068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fb65 	bl	80051ac <UART_CheckIdleState>
 8004ae2:	4603      	mov	r3, r0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	f040 8083 	bne.w	8004c0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_UART_Transmit+0x28>
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e07b      	b.n	8004c10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Transmit+0x3a>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e074      	b.n	8004c10 <HAL_UART_Transmit+0x124>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2221      	movs	r2, #33	; 0x21
 8004b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3e:	f7fd f939 	bl	8001db4 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	d108      	bne.n	8004b70 <HAL_UART_Transmit+0x84>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d104      	bne.n	8004b70 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e003      	b.n	8004b78 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b80:	e02c      	b.n	8004bdc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2180      	movs	r1, #128	; 0x80
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fb58 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e039      	b.n	8004c10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10b      	bne.n	8004bba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	e007      	b.n	8004bca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1cc      	bne.n	8004b82 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2140      	movs	r1, #64	; 0x40
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fb25 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e006      	b.n	8004c10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e000      	b.n	8004c10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
  }
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c1c:	b08c      	sub	sp, #48	; 0x30
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4baf      	ldr	r3, [pc, #700]	; (8004f04 <UART_SetConfig+0x2ec>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4aa4      	ldr	r2, [pc, #656]	; (8004f08 <UART_SetConfig+0x2f0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c80:	4313      	orrs	r3, r2
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f023 010f 	bic.w	r1, r3, #15
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a95      	ldr	r2, [pc, #596]	; (8004f0c <UART_SetConfig+0x2f4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d125      	bne.n	8004d08 <UART_SetConfig+0xf0>
 8004cbc:	2003      	movs	r0, #3
 8004cbe:	f7ff fea5 	bl	8004a0c <LL_RCC_GetUSARTClockSource>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d81b      	bhi.n	8004d00 <UART_SetConfig+0xe8>
 8004cc8:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0xb8>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004cf9 	.word	0x08004cf9
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce6:	e042      	b.n	8004d6e <UART_SetConfig+0x156>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cee:	e03e      	b.n	8004d6e <UART_SetConfig+0x156>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf6:	e03a      	b.n	8004d6e <UART_SetConfig+0x156>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	e036      	b.n	8004d6e <UART_SetConfig+0x156>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d06:	e032      	b.n	8004d6e <UART_SetConfig+0x156>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7e      	ldr	r2, [pc, #504]	; (8004f08 <UART_SetConfig+0x2f0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d12a      	bne.n	8004d68 <UART_SetConfig+0x150>
 8004d12:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004d16:	f7ff fe89 	bl	8004a2c <LL_RCC_GetLPUARTClockSource>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d20:	d01a      	beq.n	8004d58 <UART_SetConfig+0x140>
 8004d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d26:	d81b      	bhi.n	8004d60 <UART_SetConfig+0x148>
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2c:	d00c      	beq.n	8004d48 <UART_SetConfig+0x130>
 8004d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d32:	d815      	bhi.n	8004d60 <UART_SetConfig+0x148>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <UART_SetConfig+0x128>
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d008      	beq.n	8004d50 <UART_SetConfig+0x138>
 8004d3e:	e00f      	b.n	8004d60 <UART_SetConfig+0x148>
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d46:	e012      	b.n	8004d6e <UART_SetConfig+0x156>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4e:	e00e      	b.n	8004d6e <UART_SetConfig+0x156>
 8004d50:	2304      	movs	r3, #4
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d56:	e00a      	b.n	8004d6e <UART_SetConfig+0x156>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5e:	e006      	b.n	8004d6e <UART_SetConfig+0x156>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d66:	e002      	b.n	8004d6e <UART_SetConfig+0x156>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a65      	ldr	r2, [pc, #404]	; (8004f08 <UART_SetConfig+0x2f0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	f040 8097 	bne.w	8004ea8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d823      	bhi.n	8004dca <UART_SetConfig+0x1b2>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x170>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004dcb 	.word	0x08004dcb
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004dcb 	.word	0x08004dcb
 8004d98:	08004dbb 	.word	0x08004dbb
 8004d9c:	08004dcb 	.word	0x08004dcb
 8004da0:	08004dcb 	.word	0x08004dcb
 8004da4:	08004dcb 	.word	0x08004dcb
 8004da8:	08004dc3 	.word	0x08004dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dac:	f7fe fd02 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004db2:	e010      	b.n	8004dd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db4:	4b56      	ldr	r3, [pc, #344]	; (8004f10 <UART_SetConfig+0x2f8>)
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004db8:	e00d      	b.n	8004dd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dba:	f7fe fc7b 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8004dbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dc0:	e009      	b.n	8004dd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dc8:	e005      	b.n	8004dd6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 812b 	beq.w	8005034 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	4a4c      	ldr	r2, [pc, #304]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d305      	bcc.n	8004e0e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d903      	bls.n	8004e16 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e14:	e10e      	b.n	8005034 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	2200      	movs	r2, #0
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	60fa      	str	r2, [r7, #12]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	4a3c      	ldr	r2, [pc, #240]	; (8004f14 <UART_SetConfig+0x2fc>)
 8004e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e38:	f7fb fe8e 	bl	8000b58 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	020b      	lsls	r3, r1, #8
 8004e4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e52:	0202      	lsls	r2, r0, #8
 8004e54:	6979      	ldr	r1, [r7, #20]
 8004e56:	6849      	ldr	r1, [r1, #4]
 8004e58:	0849      	lsrs	r1, r1, #1
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	4605      	mov	r5, r0
 8004e60:	eb12 0804 	adds.w	r8, r2, r4
 8004e64:	eb43 0905 	adc.w	r9, r3, r5
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	469a      	mov	sl, r3
 8004e70:	4693      	mov	fp, r2
 8004e72:	4652      	mov	r2, sl
 8004e74:	465b      	mov	r3, fp
 8004e76:	4640      	mov	r0, r8
 8004e78:	4649      	mov	r1, r9
 8004e7a:	f7fb fe6d 	bl	8000b58 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4613      	mov	r3, r2
 8004e84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8c:	d308      	bcc.n	8004ea0 <UART_SetConfig+0x288>
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e94:	d204      	bcs.n	8004ea0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e0c9      	b.n	8005034 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ea6:	e0c5      	b.n	8005034 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb0:	d16e      	bne.n	8004f90 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	2b07      	cmp	r3, #7
 8004eba:	d82d      	bhi.n	8004f18 <UART_SetConfig+0x300>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x2ac>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ee5 	.word	0x08004ee5
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004f19 	.word	0x08004f19
 8004ed0:	08004ef3 	.word	0x08004ef3
 8004ed4:	08004f19 	.word	0x08004f19
 8004ed8:	08004f19 	.word	0x08004f19
 8004edc:	08004f19 	.word	0x08004f19
 8004ee0:	08004efb 	.word	0x08004efb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7fe fc7c 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8004ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eea:	e01b      	b.n	8004f24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eec:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <UART_SetConfig+0x2f8>)
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef0:	e018      	b.n	8004f24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef2:	f7fe fbdf 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8004ef6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ef8:	e014      	b.n	8004f24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f00:	e010      	b.n	8004f24 <UART_SetConfig+0x30c>
 8004f02:	bf00      	nop
 8004f04:	cfff69f3 	.word	0xcfff69f3
 8004f08:	40008000 	.word	0x40008000
 8004f0c:	40013800 	.word	0x40013800
 8004f10:	00f42400 	.word	0x00f42400
 8004f14:	08011060 	.word	0x08011060
      default:
        pclk = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8084 	beq.w	8005034 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	4a4b      	ldr	r2, [pc, #300]	; (8005060 <UART_SetConfig+0x448>)
 8004f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f3e:	005a      	lsls	r2, r3, #1
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	441a      	add	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d916      	bls.n	8004f88 <UART_SetConfig+0x370>
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f60:	d212      	bcs.n	8004f88 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f023 030f 	bic.w	r3, r3, #15
 8004f6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	8bfb      	ldrh	r3, [r7, #30]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	8bfa      	ldrh	r2, [r7, #30]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	e055      	b.n	8005034 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f8e:	e051      	b.n	8005034 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f94:	3b01      	subs	r3, #1
 8004f96:	2b07      	cmp	r3, #7
 8004f98:	d821      	bhi.n	8004fde <UART_SetConfig+0x3c6>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <UART_SetConfig+0x388>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fdf 	.word	0x08004fdf
 8004fac:	08004fcf 	.word	0x08004fcf
 8004fb0:	08004fdf 	.word	0x08004fdf
 8004fb4:	08004fdf 	.word	0x08004fdf
 8004fb8:	08004fdf 	.word	0x08004fdf
 8004fbc:	08004fd7 	.word	0x08004fd7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc0:	f7fe fc0e 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8004fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fc6:	e010      	b.n	8004fea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b26      	ldr	r3, [pc, #152]	; (8005064 <UART_SetConfig+0x44c>)
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fcc:	e00d      	b.n	8004fea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fce:	f7fe fb71 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8004fd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fd4:	e009      	b.n	8004fea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fdc:	e005      	b.n	8004fea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fe8:	bf00      	nop
    }

    if (pclk != 0U)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d021      	beq.n	8005034 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <UART_SetConfig+0x448>)
 8004ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	441a      	add	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	2b0f      	cmp	r3, #15
 800501a:	d908      	bls.n	800502e <UART_SetConfig+0x416>
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005022:	d204      	bcs.n	800502e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a3a      	ldr	r2, [r7, #32]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	e002      	b.n	8005034 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2201      	movs	r2, #1
 8005038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2201      	movs	r2, #1
 8005040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2200      	movs	r2, #0
 8005048:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2200      	movs	r2, #0
 800504e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005050:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005054:	4618      	mov	r0, r3
 8005056:	3730      	adds	r7, #48	; 0x30
 8005058:	46bd      	mov	sp, r7
 800505a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505e:	bf00      	nop
 8005060:	08011060 	.word	0x08011060
 8005064:	00f42400 	.word	0x00f42400

08005068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01a      	beq.n	800517e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005166:	d10a      	bne.n	800517e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051bc:	f7fc fdfa 	bl	8001db4 <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d10e      	bne.n	80051ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f82f 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e025      	b.n	800523a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d10e      	bne.n	800521a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f819 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e00f      	b.n	800523a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005252:	e062      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	d05e      	beq.n	800531a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525c:	f7fc fdaa 	bl	8001db4 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <UART_WaitOnFlagUntilTimeout+0x30>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11d      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005280:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e045      	b.n	800533a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02e      	beq.n	800531a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ca:	d126      	bne.n	800531a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e00f      	b.n	800533a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	429a      	cmp	r2, r3
 8005336:	d08d      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_UARTEx_DisableFifoMode+0x16>
 8005354:	2302      	movs	r3, #2
 8005356:	e027      	b.n	80053a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2224      	movs	r2, #36	; 0x24
 8005364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005386:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e02d      	b.n	8005428 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2224      	movs	r2, #36	; 0x24
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f84f 	bl	80054ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005444:	2302      	movs	r3, #2
 8005446:	e02d      	b.n	80054a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2224      	movs	r2, #36	; 0x24
 8005454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0201 	bic.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f811 	bl	80054ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d108      	bne.n	80054ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054cc:	e031      	b.n	8005532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054ce:	2308      	movs	r3, #8
 80054d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054d2:	2308      	movs	r3, #8
 80054d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	0e5b      	lsrs	r3, r3, #25
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	0f5b      	lsrs	r3, r3, #29
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054f6:	7bbb      	ldrb	r3, [r7, #14]
 80054f8:	7b3a      	ldrb	r2, [r7, #12]
 80054fa:	4911      	ldr	r1, [pc, #68]	; (8005540 <UARTEx_SetNbDataToProcess+0x94>)
 80054fc:	5c8a      	ldrb	r2, [r1, r2]
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005502:	7b3a      	ldrb	r2, [r7, #12]
 8005504:	490f      	ldr	r1, [pc, #60]	; (8005544 <UARTEx_SetNbDataToProcess+0x98>)
 8005506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005508:	fb93 f3f2 	sdiv	r3, r3, r2
 800550c:	b29a      	uxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	7b7a      	ldrb	r2, [r7, #13]
 8005518:	4909      	ldr	r1, [pc, #36]	; (8005540 <UARTEx_SetNbDataToProcess+0x94>)
 800551a:	5c8a      	ldrb	r2, [r1, r2]
 800551c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005520:	7b7a      	ldrb	r2, [r7, #13]
 8005522:	4908      	ldr	r1, [pc, #32]	; (8005544 <UARTEx_SetNbDataToProcess+0x98>)
 8005524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005526:	fb93 f3f2 	sdiv	r3, r3, r2
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	08011078 	.word	0x08011078
 8005544:	08011080 	.word	0x08011080

08005548 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005550:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005554:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	b29b      	uxth	r3, r3
 8005562:	43db      	mvns	r3, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	4013      	ands	r3, r2
 8005568:	b29a      	uxth	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800557e:	b084      	sub	sp, #16
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	f107 0014 	add.w	r0, r7, #20
 800558c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	b004      	add	sp, #16
 80055be:	4770      	bx	lr

080055c0 <get_sparse_data>:
 80055c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c2:	4606      	mov	r6, r0
 80055c4:	b087      	sub	sp, #28
 80055c6:	6840      	ldr	r0, [r0, #4]
 80055c8:	460f      	mov	r7, r1
 80055ca:	4615      	mov	r5, r2
 80055cc:	f001 fb22 	bl	8006c14 <acc_service_sparse_get_next_by_reference>
 80055d0:	4604      	mov	r4, r0
 80055d2:	b1f0      	cbz	r0, 8005612 <get_sparse_data+0x52>
 80055d4:	782b      	ldrb	r3, [r5, #0]
 80055d6:	b15b      	cbz	r3, 80055f0 <get_sparse_data+0x30>
 80055d8:	4c1c      	ldr	r4, [pc, #112]	; (800564c <get_sparse_data+0x8c>)
 80055da:	4a1d      	ldr	r2, [pc, #116]	; (8005650 <get_sparse_data+0x90>)
 80055dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055de:	491d      	ldr	r1, [pc, #116]	; (8005654 <get_sparse_data+0x94>)
 80055e0:	2000      	movs	r0, #0
 80055e2:	4798      	blx	r3
 80055e4:	786b      	ldrb	r3, [r5, #1]
 80055e6:	b9e3      	cbnz	r3, 8005622 <get_sparse_data+0x62>
 80055e8:	2400      	movs	r4, #0
 80055ea:	4620      	mov	r0, r4
 80055ec:	b007      	add	sp, #28
 80055ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f0:	786b      	ldrb	r3, [r5, #1]
 80055f2:	68f5      	ldr	r5, [r6, #12]
 80055f4:	b9fb      	cbnz	r3, 8005636 <get_sparse_data+0x76>
 80055f6:	b14d      	cbz	r5, 800560c <get_sparse_data+0x4c>
 80055f8:	6870      	ldr	r0, [r6, #4]
 80055fa:	a901      	add	r1, sp, #4
 80055fc:	f001 fae6 	bl	8006bcc <acc_service_sparse_get_metadata>
 8005600:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005604:	6932      	ldr	r2, [r6, #16]
 8005606:	6838      	ldr	r0, [r7, #0]
 8005608:	0049      	lsls	r1, r1, #1
 800560a:	47a8      	blx	r5
 800560c:	4620      	mov	r0, r4
 800560e:	b007      	add	sp, #28
 8005610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005612:	4b0e      	ldr	r3, [pc, #56]	; (800564c <get_sparse_data+0x8c>)
 8005614:	4a10      	ldr	r2, [pc, #64]	; (8005658 <get_sparse_data+0x98>)
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	490e      	ldr	r1, [pc, #56]	; (8005654 <get_sparse_data+0x94>)
 800561a:	4798      	blx	r3
 800561c:	4620      	mov	r0, r4
 800561e:	b007      	add	sp, #28
 8005620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005622:	f002 f9e3 	bl	80079ec <acc_rss_integration_log_level>
 8005626:	2800      	cmp	r0, #0
 8005628:	d0de      	beq.n	80055e8 <get_sparse_data+0x28>
 800562a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800562c:	4a0b      	ldr	r2, [pc, #44]	; (800565c <get_sparse_data+0x9c>)
 800562e:	4909      	ldr	r1, [pc, #36]	; (8005654 <get_sparse_data+0x94>)
 8005630:	2001      	movs	r0, #1
 8005632:	4798      	blx	r3
 8005634:	e7d8      	b.n	80055e8 <get_sparse_data+0x28>
 8005636:	f002 f9d9 	bl	80079ec <acc_rss_integration_log_level>
 800563a:	2800      	cmp	r0, #0
 800563c:	d0db      	beq.n	80055f6 <get_sparse_data+0x36>
 800563e:	4b03      	ldr	r3, [pc, #12]	; (800564c <get_sparse_data+0x8c>)
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <get_sparse_data+0x9c>)
 8005642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005644:	4903      	ldr	r1, [pc, #12]	; (8005654 <get_sparse_data+0x94>)
 8005646:	2001      	movs	r0, #1
 8005648:	4798      	blx	r3
 800564a:	e7d4      	b.n	80055f6 <get_sparse_data+0x36>
 800564c:	200007b0 	.word	0x200007b0
 8005650:	08011088 	.word	0x08011088
 8005654:	0801109c 	.word	0x0801109c
 8005658:	080110c0 	.word	0x080110c0
 800565c:	080110b0 	.word	0x080110b0

08005660 <presence_service_setup.isra.0>:
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	4606      	mov	r6, r0
 8005664:	b087      	sub	sp, #28
 8005666:	6850      	ldr	r0, [r2, #4]
 8005668:	460f      	mov	r7, r1
 800566a:	4615      	mov	r5, r2
 800566c:	f001 f884 	bl	8006778 <acc_service_create>
 8005670:	6038      	str	r0, [r7, #0]
 8005672:	b198      	cbz	r0, 800569c <presence_service_setup.isra.0+0x3c>
 8005674:	2300      	movs	r3, #0
 8005676:	a901      	add	r1, sp, #4
 8005678:	ac01      	add	r4, sp, #4
 800567a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800567e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	f001 faa2 	bl	8006bcc <acc_service_sparse_get_metadata>
 8005688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800568a:	3534      	adds	r5, #52	; 0x34
 800568c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <presence_service_setup.isra.0+0x50>)
 8005692:	602a      	str	r2, [r5, #0]
 8005694:	2001      	movs	r0, #1
 8005696:	6033      	str	r3, [r6, #0]
 8005698:	b007      	add	sp, #28
 800569a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <presence_service_setup.isra.0+0x54>)
 800569e:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <presence_service_setup.isra.0+0x58>)
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a2:	4906      	ldr	r1, [pc, #24]	; (80056bc <presence_service_setup.isra.0+0x5c>)
 80056a4:	4604      	mov	r4, r0
 80056a6:	4798      	blx	r3
 80056a8:	4620      	mov	r0, r4
 80056aa:	b007      	add	sp, #28
 80056ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	acc54323 	.word	0xacc54323
 80056b4:	200007b0 	.word	0x200007b0
 80056b8:	080110d8 	.word	0x080110d8
 80056bc:	0801109c 	.word	0x0801109c

080056c0 <acc_detector_presence_configuration_create>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	4920      	ldr	r1, [pc, #128]	; (8005744 <acc_detector_presence_configuration_create+0x84>)
 80056c4:	2259      	movs	r2, #89	; 0x59
 80056c6:	2050      	movs	r0, #80	; 0x50
 80056c8:	f002 f93a 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 80056cc:	4604      	mov	r4, r0
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d030      	beq.n	8005734 <acc_detector_presence_configuration_create+0x74>
 80056d2:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <acc_detector_presence_configuration_create+0x88>)
 80056d4:	6003      	str	r3, [r0, #0]
 80056d6:	f001 f9cf 	bl	8006a78 <acc_service_sparse_configuration_create>
 80056da:	2103      	movs	r1, #3
 80056dc:	6060      	str	r0, [r4, #4]
 80056de:	f000 ffc5 	bl	800666c <acc_service_profile_set>
 80056e2:	6860      	ldr	r0, [r4, #4]
 80056e4:	4e19      	ldr	r6, [pc, #100]	; (800574c <acc_detector_presence_configuration_create+0x8c>)
 80056e6:	2110      	movs	r1, #16
 80056e8:	f001 fa62 	bl	8006bb0 <acc_service_sparse_configuration_sweeps_per_frame_set>
 80056ec:	6860      	ldr	r0, [r4, #4]
 80056ee:	f000 fea1 	bl	8006434 <acc_service_repetition_mode_on_demand_set>
 80056f2:	2300      	movs	r3, #0
 80056f4:	4916      	ldr	r1, [pc, #88]	; (8005750 <acc_detector_presence_configuration_create+0x90>)
 80056f6:	4817      	ldr	r0, [pc, #92]	; (8005754 <acc_detector_presence_configuration_create+0x94>)
 80056f8:	4a17      	ldr	r2, [pc, #92]	; (8005758 <acc_detector_presence_configuration_create+0x98>)
 80056fa:	61e1      	str	r1, [r4, #28]
 80056fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80056fe:	2110      	movs	r1, #16
 8005700:	6363      	str	r3, [r4, #52]	; 0x34
 8005702:	6463      	str	r3, [r4, #68]	; 0x44
 8005704:	6423      	str	r3, [r4, #64]	; 0x40
 8005706:	2300      	movs	r3, #0
 8005708:	6220      	str	r0, [r4, #32]
 800570a:	f04f 557f 	mov.w	r5, #1069547520	; 0x3fc00000
 800570e:	4813      	ldr	r0, [pc, #76]	; (800575c <acc_detector_presence_configuration_create+0x9c>)
 8005710:	6262      	str	r2, [r4, #36]	; 0x24
 8005712:	8121      	strh	r1, [r4, #8]
 8005714:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005718:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800571c:	8623      	strh	r3, [r4, #48]	; 0x30
 800571e:	61a0      	str	r0, [r4, #24]
 8005720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005724:	60e6      	str	r6, [r4, #12]
 8005726:	6125      	str	r5, [r4, #16]
 8005728:	6162      	str	r2, [r4, #20]
 800572a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800572c:	62a1      	str	r1, [r4, #40]	; 0x28
 800572e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005730:	4620      	mov	r0, r4
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <acc_detector_presence_configuration_create+0xa0>)
 8005736:	4a0b      	ldr	r2, [pc, #44]	; (8005764 <acc_detector_presence_configuration_create+0xa4>)
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	4902      	ldr	r1, [pc, #8]	; (8005744 <acc_detector_presence_configuration_create+0x84>)
 800573c:	4798      	blx	r3
 800573e:	4620      	mov	r0, r4
 8005740:	bd70      	pop	{r4, r5, r6, pc}
 8005742:	bf00      	nop
 8005744:	0801109c 	.word	0x0801109c
 8005748:	acc12ad9 	.word	0xacc12ad9
 800574c:	41200000 	.word	0x41200000
 8005750:	3e4ccccd 	.word	0x3e4ccccd
 8005754:	3e19999a 	.word	0x3e19999a
 8005758:	3f19999a 	.word	0x3f19999a
 800575c:	41a00000 	.word	0x41a00000
 8005760:	200007b0 	.word	0x200007b0
 8005764:	080110f8 	.word	0x080110f8

08005768 <acc_detector_presence_configuration_destroy>:
 8005768:	b1c0      	cbz	r0, 800579c <acc_detector_presence_configuration_destroy+0x34>
 800576a:	b510      	push	{r4, lr}
 800576c:	4604      	mov	r4, r0
 800576e:	6800      	ldr	r0, [r0, #0]
 8005770:	b118      	cbz	r0, 800577a <acc_detector_presence_configuration_destroy+0x12>
 8005772:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <acc_detector_presence_configuration_destroy+0x38>)
 8005774:	6802      	ldr	r2, [r0, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d007      	beq.n	800578a <acc_detector_presence_configuration_destroy+0x22>
 800577a:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <acc_detector_presence_configuration_destroy+0x3c>)
 800577c:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <acc_detector_presence_configuration_destroy+0x40>)
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	490a      	ldr	r1, [pc, #40]	; (80057ac <acc_detector_presence_configuration_destroy+0x44>)
 8005782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005786:	2000      	movs	r0, #0
 8005788:	4718      	bx	r3
 800578a:	3004      	adds	r0, #4
 800578c:	f001 f9fe 	bl	8006b8c <acc_service_sparse_configuration_destroy>
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	f002 f919 	bl	80079c8 <acc_rss_integration_mem_free>
 8005796:	2300      	movs	r3, #0
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd10      	pop	{r4, pc}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	acc12ad9 	.word	0xacc12ad9
 80057a4:	200007b0 	.word	0x200007b0
 80057a8:	08011118 	.word	0x08011118
 80057ac:	0801109c 	.word	0x0801109c

080057b0 <acc_detector_presence_create>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	4606      	mov	r6, r0
 80057b4:	b1d0      	cbz	r0, 80057ec <acc_detector_presence_create+0x3c>
 80057b6:	4919      	ldr	r1, [pc, #100]	; (800581c <acc_detector_presence_create+0x6c>)
 80057b8:	22a1      	movs	r2, #161	; 0xa1
 80057ba:	2014      	movs	r0, #20
 80057bc:	f002 f8c0 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 80057c0:	4604      	mov	r4, r0
 80057c2:	b320      	cbz	r0, 800580e <acc_detector_presence_create+0x5e>
 80057c4:	1d07      	adds	r7, r0, #4
 80057c6:	4639      	mov	r1, r7
 80057c8:	4632      	mov	r2, r6
 80057ca:	f7ff ff49 	bl	8005660 <presence_service_setup.isra.0>
 80057ce:	4605      	mov	r5, r0
 80057d0:	b1b8      	cbz	r0, 8005802 <acc_detector_presence_create+0x52>
 80057d2:	f106 0008 	add.w	r0, r6, #8
 80057d6:	f000 fb79 	bl	8005ecc <acc_detector_presence_processing_create>
 80057da:	4605      	mov	r5, r0
 80057dc:	60a0      	str	r0, [r4, #8]
 80057de:	b168      	cbz	r0, 80057fc <acc_detector_presence_create+0x4c>
 80057e0:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
 80057e4:	4620      	mov	r0, r4
 80057e6:	e9c4 2303 	strd	r2, r3, [r4, #12]
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <acc_detector_presence_create+0x70>)
 80057ee:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <acc_detector_presence_create+0x74>)
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	490a      	ldr	r1, [pc, #40]	; (800581c <acc_detector_presence_create+0x6c>)
 80057f4:	4604      	mov	r4, r0
 80057f6:	4798      	blx	r3
 80057f8:	4620      	mov	r0, r4
 80057fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057fc:	4638      	mov	r0, r7
 80057fe:	f001 f82f 	bl	8006860 <acc_service_destroy>
 8005802:	4620      	mov	r0, r4
 8005804:	462c      	mov	r4, r5
 8005806:	f002 f8df 	bl	80079c8 <acc_rss_integration_mem_free>
 800580a:	4620      	mov	r0, r4
 800580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580e:	4b04      	ldr	r3, [pc, #16]	; (8005820 <acc_detector_presence_create+0x70>)
 8005810:	4a05      	ldr	r2, [pc, #20]	; (8005828 <acc_detector_presence_create+0x78>)
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	4901      	ldr	r1, [pc, #4]	; (800581c <acc_detector_presence_create+0x6c>)
 8005816:	4798      	blx	r3
 8005818:	4620      	mov	r0, r4
 800581a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581c:	0801109c 	.word	0x0801109c
 8005820:	200007b0 	.word	0x200007b0
 8005824:	08011130 	.word	0x08011130
 8005828:	08011148 	.word	0x08011148

0800582c <acc_detector_presence_destroy>:
 800582c:	b510      	push	{r4, lr}
 800582e:	4604      	mov	r4, r0
 8005830:	6800      	ldr	r0, [r0, #0]
 8005832:	b118      	cbz	r0, 800583c <acc_detector_presence_destroy+0x10>
 8005834:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <acc_detector_presence_destroy+0x3c>)
 8005836:	6802      	ldr	r2, [r0, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d007      	beq.n	800584c <acc_detector_presence_destroy+0x20>
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <acc_detector_presence_destroy+0x40>)
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <acc_detector_presence_destroy+0x44>)
 8005840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005842:	490c      	ldr	r1, [pc, #48]	; (8005874 <acc_detector_presence_destroy+0x48>)
 8005844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005848:	2000      	movs	r0, #0
 800584a:	4718      	bx	r3
 800584c:	3008      	adds	r0, #8
 800584e:	f000 fb6b 	bl	8005f28 <acc_detector_presence_processing_destroy>
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	3004      	adds	r0, #4
 8005856:	f001 f803 	bl	8006860 <acc_service_destroy>
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	f002 f8b4 	bl	80079c8 <acc_rss_integration_mem_free>
 8005860:	2300      	movs	r3, #0
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	acc54323 	.word	0xacc54323
 800586c:	200007b0 	.word	0x200007b0
 8005870:	08011160 	.word	0x08011160
 8005874:	0801109c 	.word	0x0801109c

08005878 <acc_detector_presence_activate>:
 8005878:	b508      	push	{r3, lr}
 800587a:	b118      	cbz	r0, 8005884 <acc_detector_presence_activate+0xc>
 800587c:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <acc_detector_presence_activate+0x28>)
 800587e:	6802      	ldr	r2, [r0, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d007      	beq.n	8005894 <acc_detector_presence_activate+0x1c>
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <acc_detector_presence_activate+0x2c>)
 8005886:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <acc_detector_presence_activate+0x30>)
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	4908      	ldr	r1, [pc, #32]	; (80058ac <acc_detector_presence_activate+0x34>)
 800588c:	2000      	movs	r0, #0
 800588e:	4798      	blx	r3
 8005890:	2000      	movs	r0, #0
 8005892:	bd08      	pop	{r3, pc}
 8005894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005898:	6840      	ldr	r0, [r0, #4]
 800589a:	f000 bd17 	b.w	80062cc <acc_service_activate>
 800589e:	bf00      	nop
 80058a0:	acc54323 	.word	0xacc54323
 80058a4:	200007b0 	.word	0x200007b0
 80058a8:	08011160 	.word	0x08011160
 80058ac:	0801109c 	.word	0x0801109c

080058b0 <acc_detector_presence_deactivate>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	b118      	cbz	r0, 80058bc <acc_detector_presence_deactivate+0xc>
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <acc_detector_presence_deactivate+0x38>)
 80058b6:	6802      	ldr	r2, [r0, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d008      	beq.n	80058ce <acc_detector_presence_deactivate+0x1e>
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <acc_detector_presence_deactivate+0x3c>)
 80058be:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <acc_detector_presence_deactivate+0x40>)
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	490c      	ldr	r1, [pc, #48]	; (80058f4 <acc_detector_presence_deactivate+0x44>)
 80058c4:	2000      	movs	r0, #0
 80058c6:	4798      	blx	r3
 80058c8:	2400      	movs	r4, #0
 80058ca:	4620      	mov	r0, r4
 80058cc:	bd10      	pop	{r4, pc}
 80058ce:	6840      	ldr	r0, [r0, #4]
 80058d0:	f000 fd4a 	bl	8006368 <acc_service_deactivate>
 80058d4:	4604      	mov	r4, r0
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d1f7      	bne.n	80058ca <acc_detector_presence_deactivate+0x1a>
 80058da:	4b04      	ldr	r3, [pc, #16]	; (80058ec <acc_detector_presence_deactivate+0x3c>)
 80058dc:	4a06      	ldr	r2, [pc, #24]	; (80058f8 <acc_detector_presence_deactivate+0x48>)
 80058de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e0:	4904      	ldr	r1, [pc, #16]	; (80058f4 <acc_detector_presence_deactivate+0x44>)
 80058e2:	4798      	blx	r3
 80058e4:	e7f1      	b.n	80058ca <acc_detector_presence_deactivate+0x1a>
 80058e6:	bf00      	nop
 80058e8:	acc54323 	.word	0xacc54323
 80058ec:	200007b0 	.word	0x200007b0
 80058f0:	08011160 	.word	0x08011160
 80058f4:	0801109c 	.word	0x0801109c
 80058f8:	08011170 	.word	0x08011170

080058fc <acc_detector_presence_get_next>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	b120      	cbz	r0, 800590c <acc_detector_presence_get_next+0x10>
 8005902:	4b19      	ldr	r3, [pc, #100]	; (8005968 <acc_detector_presence_get_next+0x6c>)
 8005904:	6802      	ldr	r2, [r0, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	4604      	mov	r4, r0
 800590a:	d009      	beq.n	8005920 <acc_detector_presence_get_next+0x24>
 800590c:	4b17      	ldr	r3, [pc, #92]	; (800596c <acc_detector_presence_get_next+0x70>)
 800590e:	4a18      	ldr	r2, [pc, #96]	; (8005970 <acc_detector_presence_get_next+0x74>)
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	4918      	ldr	r1, [pc, #96]	; (8005974 <acc_detector_presence_get_next+0x78>)
 8005914:	2000      	movs	r0, #0
 8005916:	4798      	blx	r3
 8005918:	2500      	movs	r5, #0
 800591a:	4628      	mov	r0, r5
 800591c:	b008      	add	sp, #32
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	460e      	mov	r6, r1
 8005922:	2100      	movs	r1, #0
 8005924:	2300      	movs	r3, #0
 8005926:	9104      	str	r1, [sp, #16]
 8005928:	9105      	str	r1, [sp, #20]
 800592a:	aa01      	add	r2, sp, #4
 800592c:	a902      	add	r1, sp, #8
 800592e:	f88d 300c 	strb.w	r3, [sp, #12]
 8005932:	9307      	str	r3, [sp, #28]
 8005934:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005938:	f7ff fe42 	bl	80055c0 <get_sparse_data>
 800593c:	4605      	mov	r5, r0
 800593e:	2800      	cmp	r0, #0
 8005940:	d0eb      	beq.n	800591a <acc_detector_presence_get_next+0x1e>
 8005942:	68a0      	ldr	r0, [r4, #8]
 8005944:	9902      	ldr	r1, [sp, #8]
 8005946:	aa03      	add	r2, sp, #12
 8005948:	f000 fb0e 	bl	8005f68 <acc_detector_presence_processing_next>
 800594c:	2e00      	cmp	r6, #0
 800594e:	d0e4      	beq.n	800591a <acc_detector_presence_get_next+0x1e>
 8005950:	9804      	ldr	r0, [sp, #16]
 8005952:	9905      	ldr	r1, [sp, #20]
 8005954:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8005958:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800595c:	6070      	str	r0, [r6, #4]
 800595e:	60b1      	str	r1, [r6, #8]
 8005960:	7032      	strb	r2, [r6, #0]
 8005962:	81b3      	strh	r3, [r6, #12]
 8005964:	e7d9      	b.n	800591a <acc_detector_presence_get_next+0x1e>
 8005966:	bf00      	nop
 8005968:	acc54323 	.word	0xacc54323
 800596c:	200007b0 	.word	0x200007b0
 8005970:	08011160 	.word	0x08011160
 8005974:	0801109c 	.word	0x0801109c

08005978 <acc_detector_presence_configuration_start_set>:
 8005978:	b118      	cbz	r0, 8005982 <acc_detector_presence_configuration_start_set+0xa>
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <acc_detector_presence_configuration_start_set+0x1c>)
 800597c:	6802      	ldr	r2, [r0, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d005      	beq.n	800598e <acc_detector_presence_configuration_start_set+0x16>
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <acc_detector_presence_configuration_start_set+0x20>)
 8005984:	4a05      	ldr	r2, [pc, #20]	; (800599c <acc_detector_presence_configuration_start_set+0x24>)
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	4905      	ldr	r1, [pc, #20]	; (80059a0 <acc_detector_presence_configuration_start_set+0x28>)
 800598a:	2000      	movs	r0, #0
 800598c:	4718      	bx	r3
 800598e:	6840      	ldr	r0, [r0, #4]
 8005990:	f000 bd34 	b.w	80063fc <acc_service_requested_start_set>
 8005994:	acc12ad9 	.word	0xacc12ad9
 8005998:	200007b0 	.word	0x200007b0
 800599c:	08011118 	.word	0x08011118
 80059a0:	0801109c 	.word	0x0801109c

080059a4 <acc_detector_presence_configuration_length_set>:
 80059a4:	b118      	cbz	r0, 80059ae <acc_detector_presence_configuration_length_set+0xa>
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <acc_detector_presence_configuration_length_set+0x1c>)
 80059a8:	6802      	ldr	r2, [r0, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d005      	beq.n	80059ba <acc_detector_presence_configuration_length_set+0x16>
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <acc_detector_presence_configuration_length_set+0x20>)
 80059b0:	4a05      	ldr	r2, [pc, #20]	; (80059c8 <acc_detector_presence_configuration_length_set+0x24>)
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	4905      	ldr	r1, [pc, #20]	; (80059cc <acc_detector_presence_configuration_length_set+0x28>)
 80059b6:	2000      	movs	r0, #0
 80059b8:	4718      	bx	r3
 80059ba:	6840      	ldr	r0, [r0, #4]
 80059bc:	f000 bd2c 	b.w	8006418 <acc_service_requested_length_set>
 80059c0:	acc12ad9 	.word	0xacc12ad9
 80059c4:	200007b0 	.word	0x200007b0
 80059c8:	08011118 	.word	0x08011118
 80059cc:	0801109c 	.word	0x0801109c

080059d0 <acc_detector_presence_configuration_detection_threshold_set>:
 80059d0:	b118      	cbz	r0, 80059da <acc_detector_presence_configuration_detection_threshold_set+0xa>
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <acc_detector_presence_configuration_detection_threshold_set+0x1c>)
 80059d4:	6802      	ldr	r2, [r0, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d005      	beq.n	80059e6 <acc_detector_presence_configuration_detection_threshold_set+0x16>
 80059da:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <acc_detector_presence_configuration_detection_threshold_set+0x20>)
 80059dc:	4a05      	ldr	r2, [pc, #20]	; (80059f4 <acc_detector_presence_configuration_detection_threshold_set+0x24>)
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	4905      	ldr	r1, [pc, #20]	; (80059f8 <acc_detector_presence_configuration_detection_threshold_set+0x28>)
 80059e2:	2000      	movs	r0, #0
 80059e4:	4718      	bx	r3
 80059e6:	ed80 0a04 	vstr	s0, [r0, #16]
 80059ea:	4770      	bx	lr
 80059ec:	acc12ad9 	.word	0xacc12ad9
 80059f0:	200007b0 	.word	0x200007b0
 80059f4:	08011118 	.word	0x08011118
 80059f8:	0801109c 	.word	0x0801109c

080059fc <acc_detector_presence_configuration_update_rate_set>:
 80059fc:	b118      	cbz	r0, 8005a06 <acc_detector_presence_configuration_update_rate_set+0xa>
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <acc_detector_presence_configuration_update_rate_set+0x1c>)
 8005a00:	6802      	ldr	r2, [r0, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d005      	beq.n	8005a12 <acc_detector_presence_configuration_update_rate_set+0x16>
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <acc_detector_presence_configuration_update_rate_set+0x20>)
 8005a08:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <acc_detector_presence_configuration_update_rate_set+0x24>)
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	4905      	ldr	r1, [pc, #20]	; (8005a24 <acc_detector_presence_configuration_update_rate_set+0x28>)
 8005a0e:	2000      	movs	r0, #0
 8005a10:	4718      	bx	r3
 8005a12:	ed80 0a03 	vstr	s0, [r0, #12]
 8005a16:	4770      	bx	lr
 8005a18:	acc12ad9 	.word	0xacc12ad9
 8005a1c:	200007b0 	.word	0x200007b0
 8005a20:	08011118 	.word	0x08011118
 8005a24:	0801109c 	.word	0x0801109c

08005a28 <acc_detector_presence_configuration_nbr_removed_pc_set>:
 8005a28:	b118      	cbz	r0, 8005a32 <acc_detector_presence_configuration_nbr_removed_pc_set+0xa>
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <acc_detector_presence_configuration_nbr_removed_pc_set+0x1c>)
 8005a2c:	6802      	ldr	r2, [r0, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d005      	beq.n	8005a3e <acc_detector_presence_configuration_nbr_removed_pc_set+0x16>
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <acc_detector_presence_configuration_nbr_removed_pc_set+0x20>)
 8005a34:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <acc_detector_presence_configuration_nbr_removed_pc_set+0x24>)
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	4905      	ldr	r1, [pc, #20]	; (8005a50 <acc_detector_presence_configuration_nbr_removed_pc_set+0x28>)
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	4718      	bx	r3
 8005a3e:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 8005a42:	4770      	bx	lr
 8005a44:	acc12ad9 	.word	0xacc12ad9
 8005a48:	200007b0 	.word	0x200007b0
 8005a4c:	08011118 	.word	0x08011118
 8005a50:	0801109c 	.word	0x0801109c

08005a54 <acc_detector_presence_configuration_power_save_mode_set>:
 8005a54:	b118      	cbz	r0, 8005a5e <acc_detector_presence_configuration_power_save_mode_set+0xa>
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <acc_detector_presence_configuration_power_save_mode_set+0x1c>)
 8005a58:	6802      	ldr	r2, [r0, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d005      	beq.n	8005a6a <acc_detector_presence_configuration_power_save_mode_set+0x16>
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <acc_detector_presence_configuration_power_save_mode_set+0x20>)
 8005a60:	4a05      	ldr	r2, [pc, #20]	; (8005a78 <acc_detector_presence_configuration_power_save_mode_set+0x24>)
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	4905      	ldr	r1, [pc, #20]	; (8005a7c <acc_detector_presence_configuration_power_save_mode_set+0x28>)
 8005a66:	2000      	movs	r0, #0
 8005a68:	4718      	bx	r3
 8005a6a:	6840      	ldr	r0, [r0, #4]
 8005a6c:	f000 bcea 	b.w	8006444 <acc_service_power_save_mode_set>
 8005a70:	acc12ad9 	.word	0xacc12ad9
 8005a74:	200007b0 	.word	0x200007b0
 8005a78:	08011118 	.word	0x08011118
 8005a7c:	0801109c 	.word	0x0801109c

08005a80 <processing_buffers_teardown>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005a86:	b118      	cbz	r0, 8005a90 <processing_buffers_teardown+0x10>
 8005a88:	f001 ff9e 	bl	80079c8 <acc_rss_integration_mem_free>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d035      	beq.n	8005b02 <processing_buffers_teardown+0x82>
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	b120      	cbz	r0, 8005aa4 <processing_buffers_teardown+0x24>
 8005a9a:	f001 ff95 	bl	80079c8 <acc_rss_integration_mem_free>
 8005a9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	6858      	ldr	r0, [r3, #4]
 8005aa6:	b120      	cbz	r0, 8005ab2 <processing_buffers_teardown+0x32>
 8005aa8:	f001 ff8e 	bl	80079c8 <acc_rss_integration_mem_free>
 8005aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aae:	2200      	movs	r2, #0
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	6898      	ldr	r0, [r3, #8]
 8005ab4:	b120      	cbz	r0, 8005ac0 <processing_buffers_teardown+0x40>
 8005ab6:	f001 ff87 	bl	80079c8 <acc_rss_integration_mem_free>
 8005aba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005abc:	2200      	movs	r2, #0
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	68d8      	ldr	r0, [r3, #12]
 8005ac2:	b120      	cbz	r0, 8005ace <processing_buffers_teardown+0x4e>
 8005ac4:	f001 ff80 	bl	80079c8 <acc_rss_integration_mem_free>
 8005ac8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aca:	2200      	movs	r2, #0
 8005acc:	60da      	str	r2, [r3, #12]
 8005ace:	6918      	ldr	r0, [r3, #16]
 8005ad0:	b120      	cbz	r0, 8005adc <processing_buffers_teardown+0x5c>
 8005ad2:	f001 ff79 	bl	80079c8 <acc_rss_integration_mem_free>
 8005ad6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ad8:	2200      	movs	r2, #0
 8005ada:	611a      	str	r2, [r3, #16]
 8005adc:	6958      	ldr	r0, [r3, #20]
 8005ade:	b120      	cbz	r0, 8005aea <processing_buffers_teardown+0x6a>
 8005ae0:	f001 ff72 	bl	80079c8 <acc_rss_integration_mem_free>
 8005ae4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	615a      	str	r2, [r3, #20]
 8005aea:	6998      	ldr	r0, [r3, #24]
 8005aec:	b120      	cbz	r0, 8005af8 <processing_buffers_teardown+0x78>
 8005aee:	f001 ff6b 	bl	80079c8 <acc_rss_integration_mem_free>
 8005af2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005af4:	2200      	movs	r2, #0
 8005af6:	619a      	str	r2, [r3, #24]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 ff65 	bl	80079c8 <acc_rss_integration_mem_free>
 8005afe:	2300      	movs	r3, #0
 8005b00:	6563      	str	r3, [r4, #84]	; 0x54
 8005b02:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005b04:	b118      	cbz	r0, 8005b0e <processing_buffers_teardown+0x8e>
 8005b06:	f001 ff5f 	bl	80079c8 <acc_rss_integration_mem_free>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b0e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005b10:	b118      	cbz	r0, 8005b1a <processing_buffers_teardown+0x9a>
 8005b12:	f001 ff59 	bl	80079c8 <acc_rss_integration_mem_free>
 8005b16:	2300      	movs	r3, #0
 8005b18:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005b1a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005b1c:	b118      	cbz	r0, 8005b26 <processing_buffers_teardown+0xa6>
 8005b1e:	f001 ff53 	bl	80079c8 <acc_rss_integration_mem_free>
 8005b22:	2300      	movs	r3, #0
 8005b24:	6623      	str	r3, [r4, #96]	; 0x60
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <smoothing_factor_from_low_pass_cutoff>:
 8005b28:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8005b2c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005b70 <smoothing_factor_from_low_pass_cutoff+0x48>
 8005b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b38:	dd02      	ble.n	8005b40 <smoothing_factor_from_low_pass_cutoff+0x18>
 8005b3a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005b74 <smoothing_factor_from_low_pass_cutoff+0x4c>
 8005b3e:	4770      	bx	lr
 8005b40:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005b78 <smoothing_factor_from_low_pass_cutoff+0x50>
 8005b44:	b508      	push	{r3, lr}
 8005b46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005b4a:	f001 f8e5 	bl	8006d18 <acc_alg_basic_math_restricted_sin_f32>
 8005b4e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005b52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005b56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b5a:	ee30 7a00 	vadd.f32	s14, s0, s0
 8005b5e:	eef1 6ac6 	vsqrt.f32	s13, s12
 8005b62:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8005b66:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005b6a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005b6e:	bd08      	pop	{r3, pc}
 8005b70:	3f0000a8 	.word	0x3f0000a8
 8005b74:	00000000 	.word	0x00000000
 8005b78:	40490fdb 	.word	0x40490fdb

08005b7c <setup_processing_parameters>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	880e      	ldrh	r6, [r1, #0]
 8005b80:	f8b1 c034 	ldrh.w	ip, [r1, #52]	; 0x34
 8005b84:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8005d14 <setup_processing_parameters+0x198>
 8005b88:	fbbc fcf6 	udiv	ip, ip, r6
 8005b8c:	ed2d 8b02 	vpush	{d8}
 8005b90:	f101 072c 	add.w	r7, r1, #44	; 0x2c
 8005b94:	7206      	strb	r6, [r0, #8]
 8005b96:	4605      	mov	r5, r0
 8005b98:	460c      	mov	r4, r1
 8005b9a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005b9c:	69e6      	ldr	r6, [r4, #28]
 8005b9e:	f8c5 e000 	str.w	lr, [r5]
 8005ba2:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005ba6:	62ae      	str	r6, [r5, #40]	; 0x28
 8005ba8:	f105 062c 	add.w	r6, r5, #44	; 0x2c
 8005bac:	f8c5 e00c 	str.w	lr, [r5, #12]
 8005bb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005bb2:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005bbc:	ed94 8a01 	vldr	s16, [r4, #4]
 8005bc0:	6032      	str	r2, [r6, #0]
 8005bc2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bca:	f8c5 c004 	str.w	ip, [r5, #4]
 8005bce:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8005bd2:	f240 8088 	bls.w	8005ce6 <setup_processing_parameters+0x16a>
 8005bd6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005bda:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8005bde:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005be2:	f009 f99f 	bl	800ef24 <expf>
 8005be6:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 8005bea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8005bee:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d909      	bls.n	8005c0a <setup_processing_parameters+0x8e>
 8005bf6:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <setup_processing_parameters+0x184>)
 8005bf8:	4a42      	ldr	r2, [pc, #264]	; (8005d04 <setup_processing_parameters+0x188>)
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfc:	4942      	ldr	r1, [pc, #264]	; (8005d08 <setup_processing_parameters+0x18c>)
 8005bfe:	2000      	movs	r0, #0
 8005c00:	4798      	blx	r3
 8005c02:	2000      	movs	r0, #0
 8005c04:	ecbd 8b02 	vpop	{d8}
 8005c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c0a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c12:	d965      	bls.n	8005ce0 <setup_processing_parameters+0x164>
 8005c14:	ed94 0a04 	vldr	s0, [r4, #16]
 8005c18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c20:	d45e      	bmi.n	8005ce0 <setup_processing_parameters+0x164>
 8005c22:	edd4 7a05 	vldr	s15, [r4, #20]
 8005c26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2e:	d457      	bmi.n	8005ce0 <setup_processing_parameters+0x164>
 8005c30:	edd4 7a03 	vldr	s15, [r4, #12]
 8005c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3c:	d450      	bmi.n	8005ce0 <setup_processing_parameters+0x164>
 8005c3e:	edd4 7a06 	vldr	s15, [r4, #24]
 8005c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4a:	d449      	bmi.n	8005ce0 <setup_processing_parameters+0x164>
 8005c4c:	edd4 7a08 	vldr	s15, [r4, #32]
 8005c50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c58:	d442      	bmi.n	8005ce0 <setup_processing_parameters+0x164>
 8005c5a:	eef0 0a48 	vmov.f32	s1, s16
 8005c5e:	f7ff ff63 	bl	8005b28 <smoothing_factor_from_low_pass_cutoff>
 8005c62:	eef0 0a48 	vmov.f32	s1, s16
 8005c66:	ed85 0a04 	vstr	s0, [r5, #16]
 8005c6a:	ed94 0a05 	vldr	s0, [r4, #20]
 8005c6e:	f7ff ff5b 	bl	8005b28 <smoothing_factor_from_low_pass_cutoff>
 8005c72:	edd4 7a03 	vldr	s15, [r4, #12]
 8005c76:	ed85 0a05 	vstr	s0, [r5, #20]
 8005c7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c82:	d933      	bls.n	8005cec <setup_processing_parameters+0x170>
 8005c84:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005c88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005c8c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005c90:	f009 f948 	bl	800ef24 <expf>
 8005c94:	edd4 7a06 	vldr	s15, [r4, #24]
 8005c98:	ed85 0a06 	vstr	s0, [r5, #24]
 8005c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca4:	d928      	bls.n	8005cf8 <setup_processing_parameters+0x17c>
 8005ca6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005caa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005cae:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005cb2:	f009 f937 	bl	800ef24 <expf>
 8005cb6:	edd4 0a08 	vldr	s1, [r4, #32]
 8005cba:	ed85 0a07 	vstr	s0, [r5, #28]
 8005cbe:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc6:	d914      	bls.n	8005cf2 <setup_processing_parameters+0x176>
 8005cc8:	ee28 8a20 	vmul.f32	s16, s16, s1
 8005ccc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005cd0:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8005cd4:	f009 f926 	bl	800ef24 <expf>
 8005cd8:	2001      	movs	r0, #1
 8005cda:	ed85 0a08 	vstr	s0, [r5, #32]
 8005cde:	e791      	b.n	8005c04 <setup_processing_parameters+0x88>
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <setup_processing_parameters+0x184>)
 8005ce2:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <setup_processing_parameters+0x190>)
 8005ce4:	e789      	b.n	8005bfa <setup_processing_parameters+0x7e>
 8005ce6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8005d10 <setup_processing_parameters+0x194>
 8005cea:	e77c      	b.n	8005be6 <setup_processing_parameters+0x6a>
 8005cec:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005d10 <setup_processing_parameters+0x194>
 8005cf0:	e7d0      	b.n	8005c94 <setup_processing_parameters+0x118>
 8005cf2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8005d10 <setup_processing_parameters+0x194>
 8005cf6:	e7ef      	b.n	8005cd8 <setup_processing_parameters+0x15c>
 8005cf8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005d10 <setup_processing_parameters+0x194>
 8005cfc:	e7db      	b.n	8005cb6 <setup_processing_parameters+0x13a>
 8005cfe:	bf00      	nop
 8005d00:	200007b0 	.word	0x200007b0
 8005d04:	0801118c 	.word	0x0801118c
 8005d08:	080111a8 	.word	0x080111a8
 8005d0c:	080111c8 	.word	0x080111c8
 8005d10:	00000000 	.word	0x00000000
 8005d14:	acc12ad1 	.word	0xacc12ad1

08005d18 <processing_buffers_setup>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005d1e:	4604      	mov	r4, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f040 80ad 	bne.w	8005e80 <processing_buffers_setup+0x168>
 8005d26:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d06c      	beq.n	8005e08 <processing_buffers_setup+0xf0>
 8005d2e:	4961      	ldr	r1, [pc, #388]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005d30:	f44f 729b 	mov.w	r2, #310	; 0x136
 8005d34:	2034      	movs	r0, #52	; 0x34
 8005d36:	f001 fe03 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	6560      	str	r0, [r4, #84]	; 0x54
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f000 80b4 	beq.w	8005eac <processing_buffers_setup+0x194>
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005d4a:	495a      	ldr	r1, [pc, #360]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	fb03 f002 	mul.w	r0, r3, r2
 8005d52:	e9c5 0007 	strd	r0, r0, [r5, #28]
 8005d56:	7a26      	ldrb	r6, [r4, #8]
 8005d58:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005d5a:	fb12 f206 	smulbb	r2, r2, r6
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	632a      	str	r2, [r5, #48]	; 0x30
 8005d62:	1ef2      	subs	r2, r6, #3
 8005d64:	fb03 f202 	mul.w	r2, r3, r2
 8005d68:	fb03 f306 	mul.w	r3, r3, r6
 8005d6c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 8005d70:	f240 124d 	movw	r2, #333	; 0x14d
 8005d74:	f001 fde4 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005d78:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005d7a:	494e      	ldr	r1, [pc, #312]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005d7c:	6028      	str	r0, [r5, #0]
 8005d7e:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8005d82:	6a38      	ldr	r0, [r7, #32]
 8005d84:	f001 fddc 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005d88:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005d8a:	494a      	ldr	r1, [pc, #296]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	f240 124f 	movw	r2, #335	; 0x14f
 8005d92:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8005d94:	f001 fdd4 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005d98:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005d9a:	4946      	ldr	r1, [pc, #280]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005d9c:	60b0      	str	r0, [r6, #8]
 8005d9e:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8005da2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8005da4:	f001 fdcc 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005da8:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005daa:	4942      	ldr	r1, [pc, #264]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005dac:	60e8      	str	r0, [r5, #12]
 8005dae:	f240 1251 	movw	r2, #337	; 0x151
 8005db2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005db4:	f001 fdc4 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005db8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005dba:	493e      	ldr	r1, [pc, #248]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005dbc:	6130      	str	r0, [r6, #16]
 8005dbe:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005dc2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005dc4:	f001 fdbc 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	493a      	ldr	r1, [pc, #232]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005dcc:	6168      	str	r0, [r5, #20]
 8005dce:	f240 1253 	movw	r2, #339	; 0x153
 8005dd2:	0098      	lsls	r0, r3, #2
 8005dd4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005dd6:	f001 fdb3 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005dda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ddc:	61a8      	str	r0, [r5, #24]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	d04a      	beq.n	8005e7a <processing_buffers_setup+0x162>
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	2a00      	cmp	r2, #0
 8005de8:	d047      	beq.n	8005e7a <processing_buffers_setup+0x162>
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	d044      	beq.n	8005e7a <processing_buffers_setup+0x162>
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	d041      	beq.n	8005e7a <processing_buffers_setup+0x162>
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	d03e      	beq.n	8005e7a <processing_buffers_setup+0x162>
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	d03b      	beq.n	8005e7a <processing_buffers_setup+0x162>
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d038      	beq.n	8005e7a <processing_buffers_setup+0x162>
 8005e08:	6860      	ldr	r0, [r4, #4]
 8005e0a:	492a      	ldr	r1, [pc, #168]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e10:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005e14:	0080      	lsls	r0, r0, #2
 8005e16:	f001 fd93 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005e1a:	6863      	ldr	r3, [r4, #4]
 8005e1c:	4925      	ldr	r1, [pc, #148]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005e1e:	6520      	str	r0, [r4, #80]	; 0x50
 8005e20:	f240 1261 	movw	r2, #353	; 0x161
 8005e24:	0098      	lsls	r0, r3, #2
 8005e26:	f001 fd8b 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	65e0      	str	r0, [r4, #92]	; 0x5c
 8005e2e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005e32:	4920      	ldr	r1, [pc, #128]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005e34:	0098      	lsls	r0, r3, #2
 8005e36:	f001 fd83 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005e3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005e3c:	6620      	str	r0, [r4, #96]	; 0x60
 8005e3e:	b18a      	cbz	r2, 8005e64 <processing_buffers_setup+0x14c>
 8005e40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005e42:	b17b      	cbz	r3, 8005e64 <processing_buffers_setup+0x14c>
 8005e44:	b170      	cbz	r0, 8005e64 <processing_buffers_setup+0x14c>
 8005e46:	2100      	movs	r1, #0
 8005e48:	2500      	movs	r5, #0
 8005e4a:	6461      	str	r1, [r4, #68]	; 0x44
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	64a1      	str	r1, [r4, #72]	; 0x48
 8005e50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005e54:	88a2      	ldrh	r2, [r4, #4]
 8005e56:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005e58:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 8005e5c:	f001 f828 	bl	8006eb0 <acc_alg_sparse_frame_abs_deviation_accumulator_reset>
 8005e60:	2001      	movs	r0, #1
 8005e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e64:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <processing_buffers_setup+0x1a0>)
 8005e66:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <processing_buffers_setup+0x1a4>)
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	4912      	ldr	r1, [pc, #72]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	4798      	blx	r3
 8005e70:	4620      	mov	r0, r4
 8005e72:	f7ff fe05 	bl	8005a80 <processing_buffers_teardown>
 8005e76:	2000      	movs	r0, #0
 8005e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e7a:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <processing_buffers_setup+0x1a0>)
 8005e7c:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <processing_buffers_setup+0x1a8>)
 8005e7e:	e7f3      	b.n	8005e68 <processing_buffers_setup+0x150>
 8005e80:	6840      	ldr	r0, [r0, #4]
 8005e82:	490c      	ldr	r1, [pc, #48]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005e84:	0080      	lsls	r0, r0, #2
 8005e86:	f240 1229 	movw	r2, #297	; 0x129
 8005e8a:	f001 fd59 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005e8e:	4605      	mov	r5, r0
 8005e90:	65a0      	str	r0, [r4, #88]	; 0x58
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f47f af47 	bne.w	8005d26 <processing_buffers_setup+0xe>
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <processing_buffers_setup+0x1a0>)
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <processing_buffers_setup+0x1ac>)
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	4905      	ldr	r1, [pc, #20]	; (8005eb4 <processing_buffers_setup+0x19c>)
 8005ea0:	4798      	blx	r3
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7ff fdec 	bl	8005a80 <processing_buffers_teardown>
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eac:	4b02      	ldr	r3, [pc, #8]	; (8005eb8 <processing_buffers_setup+0x1a0>)
 8005eae:	4a06      	ldr	r2, [pc, #24]	; (8005ec8 <processing_buffers_setup+0x1b0>)
 8005eb0:	e7f4      	b.n	8005e9c <processing_buffers_setup+0x184>
 8005eb2:	bf00      	nop
 8005eb4:	080111a8 	.word	0x080111a8
 8005eb8:	200007b0 	.word	0x200007b0
 8005ebc:	08011248 	.word	0x08011248
 8005ec0:	0801122c 	.word	0x0801122c
 8005ec4:	080111ec 	.word	0x080111ec
 8005ec8:	08011210 	.word	0x08011210

08005ecc <acc_detector_presence_processing_create>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4913      	ldr	r1, [pc, #76]	; (8005f1c <acc_detector_presence_processing_create+0x50>)
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	225b      	movs	r2, #91	; 0x5b
 8005ed4:	2064      	movs	r0, #100	; 0x64
 8005ed6:	f001 fd33 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 8005eda:	4604      	mov	r4, r0
 8005edc:	b1b0      	cbz	r0, 8005f0c <acc_detector_presence_processing_create+0x40>
 8005ede:	2264      	movs	r2, #100	; 0x64
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f006 f9e3 	bl	800c2ac <memset>
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7ff fe47 	bl	8005b7c <setup_processing_parameters>
 8005eee:	4605      	mov	r5, r0
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	b135      	cbz	r5, 8005f02 <acc_detector_presence_processing_create+0x36>
 8005ef4:	f7ff ff10 	bl	8005d18 <processing_buffers_setup>
 8005ef8:	4605      	mov	r5, r0
 8005efa:	b108      	cbz	r0, 8005f00 <acc_detector_presence_processing_create+0x34>
 8005efc:	4620      	mov	r0, r4
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	4620      	mov	r0, r4
 8005f02:	462c      	mov	r4, r5
 8005f04:	f001 fd60 	bl	80079c8 <acc_rss_integration_mem_free>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <acc_detector_presence_processing_create+0x54>)
 8005f0e:	4a05      	ldr	r2, [pc, #20]	; (8005f24 <acc_detector_presence_processing_create+0x58>)
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	4902      	ldr	r1, [pc, #8]	; (8005f1c <acc_detector_presence_processing_create+0x50>)
 8005f14:	4798      	blx	r3
 8005f16:	4620      	mov	r0, r4
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
 8005f1a:	bf00      	nop
 8005f1c:	080111a8 	.word	0x080111a8
 8005f20:	200007b0 	.word	0x200007b0
 8005f24:	08011260 	.word	0x08011260

08005f28 <acc_detector_presence_processing_destroy>:
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	b118      	cbz	r0, 8005f38 <acc_detector_presence_processing_destroy+0x10>
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <acc_detector_presence_processing_destroy+0x30>)
 8005f32:	6802      	ldr	r2, [r0, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d007      	beq.n	8005f48 <acc_detector_presence_processing_destroy+0x20>
 8005f38:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <acc_detector_presence_processing_destroy+0x34>)
 8005f3a:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <acc_detector_presence_processing_destroy+0x38>)
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	4909      	ldr	r1, [pc, #36]	; (8005f64 <acc_detector_presence_processing_destroy+0x3c>)
 8005f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f44:	2000      	movs	r0, #0
 8005f46:	4718      	bx	r3
 8005f48:	f7ff fd9a 	bl	8005a80 <processing_buffers_teardown>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	f001 fd3b 	bl	80079c8 <acc_rss_integration_mem_free>
 8005f52:	2300      	movs	r3, #0
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd10      	pop	{r4, pc}
 8005f58:	acc12ad1 	.word	0xacc12ad1
 8005f5c:	200007b0 	.word	0x200007b0
 8005f60:	08011280 	.word	0x08011280
 8005f64:	080111a8 	.word	0x080111a8

08005f68 <acc_detector_presence_processing_next>:
 8005f68:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 8005f6c:	ed90 0a04 	vldr	s0, [r0, #16]
 8005f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f74:	3301      	adds	r3, #1
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f7e:	ed2d 8b04 	vpush	{d8-d9}
 8005f82:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005f86:	eec8 0a27 	vdiv.f32	s1, s16, s15
 8005f8a:	b08b      	sub	sp, #44	; 0x2c
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	460d      	mov	r5, r1
 8005f90:	4616      	mov	r6, r2
 8005f92:	ee38 8a60 	vsub.f32	s16, s16, s1
 8005f96:	eef0 0a48 	vmov.f32	s1, s16
 8005f9a:	f008 ff68 	bl	800ee6e <fminf>
 8005f9e:	eef0 0a48 	vmov.f32	s1, s16
 8005fa2:	eef0 7a40 	vmov.f32	s15, s0
 8005fa6:	ed94 0a05 	vldr	s0, [r4, #20]
 8005faa:	edcd 7a05 	vstr	s15, [sp, #20]
 8005fae:	f008 ff5e 	bl	800ee6e <fminf>
 8005fb2:	eef0 0a48 	vmov.f32	s1, s16
 8005fb6:	eef0 7a40 	vmov.f32	s15, s0
 8005fba:	ed94 0a06 	vldr	s0, [r4, #24]
 8005fbe:	edcd 7a06 	vstr	s15, [sp, #24]
 8005fc2:	f008 ff54 	bl	800ee6e <fminf>
 8005fc6:	eef0 0a48 	vmov.f32	s1, s16
 8005fca:	eef0 7a40 	vmov.f32	s15, s0
 8005fce:	ed94 0a07 	vldr	s0, [r4, #28]
 8005fd2:	edcd 7a07 	vstr	s15, [sp, #28]
 8005fd6:	f008 ff4a 	bl	800ee6e <fminf>
 8005fda:	eef0 0a48 	vmov.f32	s1, s16
 8005fde:	eef0 7a40 	vmov.f32	s15, s0
 8005fe2:	ed94 0a08 	vldr	s0, [r4, #32]
 8005fe6:	edcd 7a08 	vstr	s15, [sp, #32]
 8005fea:	f008 ff40 	bl	800ee6e <fminf>
 8005fee:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005ff2:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8005ff6:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8005ffa:	b1ab      	cbz	r3, 8006028 <acc_detector_presence_processing_next+0xc0>
 8005ffc:	88a1      	ldrh	r1, [r4, #4]
 8005ffe:	9100      	str	r1, [sp, #0]
 8006000:	a805      	add	r0, sp, #20
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	9002      	str	r0, [sp, #8]
 8006006:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 800600a:	7a23      	ldrb	r3, [r4, #8]
 800600c:	462a      	mov	r2, r5
 800600e:	f001 f84b 	bl	80070a8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca>
 8006012:	b998      	cbnz	r0, 800603c <acc_detector_presence_processing_next+0xd4>
 8006014:	4b58      	ldr	r3, [pc, #352]	; (8006178 <acc_detector_presence_processing_next+0x210>)
 8006016:	4a59      	ldr	r2, [pc, #356]	; (800617c <acc_detector_presence_processing_next+0x214>)
 8006018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601a:	4959      	ldr	r1, [pc, #356]	; (8006180 <acc_detector_presence_processing_next+0x218>)
 800601c:	4798      	blx	r3
 800601e:	b00b      	add	sp, #44	; 0x2c
 8006020:	ecbd 8b04 	vpop	{d8-d9}
 8006024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006028:	ab05      	add	r3, sp, #20
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	88a3      	ldrh	r3, [r4, #4]
 800602e:	7a22      	ldrb	r2, [r4, #8]
 8006030:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006032:	4629      	mov	r1, r5
 8006034:	f000 ff74 	bl	8006f20 <acc_alg_sparse_frame_abs_deviation_accumulate>
 8006038:	2800      	cmp	r0, #0
 800603a:	d0eb      	beq.n	8006014 <acc_detector_presence_processing_next+0xac>
 800603c:	e9d4 3217 	ldrd	r3, r2, [r4, #92]	; 0x5c
 8006040:	88a1      	ldrh	r1, [r4, #4]
 8006042:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006044:	f001 fb6a 	bl	800771c <acc_alg_sparse_frame_abs_deviation_to_noise_ratio>
 8006048:	2800      	cmp	r0, #0
 800604a:	f000 8085 	beq.w	8006158 <acc_detector_presence_processing_next+0x1f0>
 800604e:	6867      	ldr	r7, [r4, #4]
 8006050:	2f00      	cmp	r7, #0
 8006052:	f000 808b 	beq.w	800616c <acc_detector_presence_processing_next+0x204>
 8006056:	e9d4 ec17 	ldrd	lr, ip, [r4, #92]	; 0x5c
 800605a:	2300      	movs	r3, #0
 800605c:	f894 8040 	ldrb.w	r8, [r4, #64]	; 0x40
 8006060:	eddf 8a48 	vldr	s17, [pc, #288]	; 8006184 <acc_detector_presence_processing_next+0x21c>
 8006064:	4699      	mov	r9, r3
 8006066:	4619      	mov	r1, r3
 8006068:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800606c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8006070:	eb0e 0281 	add.w	r2, lr, r1, lsl #2
 8006074:	eb0c 0081 	add.w	r0, ip, r1, lsl #2
 8006078:	ee75 7ac7 	vsub.f32	s15, s11, s14
 800607c:	ed92 6a00 	vldr	s12, [r2]
 8006080:	edd0 6a00 	vldr	s13, [r0]
 8006084:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006088:	ee27 7a26 	vmul.f32	s14, s14, s13
 800608c:	1c5d      	adds	r5, r3, #1
 800608e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006092:	008a      	lsls	r2, r1, #2
 8006094:	eef4 7ae8 	vcmpe.f32	s15, s17
 8006098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609c:	bfc8      	it	gt
 800609e:	4699      	movgt	r9, r3
 80060a0:	b2ab      	uxth	r3, r5
 80060a2:	bfc8      	it	gt
 80060a4:	eef0 8a67 	vmovgt.f32	s17, s15
 80060a8:	4619      	mov	r1, r3
 80060aa:	f1b8 0f00 	cmp.w	r8, #0
 80060ae:	d003      	beq.n	80060b8 <acc_detector_presence_processing_next+0x150>
 80060b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060b2:	4410      	add	r0, r2
 80060b4:	edc0 7a00 	vstr	s15, [r0]
 80060b8:	42bb      	cmp	r3, r7
 80060ba:	d3d7      	bcc.n	800606c <acc_detector_presence_processing_next+0x104>
 80060bc:	edd4 9a03 	vldr	s19, [r4, #12]
 80060c0:	eef4 9ae8 	vcmpe.f32	s19, s17
 80060c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c8:	d80d      	bhi.n	80060e6 <acc_detector_presence_processing_next+0x17e>
 80060ca:	ee07 9a90 	vmov	s15, r9
 80060ce:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80060d2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060e2:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 80060e6:	eeb0 0a49 	vmov.f32	s0, s18
 80060ea:	eef0 0a48 	vmov.f32	s1, s16
 80060ee:	f008 febe 	bl	800ee6e <fminf>
 80060f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80060f6:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 80060fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80060fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006102:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8006106:	ee70 8a28 	vadd.f32	s17, s0, s17
 800610a:	eef4 9ae8 	vcmpe.f32	s19, s17
 800610e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006112:	bf94      	ite	ls
 8006114:	2301      	movls	r3, #1
 8006116:	2300      	movhi	r3, #0
 8006118:	edc4 8a11 	vstr	s17, [r4, #68]	; 0x44
 800611c:	edc6 8a01 	vstr	s17, [r6, #4]
 8006120:	7033      	strb	r3, [r6, #0]
 8006122:	f1b8 0f00 	cmp.w	r8, #0
 8006126:	d002      	beq.n	800612e <acc_detector_presence_processing_next+0x1c6>
 8006128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800612a:	6133      	str	r3, [r6, #16]
 800612c:	81b7      	strh	r7, [r6, #12]
 800612e:	eef4 9ae8 	vcmpe.f32	s19, s17
 8006132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006136:	bf9c      	itt	ls
 8006138:	6ca3      	ldrls	r3, [r4, #72]	; 0x48
 800613a:	60b3      	strls	r3, [r6, #8]
 800613c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8006140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006144:	4293      	cmp	r3, r2
 8006146:	bf1c      	itt	ne
 8006148:	3301      	addne	r3, #1
 800614a:	f8a4 304c 	strhne.w	r3, [r4, #76]	; 0x4c
 800614e:	b00b      	add	sp, #44	; 0x2c
 8006150:	ecbd 8b04 	vpop	{d8-d9}
 8006154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <acc_detector_presence_processing_next+0x210>)
 800615a:	4a0b      	ldr	r2, [pc, #44]	; (8006188 <acc_detector_presence_processing_next+0x220>)
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	4908      	ldr	r1, [pc, #32]	; (8006180 <acc_detector_presence_processing_next+0x218>)
 8006160:	4798      	blx	r3
 8006162:	b00b      	add	sp, #44	; 0x2c
 8006164:	ecbd 8b04 	vpop	{d8-d9}
 8006168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800616c:	f894 8040 	ldrb.w	r8, [r4, #64]	; 0x40
 8006170:	eddf 8a04 	vldr	s17, [pc, #16]	; 8006184 <acc_detector_presence_processing_next+0x21c>
 8006174:	46b9      	mov	r9, r7
 8006176:	e7a1      	b.n	80060bc <acc_detector_presence_processing_next+0x154>
 8006178:	200007b0 	.word	0x200007b0
 800617c:	0801129c 	.word	0x0801129c
 8006180:	080111a8 	.word	0x080111a8
 8006184:	00000000 	.word	0x00000000
 8006188:	080112d4 	.word	0x080112d4

0800618c <acc_rss_activate>:
 800618c:	b510      	push	{r4, lr}
 800618e:	4c18      	ldr	r4, [pc, #96]	; (80061f0 <acc_rss_activate+0x64>)
 8006190:	7823      	ldrb	r3, [r4, #0]
 8006192:	b9c3      	cbnz	r3, 80061c6 <acc_rss_activate+0x3a>
 8006194:	b1a8      	cbz	r0, 80061c2 <acc_rss_activate+0x36>
 8006196:	f001 fb29 	bl	80077ec <acc_rss_integration_register>
 800619a:	b188      	cbz	r0, 80061c0 <acc_rss_activate+0x34>
 800619c:	f000 fade 	bl	800675c <acc_service_manager_activate>
 80061a0:	b1e8      	cbz	r0, 80061de <acc_rss_activate+0x52>
 80061a2:	f003 fab1 	bl	8009708 <acc_sensor_manager_activate>
 80061a6:	b1d0      	cbz	r0, 80061de <acc_rss_activate+0x52>
 80061a8:	2301      	movs	r3, #1
 80061aa:	7023      	strb	r3, [r4, #0]
 80061ac:	f001 fc1e 	bl	80079ec <acc_rss_integration_log_level>
 80061b0:	2801      	cmp	r0, #1
 80061b2:	d905      	bls.n	80061c0 <acc_rss_activate+0x34>
 80061b4:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <acc_rss_activate+0x68>)
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <acc_rss_activate+0x6c>)
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	4910      	ldr	r1, [pc, #64]	; (80061fc <acc_rss_activate+0x70>)
 80061bc:	2002      	movs	r0, #2
 80061be:	4798      	blx	r3
 80061c0:	7823      	ldrb	r3, [r4, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	f001 fc11 	bl	80079ec <acc_rss_integration_log_level>
 80061ca:	2801      	cmp	r0, #1
 80061cc:	d9f8      	bls.n	80061c0 <acc_rss_activate+0x34>
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <acc_rss_activate+0x68>)
 80061d0:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <acc_rss_activate+0x74>)
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	4909      	ldr	r1, [pc, #36]	; (80061fc <acc_rss_activate+0x70>)
 80061d6:	2002      	movs	r0, #2
 80061d8:	4798      	blx	r3
 80061da:	7823      	ldrb	r3, [r4, #0]
 80061dc:	e7f1      	b.n	80061c2 <acc_rss_activate+0x36>
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <acc_rss_activate+0x68>)
 80061e0:	4a08      	ldr	r2, [pc, #32]	; (8006204 <acc_rss_activate+0x78>)
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	4905      	ldr	r1, [pc, #20]	; (80061fc <acc_rss_activate+0x70>)
 80061e6:	2000      	movs	r0, #0
 80061e8:	4798      	blx	r3
 80061ea:	7823      	ldrb	r3, [r4, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	bd10      	pop	{r4, pc}
 80061f0:	20000724 	.word	0x20000724
 80061f4:	200007b0 	.word	0x200007b0
 80061f8:	08011310 	.word	0x08011310
 80061fc:	08011330 	.word	0x08011330
 8006200:	0801134c 	.word	0x0801134c
 8006204:	08011334 	.word	0x08011334

08006208 <acc_rss_deactivate>:
 8006208:	b510      	push	{r4, lr}
 800620a:	4c0b      	ldr	r4, [pc, #44]	; (8006238 <acc_rss_deactivate+0x30>)
 800620c:	7823      	ldrb	r3, [r4, #0]
 800620e:	b903      	cbnz	r3, 8006212 <acc_rss_deactivate+0xa>
 8006210:	bd10      	pop	{r4, pc}
 8006212:	f000 fb51 	bl	80068b8 <acc_service_manager_deactivate>
 8006216:	f003 fab3 	bl	8009780 <acc_sensor_manager_deactivate>
 800621a:	f001 fbe7 	bl	80079ec <acc_rss_integration_log_level>
 800621e:	2801      	cmp	r0, #1
 8006220:	d905      	bls.n	800622e <acc_rss_deactivate+0x26>
 8006222:	4b06      	ldr	r3, [pc, #24]	; (800623c <acc_rss_deactivate+0x34>)
 8006224:	4a06      	ldr	r2, [pc, #24]	; (8006240 <acc_rss_deactivate+0x38>)
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	4906      	ldr	r1, [pc, #24]	; (8006244 <acc_rss_deactivate+0x3c>)
 800622a:	2002      	movs	r0, #2
 800622c:	4798      	blx	r3
 800622e:	f001 fb1d 	bl	800786c <acc_rss_integration_unregister>
 8006232:	2300      	movs	r3, #0
 8006234:	7023      	strb	r3, [r4, #0]
 8006236:	bd10      	pop	{r4, pc}
 8006238:	20000724 	.word	0x20000724
 800623c:	200007b0 	.word	0x200007b0
 8006240:	08011374 	.word	0x08011374
 8006244:	08011330 	.word	0x08011330

08006248 <acc_service_maximize_signal_attenuation_set.part.0>:
 8006248:	4b02      	ldr	r3, [pc, #8]	; (8006254 <acc_service_maximize_signal_attenuation_set.part.0+0xc>)
 800624a:	4a03      	ldr	r2, [pc, #12]	; (8006258 <acc_service_maximize_signal_attenuation_set.part.0+0x10>)
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	4903      	ldr	r1, [pc, #12]	; (800625c <acc_service_maximize_signal_attenuation_set.part.0+0x14>)
 8006250:	2001      	movs	r0, #1
 8006252:	4718      	bx	r3
 8006254:	200007b0 	.word	0x200007b0
 8006258:	08011118 	.word	0x08011118
 800625c:	08011398 	.word	0x08011398

08006260 <acc_service_get_base_configuration>:
 8006260:	b510      	push	{r4, lr}
 8006262:	4604      	mov	r4, r0
 8006264:	b108      	cbz	r0, 800626a <acc_service_get_base_configuration+0xa>
 8006266:	6900      	ldr	r0, [r0, #16]
 8006268:	bd10      	pop	{r4, pc}
 800626a:	f001 fbbf 	bl	80079ec <acc_rss_integration_log_level>
 800626e:	2800      	cmp	r0, #0
 8006270:	d0fa      	beq.n	8006268 <acc_service_get_base_configuration+0x8>
 8006272:	4b04      	ldr	r3, [pc, #16]	; (8006284 <acc_service_get_base_configuration+0x24>)
 8006274:	4a04      	ldr	r2, [pc, #16]	; (8006288 <acc_service_get_base_configuration+0x28>)
 8006276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006278:	4904      	ldr	r1, [pc, #16]	; (800628c <acc_service_get_base_configuration+0x2c>)
 800627a:	2001      	movs	r0, #1
 800627c:	4798      	blx	r3
 800627e:	4620      	mov	r0, r4
 8006280:	bd10      	pop	{r4, pc}
 8006282:	bf00      	nop
 8006284:	200007b0 	.word	0x200007b0
 8006288:	08011118 	.word	0x08011118
 800628c:	08011398 	.word	0x08011398

08006290 <set_maximize_signal_attenuation>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	460d      	mov	r5, r1
 8006294:	4606      	mov	r6, r0
 8006296:	f7ff ffe3 	bl	8006260 <acc_service_get_base_configuration>
 800629a:	b158      	cbz	r0, 80062b4 <set_maximize_signal_attenuation+0x24>
 800629c:	4629      	mov	r1, r5
 800629e:	4604      	mov	r4, r0
 80062a0:	f001 fe9c 	bl	8007fdc <acc_base_configuration_maximize_signal_attenuation_set>
 80062a4:	b93d      	cbnz	r5, 80062b6 <set_maximize_signal_attenuation+0x26>
 80062a6:	68b3      	ldr	r3, [r6, #8]
 80062a8:	b123      	cbz	r3, 80062b4 <set_maximize_signal_attenuation+0x24>
 80062aa:	7971      	ldrb	r1, [r6, #5]
 80062ac:	4630      	mov	r0, r6
 80062ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062b2:	4718      	bx	r3
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
 80062b6:	4620      	mov	r0, r4
 80062b8:	210f      	movs	r1, #15
 80062ba:	f001 fd4d 	bl	8007d58 <acc_base_configuration_integrator_set>
 80062be:	4620      	mov	r0, r4
 80062c0:	2101      	movs	r1, #1
 80062c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062c6:	f001 bd77 	b.w	8007db8 <acc_base_configuration_integrator_ramp_up_set>
 80062ca:	bf00      	nop

080062cc <acc_service_activate>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	b120      	cbz	r0, 80062da <acc_service_activate+0xe>
 80062d0:	4b1e      	ldr	r3, [pc, #120]	; (800634c <acc_service_activate+0x80>)
 80062d2:	6802      	ldr	r2, [r0, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	4604      	mov	r4, r0
 80062d8:	d00c      	beq.n	80062f4 <acc_service_activate+0x28>
 80062da:	4c1d      	ldr	r4, [pc, #116]	; (8006350 <acc_service_activate+0x84>)
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <acc_service_activate+0x88>)
 80062de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062e0:	491d      	ldr	r1, [pc, #116]	; (8006358 <acc_service_activate+0x8c>)
 80062e2:	2000      	movs	r0, #0
 80062e4:	4798      	blx	r3
 80062e6:	2000      	movs	r0, #0
 80062e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <acc_service_activate+0x90>)
 80062ec:	491a      	ldr	r1, [pc, #104]	; (8006358 <acc_service_activate+0x8c>)
 80062ee:	4798      	blx	r3
 80062f0:	2000      	movs	r0, #0
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <acc_service_activate+0x94>)
 80062f6:	7818      	ldrb	r0, [r3, #0]
 80062f8:	b198      	cbz	r0, 8006322 <acc_service_activate+0x56>
 80062fa:	7a63      	ldrb	r3, [r4, #9]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f8      	beq.n	80062f2 <acc_service_activate+0x26>
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	2b2a      	cmp	r3, #42	; 0x2a
 8006304:	d80d      	bhi.n	8006322 <acc_service_activate+0x56>
 8006306:	4d17      	ldr	r5, [pc, #92]	; (8006364 <acc_service_activate+0x98>)
 8006308:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 800630c:	b94a      	cbnz	r2, 8006322 <acc_service_activate+0x56>
 800630e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8006312:	2101      	movs	r1, #1
 8006314:	7856      	ldrb	r6, [r2, #1]
 8006316:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 800631a:	b126      	cbz	r6, 8006326 <acc_service_activate+0x5a>
 800631c:	2200      	movs	r2, #0
 800631e:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 8006322:	4c0b      	ldr	r4, [pc, #44]	; (8006350 <acc_service_activate+0x84>)
 8006324:	e7df      	b.n	80062e6 <acc_service_activate+0x1a>
 8006326:	f104 0018 	add.w	r0, r4, #24
 800632a:	f003 fb93 	bl	8009a54 <acc_sensor_manager_start_measurement>
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	b138      	cbz	r0, 8006342 <acc_service_activate+0x76>
 8006332:	2b2a      	cmp	r3, #42	; 0x2a
 8006334:	d808      	bhi.n	8006348 <acc_service_activate+0x7c>
 8006336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800633a:	7266      	strb	r6, [r4, #9]
 800633c:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 8006340:	bd70      	pop	{r4, r5, r6, pc}
 8006342:	2b2a      	cmp	r3, #42	; 0x2a
 8006344:	d8ed      	bhi.n	8006322 <acc_service_activate+0x56>
 8006346:	e7e9      	b.n	800631c <acc_service_activate+0x50>
 8006348:	7266      	strb	r6, [r4, #9]
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	acc09ee8 	.word	0xacc09ee8
 8006350:	200007b0 	.word	0x200007b0
 8006354:	08011160 	.word	0x08011160
 8006358:	08011398 	.word	0x08011398
 800635c:	080113a0 	.word	0x080113a0
 8006360:	20000725 	.word	0x20000725
 8006364:	20000728 	.word	0x20000728

08006368 <acc_service_deactivate>:
 8006368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636c:	b120      	cbz	r0, 8006378 <acc_service_deactivate+0x10>
 800636e:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <acc_service_deactivate+0x78>)
 8006370:	6802      	ldr	r2, [r0, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	4604      	mov	r4, r0
 8006376:	d00e      	beq.n	8006396 <acc_service_deactivate+0x2e>
 8006378:	4c1a      	ldr	r4, [pc, #104]	; (80063e4 <acc_service_deactivate+0x7c>)
 800637a:	4a1b      	ldr	r2, [pc, #108]	; (80063e8 <acc_service_deactivate+0x80>)
 800637c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800637e:	491b      	ldr	r1, [pc, #108]	; (80063ec <acc_service_deactivate+0x84>)
 8006380:	2000      	movs	r0, #0
 8006382:	4798      	blx	r3
 8006384:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006386:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <acc_service_deactivate+0x88>)
 8006388:	4918      	ldr	r1, [pc, #96]	; (80063ec <acc_service_deactivate+0x84>)
 800638a:	2000      	movs	r0, #0
 800638c:	4798      	blx	r3
 800638e:	2500      	movs	r5, #0
 8006390:	4628      	mov	r0, r5
 8006392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006396:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <acc_service_deactivate+0x8c>)
 8006398:	781d      	ldrb	r5, [r3, #0]
 800639a:	b1dd      	cbz	r5, 80063d4 <acc_service_deactivate+0x6c>
 800639c:	7a43      	ldrb	r3, [r0, #9]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f6      	bne.n	8006390 <acc_service_deactivate+0x28>
 80063a2:	6843      	ldr	r3, [r0, #4]
 80063a4:	2b2a      	cmp	r3, #42	; 0x2a
 80063a6:	d815      	bhi.n	80063d4 <acc_service_deactivate+0x6c>
 80063a8:	4e13      	ldr	r6, [pc, #76]	; (80063f8 <acc_service_deactivate+0x90>)
 80063aa:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 80063ae:	b98f      	cbnz	r7, 80063d4 <acc_service_deactivate+0x6c>
 80063b0:	f04f 0801 	mov.w	r8, #1
 80063b4:	3018      	adds	r0, #24
 80063b6:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 80063ba:	f003 fb85 	bl	8009ac8 <acc_sensor_manager_stop_measurement>
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	2b2a      	cmp	r3, #42	; 0x2a
 80063c2:	d809      	bhi.n	80063d8 <acc_service_deactivate+0x70>
 80063c4:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 80063c8:	7057      	strb	r7, [r2, #1]
 80063ca:	f884 8009 	strb.w	r8, [r4, #9]
 80063ce:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 80063d2:	e7dd      	b.n	8006390 <acc_service_deactivate+0x28>
 80063d4:	4c03      	ldr	r4, [pc, #12]	; (80063e4 <acc_service_deactivate+0x7c>)
 80063d6:	e7d5      	b.n	8006384 <acc_service_deactivate+0x1c>
 80063d8:	f884 8009 	strb.w	r8, [r4, #9]
 80063dc:	e7d8      	b.n	8006390 <acc_service_deactivate+0x28>
 80063de:	bf00      	nop
 80063e0:	acc09ee8 	.word	0xacc09ee8
 80063e4:	200007b0 	.word	0x200007b0
 80063e8:	08011160 	.word	0x08011160
 80063ec:	08011398 	.word	0x08011398
 80063f0:	080113bc 	.word	0x080113bc
 80063f4:	20000725 	.word	0x20000725
 80063f8:	20000728 	.word	0x20000728

080063fc <acc_service_requested_start_set>:
 80063fc:	b500      	push	{lr}
 80063fe:	b083      	sub	sp, #12
 8006400:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006404:	f7ff ff2c 	bl	8006260 <acc_service_get_base_configuration>
 8006408:	ed9d 0a01 	vldr	s0, [sp, #4]
 800640c:	b003      	add	sp, #12
 800640e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006412:	f001 bb99 	b.w	8007b48 <acc_base_configuration_requested_start_set>
 8006416:	bf00      	nop

08006418 <acc_service_requested_length_set>:
 8006418:	b500      	push	{lr}
 800641a:	b083      	sub	sp, #12
 800641c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006420:	f7ff ff1e 	bl	8006260 <acc_service_get_base_configuration>
 8006424:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006428:	b003      	add	sp, #12
 800642a:	f85d eb04 	ldr.w	lr, [sp], #4
 800642e:	f001 bbad 	b.w	8007b8c <acc_base_configuration_requested_length_set>
 8006432:	bf00      	nop

08006434 <acc_service_repetition_mode_on_demand_set>:
 8006434:	b508      	push	{r3, lr}
 8006436:	f7ff ff13 	bl	8006260 <acc_service_get_base_configuration>
 800643a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800643e:	f001 bbb7 	b.w	8007bb0 <acc_base_configuration_repetition_mode_on_demand_set>
 8006442:	bf00      	nop

08006444 <acc_service_power_save_mode_set>:
 8006444:	b500      	push	{lr}
 8006446:	b083      	sub	sp, #12
 8006448:	9101      	str	r1, [sp, #4]
 800644a:	f7ff ff09 	bl	8006260 <acc_service_get_base_configuration>
 800644e:	9901      	ldr	r1, [sp, #4]
 8006450:	b003      	add	sp, #12
 8006452:	f85d eb04 	ldr.w	lr, [sp], #4
 8006456:	f001 bbc1 	b.w	8007bdc <acc_base_configuration_power_save_mode_set>
 800645a:	bf00      	nop

0800645c <acc_service_pipeline_destroy>:
 800645c:	b510      	push	{r4, lr}
 800645e:	4604      	mov	r4, r0
 8006460:	6900      	ldr	r0, [r0, #16]
 8006462:	b118      	cbz	r0, 800646c <acc_service_pipeline_destroy+0x10>
 8006464:	68c3      	ldr	r3, [r0, #12]
 8006466:	4798      	blx	r3
 8006468:	2300      	movs	r3, #0
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	bd10      	pop	{r4, pc}
 800646e:	bf00      	nop

08006470 <acc_service_get_next>:
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	460e      	mov	r6, r1
 8006476:	b082      	sub	sp, #8
 8006478:	4604      	mov	r4, r0
 800647a:	b118      	cbz	r0, 8006484 <acc_service_get_next+0x14>
 800647c:	4b32      	ldr	r3, [pc, #200]	; (8006548 <acc_service_get_next+0xd8>)
 800647e:	6802      	ldr	r2, [r0, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d02c      	beq.n	80064de <acc_service_get_next+0x6e>
 8006484:	4b31      	ldr	r3, [pc, #196]	; (800654c <acc_service_get_next+0xdc>)
 8006486:	4a32      	ldr	r2, [pc, #200]	; (8006550 <acc_service_get_next+0xe0>)
 8006488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648a:	4932      	ldr	r1, [pc, #200]	; (8006554 <acc_service_get_next+0xe4>)
 800648c:	2000      	movs	r0, #0
 800648e:	4798      	blx	r3
 8006490:	2300      	movs	r3, #0
 8006492:	7eb5      	ldrb	r5, [r6, #26]
 8006494:	b175      	cbz	r5, 80064b4 <acc_service_get_next+0x44>
 8006496:	6872      	ldr	r2, [r6, #4]
 8006498:	b10a      	cbz	r2, 800649e <acc_service_get_next+0x2e>
 800649a:	68f2      	ldr	r2, [r6, #12]
 800649c:	b96a      	cbnz	r2, 80064ba <acc_service_get_next+0x4a>
 800649e:	4b2b      	ldr	r3, [pc, #172]	; (800654c <acc_service_get_next+0xdc>)
 80064a0:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <acc_service_get_next+0xe8>)
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	492b      	ldr	r1, [pc, #172]	; (8006554 <acc_service_get_next+0xe4>)
 80064a6:	2000      	movs	r0, #0
 80064a8:	4798      	blx	r3
 80064aa:	2500      	movs	r5, #0
 80064ac:	4628      	mov	r0, r5
 80064ae:	b002      	add	sp, #8
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b4:	68b2      	ldr	r2, [r6, #8]
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	d035      	beq.n	8006526 <acc_service_get_next+0xb6>
 80064ba:	b923      	cbnz	r3, 80064c6 <acc_service_get_next+0x56>
 80064bc:	2500      	movs	r5, #0
 80064be:	4628      	mov	r0, r5
 80064c0:	b002      	add	sp, #8
 80064c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c6:	7a23      	ldrb	r3, [r4, #8]
 80064c8:	7832      	ldrb	r2, [r6, #0]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d009      	beq.n	80064e2 <acc_service_get_next+0x72>
 80064ce:	491f      	ldr	r1, [pc, #124]	; (800654c <acc_service_get_next+0xdc>)
 80064d0:	9200      	str	r2, [sp, #0]
 80064d2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80064d4:	4a21      	ldr	r2, [pc, #132]	; (800655c <acc_service_get_next+0xec>)
 80064d6:	491f      	ldr	r1, [pc, #124]	; (8006554 <acc_service_get_next+0xe4>)
 80064d8:	2000      	movs	r0, #0
 80064da:	47a0      	blx	r4
 80064dc:	e7ee      	b.n	80064bc <acc_service_get_next+0x4c>
 80064de:	2301      	movs	r3, #1
 80064e0:	e7d7      	b.n	8006492 <acc_service_get_next+0x22>
 80064e2:	7e37      	ldrb	r7, [r6, #24]
 80064e4:	bb4f      	cbnz	r7, 800653a <acc_service_get_next+0xca>
 80064e6:	f894 8009 	ldrb.w	r8, [r4, #9]
 80064ea:	f1b8 0f00 	cmp.w	r8, #0
 80064ee:	d00f      	beq.n	8006510 <acc_service_get_next+0xa0>
 80064f0:	4b16      	ldr	r3, [pc, #88]	; (800654c <acc_service_get_next+0xdc>)
 80064f2:	4a1b      	ldr	r2, [pc, #108]	; (8006560 <acc_service_get_next+0xf0>)
 80064f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f6:	4917      	ldr	r1, [pc, #92]	; (8006554 <acc_service_get_next+0xe4>)
 80064f8:	2000      	movs	r0, #0
 80064fa:	4798      	blx	r3
 80064fc:	2500      	movs	r5, #0
 80064fe:	2f00      	cmp	r7, #0
 8006500:	d0dd      	beq.n	80064be <acc_service_get_next+0x4e>
 8006502:	4620      	mov	r0, r4
 8006504:	f7ff ff30 	bl	8006368 <acc_service_deactivate>
 8006508:	4628      	mov	r0, r5
 800650a:	b002      	add	sp, #8
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	6166      	str	r6, [r4, #20]
 8006514:	e9d3 0200 	ldrd	r0, r2, [r3]
 8006518:	4790      	blx	r2
 800651a:	7e75      	ldrb	r5, [r6, #25]
 800651c:	f8c4 8014 	str.w	r8, [r4, #20]
 8006520:	f085 0501 	eor.w	r5, r5, #1
 8006524:	e7eb      	b.n	80064fe <acc_service_get_next+0x8e>
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <acc_service_get_next+0xdc>)
 8006528:	4a0e      	ldr	r2, [pc, #56]	; (8006564 <acc_service_get_next+0xf4>)
 800652a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652c:	4909      	ldr	r1, [pc, #36]	; (8006554 <acc_service_get_next+0xe4>)
 800652e:	4628      	mov	r0, r5
 8006530:	4798      	blx	r3
 8006532:	4628      	mov	r0, r5
 8006534:	b002      	add	sp, #8
 8006536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800653a:	4620      	mov	r0, r4
 800653c:	f7ff fec6 	bl	80062cc <acc_service_activate>
 8006540:	4607      	mov	r7, r0
 8006542:	2800      	cmp	r0, #0
 8006544:	d1cf      	bne.n	80064e6 <acc_service_get_next+0x76>
 8006546:	e7b9      	b.n	80064bc <acc_service_get_next+0x4c>
 8006548:	acc09ee8 	.word	0xacc09ee8
 800654c:	200007b0 	.word	0x200007b0
 8006550:	08011160 	.word	0x08011160
 8006554:	08011398 	.word	0x08011398
 8006558:	080113d8 	.word	0x080113d8
 800655c:	08011410 	.word	0x08011410
 8006560:	0801142c 	.word	0x0801142c
 8006564:	080113f8 	.word	0x080113f8

08006568 <acc_service_send_data>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	9e06      	ldr	r6, [sp, #24]
 800656c:	6944      	ldr	r4, [r0, #20]
 800656e:	7835      	ldrb	r5, [r6, #0]
 8006570:	461f      	mov	r7, r3
 8006572:	b91d      	cbnz	r5, 800657c <acc_service_send_data+0x14>
 8006574:	7ea5      	ldrb	r5, [r4, #26]
 8006576:	b95d      	cbnz	r5, 8006590 <acc_service_send_data+0x28>
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	6019      	str	r1, [r3, #0]
 800657c:	6920      	ldr	r0, [r4, #16]
 800657e:	7665      	strb	r5, [r4, #25]
 8006580:	b128      	cbz	r0, 800658e <acc_service_send_data+0x26>
 8006582:	6962      	ldr	r2, [r4, #20]
 8006584:	4639      	mov	r1, r7
 8006586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800658a:	f005 be67 	b.w	800c25c <memcpy>
 800658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006590:	68e3      	ldr	r3, [r4, #12]
 8006592:	6860      	ldr	r0, [r4, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	bf28      	it	cs
 8006598:	461a      	movcs	r2, r3
 800659a:	f005 fe5f 	bl	800c25c <memcpy>
 800659e:	7835      	ldrb	r5, [r6, #0]
 80065a0:	e7ec      	b.n	800657c <acc_service_send_data+0x14>
 80065a2:	bf00      	nop

080065a4 <acc_service_set_module_active>:
 80065a4:	4b01      	ldr	r3, [pc, #4]	; (80065ac <acc_service_set_module_active+0x8>)
 80065a6:	7018      	strb	r0, [r3, #0]
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	20000725 	.word	0x20000725

080065b0 <acc_service_handle_valid>:
 80065b0:	b508      	push	{r3, lr}
 80065b2:	b118      	cbz	r0, 80065bc <acc_service_handle_valid+0xc>
 80065b4:	6802      	ldr	r2, [r0, #0]
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <acc_service_handle_valid+0x20>)
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d007      	beq.n	80065cc <acc_service_handle_valid+0x1c>
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <acc_service_handle_valid+0x24>)
 80065be:	4a06      	ldr	r2, [pc, #24]	; (80065d8 <acc_service_handle_valid+0x28>)
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	4906      	ldr	r1, [pc, #24]	; (80065dc <acc_service_handle_valid+0x2c>)
 80065c4:	2000      	movs	r0, #0
 80065c6:	4798      	blx	r3
 80065c8:	2000      	movs	r0, #0
 80065ca:	bd08      	pop	{r3, pc}
 80065cc:	2001      	movs	r0, #1
 80065ce:	bd08      	pop	{r3, pc}
 80065d0:	acc09ee8 	.word	0xacc09ee8
 80065d4:	200007b0 	.word	0x200007b0
 80065d8:	08011160 	.word	0x08011160
 80065dc:	08011398 	.word	0x08011398

080065e0 <acc_service_configuration_valid>:
 80065e0:	b508      	push	{r3, lr}
 80065e2:	b118      	cbz	r0, 80065ec <acc_service_configuration_valid+0xc>
 80065e4:	4b09      	ldr	r3, [pc, #36]	; (800660c <acc_service_configuration_valid+0x2c>)
 80065e6:	6802      	ldr	r2, [r0, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d007      	beq.n	80065fc <acc_service_configuration_valid+0x1c>
 80065ec:	4b08      	ldr	r3, [pc, #32]	; (8006610 <acc_service_configuration_valid+0x30>)
 80065ee:	4a09      	ldr	r2, [pc, #36]	; (8006614 <acc_service_configuration_valid+0x34>)
 80065f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f2:	4909      	ldr	r1, [pc, #36]	; (8006618 <acc_service_configuration_valid+0x38>)
 80065f4:	2000      	movs	r0, #0
 80065f6:	4798      	blx	r3
 80065f8:	2000      	movs	r0, #0
 80065fa:	bd08      	pop	{r3, pc}
 80065fc:	8b03      	ldrh	r3, [r0, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f4      	beq.n	80065ec <acc_service_configuration_valid+0xc>
 8006602:	6943      	ldr	r3, [r0, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f1      	beq.n	80065ec <acc_service_configuration_valid+0xc>
 8006608:	2001      	movs	r0, #1
 800660a:	bd08      	pop	{r3, pc}
 800660c:	acc09dd7 	.word	0xacc09dd7
 8006610:	200007b0 	.word	0x200007b0
 8006614:	08011118 	.word	0x08011118
 8006618:	08011398 	.word	0x08011398

0800661c <acc_service_configuration_check>:
 800661c:	b508      	push	{r3, lr}
 800661e:	b118      	cbz	r0, 8006628 <acc_service_configuration_check+0xc>
 8006620:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <acc_service_configuration_check+0x3c>)
 8006622:	6802      	ldr	r2, [r0, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d007      	beq.n	8006638 <acc_service_configuration_check+0x1c>
 8006628:	4b0c      	ldr	r3, [pc, #48]	; (800665c <acc_service_configuration_check+0x40>)
 800662a:	4a0d      	ldr	r2, [pc, #52]	; (8006660 <acc_service_configuration_check+0x44>)
 800662c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662e:	490d      	ldr	r1, [pc, #52]	; (8006664 <acc_service_configuration_check+0x48>)
 8006630:	2000      	movs	r0, #0
 8006632:	4798      	blx	r3
 8006634:	2000      	movs	r0, #0
 8006636:	bd08      	pop	{r3, pc}
 8006638:	8b03      	ldrh	r3, [r0, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f4      	beq.n	8006628 <acc_service_configuration_check+0xc>
 800663e:	6943      	ldr	r3, [r0, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f1      	beq.n	8006628 <acc_service_configuration_check+0xc>
 8006644:	7943      	ldrb	r3, [r0, #5]
 8006646:	3b01      	subs	r3, #1
 8006648:	2b04      	cmp	r3, #4
 800664a:	d801      	bhi.n	8006650 <acc_service_configuration_check+0x34>
 800664c:	2001      	movs	r0, #1
 800664e:	bd08      	pop	{r3, pc}
 8006650:	4b02      	ldr	r3, [pc, #8]	; (800665c <acc_service_configuration_check+0x40>)
 8006652:	4a05      	ldr	r2, [pc, #20]	; (8006668 <acc_service_configuration_check+0x4c>)
 8006654:	e7ea      	b.n	800662c <acc_service_configuration_check+0x10>
 8006656:	bf00      	nop
 8006658:	acc09dd7 	.word	0xacc09dd7
 800665c:	200007b0 	.word	0x200007b0
 8006660:	08011118 	.word	0x08011118
 8006664:	08011398 	.word	0x08011398
 8006668:	08011444 	.word	0x08011444

0800666c <acc_service_profile_set>:
 800666c:	b510      	push	{r4, lr}
 800666e:	b138      	cbz	r0, 8006680 <acc_service_profile_set+0x14>
 8006670:	6882      	ldr	r2, [r0, #8]
 8006672:	4604      	mov	r4, r0
 8006674:	b122      	cbz	r2, 8006680 <acc_service_profile_set+0x14>
 8006676:	7141      	strb	r1, [r0, #5]
 8006678:	4790      	blx	r2
 800667a:	7b23      	ldrb	r3, [r4, #12]
 800667c:	b943      	cbnz	r3, 8006690 <acc_service_profile_set+0x24>
 800667e:	bd10      	pop	{r4, pc}
 8006680:	f001 f9b4 	bl	80079ec <acc_rss_integration_log_level>
 8006684:	2800      	cmp	r0, #0
 8006686:	d0fa      	beq.n	800667e <acc_service_profile_set+0x12>
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f7ff bddc 	b.w	8006248 <acc_service_maximize_signal_attenuation_set.part.0>
 8006690:	4620      	mov	r0, r4
 8006692:	2101      	movs	r1, #1
 8006694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006698:	f7ff bdfa 	b.w	8006290 <set_maximize_signal_attenuation>

0800669c <acc_service_maximize_signal_attenuation_set>:
 800669c:	b508      	push	{r3, lr}
 800669e:	b120      	cbz	r0, 80066aa <acc_service_maximize_signal_attenuation_set+0xe>
 80066a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066a4:	7301      	strb	r1, [r0, #12]
 80066a6:	f7ff bdf3 	b.w	8006290 <set_maximize_signal_attenuation>
 80066aa:	f001 f99f 	bl	80079ec <acc_rss_integration_log_level>
 80066ae:	b118      	cbz	r0, 80066b8 <acc_service_maximize_signal_attenuation_set+0x1c>
 80066b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066b4:	f7ff bdc8 	b.w	8006248 <acc_service_maximize_signal_attenuation_set.part.0>
 80066b8:	bd08      	pop	{r3, pc}
 80066ba:	bf00      	nop

080066bc <acc_service_initialize_service_configuration>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	7101      	strb	r1, [r0, #4]
 80066c0:	6102      	str	r2, [r0, #16]
 80066c2:	9905      	ldr	r1, [sp, #20]
 80066c4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80066c8:	4d07      	ldr	r5, [pc, #28]	; (80066e8 <acc_service_initialize_service_configuration+0x2c>)
 80066ca:	6143      	str	r3, [r0, #20]
 80066cc:	4604      	mov	r4, r0
 80066ce:	6005      	str	r5, [r0, #0]
 80066d0:	6081      	str	r1, [r0, #8]
 80066d2:	8302      	strh	r2, [r0, #24]
 80066d4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80066d8:	f7ff ffc8 	bl	800666c <acc_service_profile_set>
 80066dc:	4620      	mov	r0, r4
 80066de:	2100      	movs	r1, #0
 80066e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e4:	f7ff bfda 	b.w	800669c <acc_service_maximize_signal_attenuation_set>
 80066e8:	acc09dd7 	.word	0xacc09dd7

080066ec <destroy_handle>:
 80066ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f0:	4e15      	ldr	r6, [pc, #84]	; (8006748 <destroy_handle+0x5c>)
 80066f2:	4605      	mov	r5, r0
 80066f4:	6874      	ldr	r4, [r6, #4]
 80066f6:	f001 f979 	bl	80079ec <acc_rss_integration_log_level>
 80066fa:	2803      	cmp	r0, #3
 80066fc:	d906      	bls.n	800670c <destroy_handle+0x20>
 80066fe:	4a13      	ldr	r2, [pc, #76]	; (800674c <destroy_handle+0x60>)
 8006700:	686b      	ldr	r3, [r5, #4]
 8006702:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8006704:	4912      	ldr	r1, [pc, #72]	; (8006750 <destroy_handle+0x64>)
 8006706:	4a13      	ldr	r2, [pc, #76]	; (8006754 <destroy_handle+0x68>)
 8006708:	2004      	movs	r0, #4
 800670a:	47b8      	blx	r7
 800670c:	b144      	cbz	r4, 8006720 <destroy_handle+0x34>
 800670e:	42ac      	cmp	r4, r5
 8006710:	d102      	bne.n	8006718 <destroy_handle+0x2c>
 8006712:	e016      	b.n	8006742 <destroy_handle+0x56>
 8006714:	42a5      	cmp	r5, r4
 8006716:	d00d      	beq.n	8006734 <destroy_handle+0x48>
 8006718:	4623      	mov	r3, r4
 800671a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 800671c:	2c00      	cmp	r4, #0
 800671e:	d1f9      	bne.n	8006714 <destroy_handle+0x28>
 8006720:	4a0a      	ldr	r2, [pc, #40]	; (800674c <destroy_handle+0x60>)
 8006722:	686b      	ldr	r3, [r5, #4]
 8006724:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006726:	490a      	ldr	r1, [pc, #40]	; (8006750 <destroy_handle+0x64>)
 8006728:	4a0b      	ldr	r2, [pc, #44]	; (8006758 <destroy_handle+0x6c>)
 800672a:	46a4      	mov	ip, r4
 800672c:	2000      	movs	r0, #0
 800672e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006732:	4760      	bx	ip
 8006734:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8006736:	655a      	str	r2, [r3, #84]	; 0x54
 8006738:	4628      	mov	r0, r5
 800673a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800673e:	f001 b943 	b.w	80079c8 <acc_rss_integration_mem_free>
 8006742:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006744:	6073      	str	r3, [r6, #4]
 8006746:	e7f7      	b.n	8006738 <destroy_handle+0x4c>
 8006748:	20000780 	.word	0x20000780
 800674c:	200007b0 	.word	0x200007b0
 8006750:	08011480 	.word	0x08011480
 8006754:	0801145c 	.word	0x0801145c
 8006758:	08011490 	.word	0x08011490

0800675c <acc_service_manager_activate>:
 800675c:	b510      	push	{r4, lr}
 800675e:	4c05      	ldr	r4, [pc, #20]	; (8006774 <acc_service_manager_activate+0x18>)
 8006760:	7820      	ldrb	r0, [r4, #0]
 8006762:	b100      	cbz	r0, 8006766 <acc_service_manager_activate+0xa>
 8006764:	bd10      	pop	{r4, pc}
 8006766:	2001      	movs	r0, #1
 8006768:	7020      	strb	r0, [r4, #0]
 800676a:	f7ff ff1b 	bl	80065a4 <acc_service_set_module_active>
 800676e:	7820      	ldrb	r0, [r4, #0]
 8006770:	bd10      	pop	{r4, pc}
 8006772:	bf00      	nop
 8006774:	20000780 	.word	0x20000780

08006778 <acc_service_create>:
 8006778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677c:	4e30      	ldr	r6, [pc, #192]	; (8006840 <acc_service_create+0xc8>)
 800677e:	7834      	ldrb	r4, [r6, #0]
 8006780:	2c00      	cmp	r4, #0
 8006782:	d041      	beq.n	8006808 <acc_service_create+0x90>
 8006784:	4605      	mov	r5, r0
 8006786:	f7ff ff2b 	bl	80065e0 <acc_service_configuration_valid>
 800678a:	b1a0      	cbz	r0, 80067b6 <acc_service_create+0x3e>
 800678c:	692b      	ldr	r3, [r5, #16]
 800678e:	68df      	ldr	r7, [r3, #12]
 8006790:	1e7b      	subs	r3, r7, #1
 8006792:	2b29      	cmp	r3, #41	; 0x29
 8006794:	d84a      	bhi.n	800682c <acc_service_create+0xb4>
 8006796:	7873      	ldrb	r3, [r6, #1]
 8006798:	b98b      	cbnz	r3, 80067be <acc_service_create+0x46>
 800679a:	6873      	ldr	r3, [r6, #4]
 800679c:	b913      	cbnz	r3, 80067a4 <acc_service_create+0x2c>
 800679e:	e00e      	b.n	80067be <acc_service_create+0x46>
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	b163      	cbz	r3, 80067be <acc_service_create+0x46>
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	4297      	cmp	r7, r2
 80067a8:	d1fa      	bne.n	80067a0 <acc_service_create+0x28>
 80067aa:	4b26      	ldr	r3, [pc, #152]	; (8006844 <acc_service_create+0xcc>)
 80067ac:	4a26      	ldr	r2, [pc, #152]	; (8006848 <acc_service_create+0xd0>)
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	4926      	ldr	r1, [pc, #152]	; (800684c <acc_service_create+0xd4>)
 80067b2:	2000      	movs	r0, #0
 80067b4:	4798      	blx	r3
 80067b6:	2400      	movs	r4, #0
 80067b8:	4620      	mov	r0, r4
 80067ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067be:	8b2c      	ldrh	r4, [r5, #24]
 80067c0:	f001 f914 	bl	80079ec <acc_rss_integration_log_level>
 80067c4:	2803      	cmp	r0, #3
 80067c6:	d907      	bls.n	80067d8 <acc_service_create+0x60>
 80067c8:	4b1e      	ldr	r3, [pc, #120]	; (8006844 <acc_service_create+0xcc>)
 80067ca:	4a21      	ldr	r2, [pc, #132]	; (8006850 <acc_service_create+0xd8>)
 80067cc:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80067d0:	491e      	ldr	r1, [pc, #120]	; (800684c <acc_service_create+0xd4>)
 80067d2:	463b      	mov	r3, r7
 80067d4:	2004      	movs	r0, #4
 80067d6:	47c0      	blx	r8
 80067d8:	4621      	mov	r1, r4
 80067da:	4a1c      	ldr	r2, [pc, #112]	; (800684c <acc_service_create+0xd4>)
 80067dc:	23bd      	movs	r3, #189	; 0xbd
 80067de:	2001      	movs	r0, #1
 80067e0:	f001 f8d2 	bl	8007988 <acc_rss_integration_mem_calloc_debug>
 80067e4:	4604      	mov	r4, r0
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d0e5      	beq.n	80067b6 <acc_service_create+0x3e>
 80067ea:	6873      	ldr	r3, [r6, #4]
 80067ec:	4a19      	ldr	r2, [pc, #100]	; (8006854 <acc_service_create+0xdc>)
 80067ee:	6047      	str	r7, [r0, #4]
 80067f0:	6002      	str	r2, [r0, #0]
 80067f2:	6543      	str	r3, [r0, #84]	; 0x54
 80067f4:	6070      	str	r0, [r6, #4]
 80067f6:	696b      	ldr	r3, [r5, #20]
 80067f8:	4629      	mov	r1, r5
 80067fa:	4798      	blx	r3
 80067fc:	b168      	cbz	r0, 800681a <acc_service_create+0xa2>
 80067fe:	2301      	movs	r3, #1
 8006800:	7263      	strb	r3, [r4, #9]
 8006802:	4620      	mov	r0, r4
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <acc_service_create+0xcc>)
 800680a:	4a13      	ldr	r2, [pc, #76]	; (8006858 <acc_service_create+0xe0>)
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	490f      	ldr	r1, [pc, #60]	; (800684c <acc_service_create+0xd4>)
 8006810:	4620      	mov	r0, r4
 8006812:	4798      	blx	r3
 8006814:	4620      	mov	r0, r4
 8006816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	b10b      	cbz	r3, 8006822 <acc_service_create+0xaa>
 800681e:	4620      	mov	r0, r4
 8006820:	4798      	blx	r3
 8006822:	4620      	mov	r0, r4
 8006824:	f7ff ff62 	bl	80066ec <destroy_handle>
 8006828:	2400      	movs	r4, #0
 800682a:	e7c5      	b.n	80067b8 <acc_service_create+0x40>
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <acc_service_create+0xcc>)
 800682e:	4a0b      	ldr	r2, [pc, #44]	; (800685c <acc_service_create+0xe4>)
 8006830:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006832:	4906      	ldr	r1, [pc, #24]	; (800684c <acc_service_create+0xd4>)
 8006834:	232a      	movs	r3, #42	; 0x2a
 8006836:	2000      	movs	r0, #0
 8006838:	47a0      	blx	r4
 800683a:	2400      	movs	r4, #0
 800683c:	e7bc      	b.n	80067b8 <acc_service_create+0x40>
 800683e:	bf00      	nop
 8006840:	20000780 	.word	0x20000780
 8006844:	200007b0 	.word	0x200007b0
 8006848:	08011524 	.word	0x08011524
 800684c:	08011480 	.word	0x08011480
 8006850:	080114f0 	.word	0x080114f0
 8006854:	acc09ee8 	.word	0xacc09ee8
 8006858:	08011510 	.word	0x08011510
 800685c:	080114c4 	.word	0x080114c4

08006860 <acc_service_destroy>:
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <acc_service_destroy+0x48>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	b510      	push	{r4, lr}
 8006866:	b133      	cbz	r3, 8006876 <acc_service_destroy+0x16>
 8006868:	4604      	mov	r4, r0
 800686a:	b118      	cbz	r0, 8006874 <acc_service_destroy+0x14>
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f7ff fe9f 	bl	80065b0 <acc_service_handle_valid>
 8006872:	b960      	cbnz	r0, 800688e <acc_service_destroy+0x2e>
 8006874:	bd10      	pop	{r4, pc}
 8006876:	f001 f8b9 	bl	80079ec <acc_rss_integration_log_level>
 800687a:	2800      	cmp	r0, #0
 800687c:	d0fa      	beq.n	8006874 <acc_service_destroy+0x14>
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <acc_service_destroy+0x4c>)
 8006880:	4a0b      	ldr	r2, [pc, #44]	; (80068b0 <acc_service_destroy+0x50>)
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	490b      	ldr	r1, [pc, #44]	; (80068b4 <acc_service_destroy+0x54>)
 8006886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800688a:	2001      	movs	r0, #1
 800688c:	4718      	bx	r3
 800688e:	6820      	ldr	r0, [r4, #0]
 8006890:	f7ff fd6a 	bl	8006368 <acc_service_deactivate>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	68c3      	ldr	r3, [r0, #12]
 8006898:	b10b      	cbz	r3, 800689e <acc_service_destroy+0x3e>
 800689a:	4798      	blx	r3
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	f7ff ff25 	bl	80066ec <destroy_handle>
 80068a2:	2300      	movs	r3, #0
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd10      	pop	{r4, pc}
 80068a8:	20000780 	.word	0x20000780
 80068ac:	200007b0 	.word	0x200007b0
 80068b0:	08011510 	.word	0x08011510
 80068b4:	08011480 	.word	0x08011480

080068b8 <acc_service_manager_deactivate>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4c0e      	ldr	r4, [pc, #56]	; (80068f4 <acc_service_manager_deactivate+0x3c>)
 80068bc:	7823      	ldrb	r3, [r4, #0]
 80068be:	b1bb      	cbz	r3, 80068f0 <acc_service_manager_deactivate+0x38>
 80068c0:	6863      	ldr	r3, [r4, #4]
 80068c2:	b17b      	cbz	r3, 80068e4 <acc_service_manager_deactivate+0x2c>
 80068c4:	1d25      	adds	r5, r4, #4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7ff ffca 	bl	8006860 <acc_service_destroy>
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f9      	bne.n	80068c6 <acc_service_manager_deactivate+0xe>
 80068d2:	f001 f88b 	bl	80079ec <acc_rss_integration_log_level>
 80068d6:	b128      	cbz	r0, 80068e4 <acc_service_manager_deactivate+0x2c>
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <acc_service_manager_deactivate+0x40>)
 80068da:	4a08      	ldr	r2, [pc, #32]	; (80068fc <acc_service_manager_deactivate+0x44>)
 80068dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068de:	4908      	ldr	r1, [pc, #32]	; (8006900 <acc_service_manager_deactivate+0x48>)
 80068e0:	2001      	movs	r0, #1
 80068e2:	4798      	blx	r3
 80068e4:	2000      	movs	r0, #0
 80068e6:	7020      	strb	r0, [r4, #0]
 80068e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ec:	f7ff be5a 	b.w	80065a4 <acc_service_set_module_active>
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	20000780 	.word	0x20000780
 80068f8:	200007b0 	.word	0x200007b0
 80068fc:	0801154c 	.word	0x0801154c
 8006900:	08011480 	.word	0x08011480

08006904 <sparse_send_data>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	460b      	mov	r3, r1
 8006908:	b084      	sub	sp, #16
 800690a:	ad02      	add	r5, sp, #8
 800690c:	795c      	ldrb	r4, [r3, #5]
 800690e:	9500      	str	r5, [sp, #0]
 8006910:	791e      	ldrb	r6, [r3, #4]
 8006912:	799d      	ldrb	r5, [r3, #6]
 8006914:	f88d 400c 	strb.w	r4, [sp, #12]
 8006918:	4601      	mov	r1, r0
 800691a:	4610      	mov	r0, r2
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	f88d 4008 	strb.w	r4, [sp, #8]
 8006922:	ab03      	add	r3, sp, #12
 8006924:	f88d 600d 	strb.w	r6, [sp, #13]
 8006928:	f88d 500e 	strb.w	r5, [sp, #14]
 800692c:	f7ff fe1c 	bl	8006568 <acc_service_send_data>
 8006930:	b004      	add	sp, #16
 8006932:	bd70      	pop	{r4, r5, r6, pc}

08006934 <sparse_create_service>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	b0a2      	sub	sp, #136	; 0x88
 8006938:	4605      	mov	r5, r0
 800693a:	2284      	movs	r2, #132	; 0x84
 800693c:	a801      	add	r0, sp, #4
 800693e:	460e      	mov	r6, r1
 8006940:	f005 fc8c 	bl	800c25c <memcpy>
 8006944:	a801      	add	r0, sp, #4
 8006946:	f7ff fe69 	bl	800661c <acc_service_configuration_check>
 800694a:	b910      	cbnz	r0, 8006952 <sparse_create_service+0x1e>
 800694c:	2000      	movs	r0, #0
 800694e:	b022      	add	sp, #136	; 0x88
 8006950:	bd70      	pop	{r4, r5, r6, pc}
 8006952:	a808      	add	r0, sp, #32
 8006954:	f001 fc54 	bl	8008200 <acc_base_configuration_check>
 8006958:	2800      	cmp	r0, #0
 800695a:	d0f7      	beq.n	800694c <sparse_create_service+0x18>
 800695c:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 8006960:	b1ec      	cbz	r4, 800699e <sparse_create_service+0x6a>
 8006962:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8006966:	2b01      	cmp	r3, #1
 8006968:	d012      	beq.n	8006990 <sparse_create_service+0x5c>
 800696a:	7933      	ldrb	r3, [r6, #4]
 800696c:	722b      	strb	r3, [r5, #8]
 800696e:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <sparse_create_service+0x78>)
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	aa08      	add	r2, sp, #32
 8006974:	462b      	mov	r3, r5
 8006976:	4669      	mov	r1, sp
 8006978:	f105 0018 	add.w	r0, r5, #24
 800697c:	f001 fcde 	bl	800833c <acc_pipeline_direct_assemble>
 8006980:	4a0b      	ldr	r2, [pc, #44]	; (80069b0 <sparse_create_service+0x7c>)
 8006982:	6128      	str	r0, [r5, #16]
 8006984:	3800      	subs	r0, #0
 8006986:	bf18      	it	ne
 8006988:	2001      	movne	r0, #1
 800698a:	60ea      	str	r2, [r5, #12]
 800698c:	b022      	add	sp, #136	; 0x88
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8006994:	2b40      	cmp	r3, #64	; 0x40
 8006996:	d9e8      	bls.n	800696a <sparse_create_service+0x36>
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <sparse_create_service+0x80>)
 800699a:	4a07      	ldr	r2, [pc, #28]	; (80069b8 <sparse_create_service+0x84>)
 800699c:	e001      	b.n	80069a2 <sparse_create_service+0x6e>
 800699e:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <sparse_create_service+0x80>)
 80069a0:	4a06      	ldr	r2, [pc, #24]	; (80069bc <sparse_create_service+0x88>)
 80069a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a4:	4906      	ldr	r1, [pc, #24]	; (80069c0 <sparse_create_service+0x8c>)
 80069a6:	2000      	movs	r0, #0
 80069a8:	4798      	blx	r3
 80069aa:	e7cf      	b.n	800694c <sparse_create_service+0x18>
 80069ac:	08006905 	.word	0x08006905
 80069b0:	0800645d 	.word	0x0800645d
 80069b4:	200007b0 	.word	0x200007b0
 80069b8:	080115d8 	.word	0x080115d8
 80069bc:	08011598 	.word	0x08011598
 80069c0:	080115c8 	.word	0x080115c8

080069c4 <get_sparse_configuration>:
 80069c4:	b510      	push	{r4, lr}
 80069c6:	4604      	mov	r4, r0
 80069c8:	b120      	cbz	r0, 80069d4 <get_sparse_configuration+0x10>
 80069ca:	7903      	ldrb	r3, [r0, #4]
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d000      	beq.n	80069d2 <get_sparse_configuration+0xe>
 80069d0:	2000      	movs	r0, #0
 80069d2:	bd10      	pop	{r4, pc}
 80069d4:	f001 f80a 	bl	80079ec <acc_rss_integration_log_level>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d0f9      	beq.n	80069d0 <get_sparse_configuration+0xc>
 80069dc:	4b03      	ldr	r3, [pc, #12]	; (80069ec <get_sparse_configuration+0x28>)
 80069de:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <get_sparse_configuration+0x2c>)
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	4904      	ldr	r1, [pc, #16]	; (80069f4 <get_sparse_configuration+0x30>)
 80069e4:	2001      	movs	r0, #1
 80069e6:	4798      	blx	r3
 80069e8:	4620      	mov	r0, r4
 80069ea:	bd10      	pop	{r4, pc}
 80069ec:	200007b0 	.word	0x200007b0
 80069f0:	08011118 	.word	0x08011118
 80069f4:	080115c8 	.word	0x080115c8

080069f8 <set_configuration_for_profile>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	460c      	mov	r4, r1
 80069fe:	f7ff ffe1 	bl	80069c4 <get_sparse_configuration>
 8006a02:	b140      	cbz	r0, 8006a16 <set_configuration_for_profile+0x1e>
 8006a04:	1e61      	subs	r1, r4, #1
 8006a06:	301c      	adds	r0, #28
 8006a08:	2904      	cmp	r1, #4
 8006a0a:	d804      	bhi.n	8006a16 <set_configuration_for_profile+0x1e>
 8006a0c:	e8df f001 	tbb	[pc, r1]
 8006a10:	31261b10 	.word	0x31261b10
 8006a14:	05          	.byte	0x05
 8006a15:	00          	.byte	0x00
 8006a16:	b002      	add	sp, #8
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	2110      	movs	r1, #16
 8006a1c:	9001      	str	r0, [sp, #4]
 8006a1e:	f001 f9b3 	bl	8007d88 <acc_base_configuration_wg_duration_set>
 8006a22:	9801      	ldr	r0, [sp, #4]
 8006a24:	2106      	movs	r1, #6
 8006a26:	b002      	add	sp, #8
 8006a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2c:	f001 b994 	b.w	8007d58 <acc_base_configuration_integrator_set>
 8006a30:	2100      	movs	r1, #0
 8006a32:	9001      	str	r0, [sp, #4]
 8006a34:	f001 f9a8 	bl	8007d88 <acc_base_configuration_wg_duration_set>
 8006a38:	9801      	ldr	r0, [sp, #4]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	b002      	add	sp, #8
 8006a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a42:	f001 b989 	b.w	8007d58 <acc_base_configuration_integrator_set>
 8006a46:	2107      	movs	r1, #7
 8006a48:	9001      	str	r0, [sp, #4]
 8006a4a:	f001 f99d 	bl	8007d88 <acc_base_configuration_wg_duration_set>
 8006a4e:	9801      	ldr	r0, [sp, #4]
 8006a50:	2100      	movs	r1, #0
 8006a52:	b002      	add	sp, #8
 8006a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a58:	f001 b97e 	b.w	8007d58 <acc_base_configuration_integrator_set>
 8006a5c:	2109      	movs	r1, #9
 8006a5e:	9001      	str	r0, [sp, #4]
 8006a60:	f001 f992 	bl	8007d88 <acc_base_configuration_wg_duration_set>
 8006a64:	9801      	ldr	r0, [sp, #4]
 8006a66:	2103      	movs	r1, #3
 8006a68:	b002      	add	sp, #8
 8006a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a6e:	f001 b973 	b.w	8007d58 <acc_base_configuration_integrator_set>
 8006a72:	210c      	movs	r1, #12
 8006a74:	e7d2      	b.n	8006a1c <set_configuration_for_profile+0x24>
 8006a76:	bf00      	nop

08006a78 <acc_service_sparse_configuration_create>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4a3d      	ldr	r2, [pc, #244]	; (8006b70 <acc_service_sparse_configuration_create+0xf8>)
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	2360      	movs	r3, #96	; 0x60
 8006a80:	2184      	movs	r1, #132	; 0x84
 8006a82:	2001      	movs	r0, #1
 8006a84:	f000 ff80 	bl	8007988 <acc_rss_integration_mem_calloc_debug>
 8006a88:	4605      	mov	r5, r0
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d06d      	beq.n	8006b6a <acc_service_sparse_configuration_create+0xf2>
 8006a8e:	4939      	ldr	r1, [pc, #228]	; (8006b74 <acc_service_sparse_configuration_create+0xfc>)
 8006a90:	f100 041c 	add.w	r4, r0, #28
 8006a94:	2602      	movs	r6, #2
 8006a96:	2358      	movs	r3, #88	; 0x58
 8006a98:	4622      	mov	r2, r4
 8006a9a:	e9cd 3100 	strd	r3, r1, [sp]
 8006a9e:	9602      	str	r6, [sp, #8]
 8006aa0:	4b35      	ldr	r3, [pc, #212]	; (8006b78 <acc_service_sparse_configuration_create+0x100>)
 8006aa2:	2103      	movs	r1, #3
 8006aa4:	f7ff fe0a 	bl	80066bc <acc_service_initialize_service_configuration>
 8006aa8:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8006b7c <acc_service_sparse_configuration_create+0x104>
 8006aac:	4620      	mov	r0, r4
 8006aae:	f001 f84b 	bl	8007b48 <acc_base_configuration_requested_start_set>
 8006ab2:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8006b80 <acc_service_sparse_configuration_create+0x108>
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f001 f868 	bl	8007b8c <acc_base_configuration_requested_length_set>
 8006abc:	4620      	mov	r0, r4
 8006abe:	2106      	movs	r1, #6
 8006ac0:	f001 fac0 	bl	8008044 <acc_base_configuration_mur_set>
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f001 f822 	bl	8007b10 <acc_base_configuration_sensor_set>
 8006acc:	4620      	mov	r0, r4
 8006ace:	f001 f86f 	bl	8007bb0 <acc_base_configuration_repetition_mode_on_demand_set>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f001 f881 	bl	8007bdc <acc_base_configuration_power_save_mode_set>
 8006ada:	4620      	mov	r0, r4
 8006adc:	2100      	movs	r1, #0
 8006ade:	f001 f99b 	bl	8007e18 <acc_base_configuration_use_point_range_set>
 8006ae2:	2110      	movs	r1, #16
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f001 f9d3 	bl	8007e90 <acc_base_configuration_sparse_sweeps_per_frame_set>
 8006aea:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8006b84 <acc_service_sparse_configuration_create+0x10c>
 8006aee:	4620      	mov	r0, r4
 8006af0:	f001 f9e6 	bl	8007ec0 <acc_base_configuration_sparse_sweep_rate_set>
 8006af4:	4620      	mov	r0, r4
 8006af6:	2100      	movs	r1, #0
 8006af8:	f001 f982 	bl	8007e00 <acc_base_configuration_sweep_type_debug_set>
 8006afc:	4620      	mov	r0, r4
 8006afe:	2100      	movs	r1, #0
 8006b00:	f001 f884 	bl	8007c0c <acc_base_configuration_tx_disable_set>
 8006b04:	4620      	mov	r0, r4
 8006b06:	2100      	movs	r1, #0
 8006b08:	f001 f898 	bl	8007c3c <acc_base_configuration_decrease_tx_emission_set>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4611      	mov	r1, r2
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	4620      	mov	r0, r4
 8006b14:	f001 fa84 	bl	8008020 <acc_base_configuration_cca_set>
 8006b18:	4620      	mov	r0, r4
 8006b1a:	21ff      	movs	r1, #255	; 0xff
 8006b1c:	f001 f9a0 	bl	8007e60 <acc_base_configuration_staggered_vga_stabilization_time_set>
 8006b20:	4620      	mov	r0, r4
 8006b22:	2100      	movs	r1, #0
 8006b24:	f001 f990 	bl	8007e48 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8006b28:	4620      	mov	r0, r4
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	f001 f9f6 	bl	8007f1c <acc_base_configuration_downsampling_factor_set>
 8006b30:	4620      	mov	r0, r4
 8006b32:	2101      	movs	r1, #1
 8006b34:	f001 f958 	bl	8007de8 <acc_base_configuration_sampling_mode_set>
 8006b38:	4620      	mov	r0, r4
 8006b3a:	210b      	movs	r1, #11
 8006b3c:	f001 f8f4 	bl	8007d28 <acc_base_configuration_gain_set>
 8006b40:	4620      	mov	r0, r4
 8006b42:	210a      	movs	r1, #10
 8006b44:	f001 f892 	bl	8007c6c <acc_base_configuration_hw_accelerated_average_samples_set>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	f001 f9fe 	bl	8007f4c <acc_base_configuration_noise_level_normalization_set>
 8006b50:	4620      	mov	r0, r4
 8006b52:	2101      	movs	r1, #1
 8006b54:	f001 fa1e 	bl	8007f94 <acc_base_configuration_asynchronous_measurement_set>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b5e:	f001 fa31 	bl	8007fc4 <acc_base_configuration_min_pipeline_memory_size_set>
 8006b62:	4909      	ldr	r1, [pc, #36]	; (8006b88 <acc_service_sparse_configuration_create+0x110>)
 8006b64:	4620      	mov	r0, r4
 8006b66:	f001 f88d 	bl	8007c84 <acc_base_configuration_radar_engine_creation_set>
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	b004      	add	sp, #16
 8006b6e:	bd70      	pop	{r4, r5, r6, pc}
 8006b70:	080115c8 	.word	0x080115c8
 8006b74:	080069f9 	.word	0x080069f9
 8006b78:	08006935 	.word	0x08006935
 8006b7c:	3e4ccccd 	.word	0x3e4ccccd
 8006b80:	3e99999a 	.word	0x3e99999a
 8006b84:	00000000 	.word	0x00000000
 8006b88:	08009371 	.word	0x08009371

08006b8c <acc_service_sparse_configuration_destroy>:
 8006b8c:	b130      	cbz	r0, 8006b9c <acc_service_sparse_configuration_destroy+0x10>
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	4604      	mov	r4, r0
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	f7ff fd24 	bl	80065e0 <acc_service_configuration_valid>
 8006b98:	b908      	cbnz	r0, 8006b9e <acc_service_sparse_configuration_destroy+0x12>
 8006b9a:	bd10      	pop	{r4, pc}
 8006b9c:	4770      	bx	lr
 8006b9e:	6820      	ldr	r0, [r4, #0]
 8006ba0:	f7ff ff10 	bl	80069c4 <get_sparse_configuration>
 8006ba4:	f000 ff10 	bl	80079c8 <acc_rss_integration_mem_free>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	bf00      	nop

08006bb0 <acc_service_sparse_configuration_sweeps_per_frame_set>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	f7ff fd13 	bl	80065e0 <acc_service_configuration_valid>
 8006bba:	b900      	cbnz	r0, 8006bbe <acc_service_sparse_configuration_sweeps_per_frame_set+0xe>
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	6920      	ldr	r0, [r4, #16]
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc6:	f001 b963 	b.w	8007e90 <acc_base_configuration_sparse_sweeps_per_frame_set>
 8006bca:	bf00      	nop

08006bcc <acc_service_sparse_get_metadata>:
 8006bcc:	b110      	cbz	r0, 8006bd4 <acc_service_sparse_get_metadata+0x8>
 8006bce:	7a03      	ldrb	r3, [r0, #8]
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d000      	beq.n	8006bd6 <acc_service_sparse_get_metadata+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	2900      	cmp	r1, #0
 8006bd8:	d0fc      	beq.n	8006bd4 <acc_service_sparse_get_metadata+0x8>
 8006bda:	6903      	ldr	r3, [r0, #16]
 8006bdc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006c10 <acc_service_sparse_get_metadata+0x44>
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	edd3 7a08 	vldr	s15, [r3, #32]
 8006be6:	6998      	ldr	r0, [r3, #24]
 8006be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bf6:	b410      	push	{r4}
 8006bf8:	695c      	ldr	r4, [r3, #20]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfc:	810b      	strh	r3, [r1, #8]
 8006bfe:	600c      	str	r4, [r1, #0]
 8006c00:	6048      	str	r0, [r1, #4]
 8006c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c06:	edc1 7a04 	vstr	s15, [r1, #16]
 8006c0a:	60ca      	str	r2, [r1, #12]
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	4d8ef3c2 	.word	0x4d8ef3c2

08006c14 <acc_service_sparse_get_next_by_reference>:
 8006c14:	b909      	cbnz	r1, 8006c1a <acc_service_sparse_get_next_by_reference+0x6>
 8006c16:	4608      	mov	r0, r1
 8006c18:	4770      	bx	lr
 8006c1a:	b530      	push	{r4, r5, lr}
 8006c1c:	b089      	sub	sp, #36	; 0x24
 8006c1e:	2300      	movs	r3, #0
 8006c20:	680d      	ldr	r5, [r1, #0]
 8006c22:	9103      	str	r1, [sp, #12]
 8006c24:	2403      	movs	r4, #3
 8006c26:	a901      	add	r1, sp, #4
 8006c28:	9502      	str	r5, [sp, #8]
 8006c2a:	9205      	str	r2, [sp, #20]
 8006c2c:	f88d 4004 	strb.w	r4, [sp, #4]
 8006c30:	9406      	str	r4, [sp, #24]
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006c38:	f88d 301e 	strb.w	r3, [sp, #30]
 8006c3c:	f7ff fc18 	bl	8006470 <acc_service_get_next>
 8006c40:	b009      	add	sp, #36	; 0x24
 8006c42:	bd30      	pop	{r4, r5, pc}

08006c44 <quarter_pi_cos_sin_f32>:
 8006c44:	eddf 7a20 	vldr	s15, [pc, #128]	; 8006cc8 <quarter_pi_cos_sin_f32+0x84>
 8006c48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c50:	d436      	bmi.n	8006cc0 <quarter_pi_cos_sin_f32+0x7c>
 8006c52:	b1e0      	cbz	r0, 8006c8e <quarter_pi_cos_sin_f32+0x4a>
 8006c54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c58:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006ccc <quarter_pi_cos_sin_f32+0x88>
 8006c5c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006cd0 <quarter_pi_cos_sin_f32+0x8c>
 8006c60:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8006cd4 <quarter_pi_cos_sin_f32+0x90>
 8006c64:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006c68:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006c74:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006c78:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006c7c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006c80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006c84:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006c88:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c8c:	4770      	bx	lr
 8006c8e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006c92:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006cd8 <quarter_pi_cos_sin_f32+0x94>
 8006c96:	eddf 5a11 	vldr	s11, [pc, #68]	; 8006cdc <quarter_pi_cos_sin_f32+0x98>
 8006c9a:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8006ce0 <quarter_pi_cos_sin_f32+0x9c>
 8006c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006caa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cae:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006cbe:	4770      	bx	lr
 8006cc0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006ce4 <quarter_pi_cos_sin_f32+0xa0>
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	bf490fdb 	.word	0xbf490fdb
 8006ccc:	37cd1800 	.word	0x37cd1800
 8006cd0:	3ab606a0 	.word	0x3ab606a0
 8006cd4:	3d2aaaa6 	.word	0x3d2aaaa6
 8006cd8:	b94c909b 	.word	0xb94c909b
 8006cdc:	3c088366 	.word	0x3c088366
 8006ce0:	3e2aaaa2 	.word	0x3e2aaaa2
 8006ce4:	7fc00000 	.word	0x7fc00000

08006ce8 <restricted_cos_sin_f32>:
 8006ce8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006d10 <restricted_cos_sin_f32+0x28>
 8006cec:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006d14 <restricted_cos_sin_f32+0x2c>
 8006cf0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006cf4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d00:	bf5c      	itt	pl
 8006d02:	f080 0001 	eorpl.w	r0, r0, #1
 8006d06:	eeb0 0a67 	vmovpl.f32	s0, s15
 8006d0a:	f7ff bf9b 	b.w	8006c44 <quarter_pi_cos_sin_f32>
 8006d0e:	bf00      	nop
 8006d10:	3fc90fdb 	.word	0x3fc90fdb
 8006d14:	333bbd2e 	.word	0x333bbd2e

08006d18 <acc_alg_basic_math_restricted_sin_f32>:
 8006d18:	2000      	movs	r0, #0
 8006d1a:	f7ff bfe5 	b.w	8006ce8 <restricted_cos_sin_f32>
 8006d1e:	bf00      	nop

08006d20 <apply_spatial_smoothing>:
 8006d20:	b931      	cbnz	r1, 8006d30 <apply_spatial_smoothing+0x10>
 8006d22:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006d94 <apply_spatial_smoothing+0x74>
 8006d26:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006d2a:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006d2e:	4770      	bx	lr
 8006d30:	b410      	push	{r4}
 8006d32:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006d94 <apply_spatial_smoothing+0x74>
 8006d36:	edd0 7a00 	vldr	s15, [r0]
 8006d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d3e:	1f03      	subs	r3, r0, #4
 8006d40:	eef0 6a47 	vmov.f32	s13, s14
 8006d44:	2200      	movs	r2, #0
 8006d46:	1c54      	adds	r4, r2, #1
 8006d48:	42a1      	cmp	r1, r4
 8006d4a:	bfc4      	itt	gt
 8006d4c:	ed93 7a02 	vldrgt	s14, [r3, #8]
 8006d50:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8006d54:	b18a      	cbz	r2, 8006d7a <apply_spatial_smoothing+0x5a>
 8006d56:	ed93 7a00 	vldr	s14, [r3]
 8006d5a:	edc3 6a00 	vstr	s13, [r3]
 8006d5e:	b2a2      	uxth	r2, r4
 8006d60:	4291      	cmp	r1, r2
 8006d62:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006d66:	f103 0304 	add.w	r3, r3, #4
 8006d6a:	d80d      	bhi.n	8006d88 <apply_spatial_smoothing+0x68>
 8006d6c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d74:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006d78:	4770      	bx	lr
 8006d7a:	b2a2      	uxth	r2, r4
 8006d7c:	4291      	cmp	r1, r2
 8006d7e:	eeb0 7a67 	vmov.f32	s14, s15
 8006d82:	f103 0304 	add.w	r3, r3, #4
 8006d86:	d9f1      	bls.n	8006d6c <apply_spatial_smoothing+0x4c>
 8006d88:	eef0 6a67 	vmov.f32	s13, s15
 8006d8c:	4622      	mov	r2, r4
 8006d8e:	eef0 7a47 	vmov.f32	s15, s14
 8006d92:	e7d8      	b.n	8006d46 <apply_spatial_smoothing+0x26>
 8006d94:	00000000 	.word	0x00000000

08006d98 <calculate_l2_norm>:
 8006d98:	b470      	push	{r4, r5, r6}
 8006d9a:	2500      	movs	r5, #0
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	e9cd 5500 	strd	r5, r5, [sp]
 8006da2:	2900      	cmp	r1, #0
 8006da4:	d046      	beq.n	8006e34 <calculate_l2_norm+0x9c>
 8006da6:	b19a      	cbz	r2, 8006dd0 <calculate_l2_norm+0x38>
 8006da8:	fb02 f605 	mul.w	r6, r2, r5
 8006dac:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006db0:	466c      	mov	r4, sp
 8006db2:	2300      	movs	r3, #0
 8006db4:	ecf6 7a01 	vldmia	r6!, {s15}
 8006db8:	ed94 7a00 	vldr	s14, [r4]
 8006dbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	ece4 7a01 	vstmia	r4!, {s15}
 8006dce:	d1f1      	bne.n	8006db4 <calculate_l2_norm+0x1c>
 8006dd0:	3501      	adds	r5, #1
 8006dd2:	b2ad      	uxth	r5, r5
 8006dd4:	42a9      	cmp	r1, r5
 8006dd6:	d8e6      	bhi.n	8006da6 <calculate_l2_norm+0xe>
 8006dd8:	b172      	cbz	r2, 8006df8 <calculate_l2_norm+0x60>
 8006dda:	ed9d 7a00 	vldr	s14, [sp]
 8006dde:	eef1 7ac7 	vsqrt.f32	s15, s14
 8006de2:	2a01      	cmp	r2, #1
 8006de4:	edcd 7a02 	vstr	s15, [sp, #8]
 8006de8:	d905      	bls.n	8006df6 <calculate_l2_norm+0x5e>
 8006dea:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006dee:	eef1 7ac7 	vsqrt.f32	s15, s14
 8006df2:	edcd 7a03 	vstr	s15, [sp, #12]
 8006df6:	b1d1      	cbz	r1, 8006e2e <calculate_l2_norm+0x96>
 8006df8:	eddd 6a02 	vldr	s13, [sp, #8]
 8006dfc:	ed9d 6a03 	vldr	s12, [sp, #12]
 8006e00:	1d03      	adds	r3, r0, #4
 8006e02:	0095      	lsls	r5, r2, #2
 8006e04:	2000      	movs	r0, #0
 8006e06:	b16a      	cbz	r2, 8006e24 <calculate_l2_norm+0x8c>
 8006e08:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e10:	2a01      	cmp	r2, #1
 8006e12:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006e16:	d905      	bls.n	8006e24 <calculate_l2_norm+0x8c>
 8006e18:	ed93 7a00 	vldr	s14, [r3]
 8006e1c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8006e20:	edc3 7a00 	vstr	s15, [r3]
 8006e24:	3001      	adds	r0, #1
 8006e26:	b284      	uxth	r4, r0
 8006e28:	42a1      	cmp	r1, r4
 8006e2a:	442b      	add	r3, r5
 8006e2c:	d8eb      	bhi.n	8006e06 <calculate_l2_norm+0x6e>
 8006e2e:	b005      	add	sp, #20
 8006e30:	bc70      	pop	{r4, r5, r6}
 8006e32:	4770      	bx	lr
 8006e34:	2a00      	cmp	r2, #0
 8006e36:	d1d0      	bne.n	8006dda <calculate_l2_norm+0x42>
 8006e38:	e7f9      	b.n	8006e2e <calculate_l2_norm+0x96>
 8006e3a:	bf00      	nop

08006e3c <calculate_accumulation_factors>:
 8006e3c:	ee07 1a90 	vmov	s15, r1
 8006e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e44:	b410      	push	{r4}
 8006e46:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8006e4a:	1e4c      	subs	r4, r1, #1
 8006e4c:	fb01 f404 	mul.w	r4, r1, r4
 8006e50:	3903      	subs	r1, #3
 8006e52:	ee07 4a10 	vmov	s14, r4
 8006e56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006e5a:	edd0 6a02 	vldr	s13, [r0, #8]
 8006e5e:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006eac <calculate_accumulation_factors+0x70>
 8006e62:	eef1 5ac7 	vsqrt.f32	s11, s14
 8006e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e6a:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006e6e:	ee07 1a90 	vmov	s15, r1
 8006e72:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e7a:	edc2 6a00 	vstr	s13, [r2]
 8006e7e:	edd0 6a03 	vldr	s13, [r0, #12]
 8006e82:	9901      	ldr	r1, [sp, #4]
 8006e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e88:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006e8c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006e90:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8006e94:	ed83 6a00 	vstr	s12, [r3]
 8006e98:	edd0 6a04 	vldr	s13, [r0, #16]
 8006e9c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006ea0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006ea4:	edc1 6a00 	vstr	s13, [r1]
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	408f1bbd 	.word	0x408f1bbd

08006eb0 <acc_alg_sparse_frame_abs_deviation_accumulator_reset>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	4617      	mov	r7, r2
 8006eb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006eb8:	461e      	mov	r6, r3
 8006eba:	460c      	mov	r4, r1
 8006ebc:	0092      	lsls	r2, r2, #2
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	f005 f9f4 	bl	800c2ac <memset>
 8006ec4:	b35e      	cbz	r6, 8006f1e <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x6e>
 8006ec6:	6820      	ldr	r0, [r4, #0]
 8006ec8:	b31f      	cbz	r7, 8006f12 <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x62>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4684      	mov	ip, r0
 8006ece:	1d02      	adds	r2, r0, #4
 8006ed0:	461d      	mov	r5, r3
 8006ed2:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8006ed6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006eda:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8006ede:	edcc 7a00 	vstr	s15, [ip]
 8006ee2:	f005 0501 	and.w	r5, r5, #1
 8006ee6:	4614      	mov	r4, r2
 8006ee8:	2100      	movs	r1, #0
 8006eea:	e008      	b.n	8006efe <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x4e>
 8006eec:	2d00      	cmp	r5, #0
 8006eee:	bf0c      	ite	eq
 8006ef0:	eeb0 7a66 	vmoveq.f32	s14, s13
 8006ef4:	eeb0 7a67 	vmovne.f32	s14, s15
 8006ef8:	ed84 7a00 	vstr	s14, [r4]
 8006efc:	3404      	adds	r4, #4
 8006efe:	3101      	adds	r1, #1
 8006f00:	b2c9      	uxtb	r1, r1
 8006f02:	428e      	cmp	r6, r1
 8006f04:	d1f2      	bne.n	8006eec <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x3c>
 8006f06:	3301      	adds	r3, #1
 8006f08:	b29d      	uxth	r5, r3
 8006f0a:	42af      	cmp	r7, r5
 8006f0c:	44f4      	add	ip, lr
 8006f0e:	4472      	add	r2, lr
 8006f10:	d8e5      	bhi.n	8006ede <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x2e>
 8006f12:	4632      	mov	r2, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f1a:	f7ff bf3d 	b.w	8006d98 <calculate_l2_norm>
 8006f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f20 <acc_alg_sparse_frame_abs_deviation_accumulate>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	ed2d 8b02 	vpush	{d8}
 8006f28:	b089      	sub	sp, #36	; 0x24
 8006f2a:	2a05      	cmp	r2, #5
 8006f2c:	4681      	mov	r9, r0
 8006f2e:	9302      	str	r3, [sp, #8]
 8006f30:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006f32:	f240 80b2 	bls.w	800709a <acc_alg_sparse_frame_abs_deviation_accumulate+0x17a>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f000 80aa 	beq.w	8007090 <acc_alg_sparse_frame_abs_deviation_accumulate+0x170>
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	461c      	mov	r4, r3
 8006f40:	ab07      	add	r3, sp, #28
 8006f42:	468a      	mov	sl, r1
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	aa05      	add	r2, sp, #20
 8006f48:	ab06      	add	r3, sp, #24
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	f7ff ff76 	bl	8006e3c <calculate_accumulation_factors>
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	f000 809c 	beq.w	800708e <acc_alg_sparse_frame_abs_deviation_accumulate+0x16e>
 8006f56:	ea4f 0358 	mov.w	r3, r8, lsr #1
 8006f5a:	ed90 3a00 	vldr	s6, [r0]
 8006f5e:	edd0 3a01 	vldr	s7, [r0, #4]
 8006f62:	9303      	str	r3, [sp, #12]
 8006f64:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8006f68:	9b02      	ldr	r3, [sp, #8]
 8006f6a:	ed9d 8a05 	vldr	s16, [sp, #20]
 8006f6e:	ed9d 0a06 	vldr	s0, [sp, #24]
 8006f72:	eddd 0a07 	vldr	s1, [sp, #28]
 8006f76:	ed90 1a02 	vldr	s2, [r0, #8]
 8006f7a:	edd0 1a03 	vldr	s3, [r0, #12]
 8006f7e:	ed90 2a04 	vldr	s4, [r0, #16]
 8006f82:	ee74 2a43 	vsub.f32	s5, s8, s6
 8006f86:	ee34 4a63 	vsub.f32	s8, s8, s7
 8006f8a:	005a      	lsls	r2, r3, #1
 8006f8c:	f04f 0b00 	mov.w	fp, #0
 8006f90:	2300      	movs	r3, #0
 8006f92:	461f      	mov	r7, r3
 8006f94:	461e      	mov	r6, r3
 8006f96:	4618      	mov	r0, r3
 8006f98:	469e      	mov	lr, r3
 8006f9a:	461c      	mov	r4, r3
 8006f9c:	4655      	mov	r5, sl
 8006f9e:	4601      	mov	r1, r0
 8006fa0:	8828      	ldrh	r0, [r5, #0]
 8006fa2:	46b4      	mov	ip, r6
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	eba0 0601 	sub.w	r6, r0, r1
 8006faa:	f103 0301 	add.w	r3, r3, #1
 8006fae:	4639      	mov	r1, r7
 8006fb0:	4404      	add	r4, r0
 8006fb2:	eba6 070c 	sub.w	r7, r6, ip
 8006fb6:	4415      	add	r5, r2
 8006fb8:	fa1f fc83 	uxth.w	ip, r3
 8006fbc:	d904      	bls.n	8006fc8 <acc_alg_sparse_frame_abs_deviation_accumulate+0xa8>
 8006fbe:	1a79      	subs	r1, r7, r1
 8006fc0:	2900      	cmp	r1, #0
 8006fc2:	bfb8      	it	lt
 8006fc4:	4249      	neglt	r1, r1
 8006fc6:	448e      	add	lr, r1
 8006fc8:	45e0      	cmp	r8, ip
 8006fca:	d8e8      	bhi.n	8006f9e <acc_alg_sparse_frame_abs_deviation_accumulate+0x7e>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	2100      	movs	r1, #0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	4650      	mov	r0, sl
 8006fd4:	441c      	add	r4, r3
 8006fd6:	fbb4 f4f8 	udiv	r4, r4, r8
 8006fda:	8803      	ldrh	r3, [r0, #0]
 8006fdc:	3101      	adds	r1, #1
 8006fde:	1b1b      	subs	r3, r3, r4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	b28e      	uxth	r6, r1
 8006fe4:	bfb8      	it	lt
 8006fe6:	425b      	neglt	r3, r3
 8006fe8:	45b0      	cmp	r8, r6
 8006fea:	441d      	add	r5, r3
 8006fec:	4410      	add	r0, r2
 8006fee:	d8f4      	bhi.n	8006fda <acc_alg_sparse_frame_abs_deviation_accumulate+0xba>
 8006ff0:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
 8006ff4:	ee07 4a90 	vmov	s15, r4
 8006ff8:	edd9 5a00 	vldr	s11, [r9]
 8006ffc:	ed99 6a01 	vldr	s12, [r9, #4]
 8007000:	edd9 8a02 	vldr	s17, [r9, #8]
 8007004:	edd9 4a03 	vldr	s9, [r9, #12]
 8007008:	ed99 5a04 	vldr	s10, [r9, #16]
 800700c:	9902      	ldr	r1, [sp, #8]
 800700e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007012:	ee63 5a25 	vmul.f32	s11, s6, s11
 8007016:	ee27 7aa2 	vmul.f32	s14, s15, s5
 800701a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800701e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007022:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007026:	ee36 6a27 	vadd.f32	s12, s12, s15
 800702a:	ee07 ea10 	vmov	s14, lr
 800702e:	ee07 5a90 	vmov	s15, r5
 8007032:	ee75 6ac6 	vsub.f32	s13, s11, s12
 8007036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800703a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800703e:	eef0 6ae6 	vabs.f32	s13, s13
 8007042:	ee66 6a88 	vmul.f32	s13, s13, s16
 8007046:	ee61 8a28 	vmul.f32	s17, s2, s17
 800704a:	ee61 4aa4 	vmul.f32	s9, s3, s9
 800704e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007052:	ee22 5a05 	vmul.f32	s10, s4, s10
 8007056:	ee27 7a20 	vmul.f32	s14, s14, s1
 800705a:	f10b 0b01 	add.w	fp, fp, #1
 800705e:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8007062:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8007066:	ee35 7a07 	vadd.f32	s14, s10, s14
 800706a:	fa1f f38b 	uxth.w	r3, fp
 800706e:	4299      	cmp	r1, r3
 8007070:	edc9 5a00 	vstr	s11, [r9]
 8007074:	ed89 6a01 	vstr	s12, [r9, #4]
 8007078:	edc9 6a02 	vstr	s13, [r9, #8]
 800707c:	edc9 7a03 	vstr	s15, [r9, #12]
 8007080:	ed89 7a04 	vstr	s14, [r9, #16]
 8007084:	f10a 0a02 	add.w	sl, sl, #2
 8007088:	f109 0914 	add.w	r9, r9, #20
 800708c:	d880      	bhi.n	8006f90 <acc_alg_sparse_frame_abs_deviation_accumulate+0x70>
 800708e:	2001      	movs	r0, #1
 8007090:	b009      	add	sp, #36	; 0x24
 8007092:	ecbd 8b02 	vpop	{d8}
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	2000      	movs	r0, #0
 800709c:	b009      	add	sp, #36	; 0x24
 800709e:	ecbd 8b02 	vpop	{d8}
 80070a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a6:	bf00      	nop

080070a8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca>:
 80070a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	b09d      	sub	sp, #116	; 0x74
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
 80070b4:	f8bd b098 	ldrh.w	fp, [sp, #152]	; 0x98
 80070b8:	f89d 409c 	ldrb.w	r4, [sp, #156]	; 0x9c
 80070bc:	f240 8082 	bls.w	80071c4 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x11c>
 80070c0:	461e      	mov	r6, r3
 80070c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d07d      	beq.n	80071c4 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x11c>
 80070c8:	460d      	mov	r5, r1
 80070ca:	ab17      	add	r3, sp, #92	; 0x5c
 80070cc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	aa15      	add	r2, sp, #84	; 0x54
 80070d2:	4631      	mov	r1, r6
 80070d4:	ab16      	add	r3, sp, #88	; 0x58
 80070d6:	f7ff feb1 	bl	8006e3c <calculate_accumulation_factors>
 80070da:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80070dc:	6968      	ldr	r0, [r5, #20]
 80070de:	2100      	movs	r1, #0
 80070e0:	f005 f8e4 	bl	800c2ac <memset>
 80070e4:	f1bb 0f00 	cmp.w	fp, #0
 80070e8:	f000 830d 	beq.w	8007706 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x65e>
 80070ec:	1e63      	subs	r3, r4, #1
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	6969      	ldr	r1, [r5, #20]
 80070f2:	69a8      	ldr	r0, [r5, #24]
 80070f4:	68ef      	ldr	r7, [r5, #12]
 80070f6:	9706      	str	r7, [sp, #24]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	9312      	str	r3, [sp, #72]	; 0x48
 80070fc:	3304      	adds	r3, #4
 80070fe:	9310      	str	r3, [sp, #64]	; 0x40
 8007100:	440b      	add	r3, r1
 8007102:	ee07 6a90 	vmov	s15, r6
 8007106:	9308      	str	r3, [sp, #32]
 8007108:	b223      	sxth	r3, r4
 800710a:	930d      	str	r3, [sp, #52]	; 0x34
 800710c:	00a3      	lsls	r3, r4, #2
 800710e:	2700      	movs	r7, #0
 8007110:	9303      	str	r3, [sp, #12]
 8007112:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007118:	9102      	str	r1, [sp, #8]
 800711a:	9009      	str	r0, [sp, #36]	; 0x24
 800711c:	9705      	str	r7, [sp, #20]
 800711e:	4680      	mov	r8, r0
 8007120:	9707      	str	r7, [sp, #28]
 8007122:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8007126:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007130:	2300      	movs	r3, #0
 8007132:	9a04      	ldr	r2, [sp, #16]
 8007134:	4619      	mov	r1, r3
 8007136:	3301      	adds	r3, #1
 8007138:	8817      	ldrh	r7, [r2, #0]
 800713a:	b298      	uxth	r0, r3
 800713c:	4286      	cmp	r6, r0
 800713e:	4439      	add	r1, r7
 8007140:	444a      	add	r2, r9
 8007142:	d8f8      	bhi.n	8007136 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x8e>
 8007144:	ee07 1a90 	vmov	s15, r1
 8007148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800714c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007150:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007154:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8007158:	9b05      	ldr	r3, [sp, #20]
 800715a:	9808      	ldr	r0, [sp, #32]
 800715c:	9f04      	ldr	r7, [sp, #16]
 800715e:	f04f 0e00 	mov.w	lr, #0
 8007162:	46f4      	mov	ip, lr
 8007164:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8007168:	eca8 7a01 	vstmia	r8!, {s14}
 800716c:	883b      	ldrh	r3, [r7, #0]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800717a:	edc1 7a00 	vstr	s15, [r1]
 800717e:	b19c      	cbz	r4, 80071a8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x100>
 8007180:	682a      	ldr	r2, [r5, #0]
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	445a      	add	r2, fp
 8007186:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 800718a:	e001      	b.n	8007190 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xe8>
 800718c:	edd1 7a00 	vldr	s15, [r1]
 8007190:	ecb2 7a01 	vldmia	r2!, {s14}
 8007194:	edd3 6a00 	vldr	s13, [r3]
 8007198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a0:	ece3 7a01 	vstmia	r3!, {s15}
 80071a4:	4298      	cmp	r0, r3
 80071a6:	d1f1      	bne.n	800718c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xe4>
 80071a8:	f10c 0c01 	add.w	ip, ip, #1
 80071ac:	9a03      	ldr	r2, [sp, #12]
 80071ae:	fa1f f38c 	uxth.w	r3, ip
 80071b2:	429e      	cmp	r6, r3
 80071b4:	444f      	add	r7, r9
 80071b6:	4451      	add	r1, sl
 80071b8:	44a6      	add	lr, r4
 80071ba:	4410      	add	r0, r2
 80071bc:	d906      	bls.n	80071cc <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x124>
 80071be:	ed18 7a01 	vldr	s14, [r8, #-4]
 80071c2:	e7d3      	b.n	800716c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xc4>
 80071c4:	2000      	movs	r0, #0
 80071c6:	b01d      	add	sp, #116	; 0x74
 80071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	9a04      	ldr	r2, [sp, #16]
 80071ce:	9b07      	ldr	r3, [sp, #28]
 80071d0:	3202      	adds	r2, #2
 80071d2:	9204      	str	r2, [sp, #16]
 80071d4:	9a05      	ldr	r2, [sp, #20]
 80071d6:	4422      	add	r2, r4
 80071d8:	3301      	adds	r3, #1
 80071da:	9205      	str	r2, [sp, #20]
 80071dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071de:	9307      	str	r3, [sp, #28]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d8a4      	bhi.n	8007130 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x88>
 80071e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071e8:	f8cd 9014 	str.w	r9, [sp, #20]
 80071ec:	e9dd 9802 	ldrd	r9, r8, [sp, #8]
 80071f0:	f04f 0c00 	mov.w	ip, #0
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	ed9f 6a88 	vldr	s12, [pc, #544]	; 8007418 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 80071fa:	930a      	str	r3, [sp, #40]	; 0x28
 80071fc:	46e6      	mov	lr, ip
 80071fe:	9204      	str	r2, [sp, #16]
 8007200:	9b06      	ldr	r3, [sp, #24]
 8007202:	9a08      	ldr	r2, [sp, #32]
 8007204:	2700      	movs	r7, #0
 8007206:	4638      	mov	r0, r7
 8007208:	eb03 018e 	add.w	r1, r3, lr, lsl #2
 800720c:	eeb0 7a46 	vmov.f32	s14, s12
 8007210:	b194      	cbz	r4, 8007238 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x190>
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007418 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 8007218:	eb03 0b0c 	add.w	fp, r3, ip
 800721c:	eb09 0387 	add.w	r3, r9, r7, lsl #2
 8007220:	ecf3 7a01 	vldmia	r3!, {s15}
 8007224:	ecfb 6a01 	vldmia	fp!, {s13}
 8007228:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800722c:	429a      	cmp	r2, r3
 800722e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007232:	d1f5      	bne.n	8007220 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x178>
 8007234:	eeb0 7ac7 	vabs.f32	s14, s14
 8007238:	edd1 7a00 	vldr	s15, [r1]
 800723c:	eef0 7ae7 	vabs.f32	s15, s15
 8007240:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007244:	3001      	adds	r0, #1
 8007246:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800724a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724e:	b283      	uxth	r3, r0
 8007250:	bfd8      	it	le
 8007252:	eeb0 7a46 	vmovle.f32	s14, s12
 8007256:	429e      	cmp	r6, r3
 8007258:	ed81 7a00 	vstr	s14, [r1]
 800725c:	4427      	add	r7, r4
 800725e:	4451      	add	r1, sl
 8007260:	4442      	add	r2, r8
 8007262:	d8d3      	bhi.n	800720c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x164>
 8007264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007266:	f10e 0e01 	add.w	lr, lr, #1
 800726a:	4494      	add	ip, r2
 800726c:	9a04      	ldr	r2, [sp, #16]
 800726e:	fa1f f38e 	uxth.w	r3, lr
 8007272:	429a      	cmp	r2, r3
 8007274:	d8c4      	bhi.n	8007200 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x158>
 8007276:	e9dd b904 	ldrd	fp, r9, [sp, #16]
 800727a:	692a      	ldr	r2, [r5, #16]
 800727c:	920f      	str	r2, [sp, #60]	; 0x3c
 800727e:	9208      	str	r2, [sp, #32]
 8007280:	9a06      	ldr	r2, [sp, #24]
 8007282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007284:	9111      	str	r1, [sp, #68]	; 0x44
 8007286:	ebab 030a 	sub.w	r3, fp, sl
 800728a:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
 800728e:	9305      	str	r3, [sp, #20]
 8007290:	2300      	movs	r3, #0
 8007292:	e9cd b90d 	strd	fp, r9, [sp, #52]	; 0x34
 8007296:	9307      	str	r3, [sp, #28]
 8007298:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800729c:	468b      	mov	fp, r1
 800729e:	9413      	str	r4, [sp, #76]	; 0x4c
 80072a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072a2:	9906      	ldr	r1, [sp, #24]
 80072a4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80072a8:	4618      	mov	r0, r3
 80072aa:	9b07      	ldr	r3, [sp, #28]
 80072ac:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8007418 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 80072b0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80072b4:	9504      	str	r5, [sp, #16]
 80072b6:	2200      	movs	r2, #0
 80072b8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 80072bc:	4696      	mov	lr, r2
 80072be:	4694      	mov	ip, r2
 80072c0:	4617      	mov	r7, r2
 80072c2:	4691      	mov	r9, r2
 80072c4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80072c8:	463b      	mov	r3, r7
 80072ca:	8827      	ldrh	r7, [r4, #0]
 80072cc:	edd0 7a00 	vldr	s15, [r0]
 80072d0:	4661      	mov	r1, ip
 80072d2:	eba7 0c03 	sub.w	ip, r7, r3
 80072d6:	eef0 7ae7 	vabs.f32	s15, s15
 80072da:	4673      	mov	r3, lr
 80072dc:	2a02      	cmp	r2, #2
 80072de:	ebac 0e01 	sub.w	lr, ip, r1
 80072e2:	f102 0201 	add.w	r2, r2, #1
 80072e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072ea:	fa1f f882 	uxth.w	r8, r2
 80072ee:	445c      	add	r4, fp
 80072f0:	ebae 0303 	sub.w	r3, lr, r3
 80072f4:	d90f      	bls.n	8007316 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x26e>
 80072f6:	9904      	ldr	r1, [sp, #16]
 80072f8:	688d      	ldr	r5, [r1, #8]
 80072fa:	9905      	ldr	r1, [sp, #20]
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	440d      	add	r5, r1
 8007302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007306:	4629      	mov	r1, r5
 8007308:	2b00      	cmp	r3, #0
 800730a:	4401      	add	r1, r0
 800730c:	bfb8      	it	lt
 800730e:	425b      	neglt	r3, r3
 8007310:	edc1 7a00 	vstr	s15, [r1]
 8007314:	4499      	add	r9, r3
 8007316:	4546      	cmp	r6, r8
 8007318:	4450      	add	r0, sl
 800731a:	d8d5      	bhi.n	80072c8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x220>
 800731c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800731e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8007322:	edd3 7a00 	vldr	s15, [r3]
 8007326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007328:	eddb 6a00 	vldr	s13, [fp]
 800732c:	edd2 5a00 	vldr	s11, [r2]
 8007330:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8007332:	ed9b 4a01 	vldr	s8, [fp, #4]
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	9d04      	ldr	r5, [sp, #16]
 800733a:	ee35 6a67 	vsub.f32	s12, s10, s15
 800733e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007342:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007346:	ee07 9a90 	vmov	s15, r9
 800734a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800734e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007352:	edcb 6a00 	vstr	s13, [fp]
 8007356:	edd1 5a01 	vldr	s11, [r1, #4]
 800735a:	ecf2 4a01 	vldmia	r2!, {s9}
 800735e:	ee35 6a65 	vsub.f32	s12, s10, s11
 8007362:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007366:	ee26 6a24 	vmul.f32	s12, s12, s9
 800736a:	9209      	str	r2, [sp, #36]	; 0x24
 800736c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8007370:	9a08      	ldr	r2, [sp, #32]
 8007372:	ed8b 6a01 	vstr	s12, [fp, #4]
 8007376:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800737a:	3301      	adds	r3, #1
 800737c:	ece2 6a01 	vstmia	r2!, {s13}
 8007380:	edd1 6a03 	vldr	s13, [r1, #12]
 8007384:	ed9b 4a03 	vldr	s8, [fp, #12]
 8007388:	eddd 4a16 	vldr	s9, [sp, #88]	; 0x58
 800738c:	ed9b 6a04 	vldr	s12, [fp, #16]
 8007390:	eddd 5a17 	vldr	s11, [sp, #92]	; 0x5c
 8007394:	9208      	str	r2, [sp, #32]
 8007396:	ee66 6a84 	vmul.f32	s13, s13, s8
 800739a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800739e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80073a2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80073a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073a8:	ed8b 7a03 	vstr	s14, [fp, #12]
 80073ac:	ed91 7a04 	vldr	s14, [r1, #16]
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073bc:	4293      	cmp	r3, r2
 80073be:	edcb 7a04 	vstr	s15, [fp, #16]
 80073c2:	f10b 0b14 	add.w	fp, fp, #20
 80073c6:	f4ff af6b 	bcc.w	80072a0 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x1f8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80073d0:	1e57      	subs	r7, r2, #1
 80073d2:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 80073d6:	b2bf      	uxth	r7, r7
 80073d8:	4693      	mov	fp, r2
 80073da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80073de:	b1a4      	cbz	r4, 800740a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x362>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	edd1 6a00 	vldr	s13, [r1]
 80073e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073ea:	aa18      	add	r2, sp, #96	; 0x60
 80073ec:	2300      	movs	r3, #0
 80073ee:	ecfc 7a01 	vldmia	ip!, {s15}
 80073f2:	ed92 7a00 	vldr	s14, [r2]
 80073f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073fa:	3301      	adds	r3, #1
 80073fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007400:	b2db      	uxtb	r3, r3
 8007402:	429c      	cmp	r4, r3
 8007404:	ece2 7a01 	vstmia	r2!, {s15}
 8007408:	d1f1      	bne.n	80073ee <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x346>
 800740a:	428f      	cmp	r7, r1
 800740c:	4420      	add	r0, r4
 800740e:	f101 0304 	add.w	r3, r1, #4
 8007412:	d003      	beq.n	800741c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x374>
 8007414:	4619      	mov	r1, r3
 8007416:	e7e2      	b.n	80073de <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x336>
 8007418:	00000000 	.word	0x00000000
 800741c:	2000      	movs	r0, #0
 800741e:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 8007422:	eddd 5a19 	vldr	s11, [sp, #100]	; 0x64
 8007426:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8007418 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 800742a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800742c:	9f03      	ldr	r7, [sp, #12]
 800742e:	4601      	mov	r1, r0
 8007430:	2c00      	cmp	r4, #0
 8007432:	f000 8161 	beq.w	80076f8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x650>
 8007436:	682b      	ldr	r3, [r5, #0]
 8007438:	4403      	add	r3, r0
 800743a:	edd3 7a00 	vldr	s15, [r3]
 800743e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007442:	2c01      	cmp	r4, #1
 8007444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007448:	d905      	bls.n	8007456 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3ae>
 800744a:	ed93 7a01 	vldr	s14, [r3, #4]
 800744e:	ee25 7a87 	vmul.f32	s14, s11, s14
 8007452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007456:	eeb0 7ae7 	vabs.f32	s14, s15
 800745a:	edd2 7a00 	vldr	s15, [r2]
 800745e:	eef0 7ae7 	vabs.f32	s15, s15
 8007462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007466:	3101      	adds	r1, #1
 8007468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800746c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007470:	b28b      	uxth	r3, r1
 8007472:	bfd8      	it	le
 8007474:	eef0 7a66 	vmovle.f32	s15, s13
 8007478:	459b      	cmp	fp, r3
 800747a:	4438      	add	r0, r7
 800747c:	ece2 7a01 	vstmia	r2!, {s15}
 8007480:	d8d6      	bhi.n	8007430 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x388>
 8007482:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007484:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 8007488:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800748a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800748c:	ed93 6a02 	vldr	s12, [r3, #8]
 8007490:	2300      	movs	r3, #0
 8007492:	edd2 7a02 	vldr	s15, [r2, #8]
 8007496:	ecb1 7a01 	vldmia	r1!, {s14}
 800749a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800749e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80074a2:	3301      	adds	r3, #1
 80074a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074a8:	b298      	uxth	r0, r3
 80074aa:	4583      	cmp	fp, r0
 80074ac:	edc2 7a02 	vstr	s15, [r2, #8]
 80074b0:	f102 0214 	add.w	r2, r2, #20
 80074b4:	d8ed      	bhi.n	8007492 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3ea>
 80074b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80074b8:	9802      	ldr	r0, [sp, #8]
 80074ba:	2100      	movs	r1, #0
 80074bc:	f004 fef6 	bl	800c2ac <memset>
 80074c0:	2300      	movs	r3, #0
 80074c2:	1e62      	subs	r2, r4, #1
 80074c4:	f1a6 0e03 	sub.w	lr, r6, #3
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	9205      	str	r2, [sp, #20]
 80074cc:	4698      	mov	r8, r3
 80074ce:	fa1f fa82 	uxth.w	sl, r2
 80074d2:	b2a6      	uxth	r6, r4
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	2700      	movs	r7, #0
 80074d8:	4639      	mov	r1, r7
 80074da:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80074de:	b306      	cbz	r6, 8007522 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x47a>
 80074e0:	682a      	ldr	r2, [r5, #0]
 80074e2:	9202      	str	r2, [sp, #8]
 80074e4:	68aa      	ldr	r2, [r5, #8]
 80074e6:	696b      	ldr	r3, [r5, #20]
 80074e8:	fb04 f001 	mul.w	r0, r4, r1
 80074ec:	fb0b 8101 	mla	r1, fp, r1, r8
 80074f0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80074f4:	9a02      	ldr	r2, [sp, #8]
 80074f6:	f103 0c04 	add.w	ip, r3, #4
 80074fa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80074fe:	4450      	add	r0, sl
 8007500:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8007504:	444a      	add	r2, r9
 8007506:	ecf2 7a01 	vldmia	r2!, {s15}
 800750a:	edd1 6a00 	vldr	s13, [r1]
 800750e:	ed93 7a00 	vldr	s14, [r3]
 8007512:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800751a:	ece3 7a01 	vstmia	r3!, {s15}
 800751e:	4298      	cmp	r0, r3
 8007520:	d1f1      	bne.n	8007506 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x45e>
 8007522:	3701      	adds	r7, #1
 8007524:	b2bf      	uxth	r7, r7
 8007526:	4577      	cmp	r7, lr
 8007528:	4639      	mov	r1, r7
 800752a:	dbd8      	blt.n	80074de <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x436>
 800752c:	9a04      	ldr	r2, [sp, #16]
 800752e:	f108 0801 	add.w	r8, r8, #1
 8007532:	fa1f f388 	uxth.w	r3, r8
 8007536:	4422      	add	r2, r4
 8007538:	459b      	cmp	fp, r3
 800753a:	9204      	str	r2, [sp, #16]
 800753c:	d8ca      	bhi.n	80074d4 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x42c>
 800753e:	686b      	ldr	r3, [r5, #4]
 8007540:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8007544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007546:	ed1f 6a4c 	vldr	s12, [pc, #-304]	; 8007418 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	2100      	movs	r1, #0
 800754e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007552:	4691      	mov	r9, r2
 8007554:	3004      	adds	r0, #4
 8007556:	4499      	add	r9, r3
 8007558:	469a      	mov	sl, r3
 800755a:	4688      	mov	r8, r1
 800755c:	468c      	mov	ip, r1
 800755e:	b134      	cbz	r4, 800756e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4c6>
 8007560:	9b04      	ldr	r3, [sp, #16]
 8007562:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8007566:	eca3 6a01 	vstmia	r3!, {s12}
 800756a:	4599      	cmp	r9, r3
 800756c:	d1fb      	bne.n	8007566 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4be>
 800756e:	2100      	movs	r1, #0
 8007570:	460f      	mov	r7, r1
 8007572:	b1d6      	cbz	r6, 80075aa <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x502>
 8007574:	696b      	ldr	r3, [r5, #20]
 8007576:	9302      	str	r3, [sp, #8]
 8007578:	68ab      	ldr	r3, [r5, #8]
 800757a:	fb0b 8207 	mla	r2, fp, r7, r8
 800757e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007582:	9b02      	ldr	r3, [sp, #8]
 8007584:	fb04 f707 	mul.w	r7, r4, r7
 8007588:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800758c:	4657      	mov	r7, sl
 800758e:	ecf3 7a01 	vldmia	r3!, {s15}
 8007592:	edd2 6a00 	vldr	s13, [r2]
 8007596:	ed97 7a00 	vldr	s14, [r7]
 800759a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800759e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075a2:	ece7 7a01 	vstmia	r7!, {s15}
 80075a6:	42b8      	cmp	r0, r7
 80075a8:	d1f1      	bne.n	800758e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4e6>
 80075aa:	3101      	adds	r1, #1
 80075ac:	b289      	uxth	r1, r1
 80075ae:	4571      	cmp	r1, lr
 80075b0:	460f      	mov	r7, r1
 80075b2:	dbde      	blt.n	8007572 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4ca>
 80075b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b6:	f108 0801 	add.w	r8, r8, #1
 80075ba:	fa1f f388 	uxth.w	r3, r8
 80075be:	4492      	add	sl, r2
 80075c0:	4410      	add	r0, r2
 80075c2:	9a03      	ldr	r2, [sp, #12]
 80075c4:	459b      	cmp	fp, r3
 80075c6:	44a4      	add	ip, r4
 80075c8:	4491      	add	r9, r2
 80075ca:	d8c8      	bhi.n	800755e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4b6>
 80075cc:	9804      	ldr	r0, [sp, #16]
 80075ce:	4622      	mov	r2, r4
 80075d0:	4659      	mov	r1, fp
 80075d2:	f7ff fbe1 	bl	8006d98 <calculate_l2_norm>
 80075d6:	2600      	movs	r6, #0
 80075d8:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80075dc:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80075e0:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 80075e4:	4637      	mov	r7, r6
 80075e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80075ea:	b1cc      	cbz	r4, 8007620 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x578>
 80075ec:	e9d5 3200 	ldrd	r3, r2, [r5]
 80075f0:	eb06 0108 	add.w	r1, r6, r8
 80075f4:	1d18      	adds	r0, r3, #4
 80075f6:	4401      	add	r1, r0
 80075f8:	4433      	add	r3, r6
 80075fa:	4432      	add	r2, r6
 80075fc:	ed9c 7a04 	vldr	s14, [ip, #16]
 8007600:	ecf2 6a01 	vldmia	r2!, {s13}
 8007604:	ed93 6a00 	vldr	s12, [r3]
 8007608:	ee75 7ac7 	vsub.f32	s15, s11, s14
 800760c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007610:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007618:	ece3 7a01 	vstmia	r3!, {s15}
 800761c:	4299      	cmp	r1, r3
 800761e:	d1ed      	bne.n	80075fc <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x554>
 8007620:	3701      	adds	r7, #1
 8007622:	b2bb      	uxth	r3, r7
 8007624:	459b      	cmp	fp, r3
 8007626:	4476      	add	r6, lr
 8007628:	d8df      	bhi.n	80075ea <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x542>
 800762a:	2600      	movs	r6, #0
 800762c:	e9cd 661a 	strd	r6, r6, [sp, #104]	; 0x68
 8007630:	2c00      	cmp	r4, #0
 8007632:	d064      	beq.n	80076fe <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x656>
 8007634:	f104 3cff 	add.w	ip, r4, #4294967295
 8007638:	af1a      	add	r7, sp, #104	; 0x68
 800763a:	fa5f fc8c 	uxtb.w	ip, ip
 800763e:	00a4      	lsls	r4, r4, #2
 8007640:	4658      	mov	r0, fp
 8007642:	bb66      	cbnz	r6, 800769e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5f6>
 8007644:	b310      	cbz	r0, 800768c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5e4>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	46b0      	mov	r8, r6
 800764a:	4443      	add	r3, r8
 800764c:	ed97 7a00 	vldr	s14, [r7]
 8007650:	4619      	mov	r1, r3
 8007652:	2200      	movs	r2, #0
 8007654:	edd1 7a00 	vldr	s15, [r1]
 8007658:	3201      	adds	r2, #1
 800765a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800765e:	fa1f fe82 	uxth.w	lr, r2
 8007662:	4570      	cmp	r0, lr
 8007664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007668:	4421      	add	r1, r4
 800766a:	d8f3      	bhi.n	8007654 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5ac>
 800766c:	eef1 6ac7 	vsqrt.f32	s13, s14
 8007670:	2200      	movs	r2, #0
 8007672:	ed87 7a00 	vstr	s14, [r7]
 8007676:	ed93 7a00 	vldr	s14, [r3]
 800767a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800767e:	3201      	adds	r2, #1
 8007680:	b291      	uxth	r1, r2
 8007682:	4288      	cmp	r0, r1
 8007684:	edc3 7a00 	vstr	s15, [r3]
 8007688:	4423      	add	r3, r4
 800768a:	d8f4      	bhi.n	8007676 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5ce>
 800768c:	45b4      	cmp	ip, r6
 800768e:	f107 0704 	add.w	r7, r7, #4
 8007692:	f106 0301 	add.w	r3, r6, #1
 8007696:	d032      	beq.n	80076fe <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x656>
 8007698:	461e      	mov	r6, r3
 800769a:	2e00      	cmp	r6, #0
 800769c:	d0d2      	beq.n	8007644 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x59c>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d0f4      	beq.n	800768c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5e4>
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	ed5f 6aa4 	vldr	s13, [pc, #-656]	; 8007418 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 80076a8:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 80076ac:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80076b0:	2100      	movs	r1, #0
 80076b2:	edd2 7a00 	vldr	s15, [r2]
 80076b6:	ed12 7a01 	vldr	s14, [r2, #-4]
 80076ba:	3101      	adds	r1, #1
 80076bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076c0:	fa1f fe81 	uxth.w	lr, r1
 80076c4:	4570      	cmp	r0, lr
 80076c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80076ca:	4422      	add	r2, r4
 80076cc:	d8f1      	bhi.n	80076b2 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x60a>
 80076ce:	f1a8 0204 	sub.w	r2, r8, #4
 80076d2:	441a      	add	r2, r3
 80076d4:	2100      	movs	r1, #0
 80076d6:	ed92 7a00 	vldr	s14, [r2]
 80076da:	edd2 7a01 	vldr	s15, [r2, #4]
 80076de:	ee26 7a87 	vmul.f32	s14, s13, s14
 80076e2:	3101      	adds	r1, #1
 80076e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076e8:	fa1f fe81 	uxth.w	lr, r1
 80076ec:	4570      	cmp	r0, lr
 80076ee:	edc2 7a01 	vstr	s15, [r2, #4]
 80076f2:	4422      	add	r2, r4
 80076f4:	d8ef      	bhi.n	80076d6 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x62e>
 80076f6:	e7a8      	b.n	800764a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5a2>
 80076f8:	eeb0 7a66 	vmov.f32	s14, s13
 80076fc:	e6ad      	b.n	800745a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3b2>
 80076fe:	2001      	movs	r0, #1
 8007700:	b01d      	add	sp, #116	; 0x74
 8007702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007706:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007708:	6968      	ldr	r0, [r5, #20]
 800770a:	4659      	mov	r1, fp
 800770c:	f004 fdce 	bl	800c2ac <memset>
 8007710:	6868      	ldr	r0, [r5, #4]
 8007712:	4622      	mov	r2, r4
 8007714:	4659      	mov	r1, fp
 8007716:	f7ff fb3f 	bl	8006d98 <calculate_l2_norm>
 800771a:	e786      	b.n	800762a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x582>

0800771c <acc_alg_sparse_frame_abs_deviation_to_noise_ratio>:
 800771c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800771e:	4604      	mov	r4, r0
 8007720:	b083      	sub	sp, #12
 8007722:	2a00      	cmp	r2, #0
 8007724:	d041      	beq.n	80077aa <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x8e>
 8007726:	b389      	cbz	r1, 800778c <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x70>
 8007728:	ed9f 5a23 	vldr	s10, [pc, #140]	; 80077b8 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x9c>
 800772c:	461f      	mov	r7, r3
 800772e:	4616      	mov	r6, r2
 8007730:	2500      	movs	r5, #0
 8007732:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007736:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800773a:	edd4 7a04 	vldr	s15, [r4, #16]
 800773e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8007742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007746:	bfc8      	it	gt
 8007748:	ee67 7aa5 	vmulgt.f32	s15, s15, s11
 800774c:	f105 0501 	add.w	r5, r5, #1
 8007750:	bfc8      	it	gt
 8007752:	eec6 6a27 	vdivgt.f32	s13, s12, s15
 8007756:	fa1f fc85 	uxth.w	ip, r5
 800775a:	bfd8      	it	le
 800775c:	eef0 6a45 	vmovle.f32	s13, s10
 8007760:	b12a      	cbz	r2, 800776e <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x52>
 8007762:	ed94 7a03 	vldr	s14, [r4, #12]
 8007766:	ee27 7a26 	vmul.f32	s14, s14, s13
 800776a:	ed86 7a00 	vstr	s14, [r6]
 800776e:	3604      	adds	r6, #4
 8007770:	b12b      	cbz	r3, 800777e <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x62>
 8007772:	edd4 7a02 	vldr	s15, [r4, #8]
 8007776:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800777a:	edc7 7a00 	vstr	s15, [r7]
 800777e:	4561      	cmp	r1, ip
 8007780:	f104 0414 	add.w	r4, r4, #20
 8007784:	f107 0704 	add.w	r7, r7, #4
 8007788:	d8d7      	bhi.n	800773a <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x1e>
 800778a:	b122      	cbz	r2, 8007796 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x7a>
 800778c:	4610      	mov	r0, r2
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	f7ff fac6 	bl	8006d20 <apply_spatial_smoothing>
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	b12b      	cbz	r3, 80077a4 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x88>
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fac1 	bl	8006d20 <apply_spatial_smoothing>
 800779e:	2001      	movs	r0, #1
 80077a0:	b003      	add	sp, #12
 80077a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077a4:	2001      	movs	r0, #1
 80077a6:	b003      	add	sp, #12
 80077a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077aa:	b113      	cbz	r3, 80077b2 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x96>
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d1bb      	bne.n	8007728 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0xc>
 80077b0:	e7f2      	b.n	8007798 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x7c>
 80077b2:	4618      	mov	r0, r3
 80077b4:	e7f4      	b.n	80077a0 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x84>
 80077b6:	bf00      	nop
 80077b8:	00000000 	.word	0x00000000

080077bc <acc_assert_fail>:
 80077bc:	b500      	push	{lr}
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <acc_assert_fail+0x20>)
 80077c0:	4a07      	ldr	r2, [pc, #28]	; (80077e0 <acc_assert_fail+0x24>)
 80077c2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80077c4:	b083      	sub	sp, #12
 80077c6:	4603      	mov	r3, r0
 80077c8:	9100      	str	r1, [sp, #0]
 80077ca:	2000      	movs	r0, #0
 80077cc:	4905      	ldr	r1, [pc, #20]	; (80077e4 <acc_assert_fail+0x28>)
 80077ce:	47a0      	blx	r4
 80077d0:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <acc_assert_fail+0x2c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	b103      	cbz	r3, 80077d8 <acc_assert_fail+0x1c>
 80077d6:	4798      	blx	r3
 80077d8:	e7fe      	b.n	80077d8 <acc_assert_fail+0x1c>
 80077da:	bf00      	nop
 80077dc:	200007b0 	.word	0x200007b0
 80077e0:	08011604 	.word	0x08011604
 80077e4:	0801161c 	.word	0x0801161c
 80077e8:	20000788 	.word	0x20000788

080077ec <acc_rss_integration_register>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	6943      	ldr	r3, [r0, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02b      	beq.n	800784c <acc_rss_integration_register+0x60>
 80077f4:	6983      	ldr	r3, [r0, #24]
 80077f6:	b34b      	cbz	r3, 800784c <acc_rss_integration_register+0x60>
 80077f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80077fa:	b323      	cbz	r3, 8007846 <acc_rss_integration_register+0x5a>
 80077fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077fe:	b32b      	cbz	r3, 800784c <acc_rss_integration_register+0x60>
 8007800:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007802:	b31b      	cbz	r3, 800784c <acc_rss_integration_register+0x60>
 8007804:	6883      	ldr	r3, [r0, #8]
 8007806:	b30b      	cbz	r3, 800784c <acc_rss_integration_register+0x60>
 8007808:	68c3      	ldr	r3, [r0, #12]
 800780a:	b1fb      	cbz	r3, 800784c <acc_rss_integration_register+0x60>
 800780c:	6903      	ldr	r3, [r0, #16]
 800780e:	b1eb      	cbz	r3, 800784c <acc_rss_integration_register+0x60>
 8007810:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007812:	b313      	cbz	r3, 800785a <acc_rss_integration_register+0x6e>
 8007814:	6802      	ldr	r2, [r0, #0]
 8007816:	2a2a      	cmp	r2, #42	; 0x2a
 8007818:	d81a      	bhi.n	8007850 <acc_rss_integration_register+0x64>
 800781a:	6842      	ldr	r2, [r0, #4]
 800781c:	2a0f      	cmp	r2, #15
 800781e:	d917      	bls.n	8007850 <acc_rss_integration_register+0x64>
 8007820:	69c2      	ldr	r2, [r0, #28]
 8007822:	b10a      	cbz	r2, 8007828 <acc_rss_integration_register+0x3c>
 8007824:	6a02      	ldr	r2, [r0, #32]
 8007826:	b19a      	cbz	r2, 8007850 <acc_rss_integration_register+0x64>
 8007828:	4605      	mov	r5, r0
 800782a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800782c:	4c0c      	ldr	r4, [pc, #48]	; (8007860 <acc_rss_integration_register+0x74>)
 800782e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007838:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800783c:	2301      	movs	r3, #1
 800783e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007842:	4618      	mov	r0, r3
 8007844:	bd38      	pop	{r3, r4, r5, pc}
 8007846:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1d7      	bne.n	80077fc <acc_rss_integration_register+0x10>
 800784c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800784e:	b123      	cbz	r3, 800785a <acc_rss_integration_register+0x6e>
 8007850:	4a04      	ldr	r2, [pc, #16]	; (8007864 <acc_rss_integration_register+0x78>)
 8007852:	4905      	ldr	r1, [pc, #20]	; (8007868 <acc_rss_integration_register+0x7c>)
 8007854:	2000      	movs	r0, #0
 8007856:	4798      	blx	r3
 8007858:	2300      	movs	r3, #0
 800785a:	4618      	mov	r0, r3
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	bf00      	nop
 8007860:	200007b0 	.word	0x200007b0
 8007864:	08011624 	.word	0x08011624
 8007868:	08011638 	.word	0x08011638

0800786c <acc_rss_integration_unregister>:
 800786c:	4802      	ldr	r0, [pc, #8]	; (8007878 <acc_rss_integration_unregister+0xc>)
 800786e:	223c      	movs	r2, #60	; 0x3c
 8007870:	2100      	movs	r1, #0
 8007872:	f004 bd1b 	b.w	800c2ac <memset>
 8007876:	bf00      	nop
 8007878:	200007b0 	.word	0x200007b0

0800787c <acc_rss_integration_get_sensor_count>:
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <acc_rss_integration_get_sensor_count+0x8>)
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	200007b0 	.word	0x200007b0

08007888 <acc_rss_integration_get_sensor_reference_frequency>:
 8007888:	4b01      	ldr	r3, [pc, #4]	; (8007890 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	4718      	bx	r3
 800788e:	bf00      	nop
 8007890:	200007b0 	.word	0x200007b0

08007894 <acc_rss_integration_get_max_spi_transfer_size>:
 8007894:	4b01      	ldr	r3, [pc, #4]	; (800789c <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 8007896:	6858      	ldr	r0, [r3, #4]
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	200007b0 	.word	0x200007b0

080078a0 <acc_rss_integration_sensor_device_power_on>:
 80078a0:	4b01      	ldr	r3, [pc, #4]	; (80078a8 <acc_rss_integration_sensor_device_power_on+0x8>)
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	4718      	bx	r3
 80078a6:	bf00      	nop
 80078a8:	200007b0 	.word	0x200007b0

080078ac <acc_rss_integration_sensor_device_power_off>:
 80078ac:	4b01      	ldr	r3, [pc, #4]	; (80078b4 <acc_rss_integration_sensor_device_power_off+0x8>)
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	4718      	bx	r3
 80078b2:	bf00      	nop
 80078b4:	200007b0 	.word	0x200007b0

080078b8 <acc_rss_integration_sensor_device_hibernate_enter>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	b103      	cbz	r3, 80078c0 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 80078be:	4718      	bx	r3
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	200007b0 	.word	0x200007b0

080078c8 <acc_rss_integration_sensor_device_hibernate_exit>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	b103      	cbz	r3, 80078d0 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 80078ce:	4718      	bx	r3
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	200007b0 	.word	0x200007b0

080078d8 <acc_rss_integration_is_hibernate_capable>:
 80078d8:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <acc_rss_integration_is_hibernate_capable+0xc>)
 80078da:	69d8      	ldr	r0, [r3, #28]
 80078dc:	3800      	subs	r0, #0
 80078de:	bf18      	it	ne
 80078e0:	2001      	movne	r0, #1
 80078e2:	4770      	bx	lr
 80078e4:	200007b0 	.word	0x200007b0

080078e8 <acc_rss_integration_wait_for_sensor_interrupt>:
 80078e8:	4b01      	ldr	r3, [pc, #4]	; (80078f0 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	4718      	bx	r3
 80078ee:	bf00      	nop
 80078f0:	200007b0 	.word	0x200007b0

080078f4 <acc_rss_integration_sensor_device_transfer>:
 80078f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f8:	4f10      	ldr	r7, [pc, #64]	; (800793c <acc_rss_integration_sensor_device_transfer+0x48>)
 80078fa:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 80078fe:	f1be 0f00 	cmp.w	lr, #0
 8007902:	d003      	beq.n	800790c <acc_rss_integration_sensor_device_transfer+0x18>
 8007904:	4673      	mov	r3, lr
 8007906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800790a:	4718      	bx	r3
 800790c:	460c      	mov	r4, r1
 800790e:	4606      	mov	r6, r0
 8007910:	4611      	mov	r1, r2
 8007912:	4615      	mov	r5, r2
 8007914:	4620      	mov	r0, r4
 8007916:	4698      	mov	r8, r3
 8007918:	f000 f8b4 	bl	8007a84 <acc_utils_swap16_array>
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	4630      	mov	r0, r6
 8007920:	006a      	lsls	r2, r5, #1
 8007922:	4621      	mov	r1, r4
 8007924:	4798      	blx	r3
 8007926:	f1b8 0f00 	cmp.w	r8, #0
 800792a:	d101      	bne.n	8007930 <acc_rss_integration_sensor_device_transfer+0x3c>
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	4629      	mov	r1, r5
 8007932:	4620      	mov	r0, r4
 8007934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007938:	f000 b8a4 	b.w	8007a84 <acc_utils_swap16_array>
 800793c:	200007b0 	.word	0x200007b0

08007940 <acc_rss_integration_mem_alloc_debug>:
 8007940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007944:	4f0c      	ldr	r7, [pc, #48]	; (8007978 <acc_rss_integration_mem_alloc_debug+0x38>)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	4688      	mov	r8, r1
 800794a:	4616      	mov	r6, r2
 800794c:	4605      	mov	r5, r0
 800794e:	4798      	blx	r3
 8007950:	4604      	mov	r4, r0
 8007952:	b150      	cbz	r0, 800796a <acc_rss_integration_mem_alloc_debug+0x2a>
 8007954:	4b09      	ldr	r3, [pc, #36]	; (800797c <acc_rss_integration_mem_alloc_debug+0x3c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	b123      	cbz	r3, 8007964 <acc_rss_integration_mem_alloc_debug+0x24>
 800795a:	681f      	ldr	r7, [r3, #0]
 800795c:	4642      	mov	r2, r8
 800795e:	4633      	mov	r3, r6
 8007960:	4629      	mov	r1, r5
 8007962:	47b8      	blx	r7
 8007964:	4620      	mov	r0, r4
 8007966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800796a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796c:	4a04      	ldr	r2, [pc, #16]	; (8007980 <acc_rss_integration_mem_alloc_debug+0x40>)
 800796e:	4905      	ldr	r1, [pc, #20]	; (8007984 <acc_rss_integration_mem_alloc_debug+0x44>)
 8007970:	4798      	blx	r3
 8007972:	4620      	mov	r0, r4
 8007974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007978:	200007b0 	.word	0x200007b0
 800797c:	2000078c 	.word	0x2000078c
 8007980:	08011648 	.word	0x08011648
 8007984:	08011638 	.word	0x08011638

08007988 <acc_rss_integration_mem_calloc_debug>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	b190      	cbz	r0, 80079b2 <acc_rss_integration_mem_calloc_debug+0x2a>
 800798c:	460c      	mov	r4, r1
 800798e:	4611      	mov	r1, r2
 8007990:	461a      	mov	r2, r3
 8007992:	fba0 3604 	umull	r3, r6, r0, r4
 8007996:	b97e      	cbnz	r6, 80079b8 <acc_rss_integration_mem_calloc_debug+0x30>
 8007998:	fb04 f500 	mul.w	r5, r4, r0
 800799c:	4628      	mov	r0, r5
 800799e:	f7ff ffcf 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 80079a2:	4604      	mov	r4, r0
 80079a4:	b118      	cbz	r0, 80079ae <acc_rss_integration_mem_calloc_debug+0x26>
 80079a6:	462a      	mov	r2, r5
 80079a8:	4631      	mov	r1, r6
 80079aa:	f004 fc7f 	bl	800c2ac <memset>
 80079ae:	4620      	mov	r0, r4
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
 80079b2:	4604      	mov	r4, r0
 80079b4:	4620      	mov	r0, r4
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	4802      	ldr	r0, [pc, #8]	; (80079c4 <acc_rss_integration_mem_calloc_debug+0x3c>)
 80079ba:	f240 1115 	movw	r1, #277	; 0x115
 80079be:	f7ff fefd 	bl	80077bc <acc_assert_fail>
 80079c2:	bf00      	nop
 80079c4:	08011638 	.word	0x08011638

080079c8 <acc_rss_integration_mem_free>:
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <acc_rss_integration_mem_free+0x1c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	b510      	push	{r4, lr}
 80079ce:	4604      	mov	r4, r0
 80079d0:	b10b      	cbz	r3, 80079d6 <acc_rss_integration_mem_free+0xe>
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	4798      	blx	r3
 80079d6:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <acc_rss_integration_mem_free+0x20>)
 80079d8:	4620      	mov	r0, r4
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	4718      	bx	r3
 80079e2:	bf00      	nop
 80079e4:	2000078c 	.word	0x2000078c
 80079e8:	200007b0 	.word	0x200007b0

080079ec <acc_rss_integration_log_level>:
 80079ec:	4b01      	ldr	r3, [pc, #4]	; (80079f4 <acc_rss_integration_log_level+0x8>)
 80079ee:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 80079f2:	4770      	bx	lr
 80079f4:	200007b0 	.word	0x200007b0

080079f8 <acc_probes_execute_uint16>:
 80079f8:	b530      	push	{r4, r5, lr}
 80079fa:	b085      	sub	sp, #20
 80079fc:	4c09      	ldr	r4, [pc, #36]	; (8007a24 <acc_probes_execute_uint16+0x2c>)
 80079fe:	f88d 0004 	strb.w	r0, [sp, #4]
 8007a02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007a06:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007a0a:	2501      	movs	r5, #1
 8007a0c:	6844      	ldr	r4, [r0, #4]
 8007a0e:	9102      	str	r1, [sp, #8]
 8007a10:	9503      	str	r5, [sp, #12]
 8007a12:	b12c      	cbz	r4, 8007a20 <acc_probes_execute_uint16+0x28>
 8007a14:	4611      	mov	r1, r2
 8007a16:	461a      	mov	r2, r3
 8007a18:	40aa      	lsls	r2, r5
 8007a1a:	6883      	ldr	r3, [r0, #8]
 8007a1c:	a801      	add	r0, sp, #4
 8007a1e:	47a0      	blx	r4
 8007a20:	b005      	add	sp, #20
 8007a22:	bd30      	pop	{r4, r5, pc}
 8007a24:	20000014 	.word	0x20000014

08007a28 <acc_probes_execute_struct>:
 8007a28:	b530      	push	{r4, r5, lr}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	4c09      	ldr	r4, [pc, #36]	; (8007a54 <acc_probes_execute_struct+0x2c>)
 8007a2e:	f88d 0004 	strb.w	r0, [sp, #4]
 8007a32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007a36:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007a3a:	2507      	movs	r5, #7
 8007a3c:	6844      	ldr	r4, [r0, #4]
 8007a3e:	9102      	str	r1, [sp, #8]
 8007a40:	9503      	str	r5, [sp, #12]
 8007a42:	b124      	cbz	r4, 8007a4e <acc_probes_execute_struct+0x26>
 8007a44:	4611      	mov	r1, r2
 8007a46:	461a      	mov	r2, r3
 8007a48:	6883      	ldr	r3, [r0, #8]
 8007a4a:	a801      	add	r0, sp, #4
 8007a4c:	47a0      	blx	r4
 8007a4e:	b005      	add	sp, #20
 8007a50:	bd30      	pop	{r4, r5, pc}
 8007a52:	bf00      	nop
 8007a54:	20000014 	.word	0x20000014

08007a58 <acc_probes_execute_primitive_probe>:
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <acc_probes_execute_primitive_probe+0x28>)
 8007a5e:	f88d 0004 	strb.w	r0, [sp, #4]
 8007a62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	6844      	ldr	r4, [r0, #4]
 8007a6e:	9102      	str	r1, [sp, #8]
 8007a70:	9203      	str	r2, [sp, #12]
 8007a72:	b11c      	cbz	r4, 8007a7c <acc_probes_execute_primitive_probe+0x24>
 8007a74:	6883      	ldr	r3, [r0, #8]
 8007a76:	4611      	mov	r1, r2
 8007a78:	a801      	add	r0, sp, #4
 8007a7a:	47a0      	blx	r4
 8007a7c:	b004      	add	sp, #16
 8007a7e:	bd10      	pop	{r4, pc}
 8007a80:	20000014 	.word	0x20000014

08007a84 <acc_utils_swap16_array>:
 8007a84:	1e4a      	subs	r2, r1, #1
 8007a86:	b131      	cbz	r1, 8007a96 <acc_utils_swap16_array+0x12>
 8007a88:	8803      	ldrh	r3, [r0, #0]
 8007a8a:	3a01      	subs	r2, #1
 8007a8c:	ba5b      	rev16	r3, r3
 8007a8e:	f820 3b02 	strh.w	r3, [r0], #2
 8007a92:	1c53      	adds	r3, r2, #1
 8007a94:	d1f8      	bne.n	8007a88 <acc_utils_swap16_array+0x4>
 8007a96:	4770      	bx	lr

08007a98 <acc_utils_uint32_to_transfer_buffer>:
 8007a98:	b152      	cbz	r2, 8007ab0 <acc_utils_uint32_to_transfer_buffer+0x18>
 8007a9a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007a9e:	3804      	subs	r0, #4
 8007aa0:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8007aa4:	804b      	strh	r3, [r1, #2]
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	800b      	strh	r3, [r1, #0]
 8007aaa:	3104      	adds	r1, #4
 8007aac:	4291      	cmp	r1, r2
 8007aae:	d1f7      	bne.n	8007aa0 <acc_utils_uint32_to_transfer_buffer+0x8>
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop

08007ab4 <acc_utils_transfer_buffer_to_uint32>:
 8007ab4:	b17a      	cbz	r2, 8007ad6 <acc_utils_transfer_buffer_to_uint32+0x22>
 8007ab6:	b410      	push	{r4}
 8007ab8:	3904      	subs	r1, #4
 8007aba:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8007abe:	8802      	ldrh	r2, [r0, #0]
 8007ac0:	8843      	ldrh	r3, [r0, #2]
 8007ac2:	3004      	adds	r0, #4
 8007ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ac8:	4284      	cmp	r4, r0
 8007aca:	f841 3f04 	str.w	r3, [r1, #4]!
 8007ace:	d1f6      	bne.n	8007abe <acc_utils_transfer_buffer_to_uint32+0xa>
 8007ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	4770      	bx	lr

08007ad8 <configuration_is_valid.part.0>:
 8007ad8:	b508      	push	{r3, lr}
 8007ada:	f7ff ff87 	bl	80079ec <acc_rss_integration_log_level>
 8007ade:	b128      	cbz	r0, 8007aec <configuration_is_valid.part.0+0x14>
 8007ae0:	4b03      	ldr	r3, [pc, #12]	; (8007af0 <configuration_is_valid.part.0+0x18>)
 8007ae2:	4a04      	ldr	r2, [pc, #16]	; (8007af4 <configuration_is_valid.part.0+0x1c>)
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae6:	4904      	ldr	r1, [pc, #16]	; (8007af8 <configuration_is_valid.part.0+0x20>)
 8007ae8:	2001      	movs	r0, #1
 8007aea:	4798      	blx	r3
 8007aec:	2000      	movs	r0, #0
 8007aee:	bd08      	pop	{r3, pc}
 8007af0:	200007b0 	.word	0x200007b0
 8007af4:	08011658 	.word	0x08011658
 8007af8:	08011674 	.word	0x08011674

08007afc <acc_base_configuration_sensor_get>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	4604      	mov	r4, r0
 8007b00:	b108      	cbz	r0, 8007b06 <acc_base_configuration_sensor_get+0xa>
 8007b02:	68e0      	ldr	r0, [r4, #12]
 8007b04:	bd10      	pop	{r4, pc}
 8007b06:	f7ff ffe7 	bl	8007ad8 <configuration_is_valid.part.0>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d1f9      	bne.n	8007b02 <acc_base_configuration_sensor_get+0x6>
 8007b0e:	bd10      	pop	{r4, pc}

08007b10 <acc_base_configuration_sensor_set>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	460d      	mov	r5, r1
 8007b14:	4604      	mov	r4, r0
 8007b16:	b108      	cbz	r0, 8007b1c <acc_base_configuration_sensor_set+0xc>
 8007b18:	60e5      	str	r5, [r4, #12]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	f7ff ffdc 	bl	8007ad8 <configuration_is_valid.part.0>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d1f9      	bne.n	8007b18 <acc_base_configuration_sensor_set+0x8>
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop

08007b28 <acc_base_configuration_requested_start_get>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	b110      	cbz	r0, 8007b34 <acc_base_configuration_requested_start_get+0xc>
 8007b2e:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8007b32:	bd10      	pop	{r4, pc}
 8007b34:	f7ff ffd0 	bl	8007ad8 <configuration_is_valid.part.0>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d1f8      	bne.n	8007b2e <acc_base_configuration_requested_start_get+0x6>
 8007b3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b44 <acc_base_configuration_requested_start_get+0x1c>
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	bf00      	nop
 8007b44:	00000000 	.word	0x00000000

08007b48 <acc_base_configuration_requested_start_set>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	ed2d 8b02 	vpush	{d8}
 8007b50:	eeb0 8a40 	vmov.f32	s16, s0
 8007b54:	b120      	cbz	r0, 8007b60 <acc_base_configuration_requested_start_set+0x18>
 8007b56:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8007b5a:	ecbd 8b02 	vpop	{d8}
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	f7ff ffba 	bl	8007ad8 <configuration_is_valid.part.0>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d1f6      	bne.n	8007b56 <acc_base_configuration_requested_start_set+0xe>
 8007b68:	e7f7      	b.n	8007b5a <acc_base_configuration_requested_start_set+0x12>
 8007b6a:	bf00      	nop

08007b6c <acc_base_configuration_requested_length_get>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4604      	mov	r4, r0
 8007b70:	b110      	cbz	r0, 8007b78 <acc_base_configuration_requested_length_get+0xc>
 8007b72:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8007b76:	bd10      	pop	{r4, pc}
 8007b78:	f7ff ffae 	bl	8007ad8 <configuration_is_valid.part.0>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d1f8      	bne.n	8007b72 <acc_base_configuration_requested_length_get+0x6>
 8007b80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b88 <acc_base_configuration_requested_length_get+0x1c>
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	bf00      	nop
 8007b88:	00000000 	.word	0x00000000

08007b8c <acc_base_configuration_requested_length_set>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	4604      	mov	r4, r0
 8007b90:	ed2d 8b02 	vpush	{d8}
 8007b94:	eeb0 8a40 	vmov.f32	s16, s0
 8007b98:	b120      	cbz	r0, 8007ba4 <acc_base_configuration_requested_length_set+0x18>
 8007b9a:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8007b9e:	ecbd 8b02 	vpop	{d8}
 8007ba2:	bd10      	pop	{r4, pc}
 8007ba4:	f7ff ff98 	bl	8007ad8 <configuration_is_valid.part.0>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d1f6      	bne.n	8007b9a <acc_base_configuration_requested_length_set+0xe>
 8007bac:	e7f7      	b.n	8007b9e <acc_base_configuration_requested_length_set+0x12>
 8007bae:	bf00      	nop

08007bb0 <acc_base_configuration_repetition_mode_on_demand_set>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	b110      	cbz	r0, 8007bbc <acc_base_configuration_repetition_mode_on_demand_set+0xc>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	7123      	strb	r3, [r4, #4]
 8007bba:	bd10      	pop	{r4, pc}
 8007bbc:	f7ff ff8c 	bl	8007ad8 <configuration_is_valid.part.0>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d1f8      	bne.n	8007bb6 <acc_base_configuration_repetition_mode_on_demand_set+0x6>
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	bf00      	nop

08007bc8 <acc_base_configuration_power_save_mode_get>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	4604      	mov	r4, r0
 8007bcc:	b108      	cbz	r0, 8007bd2 <acc_base_configuration_power_save_mode_get+0xa>
 8007bce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007bd0:	bd10      	pop	{r4, pc}
 8007bd2:	f7ff ff81 	bl	8007ad8 <configuration_is_valid.part.0>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d1f9      	bne.n	8007bce <acc_base_configuration_power_save_mode_get+0x6>
 8007bda:	bd10      	pop	{r4, pc}

08007bdc <acc_base_configuration_power_save_mode_set>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	460d      	mov	r5, r1
 8007be0:	4604      	mov	r4, r0
 8007be2:	b108      	cbz	r0, 8007be8 <acc_base_configuration_power_save_mode_set+0xc>
 8007be4:	63a5      	str	r5, [r4, #56]	; 0x38
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	f7ff ff76 	bl	8007ad8 <configuration_is_valid.part.0>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d1f9      	bne.n	8007be4 <acc_base_configuration_power_save_mode_set+0x8>
 8007bf0:	bd38      	pop	{r3, r4, r5, pc}
 8007bf2:	bf00      	nop

08007bf4 <acc_base_configuration_tx_disable_get>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	b110      	cbz	r0, 8007c00 <acc_base_configuration_tx_disable_get+0xc>
 8007bfa:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8007bfe:	bd10      	pop	{r4, pc}
 8007c00:	f7ff ff6a 	bl	8007ad8 <configuration_is_valid.part.0>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d1f8      	bne.n	8007bfa <acc_base_configuration_tx_disable_get+0x6>
 8007c08:	bd10      	pop	{r4, pc}
 8007c0a:	bf00      	nop

08007c0c <acc_base_configuration_tx_disable_set>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	460d      	mov	r5, r1
 8007c10:	4604      	mov	r4, r0
 8007c12:	b110      	cbz	r0, 8007c1a <acc_base_configuration_tx_disable_set+0xe>
 8007c14:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8007c18:	bd38      	pop	{r3, r4, r5, pc}
 8007c1a:	f7ff ff5d 	bl	8007ad8 <configuration_is_valid.part.0>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d1f8      	bne.n	8007c14 <acc_base_configuration_tx_disable_set+0x8>
 8007c22:	bd38      	pop	{r3, r4, r5, pc}

08007c24 <acc_base_configuration_decrease_tx_emission_get>:
 8007c24:	b510      	push	{r4, lr}
 8007c26:	4604      	mov	r4, r0
 8007c28:	b110      	cbz	r0, 8007c30 <acc_base_configuration_decrease_tx_emission_get+0xc>
 8007c2a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8007c2e:	bd10      	pop	{r4, pc}
 8007c30:	f7ff ff52 	bl	8007ad8 <configuration_is_valid.part.0>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d1f8      	bne.n	8007c2a <acc_base_configuration_decrease_tx_emission_get+0x6>
 8007c38:	bd10      	pop	{r4, pc}
 8007c3a:	bf00      	nop

08007c3c <acc_base_configuration_decrease_tx_emission_set>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	460d      	mov	r5, r1
 8007c40:	4604      	mov	r4, r0
 8007c42:	b110      	cbz	r0, 8007c4a <acc_base_configuration_decrease_tx_emission_set+0xe>
 8007c44:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8007c48:	bd38      	pop	{r3, r4, r5, pc}
 8007c4a:	f7ff ff45 	bl	8007ad8 <configuration_is_valid.part.0>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d1f8      	bne.n	8007c44 <acc_base_configuration_decrease_tx_emission_set+0x8>
 8007c52:	bd38      	pop	{r3, r4, r5, pc}

08007c54 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4604      	mov	r4, r0
 8007c58:	b110      	cbz	r0, 8007c60 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8007c5a:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8007c5e:	bd10      	pop	{r4, pc}
 8007c60:	f7ff ff3a 	bl	8007ad8 <configuration_is_valid.part.0>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d1f8      	bne.n	8007c5a <acc_base_configuration_hw_accelerated_average_samples_get+0x6>
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	bf00      	nop

08007c6c <acc_base_configuration_hw_accelerated_average_samples_set>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	460d      	mov	r5, r1
 8007c70:	4604      	mov	r4, r0
 8007c72:	b108      	cbz	r0, 8007c78 <acc_base_configuration_hw_accelerated_average_samples_set+0xc>
 8007c74:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	f7ff ff2e 	bl	8007ad8 <configuration_is_valid.part.0>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d1f9      	bne.n	8007c74 <acc_base_configuration_hw_accelerated_average_samples_set+0x8>
 8007c80:	bd38      	pop	{r3, r4, r5, pc}
 8007c82:	bf00      	nop

08007c84 <acc_base_configuration_radar_engine_creation_set>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	460d      	mov	r5, r1
 8007c88:	4604      	mov	r4, r0
 8007c8a:	b108      	cbz	r0, 8007c90 <acc_base_configuration_radar_engine_creation_set+0xc>
 8007c8c:	6025      	str	r5, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	f7ff ff22 	bl	8007ad8 <configuration_is_valid.part.0>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d1f9      	bne.n	8007c8c <acc_base_configuration_radar_engine_creation_set+0x8>
 8007c98:	bd38      	pop	{r3, r4, r5, pc}
 8007c9a:	bf00      	nop

08007c9c <acc_base_configuration_point_start_get>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	b110      	cbz	r0, 8007ca8 <acc_base_configuration_point_start_get+0xc>
 8007ca2:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8007ca6:	bd10      	pop	{r4, pc}
 8007ca8:	f7ff ff16 	bl	8007ad8 <configuration_is_valid.part.0>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1f8      	bne.n	8007ca2 <acc_base_configuration_point_start_get+0x6>
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	bf00      	nop

08007cb4 <acc_base_configuration_point_length_get>:
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	b110      	cbz	r0, 8007cc0 <acc_base_configuration_point_length_get+0xc>
 8007cba:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8007cbe:	bd10      	pop	{r4, pc}
 8007cc0:	f7ff ff0a 	bl	8007ad8 <configuration_is_valid.part.0>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d1f8      	bne.n	8007cba <acc_base_configuration_point_length_get+0x6>
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	bf00      	nop

08007ccc <acc_base_configuration_repetition_mode_get>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	4604      	mov	r4, r0
 8007cd0:	b108      	cbz	r0, 8007cd6 <acc_base_configuration_repetition_mode_get+0xa>
 8007cd2:	7920      	ldrb	r0, [r4, #4]
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	f7ff feff 	bl	8007ad8 <configuration_is_valid.part.0>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d1f9      	bne.n	8007cd2 <acc_base_configuration_repetition_mode_get+0x6>
 8007cde:	bd10      	pop	{r4, pc}

08007ce0 <acc_base_configuration_update_rate_get>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	b158      	cbz	r0, 8007cfe <acc_base_configuration_update_rate_get+0x1e>
 8007ce6:	7923      	ldrb	r3, [r4, #4]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d002      	beq.n	8007cf2 <acc_base_configuration_update_rate_get+0x12>
 8007cec:	d904      	bls.n	8007cf8 <acc_base_configuration_update_rate_get+0x18>
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d109      	bne.n	8007d06 <acc_base_configuration_update_rate_get+0x26>
 8007cf2:	ed94 0a02 	vldr	s0, [r4, #8]
 8007cf6:	bd10      	pop	{r4, pc}
 8007cf8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8007d0c <acc_base_configuration_update_rate_get+0x2c>
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	f7ff feeb 	bl	8007ad8 <configuration_is_valid.part.0>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d1ef      	bne.n	8007ce6 <acc_base_configuration_update_rate_get+0x6>
 8007d06:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8007d10 <acc_base_configuration_update_rate_get+0x30>
 8007d0a:	bd10      	pop	{r4, pc}
 8007d0c:	7f800000 	.word	0x7f800000
 8007d10:	7fc00000 	.word	0x7fc00000

08007d14 <acc_base_configuration_gain_get>:
 8007d14:	b510      	push	{r4, lr}
 8007d16:	4604      	mov	r4, r0
 8007d18:	b108      	cbz	r0, 8007d1e <acc_base_configuration_gain_get+0xa>
 8007d1a:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	f7ff fedb 	bl	8007ad8 <configuration_is_valid.part.0>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d1f9      	bne.n	8007d1a <acc_base_configuration_gain_get+0x6>
 8007d26:	bd10      	pop	{r4, pc}

08007d28 <acc_base_configuration_gain_set>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	460d      	mov	r5, r1
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	b108      	cbz	r0, 8007d34 <acc_base_configuration_gain_set+0xc>
 8007d30:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	f7ff fed0 	bl	8007ad8 <configuration_is_valid.part.0>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d1f9      	bne.n	8007d30 <acc_base_configuration_gain_set+0x8>
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
 8007d3e:	bf00      	nop

08007d40 <acc_base_configuration_integrator_get>:
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4604      	mov	r4, r0
 8007d44:	b110      	cbz	r0, 8007d4c <acc_base_configuration_integrator_get+0xc>
 8007d46:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8007d4a:	bd10      	pop	{r4, pc}
 8007d4c:	f7ff fec4 	bl	8007ad8 <configuration_is_valid.part.0>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d1f8      	bne.n	8007d46 <acc_base_configuration_integrator_get+0x6>
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	bf00      	nop

08007d58 <acc_base_configuration_integrator_set>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	b110      	cbz	r0, 8007d66 <acc_base_configuration_integrator_set+0xe>
 8007d60:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8007d64:	bd38      	pop	{r3, r4, r5, pc}
 8007d66:	f7ff feb7 	bl	8007ad8 <configuration_is_valid.part.0>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d1f8      	bne.n	8007d60 <acc_base_configuration_integrator_set+0x8>
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}

08007d70 <acc_base_configuration_wg_duration_get>:
 8007d70:	b510      	push	{r4, lr}
 8007d72:	4604      	mov	r4, r0
 8007d74:	b110      	cbz	r0, 8007d7c <acc_base_configuration_wg_duration_get+0xc>
 8007d76:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8007d7a:	bd10      	pop	{r4, pc}
 8007d7c:	f7ff feac 	bl	8007ad8 <configuration_is_valid.part.0>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d1f8      	bne.n	8007d76 <acc_base_configuration_wg_duration_get+0x6>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	bf00      	nop

08007d88 <acc_base_configuration_wg_duration_set>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	460d      	mov	r5, r1
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	b110      	cbz	r0, 8007d96 <acc_base_configuration_wg_duration_set+0xe>
 8007d90:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8007d94:	bd38      	pop	{r3, r4, r5, pc}
 8007d96:	f7ff fe9f 	bl	8007ad8 <configuration_is_valid.part.0>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d1f8      	bne.n	8007d90 <acc_base_configuration_wg_duration_set+0x8>
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}

08007da0 <acc_base_configuration_integrator_ramp_up_get>:
 8007da0:	b510      	push	{r4, lr}
 8007da2:	4604      	mov	r4, r0
 8007da4:	b110      	cbz	r0, 8007dac <acc_base_configuration_integrator_ramp_up_get+0xc>
 8007da6:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8007daa:	bd10      	pop	{r4, pc}
 8007dac:	f7ff fe94 	bl	8007ad8 <configuration_is_valid.part.0>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d1f8      	bne.n	8007da6 <acc_base_configuration_integrator_ramp_up_get+0x6>
 8007db4:	bd10      	pop	{r4, pc}
 8007db6:	bf00      	nop

08007db8 <acc_base_configuration_integrator_ramp_up_set>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	460d      	mov	r5, r1
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	b110      	cbz	r0, 8007dc6 <acc_base_configuration_integrator_ramp_up_set+0xe>
 8007dc0:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8007dc4:	bd38      	pop	{r3, r4, r5, pc}
 8007dc6:	f7ff fe87 	bl	8007ad8 <configuration_is_valid.part.0>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d1f8      	bne.n	8007dc0 <acc_base_configuration_integrator_ramp_up_set+0x8>
 8007dce:	bd38      	pop	{r3, r4, r5, pc}

08007dd0 <acc_base_configuration_sampling_mode_get>:
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	b110      	cbz	r0, 8007ddc <acc_base_configuration_sampling_mode_get+0xc>
 8007dd6:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 8007dda:	bd10      	pop	{r4, pc}
 8007ddc:	f7ff fe7c 	bl	8007ad8 <configuration_is_valid.part.0>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d1f8      	bne.n	8007dd6 <acc_base_configuration_sampling_mode_get+0x6>
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop

08007de8 <acc_base_configuration_sampling_mode_set>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	460d      	mov	r5, r1
 8007dec:	4604      	mov	r4, r0
 8007dee:	b110      	cbz	r0, 8007df6 <acc_base_configuration_sampling_mode_set+0xe>
 8007df0:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	f7ff fe6f 	bl	8007ad8 <configuration_is_valid.part.0>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d1f8      	bne.n	8007df0 <acc_base_configuration_sampling_mode_set+0x8>
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}

08007e00 <acc_base_configuration_sweep_type_debug_set>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	460d      	mov	r5, r1
 8007e04:	4604      	mov	r4, r0
 8007e06:	b110      	cbz	r0, 8007e0e <acc_base_configuration_sweep_type_debug_set+0xe>
 8007e08:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	f7ff fe63 	bl	8007ad8 <configuration_is_valid.part.0>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d1f8      	bne.n	8007e08 <acc_base_configuration_sweep_type_debug_set+0x8>
 8007e16:	bd38      	pop	{r3, r4, r5, pc}

08007e18 <acc_base_configuration_use_point_range_set>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	b110      	cbz	r0, 8007e26 <acc_base_configuration_use_point_range_set+0xe>
 8007e20:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8007e24:	bd38      	pop	{r3, r4, r5, pc}
 8007e26:	f7ff fe57 	bl	8007ad8 <configuration_is_valid.part.0>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d1f8      	bne.n	8007e20 <acc_base_configuration_use_point_range_set+0x8>
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}

08007e30 <acc_base_configuration_use_point_range_get>:
 8007e30:	b510      	push	{r4, lr}
 8007e32:	4604      	mov	r4, r0
 8007e34:	b110      	cbz	r0, 8007e3c <acc_base_configuration_use_point_range_get+0xc>
 8007e36:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8007e3a:	bd10      	pop	{r4, pc}
 8007e3c:	f7ff fe4c 	bl	8007ad8 <configuration_is_valid.part.0>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1f8      	bne.n	8007e36 <acc_base_configuration_use_point_range_get+0x6>
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	bf00      	nop

08007e48 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	b110      	cbz	r0, 8007e56 <acc_base_configuration_use_fast_dll_refresh_routine_set+0xe>
 8007e50:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	f7ff fe3f 	bl	8007ad8 <configuration_is_valid.part.0>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1f8      	bne.n	8007e50 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x8>
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}

08007e60 <acc_base_configuration_staggered_vga_stabilization_time_set>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	460d      	mov	r5, r1
 8007e64:	4604      	mov	r4, r0
 8007e66:	b110      	cbz	r0, 8007e6e <acc_base_configuration_staggered_vga_stabilization_time_set+0xe>
 8007e68:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8007e6c:	bd38      	pop	{r3, r4, r5, pc}
 8007e6e:	f7ff fe33 	bl	8007ad8 <configuration_is_valid.part.0>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d1f8      	bne.n	8007e68 <acc_base_configuration_staggered_vga_stabilization_time_set+0x8>
 8007e76:	bd38      	pop	{r3, r4, r5, pc}

08007e78 <acc_base_configuration_ignore_range_limits_get>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	b110      	cbz	r0, 8007e84 <acc_base_configuration_ignore_range_limits_get+0xc>
 8007e7e:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 8007e82:	bd10      	pop	{r4, pc}
 8007e84:	f7ff fe28 	bl	8007ad8 <configuration_is_valid.part.0>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d1f8      	bne.n	8007e7e <acc_base_configuration_ignore_range_limits_get+0x6>
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	bf00      	nop

08007e90 <acc_base_configuration_sparse_sweeps_per_frame_set>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	460d      	mov	r5, r1
 8007e94:	4604      	mov	r4, r0
 8007e96:	b110      	cbz	r0, 8007e9e <acc_base_configuration_sparse_sweeps_per_frame_set+0xe>
 8007e98:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	f7ff fe1b 	bl	8007ad8 <configuration_is_valid.part.0>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d1f8      	bne.n	8007e98 <acc_base_configuration_sparse_sweeps_per_frame_set+0x8>
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}

08007ea8 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	4604      	mov	r4, r0
 8007eac:	b110      	cbz	r0, 8007eb4 <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 8007eae:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8007eb2:	bd10      	pop	{r4, pc}
 8007eb4:	f7ff fe10 	bl	8007ad8 <configuration_is_valid.part.0>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1f8      	bne.n	8007eae <acc_base_configuration_sparse_sweeps_per_frame_get+0x6>
 8007ebc:	bd10      	pop	{r4, pc}
 8007ebe:	bf00      	nop

08007ec0 <acc_base_configuration_sparse_sweep_rate_set>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	ed2d 8b02 	vpush	{d8}
 8007ec8:	eeb0 8a40 	vmov.f32	s16, s0
 8007ecc:	b120      	cbz	r0, 8007ed8 <acc_base_configuration_sparse_sweep_rate_set+0x18>
 8007ece:	ed84 8a17 	vstr	s16, [r4, #92]	; 0x5c
 8007ed2:	ecbd 8b02 	vpop	{d8}
 8007ed6:	bd10      	pop	{r4, pc}
 8007ed8:	f7ff fdfe 	bl	8007ad8 <configuration_is_valid.part.0>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d1f6      	bne.n	8007ece <acc_base_configuration_sparse_sweep_rate_set+0xe>
 8007ee0:	e7f7      	b.n	8007ed2 <acc_base_configuration_sparse_sweep_rate_set+0x12>
 8007ee2:	bf00      	nop

08007ee4 <acc_base_configuration_sparse_sweep_rate_get>:
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	b110      	cbz	r0, 8007ef0 <acc_base_configuration_sparse_sweep_rate_get+0xc>
 8007eea:	ed94 0a17 	vldr	s0, [r4, #92]	; 0x5c
 8007eee:	bd10      	pop	{r4, pc}
 8007ef0:	f7ff fdf2 	bl	8007ad8 <configuration_is_valid.part.0>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d1f8      	bne.n	8007eea <acc_base_configuration_sparse_sweep_rate_get+0x6>
 8007ef8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f00 <acc_base_configuration_sparse_sweep_rate_get+0x1c>
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	bf00      	nop
 8007f00:	00000000 	.word	0x00000000

08007f04 <acc_base_configuration_downsampling_factor_get>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	4604      	mov	r4, r0
 8007f08:	b110      	cbz	r0, 8007f10 <acc_base_configuration_downsampling_factor_get+0xc>
 8007f0a:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 8007f0e:	bd10      	pop	{r4, pc}
 8007f10:	f7ff fde2 	bl	8007ad8 <configuration_is_valid.part.0>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d1f8      	bne.n	8007f0a <acc_base_configuration_downsampling_factor_get+0x6>
 8007f18:	bd10      	pop	{r4, pc}
 8007f1a:	bf00      	nop

08007f1c <acc_base_configuration_downsampling_factor_set>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	460d      	mov	r5, r1
 8007f20:	4604      	mov	r4, r0
 8007f22:	b110      	cbz	r0, 8007f2a <acc_base_configuration_downsampling_factor_set+0xe>
 8007f24:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 8007f28:	bd38      	pop	{r3, r4, r5, pc}
 8007f2a:	f7ff fdd5 	bl	8007ad8 <configuration_is_valid.part.0>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d1f8      	bne.n	8007f24 <acc_base_configuration_downsampling_factor_set+0x8>
 8007f32:	bd38      	pop	{r3, r4, r5, pc}

08007f34 <acc_base_configuration_noise_level_normalization_get>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4604      	mov	r4, r0
 8007f38:	b110      	cbz	r0, 8007f40 <acc_base_configuration_noise_level_normalization_get+0xc>
 8007f3a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 8007f3e:	bd10      	pop	{r4, pc}
 8007f40:	f7ff fdca 	bl	8007ad8 <configuration_is_valid.part.0>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1f8      	bne.n	8007f3a <acc_base_configuration_noise_level_normalization_get+0x6>
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop

08007f4c <acc_base_configuration_noise_level_normalization_set>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	460d      	mov	r5, r1
 8007f50:	4604      	mov	r4, r0
 8007f52:	b110      	cbz	r0, 8007f5a <acc_base_configuration_noise_level_normalization_set+0xe>
 8007f54:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8007f58:	bd38      	pop	{r3, r4, r5, pc}
 8007f5a:	f7ff fdbd 	bl	8007ad8 <configuration_is_valid.part.0>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d1f8      	bne.n	8007f54 <acc_base_configuration_noise_level_normalization_set+0x8>
 8007f62:	bd38      	pop	{r3, r4, r5, pc}

08007f64 <acc_base_configuration_noise_deviation_override_get>:
 8007f64:	b510      	push	{r4, lr}
 8007f66:	4604      	mov	r4, r0
 8007f68:	b110      	cbz	r0, 8007f70 <acc_base_configuration_noise_deviation_override_get+0xc>
 8007f6a:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 8007f6e:	bd10      	pop	{r4, pc}
 8007f70:	f7ff fdb2 	bl	8007ad8 <configuration_is_valid.part.0>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d1f8      	bne.n	8007f6a <acc_base_configuration_noise_deviation_override_get+0x6>
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	bf00      	nop

08007f7c <acc_base_configuration_asynchronous_measurement_get>:
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	4604      	mov	r4, r0
 8007f80:	b110      	cbz	r0, 8007f88 <acc_base_configuration_asynchronous_measurement_get+0xc>
 8007f82:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 8007f86:	bd10      	pop	{r4, pc}
 8007f88:	f7ff fda6 	bl	8007ad8 <configuration_is_valid.part.0>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d1f8      	bne.n	8007f82 <acc_base_configuration_asynchronous_measurement_get+0x6>
 8007f90:	bd10      	pop	{r4, pc}
 8007f92:	bf00      	nop

08007f94 <acc_base_configuration_asynchronous_measurement_set>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	460d      	mov	r5, r1
 8007f98:	4604      	mov	r4, r0
 8007f9a:	b110      	cbz	r0, 8007fa2 <acc_base_configuration_asynchronous_measurement_set+0xe>
 8007f9c:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 8007fa0:	bd38      	pop	{r3, r4, r5, pc}
 8007fa2:	f7ff fd99 	bl	8007ad8 <configuration_is_valid.part.0>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d1f8      	bne.n	8007f9c <acc_base_configuration_asynchronous_measurement_set+0x8>
 8007faa:	bd38      	pop	{r3, r4, r5, pc}

08007fac <acc_base_configuration_min_pipeline_memory_size_get>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4604      	mov	r4, r0
 8007fb0:	b110      	cbz	r0, 8007fb8 <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 8007fb2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8007fb6:	bd10      	pop	{r4, pc}
 8007fb8:	f7ff fd8e 	bl	8007ad8 <configuration_is_valid.part.0>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d1f8      	bne.n	8007fb2 <acc_base_configuration_min_pipeline_memory_size_get+0x6>
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	bf00      	nop

08007fc4 <acc_base_configuration_min_pipeline_memory_size_set>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	460d      	mov	r5, r1
 8007fc8:	4604      	mov	r4, r0
 8007fca:	b110      	cbz	r0, 8007fd2 <acc_base_configuration_min_pipeline_memory_size_set+0xe>
 8007fcc:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
 8007fd2:	f7ff fd81 	bl	8007ad8 <configuration_is_valid.part.0>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d1f8      	bne.n	8007fcc <acc_base_configuration_min_pipeline_memory_size_set+0x8>
 8007fda:	bd38      	pop	{r3, r4, r5, pc}

08007fdc <acc_base_configuration_maximize_signal_attenuation_set>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	460d      	mov	r5, r1
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	b110      	cbz	r0, 8007fea <acc_base_configuration_maximize_signal_attenuation_set+0xe>
 8007fe4:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
 8007fea:	f7ff fd75 	bl	8007ad8 <configuration_is_valid.part.0>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d1f8      	bne.n	8007fe4 <acc_base_configuration_maximize_signal_attenuation_set+0x8>
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}

08007ff4 <acc_base_configuration_cca_get>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	460e      	mov	r6, r1
 8007ff8:	4615      	mov	r5, r2
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	b150      	cbz	r0, 8008014 <acc_base_configuration_cca_get+0x20>
 8007ffe:	b116      	cbz	r6, 8008006 <acc_base_configuration_cca_get+0x12>
 8008000:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8008004:	7033      	strb	r3, [r6, #0]
 8008006:	b115      	cbz	r5, 800800e <acc_base_configuration_cca_get+0x1a>
 8008008:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800800c:	802b      	strh	r3, [r5, #0]
 800800e:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	f7ff fd60 	bl	8007ad8 <configuration_is_valid.part.0>
 8008018:	2800      	cmp	r0, #0
 800801a:	d1f0      	bne.n	8007ffe <acc_base_configuration_cca_get+0xa>
 800801c:	bd70      	pop	{r4, r5, r6, pc}
 800801e:	bf00      	nop

08008020 <acc_base_configuration_cca_set>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	460d      	mov	r5, r1
 8008024:	4616      	mov	r6, r2
 8008026:	461f      	mov	r7, r3
 8008028:	4604      	mov	r4, r0
 800802a:	b130      	cbz	r0, 800803a <acc_base_configuration_cca_set+0x1a>
 800802c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
 8008030:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8008034:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8008038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800803a:	f7ff fd4d 	bl	8007ad8 <configuration_is_valid.part.0>
 800803e:	2800      	cmp	r0, #0
 8008040:	d1f4      	bne.n	800802c <acc_base_configuration_cca_set+0xc>
 8008042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008044 <acc_base_configuration_mur_set>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	460d      	mov	r5, r1
 8008048:	4604      	mov	r4, r0
 800804a:	b110      	cbz	r0, 8008052 <acc_base_configuration_mur_set+0xe>
 800804c:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8008050:	bd38      	pop	{r3, r4, r5, pc}
 8008052:	f7ff fd41 	bl	8007ad8 <configuration_is_valid.part.0>
 8008056:	2800      	cmp	r0, #0
 8008058:	d1f8      	bne.n	800804c <acc_base_configuration_mur_set+0x8>
 800805a:	bd38      	pop	{r3, r4, r5, pc}

0800805c <acc_base_configuration_mur_get>:
 800805c:	b510      	push	{r4, lr}
 800805e:	4604      	mov	r4, r0
 8008060:	b110      	cbz	r0, 8008068 <acc_base_configuration_mur_get+0xc>
 8008062:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8008066:	bd10      	pop	{r4, pc}
 8008068:	f7ff fd36 	bl	8007ad8 <configuration_is_valid.part.0>
 800806c:	2800      	cmp	r0, #0
 800806e:	d1f8      	bne.n	8008062 <acc_base_configuration_mur_get+0x6>
 8008070:	2006      	movs	r0, #6
 8008072:	bd10      	pop	{r4, pc}

08008074 <acc_base_configuration_print>:
 8008074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008078:	b08a      	sub	sp, #40	; 0x28
 800807a:	4604      	mov	r4, r0
 800807c:	f7ff fcb6 	bl	80079ec <acc_rss_integration_log_level>
 8008080:	2801      	cmp	r0, #1
 8008082:	d92e      	bls.n	80080e2 <acc_base_configuration_print+0x6e>
 8008084:	4b56      	ldr	r3, [pc, #344]	; (80081e0 <acc_base_configuration_print+0x16c>)
 8008086:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8008088:	2c00      	cmp	r4, #0
 800808a:	d036      	beq.n	80080fa <acc_base_configuration_print+0x86>
 800808c:	68e3      	ldr	r3, [r4, #12]
 800808e:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 8008092:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
 8008094:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
 8008098:	f8b4 e042 	ldrh.w	lr, [r4, #66]	; 0x42
 800809c:	f8b4 8044 	ldrh.w	r8, [r4, #68]	; 0x44
 80080a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080a2:	2a04      	cmp	r2, #4
 80080a4:	d920      	bls.n	80080e8 <acc_base_configuration_print+0x74>
 80080a6:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 80080aa:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80081e4 <acc_base_configuration_print+0x170>
 80080ae:	b311      	cbz	r1, 80080f6 <acc_base_configuration_print+0x82>
 80080b0:	4a4c      	ldr	r2, [pc, #304]	; (80081e4 <acc_base_configuration_print+0x170>)
 80080b2:	484d      	ldr	r0, [pc, #308]	; (80081e8 <acc_base_configuration_print+0x174>)
 80080b4:	2901      	cmp	r1, #1
 80080b6:	bf08      	it	eq
 80080b8:	4602      	moveq	r2, r0
 80080ba:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 80080be:	f8b4 a05a 	ldrh.w	sl, [r4, #90]	; 0x5a
 80080c2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80080c6:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80080ca:	e9cd a008 	strd	sl, r0, [sp, #32]
 80080ce:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80080d2:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80080d6:	e9cd 6700 	strd	r6, r7, [sp]
 80080da:	4a44      	ldr	r2, [pc, #272]	; (80081ec <acc_base_configuration_print+0x178>)
 80080dc:	4944      	ldr	r1, [pc, #272]	; (80081f0 <acc_base_configuration_print+0x17c>)
 80080de:	2002      	movs	r0, #2
 80080e0:	47a8      	blx	r5
 80080e2:	b00a      	add	sp, #40	; 0x28
 80080e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e8:	4942      	ldr	r1, [pc, #264]	; (80081f4 <acc_base_configuration_print+0x180>)
 80080ea:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]
 80080ee:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 80080f2:	2900      	cmp	r1, #0
 80080f4:	d1dc      	bne.n	80080b0 <acc_base_configuration_print+0x3c>
 80080f6:	4a40      	ldr	r2, [pc, #256]	; (80081f8 <acc_base_configuration_print+0x184>)
 80080f8:	e7df      	b.n	80080ba <acc_base_configuration_print+0x46>
 80080fa:	f7ff fced 	bl	8007ad8 <configuration_is_valid.part.0>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d1c4      	bne.n	800808c <acc_base_configuration_print+0x18>
 8008102:	f7ff fce9 	bl	8007ad8 <configuration_is_valid.part.0>
 8008106:	bb68      	cbnz	r0, 8008164 <acc_base_configuration_print+0xf0>
 8008108:	f7ff fce6 	bl	8007ad8 <configuration_is_valid.part.0>
 800810c:	2800      	cmp	r0, #0
 800810e:	d164      	bne.n	80081da <acc_base_configuration_print+0x166>
 8008110:	f7ff fce2 	bl	8007ad8 <configuration_is_valid.part.0>
 8008114:	2800      	cmp	r0, #0
 8008116:	d15c      	bne.n	80081d2 <acc_base_configuration_print+0x15e>
 8008118:	f7ff fcde 	bl	8007ad8 <configuration_is_valid.part.0>
 800811c:	2800      	cmp	r0, #0
 800811e:	d153      	bne.n	80081c8 <acc_base_configuration_print+0x154>
 8008120:	f7ff fcda 	bl	8007ad8 <configuration_is_valid.part.0>
 8008124:	2800      	cmp	r0, #0
 8008126:	d149      	bne.n	80081bc <acc_base_configuration_print+0x148>
 8008128:	f7ff fcd6 	bl	8007ad8 <configuration_is_valid.part.0>
 800812c:	2800      	cmp	r0, #0
 800812e:	d13e      	bne.n	80081ae <acc_base_configuration_print+0x13a>
 8008130:	f7ff fcd2 	bl	8007ad8 <configuration_is_valid.part.0>
 8008134:	bbb8      	cbnz	r0, 80081a6 <acc_base_configuration_print+0x132>
 8008136:	f7ff fccf 	bl	8007ad8 <configuration_is_valid.part.0>
 800813a:	4606      	mov	r6, r0
 800813c:	bb48      	cbnz	r0, 8008192 <acc_base_configuration_print+0x11e>
 800813e:	f7ff fccb 	bl	8007ad8 <configuration_is_valid.part.0>
 8008142:	4607      	mov	r7, r0
 8008144:	b9d8      	cbnz	r0, 800817e <acc_base_configuration_print+0x10a>
 8008146:	f7ff fcc7 	bl	8007ad8 <configuration_is_valid.part.0>
 800814a:	b968      	cbnz	r0, 8008168 <acc_base_configuration_print+0xf4>
 800814c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80081fc <acc_base_configuration_print+0x188>
 8008150:	4a29      	ldr	r2, [pc, #164]	; (80081f8 <acc_base_configuration_print+0x184>)
 8008152:	4603      	mov	r3, r0
 8008154:	4682      	mov	sl, r0
 8008156:	4601      	mov	r1, r0
 8008158:	4680      	mov	r8, r0
 800815a:	4686      	mov	lr, r0
 800815c:	4684      	mov	ip, r0
 800815e:	4607      	mov	r7, r0
 8008160:	4606      	mov	r6, r0
 8008162:	e7b0      	b.n	80080c6 <acc_base_configuration_print+0x52>
 8008164:	4623      	mov	r3, r4
 8008166:	e792      	b.n	800808e <acc_base_configuration_print+0x1a>
 8008168:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80081fc <acc_base_configuration_print+0x188>
 800816c:	4a22      	ldr	r2, [pc, #136]	; (80081f8 <acc_base_configuration_print+0x184>)
 800816e:	463b      	mov	r3, r7
 8008170:	46ba      	mov	sl, r7
 8008172:	4639      	mov	r1, r7
 8008174:	46b8      	mov	r8, r7
 8008176:	46be      	mov	lr, r7
 8008178:	46bc      	mov	ip, r7
 800817a:	463e      	mov	r6, r7
 800817c:	e7a1      	b.n	80080c2 <acc_base_configuration_print+0x4e>
 800817e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80081fc <acc_base_configuration_print+0x188>
 8008182:	4a1d      	ldr	r2, [pc, #116]	; (80081f8 <acc_base_configuration_print+0x184>)
 8008184:	4633      	mov	r3, r6
 8008186:	4631      	mov	r1, r6
 8008188:	46b0      	mov	r8, r6
 800818a:	46b6      	mov	lr, r6
 800818c:	46b4      	mov	ip, r6
 800818e:	4637      	mov	r7, r6
 8008190:	e795      	b.n	80080be <acc_base_configuration_print+0x4a>
 8008192:	2300      	movs	r3, #0
 8008194:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80081fc <acc_base_configuration_print+0x188>
 8008198:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <acc_base_configuration_print+0x184>)
 800819a:	4698      	mov	r8, r3
 800819c:	469e      	mov	lr, r3
 800819e:	469c      	mov	ip, r3
 80081a0:	461f      	mov	r7, r3
 80081a2:	461e      	mov	r6, r3
 80081a4:	e789      	b.n	80080ba <acc_base_configuration_print+0x46>
 80081a6:	2300      	movs	r3, #0
 80081a8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80081ac:	deff      	udf	#255	; 0xff
 80081ae:	4623      	mov	r3, r4
 80081b0:	46a0      	mov	r8, r4
 80081b2:	46a6      	mov	lr, r4
 80081b4:	46a4      	mov	ip, r4
 80081b6:	4627      	mov	r7, r4
 80081b8:	4626      	mov	r6, r4
 80081ba:	e771      	b.n	80080a0 <acc_base_configuration_print+0x2c>
 80081bc:	4623      	mov	r3, r4
 80081be:	46a6      	mov	lr, r4
 80081c0:	46a4      	mov	ip, r4
 80081c2:	4627      	mov	r7, r4
 80081c4:	4626      	mov	r6, r4
 80081c6:	e769      	b.n	800809c <acc_base_configuration_print+0x28>
 80081c8:	4623      	mov	r3, r4
 80081ca:	46a4      	mov	ip, r4
 80081cc:	4627      	mov	r7, r4
 80081ce:	4626      	mov	r6, r4
 80081d0:	e762      	b.n	8008098 <acc_base_configuration_print+0x24>
 80081d2:	4623      	mov	r3, r4
 80081d4:	4627      	mov	r7, r4
 80081d6:	4626      	mov	r6, r4
 80081d8:	e75c      	b.n	8008094 <acc_base_configuration_print+0x20>
 80081da:	4623      	mov	r3, r4
 80081dc:	4626      	mov	r6, r4
 80081de:	e758      	b.n	8008092 <acc_base_configuration_print+0x1e>
 80081e0:	200007b0 	.word	0x200007b0
 80081e4:	08012a80 	.word	0x08012a80
 80081e8:	0801168c 	.word	0x0801168c
 80081ec:	08011694 	.word	0x08011694
 80081f0:	08011674 	.word	0x08011674
 80081f4:	080118a4 	.word	0x080118a4
 80081f8:	08011688 	.word	0x08011688
 80081fc:	08011690 	.word	0x08011690

08008200 <acc_base_configuration_check>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4604      	mov	r4, r0
 8008204:	2800      	cmp	r0, #0
 8008206:	d038      	beq.n	800827a <acc_base_configuration_check+0x7a>
 8008208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800820a:	2b04      	cmp	r3, #4
 800820c:	d819      	bhi.n	8008242 <acc_base_configuration_check+0x42>
 800820e:	d024      	beq.n	800825a <acc_base_configuration_check+0x5a>
 8008210:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008212:	2b16      	cmp	r3, #22
 8008214:	d81e      	bhi.n	8008254 <acc_base_configuration_check+0x54>
 8008216:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8008218:	3b01      	subs	r3, #1
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b3e      	cmp	r3, #62	; 0x3e
 800821e:	d835      	bhi.n	800828c <acc_base_configuration_check+0x8c>
 8008220:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008222:	7923      	ldrb	r3, [r4, #4]
 8008224:	b31e      	cbz	r6, 800826e <acc_base_configuration_check+0x6e>
 8008226:	2b03      	cmp	r3, #3
 8008228:	d033      	beq.n	8008292 <acc_base_configuration_check+0x92>
 800822a:	f036 0304 	bics.w	r3, r6, #4
 800822e:	d020      	beq.n	8008272 <acc_base_configuration_check+0x72>
 8008230:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8008234:	2b06      	cmp	r3, #6
 8008236:	d026      	beq.n	8008286 <acc_base_configuration_check+0x86>
 8008238:	2b09      	cmp	r3, #9
 800823a:	d024      	beq.n	8008286 <acc_base_configuration_check+0x86>
 800823c:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <acc_base_configuration_check+0xbc>)
 800823e:	4a20      	ldr	r2, [pc, #128]	; (80082c0 <acc_base_configuration_check+0xc0>)
 8008240:	e001      	b.n	8008246 <acc_base_configuration_check+0x46>
 8008242:	4b1e      	ldr	r3, [pc, #120]	; (80082bc <acc_base_configuration_check+0xbc>)
 8008244:	4a1f      	ldr	r2, [pc, #124]	; (80082c4 <acc_base_configuration_check+0xc4>)
 8008246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008248:	491f      	ldr	r1, [pc, #124]	; (80082c8 <acc_base_configuration_check+0xc8>)
 800824a:	2000      	movs	r0, #0
 800824c:	4798      	blx	r3
 800824e:	2500      	movs	r5, #0
 8008250:	4628      	mov	r0, r5
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	4b19      	ldr	r3, [pc, #100]	; (80082bc <acc_base_configuration_check+0xbc>)
 8008256:	4a1d      	ldr	r2, [pc, #116]	; (80082cc <acc_base_configuration_check+0xcc>)
 8008258:	e7f5      	b.n	8008246 <acc_base_configuration_check+0x46>
 800825a:	f7ff fb3d 	bl	80078d8 <acc_rss_integration_is_hibernate_capable>
 800825e:	4605      	mov	r5, r0
 8008260:	b310      	cbz	r0, 80082a8 <acc_base_configuration_check+0xa8>
 8008262:	7923      	ldrb	r3, [r4, #4]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d1d3      	bne.n	8008210 <acc_base_configuration_check+0x10>
 8008268:	4b14      	ldr	r3, [pc, #80]	; (80082bc <acc_base_configuration_check+0xbc>)
 800826a:	4a19      	ldr	r2, [pc, #100]	; (80082d0 <acc_base_configuration_check+0xd0>)
 800826c:	e7eb      	b.n	8008246 <acc_base_configuration_check+0x46>
 800826e:	2b03      	cmp	r3, #3
 8008270:	d020      	beq.n	80082b4 <acc_base_configuration_check+0xb4>
 8008272:	2301      	movs	r3, #1
 8008274:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 8008278:	e7da      	b.n	8008230 <acc_base_configuration_check+0x30>
 800827a:	f7ff fc2d 	bl	8007ad8 <configuration_is_valid.part.0>
 800827e:	4605      	mov	r5, r0
 8008280:	2800      	cmp	r0, #0
 8008282:	d1c1      	bne.n	8008208 <acc_base_configuration_check+0x8>
 8008284:	e7e4      	b.n	8008250 <acc_base_configuration_check+0x50>
 8008286:	2501      	movs	r5, #1
 8008288:	4628      	mov	r0, r5
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <acc_base_configuration_check+0xbc>)
 800828e:	4a11      	ldr	r2, [pc, #68]	; (80082d4 <acc_base_configuration_check+0xd4>)
 8008290:	e7d9      	b.n	8008246 <acc_base_configuration_check+0x46>
 8008292:	f894 504e 	ldrb.w	r5, [r4, #78]	; 0x4e
 8008296:	2d00      	cmp	r5, #0
 8008298:	d1c7      	bne.n	800822a <acc_base_configuration_check+0x2a>
 800829a:	4b08      	ldr	r3, [pc, #32]	; (80082bc <acc_base_configuration_check+0xbc>)
 800829c:	4a0e      	ldr	r2, [pc, #56]	; (80082d8 <acc_base_configuration_check+0xd8>)
 800829e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a0:	4909      	ldr	r1, [pc, #36]	; (80082c8 <acc_base_configuration_check+0xc8>)
 80082a2:	4628      	mov	r0, r5
 80082a4:	4798      	blx	r3
 80082a6:	e7d3      	b.n	8008250 <acc_base_configuration_check+0x50>
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <acc_base_configuration_check+0xbc>)
 80082aa:	4a0c      	ldr	r2, [pc, #48]	; (80082dc <acc_base_configuration_check+0xdc>)
 80082ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ae:	4906      	ldr	r1, [pc, #24]	; (80082c8 <acc_base_configuration_check+0xc8>)
 80082b0:	4798      	blx	r3
 80082b2:	e7cd      	b.n	8008250 <acc_base_configuration_check+0x50>
 80082b4:	4b01      	ldr	r3, [pc, #4]	; (80082bc <acc_base_configuration_check+0xbc>)
 80082b6:	4a0a      	ldr	r2, [pc, #40]	; (80082e0 <acc_base_configuration_check+0xe0>)
 80082b8:	e7c5      	b.n	8008246 <acc_base_configuration_check+0x46>
 80082ba:	bf00      	nop
 80082bc:	200007b0 	.word	0x200007b0
 80082c0:	0801186c 	.word	0x0801186c
 80082c4:	080116cc 	.word	0x080116cc
 80082c8:	08011674 	.word	0x08011674
 80082cc:	08011768 	.word	0x08011768
 80082d0:	08011724 	.word	0x08011724
 80082d4:	0801179c 	.word	0x0801179c
 80082d8:	0801182c 	.word	0x0801182c
 80082dc:	080116e4 	.word	0x080116e4
 80082e0:	080117f0 	.word	0x080117f0

080082e4 <inject_data>:
 80082e4:	3034      	adds	r0, #52	; 0x34
 80082e6:	f002 ba21 	b.w	800a72c <acc_element_source_adc_inject_data>
 80082ea:	bf00      	nop

080082ec <disassemble>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	6805      	ldr	r5, [r0, #0]
 80082f0:	4604      	mov	r4, r0
 80082f2:	b155      	cbz	r5, 800830a <disassemble+0x1e>
 80082f4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80082f8:	f002 f9c8 	bl	800a68c <acc_element_source_adc_release>
 80082fc:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 8008300:	f7ff fb62 	bl	80079c8 <acc_rss_integration_mem_free>
 8008304:	4628      	mov	r0, r5
 8008306:	f7ff fb5f 	bl	80079c8 <acc_rss_integration_mem_free>
 800830a:	4620      	mov	r0, r4
 800830c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008310:	f7ff bb5a 	b.w	80079c8 <acc_rss_integration_mem_free>

08008314 <produce>:
 8008314:	b510      	push	{r4, lr}
 8008316:	4604      	mov	r4, r0
 8008318:	3034      	adds	r0, #52	; 0x34
 800831a:	f002 f9c5 	bl	800a6a8 <acc_element_source_adc_produce>
 800831e:	b960      	cbnz	r0, 800833a <produce+0x26>
 8008320:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8008324:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 8008328:	6118      	str	r0, [r3, #16]
 800832a:	2101      	movs	r1, #1
 800832c:	7198      	strb	r0, [r3, #6]
 800832e:	7159      	strb	r1, [r3, #5]
 8008330:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8008334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008338:	4710      	bx	r2
 800833a:	bd10      	pop	{r4, pc}

0800833c <acc_pipeline_direct_assemble>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	b085      	sub	sp, #20
 8008342:	469b      	mov	fp, r3
 8008344:	4606      	mov	r6, r0
 8008346:	23ec      	movs	r3, #236	; 0xec
 8008348:	4689      	mov	r9, r1
 800834a:	4617      	mov	r7, r2
 800834c:	2110      	movs	r1, #16
 800834e:	4a58      	ldr	r2, [pc, #352]	; (80084b0 <acc_pipeline_direct_assemble+0x174>)
 8008350:	f8cd b00c 	str.w	fp, [sp, #12]
 8008354:	2001      	movs	r0, #1
 8008356:	f7ff fb17 	bl	8007988 <acc_rss_integration_mem_calloc_debug>
 800835a:	4a55      	ldr	r2, [pc, #340]	; (80084b0 <acc_pipeline_direct_assemble+0x174>)
 800835c:	4605      	mov	r5, r0
 800835e:	23ed      	movs	r3, #237	; 0xed
 8008360:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008364:	2001      	movs	r0, #1
 8008366:	f7ff fb0f 	bl	8007988 <acc_rss_integration_mem_calloc_debug>
 800836a:	4604      	mov	r4, r0
 800836c:	2d00      	cmp	r5, #0
 800836e:	f000 8094 	beq.w	800849a <acc_pipeline_direct_assemble+0x15e>
 8008372:	2800      	cmp	r0, #0
 8008374:	f000 8091 	beq.w	800849a <acc_pipeline_direct_assemble+0x15e>
 8008378:	f100 02f8 	add.w	r2, r0, #248	; 0xf8
 800837c:	f100 0b14 	add.w	fp, r0, #20
 8008380:	f100 0834 	add.w	r8, r0, #52	; 0x34
 8008384:	6028      	str	r0, [r5, #0]
 8008386:	4631      	mov	r1, r6
 8008388:	9200      	str	r2, [sp, #0]
 800838a:	4640      	mov	r0, r8
 800838c:	465b      	mov	r3, fp
 800838e:	463a      	mov	r2, r7
 8008390:	f002 f95c 	bl	800a64c <acc_element_source_adc_init_radar_engine>
 8008394:	4606      	mov	r6, r0
 8008396:	2800      	cmp	r0, #0
 8008398:	d045      	beq.n	8008426 <acc_pipeline_direct_assemble+0xea>
 800839a:	f8b4 a106 	ldrh.w	sl, [r4, #262]	; 0x106
 800839e:	f8b4 6102 	ldrh.w	r6, [r4, #258]	; 0x102
 80083a2:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
 80083a6:	4456      	add	r6, sl
 80083a8:	0076      	lsls	r6, r6, #1
 80083aa:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 80083ae:	45b2      	cmp	sl, r6
 80083b0:	4638      	mov	r0, r7
 80083b2:	bf38      	it	cc
 80083b4:	46b2      	movcc	sl, r6
 80083b6:	f7ff fdf9 	bl	8007fac <acc_base_configuration_min_pipeline_memory_size_get>
 80083ba:	4582      	cmp	sl, r0
 80083bc:	bf38      	it	cc
 80083be:	4682      	movcc	sl, r0
 80083c0:	493b      	ldr	r1, [pc, #236]	; (80084b0 <acc_pipeline_direct_assemble+0x174>)
 80083c2:	4650      	mov	r0, sl
 80083c4:	f44f 7298 	mov.w	r2, #304	; 0x130
 80083c8:	f7ff faba 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 80083cc:	4606      	mov	r6, r0
 80083ce:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80083d2:	b340      	cbz	r0, 8008426 <acc_pipeline_direct_assemble+0xea>
 80083d4:	f104 0010 	add.w	r0, r4, #16
 80083d8:	f104 0e06 	add.w	lr, r4, #6
 80083dc:	64a6      	str	r6, [r4, #72]	; 0x48
 80083de:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 80083e2:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
 80083e6:	f104 0c07 	add.w	ip, r4, #7
 80083ea:	65a0      	str	r0, [r4, #88]	; 0x58
 80083ec:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 80083f0:	f104 060c 	add.w	r6, r4, #12
 80083f4:	f104 0008 	add.w	r0, r4, #8
 80083f8:	1d23      	adds	r3, r4, #4
 80083fa:	e9c4 6019 	strd	r6, r0, [r4, #100]	; 0x64
 80083fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008402:	f8c4 a118 	str.w	sl, [r4, #280]	; 0x118
 8008406:	6564      	str	r4, [r4, #84]	; 0x54
 8008408:	f8c4 40ec 	str.w	r4, [r4, #236]	; 0xec
 800840c:	465a      	mov	r2, fp
 800840e:	4639      	mov	r1, r7
 8008410:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
 8008414:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 8008418:	f504 738a 	add.w	r3, r4, #276	; 0x114
 800841c:	4640      	mov	r0, r8
 800841e:	f002 f923 	bl	800a668 <acc_element_source_adc_init>
 8008422:	4606      	mov	r6, r0
 8008424:	b938      	cbnz	r0, 8008436 <acc_pipeline_direct_assemble+0xfa>
 8008426:	4628      	mov	r0, r5
 8008428:	f7ff ff60 	bl	80082ec <disassemble>
 800842c:	4635      	mov	r5, r6
 800842e:	4628      	mov	r0, r5
 8008430:	b005      	add	sp, #20
 8008432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800843a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800843e:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
 8008442:	2102      	movs	r1, #2
 8008444:	4638      	mov	r0, r7
 8008446:	f001 ff79 	bl	800a33c <acc_element_saturation_check_init>
 800844a:	4630      	mov	r0, r6
 800844c:	f8d9 1000 	ldr.w	r1, [r9]
 8008450:	f001 ffe4 	bl	800a41c <acc_element_sink_callback_init>
 8008454:	4639      	mov	r1, r7
 8008456:	4640      	mov	r0, r8
 8008458:	f001 ff2e 	bl	800a2b8 <acc_element_connect>
 800845c:	4631      	mov	r1, r6
 800845e:	4638      	mov	r0, r7
 8008460:	f001 ff2a 	bl	800a2b8 <acc_element_connect>
 8008464:	4640      	mov	r0, r8
 8008466:	f002 f91b 	bl	800a6a0 <acc_element_source_adc_validate>
 800846a:	4606      	mov	r6, r0
 800846c:	b178      	cbz	r0, 800848e <acc_pipeline_direct_assemble+0x152>
 800846e:	4640      	mov	r0, r8
 8008470:	f002 f912 	bl	800a698 <acc_element_source_adc_reset>
 8008474:	9803      	ldr	r0, [sp, #12]
 8008476:	490f      	ldr	r1, [pc, #60]	; (80084b4 <acc_pipeline_direct_assemble+0x178>)
 8008478:	4a0f      	ldr	r2, [pc, #60]	; (80084b8 <acc_pipeline_direct_assemble+0x17c>)
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <acc_pipeline_direct_assemble+0x180>)
 800847c:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
 8008480:	4628      	mov	r0, r5
 8008482:	e9c5 1201 	strd	r1, r2, [r5, #4]
 8008486:	60eb      	str	r3, [r5, #12]
 8008488:	b005      	add	sp, #20
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <acc_pipeline_direct_assemble+0x184>)
 8008490:	4a0c      	ldr	r2, [pc, #48]	; (80084c4 <acc_pipeline_direct_assemble+0x188>)
 8008492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008494:	4906      	ldr	r1, [pc, #24]	; (80084b0 <acc_pipeline_direct_assemble+0x174>)
 8008496:	4798      	blx	r3
 8008498:	e7c5      	b.n	8008426 <acc_pipeline_direct_assemble+0xea>
 800849a:	4628      	mov	r0, r5
 800849c:	f7ff fa94 	bl	80079c8 <acc_rss_integration_mem_free>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f7ff fa91 	bl	80079c8 <acc_rss_integration_mem_free>
 80084a6:	2500      	movs	r5, #0
 80084a8:	4628      	mov	r0, r5
 80084aa:	b005      	add	sp, #20
 80084ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b0:	080118b8 	.word	0x080118b8
 80084b4:	08008315 	.word	0x08008315
 80084b8:	080082e5 	.word	0x080082e5
 80084bc:	080082ed 	.word	0x080082ed
 80084c0:	200007b0 	.word	0x200007b0
 80084c4:	080118c8 	.word	0x080118c8

080084c8 <measure_noise>:
 80084c8:	2000      	movs	r0, #0
 80084ca:	4770      	bx	lr

080084cc <destroy>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	6940      	ldr	r0, [r0, #20]
 80084d2:	b118      	cbz	r0, 80084dc <destroy+0x10>
 80084d4:	f7ff fa78 	bl	80079c8 <acc_rss_integration_mem_free>
 80084d8:	2300      	movs	r3, #0
 80084da:	6163      	str	r3, [r4, #20]
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	bf00      	nop

080084e0 <update_program>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	6944      	ldr	r4, [r0, #20]
 80084e4:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 80084e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ea:	b082      	sub	sp, #8
 80084ec:	b9b2      	cbnz	r2, 800851c <update_program+0x3c>
 80084ee:	b979      	cbnz	r1, 8008510 <update_program+0x30>
 80084f0:	fab3 f383 	clz	r3, r3
 80084f4:	095b      	lsrs	r3, r3, #5
 80084f6:	f88d 3000 	strb.w	r3, [sp]
 80084fa:	2201      	movs	r2, #1
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	9201      	str	r2, [sp, #4]
 8008500:	4669      	mov	r1, sp
 8008502:	f002 ff19 	bl	800b338 <acc_cpd_sparse_sweep_update_program>
 8008506:	b108      	cbz	r0, 800850c <update_program+0x2c>
 8008508:	9b01      	ldr	r3, [sp, #4]
 800850a:	6423      	str	r3, [r4, #64]	; 0x40
 800850c:	b002      	add	sp, #8
 800850e:	bd10      	pop	{r4, pc}
 8008510:	3b00      	subs	r3, #0
 8008512:	bf18      	it	ne
 8008514:	2301      	movne	r3, #1
 8008516:	f88d 3000 	strb.w	r3, [sp]
 800851a:	e7ef      	b.n	80084fc <update_program+0x1c>
 800851c:	3b00      	subs	r3, #0
 800851e:	bf18      	it	ne
 8008520:	2301      	movne	r3, #1
 8008522:	f88d 3000 	strb.w	r3, [sp]
 8008526:	2200      	movs	r2, #0
 8008528:	e7e8      	b.n	80084fc <update_program+0x1c>
 800852a:	bf00      	nop

0800852c <process_data>:
 800852c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008530:	6946      	ldr	r6, [r0, #20]
 8008532:	f8b6 40b8 	ldrh.w	r4, [r6, #184]	; 0xb8
 8008536:	b914      	cbnz	r4, 800853e <process_data+0x12>
 8008538:	2001      	movs	r0, #1
 800853a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853e:	f8b6 80b4 	ldrh.w	r8, [r6, #180]	; 0xb4
 8008542:	4617      	mov	r7, r2
 8008544:	680a      	ldr	r2, [r1, #0]
 8008546:	6801      	ldr	r1, [r0, #0]
 8008548:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 800854c:	4642      	mov	r2, r8
 800854e:	461d      	mov	r5, r3
 8008550:	2001      	movs	r0, #1
 8008552:	4623      	mov	r3, r4
 8008554:	f7ff fa50 	bl	80079f8 <acc_probes_execute_uint16>
 8008558:	f8b6 10b8 	ldrh.w	r1, [r6, #184]	; 0xb8
 800855c:	4640      	mov	r0, r8
 800855e:	f001 fe7f 	bl	800a260 <acc_alg_cca_calculate>
 8008562:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008598 <process_data+0x6c>
 8008566:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8008568:	ed85 0a01 	vstr	s0, [r5, #4]
 800856c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008574:	bfcc      	ite	gt
 8008576:	2201      	movgt	r2, #1
 8008578:	2200      	movle	r2, #0
 800857a:	702a      	strb	r2, [r5, #0]
 800857c:	b13b      	cbz	r3, 800858e <process_data+0x62>
 800857e:	2300      	movs	r3, #0
 8008580:	f8b6 20b4 	ldrh.w	r2, [r6, #180]	; 0xb4
 8008584:	722b      	strb	r3, [r5, #8]
 8008586:	2001      	movs	r0, #1
 8008588:	603a      	str	r2, [r7, #0]
 800858a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
 8008592:	f083 0301 	eor.w	r3, r3, #1
 8008596:	e7f3      	b.n	8008580 <process_data+0x54>
 8008598:	42640000 	.word	0x42640000

0800859c <transfer_data>:
 800859c:	6943      	ldr	r3, [r0, #20]
 800859e:	6800      	ldr	r0, [r0, #0]
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	f8b3 60b8 	ldrh.w	r6, [r3, #184]	; 0xb8
 80085a6:	f8b3 40b4 	ldrh.w	r4, [r3, #180]	; 0xb4
 80085aa:	2300      	movs	r3, #0
 80085ac:	4434      	add	r4, r6
 80085ae:	7013      	strb	r3, [r2, #0]
 80085b0:	460d      	mov	r5, r1
 80085b2:	4622      	mov	r2, r4
 80085b4:	6809      	ldr	r1, [r1, #0]
 80085b6:	f001 fd15 	bl	8009fe4 <acc_sensor_protocol_r2_transfer_data>
 80085ba:	0062      	lsls	r2, r4, #1
 80085bc:	4601      	mov	r1, r0
 80085be:	6828      	ldr	r0, [r5, #0]
 80085c0:	f003 fe5a 	bl	800c278 <memmove>
 80085c4:	4620      	mov	r0, r4
 80085c6:	bd70      	pop	{r4, r5, r6, pc}

080085c8 <start>:
 80085c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085cc:	f8d0 9014 	ldr.w	r9, [r0, #20]
 80085d0:	f8d9 6084 	ldr.w	r6, [r9, #132]	; 0x84
 80085d4:	f8d9 707c 	ldr.w	r7, [r9, #124]	; 0x7c
 80085d8:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
 80085dc:	b083      	sub	sp, #12
 80085de:	4605      	mov	r5, r0
 80085e0:	b106      	cbz	r6, 80085e4 <start+0x1c>
 80085e2:	b987      	cbnz	r7, 8008606 <start+0x3e>
 80085e4:	e9d1 1200 	ldrd	r1, r2, [r1]
 80085e8:	6828      	ldr	r0, [r5, #0]
 80085ea:	464b      	mov	r3, r9
 80085ec:	f002 fa90 	bl	800ab10 <acc_cpd_sparse_sweep_load_program>
 80085f0:	4604      	mov	r4, r0
 80085f2:	b960      	cbnz	r0, 800860e <start+0x46>
 80085f4:	4b1b      	ldr	r3, [pc, #108]	; (8008664 <start+0x9c>)
 80085f6:	4a1c      	ldr	r2, [pc, #112]	; (8008668 <start+0xa0>)
 80085f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fa:	491c      	ldr	r1, [pc, #112]	; (800866c <start+0xa4>)
 80085fc:	4798      	blx	r3
 80085fe:	4620      	mov	r0, r4
 8008600:	b003      	add	sp, #12
 8008602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008606:	2300      	movs	r3, #0
 8008608:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800860c:	e7ea      	b.n	80085e4 <start+0x1c>
 800860e:	6828      	ldr	r0, [r5, #0]
 8008610:	f002 fe8e 	bl	800b330 <acc_cpd_sparse_sweep_run_program>
 8008614:	4604      	mov	r4, r0
 8008616:	b1f8      	cbz	r0, 8008658 <start+0x90>
 8008618:	2f00      	cmp	r7, #0
 800861a:	d0f0      	beq.n	80085fe <start+0x36>
 800861c:	6929      	ldr	r1, [r5, #16]
 800861e:	6828      	ldr	r0, [r5, #0]
 8008620:	f001 fcb6 	bl	8009f90 <acc_sensor_protocol_r2_wait_for_sync_start>
 8008624:	b1c0      	cbz	r0, 8008658 <start+0x90>
 8008626:	f7ff f9e1 	bl	80079ec <acc_rss_integration_log_level>
 800862a:	2801      	cmp	r0, #1
 800862c:	d905      	bls.n	800863a <start+0x72>
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <start+0x9c>)
 8008630:	4a0f      	ldr	r2, [pc, #60]	; (8008670 <start+0xa8>)
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	490d      	ldr	r1, [pc, #52]	; (800866c <start+0xa4>)
 8008636:	2002      	movs	r0, #2
 8008638:	4798      	blx	r3
 800863a:	2e00      	cmp	r6, #0
 800863c:	d0df      	beq.n	80085fe <start+0x36>
 800863e:	2301      	movs	r3, #1
 8008640:	6828      	ldr	r0, [r5, #0]
 8008642:	f8c9 8040 	str.w	r8, [r9, #64]	; 0x40
 8008646:	4669      	mov	r1, sp
 8008648:	f8cd 8004 	str.w	r8, [sp, #4]
 800864c:	f88d 3000 	strb.w	r3, [sp]
 8008650:	f002 fe72 	bl	800b338 <acc_cpd_sparse_sweep_update_program>
 8008654:	4604      	mov	r4, r0
 8008656:	e7d2      	b.n	80085fe <start+0x36>
 8008658:	2400      	movs	r4, #0
 800865a:	4620      	mov	r0, r4
 800865c:	b003      	add	sp, #12
 800865e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008662:	bf00      	nop
 8008664:	200007b0 	.word	0x200007b0
 8008668:	080118e8 	.word	0x080118e8
 800866c:	08011908 	.word	0x08011908
 8008670:	0801191c 	.word	0x0801191c

08008674 <calibrate>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	b08a      	sub	sp, #40	; 0x28
 8008678:	6806      	ldr	r6, [r0, #0]
 800867a:	460c      	mov	r4, r1
 800867c:	4615      	mov	r5, r2
 800867e:	f7ff f903 	bl	8007888 <acc_rss_integration_get_sensor_reference_frequency>
 8008682:	a805      	add	r0, sp, #20
 8008684:	a902      	add	r1, sp, #8
 8008686:	ed8d 0a05 	vstr	s0, [sp, #20]
 800868a:	f001 ff49 	bl	800a520 <acc_cpd_pll_divisors_calculate>
 800868e:	b918      	cbnz	r0, 8008698 <calibrate+0x24>
 8008690:	2400      	movs	r4, #0
 8008692:	4620      	mov	r0, r4
 8008694:	b00a      	add	sp, #40	; 0x28
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800869c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80086a0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80086a4:	9605      	str	r6, [sp, #20]
 80086a6:	9006      	str	r0, [sp, #24]
 80086a8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80086ac:	9307      	str	r3, [sp, #28]
 80086ae:	9108      	str	r1, [sp, #32]
 80086b0:	aa05      	add	r2, sp, #20
 80086b2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80086b6:	466b      	mov	r3, sp
 80086b8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80086bc:	f002 f84c 	bl	800a758 <acc_cpd_cbank_and_vana_calibration>
 80086c0:	4604      	mov	r4, r0
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d0e4      	beq.n	8008690 <calibrate+0x1c>
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80086cc:	80ab      	strh	r3, [r5, #4]
 80086ce:	2306      	movs	r3, #6
 80086d0:	80ea      	strh	r2, [r5, #6]
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f7ff f98a 	bl	80079ec <acc_rss_integration_log_level>
 80086d8:	2801      	cmp	r0, #1
 80086da:	d9da      	bls.n	8008692 <calibrate+0x1e>
 80086dc:	4b04      	ldr	r3, [pc, #16]	; (80086f0 <calibrate+0x7c>)
 80086de:	4a05      	ldr	r2, [pc, #20]	; (80086f4 <calibrate+0x80>)
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	4905      	ldr	r1, [pc, #20]	; (80086f8 <calibrate+0x84>)
 80086e4:	2002      	movs	r0, #2
 80086e6:	4798      	blx	r3
 80086e8:	4620      	mov	r0, r4
 80086ea:	b00a      	add	sp, #40	; 0x28
 80086ec:	bd70      	pop	{r4, r5, r6, pc}
 80086ee:	bf00      	nop
 80086f0:	200007b0 	.word	0x200007b0
 80086f4:	08011940 	.word	0x08011940
 80086f8:	08011908 	.word	0x08011908

080086fc <set_calibration_context>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	680b      	ldr	r3, [r1, #0]
 8008700:	2b06      	cmp	r3, #6
 8008702:	b086      	sub	sp, #24
 8008704:	d00a      	beq.n	800871c <set_calibration_context+0x20>
 8008706:	4914      	ldr	r1, [pc, #80]	; (8008758 <set_calibration_context+0x5c>)
 8008708:	4a14      	ldr	r2, [pc, #80]	; (800875c <set_calibration_context+0x60>)
 800870a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800870c:	4914      	ldr	r1, [pc, #80]	; (8008760 <set_calibration_context+0x64>)
 800870e:	2006      	movs	r0, #6
 8008710:	9000      	str	r0, [sp, #0]
 8008712:	2000      	movs	r0, #0
 8008714:	47a0      	blx	r4
 8008716:	2000      	movs	r0, #0
 8008718:	b006      	add	sp, #24
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	460c      	mov	r4, r1
 800871e:	4605      	mov	r5, r0
 8008720:	f7ff f8b2 	bl	8007888 <acc_rss_integration_get_sensor_reference_frequency>
 8008724:	a903      	add	r1, sp, #12
 8008726:	a802      	add	r0, sp, #8
 8008728:	ed8d 0a02 	vstr	s0, [sp, #8]
 800872c:	f001 fef8 	bl	800a520 <acc_cpd_pll_divisors_calculate>
 8008730:	2800      	cmp	r0, #0
 8008732:	d0f1      	beq.n	8008718 <set_calibration_context+0x1c>
 8008734:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8008738:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800873c:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 8008740:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8008744:	606a      	str	r2, [r5, #4]
 8008746:	60ab      	str	r3, [r5, #8]
 8008748:	88a2      	ldrh	r2, [r4, #4]
 800874a:	88e3      	ldrh	r3, [r4, #6]
 800874c:	602e      	str	r6, [r5, #0]
 800874e:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8008752:	81a9      	strh	r1, [r5, #12]
 8008754:	b006      	add	sp, #24
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	200007b0 	.word	0x200007b0
 800875c:	08011960 	.word	0x08011960
 8008760:	08011908 	.word	0x08011908

08008764 <get_dt>:
 8008764:	b508      	push	{r3, lr}
 8008766:	ed2d 8b02 	vpush	{d8}
 800876a:	f7ff f88d 	bl	8007888 <acc_rss_integration_get_sensor_reference_frequency>
 800876e:	eeb0 8a40 	vmov.f32	s16, s0
 8008772:	f001 ff63 	bl	800a63c <acc_cpd_pll_divisors_ref_divisor>
 8008776:	ee28 0a00 	vmul.f32	s0, s16, s0
 800877a:	ecbd 8b02 	vpop	{d8}
 800877e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008782:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008786:	bd08      	pop	{r3, pc}

08008788 <initialize>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	ed2d 8b06 	vpush	{d8-d10}
 8008790:	460c      	mov	r4, r1
 8008792:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 8008796:	2906      	cmp	r1, #6
 8008798:	b095      	sub	sp, #84	; 0x54
 800879a:	4607      	mov	r7, r0
 800879c:	4691      	mov	r9, r2
 800879e:	4698      	mov	r8, r3
 80087a0:	d00f      	beq.n	80087c2 <initialize+0x3a>
 80087a2:	2909      	cmp	r1, #9
 80087a4:	d00d      	beq.n	80087c2 <initialize+0x3a>
 80087a6:	4b63      	ldr	r3, [pc, #396]	; (8008934 <initialize+0x1ac>)
 80087a8:	4a63      	ldr	r2, [pc, #396]	; (8008938 <initialize+0x1b0>)
 80087aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ac:	4963      	ldr	r1, [pc, #396]	; (800893c <initialize+0x1b4>)
 80087ae:	2000      	movs	r0, #0
 80087b0:	4798      	blx	r3
 80087b2:	f04f 0a00 	mov.w	sl, #0
 80087b6:	4650      	mov	r0, sl
 80087b8:	b015      	add	sp, #84	; 0x54
 80087ba:	ecbd 8b06 	vpop	{d8-d10}
 80087be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c2:	4620      	mov	r0, r4
 80087c4:	f8d7 b014 	ldr.w	fp, [r7, #20]
 80087c8:	f7ff fb32 	bl	8007e30 <acc_base_configuration_use_point_range_get>
 80087cc:	b1d8      	cbz	r0, 8008806 <initialize+0x7e>
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff fa64 	bl	8007c9c <acc_base_configuration_point_start_get>
 80087d4:	4606      	mov	r6, r0
 80087d6:	4620      	mov	r0, r4
 80087d8:	f7ff fa6c 	bl	8007cb4 <acc_base_configuration_point_length_get>
 80087dc:	4430      	add	r0, r6
 80087de:	b205      	sxth	r5, r0
 80087e0:	b236      	sxth	r6, r6
 80087e2:	4620      	mov	r0, r4
 80087e4:	f7ff fb8e 	bl	8007f04 <acc_base_configuration_downsampling_factor_get>
 80087e8:	eba5 0a06 	sub.w	sl, r5, r6
 80087ec:	fb9a f3f0 	sdiv	r3, sl, r0
 80087f0:	fb03 aa10 	mls	sl, r3, r0, sl
 80087f4:	f1ba 0f00 	cmp.w	sl, #0
 80087f8:	f300 808d 	bgt.w	8008916 <initialize+0x18e>
 80087fc:	42b5      	cmp	r5, r6
 80087fe:	da41      	bge.n	8008884 <initialize+0xfc>
 8008800:	4b4c      	ldr	r3, [pc, #304]	; (8008934 <initialize+0x1ac>)
 8008802:	4a4f      	ldr	r2, [pc, #316]	; (8008940 <initialize+0x1b8>)
 8008804:	e7d1      	b.n	80087aa <initialize+0x22>
 8008806:	4620      	mov	r0, r4
 8008808:	f7ff f98e 	bl	8007b28 <acc_base_configuration_requested_start_get>
 800880c:	4620      	mov	r0, r4
 800880e:	eeb0 8a40 	vmov.f32	s16, s0
 8008812:	f7ff f9ab 	bl	8007b6c <acc_base_configuration_requested_length_get>
 8008816:	ee78 8a00 	vadd.f32	s17, s16, s0
 800881a:	f7ff ffa3 	bl	8008764 <get_dt>
 800881e:	eddf 9a49 	vldr	s19, [pc, #292]	; 8008944 <initialize+0x1bc>
 8008822:	ee78 7a08 	vadd.f32	s15, s16, s16
 8008826:	ee20 0a29 	vmul.f32	s0, s0, s19
 800882a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800882e:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800883a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800883e:	bf54      	ite	pl
 8008840:	eef0 7a49 	vmovpl.f32	s15, s18
 8008844:	eef0 7a48 	vmovmi.f32	s15, s16
 8008848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800884c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8008850:	ee17 3a10 	vmov	r3, s14
 8008854:	b21e      	sxth	r6, r3
 8008856:	f7ff ff85 	bl	8008764 <get_dt>
 800885a:	ee38 7aa8 	vadd.f32	s14, s17, s17
 800885e:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008862:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008866:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	bf58      	it	pl
 8008870:	eeb0 8a49 	vmovpl.f32	s16, s18
 8008874:	ee77 7a88 	vadd.f32	s15, s15, s16
 8008878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800887c:	ee17 3a90 	vmov	r3, s15
 8008880:	b21d      	sxth	r5, r3
 8008882:	e7ae      	b.n	80087e2 <initialize+0x5a>
 8008884:	4620      	mov	r0, r4
 8008886:	f7ff faf7 	bl	8007e78 <acc_base_configuration_ignore_range_limits_get>
 800888a:	4682      	mov	sl, r0
 800888c:	b9f0      	cbnz	r0, 80088cc <initialize+0x144>
 800888e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 818f 	beq.w	8008bb6 <initialize+0x42e>
 8008898:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800889a:	b21a      	sxth	r2, r3
 800889c:	015b      	lsls	r3, r3, #5
 800889e:	3b1a      	subs	r3, #26
 80088a0:	b21b      	sxth	r3, r3
 80088a2:	3a01      	subs	r2, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80088aa:	b292      	uxth	r2, r2
 80088ac:	bfb8      	it	lt
 80088ae:	3307      	addlt	r3, #7
 80088b0:	f1a2 010f 	sub.w	r1, r2, #15
 80088b4:	f023 0307 	bic.w	r3, r3, #7
 80088b8:	1acb      	subs	r3, r1, r3
 80088ba:	b219      	sxth	r1, r3
 80088bc:	3a30      	subs	r2, #48	; 0x30
 80088be:	42b1      	cmp	r1, r6
 80088c0:	b212      	sxth	r2, r2
 80088c2:	f300 83e7 	bgt.w	8009094 <initialize+0x90c>
 80088c6:	42aa      	cmp	r2, r5
 80088c8:	f2c0 8186 	blt.w	8008bd8 <initialize+0x450>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff fb19 	bl	8007f04 <acc_base_configuration_downsampling_factor_get>
 80088d2:	1bab      	subs	r3, r5, r6
 80088d4:	4602      	mov	r2, r0
 80088d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80088da:	3301      	adds	r3, #1
 80088dc:	b29b      	uxth	r3, r3
 80088de:	9008      	str	r0, [sp, #32]
 80088e0:	4620      	mov	r0, r4
 80088e2:	9306      	str	r3, [sp, #24]
 80088e4:	f7ff fae0 	bl	8007ea8 <acc_base_configuration_sparse_sweeps_per_frame_get>
 80088e8:	9b06      	ldr	r3, [sp, #24]
 80088ea:	fb13 f300 	smulbb	r3, r3, r0
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	aa11      	add	r2, sp, #68	; 0x44
 80088f2:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 80088f6:	4620      	mov	r0, r4
 80088f8:	9307      	str	r3, [sp, #28]
 80088fa:	f7ff fb7b 	bl	8007ff4 <acc_base_configuration_cca_get>
 80088fe:	bb48      	cbnz	r0, 8008954 <initialize+0x1cc>
 8008900:	9a07      	ldr	r2, [sp, #28]
 8008902:	4603      	mov	r3, r0
 8008904:	4410      	add	r0, r2
 8008906:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800890a:	f8ab 30b8 	strh.w	r3, [fp, #184]	; 0xb8
 800890e:	dd2b      	ble.n	8008968 <initialize+0x1e0>
 8008910:	4b08      	ldr	r3, [pc, #32]	; (8008934 <initialize+0x1ac>)
 8008912:	4a0d      	ldr	r2, [pc, #52]	; (8008948 <initialize+0x1c0>)
 8008914:	e749      	b.n	80087aa <initialize+0x22>
 8008916:	f7ff f869 	bl	80079ec <acc_rss_integration_log_level>
 800891a:	2801      	cmp	r0, #1
 800891c:	d905      	bls.n	800892a <initialize+0x1a2>
 800891e:	4b05      	ldr	r3, [pc, #20]	; (8008934 <initialize+0x1ac>)
 8008920:	4a0a      	ldr	r2, [pc, #40]	; (800894c <initialize+0x1c4>)
 8008922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008924:	4905      	ldr	r1, [pc, #20]	; (800893c <initialize+0x1b4>)
 8008926:	2002      	movs	r0, #2
 8008928:	4798      	blx	r3
 800892a:	eba5 050a 	sub.w	r5, r5, sl
 800892e:	b22d      	sxth	r5, r5
 8008930:	e764      	b.n	80087fc <initialize+0x74>
 8008932:	bf00      	nop
 8008934:	200007b0 	.word	0x200007b0
 8008938:	08011b48 	.word	0x08011b48
 800893c:	08011908 	.word	0x08011908
 8008940:	080119d8 	.word	0x080119d8
 8008944:	4d8ef3c2 	.word	0x4d8ef3c2
 8008948:	08011a88 	.word	0x08011a88
 800894c:	080119a4 	.word	0x080119a4
 8008950:	3d000000 	.word	0x3d000000
 8008954:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008958:	9a07      	ldr	r2, [sp, #28]
 800895a:	f8ab 30b8 	strh.w	r3, [fp, #184]	; 0xb8
 800895e:	4618      	mov	r0, r3
 8008960:	4410      	add	r0, r2
 8008962:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008966:	dcd3      	bgt.n	8008910 <initialize+0x188>
 8008968:	4620      	mov	r0, r4
 800896a:	f7ff f973 	bl	8007c54 <acc_base_configuration_hw_accelerated_average_samples_get>
 800896e:	4603      	mov	r3, r0
 8008970:	4620      	mov	r0, r4
 8008972:	9309      	str	r3, [sp, #36]	; 0x24
 8008974:	f7ff fb72 	bl	800805c <acc_base_configuration_mur_get>
 8008978:	4682      	mov	sl, r0
 800897a:	4620      	mov	r0, r4
 800897c:	f7ff fa28 	bl	8007dd0 <acc_base_configuration_sampling_mode_get>
 8008980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008982:	2800      	cmp	r0, #0
 8008984:	f040 811a 	bne.w	8008bbc <initialize+0x434>
 8008988:	9906      	ldr	r1, [sp, #24]
 800898a:	2007      	movs	r0, #7
 800898c:	f04f 0c0d 	mov.w	ip, #13
 8008990:	fb0a fa01 	mul.w	sl, sl, r1
 8008994:	fb10 c003 	smlabb	r0, r0, r3, ip
 8008998:	fb00 f00a 	mul.w	r0, r0, sl
 800899c:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
 80089a0:	eb00 030a 	add.w	r3, r0, sl
 80089a4:	ee08 3a10 	vmov	s16, r3
 80089a8:	f7fe ff6e 	bl	8007888 <acc_rss_integration_get_sensor_reference_frequency>
 80089ac:	eef0 8a40 	vmov.f32	s17, s0
 80089b0:	f001 fe44 	bl	800a63c <acc_cpd_pll_divisors_ref_divisor>
 80089b4:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8008950 <initialize+0x1c8>
 80089b8:	ee28 0a80 	vmul.f32	s0, s17, s0
 80089bc:	4620      	mov	r0, r4
 80089be:	ee60 8a27 	vmul.f32	s17, s0, s15
 80089c2:	f7ff fa8f 	bl	8007ee4 <acc_base_configuration_sparse_sweep_rate_get>
 80089c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80089ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ce:	f340 8358 	ble.w	8009082 <initialize+0x8fa>
 80089d2:	eec8 6a80 	vdiv.f32	s13, s17, s0
 80089d6:	eef8 7a48 	vcvt.f32.u32	s15, s16
 80089da:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80089de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80089e2:	ee07 aa90 	vmov	s15, sl
 80089e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 80089f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089f6:	ee17 3a90 	vmov	r3, s15
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f2c0 845e 	blt.w	80092bc <initialize+0xb34>
 8008a00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a04:	4293      	cmp	r3, r2
 8008a06:	f300 8202 	bgt.w	8008e0e <initialize+0x686>
 8008a0a:	ee18 2a10 	vmov	r2, s16
 8008a0e:	fb0a 2203 	mla	r2, sl, r3, r2
 8008a12:	ee08 2a10 	vmov	s16, r2
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	f8ab 30b6 	strh.w	r3, [fp, #182]	; 0xb6
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff f8e9 	bl	8007bf4 <acc_base_configuration_tx_disable_get>
 8008a22:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8008a26:	9a07      	ldr	r2, [sp, #28]
 8008a28:	f88b 00ba 	strb.w	r0, [fp, #186]	; 0xba
 8008a2c:	f8ab 20b4 	strh.w	r2, [fp, #180]	; 0xb4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 832c 	beq.w	800908e <initialize+0x906>
 8008a36:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8008a3a:	9808      	ldr	r0, [sp, #32]
 8008a3c:	9906      	ldr	r1, [sp, #24]
 8008a3e:	f8a7 c004 	strh.w	ip, [r7, #4]
 8008a42:	1e42      	subs	r2, r0, #1
 8008a44:	b292      	uxth	r2, r2
 8008a46:	2301      	movs	r3, #1
 8008a48:	2a07      	cmp	r2, #7
 8008a4a:	81bb      	strh	r3, [r7, #12]
 8008a4c:	813e      	strh	r6, [r7, #8]
 8008a4e:	8179      	strh	r1, [r7, #10]
 8008a50:	4633      	mov	r3, r6
 8008a52:	f200 8318 	bhi.w	8009086 <initialize+0x8fe>
 8008a56:	2208      	movs	r2, #8
 8008a58:	fbb2 f2f0 	udiv	r2, r2, r0
 8008a5c:	fb00 f202 	mul.w	r2, r0, r2
 8008a60:	2a08      	cmp	r2, #8
 8008a62:	f040 8310 	bne.w	8009086 <initialize+0x8fe>
 8008a66:	fa0f f18c 	sxth.w	r1, ip
 8008a6a:	3901      	subs	r1, #1
 8008a6c:	0149      	lsls	r1, r1, #5
 8008a6e:	b28a      	uxth	r2, r1
 8008a70:	f1a2 0e0f 	sub.w	lr, r2, #15
 8008a74:	fa1f fe8e 	uxth.w	lr, lr
 8008a78:	eba3 030e 	sub.w	r3, r3, lr
 8008a7c:	b21b      	sxth	r3, r3
 8008a7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a80:	10da      	asrs	r2, r3, #3
 8008a82:	4611      	mov	r1, r2
 8008a84:	920c      	str	r2, [sp, #48]	; 0x30
 8008a86:	425a      	negs	r2, r3
 8008a88:	f002 0207 	and.w	r2, r2, #7
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	9808      	ldr	r0, [sp, #32]
 8008a92:	bf58      	it	pl
 8008a94:	4253      	negpl	r3, r2
 8008a96:	eba5 0e0e 	sub.w	lr, r5, lr
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	fbb2 f2f0 	udiv	r2, r2, r0
 8008aa0:	9808      	ldr	r0, [sp, #32]
 8008aa2:	fa0f fe8e 	sxth.w	lr, lr
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f102 32ff 	add.w	r2, r2, #4294967295
 8008aac:	bfb8      	it	lt
 8008aae:	3308      	addlt	r3, #8
 8008ab0:	920d      	str	r2, [sp, #52]	; 0x34
 8008ab2:	f1de 0a00 	rsbs	sl, lr, #0
 8008ab6:	fb12 f200 	smulbb	r2, r2, r0
 8008aba:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8008abe:	f00a 0a07 	and.w	sl, sl, #7
 8008ac2:	f00e 0e07 	and.w	lr, lr, #7
 8008ac6:	f1c1 0101 	rsb	r1, r1, #1
 8008aca:	9209      	str	r2, [sp, #36]	; 0x24
 8008acc:	4461      	add	r1, ip
 8008ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad0:	fbb3 fcf0 	udiv	ip, r3, r0
 8008ad4:	fb00 3c1c 	mls	ip, r0, ip, r3
 8008ad8:	4670      	mov	r0, lr
 8008ada:	bf58      	it	pl
 8008adc:	f1ca 0000 	rsbpl	r0, sl, #0
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	b289      	uxth	r1, r1
 8008ae4:	4462      	add	r2, ip
 8008ae6:	bfb8      	it	lt
 8008ae8:	3008      	addlt	r0, #8
 8008aea:	2901      	cmp	r1, #1
 8008aec:	fa1f fa82 	uxth.w	sl, r2
 8008af0:	fa0f fe8c 	sxth.w	lr, ip
 8008af4:	b212      	sxth	r2, r2
 8008af6:	f000 83f5 	beq.w	80092e4 <initialize+0xb5c>
 8008afa:	1a12      	subs	r2, r2, r0
 8008afc:	bf18      	it	ne
 8008afe:	2201      	movne	r2, #1
 8008b00:	4573      	cmp	r3, lr
 8008b02:	bf14      	ite	ne
 8008b04:	f04f 0e01 	movne.w	lr, #1
 8008b08:	f04f 0e00 	moveq.w	lr, #0
 8008b0c:	eba1 010e 	sub.w	r1, r1, lr
 8008b10:	eba1 0102 	sub.w	r1, r1, r2
 8008b14:	b209      	sxth	r1, r1
 8008b16:	9109      	str	r1, [sp, #36]	; 0x24
 8008b18:	f040 83f7 	bne.w	800930a <initialize+0xb82>
 8008b1c:	f04f 0a00 	mov.w	sl, #0
 8008b20:	4551      	cmp	r1, sl
 8008b22:	e9cd a20e 	strd	sl, r2, [sp, #56]	; 0x38
 8008b26:	bfd4      	ite	le
 8008b28:	2200      	movle	r2, #0
 8008b2a:	2201      	movgt	r2, #1
 8008b2c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b30:	f1a2 0132 	sub.w	r1, r2, #50	; 0x32
 8008b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b36:	b209      	sxth	r1, r1
 8008b38:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	440b      	add	r3, r1
 8008b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b44:	4461      	add	r1, ip
 8008b46:	9b08      	ldr	r3, [sp, #32]
 8008b48:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8008b4c:	eba0 0c0c 	sub.w	ip, r0, ip
 8008b50:	fb9c f3f3 	sdiv	r3, ip, r3
 8008b54:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8008b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b60:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b66:	e9c2 3a28 	strd	r3, sl, [r2, #160]	; 0xa0
 8008b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b6c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8008b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bfcc      	ite	gt
 8008b76:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8008b7a:	2300      	movle	r3, #0
 8008b7c:	f1ce 0e05 	rsb	lr, lr, #5
 8008b80:	f8c2 e08c 	str.w	lr, [r2, #140]	; 0x8c
 8008b84:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7ff f921 	bl	8007dd0 <acc_base_configuration_sampling_mode_get>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	f040 8398 	bne.w	80092c4 <initialize+0xb3c>
 8008b94:	232e      	movs	r3, #46	; 0x2e
 8008b96:	f88b 0070 	strb.w	r0, [fp, #112]	; 0x70
 8008b9a:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f7ff f894 	bl	8007ccc <acc_base_configuration_repetition_mode_get>
 8008ba4:	2803      	cmp	r0, #3
 8008ba6:	f200 8256 	bhi.w	8009056 <initialize+0x8ce>
 8008baa:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008bae:	024f      	.short	0x024f
 8008bb0:	02300244 	.word	0x02300244
 8008bb4:	0133      	.short	0x0133
 8008bb6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8008bba:	e66e      	b.n	800889a <initialize+0x112>
 8008bbc:	9a06      	ldr	r2, [sp, #24]
 8008bbe:	fb03 f302 	mul.w	r3, r3, r2
 8008bc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008bc6:	f103 000f 	add.w	r0, r3, #15
 8008bca:	fb0a fa00 	mul.w	sl, sl, r0
 8008bce:	f10a 00d4 	add.w	r0, sl, #212	; 0xd4
 8008bd2:	f04f 0a03 	mov.w	sl, #3
 8008bd6:	e6e3      	b.n	80089a0 <initialize+0x218>
 8008bd8:	ee07 5a90 	vmov	s15, r5
 8008bdc:	4b9b      	ldr	r3, [pc, #620]	; (8008e4c <initialize+0x6c4>)
 8008bde:	9206      	str	r2, [sp, #24]
 8008be0:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8008be4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8008be6:	eddf 9aa1 	vldr	s19, [pc, #644]	; 8008e6c <initialize+0x6e4>
 8008bea:	ed9f aaa0 	vldr	s20, [pc, #640]	; 8008e6c <initialize+0x6e4>
 8008bee:	f7ff fdb9 	bl	8008764 <get_dt>
 8008bf2:	ee29 7a00 	vmul.f32	s14, s18, s0
 8008bf6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8008bfa:	ee27 7a29 	vmul.f32	s14, s14, s19
 8008bfe:	4994      	ldr	r1, [pc, #592]	; (8008e50 <initialize+0x6c8>)
 8008c00:	4b94      	ldr	r3, [pc, #592]	; (8008e54 <initialize+0x6cc>)
 8008c02:	ee27 7a28 	vmul.f32	s14, s14, s17
 8008c06:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0e:	bf4c      	ite	mi
 8008c10:	4688      	movmi	r8, r1
 8008c12:	4698      	movpl	r8, r3
 8008c14:	f7ff fda6 	bl	8008764 <get_dt>
 8008c18:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008c1c:	f7ff fda2 	bl	8008764 <get_dt>
 8008c20:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008c24:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008c28:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008c2c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008c30:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008c34:	9a06      	ldr	r2, [sp, #24]
 8008c36:	9206      	str	r2, [sp, #24]
 8008c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c40:	eddf 7a85 	vldr	s15, [pc, #532]	; 8008e58 <initialize+0x6d0>
 8008c44:	eddf 9a89 	vldr	s19, [pc, #548]	; 8008e6c <initialize+0x6e4>
 8008c48:	bf48      	it	mi
 8008c4a:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008c4e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008c52:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8008c56:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8008c5a:	ee17 6a90 	vmov	r6, s15
 8008c5e:	f7ff fd81 	bl	8008764 <get_dt>
 8008c62:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008c66:	f7ff fd7d 	bl	8008764 <get_dt>
 8008c6a:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008c6e:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008c72:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008c76:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008c7a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008c7e:	9a06      	ldr	r2, [sp, #24]
 8008c80:	9206      	str	r2, [sp, #24]
 8008c82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c8a:	bf48      	it	mi
 8008c8c:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008c90:	f7ff fd68 	bl	8008764 <get_dt>
 8008c94:	eddf 8a70 	vldr	s17, [pc, #448]	; 8008e58 <initialize+0x6d0>
 8008c98:	ee78 8a28 	vadd.f32	s17, s16, s17
 8008c9c:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008ca0:	f7ff fd60 	bl	8008764 <get_dt>
 8008ca4:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008ca8:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008cac:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8008cb0:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8008cb4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008cb8:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc4:	eddf 7a64 	vldr	s15, [pc, #400]	; 8008e58 <initialize+0x6d0>
 8008cc8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8008e5c <initialize+0x6d4>
 8008ccc:	9a06      	ldr	r2, [sp, #24]
 8008cce:	ed9f 9a67 	vldr	s18, [pc, #412]	; 8008e6c <initialize+0x6e4>
 8008cd2:	ed9f aa66 	vldr	s20, [pc, #408]	; 8008e6c <initialize+0x6e4>
 8008cd6:	bf48      	it	mi
 8008cd8:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008cdc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008ce0:	ee06 2a90 	vmov	s13, r2
 8008ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ce8:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 8008cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf0:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008cf4:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8008cf8:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008cfc:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8008d00:	ee17 4a90 	vmov	r4, s15
 8008d04:	f7ff fd2e 	bl	8008764 <get_dt>
 8008d08:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008d0c:	4b50      	ldr	r3, [pc, #320]	; (8008e50 <initialize+0x6c8>)
 8008d0e:	4a51      	ldr	r2, [pc, #324]	; (8008e54 <initialize+0x6cc>)
 8008d10:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008d14:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008d18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	bf4c      	ite	mi
 8008d22:	4699      	movmi	r9, r3
 8008d24:	4691      	movpl	r9, r2
 8008d26:	f7ff fd1d 	bl	8008764 <get_dt>
 8008d2a:	ee68 8a00 	vmul.f32	s17, s16, s0
 8008d2e:	f7ff fd19 	bl	8008764 <get_dt>
 8008d32:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008d36:	ee68 8a89 	vmul.f32	s17, s17, s18
 8008d3a:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008d3e:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8008d42:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008d46:	eddf 9a49 	vldr	s19, [pc, #292]	; 8008e6c <initialize+0x6e4>
 8008d4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d52:	eddf 7a41 	vldr	s15, [pc, #260]	; 8008e58 <initialize+0x6d0>
 8008d56:	bf48      	it	mi
 8008d58:	eef1 8a68 	vnegmi.f32	s17, s17
 8008d5c:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8008d60:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008d64:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8008d68:	ee17 5a90 	vmov	r5, s15
 8008d6c:	f7ff fcfa 	bl	8008764 <get_dt>
 8008d70:	ee68 8a00 	vmul.f32	s17, s16, s0
 8008d74:	f7ff fcf6 	bl	8008764 <get_dt>
 8008d78:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008d7c:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8008d80:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008d84:	ee68 8a89 	vmul.f32	s17, s17, s18
 8008d88:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008d8c:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008d90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d98:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8008e58 <initialize+0x6d0>
 8008d9c:	bf48      	it	mi
 8008d9e:	eef1 8a68 	vnegmi.f32	s17, s17
 8008da2:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8008da6:	f7ff fcdd 	bl	8008764 <get_dt>
 8008daa:	ee28 9a00 	vmul.f32	s18, s16, s0
 8008dae:	f7ff fcd9 	bl	8008764 <get_dt>
 8008db2:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008db6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008dba:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8008dbe:	ee29 9a29 	vmul.f32	s18, s18, s19
 8008dc2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008dc6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008e5c <initialize+0x6d4>
 8008dca:	4a25      	ldr	r2, [pc, #148]	; (8008e60 <initialize+0x6d8>)
 8008dcc:	9503      	str	r5, [sp, #12]
 8008dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd6:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008e58 <initialize+0x6d0>
 8008dda:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dde:	bf48      	it	mi
 8008de0:	eeb1 9a49 	vnegmi.f32	s18, s18
 8008de4:	ee79 7a27 	vadd.f32	s15, s18, s15
 8008de8:	9401      	str	r4, [sp, #4]
 8008dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dee:	9600      	str	r6, [sp, #0]
 8008df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df4:	4643      	mov	r3, r8
 8008df6:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8008dfa:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008dfe:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 8008e02:	4918      	ldr	r1, [pc, #96]	; (8008e64 <initialize+0x6dc>)
 8008e04:	edcd 8a04 	vstr	s17, [sp, #16]
 8008e08:	2000      	movs	r0, #0
 8008e0a:	47b8      	blx	r7
 8008e0c:	e4d3      	b.n	80087b6 <initialize+0x2e>
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <initialize+0x6c4>)
 8008e10:	4a15      	ldr	r2, [pc, #84]	; (8008e68 <initialize+0x6e0>)
 8008e12:	e4ca      	b.n	80087aa <initialize+0x22>
 8008e14:	ab13      	add	r3, sp, #76	; 0x4c
 8008e16:	4620      	mov	r0, r4
 8008e18:	9309      	str	r3, [sp, #36]	; 0x24
 8008e1a:	f7fe ff61 	bl	8007ce0 <acc_base_configuration_update_rate_get>
 8008e1e:	a912      	add	r1, sp, #72	; 0x48
 8008e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e22:	f000 fae7 	bl	80093f4 <acc_radar_engine_common_frequency_to_main_clk>
 8008e26:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e9cb 3309 	strd	r3, r3, [fp, #36]	; 0x24
 8008e30:	e9cb 120b 	strd	r1, r2, [fp, #44]	; 0x2c
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7fe fec7 	bl	8007bc8 <acc_base_configuration_power_save_mode_get>
 8008e3a:	2804      	cmp	r0, #4
 8008e3c:	d81e      	bhi.n	8008e7c <initialize+0x6f4>
 8008e3e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008e42:	0017      	.short	0x0017
 8008e44:	01190017 	.word	0x01190017
 8008e48:	010d0113 	.word	0x010d0113
 8008e4c:	200007b0 	.word	0x200007b0
 8008e50:	080119a0 	.word	0x080119a0
 8008e54:	08012a80 	.word	0x08012a80
 8008e58:	350637bd 	.word	0x350637bd
 8008e5c:	49742400 	.word	0x49742400
 8008e60:	08011a48 	.word	0x08011a48
 8008e64:	08011908 	.word	0x08011908
 8008e68:	08011b0c 	.word	0x08011b0c
 8008e6c:	4d8ef3c2 	.word	0x4d8ef3c2
 8008e70:	2301      	movs	r3, #1
 8008e72:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
 8008e7c:	f10d 0246 	add.w	r2, sp, #70	; 0x46
 8008e80:	f10d 0143 	add.w	r1, sp, #67	; 0x43
 8008e84:	4620      	mov	r0, r4
 8008e86:	f7ff f8b5 	bl	8007ff4 <acc_base_configuration_cca_get>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f000 8221 	beq.w	80092d2 <initialize+0xb4a>
 8008e90:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8008e94:	2201      	movs	r2, #1
 8008e96:	3b01      	subs	r3, #1
 8008e98:	e9cb 2321 	strd	r2, r3, [fp, #132]	; 0x84
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f7fe fea9 	bl	8007bf4 <acc_base_configuration_tx_disable_get>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f000 8239 	beq.w	800931a <initialize+0xb92>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7fe feb8 	bl	8007c24 <acc_base_configuration_decrease_tx_emission_get>
 8008eb4:	f080 0001 	eor.w	r0, r0, #1
 8008eb8:	f04f 0a01 	mov.w	sl, #1
 8008ebc:	b2c0      	uxtb	r0, r0
 8008ebe:	e9cb 0a11 	strd	r0, sl, [fp, #68]	; 0x44
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f7fe fec6 	bl	8007c54 <acc_base_configuration_hw_accelerated_average_samples_get>
 8008ec8:	4550      	cmp	r0, sl
 8008eca:	bf8b      	itete	hi
 8008ecc:	3802      	subhi	r0, #2
 8008ece:	2300      	movls	r3, #0
 8008ed0:	e9cb a013 	strdhi	sl, r0, [fp, #76]	; 0x4c
 8008ed4:	e9cb 3313 	strdls	r3, r3, [fp, #76]	; 0x4c
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f7fe ff1b 	bl	8007d14 <acc_base_configuration_gain_get>
 8008ede:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f7fe ff2c 	bl	8007d40 <acc_base_configuration_integrator_get>
 8008ee8:	f8cb 0058 	str.w	r0, [fp, #88]	; 0x58
 8008eec:	4620      	mov	r0, r4
 8008eee:	f7fe ff3f 	bl	8007d70 <acc_base_configuration_wg_duration_get>
 8008ef2:	f8cb 005c 	str.w	r0, [fp, #92]	; 0x5c
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7fe ffd6 	bl	8007ea8 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8008efc:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
 8008f00:	4620      	mov	r0, r4
 8008f02:	f7fe ffff 	bl	8007f04 <acc_base_configuration_downsampling_factor_get>
 8008f06:	f8cb 0078 	str.w	r0, [fp, #120]	; 0x78
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f7ff f836 	bl	8007f7c <acc_base_configuration_asynchronous_measurement_get>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	897a      	ldrh	r2, [r7, #10]
 8008f14:	f8b3 10b6 	ldrh.w	r1, [r3, #182]	; 0xb6
 8008f18:	88bb      	ldrh	r3, [r7, #4]
 8008f1a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 8008f1e:	f080 0001 	eor.w	r0, r0, #1
 8008f22:	b2c0      	uxtb	r0, r0
 8008f24:	3a01      	subs	r2, #1
 8008f26:	f8cb 007c 	str.w	r0, [fp, #124]	; 0x7c
 8008f2a:	f8cb 206c 	str.w	r2, [fp, #108]	; 0x6c
 8008f2e:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
 8008f32:	f7fe fca9 	bl	8007888 <acc_rss_integration_get_sensor_reference_frequency>
 8008f36:	ed8b 0a20 	vstr	s0, [fp, #128]	; 0x80
 8008f3a:	f7ff fc13 	bl	8008764 <get_dt>
 8008f3e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8008f42:	eddd 7a08 	vldr	s15, [sp, #32]
 8008f46:	ed1f 9a37 	vldr	s18, [pc, #-220]	; 8008e6c <initialize+0x6e4>
 8008f4a:	ee88 7a88 	vdiv.f32	s14, s17, s16
 8008f4e:	2401      	movs	r4, #1
 8008f50:	46a2      	mov	sl, r4
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	ed89 7a04 	vstr	s14, [r9, #16]
 8008f5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008f5e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008f62:	ed89 0a03 	vstr	s0, [r9, #12]
 8008f66:	f7ff fbfd 	bl	8008764 <get_dt>
 8008f6a:	ee07 6a90 	vmov	s15, r6
 8008f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f72:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008f76:	ee27 7a09 	vmul.f32	s14, s14, s18
 8008f7a:	ee27 7a08 	vmul.f32	s14, s14, s16
 8008f7e:	ed89 7a00 	vstr	s14, [r9]
 8008f82:	f7ff fbef 	bl	8008764 <get_dt>
 8008f86:	ee07 5a90 	vmov	s15, r5
 8008f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f8e:	edd9 6a00 	vldr	s13, [r9]
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	9807      	ldr	r0, [sp, #28]
 8008f96:	f8a9 0016 	strh.w	r0, [r9, #22]
 8008f9a:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008f9e:	2500      	movs	r5, #0
 8008fa0:	ee60 7a09 	vmul.f32	s15, s0, s18
 8008fa4:	f8a9 4018 	strh.w	r4, [r9, #24]
 8008fa8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8008fac:	f8a9 5014 	strh.w	r5, [r9, #20]
 8008fb0:	edc9 7a02 	vstr	s15, [r9, #8]
 8008fb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008fb8:	4623      	mov	r3, r4
 8008fba:	edc9 7a01 	vstr	s15, [r9, #4]
 8008fbe:	f8a8 4006 	strh.w	r4, [r8, #6]
 8008fc2:	f8a8 4010 	strh.w	r4, [r8, #16]
 8008fc6:	9c06      	ldr	r4, [sp, #24]
 8008fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fca:	f8a8 000a 	strh.w	r0, [r8, #10]
 8008fce:	f8a8 0000 	strh.w	r0, [r8]
 8008fd2:	f8a8 0004 	strh.w	r0, [r8, #4]
 8008fd6:	f8a8 5002 	strh.w	r5, [r8, #2]
 8008fda:	2013      	movs	r0, #19
 8008fdc:	f8a8 5018 	strh.w	r5, [r8, #24]
 8008fe0:	f8a8 4008 	strh.w	r4, [r8, #8]
 8008fe4:	f8a8 4014 	strh.w	r4, [r8, #20]
 8008fe8:	f8a8 4016 	strh.w	r4, [r8, #22]
 8008fec:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c
 8008ff0:	f7fe fd02 	bl	80079f8 <acc_probes_execute_uint16>
 8008ff4:	f000 fa6a 	bl	80094cc <acc_sensor_r2_get_max_header_length>
 8008ff8:	f8bb 20b8 	ldrh.w	r2, [fp, #184]	; 0xb8
 8008ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009000:	4410      	add	r0, r2
 8009002:	f8a8 000e 	strh.w	r0, [r8, #14]
 8009006:	f8a8 300c 	strh.w	r3, [r8, #12]
 800900a:	f7ff bbd4 	b.w	80087b6 <initialize+0x2e>
 800900e:	ab13      	add	r3, sp, #76	; 0x4c
 8009010:	4620      	mov	r0, r4
 8009012:	9309      	str	r3, [sp, #36]	; 0x24
 8009014:	f7fe fe64 	bl	8007ce0 <acc_base_configuration_update_rate_get>
 8009018:	a912      	add	r1, sp, #72	; 0x48
 800901a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800901c:	f000 f9ea 	bl	80093f4 <acc_radar_engine_common_frequency_to_main_clk>
 8009020:	2301      	movs	r3, #1
 8009022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009024:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8009028:	2100      	movs	r1, #0
 800902a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800902c:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8009030:	e9cb 120a 	strd	r1, r2, [fp, #40]	; 0x28
 8009034:	e6fe      	b.n	8008e34 <initialize+0x6ac>
 8009036:	2300      	movs	r3, #0
 8009038:	e9cb 330b 	strd	r3, r3, [fp, #44]	; 0x2c
 800903c:	2201      	movs	r2, #1
 800903e:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8009042:	ab13      	add	r3, sp, #76	; 0x4c
 8009044:	f8cb 2028 	str.w	r2, [fp, #40]	; 0x28
 8009048:	9309      	str	r3, [sp, #36]	; 0x24
 800904a:	e6f3      	b.n	8008e34 <initialize+0x6ac>
 800904c:	2300      	movs	r3, #0
 800904e:	e9cb 3309 	strd	r3, r3, [fp, #36]	; 0x24
 8009052:	e9cb 330b 	strd	r3, r3, [fp, #44]	; 0x2c
 8009056:	ab13      	add	r3, sp, #76	; 0x4c
 8009058:	9309      	str	r3, [sp, #36]	; 0x24
 800905a:	e6eb      	b.n	8008e34 <initialize+0x6ac>
 800905c:	2301      	movs	r3, #1
 800905e:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 8009062:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8009066:	e709      	b.n	8008e7c <initialize+0x6f4>
 8009068:	2300      	movs	r3, #0
 800906a:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 800906e:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8009072:	e703      	b.n	8008e7c <initialize+0x6f4>
 8009074:	2300      	movs	r3, #0
 8009076:	2201      	movs	r2, #1
 8009078:	e9cb 230d 	strd	r2, r3, [fp, #52]	; 0x34
 800907c:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8009080:	e6fc      	b.n	8008e7c <initialize+0x6f4>
 8009082:	2300      	movs	r3, #0
 8009084:	e4c8      	b.n	8008a18 <initialize+0x290>
 8009086:	4bb1      	ldr	r3, [pc, #708]	; (800934c <initialize+0xbc4>)
 8009088:	4ab1      	ldr	r2, [pc, #708]	; (8009350 <initialize+0xbc8>)
 800908a:	f7ff bb8e 	b.w	80087aa <initialize+0x22>
 800908e:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 8009092:	e4d2      	b.n	8008a3a <initialize+0x2b2>
 8009094:	ee07 6a90 	vmov	s15, r6
 8009098:	4bac      	ldr	r3, [pc, #688]	; (800934c <initialize+0xbc4>)
 800909a:	9106      	str	r1, [sp, #24]
 800909c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 80090a0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80090a2:	eddf 9aac 	vldr	s19, [pc, #688]	; 8009354 <initialize+0xbcc>
 80090a6:	ed9f aaab 	vldr	s20, [pc, #684]	; 8009354 <initialize+0xbcc>
 80090aa:	f7ff fb5b 	bl	8008764 <get_dt>
 80090ae:	ee29 7a00 	vmul.f32	s14, s18, s0
 80090b2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80090b6:	ee27 7a29 	vmul.f32	s14, s14, s19
 80090ba:	4aa7      	ldr	r2, [pc, #668]	; (8009358 <initialize+0xbd0>)
 80090bc:	4ba7      	ldr	r3, [pc, #668]	; (800935c <initialize+0xbd4>)
 80090be:	ee27 7a28 	vmul.f32	s14, s14, s17
 80090c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80090c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ca:	bf4c      	ite	mi
 80090cc:	4690      	movmi	r8, r2
 80090ce:	4698      	movpl	r8, r3
 80090d0:	f7ff fb48 	bl	8008764 <get_dt>
 80090d4:	ee29 8a00 	vmul.f32	s16, s18, s0
 80090d8:	f7ff fb44 	bl	8008764 <get_dt>
 80090dc:	ee69 7a00 	vmul.f32	s15, s18, s0
 80090e0:	ee28 8a29 	vmul.f32	s16, s16, s19
 80090e4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80090e8:	ee28 8a28 	vmul.f32	s16, s16, s17
 80090ec:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80090f0:	9906      	ldr	r1, [sp, #24]
 80090f2:	9106      	str	r1, [sp, #24]
 80090f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fc:	eddf 7a98 	vldr	s15, [pc, #608]	; 8009360 <initialize+0xbd8>
 8009100:	eddf 9a94 	vldr	s19, [pc, #592]	; 8009354 <initialize+0xbcc>
 8009104:	bf48      	it	mi
 8009106:	eeb1 8a48 	vnegmi.f32	s16, s16
 800910a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800910e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8009112:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8009116:	ee17 6a90 	vmov	r6, s15
 800911a:	f7ff fb23 	bl	8008764 <get_dt>
 800911e:	ee29 8a00 	vmul.f32	s16, s18, s0
 8009122:	f7ff fb1f 	bl	8008764 <get_dt>
 8009126:	ee69 7a00 	vmul.f32	s15, s18, s0
 800912a:	ee28 8a29 	vmul.f32	s16, s16, s19
 800912e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009132:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009136:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800913a:	9906      	ldr	r1, [sp, #24]
 800913c:	9106      	str	r1, [sp, #24]
 800913e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009146:	bf48      	it	mi
 8009148:	eeb1 8a48 	vnegmi.f32	s16, s16
 800914c:	f7ff fb0a 	bl	8008764 <get_dt>
 8009150:	eddf 8a83 	vldr	s17, [pc, #524]	; 8009360 <initialize+0xbd8>
 8009154:	ee78 8a28 	vadd.f32	s17, s16, s17
 8009158:	ee29 8a00 	vmul.f32	s16, s18, s0
 800915c:	f7ff fb02 	bl	8008764 <get_dt>
 8009160:	ee69 7a00 	vmul.f32	s15, s18, s0
 8009164:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8009168:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800916c:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8009170:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009174:	ee28 8a29 	vmul.f32	s16, s16, s19
 8009178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800917c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009180:	eddf 7a77 	vldr	s15, [pc, #476]	; 8009360 <initialize+0xbd8>
 8009184:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8009364 <initialize+0xbdc>
 8009188:	9906      	ldr	r1, [sp, #24]
 800918a:	ed9f 9a72 	vldr	s18, [pc, #456]	; 8009354 <initialize+0xbcc>
 800918e:	ed9f aa71 	vldr	s20, [pc, #452]	; 8009354 <initialize+0xbcc>
 8009192:	bf48      	it	mi
 8009194:	eeb1 8a48 	vnegmi.f32	s16, s16
 8009198:	ee78 7a27 	vadd.f32	s15, s16, s15
 800919c:	ee06 1a90 	vmov	s13, r1
 80091a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a4:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 80091a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ac:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80091b0:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80091b4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80091b8:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80091bc:	ee17 4a90 	vmov	r4, s15
 80091c0:	f7ff fad0 	bl	8008764 <get_dt>
 80091c4:	ee68 7a00 	vmul.f32	s15, s16, s0
 80091c8:	4b63      	ldr	r3, [pc, #396]	; (8009358 <initialize+0xbd0>)
 80091ca:	4a64      	ldr	r2, [pc, #400]	; (800935c <initialize+0xbd4>)
 80091cc:	ee67 7a89 	vmul.f32	s15, s15, s18
 80091d0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80091d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091dc:	bf4c      	ite	mi
 80091de:	4699      	movmi	r9, r3
 80091e0:	4691      	movpl	r9, r2
 80091e2:	f7ff fabf 	bl	8008764 <get_dt>
 80091e6:	ee68 8a00 	vmul.f32	s17, s16, s0
 80091ea:	f7ff fabb 	bl	8008764 <get_dt>
 80091ee:	ee68 7a00 	vmul.f32	s15, s16, s0
 80091f2:	ee68 8a89 	vmul.f32	s17, s17, s18
 80091f6:	ee67 7a89 	vmul.f32	s15, s15, s18
 80091fa:	ee68 8aa9 	vmul.f32	s17, s17, s19
 80091fe:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009202:	eddf 9a54 	vldr	s19, [pc, #336]	; 8009354 <initialize+0xbcc>
 8009206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8009360 <initialize+0xbd8>
 8009212:	bf48      	it	mi
 8009214:	eef1 8a68 	vnegmi.f32	s17, s17
 8009218:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800921c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8009220:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8009224:	ee17 5a90 	vmov	r5, s15
 8009228:	f7ff fa9c 	bl	8008764 <get_dt>
 800922c:	ee68 8a00 	vmul.f32	s17, s16, s0
 8009230:	f7ff fa98 	bl	8008764 <get_dt>
 8009234:	ee68 7a00 	vmul.f32	s15, s16, s0
 8009238:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800923c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009240:	ee68 8a89 	vmul.f32	s17, s17, s18
 8009244:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009248:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800924c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009254:	eddf 7a42 	vldr	s15, [pc, #264]	; 8009360 <initialize+0xbd8>
 8009258:	bf48      	it	mi
 800925a:	eef1 8a68 	vnegmi.f32	s17, s17
 800925e:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8009262:	f7ff fa7f 	bl	8008764 <get_dt>
 8009266:	ee28 9a00 	vmul.f32	s18, s16, s0
 800926a:	f7ff fa7b 	bl	8008764 <get_dt>
 800926e:	ee68 7a00 	vmul.f32	s15, s16, s0
 8009272:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8009276:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800927a:	ee29 9a29 	vmul.f32	s18, s18, s19
 800927e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009282:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009364 <initialize+0xbdc>
 8009286:	4a38      	ldr	r2, [pc, #224]	; (8009368 <initialize+0xbe0>)
 8009288:	9503      	str	r5, [sp, #12]
 800928a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800928e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009292:	eddf 7a33 	vldr	s15, [pc, #204]	; 8009360 <initialize+0xbd8>
 8009296:	f8cd 9008 	str.w	r9, [sp, #8]
 800929a:	bf48      	it	mi
 800929c:	eeb1 9a49 	vnegmi.f32	s18, s18
 80092a0:	ee79 7a27 	vadd.f32	s15, s18, s15
 80092a4:	9401      	str	r4, [sp, #4]
 80092a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092aa:	9600      	str	r6, [sp, #0]
 80092ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b0:	4643      	mov	r3, r8
 80092b2:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80092b6:	ee68 8a87 	vmul.f32	s17, s17, s14
 80092ba:	e5a0      	b.n	8008dfe <initialize+0x676>
 80092bc:	4b23      	ldr	r3, [pc, #140]	; (800934c <initialize+0xbc4>)
 80092be:	4a2b      	ldr	r2, [pc, #172]	; (800936c <initialize+0xbe4>)
 80092c0:	f7ff ba73 	b.w	80087aa <initialize+0x22>
 80092c4:	2201      	movs	r2, #1
 80092c6:	232e      	movs	r3, #46	; 0x2e
 80092c8:	f88b 2070 	strb.w	r2, [fp, #112]	; 0x70
 80092cc:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
 80092d0:	e465      	b.n	8008b9e <initialize+0x416>
 80092d2:	f8cb 0084 	str.w	r0, [fp, #132]	; 0x84
 80092d6:	4620      	mov	r0, r4
 80092d8:	f7fe fc8c 	bl	8007bf4 <acc_base_configuration_tx_disable_get>
 80092dc:	f080 0001 	eor.w	r0, r0, #1
 80092e0:	b2c3      	uxtb	r3, r0
 80092e2:	e5e2      	b.n	8008eaa <initialize+0x722>
 80092e4:	4573      	cmp	r3, lr
 80092e6:	d01d      	beq.n	8009324 <initialize+0xb9c>
 80092e8:	2200      	movs	r2, #0
 80092ea:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 80092ee:	2200      	movs	r2, #0
 80092f0:	fa1f fa80 	uxth.w	sl, r0
 80092f4:	920f      	str	r2, [sp, #60]	; 0x3c
 80092f6:	2101      	movs	r1, #1
 80092f8:	ebaa 0203 	sub.w	r2, sl, r3
 80092fc:	910e      	str	r1, [sp, #56]	; 0x38
 80092fe:	9908      	ldr	r1, [sp, #32]
 8009300:	fb92 f2f1 	sdiv	r2, r2, r1
 8009304:	fa1f fa82 	uxth.w	sl, r2
 8009308:	e411      	b.n	8008b2e <initialize+0x3a6>
 800930a:	920f      	str	r2, [sp, #60]	; 0x3c
 800930c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800930e:	2a00      	cmp	r2, #0
 8009310:	bfd4      	ite	le
 8009312:	2200      	movle	r2, #0
 8009314:	2201      	movgt	r2, #1
 8009316:	920a      	str	r2, [sp, #40]	; 0x28
 8009318:	e7ed      	b.n	80092f6 <initialize+0xb6e>
 800931a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800931e:	f083 0301 	eor.w	r3, r3, #1
 8009322:	e5c2      	b.n	8008eaa <initialize+0x722>
 8009324:	4282      	cmp	r2, r0
 8009326:	bf0c      	ite	eq
 8009328:	2201      	moveq	r2, #1
 800932a:	2200      	movne	r2, #0
 800932c:	9209      	str	r2, [sp, #36]	; 0x24
 800932e:	d106      	bne.n	800933e <initialize+0xbb6>
 8009330:	f04f 0a00 	mov.w	sl, #0
 8009334:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
 8009338:	920a      	str	r2, [sp, #40]	; 0x28
 800933a:	f7ff bbf8 	b.w	8008b2e <initialize+0x3a6>
 800933e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009340:	2a00      	cmp	r2, #0
 8009342:	bfd4      	ite	le
 8009344:	2200      	movle	r2, #0
 8009346:	2201      	movgt	r2, #1
 8009348:	920a      	str	r2, [sp, #40]	; 0x28
 800934a:	e7d0      	b.n	80092ee <initialize+0xb66>
 800934c:	200007b0 	.word	0x200007b0
 8009350:	08011b2c 	.word	0x08011b2c
 8009354:	4d8ef3c2 	.word	0x4d8ef3c2
 8009358:	080119a0 	.word	0x080119a0
 800935c:	08012a80 	.word	0x08012a80
 8009360:	350637bd 	.word	0x350637bd
 8009364:	49742400 	.word	0x49742400
 8009368:	08011a08 	.word	0x08011a08
 800936c:	08011ae8 	.word	0x08011ae8

08009370 <acc_radar_engine_sparse_create>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4a11      	ldr	r2, [pc, #68]	; (80093b8 <acc_radar_engine_sparse_create+0x48>)
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800937c:	21bc      	movs	r1, #188	; 0xbc
 800937e:	2001      	movs	r0, #1
 8009380:	f7fe fb02 	bl	8007988 <acc_rss_integration_mem_calloc_debug>
 8009384:	6160      	str	r0, [r4, #20]
 8009386:	b1a8      	cbz	r0, 80093b4 <acc_radar_engine_sparse_create+0x44>
 8009388:	4628      	mov	r0, r5
 800938a:	f7fe fbb7 	bl	8007afc <acc_base_configuration_sensor_get>
 800938e:	6020      	str	r0, [r4, #0]
 8009390:	4628      	mov	r0, r5
 8009392:	f7fe fdf3 	bl	8007f7c <acc_base_configuration_asynchronous_measurement_get>
 8009396:	73a0      	strb	r0, [r4, #14]
 8009398:	4628      	mov	r0, r5
 800939a:	f7fe fc15 	bl	8007bc8 <acc_base_configuration_power_save_mode_get>
 800939e:	fab0 f080 	clz	r0, r0
 80093a2:	0940      	lsrs	r0, r0, #5
 80093a4:	73e0      	strb	r0, [r4, #15]
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 f80a 	bl	80093c0 <acc_radar_engine_common_get_timeout_ms>
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <acc_radar_engine_sparse_create+0x4c>)
 80093ae:	6120      	str	r0, [r4, #16]
 80093b0:	61a3      	str	r3, [r4, #24]
 80093b2:	2001      	movs	r0, #1
 80093b4:	bd38      	pop	{r3, r4, r5, pc}
 80093b6:	bf00      	nop
 80093b8:	08011908 	.word	0x08011908
 80093bc:	08011b74 	.word	0x08011b74

080093c0 <acc_radar_engine_common_get_timeout_ms>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	4604      	mov	r4, r0
 80093c4:	f7fe fc82 	bl	8007ccc <acc_base_configuration_repetition_mode_get>
 80093c8:	2801      	cmp	r0, #1
 80093ca:	d00d      	beq.n	80093e8 <acc_radar_engine_common_get_timeout_ms+0x28>
 80093cc:	4620      	mov	r0, r4
 80093ce:	f7fe fc87 	bl	8007ce0 <acc_base_configuration_update_rate_get>
 80093d2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80093f0 <acc_radar_engine_common_get_timeout_ms+0x30>
 80093d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e2:	ee17 0a90 	vmov	r0, s15
 80093e6:	bd10      	pop	{r4, pc}
 80093e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80093ec:	bd10      	pop	{r4, pc}
 80093ee:	bf00      	nop
 80093f0:	44fa0000 	.word	0x44fa0000

080093f4 <acc_radar_engine_common_frequency_to_main_clk>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	ed2d 8b02 	vpush	{d8}
 80093fa:	4604      	mov	r4, r0
 80093fc:	eeb0 8a40 	vmov.f32	s16, s0
 8009400:	460d      	mov	r5, r1
 8009402:	f7fe fa41 	bl	8007888 <acc_rss_integration_get_sensor_reference_frequency>
 8009406:	eec0 7a08 	vdiv.f32	s15, s0, s16
 800940a:	ecbd 8b02 	vpop	{d8}
 800940e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009412:	ee17 3a90 	vmov	r3, s15
 8009416:	0c1a      	lsrs	r2, r3, #16
 8009418:	b29b      	uxth	r3, r3
 800941a:	602a      	str	r2, [r5, #0]
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}

08009420 <internal_buffer_processed_read>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	b085      	sub	sp, #20
 8009426:	461f      	mov	r7, r3
 8009428:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 800942c:	9101      	str	r1, [sp, #4]
 800942e:	4682      	mov	sl, r0
 8009430:	4689      	mov	r9, r1
 8009432:	4615      	mov	r5, r2
 8009434:	f7fe fa2e 	bl	8007894 <acc_rss_integration_get_max_spi_transfer_size>
 8009438:	2300      	movs	r3, #0
 800943a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800943e:	9302      	str	r3, [sp, #8]
 8009440:	2f00      	cmp	r7, #0
 8009442:	d03d      	beq.n	80094c0 <internal_buffer_processed_read+0xa0>
 8009444:	429c      	cmp	r4, r3
 8009446:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800944a:	bf14      	ite	ne
 800944c:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8009450:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8009454:	f1a0 0803 	sub.w	r8, r0, #3
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	fa0f fb8b 	sxth.w	fp, fp
 800945e:	e024      	b.n	80094aa <internal_buffer_processed_read+0x8a>
 8009460:	b2a6      	uxth	r6, r4
 8009462:	9900      	ldr	r1, [sp, #0]
 8009464:	f8a9 1004 	strh.w	r1, [r9, #4]
 8009468:	1e72      	subs	r2, r6, #1
 800946a:	ea4b 0305 	orr.w	r3, fp, r5
 800946e:	f8a9 2002 	strh.w	r2, [r9, #2]
 8009472:	f8a9 3000 	strh.w	r3, [r9]
 8009476:	4649      	mov	r1, r9
 8009478:	2301      	movs	r3, #1
 800947a:	4650      	mov	r0, sl
 800947c:	1ce2      	adds	r2, r4, #3
 800947e:	f7fe fa39 	bl	80078f4 <acc_rss_integration_sensor_device_transfer>
 8009482:	9802      	ldr	r0, [sp, #8]
 8009484:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009488:	f8c9 0000 	str.w	r0, [r9]
 800948c:	f8a9 3004 	strh.w	r3, [r9, #4]
 8009490:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8009494:	442e      	add	r6, r5
 8009496:	f8d9 0000 	ldr.w	r0, [r9]
 800949a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800949e:	9002      	str	r0, [sp, #8]
 80094a0:	1b3f      	subs	r7, r7, r4
 80094a2:	b2b5      	uxth	r5, r6
 80094a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80094a8:	d00a      	beq.n	80094c0 <internal_buffer_processed_read+0xa0>
 80094aa:	45b8      	cmp	r8, r7
 80094ac:	4644      	mov	r4, r8
 80094ae:	bf28      	it	cs
 80094b0:	463c      	movcs	r4, r7
 80094b2:	45b8      	cmp	r8, r7
 80094b4:	d2d4      	bcs.n	8009460 <internal_buffer_processed_read+0x40>
 80094b6:	e000      	b.n	80094ba <internal_buffer_processed_read+0x9a>
 80094b8:	3c01      	subs	r4, #1
 80094ba:	07e3      	lsls	r3, r4, #31
 80094bc:	d4fc      	bmi.n	80094b8 <internal_buffer_processed_read+0x98>
 80094be:	e7cf      	b.n	8009460 <internal_buffer_processed_read+0x40>
 80094c0:	9801      	ldr	r0, [sp, #4]
 80094c2:	3006      	adds	r0, #6
 80094c4:	b005      	add	sp, #20
 80094c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	bf00      	nop

080094cc <acc_sensor_r2_get_max_header_length>:
 80094cc:	2003      	movs	r0, #3
 80094ce:	4770      	bx	lr

080094d0 <acc_sensor_r2_conf_write_instr>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 80094d8:	4604      	mov	r4, r0
 80094da:	9201      	str	r2, [sp, #4]
 80094dc:	f10d 010a 	add.w	r1, sp, #10
 80094e0:	a801      	add	r0, sp, #4
 80094e2:	2201      	movs	r2, #1
 80094e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80094e8:	f7fe fad6 	bl	8007a98 <acc_utils_uint32_to_transfer_buffer>
 80094ec:	4620      	mov	r0, r4
 80094ee:	a902      	add	r1, sp, #8
 80094f0:	2300      	movs	r3, #0
 80094f2:	2203      	movs	r2, #3
 80094f4:	f7fe f9fe 	bl	80078f4 <acc_rss_integration_sensor_device_transfer>
 80094f8:	b004      	add	sp, #16
 80094fa:	bd10      	pop	{r4, pc}

080094fc <acc_sensor_r2_prepare_load_confmem>:
 80094fc:	0849      	lsrs	r1, r1, #1
 80094fe:	b538      	push	{r3, r4, r5, lr}
 8009500:	6010      	str	r0, [r2, #0]
 8009502:	461c      	mov	r4, r3
 8009504:	6019      	str	r1, [r3, #0]
 8009506:	4615      	mov	r5, r2
 8009508:	f7fe f9c4 	bl	8007894 <acc_rss_integration_get_max_spi_transfer_size>
 800950c:	6821      	ldr	r1, [r4, #0]
 800950e:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8009512:	d807      	bhi.n	8009524 <acc_sensor_r2_prepare_load_confmem+0x28>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	3901      	subs	r1, #1
 8009518:	f021 0101 	bic.w	r1, r1, #1
 800951c:	3302      	adds	r3, #2
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	6021      	str	r1, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	f7fe f9b6 	bl	8007894 <acc_rss_integration_get_max_spi_transfer_size>
 8009528:	0841      	lsrs	r1, r0, #1
 800952a:	e7f3      	b.n	8009514 <acc_sensor_r2_prepare_load_confmem+0x18>

0800952c <acc_sensor_r2_load_confmem>:
 800952c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009530:	b083      	sub	sp, #12
 8009532:	1c5d      	adds	r5, r3, #1
 8009534:	4606      	mov	r6, r0
 8009536:	460c      	mov	r4, r1
 8009538:	4617      	mov	r7, r2
 800953a:	f7fe fa57 	bl	80079ec <acc_rss_integration_log_level>
 800953e:	2803      	cmp	r0, #3
 8009540:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8009544:	d908      	bls.n	8009558 <acc_sensor_r2_load_confmem+0x2c>
 8009546:	4b11      	ldr	r3, [pc, #68]	; (800958c <acc_sensor_r2_load_confmem+0x60>)
 8009548:	9400      	str	r4, [sp, #0]
 800954a:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800954e:	4a10      	ldr	r2, [pc, #64]	; (8009590 <acc_sensor_r2_load_confmem+0x64>)
 8009550:	4910      	ldr	r1, [pc, #64]	; (8009594 <acc_sensor_r2_load_confmem+0x68>)
 8009552:	4633      	mov	r3, r6
 8009554:	2004      	movs	r0, #4
 8009556:	47c8      	blx	r9
 8009558:	f7fe f99c 	bl	8007894 <acc_rss_integration_get_max_spi_transfer_size>
 800955c:	4540      	cmp	r0, r8
 800955e:	d208      	bcs.n	8009572 <acc_sensor_r2_load_confmem+0x46>
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <acc_sensor_r2_load_confmem+0x60>)
 8009562:	4a0d      	ldr	r2, [pc, #52]	; (8009598 <acc_sensor_r2_load_confmem+0x6c>)
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	490b      	ldr	r1, [pc, #44]	; (8009594 <acc_sensor_r2_load_confmem+0x68>)
 8009568:	2000      	movs	r0, #0
 800956a:	b003      	add	sp, #12
 800956c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009570:	4718      	bx	r3
 8009572:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8009576:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800957a:	4639      	mov	r1, r7
 800957c:	4630      	mov	r0, r6
 800957e:	2300      	movs	r3, #0
 8009580:	803c      	strh	r4, [r7, #0]
 8009582:	b003      	add	sp, #12
 8009584:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009588:	f7fe b9b4 	b.w	80078f4 <acc_rss_integration_sensor_device_transfer>
 800958c:	200007b0 	.word	0x200007b0
 8009590:	08011ba8 	.word	0x08011ba8
 8009594:	08011b98 	.word	0x08011b98
 8009598:	08011bd0 	.word	0x08011bd0

0800959c <acc_sensor_r2_buffer_processed_verify_size>:
 800959c:	3103      	adds	r1, #3
 800959e:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 80095a2:	bf2c      	ite	cs
 80095a4:	2001      	movcs	r0, #1
 80095a6:	2000      	movcc	r0, #0
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop

080095ac <acc_sensor_r2_buffer_processed_read>:
 80095ac:	b510      	push	{r4, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	2400      	movs	r4, #0
 80095b2:	9400      	str	r4, [sp, #0]
 80095b4:	f7ff ff34 	bl	8009420 <internal_buffer_processed_read>
 80095b8:	b002      	add	sp, #8
 80095ba:	bd10      	pop	{r4, pc}

080095bc <acc_sensor_manager_power_on_and_start_sensor>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	6986      	ldr	r6, [r0, #24]
 80095c0:	4604      	mov	r4, r0
 80095c2:	4630      	mov	r0, r6
 80095c4:	f7fe f96c 	bl	80078a0 <acc_rss_integration_sensor_device_power_on>
 80095c8:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 80095ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80095cc:	6819      	ldr	r1, [r3, #0]
 80095ce:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	3b48      	subs	r3, #72	; 0x48
 80095d6:	4419      	add	r1, r3
 80095d8:	1d20      	adds	r0, r4, #4
 80095da:	f000 fe03 	bl	800a1e4 <acc_sweep_manager_start>
 80095de:	4605      	mov	r5, r0
 80095e0:	b118      	cbz	r0, 80095ea <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 80095e2:	2301      	movs	r3, #1
 80095e4:	70e3      	strb	r3, [r4, #3]
 80095e6:	4628      	mov	r0, r5
 80095e8:	bd70      	pop	{r4, r5, r6, pc}
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7fe f95e 	bl	80078ac <acc_rss_integration_sensor_device_power_off>
 80095f0:	4628      	mov	r0, r5
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	20000798 	.word	0x20000798

080095f8 <calibrate_sensor>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80096cc <calibrate_sensor+0xd4>
 8009600:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80096d0 <calibrate_sensor+0xd8>
 8009604:	f8d8 3000 	ldr.w	r3, [r8]
 8009608:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 800960c:	00e4      	lsls	r4, r4, #3
 800960e:	3c48      	subs	r4, #72	; 0x48
 8009610:	4423      	add	r3, r4
 8009612:	f04f 0900 	mov.w	r9, #0
 8009616:	b085      	sub	sp, #20
 8009618:	460e      	mov	r6, r1
 800961a:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 800961e:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8009622:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8009626:	4607      	mov	r7, r0
 8009628:	4692      	mov	sl, r2
 800962a:	f7fe f939 	bl	80078a0 <acc_rss_integration_sensor_device_power_on>
 800962e:	4630      	mov	r0, r6
 8009630:	f000 fdb4 	bl	800a19c <acc_sweep_manager_is_sensor_connected>
 8009634:	b968      	cbnz	r0, 8009652 <calibrate_sensor+0x5a>
 8009636:	4b21      	ldr	r3, [pc, #132]	; (80096bc <calibrate_sensor+0xc4>)
 8009638:	4a21      	ldr	r2, [pc, #132]	; (80096c0 <calibrate_sensor+0xc8>)
 800963a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800963c:	4921      	ldr	r1, [pc, #132]	; (80096c4 <calibrate_sensor+0xcc>)
 800963e:	463b      	mov	r3, r7
 8009640:	4605      	mov	r5, r0
 8009642:	47a0      	blx	r4
 8009644:	4638      	mov	r0, r7
 8009646:	f7fe f931 	bl	80078ac <acc_rss_integration_sensor_device_power_off>
 800964a:	4628      	mov	r0, r5
 800964c:	b005      	add	sp, #20
 800964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009652:	4639      	mov	r1, r7
 8009654:	200b      	movs	r0, #11
 8009656:	f7fe f9ff 	bl	8007a58 <acc_probes_execute_primitive_probe>
 800965a:	f8d8 2000 	ldr.w	r2, [r8]
 800965e:	f8cd 9004 	str.w	r9, [sp, #4]
 8009662:	4651      	mov	r1, sl
 8009664:	4630      	mov	r0, r6
 8009666:	4422      	add	r2, r4
 8009668:	ab01      	add	r3, sp, #4
 800966a:	f8cd b008 	str.w	fp, [sp, #8]
 800966e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009672:	f000 fd97 	bl	800a1a4 <acc_sweep_manager_calibrate>
 8009676:	4605      	mov	r5, r0
 8009678:	b9c8      	cbnz	r0, 80096ae <calibrate_sensor+0xb6>
 800967a:	4b10      	ldr	r3, [pc, #64]	; (80096bc <calibrate_sensor+0xc4>)
 800967c:	4a12      	ldr	r2, [pc, #72]	; (80096c8 <calibrate_sensor+0xd0>)
 800967e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009680:	4910      	ldr	r1, [pc, #64]	; (80096c4 <calibrate_sensor+0xcc>)
 8009682:	463b      	mov	r3, r7
 8009684:	47b0      	blx	r6
 8009686:	f8d8 3000 	ldr.w	r3, [r8]
 800968a:	441c      	add	r4, r3
 800968c:	9a02      	ldr	r2, [sp, #8]
 800968e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009692:	6462      	str	r2, [r4, #68]	; 0x44
 8009694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009698:	4639      	mov	r1, r7
 800969a:	200c      	movs	r0, #12
 800969c:	f7fe f9dc 	bl	8007a58 <acc_probes_execute_primitive_probe>
 80096a0:	4638      	mov	r0, r7
 80096a2:	f7fe f903 	bl	80078ac <acc_rss_integration_sensor_device_power_off>
 80096a6:	4628      	mov	r0, r5
 80096a8:	b005      	add	sp, #20
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ae:	f8d8 3000 	ldr.w	r3, [r8]
 80096b2:	441c      	add	r4, r3
 80096b4:	2301      	movs	r3, #1
 80096b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80096ba:	e7e7      	b.n	800968c <calibrate_sensor+0x94>
 80096bc:	200007b0 	.word	0x200007b0
 80096c0:	08011bf0 	.word	0x08011bf0
 80096c4:	08011c2c 	.word	0x08011c2c
 80096c8:	08011c3c 	.word	0x08011c3c
 80096cc:	20000798 	.word	0x20000798
 80096d0:	ff800000 	.word	0xff800000

080096d4 <acc_sensor_manager_hibernate_enter>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4603      	mov	r3, r0
 80096d8:	3004      	adds	r0, #4
 80096da:	699d      	ldr	r5, [r3, #24]
 80096dc:	f000 fd9a 	bl	800a214 <acc_sweep_manager_wait_for_hibernate_ready>
 80096e0:	4604      	mov	r4, r0
 80096e2:	b930      	cbnz	r0, 80096f2 <acc_sensor_manager_hibernate_enter+0x1e>
 80096e4:	4b05      	ldr	r3, [pc, #20]	; (80096fc <acc_sensor_manager_hibernate_enter+0x28>)
 80096e6:	4a06      	ldr	r2, [pc, #24]	; (8009700 <acc_sensor_manager_hibernate_enter+0x2c>)
 80096e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ea:	4906      	ldr	r1, [pc, #24]	; (8009704 <acc_sensor_manager_hibernate_enter+0x30>)
 80096ec:	4798      	blx	r3
 80096ee:	4620      	mov	r0, r4
 80096f0:	bd38      	pop	{r3, r4, r5, pc}
 80096f2:	4628      	mov	r0, r5
 80096f4:	f7fe f8e0 	bl	80078b8 <acc_rss_integration_sensor_device_hibernate_enter>
 80096f8:	4620      	mov	r0, r4
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	200007b0 	.word	0x200007b0
 8009700:	08011c60 	.word	0x08011c60
 8009704:	08011c2c 	.word	0x08011c2c

08009708 <acc_sensor_manager_activate>:
 8009708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970c:	4e18      	ldr	r6, [pc, #96]	; (8009770 <acc_sensor_manager_activate+0x68>)
 800970e:	7834      	ldrb	r4, [r6, #0]
 8009710:	b114      	cbz	r4, 8009718 <acc_sensor_manager_activate+0x10>
 8009712:	4620      	mov	r0, r4
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	f7fe f8b0 	bl	800787c <acc_rss_integration_get_sensor_count>
 800971c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8009720:	4914      	ldr	r1, [pc, #80]	; (8009774 <acc_sensor_manager_activate+0x6c>)
 8009722:	4f15      	ldr	r7, [pc, #84]	; (8009778 <acc_sensor_manager_activate+0x70>)
 8009724:	00c0      	lsls	r0, r0, #3
 8009726:	f240 1253 	movw	r2, #339	; 0x153
 800972a:	f7fe f909 	bl	8007940 <acc_rss_integration_mem_alloc_debug>
 800972e:	6038      	str	r0, [r7, #0]
 8009730:	2800      	cmp	r0, #0
 8009732:	d0ee      	beq.n	8009712 <acc_sensor_manager_activate+0xa>
 8009734:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800977c <acc_sensor_manager_activate+0x74>
 8009738:	4625      	mov	r5, r4
 800973a:	e00e      	b.n	800975a <acc_sensor_manager_activate+0x52>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009742:	4618      	mov	r0, r3
 8009744:	2248      	movs	r2, #72	; 0x48
 8009746:	2100      	movs	r1, #0
 8009748:	f002 fdb0 	bl	800c2ac <memset>
 800974c:	3401      	adds	r4, #1
 800974e:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8009752:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8009756:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 800975a:	f7fe f88f 	bl	800787c <acc_rss_integration_get_sensor_count>
 800975e:	42a0      	cmp	r0, r4
 8009760:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8009764:	d8ea      	bhi.n	800973c <acc_sensor_manager_activate+0x34>
 8009766:	2401      	movs	r4, #1
 8009768:	7034      	strb	r4, [r6, #0]
 800976a:	4620      	mov	r0, r4
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009770:	20000790 	.word	0x20000790
 8009774:	08011c2c 	.word	0x08011c2c
 8009778:	20000798 	.word	0x20000798
 800977c:	ff800000 	.word	0xff800000

08009780 <acc_sensor_manager_deactivate>:
 8009780:	b510      	push	{r4, lr}
 8009782:	4c05      	ldr	r4, [pc, #20]	; (8009798 <acc_sensor_manager_deactivate+0x18>)
 8009784:	7823      	ldrb	r3, [r4, #0]
 8009786:	b903      	cbnz	r3, 800978a <acc_sensor_manager_deactivate+0xa>
 8009788:	bd10      	pop	{r4, pc}
 800978a:	4b04      	ldr	r3, [pc, #16]	; (800979c <acc_sensor_manager_deactivate+0x1c>)
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	f7fe f91b 	bl	80079c8 <acc_rss_integration_mem_free>
 8009792:	2300      	movs	r3, #0
 8009794:	7023      	strb	r3, [r4, #0]
 8009796:	bd10      	pop	{r4, pc}
 8009798:	20000790 	.word	0x20000790
 800979c:	20000798 	.word	0x20000798

080097a0 <acc_sensor_manager_acquire_adc_data>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	7846      	ldrb	r6, [r0, #1]
 80097a6:	461c      	mov	r4, r3
 80097a8:	b13e      	cbz	r6, 80097ba <acc_sensor_manager_acquire_adc_data+0x1a>
 80097aa:	2300      	movs	r3, #0
 80097ac:	7023      	strb	r3, [r4, #0]
 80097ae:	7063      	strb	r3, [r4, #1]
 80097b0:	70a3      	strb	r3, [r4, #2]
 80097b2:	70e3      	strb	r3, [r4, #3]
 80097b4:	4630      	mov	r0, r6
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80098b8 <acc_sensor_manager_acquire_adc_data+0x118>
 80097be:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80097c2:	f8dc c000 	ldr.w	ip, [ip]
 80097c6:	4605      	mov	r5, r0
 80097c8:	4688      	mov	r8, r1
 80097ca:	4617      	mov	r7, r2
 80097cc:	f1bc 0f00 	cmp.w	ip, #0
 80097d0:	d014      	beq.n	80097fc <acc_sensor_manager_acquire_adc_data+0x5c>
 80097d2:	f8dc a00c 	ldr.w	sl, [ip, #12]
 80097d6:	f1ba 0f00 	cmp.w	sl, #0
 80097da:	d00f      	beq.n	80097fc <acc_sensor_manager_acquire_adc_data+0x5c>
 80097dc:	47d0      	blx	sl
 80097de:	2800      	cmp	r0, #0
 80097e0:	d0e8      	beq.n	80097b4 <acc_sensor_manager_acquire_adc_data+0x14>
 80097e2:	786e      	ldrb	r6, [r5, #1]
 80097e4:	2e00      	cmp	r6, #0
 80097e6:	d1e5      	bne.n	80097b4 <acc_sensor_manager_acquire_adc_data+0x14>
 80097e8:	463b      	mov	r3, r7
 80097ea:	4642      	mov	r2, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	2002      	movs	r0, #2
 80097f0:	2601      	movs	r6, #1
 80097f2:	f7fe f901 	bl	80079f8 <acc_probes_execute_uint16>
 80097f6:	4630      	mov	r0, r6
 80097f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fc:	2300      	movs	r3, #0
 80097fe:	7023      	strb	r3, [r4, #0]
 8009800:	7063      	strb	r3, [r4, #1]
 8009802:	70a3      	strb	r3, [r4, #2]
 8009804:	70e3      	strb	r3, [r4, #3]
 8009806:	f895 a000 	ldrb.w	sl, [r5]
 800980a:	f1ba 0f02 	cmp.w	sl, #2
 800980e:	d031      	beq.n	8009874 <acc_sensor_manager_acquire_adc_data+0xd4>
 8009810:	f1ba 0f01 	cmp.w	sl, #1
 8009814:	d034      	beq.n	8009880 <acc_sensor_manager_acquire_adc_data+0xe0>
 8009816:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8009818:	1d28      	adds	r0, r5, #4
 800981a:	f000 fd03 	bl	800a224 <acc_sweep_manager_acquire_adc_data>
 800981e:	6843      	ldr	r3, [r0, #4]
 8009820:	b30b      	cbz	r3, 8009866 <acc_sensor_manager_acquire_adc_data+0xc6>
 8009822:	4543      	cmp	r3, r8
 8009824:	d13b      	bne.n	800989e <acc_sensor_manager_acquire_adc_data+0xfe>
 8009826:	8843      	ldrh	r3, [r0, #2]
 8009828:	42bb      	cmp	r3, r7
 800982a:	d133      	bne.n	8009894 <acc_sensor_manager_acquire_adc_data+0xf4>
 800982c:	4b1e      	ldr	r3, [pc, #120]	; (80098a8 <acc_sensor_manager_acquire_adc_data+0x108>)
 800982e:	68c1      	ldr	r1, [r0, #12]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	7a06      	ldrb	r6, [r0, #8]
 8009834:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8009838:	00db      	lsls	r3, r3, #3
 800983a:	3b48      	subs	r3, #72	; 0x48
 800983c:	4413      	add	r3, r2
 800983e:	7802      	ldrb	r2, [r0, #0]
 8009840:	7022      	strb	r2, [r4, #0]
 8009842:	7842      	ldrb	r2, [r0, #1]
 8009844:	7062      	strb	r2, [r4, #1]
 8009846:	f1ba 0f02 	cmp.w	sl, #2
 800984a:	7a42      	ldrb	r2, [r0, #9]
 800984c:	70e2      	strb	r2, [r4, #3]
 800984e:	70a6      	strb	r6, [r4, #2]
 8009850:	6459      	str	r1, [r3, #68]	; 0x44
 8009852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009856:	d017      	beq.n	8009888 <acc_sensor_manager_acquire_adc_data+0xe8>
 8009858:	f1ba 0f01 	cmp.w	sl, #1
 800985c:	d1c1      	bne.n	80097e2 <acc_sensor_manager_acquire_adc_data+0x42>
 800985e:	4628      	mov	r0, r5
 8009860:	f7ff ff38 	bl	80096d4 <acc_sensor_manager_hibernate_enter>
 8009864:	e7bd      	b.n	80097e2 <acc_sensor_manager_acquire_adc_data+0x42>
 8009866:	4911      	ldr	r1, [pc, #68]	; (80098ac <acc_sensor_manager_acquire_adc_data+0x10c>)
 8009868:	4a11      	ldr	r2, [pc, #68]	; (80098b0 <acc_sensor_manager_acquire_adc_data+0x110>)
 800986a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800986c:	4911      	ldr	r1, [pc, #68]	; (80098b4 <acc_sensor_manager_acquire_adc_data+0x114>)
 800986e:	4618      	mov	r0, r3
 8009870:	47a0      	blx	r4
 8009872:	e79f      	b.n	80097b4 <acc_sensor_manager_acquire_adc_data+0x14>
 8009874:	4628      	mov	r0, r5
 8009876:	f7ff fea1 	bl	80095bc <acc_sensor_manager_power_on_and_start_sensor>
 800987a:	2800      	cmp	r0, #0
 800987c:	d1cb      	bne.n	8009816 <acc_sensor_manager_acquire_adc_data+0x76>
 800987e:	e799      	b.n	80097b4 <acc_sensor_manager_acquire_adc_data+0x14>
 8009880:	4648      	mov	r0, r9
 8009882:	f7fe f821 	bl	80078c8 <acc_rss_integration_sensor_device_hibernate_exit>
 8009886:	e7c6      	b.n	8009816 <acc_sensor_manager_acquire_adc_data+0x76>
 8009888:	4648      	mov	r0, r9
 800988a:	f7fe f80f 	bl	80078ac <acc_rss_integration_sensor_device_power_off>
 800988e:	2300      	movs	r3, #0
 8009890:	70eb      	strb	r3, [r5, #3]
 8009892:	e7a6      	b.n	80097e2 <acc_sensor_manager_acquire_adc_data+0x42>
 8009894:	4807      	ldr	r0, [pc, #28]	; (80098b4 <acc_sensor_manager_acquire_adc_data+0x114>)
 8009896:	f240 11c9 	movw	r1, #457	; 0x1c9
 800989a:	f7fd ff8f 	bl	80077bc <acc_assert_fail>
 800989e:	4805      	ldr	r0, [pc, #20]	; (80098b4 <acc_sensor_manager_acquire_adc_data+0x114>)
 80098a0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80098a4:	f7fd ff8a 	bl	80077bc <acc_assert_fail>
 80098a8:	20000798 	.word	0x20000798
 80098ac:	200007b0 	.word	0x200007b0
 80098b0:	08011c80 	.word	0x08011c80
 80098b4:	08011c2c 	.word	0x08011c2c
 80098b8:	20000794 	.word	0x20000794

080098bc <acc_sensor_manager_prepare_radar_engine>:
 80098bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c0:	f100 0804 	add.w	r8, r0, #4
 80098c4:	4617      	mov	r7, r2
 80098c6:	4605      	mov	r5, r0
 80098c8:	2234      	movs	r2, #52	; 0x34
 80098ca:	460c      	mov	r4, r1
 80098cc:	4640      	mov	r0, r8
 80098ce:	2100      	movs	r1, #0
 80098d0:	461e      	mov	r6, r3
 80098d2:	f002 fceb 	bl	800c2ac <memset>
 80098d6:	4b1e      	ldr	r3, [pc, #120]	; (8009950 <acc_sensor_manager_prepare_radar_engine+0x94>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	463a      	mov	r2, r7
 80098dc:	4640      	mov	r0, r8
 80098de:	b33b      	cbz	r3, 8009930 <acc_sensor_manager_prepare_radar_engine+0x74>
 80098e0:	f8d3 9000 	ldr.w	r9, [r3]
 80098e4:	f1b9 0f00 	cmp.w	r9, #0
 80098e8:	d022      	beq.n	8009930 <acc_sensor_manager_prepare_radar_engine+0x74>
 80098ea:	4633      	mov	r3, r6
 80098ec:	4621      	mov	r1, r4
 80098ee:	47c8      	blx	r9
 80098f0:	4607      	mov	r7, r0
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7fe f968 	bl	8007bc8 <acc_base_configuration_power_save_mode_get>
 80098f8:	b320      	cbz	r0, 8009944 <acc_sensor_manager_prepare_radar_engine+0x88>
 80098fa:	2804      	cmp	r0, #4
 80098fc:	d025      	beq.n	800994a <acc_sensor_manager_prepare_radar_engine+0x8e>
 80098fe:	2300      	movs	r3, #0
 8009900:	702b      	strb	r3, [r5, #0]
 8009902:	4620      	mov	r0, r4
 8009904:	f7fe f9e2 	bl	8007ccc <acc_base_configuration_repetition_mode_get>
 8009908:	fab0 f280 	clz	r2, r0
 800990c:	0952      	lsrs	r2, r2, #5
 800990e:	706a      	strb	r2, [r5, #1]
 8009910:	4620      	mov	r0, r4
 8009912:	f7fe fb33 	bl	8007f7c <acc_base_configuration_asynchronous_measurement_get>
 8009916:	70a8      	strb	r0, [r5, #2]
 8009918:	4620      	mov	r0, r4
 800991a:	f7fe f8ef 	bl	8007afc <acc_base_configuration_sensor_get>
 800991e:	4632      	mov	r2, r6
 8009920:	4601      	mov	r1, r0
 8009922:	231a      	movs	r3, #26
 8009924:	2005      	movs	r0, #5
 8009926:	f7fe f87f 	bl	8007a28 <acc_probes_execute_struct>
 800992a:	4638      	mov	r0, r7
 800992c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009930:	4633      	mov	r3, r6
 8009932:	4621      	mov	r1, r4
 8009934:	f000 fb90 	bl	800a058 <acc_sweep_manager_prepare>
 8009938:	4607      	mov	r7, r0
 800993a:	4620      	mov	r0, r4
 800993c:	f7fe f944 	bl	8007bc8 <acc_base_configuration_power_save_mode_get>
 8009940:	2800      	cmp	r0, #0
 8009942:	d1da      	bne.n	80098fa <acc_sensor_manager_prepare_radar_engine+0x3e>
 8009944:	2302      	movs	r3, #2
 8009946:	702b      	strb	r3, [r5, #0]
 8009948:	e7db      	b.n	8009902 <acc_sensor_manager_prepare_radar_engine+0x46>
 800994a:	2301      	movs	r3, #1
 800994c:	702b      	strb	r3, [r5, #0]
 800994e:	e7d8      	b.n	8009902 <acc_sensor_manager_prepare_radar_engine+0x46>
 8009950:	20000794 	.word	0x20000794

08009954 <acc_sensor_manager_prepare_measurement>:
 8009954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009958:	4680      	mov	r8, r0
 800995a:	b083      	sub	sp, #12
 800995c:	4608      	mov	r0, r1
 800995e:	460e      	mov	r6, r1
 8009960:	4617      	mov	r7, r2
 8009962:	469a      	mov	sl, r3
 8009964:	f7fe f8ca 	bl	8007afc <acc_base_configuration_sensor_get>
 8009968:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009a50 <acc_sensor_manager_prepare_measurement+0xfc>
 800996c:	4605      	mov	r5, r0
 800996e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 8009972:	4630      	mov	r0, r6
 8009974:	f7fe faf6 	bl	8007f64 <acc_base_configuration_noise_deviation_override_get>
 8009978:	00e4      	lsls	r4, r4, #3
 800997a:	f8d9 1000 	ldr.w	r1, [r9]
 800997e:	4b32      	ldr	r3, [pc, #200]	; (8009a48 <acc_sensor_manager_prepare_measurement+0xf4>)
 8009980:	4a32      	ldr	r2, [pc, #200]	; (8009a4c <acc_sensor_manager_prepare_measurement+0xf8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3c48      	subs	r4, #72	; 0x48
 8009986:	440c      	add	r4, r1
 8009988:	2100      	movs	r1, #0
 800998a:	4683      	mov	fp, r0
 800998c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009990:	6462      	str	r2, [r4, #68]	; 0x44
 8009992:	b163      	cbz	r3, 80099ae <acc_sensor_manager_prepare_measurement+0x5a>
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	b153      	cbz	r3, 80099ae <acc_sensor_manager_prepare_measurement+0x5a>
 8009998:	4652      	mov	r2, sl
 800999a:	4630      	mov	r0, r6
 800999c:	4639      	mov	r1, r7
 800999e:	4798      	blx	r3
 80099a0:	4604      	mov	r4, r0
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d14b      	bne.n	8009a3e <acc_sensor_manager_prepare_measurement+0xea>
 80099a6:	4620      	mov	r0, r4
 80099a8:	b003      	add	sp, #12
 80099aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80099b2:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 80099b6:	b17b      	cbz	r3, 80099d8 <acc_sensor_manager_prepare_measurement+0x84>
 80099b8:	f1bb 0f00 	cmp.w	fp, #0
 80099bc:	d01b      	beq.n	80099f6 <acc_sensor_manager_prepare_measurement+0xa2>
 80099be:	f8a7 b014 	strh.w	fp, [r7, #20]
 80099c2:	463a      	mov	r2, r7
 80099c4:	4629      	mov	r1, r5
 80099c6:	2320      	movs	r3, #32
 80099c8:	200e      	movs	r0, #14
 80099ca:	f7fe f82d 	bl	8007a28 <acc_probes_execute_struct>
 80099ce:	2401      	movs	r4, #1
 80099d0:	4620      	mov	r0, r4
 80099d2:	b003      	add	sp, #12
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	f108 0104 	add.w	r1, r8, #4
 80099dc:	4652      	mov	r2, sl
 80099de:	4628      	mov	r0, r5
 80099e0:	9101      	str	r1, [sp, #4]
 80099e2:	f7ff fe09 	bl	80095f8 <calibrate_sensor>
 80099e6:	9901      	ldr	r1, [sp, #4]
 80099e8:	4604      	mov	r4, r0
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d1e4      	bne.n	80099b8 <acc_sensor_manager_prepare_measurement+0x64>
 80099ee:	4608      	mov	r0, r1
 80099f0:	f000 fbcc 	bl	800a18c <acc_sweep_manager_release>
 80099f4:	e7d7      	b.n	80099a6 <acc_sensor_manager_prepare_measurement+0x52>
 80099f6:	4630      	mov	r0, r6
 80099f8:	f7fe fa9c 	bl	8007f34 <acc_base_configuration_noise_level_normalization_get>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d0e0      	beq.n	80099c2 <acc_sensor_manager_prepare_measurement+0x6e>
 8009a00:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7fd ff4b 	bl	80078a0 <acc_rss_integration_sensor_device_power_on>
 8009a0a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8009a0e:	f8d9 1000 	ldr.w	r1, [r9]
 8009a12:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	3b48      	subs	r3, #72	; 0x48
 8009a1a:	f108 0804 	add.w	r8, r8, #4
 8009a1e:	4419      	add	r1, r3
 8009a20:	4640      	mov	r0, r8
 8009a22:	f107 0314 	add.w	r3, r7, #20
 8009a26:	f000 fbc7 	bl	800a1b8 <acc_sweep_manager_measure_noise>
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7fd ff3d 	bl	80078ac <acc_rss_integration_sensor_device_power_off>
 8009a32:	2c00      	cmp	r4, #0
 8009a34:	d1c5      	bne.n	80099c2 <acc_sensor_manager_prepare_measurement+0x6e>
 8009a36:	4640      	mov	r0, r8
 8009a38:	f000 fba8 	bl	800a18c <acc_sweep_manager_release>
 8009a3c:	e7b3      	b.n	80099a6 <acc_sensor_manager_prepare_measurement+0x52>
 8009a3e:	f1bb 0f00 	cmp.w	fp, #0
 8009a42:	d0be      	beq.n	80099c2 <acc_sensor_manager_prepare_measurement+0x6e>
 8009a44:	e7bb      	b.n	80099be <acc_sensor_manager_prepare_measurement+0x6a>
 8009a46:	bf00      	nop
 8009a48:	20000794 	.word	0x20000794
 8009a4c:	ff800000 	.word	0xff800000
 8009a50:	20000798 	.word	0x20000798

08009a54 <acc_sensor_manager_start_measurement>:
 8009a54:	4b1b      	ldr	r3, [pc, #108]	; (8009ac4 <acc_sensor_manager_start_measurement+0x70>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	b123      	cbz	r3, 8009a68 <acc_sensor_manager_start_measurement+0x14>
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	b113      	cbz	r3, 8009a68 <acc_sensor_manager_start_measurement+0x14>
 8009a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a66:	4718      	bx	r3
 8009a68:	7823      	ldrb	r3, [r4, #0]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d008      	beq.n	8009a80 <acc_sensor_manager_start_measurement+0x2c>
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff fda4 	bl	80095bc <acc_sensor_manager_power_on_and_start_sensor>
 8009a74:	b160      	cbz	r0, 8009a90 <acc_sensor_manager_start_measurement+0x3c>
 8009a76:	78a3      	ldrb	r3, [r4, #2]
 8009a78:	b12b      	cbz	r3, 8009a86 <acc_sensor_manager_start_measurement+0x32>
 8009a7a:	7823      	ldrb	r3, [r4, #0]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d010      	beq.n	8009aa2 <acc_sensor_manager_start_measurement+0x4e>
 8009a80:	2501      	movs	r5, #1
 8009a82:	4628      	mov	r0, r5
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
 8009a86:	1d25      	adds	r5, r4, #4
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f000 fbc7 	bl	800a21c <acc_sweep_manager_measure>
 8009a8e:	b910      	cbnz	r0, 8009a96 <acc_sensor_manager_start_measurement+0x42>
 8009a90:	2500      	movs	r5, #0
 8009a92:	4628      	mov	r0, r5
 8009a94:	bd70      	pop	{r4, r5, r6, pc}
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 fbb6 	bl	800a208 <acc_sweep_manager_wait_for_data>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d1ec      	bne.n	8009a7a <acc_sensor_manager_start_measurement+0x26>
 8009aa0:	e7f6      	b.n	8009a90 <acc_sensor_manager_start_measurement+0x3c>
 8009aa2:	1d25      	adds	r5, r4, #4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 fbaf 	bl	800a208 <acc_sweep_manager_wait_for_data>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d0f0      	beq.n	8009a90 <acc_sensor_manager_start_measurement+0x3c>
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 fbb4 	bl	800a21c <acc_sweep_manager_measure>
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d0ea      	beq.n	8009a90 <acc_sensor_manager_start_measurement+0x3c>
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7ff fe0a 	bl	80096d4 <acc_sensor_manager_hibernate_enter>
 8009ac0:	e7df      	b.n	8009a82 <acc_sensor_manager_start_measurement+0x2e>
 8009ac2:	bf00      	nop
 8009ac4:	20000794 	.word	0x20000794

08009ac8 <acc_sensor_manager_stop_measurement>:
 8009ac8:	78c3      	ldrb	r3, [r0, #3]
 8009aca:	b903      	cbnz	r3, 8009ace <acc_sensor_manager_stop_measurement+0x6>
 8009acc:	4770      	bx	lr
 8009ace:	b510      	push	{r4, lr}
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	6980      	ldr	r0, [r0, #24]
 8009ad4:	f7fd feea 	bl	80078ac <acc_rss_integration_sensor_device_power_off>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	70e3      	strb	r3, [r4, #3]
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	bf00      	nop

08009ae0 <acc_sensor_manager_release_measurement>:
 8009ae0:	6983      	ldr	r3, [r0, #24]
 8009ae2:	b173      	cbz	r3, 8009b02 <acc_sensor_manager_release_measurement+0x22>
 8009ae4:	4a07      	ldr	r2, [pc, #28]	; (8009b04 <acc_sensor_manager_release_measurement+0x24>)
 8009ae6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009aea:	6812      	ldr	r2, [r2, #0]
 8009aec:	00db      	lsls	r3, r3, #3
 8009aee:	3b48      	subs	r3, #72	; 0x48
 8009af0:	4413      	add	r3, r2
 8009af2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009af6:	b90a      	cbnz	r2, 8009afc <acc_sensor_manager_release_measurement+0x1c>
 8009af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009afc:	3004      	adds	r0, #4
 8009afe:	f000 bb45 	b.w	800a18c <acc_sweep_manager_release>
 8009b02:	4770      	bx	lr
 8009b04:	20000798 	.word	0x20000798

08009b08 <acc_sensor_manager_get_sensor_id>:
 8009b08:	6980      	ldr	r0, [r0, #24]
 8009b0a:	4770      	bx	lr

08009b0c <acc_sensor_protocol_r2_prepare_load>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	4604      	mov	r4, r0
 8009b12:	4608      	mov	r0, r1
 8009b14:	4611      	mov	r1, r2
 8009b16:	461a      	mov	r2, r3
 8009b18:	9b08      	ldr	r3, [sp, #32]
 8009b1a:	f7ff fcef 	bl	80094fc <acc_sensor_r2_prepare_load_confmem>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	4620      	mov	r0, r4
 8009b22:	f10d 020e 	add.w	r2, sp, #14
 8009b26:	212a      	movs	r1, #42	; 0x2a
 8009b28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b2c:	f000 fc88 	bl	800a440 <acc_sensor_reg_read>
 8009b30:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009b34:	065b      	lsls	r3, r3, #25
 8009b36:	d436      	bmi.n	8009ba6 <acc_sensor_protocol_r2_prepare_load+0x9a>
 8009b38:	f10d 020e 	add.w	r2, sp, #14
 8009b3c:	2500      	movs	r5, #0
 8009b3e:	2111      	movs	r1, #17
 8009b40:	4620      	mov	r0, r4
 8009b42:	f8ad 500e 	strh.w	r5, [sp, #14]
 8009b46:	f000 fc7b 	bl	800a440 <acc_sensor_reg_read>
 8009b4a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009b4e:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 8009b52:	d00c      	beq.n	8009b6e <acc_sensor_protocol_r2_prepare_load+0x62>
 8009b54:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8009b56:	4a1c      	ldr	r2, [pc, #112]	; (8009bc8 <acc_sensor_protocol_r2_prepare_load+0xbc>)
 8009b58:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009b5a:	491c      	ldr	r1, [pc, #112]	; (8009bcc <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47b0      	blx	r6
 8009b62:	4620      	mov	r0, r4
 8009b64:	f001 fcaa 	bl	800b4bc <acc_sensor_diagnostics_r2_sensor_status>
 8009b68:	4628      	mov	r0, r5
 8009b6a:	b004      	add	sp, #16
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
 8009b6e:	2501      	movs	r5, #1
 8009b70:	4629      	mov	r1, r5
 8009b72:	4620      	mov	r0, r4
 8009b74:	9500      	str	r5, [sp, #0]
 8009b76:	2380      	movs	r3, #128	; 0x80
 8009b78:	2202      	movs	r2, #2
 8009b7a:	f000 fc87 	bl	800a48c <acc_sensor_reg_field_write>
 8009b7e:	2380      	movs	r3, #128	; 0x80
 8009b80:	461a      	mov	r2, r3
 8009b82:	4620      	mov	r0, r4
 8009b84:	9600      	str	r6, [sp, #0]
 8009b86:	2107      	movs	r1, #7
 8009b88:	f000 fc80 	bl	800a48c <acc_sensor_reg_field_write>
 8009b8c:	462a      	mov	r2, r5
 8009b8e:	4620      	mov	r0, r4
 8009b90:	2105      	movs	r1, #5
 8009b92:	f000 fc6b 	bl	800a46c <acc_sensor_reg_write>
 8009b96:	4620      	mov	r0, r4
 8009b98:	2203      	movs	r2, #3
 8009b9a:	217a      	movs	r1, #122	; 0x7a
 8009b9c:	f000 fc66 	bl	800a46c <acc_sensor_reg_write>
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	b004      	add	sp, #16
 8009ba4:	bd70      	pop	{r4, r5, r6, pc}
 8009ba6:	f7fd ff21 	bl	80079ec <acc_rss_integration_log_level>
 8009baa:	b130      	cbz	r0, 8009bba <acc_sensor_protocol_r2_prepare_load+0xae>
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8009bae:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 8009bb0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009bb2:	4906      	ldr	r1, [pc, #24]	; (8009bcc <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8009bb4:	4623      	mov	r3, r4
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	47a8      	blx	r5
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f001 fc7e 	bl	800b4bc <acc_sensor_diagnostics_r2_sensor_status>
 8009bc0:	e7ba      	b.n	8009b38 <acc_sensor_protocol_r2_prepare_load+0x2c>
 8009bc2:	bf00      	nop
 8009bc4:	200007b0 	.word	0x200007b0
 8009bc8:	08011cd8 	.word	0x08011cd8
 8009bcc:	08011cc4 	.word	0x08011cc4
 8009bd0:	08011c98 	.word	0x08011c98

08009bd4 <acc_sensor_protocol_r2_run_program>:
 8009bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460e      	mov	r6, r1
 8009bdc:	f7fd ff06 	bl	80079ec <acc_rss_integration_log_level>
 8009be0:	2803      	cmp	r0, #3
 8009be2:	d907      	bls.n	8009bf4 <acc_sensor_protocol_r2_run_program+0x20>
 8009be4:	4b1e      	ldr	r3, [pc, #120]	; (8009c60 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009be6:	9600      	str	r6, [sp, #0]
 8009be8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009bea:	4a1e      	ldr	r2, [pc, #120]	; (8009c64 <acc_sensor_protocol_r2_run_program+0x90>)
 8009bec:	491e      	ldr	r1, [pc, #120]	; (8009c68 <acc_sensor_protocol_r2_run_program+0x94>)
 8009bee:	4623      	mov	r3, r4
 8009bf0:	2004      	movs	r0, #4
 8009bf2:	47a8      	blx	r5
 8009bf4:	f10d 020e 	add.w	r2, sp, #14
 8009bf8:	2700      	movs	r7, #0
 8009bfa:	2111      	movs	r1, #17
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f8ad 700e 	strh.w	r7, [sp, #14]
 8009c02:	f000 fc1d 	bl	800a440 <acc_sensor_reg_read>
 8009c06:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009c0a:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 8009c0e:	d11a      	bne.n	8009c46 <acc_sensor_protocol_r2_run_program+0x72>
 8009c10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009c14:	d309      	bcc.n	8009c2a <acc_sensor_protocol_r2_run_program+0x56>
 8009c16:	4b12      	ldr	r3, [pc, #72]	; (8009c60 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009c18:	4a14      	ldr	r2, [pc, #80]	; (8009c6c <acc_sensor_protocol_r2_run_program+0x98>)
 8009c1a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009c1c:	4912      	ldr	r1, [pc, #72]	; (8009c68 <acc_sensor_protocol_r2_run_program+0x94>)
 8009c1e:	4628      	mov	r0, r5
 8009c20:	4633      	mov	r3, r6
 8009c22:	47a0      	blx	r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	b005      	add	sp, #20
 8009c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	2110      	movs	r1, #16
 8009c30:	f000 fc1c 	bl	800a46c <acc_sensor_reg_write>
 8009c34:	4620      	mov	r0, r4
 8009c36:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 8009c3a:	2110      	movs	r1, #16
 8009c3c:	f000 fc16 	bl	800a46c <acc_sensor_reg_write>
 8009c40:	2001      	movs	r0, #1
 8009c42:	b005      	add	sp, #20
 8009c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c46:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009c48:	4a09      	ldr	r2, [pc, #36]	; (8009c70 <acc_sensor_protocol_r2_run_program+0x9c>)
 8009c4a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009c4c:	4906      	ldr	r1, [pc, #24]	; (8009c68 <acc_sensor_protocol_r2_run_program+0x94>)
 8009c4e:	4623      	mov	r3, r4
 8009c50:	4638      	mov	r0, r7
 8009c52:	47a8      	blx	r5
 8009c54:	4620      	mov	r0, r4
 8009c56:	f001 fc31 	bl	800b4bc <acc_sensor_diagnostics_r2_sensor_status>
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	b005      	add	sp, #20
 8009c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c60:	200007b0 	.word	0x200007b0
 8009c64:	08011d08 	.word	0x08011d08
 8009c68:	08011cc4 	.word	0x08011cc4
 8009c6c:	08011d5c 	.word	0x08011d5c
 8009c70:	08011d2c 	.word	0x08011d2c

08009c74 <acc_sensor_protocol_r2_is_sensor_running>:
 8009c74:	b500      	push	{lr}
 8009c76:	b083      	sub	sp, #12
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f10d 0206 	add.w	r2, sp, #6
 8009c7e:	2111      	movs	r1, #17
 8009c80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009c84:	f000 fbdc 	bl	800a440 <acc_sensor_reg_read>
 8009c88:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8009c8c:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8009c90:	b003      	add	sp, #12
 8009c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c96:	bf00      	nop

08009c98 <acc_sensor_protocol_r2_ack_event>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f10d 0206 	add.w	r2, sp, #6
 8009ca2:	2138      	movs	r1, #56	; 0x38
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009caa:	f000 fbc9 	bl	800a440 <acc_sensor_reg_read>
 8009cae:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8009cb2:	b114      	cbz	r4, 8009cba <acc_sensor_protocol_r2_ack_event+0x22>
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	b002      	add	sp, #8
 8009cb8:	bd70      	pop	{r4, r5, r6, pc}
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8009cbc:	4a06      	ldr	r2, [pc, #24]	; (8009cd8 <acc_sensor_protocol_r2_ack_event+0x40>)
 8009cbe:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009cc0:	4906      	ldr	r1, [pc, #24]	; (8009cdc <acc_sensor_protocol_r2_ack_event+0x44>)
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	47b0      	blx	r6
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f001 fbf7 	bl	800b4bc <acc_sensor_diagnostics_r2_sensor_status>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	b002      	add	sp, #8
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	200007b0 	.word	0x200007b0
 8009cd8:	08011d78 	.word	0x08011d78
 8009cdc:	08011cc4 	.word	0x08011cc4

08009ce0 <acc_sensor_protocol_r2_get_event>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	b301      	cbz	r1, 8009d2a <acc_sensor_protocol_r2_get_event+0x4a>
 8009ce8:	f10d 020e 	add.w	r2, sp, #14
 8009cec:	2128      	movs	r1, #40	; 0x28
 8009cee:	4605      	mov	r5, r0
 8009cf0:	f000 fba6 	bl	800a440 <acc_sensor_reg_read>
 8009cf4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009cf8:	8062      	strh	r2, [r4, #2]
 8009cfa:	b2d3      	uxtb	r3, r2
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	7023      	strb	r3, [r4, #0]
 8009d00:	d026      	beq.n	8009d50 <acc_sensor_protocol_r2_get_event+0x70>
 8009d02:	d80c      	bhi.n	8009d1e <acc_sensor_protocol_r2_get_event+0x3e>
 8009d04:	4b22      	ldr	r3, [pc, #136]	; (8009d90 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d06:	4a23      	ldr	r2, [pc, #140]	; (8009d94 <acc_sensor_protocol_r2_get_event+0xb4>)
 8009d08:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009d0a:	4923      	ldr	r1, [pc, #140]	; (8009d98 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	2000      	movs	r0, #0
 8009d10:	47a0      	blx	r4
 8009d12:	4628      	mov	r0, r5
 8009d14:	f001 fbd2 	bl	800b4bc <acc_sensor_diagnostics_r2_sensor_status>
 8009d18:	2000      	movs	r0, #0
 8009d1a:	b004      	add	sp, #16
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
 8009d1e:	1e9a      	subs	r2, r3, #2
 8009d20:	2a09      	cmp	r2, #9
 8009d22:	d80b      	bhi.n	8009d3c <acc_sensor_protocol_r2_get_event+0x5c>
 8009d24:	2001      	movs	r0, #1
 8009d26:	b004      	add	sp, #16
 8009d28:	bd70      	pop	{r4, r5, r6, pc}
 8009d2a:	4b19      	ldr	r3, [pc, #100]	; (8009d90 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d2c:	4a1b      	ldr	r2, [pc, #108]	; (8009d9c <acc_sensor_protocol_r2_get_event+0xbc>)
 8009d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d30:	4919      	ldr	r1, [pc, #100]	; (8009d98 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009d32:	4620      	mov	r0, r4
 8009d34:	4798      	blx	r3
 8009d36:	4620      	mov	r0, r4
 8009d38:	b004      	add	sp, #16
 8009d3a:	bd70      	pop	{r4, r5, r6, pc}
 8009d3c:	4a14      	ldr	r2, [pc, #80]	; (8009d90 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d3e:	9500      	str	r5, [sp, #0]
 8009d40:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009d42:	4915      	ldr	r1, [pc, #84]	; (8009d98 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009d44:	4a16      	ldr	r2, [pc, #88]	; (8009da0 <acc_sensor_protocol_r2_get_event+0xc0>)
 8009d46:	2000      	movs	r0, #0
 8009d48:	47b0      	blx	r6
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	7023      	strb	r3, [r4, #0]
 8009d4e:	e7e0      	b.n	8009d12 <acc_sensor_protocol_r2_get_event+0x32>
 8009d50:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 8009d54:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8009d58:	d203      	bcs.n	8009d62 <acc_sensor_protocol_r2_get_event+0x82>
 8009d5a:	4a12      	ldr	r2, [pc, #72]	; (8009da4 <acc_sensor_protocol_r2_get_event+0xc4>)
 8009d5c:	408b      	lsls	r3, r1
 8009d5e:	401a      	ands	r2, r3
 8009d60:	b96a      	cbnz	r2, 8009d7e <acc_sensor_protocol_r2_get_event+0x9e>
 8009d62:	4a0b      	ldr	r2, [pc, #44]	; (8009d90 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d64:	f242 1301 	movw	r3, #8449	; 0x2101
 8009d68:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009d6a:	8063      	strh	r3, [r4, #2]
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	4a0e      	ldr	r2, [pc, #56]	; (8009da8 <acc_sensor_protocol_r2_get_event+0xc8>)
 8009d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d74:	4a0d      	ldr	r2, [pc, #52]	; (8009dac <acc_sensor_protocol_r2_get_event+0xcc>)
 8009d76:	4908      	ldr	r1, [pc, #32]	; (8009d98 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009d78:	2000      	movs	r0, #0
 8009d7a:	47b0      	blx	r6
 8009d7c:	e7c9      	b.n	8009d12 <acc_sensor_protocol_r2_get_event+0x32>
 8009d7e:	1e4b      	subs	r3, r1, #1
 8009d80:	4a03      	ldr	r2, [pc, #12]	; (8009d90 <acc_sensor_protocol_r2_get_event+0xb0>)
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009d88:	d9f1      	bls.n	8009d6e <acc_sensor_protocol_r2_get_event+0x8e>
 8009d8a:	4b09      	ldr	r3, [pc, #36]	; (8009db0 <acc_sensor_protocol_r2_get_event+0xd0>)
 8009d8c:	e7f2      	b.n	8009d74 <acc_sensor_protocol_r2_get_event+0x94>
 8009d8e:	bf00      	nop
 8009d90:	200007b0 	.word	0x200007b0
 8009d94:	08011dd0 	.word	0x08011dd0
 8009d98:	08011cc4 	.word	0x08011cc4
 8009d9c:	08011dbc 	.word	0x08011dbc
 8009da0:	08011e14 	.word	0x08011e14
 8009da4:	00010016 	.word	0x00010016
 8009da8:	080120d0 	.word	0x080120d0
 8009dac:	08011df4 	.word	0x08011df4
 8009db0:	08011dac 	.word	0x08011dac

08009db4 <acc_sensor_protocol_r2_wait_for_event>:
 8009db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db8:	b087      	sub	sp, #28
 8009dba:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8009e70 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 8009dbe:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e84 <acc_sensor_protocol_r2_wait_for_event+0xd0>
 8009dc2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009e78 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 8009dc6:	9303      	str	r3, [sp, #12]
 8009dc8:	4604      	mov	r4, r0
 8009dca:	460e      	mov	r6, r1
 8009dcc:	4690      	mov	r8, r2
 8009dce:	2500      	movs	r5, #0
 8009dd0:	e018      	b.n	8009e04 <acc_sensor_protocol_r2_wait_for_event+0x50>
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009dd8:	f000 fb32 	bl	800a440 <acc_sensor_reg_read>
 8009ddc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8009de0:	065b      	lsls	r3, r3, #25
 8009de2:	d434      	bmi.n	8009e4e <acc_sensor_protocol_r2_wait_for_event+0x9a>
 8009de4:	f7fd fe02 	bl	80079ec <acc_rss_integration_log_level>
 8009de8:	4607      	mov	r7, r0
 8009dea:	4623      	mov	r3, r4
 8009dec:	4652      	mov	r2, sl
 8009dee:	4649      	mov	r1, r9
 8009df0:	2001      	movs	r0, #1
 8009df2:	b117      	cbz	r7, 8009dfa <acc_sensor_protocol_r2_wait_for_event+0x46>
 8009df4:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 8009df8:	47b8      	blx	r7
 8009dfa:	4545      	cmp	r5, r8
 8009dfc:	f105 0301 	add.w	r3, r5, #1
 8009e00:	d018      	beq.n	8009e34 <acc_sensor_protocol_r2_wait_for_event+0x80>
 8009e02:	461d      	mov	r5, r3
 8009e04:	4631      	mov	r1, r6
 8009e06:	4620      	mov	r0, r4
 8009e08:	f7fd fd6e 	bl	80078e8 <acc_rss_integration_wait_for_sensor_interrupt>
 8009e0c:	f10d 0216 	add.w	r2, sp, #22
 8009e10:	212a      	movs	r1, #42	; 0x2a
 8009e12:	2300      	movs	r3, #0
 8009e14:	4607      	mov	r7, r0
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d1db      	bne.n	8009dd2 <acc_sensor_protocol_r2_wait_for_event+0x1e>
 8009e1a:	4b15      	ldr	r3, [pc, #84]	; (8009e70 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009e1c:	4a15      	ldr	r2, [pc, #84]	; (8009e74 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 8009e1e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009e20:	4915      	ldr	r1, [pc, #84]	; (8009e78 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009e22:	4623      	mov	r3, r4
 8009e24:	47a8      	blx	r5
 8009e26:	4620      	mov	r0, r4
 8009e28:	f001 fb48 	bl	800b4bc <acc_sensor_diagnostics_r2_sensor_status>
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	b007      	add	sp, #28
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	4a0e      	ldr	r2, [pc, #56]	; (8009e70 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009e36:	9400      	str	r4, [sp, #0]
 8009e38:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009e3a:	490f      	ldr	r1, [pc, #60]	; (8009e78 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009e3c:	4a0f      	ldr	r2, [pc, #60]	; (8009e7c <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 8009e3e:	462b      	mov	r3, r5
 8009e40:	2000      	movs	r0, #0
 8009e42:	47a0      	blx	r4
 8009e44:	2700      	movs	r7, #0
 8009e46:	4638      	mov	r0, r7
 8009e48:	b007      	add	sp, #28
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	9903      	ldr	r1, [sp, #12]
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7ff ff45 	bl	8009ce0 <acc_sensor_protocol_r2_get_event>
 8009e56:	4607      	mov	r7, r0
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d1e7      	bne.n	8009e2c <acc_sensor_protocol_r2_wait_for_event+0x78>
 8009e5c:	4b04      	ldr	r3, [pc, #16]	; (8009e70 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009e5e:	4a08      	ldr	r2, [pc, #32]	; (8009e80 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 8009e60:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009e62:	4905      	ldr	r1, [pc, #20]	; (8009e78 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009e64:	4623      	mov	r3, r4
 8009e66:	47a8      	blx	r5
 8009e68:	4638      	mov	r0, r7
 8009e6a:	b007      	add	sp, #28
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	200007b0 	.word	0x200007b0
 8009e74:	08011e44 	.word	0x08011e44
 8009e78:	08011cc4 	.word	0x08011cc4
 8009e7c:	08011e90 	.word	0x08011e90
 8009e80:	08011ecc 	.word	0x08011ecc
 8009e84:	08011e6c 	.word	0x08011e6c

08009e88 <acc_sensor_protocol_r2_wait_for_specific_event>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	4616      	mov	r6, r2
 8009e8e:	461c      	mov	r4, r3
 8009e90:	2264      	movs	r2, #100	; 0x64
 8009e92:	ab03      	add	r3, sp, #12
 8009e94:	4605      	mov	r5, r0
 8009e96:	f7ff ff8d 	bl	8009db4 <acc_sensor_protocol_r2_wait_for_event>
 8009e9a:	b168      	cbz	r0, 8009eb8 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8009e9c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009ea0:	42b3      	cmp	r3, r6
 8009ea2:	d00b      	beq.n	8009ebc <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 8009ea4:	e9cd 3600 	strd	r3, r6, [sp]
 8009ea8:	4a08      	ldr	r2, [pc, #32]	; (8009ecc <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8009eaa:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8009eac:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009eae:	4909      	ldr	r1, [pc, #36]	; (8009ed4 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8009eb0:	4a09      	ldr	r2, [pc, #36]	; (8009ed8 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	47a0      	blx	r4
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	b004      	add	sp, #16
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	2c00      	cmp	r4, #0
 8009ebe:	d0fb      	beq.n	8009eb8 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f7ff fee9 	bl	8009c98 <acc_sensor_protocol_r2_ack_event>
 8009ec6:	b004      	add	sp, #16
 8009ec8:	bd70      	pop	{r4, r5, r6, pc}
 8009eca:	bf00      	nop
 8009ecc:	200007b0 	.word	0x200007b0
 8009ed0:	08012154 	.word	0x08012154
 8009ed4:	08011cc4 	.word	0x08011cc4
 8009ed8:	08011ef4 	.word	0x08011ef4

08009edc <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8009edc:	2301      	movs	r3, #1
 8009ede:	220b      	movs	r2, #11
 8009ee0:	f7ff bfd2 	b.w	8009e88 <acc_sensor_protocol_r2_wait_for_specific_event>

08009ee4 <acc_sensor_protocol_r2_wait_for_radar_data>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	4616      	mov	r6, r2
 8009eea:	ab03      	add	r3, sp, #12
 8009eec:	2264      	movs	r2, #100	; 0x64
 8009eee:	4605      	mov	r5, r0
 8009ef0:	f7ff ff60 	bl	8009db4 <acc_sensor_protocol_r2_wait_for_event>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	b180      	cbz	r0, 8009f1a <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8009ef8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009efc:	2b06      	cmp	r3, #6
 8009efe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009f02:	d10d      	bne.n	8009f20 <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8009f04:	0519      	lsls	r1, r3, #20
 8009f06:	d50b      	bpl.n	8009f20 <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8009f08:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 8009f0c:	d114      	bne.n	8009f38 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 8009f0e:	b106      	cbz	r6, 8009f12 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8009f10:	7032      	strb	r2, [r6, #0]
 8009f12:	05da      	lsls	r2, r3, #23
 8009f14:	d425      	bmi.n	8009f62 <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 8009f16:	059b      	lsls	r3, r3, #22
 8009f18:	d418      	bmi.n	8009f4c <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	b004      	add	sp, #16
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	4a16      	ldr	r2, [pc, #88]	; (8009f7c <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009f26:	4916      	ldr	r1, [pc, #88]	; (8009f80 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8009f28:	4a16      	ldr	r2, [pc, #88]	; (8009f84 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	47a0      	blx	r4
 8009f30:	2400      	movs	r4, #0
 8009f32:	4620      	mov	r0, r4
 8009f34:	b004      	add	sp, #16
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	4629      	mov	r1, r5
 8009f3a:	200f      	movs	r0, #15
 8009f3c:	f7fd fd8c 	bl	8007a58 <acc_probes_execute_primitive_probe>
 8009f40:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009f44:	4622      	mov	r2, r4
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	d1e2      	bne.n	8009f10 <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 8009f4a:	e7e2      	b.n	8009f12 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8009f4c:	f7fd fd4e 	bl	80079ec <acc_rss_integration_log_level>
 8009f50:	2803      	cmp	r0, #3
 8009f52:	d9e2      	bls.n	8009f1a <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8009f56:	4a0c      	ldr	r2, [pc, #48]	; (8009f88 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 8009f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5a:	4909      	ldr	r1, [pc, #36]	; (8009f80 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8009f5c:	2004      	movs	r0, #4
 8009f5e:	4798      	blx	r3
 8009f60:	e7db      	b.n	8009f1a <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8009f62:	f7fd fd43 	bl	80079ec <acc_rss_integration_log_level>
 8009f66:	2803      	cmp	r0, #3
 8009f68:	d905      	bls.n	8009f76 <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 8009f6a:	4b04      	ldr	r3, [pc, #16]	; (8009f7c <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8009f6c:	4a07      	ldr	r2, [pc, #28]	; (8009f8c <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 8009f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f70:	4903      	ldr	r1, [pc, #12]	; (8009f80 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8009f72:	2004      	movs	r0, #4
 8009f74:	4798      	blx	r3
 8009f76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009f7a:	e7cc      	b.n	8009f16 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 8009f7c:	200007b0 	.word	0x200007b0
 8009f80:	08011cc4 	.word	0x08011cc4
 8009f84:	08011f20 	.word	0x08011f20
 8009f88:	08011f6c 	.word	0x08011f6c
 8009f8c:	08011f50 	.word	0x08011f50

08009f90 <acc_sensor_protocol_r2_wait_for_sync_start>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	ab03      	add	r3, sp, #12
 8009f96:	2264      	movs	r2, #100	; 0x64
 8009f98:	4605      	mov	r5, r0
 8009f9a:	f7ff ff0b 	bl	8009db4 <acc_sensor_protocol_r2_wait_for_event>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	b178      	cbz	r0, 8009fc2 <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 8009fa2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009fa6:	2b06      	cmp	r3, #6
 8009fa8:	d008      	beq.n	8009fbc <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 8009faa:	4a0a      	ldr	r2, [pc, #40]	; (8009fd4 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009fb0:	4909      	ldr	r1, [pc, #36]	; (8009fd8 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8009fb2:	4a0a      	ldr	r2, [pc, #40]	; (8009fdc <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	47a0      	blx	r4
 8009fba:	2400      	movs	r4, #0
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	b004      	add	sp, #16
 8009fc0:	bd70      	pop	{r4, r5, r6, pc}
 8009fc2:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8009fc4:	4a06      	ldr	r2, [pc, #24]	; (8009fe0 <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 8009fc6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009fc8:	4903      	ldr	r1, [pc, #12]	; (8009fd8 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8009fca:	462b      	mov	r3, r5
 8009fcc:	47b0      	blx	r6
 8009fce:	4620      	mov	r0, r4
 8009fd0:	b004      	add	sp, #16
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	200007b0 	.word	0x200007b0
 8009fd8:	08011cc4 	.word	0x08011cc4
 8009fdc:	08011fb8 	.word	0x08011fb8
 8009fe0:	08011f84 	.word	0x08011f84

08009fe4 <acc_sensor_protocol_r2_transfer_data>:
 8009fe4:	b530      	push	{r4, r5, lr}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	4613      	mov	r3, r2
 8009fea:	9201      	str	r2, [sp, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	4605      	mov	r5, r0
 8009ff0:	f7ff fadc 	bl	80095ac <acc_sensor_r2_buffer_processed_read>
 8009ff4:	9b01      	ldr	r3, [sp, #4]
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f7fd fcfb 	bl	80079f8 <acc_probes_execute_uint16>
 800a002:	4620      	mov	r0, r4
 800a004:	b003      	add	sp, #12
 800a006:	bd30      	pop	{r4, r5, pc}

0800a008 <acc_sensor_protocol_r2_check_asic_id>:
 800a008:	b530      	push	{r4, r5, lr}
 800a00a:	2400      	movs	r4, #0
 800a00c:	b085      	sub	sp, #20
 800a00e:	f10d 020e 	add.w	r2, sp, #14
 800a012:	460d      	mov	r5, r1
 800a014:	4621      	mov	r1, r4
 800a016:	f8ad 400e 	strh.w	r4, [sp, #14]
 800a01a:	f000 fa11 	bl	800a440 <acc_sensor_reg_read>
 800a01e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a022:	f241 1312 	movw	r3, #4370	; 0x1112
 800a026:	429a      	cmp	r2, r3
 800a028:	d00a      	beq.n	800a040 <acc_sensor_protocol_r2_check_asic_id+0x38>
 800a02a:	b965      	cbnz	r5, 800a046 <acc_sensor_protocol_r2_check_asic_id+0x3e>
 800a02c:	4907      	ldr	r1, [pc, #28]	; (800a04c <acc_sensor_protocol_r2_check_asic_id+0x44>)
 800a02e:	9200      	str	r2, [sp, #0]
 800a030:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800a032:	4a07      	ldr	r2, [pc, #28]	; (800a050 <acc_sensor_protocol_r2_check_asic_id+0x48>)
 800a034:	4907      	ldr	r1, [pc, #28]	; (800a054 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 800a036:	4628      	mov	r0, r5
 800a038:	47a0      	blx	r4
 800a03a:	4628      	mov	r0, r5
 800a03c:	b005      	add	sp, #20
 800a03e:	bd30      	pop	{r4, r5, pc}
 800a040:	2001      	movs	r0, #1
 800a042:	b005      	add	sp, #20
 800a044:	bd30      	pop	{r4, r5, pc}
 800a046:	4620      	mov	r0, r4
 800a048:	b005      	add	sp, #20
 800a04a:	bd30      	pop	{r4, r5, pc}
 800a04c:	200007b0 	.word	0x200007b0
 800a050:	08011ff4 	.word	0x08011ff4
 800a054:	08011cc4 	.word	0x08011cc4

0800a058 <acc_sweep_manager_prepare>:
 800a058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a05c:	4680      	mov	r8, r0
 800a05e:	b095      	sub	sp, #84	; 0x54
 800a060:	4608      	mov	r0, r1
 800a062:	460c      	mov	r4, r1
 800a064:	4617      	mov	r7, r2
 800a066:	4699      	mov	r9, r3
 800a068:	f7fd fd48 	bl	8007afc <acc_base_configuration_sensor_get>
 800a06c:	4601      	mov	r1, r0
 800a06e:	4620      	mov	r0, r4
 800a070:	9101      	str	r1, [sp, #4]
 800a072:	f7fd fe7d 	bl	8007d70 <acc_base_configuration_wg_duration_get>
 800a076:	4603      	mov	r3, r0
 800a078:	4620      	mov	r0, r4
 800a07a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a07e:	f7fd fe5f 	bl	8007d40 <acc_base_configuration_integrator_get>
 800a082:	4603      	mov	r3, r0
 800a084:	4620      	mov	r0, r4
 800a086:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a08a:	f7fd fe89 	bl	8007da0 <acc_base_configuration_integrator_ramp_up_get>
 800a08e:	4603      	mov	r3, r0
 800a090:	4620      	mov	r0, r4
 800a092:	f8ad 3010 	strh.w	r3, [sp, #16]
 800a096:	f7fd fdc5 	bl	8007c24 <acc_base_configuration_decrease_tx_emission_get>
 800a09a:	4605      	mov	r5, r0
 800a09c:	2304      	movs	r3, #4
 800a09e:	9901      	ldr	r1, [sp, #4]
 800a0a0:	f8ad 5012 	strh.w	r5, [sp, #18]
 800a0a4:	aa03      	add	r2, sp, #12
 800a0a6:	2012      	movs	r0, #18
 800a0a8:	f108 0514 	add.w	r5, r8, #20
 800a0ac:	f7fd fca4 	bl	80079f8 <acc_probes_execute_uint16>
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f002 f8f9 	bl	800c2ac <memset>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	4628      	mov	r0, r5
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4798      	blx	r3
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d04e      	beq.n	800a166 <acc_sweep_manager_prepare+0x10e>
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	a80c      	add	r0, sp, #48	; 0x30
 800a0ce:	f002 f8ed 	bl	800c2ac <memset>
 800a0d2:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	6806      	ldr	r6, [r0, #0]
 800a0da:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800a0de:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800a0e2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800a0e6:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 800a0ea:	aa0c      	add	r2, sp, #48	; 0x30
 800a0ec:	ab05      	add	r3, sp, #20
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d039      	beq.n	800a16e <acc_sweep_manager_prepare+0x116>
 800a0fa:	b137      	cbz	r7, 800a10a <acc_sweep_manager_prepare+0xb2>
 800a0fc:	ad0c      	add	r5, sp, #48	; 0x30
 800a0fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a100:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a102:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a106:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800a10a:	f1b9 0f00 	cmp.w	r9, #0
 800a10e:	d011      	beq.n	800a134 <acc_sweep_manager_prepare+0xdc>
 800a110:	ad05      	add	r5, sp, #20
 800a112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a114:	f8c9 0000 	str.w	r0, [r9]
 800a118:	f8c9 1004 	str.w	r1, [r9, #4]
 800a11c:	cd03      	ldmia	r5!, {r0, r1}
 800a11e:	882d      	ldrh	r5, [r5, #0]
 800a120:	f8c9 2008 	str.w	r2, [r9, #8]
 800a124:	f8c9 300c 	str.w	r3, [r9, #12]
 800a128:	f8a9 5018 	strh.w	r5, [r9, #24]
 800a12c:	f8c9 0010 	str.w	r0, [r9, #16]
 800a130:	f8c9 1014 	str.w	r1, [r9, #20]
 800a134:	4620      	mov	r0, r4
 800a136:	f7fd fdc9 	bl	8007ccc <acc_base_configuration_repetition_mode_get>
 800a13a:	2801      	cmp	r0, #1
 800a13c:	d020      	beq.n	800a180 <acc_sweep_manager_prepare+0x128>
 800a13e:	4620      	mov	r0, r4
 800a140:	f7fd fdce 	bl	8007ce0 <acc_base_configuration_update_rate_get>
 800a144:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a188 <acc_sweep_manager_prepare+0x130>
 800a148:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a14c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a154:	ee17 3a90 	vmov	r3, s15
 800a158:	2200      	movs	r2, #0
 800a15a:	f8c8 3000 	str.w	r3, [r8]
 800a15e:	f8c8 2008 	str.w	r2, [r8, #8]
 800a162:	f8a8 2006 	strh.w	r2, [r8, #6]
 800a166:	4630      	mov	r0, r6
 800a168:	b015      	add	sp, #84	; 0x54
 800a16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a16e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800a172:	4628      	mov	r0, r5
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	4798      	blx	r3
 800a178:	4630      	mov	r0, r6
 800a17a:	b015      	add	sp, #84	; 0x54
 800a17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a180:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a184:	e7e8      	b.n	800a158 <acc_sweep_manager_prepare+0x100>
 800a186:	bf00      	nop
 800a188:	44fa0000 	.word	0x44fa0000

0800a18c <acc_sweep_manager_release>:
 800a18c:	b120      	cbz	r0, 800a198 <acc_sweep_manager_release+0xc>
 800a18e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a190:	b113      	cbz	r3, 800a198 <acc_sweep_manager_release+0xc>
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	3014      	adds	r0, #20
 800a196:	4718      	bx	r3
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop

0800a19c <acc_sweep_manager_is_sensor_connected>:
 800a19c:	3014      	adds	r0, #20
 800a19e:	f001 b8e7 	b.w	800b370 <acc_radar_engine_check_asic_id>
 800a1a2:	bf00      	nop

0800a1a4 <acc_sweep_manager_calibrate>:
 800a1a4:	b410      	push	{r4}
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	3014      	adds	r0, #20
 800a1aa:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800a1ac:	68a4      	ldr	r4, [r4, #8]
 800a1ae:	46a4      	mov	ip, r4
 800a1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b4:	4760      	bx	ip
 800a1b6:	bf00      	nop

0800a1b8 <acc_sweep_manager_measure_noise>:
 800a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1bc:	4604      	mov	r4, r0
 800a1be:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 800a1c2:	686f      	ldr	r7, [r5, #4]
 800a1c4:	461e      	mov	r6, r3
 800a1c6:	4615      	mov	r5, r2
 800a1c8:	47b8      	blx	r7
 800a1ca:	b140      	cbz	r0, 800a1de <acc_sweep_manager_measure_noise+0x26>
 800a1cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	f104 0014 	add.w	r0, r4, #20
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1dc:	4718      	bx	r3
 800a1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e2:	bf00      	nop

0800a1e4 <acc_sweep_manager_start>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	4615      	mov	r5, r2
 800a1f0:	4798      	blx	r3
 800a1f2:	b138      	cbz	r0, 800a204 <acc_sweep_manager_start+0x20>
 800a1f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	f104 0014 	add.w	r0, r4, #20
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a202:	4718      	bx	r3
 800a204:	bd70      	pop	{r4, r5, r6, pc}
 800a206:	bf00      	nop

0800a208 <acc_sweep_manager_wait_for_data>:
 800a208:	f850 1b14 	ldr.w	r1, [r0], #20
 800a20c:	2200      	movs	r2, #0
 800a20e:	f001 b8b3 	b.w	800b378 <acc_radar_engine_wait_for_radar_data>
 800a212:	bf00      	nop

0800a214 <acc_sweep_manager_wait_for_hibernate_ready>:
 800a214:	f850 1b14 	ldr.w	r1, [r0], #20
 800a218:	f001 b8b6 	b.w	800b388 <acc_radar_engine_wait_for_hibernate_ready>

0800a21c <acc_sweep_manager_measure>:
 800a21c:	3014      	adds	r0, #20
 800a21e:	f001 b8af 	b.w	800b380 <acc_radar_engine_measure>
 800a222:	bf00      	nop

0800a224 <acc_sweep_manager_acquire_adc_data>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	2300      	movs	r3, #0
 800a228:	b084      	sub	sp, #16
 800a22a:	4604      	mov	r4, r0
 800a22c:	6043      	str	r3, [r0, #4]
 800a22e:	6083      	str	r3, [r0, #8]
 800a230:	60c3      	str	r3, [r0, #12]
 800a232:	6103      	str	r3, [r0, #16]
 800a234:	466a      	mov	r2, sp
 800a236:	3014      	adds	r0, #20
 800a238:	f001 f8aa 	bl	800b390 <acc_radar_engine_acquire_adc_data>
 800a23c:	9b02      	ldr	r3, [sp, #8]
 800a23e:	f8bd 6000 	ldrh.w	r6, [sp]
 800a242:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800a246:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800a24a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a24e:	60a0      	str	r0, [r4, #8]
 800a250:	1d20      	adds	r0, r4, #4
 800a252:	80e6      	strh	r6, [r4, #6]
 800a254:	80a5      	strh	r5, [r4, #4]
 800a256:	7321      	strb	r1, [r4, #12]
 800a258:	7362      	strb	r2, [r4, #13]
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	b004      	add	sp, #16
 800a25e:	bd70      	pop	{r4, r5, r6, pc}

0800a260 <acc_alg_cca_calculate>:
 800a260:	2901      	cmp	r1, #1
 800a262:	b538      	push	{r3, r4, r5, lr}
 800a264:	d922      	bls.n	800a2ac <acc_alg_cca_calculate+0x4c>
 800a266:	1e8d      	subs	r5, r1, #2
 800a268:	1c83      	adds	r3, r0, #2
 800a26a:	b2ad      	uxth	r5, r5
 800a26c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800a270:	2400      	movs	r4, #0
 800a272:	4602      	mov	r2, r0
 800a274:	3002      	adds	r0, #2
 800a276:	8853      	ldrh	r3, [r2, #2]
 800a278:	8812      	ldrh	r2, [r2, #0]
 800a27a:	1a9b      	subs	r3, r3, r2
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	bfb8      	it	lt
 800a280:	425b      	neglt	r3, r3
 800a282:	4285      	cmp	r5, r0
 800a284:	441c      	add	r4, r3
 800a286:	d1f4      	bne.n	800a272 <acc_alg_cca_calculate+0x12>
 800a288:	ee07 4a90 	vmov	s15, r4
 800a28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a290:	3901      	subs	r1, #1
 800a292:	ee07 1a10 	vmov	s14, r1
 800a296:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800a29a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a29e:	f004 fe77 	bl	800ef90 <log10f>
 800a2a2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800a2a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	eddf 7a01 	vldr	s15, [pc, #4]	; 800a2b4 <acc_alg_cca_calculate+0x54>
 800a2b0:	e7ee      	b.n	800a290 <acc_alg_cca_calculate+0x30>
 800a2b2:	bf00      	nop
 800a2b4:	00000000 	.word	0x00000000

0800a2b8 <acc_element_connect>:
 800a2b8:	6001      	str	r1, [r0, #0]
 800a2ba:	4770      	bx	lr

0800a2bc <event>:
 800a2bc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a2be:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a2c0:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 800a2c4:	6811      	ldr	r1, [r2, #0]
 800a2c6:	b570      	push	{r4, r5, r6, lr}
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 800a2ce:	4798      	blx	r3
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	7028      	strb	r0, [r5, #0]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	4710      	bx	r2
 800a2de:	bf00      	nop

0800a2e0 <reset>:
 800a2e0:	6800      	ldr	r0, [r0, #0]
 800a2e2:	68c3      	ldr	r3, [r0, #12]
 800a2e4:	4718      	bx	r3
 800a2e6:	bf00      	nop

0800a2e8 <validate>:
 800a2e8:	6983      	ldr	r3, [r0, #24]
 800a2ea:	b510      	push	{r4, lr}
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	b113      	cbz	r3, 800a2f6 <validate+0xe>
 800a2f0:	f7fd fb7c 	bl	80079ec <acc_rss_integration_log_level>
 800a2f4:	b978      	cbnz	r0, 800a316 <validate+0x2e>
 800a2f6:	69e3      	ldr	r3, [r4, #28]
 800a2f8:	b143      	cbz	r3, 800a30c <validate+0x24>
 800a2fa:	f7fd fb77 	bl	80079ec <acc_rss_integration_log_level>
 800a2fe:	b128      	cbz	r0, 800a30c <validate+0x24>
 800a300:	4b08      	ldr	r3, [pc, #32]	; (800a324 <validate+0x3c>)
 800a302:	4a09      	ldr	r2, [pc, #36]	; (800a328 <validate+0x40>)
 800a304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a306:	4909      	ldr	r1, [pc, #36]	; (800a32c <validate+0x44>)
 800a308:	2001      	movs	r0, #1
 800a30a:	4798      	blx	r3
 800a30c:	6820      	ldr	r0, [r4, #0]
 800a30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a312:	6883      	ldr	r3, [r0, #8]
 800a314:	4718      	bx	r3
 800a316:	4b03      	ldr	r3, [pc, #12]	; (800a324 <validate+0x3c>)
 800a318:	4a05      	ldr	r2, [pc, #20]	; (800a330 <validate+0x48>)
 800a31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31c:	4903      	ldr	r1, [pc, #12]	; (800a32c <validate+0x44>)
 800a31e:	2001      	movs	r0, #1
 800a320:	4798      	blx	r3
 800a322:	e7e8      	b.n	800a2f6 <validate+0xe>
 800a324:	200007b0 	.word	0x200007b0
 800a328:	080121b4 	.word	0x080121b4
 800a32c:	08012198 	.word	0x08012198
 800a330:	08012184 	.word	0x08012184

0800a334 <saturation_check_i16>:
 800a334:	f001 bb32 	b.w	800b99c <acc_alg_basic_saturation_check_i16>

0800a338 <saturation_check_u16>:
 800a338:	f001 bafc 	b.w	800b934 <acc_alg_basic_saturation_check_u16>

0800a33c <acc_element_saturation_check_init>:
 800a33c:	2903      	cmp	r1, #3
 800a33e:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 800a342:	d00e      	beq.n	800a362 <acc_element_saturation_check_init+0x26>
 800a344:	2905      	cmp	r1, #5
 800a346:	d016      	beq.n	800a376 <acc_element_saturation_check_init+0x3a>
 800a348:	2902      	cmp	r1, #2
 800a34a:	d014      	beq.n	800a376 <acc_element_saturation_check_init+0x3a>
 800a34c:	b510      	push	{r4, lr}
 800a34e:	4b0b      	ldr	r3, [pc, #44]	; (800a37c <acc_element_saturation_check_init+0x40>)
 800a350:	4a0b      	ldr	r2, [pc, #44]	; (800a380 <acc_element_saturation_check_init+0x44>)
 800a352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a354:	490b      	ldr	r1, [pc, #44]	; (800a384 <acc_element_saturation_check_init+0x48>)
 800a356:	2400      	movs	r4, #0
 800a358:	63c4      	str	r4, [r0, #60]	; 0x3c
 800a35a:	4620      	mov	r0, r4
 800a35c:	4798      	blx	r3
 800a35e:	4620      	mov	r0, r4
 800a360:	bd10      	pop	{r4, pc}
 800a362:	4b09      	ldr	r3, [pc, #36]	; (800a388 <acc_element_saturation_check_init+0x4c>)
 800a364:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a366:	4909      	ldr	r1, [pc, #36]	; (800a38c <acc_element_saturation_check_init+0x50>)
 800a368:	4a09      	ldr	r2, [pc, #36]	; (800a390 <acc_element_saturation_check_init+0x54>)
 800a36a:	4b0a      	ldr	r3, [pc, #40]	; (800a394 <acc_element_saturation_check_init+0x58>)
 800a36c:	60c3      	str	r3, [r0, #12]
 800a36e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a372:	2001      	movs	r0, #1
 800a374:	4770      	bx	lr
 800a376:	4b08      	ldr	r3, [pc, #32]	; (800a398 <acc_element_saturation_check_init+0x5c>)
 800a378:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a37a:	e7f4      	b.n	800a366 <acc_element_saturation_check_init+0x2a>
 800a37c:	200007b0 	.word	0x200007b0
 800a380:	080121c4 	.word	0x080121c4
 800a384:	08012198 	.word	0x08012198
 800a388:	0800a335 	.word	0x0800a335
 800a38c:	0800a2bd 	.word	0x0800a2bd
 800a390:	0800a2e9 	.word	0x0800a2e9
 800a394:	0800a2e1 	.word	0x0800a2e1
 800a398:	0800a339 	.word	0x0800a339

0800a39c <consume>:
 800a39c:	b510      	push	{r4, lr}
 800a39e:	4604      	mov	r4, r0
 800a3a0:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 800a3a4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a3a6:	6900      	ldr	r0, [r0, #16]
 800a3a8:	4798      	blx	r3
 800a3aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	611a      	str	r2, [r3, #16]
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	bf00      	nop

0800a3b4 <reset>:
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop

0800a3b8 <validate>:
 800a3b8:	6983      	ldr	r3, [r0, #24]
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	b113      	cbz	r3, 800a3c6 <validate+0xe>
 800a3c0:	f7fd fb14 	bl	80079ec <acc_rss_integration_log_level>
 800a3c4:	b9c8      	cbnz	r0, 800a3fa <validate+0x42>
 800a3c6:	69e3      	ldr	r3, [r4, #28]
 800a3c8:	b113      	cbz	r3, 800a3d0 <validate+0x18>
 800a3ca:	f7fd fb0f 	bl	80079ec <acc_rss_integration_log_level>
 800a3ce:	b948      	cbnz	r0, 800a3e4 <validate+0x2c>
 800a3d0:	6963      	ldr	r3, [r4, #20]
 800a3d2:	b183      	cbz	r3, 800a3f6 <validate+0x3e>
 800a3d4:	4b0c      	ldr	r3, [pc, #48]	; (800a408 <validate+0x50>)
 800a3d6:	4a0d      	ldr	r2, [pc, #52]	; (800a40c <validate+0x54>)
 800a3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3da:	490d      	ldr	r1, [pc, #52]	; (800a410 <validate+0x58>)
 800a3dc:	2000      	movs	r0, #0
 800a3de:	4798      	blx	r3
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	bd10      	pop	{r4, pc}
 800a3e4:	4b08      	ldr	r3, [pc, #32]	; (800a408 <validate+0x50>)
 800a3e6:	4a0b      	ldr	r2, [pc, #44]	; (800a414 <validate+0x5c>)
 800a3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ea:	4909      	ldr	r1, [pc, #36]	; (800a410 <validate+0x58>)
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	4798      	blx	r3
 800a3f0:	6963      	ldr	r3, [r4, #20]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1ee      	bne.n	800a3d4 <validate+0x1c>
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	bd10      	pop	{r4, pc}
 800a3fa:	4b03      	ldr	r3, [pc, #12]	; (800a408 <validate+0x50>)
 800a3fc:	4a06      	ldr	r2, [pc, #24]	; (800a418 <validate+0x60>)
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a400:	4903      	ldr	r1, [pc, #12]	; (800a410 <validate+0x58>)
 800a402:	2001      	movs	r0, #1
 800a404:	4798      	blx	r3
 800a406:	e7de      	b.n	800a3c6 <validate+0xe>
 800a408:	200007b0 	.word	0x200007b0
 800a40c:	080121f0 	.word	0x080121f0
 800a410:	080121d8 	.word	0x080121d8
 800a414:	080121b4 	.word	0x080121b4
 800a418:	08012184 	.word	0x08012184

0800a41c <acc_element_sink_callback_init>:
 800a41c:	b410      	push	{r4}
 800a41e:	4a05      	ldr	r2, [pc, #20]	; (800a434 <acc_element_sink_callback_init+0x18>)
 800a420:	4c05      	ldr	r4, [pc, #20]	; (800a438 <acc_element_sink_callback_init+0x1c>)
 800a422:	4b06      	ldr	r3, [pc, #24]	; (800a43c <acc_element_sink_callback_init+0x20>)
 800a424:	6401      	str	r1, [r0, #64]	; 0x40
 800a426:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800a42a:	60c3      	str	r3, [r0, #12]
 800a42c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	0800a3b9 	.word	0x0800a3b9
 800a438:	0800a39d 	.word	0x0800a39d
 800a43c:	0800a3b5 	.word	0x0800a3b5

0800a440 <acc_sensor_reg_read>:
 800a440:	b530      	push	{r4, r5, lr}
 800a442:	b083      	sub	sp, #12
 800a444:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 800a448:	4614      	mov	r4, r2
 800a44a:	2500      	movs	r5, #0
 800a44c:	f8ad 1000 	strh.w	r1, [sp]
 800a450:	2301      	movs	r3, #1
 800a452:	2203      	movs	r2, #3
 800a454:	4669      	mov	r1, sp
 800a456:	f8ad 5002 	strh.w	r5, [sp, #2]
 800a45a:	f8ad 5004 	strh.w	r5, [sp, #4]
 800a45e:	f7fd fa49 	bl	80078f4 <acc_rss_integration_sensor_device_transfer>
 800a462:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a466:	8023      	strh	r3, [r4, #0]
 800a468:	b003      	add	sp, #12
 800a46a:	bd30      	pop	{r4, r5, pc}

0800a46c <acc_sensor_reg_write>:
 800a46c:	b530      	push	{r4, r5, lr}
 800a46e:	b083      	sub	sp, #12
 800a470:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 800a474:	4615      	mov	r5, r2
 800a476:	2300      	movs	r3, #0
 800a478:	2202      	movs	r2, #2
 800a47a:	a901      	add	r1, sp, #4
 800a47c:	f8ad 4004 	strh.w	r4, [sp, #4]
 800a480:	f8ad 5006 	strh.w	r5, [sp, #6]
 800a484:	f7fd fa36 	bl	80078f4 <acc_rss_integration_sensor_device_transfer>
 800a488:	b003      	add	sp, #12
 800a48a:	bd30      	pop	{r4, r5, pc}

0800a48c <acc_sensor_reg_field_write>:
 800a48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	461d      	mov	r5, r3
 800a494:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a498:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 800a49c:	f8ad 3000 	strh.w	r3, [sp]
 800a4a0:	2700      	movs	r7, #0
 800a4a2:	468a      	mov	sl, r1
 800a4a4:	4691      	mov	r9, r2
 800a4a6:	4669      	mov	r1, sp
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	f8ad 7002 	strh.w	r7, [sp, #2]
 800a4b2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800a4b6:	f7fd fa1d 	bl	80078f4 <acc_rss_integration_sensor_device_transfer>
 800a4ba:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800a4be:	fa04 f10a 	lsl.w	r1, r4, sl
 800a4c2:	4071      	eors	r1, r6
 800a4c4:	ea01 0409 	and.w	r4, r1, r9
 800a4c8:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	4669      	mov	r1, sp
 800a4d2:	4074      	eors	r4, r6
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	f8ad 5000 	strh.w	r5, [sp]
 800a4da:	f8ad 4002 	strh.w	r4, [sp, #2]
 800a4de:	f7fd fa09 	bl	80078f4 <acc_rss_integration_sensor_device_transfer>
 800a4e2:	b002      	add	sp, #8
 800a4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a4e8 <acc_sensor_conf_read_instr>:
 800a4e8:	b530      	push	{r4, r5, lr}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	2401      	movs	r4, #1
 800a4ee:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 800a4f2:	4623      	mov	r3, r4
 800a4f4:	2500      	movs	r5, #0
 800a4f6:	f8ad 1004 	strh.w	r1, [sp, #4]
 800a4fa:	2205      	movs	r2, #5
 800a4fc:	a901      	add	r1, sp, #4
 800a4fe:	f8ad 4006 	strh.w	r4, [sp, #6]
 800a502:	f8ad 5008 	strh.w	r5, [sp, #8]
 800a506:	f8cd 500a 	str.w	r5, [sp, #10]
 800a50a:	f7fd f9f3 	bl	80078f4 <acc_rss_integration_sensor_device_transfer>
 800a50e:	f10d 000a 	add.w	r0, sp, #10
 800a512:	4622      	mov	r2, r4
 800a514:	4669      	mov	r1, sp
 800a516:	f7fd facd 	bl	8007ab4 <acc_utils_transfer_buffer_to_uint32>
 800a51a:	9800      	ldr	r0, [sp, #0]
 800a51c:	b005      	add	sp, #20
 800a51e:	bd30      	pop	{r4, r5, pc}

0800a520 <acc_cpd_pll_divisors_calculate>:
 800a520:	b510      	push	{r4, lr}
 800a522:	edd0 7a00 	vldr	s15, [r0]
 800a526:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a60c <acc_cpd_pll_divisors_calculate+0xec>
 800a52a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a532:	b082      	sub	sp, #8
 800a534:	dc3c      	bgt.n	800a5b0 <acc_cpd_pll_divisors_calculate+0x90>
 800a536:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a610 <acc_cpd_pll_divisors_calculate+0xf0>
 800a53a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a542:	d435      	bmi.n	800a5b0 <acc_cpd_pll_divisors_calculate+0x90>
 800a544:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800a614 <acc_cpd_pll_divisors_calculate+0xf4>
 800a548:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a618 <acc_cpd_pll_divisors_calculate+0xf8>
 800a54c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800a61c <acc_cpd_pll_divisors_calculate+0xfc>
 800a550:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a554:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800a558:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a55c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a560:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a564:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a568:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a56c:	ee16 3a90 	vmov	r3, s13
 800a570:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a574:	b29b      	uxth	r3, r3
 800a576:	f1a3 0210 	sub.w	r2, r3, #16
 800a57a:	ee17 0a10 	vmov	r0, s14
 800a57e:	b292      	uxth	r2, r2
 800a580:	2aef      	cmp	r2, #239	; 0xef
 800a582:	8108      	strh	r0, [r1, #8]
 800a584:	d814      	bhi.n	800a5b0 <acc_cpd_pll_divisors_calculate+0x90>
 800a586:	2b3f      	cmp	r3, #63	; 0x3f
 800a588:	d938      	bls.n	800a5fc <acc_cpd_pll_divisors_calculate+0xdc>
 800a58a:	2bbf      	cmp	r3, #191	; 0xbf
 800a58c:	f04f 0201 	mov.w	r2, #1
 800a590:	bf98      	it	ls
 800a592:	f1a3 0040 	subls.w	r0, r3, #64	; 0x40
 800a596:	804a      	strh	r2, [r1, #2]
 800a598:	bf8c      	ite	hi
 800a59a:	08d8      	lsrhi	r0, r3, #3
 800a59c:	f3c0 00cf 	ubfxls	r0, r0, #3, #16
 800a5a0:	f003 0207 	and.w	r2, r3, #7
 800a5a4:	8088      	strh	r0, [r1, #4]
 800a5a6:	80ca      	strh	r2, [r1, #6]
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	800b      	strh	r3, [r1, #0]
 800a5ac:	b002      	add	sp, #8
 800a5ae:	bd10      	pop	{r4, pc}
 800a5b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a620 <acc_cpd_pll_divisors_calculate+0x100>
 800a5bc:	eddf 6a19 	vldr	s13, [pc, #100]	; 800a624 <acc_cpd_pll_divisors_calculate+0x104>
 800a5c0:	4b19      	ldr	r3, [pc, #100]	; (800a628 <acc_cpd_pll_divisors_calculate+0x108>)
 800a5c2:	4a1a      	ldr	r2, [pc, #104]	; (800a62c <acc_cpd_pll_divisors_calculate+0x10c>)
 800a5c4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a5c6:	491a      	ldr	r1, [pc, #104]	; (800a630 <acc_cpd_pll_divisors_calculate+0x110>)
 800a5c8:	bf4a      	itet	mi
 800a5ca:	4b1a      	ldrmi	r3, [pc, #104]	; (800a634 <acc_cpd_pll_divisors_calculate+0x114>)
 800a5cc:	4b1a      	ldrpl	r3, [pc, #104]	; (800a638 <acc_cpd_pll_divisors_calculate+0x118>)
 800a5ce:	eef1 7a67 	vnegmi.f32	s15, s15
 800a5d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a5dc:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a5e0:	ed8d 7a00 	vstr	s14, [sp]
 800a5e4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a5e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5f0:	edcd 7a01 	vstr	s15, [sp, #4]
 800a5f4:	47a0      	blx	r4
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	b002      	add	sp, #8
 800a5fa:	bd10      	pop	{r4, pc}
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	2b2f      	cmp	r3, #47	; 0x2f
 800a600:	bf88      	it	hi
 800a602:	461a      	movhi	r2, r3
 800a604:	808a      	strh	r2, [r1, #4]
 800a606:	8048      	strh	r0, [r1, #2]
 800a608:	80c8      	strh	r0, [r1, #6]
 800a60a:	e7cd      	b.n	800a5a8 <acc_cpd_pll_divisors_calculate+0x88>
 800a60c:	4c989680 	.word	0x4c989680
 800a610:	4b989680 	.word	0x4b989680
 800a614:	4f1502f9 	.word	0x4f1502f9
 800a618:	b55b38e8 	.word	0xb55b38e8
 800a61c:	427c0000 	.word	0x427c0000
 800a620:	350637bd 	.word	0x350637bd
 800a624:	49742400 	.word	0x49742400
 800a628:	200007b0 	.word	0x200007b0
 800a62c:	08012218 	.word	0x08012218
 800a630:	08012244 	.word	0x08012244
 800a634:	080119a0 	.word	0x080119a0
 800a638:	08012a80 	.word	0x08012a80

0800a63c <acc_cpd_pll_divisors_ref_divisor>:
 800a63c:	eddf 7a02 	vldr	s15, [pc, #8]	; 800a648 <acc_cpd_pll_divisors_ref_divisor+0xc>
 800a640:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a644:	f004 bc4a 	b.w	800eedc <roundf>
 800a648:	4f1502f9 	.word	0x4f1502f9

0800a64c <acc_element_source_adc_init_radar_engine>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	9d04      	ldr	r5, [sp, #16]
 800a650:	4604      	mov	r4, r0
 800a652:	4608      	mov	r0, r1
 800a654:	63e1      	str	r1, [r4, #60]	; 0x3c
 800a656:	4611      	mov	r1, r2
 800a658:	461a      	mov	r2, r3
 800a65a:	462b      	mov	r3, r5
 800a65c:	f7ff f92e 	bl	80098bc <acc_sensor_manager_prepare_radar_engine>
 800a660:	896b      	ldrh	r3, [r5, #10]
 800a662:	8723      	strh	r3, [r4, #56]	; 0x38
 800a664:	bd38      	pop	{r3, r4, r5, pc}
 800a666:	bf00      	nop

0800a668 <acc_element_source_adc_init>:
 800a668:	b510      	push	{r4, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	4604      	mov	r4, r0
 800a66e:	4608      	mov	r0, r1
 800a670:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a674:	9101      	str	r1, [sp, #4]
 800a676:	f7fd fcfd 	bl	8008074 <acc_base_configuration_print>
 800a67a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a67e:	9901      	ldr	r1, [sp, #4]
 800a680:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a682:	b004      	add	sp, #16
 800a684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a688:	f7ff b964 	b.w	8009954 <acc_sensor_manager_prepare_measurement>

0800a68c <acc_element_source_adc_release>:
 800a68c:	b110      	cbz	r0, 800a694 <acc_element_source_adc_release+0x8>
 800a68e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a690:	f7ff ba26 	b.w	8009ae0 <acc_sensor_manager_release_measurement>
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop

0800a698 <acc_element_source_adc_reset>:
 800a698:	6800      	ldr	r0, [r0, #0]
 800a69a:	68c3      	ldr	r3, [r0, #12]
 800a69c:	4718      	bx	r3
 800a69e:	bf00      	nop

0800a6a0 <acc_element_source_adc_validate>:
 800a6a0:	6800      	ldr	r0, [r0, #0]
 800a6a2:	6883      	ldr	r3, [r0, #8]
 800a6a4:	4718      	bx	r3
 800a6a6:	bf00      	nop

0800a6a8 <acc_element_source_adc_produce>:
 800a6a8:	b530      	push	{r4, r5, lr}
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d02f      	beq.n	800a714 <acc_element_source_adc_produce+0x6c>
 800a6b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a6b6:	4a19      	ldr	r2, [pc, #100]	; (800a71c <acc_element_source_adc_produce+0x74>)
 800a6b8:	6a25      	ldr	r5, [r4, #32]
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	f7ff fa24 	bl	8009b08 <acc_sensor_manager_get_sensor_id>
 800a6c0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800a6c2:	6028      	str	r0, [r5, #0]
 800a6c4:	6961      	ldr	r1, [r4, #20]
 800a6c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a6c8:	ab01      	add	r3, sp, #4
 800a6ca:	f7ff f869 	bl	80097a0 <acc_sensor_manager_acquire_adc_data>
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	b1c0      	cbz	r0, 800a704 <acc_element_source_adc_produce+0x5c>
 800a6d2:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800a6d6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800a6d8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	6003      	str	r3, [r0, #0]
 800a6e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a6e2:	7011      	strb	r1, [r2, #0]
 800a6e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a6e8:	701a      	strb	r2, [r3, #0]
 800a6ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a6ee:	b90b      	cbnz	r3, 800a6f4 <acc_element_source_adc_produce+0x4c>
 800a6f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a6f8:	7013      	strb	r3, [r2, #0]
 800a6fa:	6843      	ldr	r3, [r0, #4]
 800a6fc:	4798      	blx	r3
 800a6fe:	4628      	mov	r0, r5
 800a700:	b003      	add	sp, #12
 800a702:	bd30      	pop	{r4, r5, pc}
 800a704:	4b06      	ldr	r3, [pc, #24]	; (800a720 <acc_element_source_adc_produce+0x78>)
 800a706:	4a07      	ldr	r2, [pc, #28]	; (800a724 <acc_element_source_adc_produce+0x7c>)
 800a708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70a:	4907      	ldr	r1, [pc, #28]	; (800a728 <acc_element_source_adc_produce+0x80>)
 800a70c:	4798      	blx	r3
 800a70e:	4628      	mov	r0, r5
 800a710:	b003      	add	sp, #12
 800a712:	bd30      	pop	{r4, r5, pc}
 800a714:	4605      	mov	r5, r0
 800a716:	4628      	mov	r0, r5
 800a718:	b003      	add	sp, #12
 800a71a:	bd30      	pop	{r4, r5, pc}
 800a71c:	51645c3c 	.word	0x51645c3c
 800a720:	200007b0 	.word	0x200007b0
 800a724:	08012258 	.word	0x08012258
 800a728:	08012278 	.word	0x08012278

0800a72c <acc_element_source_adc_inject_data>:
 800a72c:	b570      	push	{r4, r5, r6, lr}
 800a72e:	4604      	mov	r4, r0
 800a730:	6940      	ldr	r0, [r0, #20]
 800a732:	4e08      	ldr	r6, [pc, #32]	; (800a754 <acc_element_source_adc_inject_data+0x28>)
 800a734:	4615      	mov	r5, r2
 800a736:	f001 fd91 	bl	800c25c <memcpy>
 800a73a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a73c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a73e:	6820      	ldr	r0, [r4, #0]
 800a740:	6a22      	ldr	r2, [r4, #32]
 800a742:	600d      	str	r5, [r1, #0]
 800a744:	2100      	movs	r1, #0
 800a746:	601e      	str	r6, [r3, #0]
 800a748:	6843      	ldr	r3, [r0, #4]
 800a74a:	6011      	str	r1, [r2, #0]
 800a74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a750:	4718      	bx	r3
 800a752:	bf00      	nop
 800a754:	51645c3c 	.word	0x51645c3c

0800a758 <acc_cpd_cbank_and_vana_calibration>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	ed2d 8b02 	vpush	{d8}
 800a760:	4615      	mov	r5, r2
 800a762:	b08b      	sub	sp, #44	; 0x2c
 800a764:	461e      	mov	r6, r3
 800a766:	ab09      	add	r3, sp, #36	; 0x24
 800a768:	2400      	movs	r4, #0
 800a76a:	ee08 1a10 	vmov	s16, r1
 800a76e:	4683      	mov	fp, r0
 800a770:	460a      	mov	r2, r1
 800a772:	4601      	mov	r1, r0
 800a774:	6828      	ldr	r0, [r5, #0]
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	ab08      	add	r3, sp, #32
 800a77a:	e9cd 6407 	strd	r6, r4, [sp, #28]
 800a77e:	9409      	str	r4, [sp, #36]	; 0x24
 800a780:	f7ff f9c4 	bl	8009b0c <acc_sensor_protocol_r2_prepare_load>
 800a784:	2800      	cmp	r0, #0
 800a786:	d067      	beq.n	800a858 <acc_cpd_cbank_and_vana_calibration+0x100>
 800a788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78a:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800aaa8 <acc_cpd_cbank_and_vana_calibration+0x350>
 800a78e:	461e      	mov	r6, r3
 800a790:	f5c4 63ae 	rsb	r3, r4, #1392	; 0x570
 800a794:	3304      	adds	r3, #4
 800a796:	429e      	cmp	r6, r3
 800a798:	bf28      	it	cs
 800a79a:	461e      	movcs	r6, r3
 800a79c:	9f08      	ldr	r7, [sp, #32]
 800a79e:	4bb6      	ldr	r3, [pc, #728]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a7a0:	ea4f 0954 	mov.w	r9, r4, lsr #1
 800a7a4:	0872      	lsrs	r2, r6, #1
 800a7a6:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	f001 fb10 	bl	800bdd0 <acc_confprogram_copy>
 800a7b0:	686b      	ldr	r3, [r5, #4]
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	201b      	movs	r0, #27
 800a7b6:	b2b2      	uxth	r2, r6
 800a7b8:	b2a1      	uxth	r1, r4
 800a7ba:	9000      	str	r0, [sp, #0]
 800a7bc:	4643      	mov	r3, r8
 800a7be:	4638      	mov	r0, r7
 800a7c0:	9206      	str	r2, [sp, #24]
 800a7c2:	9105      	str	r1, [sp, #20]
 800a7c4:	f04f 0a19 	mov.w	sl, #25
 800a7c8:	f001 fa0a 	bl	800bbe0 <acc_confprogram_patch_offset>
 800a7cc:	68ab      	ldr	r3, [r5, #8]
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	4643      	mov	r3, r8
 800a7d8:	f8cd a000 	str.w	sl, [sp]
 800a7dc:	f001 fa00 	bl	800bbe0 <acc_confprogram_patch_offset>
 800a7e0:	68eb      	ldr	r3, [r5, #12]
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	231a      	movs	r3, #26
 800a7e6:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	4643      	mov	r3, r8
 800a7f0:	f001 f9f6 	bl	800bbe0 <acc_confprogram_patch_offset>
 800a7f4:	8a2b      	ldrh	r3, [r5, #16]
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	2317      	movs	r3, #23
 800a7fa:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a7fe:	4638      	mov	r0, r7
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	4643      	mov	r3, r8
 800a804:	f001 f9ec 	bl	800bbe0 <acc_confprogram_patch_offset>
 800a808:	2310      	movs	r3, #16
 800a80a:	9301      	str	r3, [sp, #4]
 800a80c:	2300      	movs	r3, #0
 800a80e:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a812:	4638      	mov	r0, r7
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	4643      	mov	r3, r8
 800a818:	f001 f9e2 	bl	800bbe0 <acc_confprogram_patch_offset>
 800a81c:	4633      	mov	r3, r6
 800a81e:	6828      	ldr	r0, [r5, #0]
 800a820:	465a      	mov	r2, fp
 800a822:	fa1f f189 	uxth.w	r1, r9
 800a826:	f7fe fe81 	bl	800952c <acc_sensor_r2_load_confmem>
 800a82a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a82c:	f240 5373 	movw	r3, #1395	; 0x573
 800a830:	4434      	add	r4, r6
 800a832:	429c      	cmp	r4, r3
 800a834:	d9ac      	bls.n	800a790 <acc_cpd_cbank_and_vana_calibration+0x38>
 800a836:	6828      	ldr	r0, [r5, #0]
 800a838:	4651      	mov	r1, sl
 800a83a:	f7ff f9cb 	bl	8009bd4 <acc_sensor_protocol_r2_run_program>
 800a83e:	4606      	mov	r6, r0
 800a840:	b9b0      	cbnz	r0, 800a870 <acc_cpd_cbank_and_vana_calibration+0x118>
 800a842:	4b8e      	ldr	r3, [pc, #568]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a844:	4a8e      	ldr	r2, [pc, #568]	; (800aa80 <acc_cpd_cbank_and_vana_calibration+0x328>)
 800a846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a848:	498e      	ldr	r1, [pc, #568]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a84a:	4798      	blx	r3
 800a84c:	4630      	mov	r0, r6
 800a84e:	b00b      	add	sp, #44	; 0x2c
 800a850:	ecbd 8b02 	vpop	{d8}
 800a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a858:	4b88      	ldr	r3, [pc, #544]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a85a:	4a8b      	ldr	r2, [pc, #556]	; (800aa88 <acc_cpd_cbank_and_vana_calibration+0x330>)
 800a85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85e:	4989      	ldr	r1, [pc, #548]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a860:	4606      	mov	r6, r0
 800a862:	4798      	blx	r3
 800a864:	4630      	mov	r0, r6
 800a866:	b00b      	add	sp, #44	; 0x2c
 800a868:	ecbd 8b02 	vpop	{d8}
 800a86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a870:	4886      	ldr	r0, [pc, #536]	; (800aa8c <acc_cpd_cbank_and_vana_calibration+0x334>)
 800a872:	f001 fabb 	bl	800bdec <acc_diagnostic_log_set_scope>
 800a876:	6829      	ldr	r1, [r5, #0]
 800a878:	4885      	ldr	r0, [pc, #532]	; (800aa90 <acc_cpd_cbank_and_vana_calibration+0x338>)
 800a87a:	f001 fad7 	bl	800be2c <acc_diagnostic_log_scalar>
 800a87e:	4885      	ldr	r0, [pc, #532]	; (800aa94 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800a880:	2203      	movs	r2, #3
 800a882:	2100      	movs	r1, #0
 800a884:	f001 faba 	bl	800bdfc <acc_diagnostic_log_declare_parameter>
 800a888:	682c      	ldr	r4, [r5, #0]
 800a88a:	2300      	movs	r3, #0
 800a88c:	4620      	mov	r0, r4
 800a88e:	2203      	movs	r2, #3
 800a890:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a894:	f7ff faf8 	bl	8009e88 <acc_sensor_protocol_r2_wait_for_specific_event>
 800a898:	b960      	cbnz	r0, 800a8b4 <acc_cpd_cbank_and_vana_calibration+0x15c>
 800a89a:	4b78      	ldr	r3, [pc, #480]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a89c:	4a7e      	ldr	r2, [pc, #504]	; (800aa98 <acc_cpd_cbank_and_vana_calibration+0x340>)
 800a89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a0:	4978      	ldr	r1, [pc, #480]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	4798      	blx	r3
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	b00b      	add	sp, #44	; 0x2c
 800a8ac:	ecbd 8b02 	vpop	{d8}
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	aa09      	add	r2, sp, #36	; 0x24
 800a8b6:	219d      	movs	r1, #157	; 0x9d
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f7ff fdc1 	bl	800a440 <acc_sensor_reg_read>
 800a8be:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800a8c2:	2006      	movs	r0, #6
 800a8c4:	aa09      	add	r2, sp, #36	; 0x24
 800a8c6:	f006 0607 	and.w	r6, r6, #7
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800a8d2:	f7fd f891 	bl	80079f8 <acc_probes_execute_uint16>
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f7ff f9de 	bl	8009c98 <acc_sensor_protocol_r2_ack_event>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d0dc      	beq.n	800a89a <acc_cpd_cbank_and_vana_calibration+0x142>
 800a8e0:	682c      	ldr	r4, [r5, #0]
 800a8e2:	9b07      	ldr	r3, [sp, #28]
 800a8e4:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800a8e8:	601e      	str	r6, [r3, #0]
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800a8f4:	f7ff f9be 	bl	8009c74 <acc_sensor_protocol_r2_is_sensor_running>
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	b168      	cbz	r0, 800a918 <acc_cpd_cbank_and_vana_calibration+0x1c0>
 800a8fc:	4e5f      	ldr	r6, [pc, #380]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a8fe:	4a67      	ldr	r2, [pc, #412]	; (800aa9c <acc_cpd_cbank_and_vana_calibration+0x344>)
 800a900:	6b75      	ldr	r5, [r6, #52]	; 0x34
 800a902:	4960      	ldr	r1, [pc, #384]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a904:	4623      	mov	r3, r4
 800a906:	2000      	movs	r0, #0
 800a908:	47a8      	blx	r5
 800a90a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a90c:	4a64      	ldr	r2, [pc, #400]	; (800aaa0 <acc_cpd_cbank_and_vana_calibration+0x348>)
 800a90e:	495d      	ldr	r1, [pc, #372]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a910:	2000      	movs	r0, #0
 800a912:	4798      	blx	r3
 800a914:	2600      	movs	r6, #0
 800a916:	e7a5      	b.n	800a864 <acc_cpd_cbank_and_vana_calibration+0x10c>
 800a918:	9601      	str	r6, [sp, #4]
 800a91a:	2311      	movs	r3, #17
 800a91c:	4e61      	ldr	r6, [pc, #388]	; (800aaa4 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800a91e:	4956      	ldr	r1, [pc, #344]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a920:	9602      	str	r6, [sp, #8]
 800a922:	4602      	mov	r2, r0
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	4620      	mov	r0, r4
 800a928:	4b5f      	ldr	r3, [pc, #380]	; (800aaa8 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800a92a:	f001 f9e1 	bl	800bcf0 <acc_confprogram_live_patch>
 800a92e:	2301      	movs	r3, #1
 800a930:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	4950      	ldr	r1, [pc, #320]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a938:	4b5b      	ldr	r3, [pc, #364]	; (800aaa8 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800a93a:	462a      	mov	r2, r5
 800a93c:	4620      	mov	r0, r4
 800a93e:	f001 f9d7 	bl	800bcf0 <acc_confprogram_live_patch>
 800a942:	462e      	mov	r6, r5
 800a944:	4853      	ldr	r0, [pc, #332]	; (800aa94 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800a946:	4629      	mov	r1, r5
 800a948:	f001 fa60 	bl	800be0c <acc_diagnostic_log_set_parameter>
 800a94c:	4a55      	ldr	r2, [pc, #340]	; (800aaa4 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800a94e:	494a      	ldr	r1, [pc, #296]	; (800aa78 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a950:	231f      	movs	r3, #31
 800a952:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	4620      	mov	r0, r4
 800a95a:	4b53      	ldr	r3, [pc, #332]	; (800aaa8 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	f001 f9c7 	bl	800bcf0 <acc_confprogram_live_patch>
 800a962:	f240 11d1 	movw	r1, #465	; 0x1d1
 800a966:	4620      	mov	r0, r4
 800a968:	f7ff f934 	bl	8009bd4 <acc_sensor_protocol_r2_run_program>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	f000 80bf 	beq.w	800aaf0 <acc_cpd_cbank_and_vana_calibration+0x398>
 800a972:	2300      	movs	r3, #0
 800a974:	2209      	movs	r2, #9
 800a976:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a97a:	4620      	mov	r0, r4
 800a97c:	f7ff fa84 	bl	8009e88 <acc_sensor_protocol_r2_wait_for_specific_event>
 800a980:	b938      	cbnz	r0, 800a992 <acc_cpd_cbank_and_vana_calibration+0x23a>
 800a982:	4e3e      	ldr	r6, [pc, #248]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a984:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800a986:	4a49      	ldr	r2, [pc, #292]	; (800aaac <acc_cpd_cbank_and_vana_calibration+0x354>)
 800a988:	493e      	ldr	r1, [pc, #248]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a98a:	462b      	mov	r3, r5
 800a98c:	2000      	movs	r0, #0
 800a98e:	47a0      	blx	r4
 800a990:	e7bb      	b.n	800a90a <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800a992:	ee18 0a10 	vmov	r0, s16
 800a996:	2110      	movs	r1, #16
 800a998:	f7fe fe00 	bl	800959c <acc_sensor_r2_buffer_processed_verify_size>
 800a99c:	b928      	cbnz	r0, 800a9aa <acc_cpd_cbank_and_vana_calibration+0x252>
 800a99e:	4e37      	ldr	r6, [pc, #220]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a9a0:	4a43      	ldr	r2, [pc, #268]	; (800aab0 <acc_cpd_cbank_and_vana_calibration+0x358>)
 800a9a2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a9a4:	4937      	ldr	r1, [pc, #220]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a9a6:	4798      	blx	r3
 800a9a8:	e7ec      	b.n	800a984 <acc_cpd_cbank_and_vana_calibration+0x22c>
 800a9aa:	2310      	movs	r3, #16
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4659      	mov	r1, fp
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f7fe fdfb 	bl	80095ac <acc_sensor_r2_buffer_processed_read>
 800a9b6:	2310      	movs	r3, #16
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4682      	mov	sl, r0
 800a9be:	2000      	movs	r0, #0
 800a9c0:	f7fd f81a 	bl	80079f8 <acc_probes_execute_uint16>
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f7ff f967 	bl	8009c98 <acc_sensor_protocol_r2_ack_event>
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d0d8      	beq.n	800a982 <acc_cpd_cbank_and_vana_calibration+0x22a>
 800a9d0:	2700      	movs	r7, #0
 800a9d2:	46b9      	mov	r9, r7
 800a9d4:	4651      	mov	r1, sl
 800a9d6:	f10a 0c1e 	add.w	ip, sl, #30
 800a9da:	884b      	ldrh	r3, [r1, #2]
 800a9dc:	f831 2b02 	ldrh.w	r2, [r1], #2
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	4499      	add	r9, r3
 800a9e4:	bf34      	ite	cc
 800a9e6:	1ad3      	subcc	r3, r2, r3
 800a9e8:	1a9b      	subcs	r3, r3, r2
 800a9ea:	429f      	cmp	r7, r3
 800a9ec:	bf38      	it	cc
 800a9ee:	461f      	movcc	r7, r3
 800a9f0:	458c      	cmp	ip, r1
 800a9f2:	d1f2      	bne.n	800a9da <acc_cpd_cbank_and_vana_calibration+0x282>
 800a9f4:	4927      	ldr	r1, [pc, #156]	; (800aa94 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800a9f6:	482f      	ldr	r0, [pc, #188]	; (800aab4 <acc_cpd_cbank_and_vana_calibration+0x35c>)
 800a9f8:	f001 fa10 	bl	800be1c <acc_diagnostic_log_array>
 800a9fc:	2110      	movs	r1, #16
 800a9fe:	4650      	mov	r0, sl
 800aa00:	f001 fa1c 	bl	800be3c <acc_diagnostic_log_data_u16>
 800aa04:	f8ba 3000 	ldrh.w	r3, [sl]
 800aa08:	4499      	add	r9, r3
 800aa0a:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800aa0e:	f5a9 43f2 	sub.w	r3, r9, #30976	; 0x7900
 800aa12:	3b18      	subs	r3, #24
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800aa1a:	428b      	cmp	r3, r1
 800aa1c:	d852      	bhi.n	800aac4 <acc_cpd_cbank_and_vana_calibration+0x36c>
 800aa1e:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 800aa22:	d84f      	bhi.n	800aac4 <acc_cpd_cbank_and_vana_calibration+0x36c>
 800aa24:	f7fc ffe2 	bl	80079ec <acc_rss_integration_log_level>
 800aa28:	2803      	cmp	r0, #3
 800aa2a:	4646      	mov	r6, r8
 800aa2c:	d90a      	bls.n	800aa44 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800aa2e:	4a13      	ldr	r2, [pc, #76]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800aa30:	9701      	str	r7, [sp, #4]
 800aa32:	fa1f f389 	uxth.w	r3, r9
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	4912      	ldr	r1, [pc, #72]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800aa3a:	4623      	mov	r3, r4
 800aa3c:	2004      	movs	r0, #4
 800aa3e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800aa40:	4a1d      	ldr	r2, [pc, #116]	; (800aab8 <acc_cpd_cbank_and_vana_calibration+0x360>)
 800aa42:	47a0      	blx	r4
 800aa44:	9b07      	ldr	r3, [sp, #28]
 800aa46:	711d      	strb	r5, [r3, #4]
 800aa48:	f7fc ffd0 	bl	80079ec <acc_rss_integration_log_level>
 800aa4c:	2801      	cmp	r0, #1
 800aa4e:	d909      	bls.n	800aa64 <acc_cpd_cbank_and_vana_calibration+0x30c>
 800aa50:	9907      	ldr	r1, [sp, #28]
 800aa52:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <acc_cpd_cbank_and_vana_calibration+0x324>)
 800aa54:	790b      	ldrb	r3, [r1, #4]
 800aa56:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	680b      	ldr	r3, [r1, #0]
 800aa5c:	4a17      	ldr	r2, [pc, #92]	; (800aabc <acc_cpd_cbank_and_vana_calibration+0x364>)
 800aa5e:	4909      	ldr	r1, [pc, #36]	; (800aa84 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800aa60:	2002      	movs	r0, #2
 800aa62:	47a0      	blx	r4
 800aa64:	9c07      	ldr	r4, [sp, #28]
 800aa66:	4816      	ldr	r0, [pc, #88]	; (800aac0 <acc_cpd_cbank_and_vana_calibration+0x368>)
 800aa68:	6821      	ldr	r1, [r4, #0]
 800aa6a:	f001 f9df 	bl	800be2c <acc_diagnostic_log_scalar>
 800aa6e:	7921      	ldrb	r1, [r4, #4]
 800aa70:	4808      	ldr	r0, [pc, #32]	; (800aa94 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800aa72:	f001 f9db 	bl	800be2c <acc_diagnostic_log_scalar>
 800aa76:	e6f5      	b.n	800a864 <acc_cpd_cbank_and_vana_calibration+0x10c>
 800aa78:	0800f5c0 	.word	0x0800f5c0
 800aa7c:	200007b0 	.word	0x200007b0
 800aa80:	080122f0 	.word	0x080122f0
 800aa84:	080122d0 	.word	0x080122d0
 800aa88:	0801228c 	.word	0x0801228c
 800aa8c:	080122d4 	.word	0x080122d4
 800aa90:	08012324 	.word	0x08012324
 800aa94:	08012330 	.word	0x08012330
 800aa98:	0801233c 	.word	0x0801233c
 800aa9c:	08012354 	.word	0x08012354
 800aaa0:	0801241c 	.word	0x0801241c
 800aaa4:	080094d1 	.word	0x080094d1
 800aaa8:	08012c68 	.word	0x08012c68
 800aaac:	080123f0 	.word	0x080123f0
 800aab0:	080123c8 	.word	0x080123c8
 800aab4:	080123e0 	.word	0x080123e0
 800aab8:	08012454 	.word	0x08012454
 800aabc:	08012434 	.word	0x08012434
 800aac0:	08012448 	.word	0x08012448
 800aac4:	f7fc ff92 	bl	80079ec <acc_rss_integration_log_level>
 800aac8:	2803      	cmp	r0, #3
 800aaca:	d90a      	bls.n	800aae2 <acc_cpd_cbank_and_vana_calibration+0x38a>
 800aacc:	4b0c      	ldr	r3, [pc, #48]	; (800ab00 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800aace:	9701      	str	r7, [sp, #4]
 800aad0:	fa1f f289 	uxth.w	r2, r9
 800aad4:	9200      	str	r2, [sp, #0]
 800aad6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800aad8:	4a0a      	ldr	r2, [pc, #40]	; (800ab04 <acc_cpd_cbank_and_vana_calibration+0x3ac>)
 800aada:	490b      	ldr	r1, [pc, #44]	; (800ab08 <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 800aadc:	4623      	mov	r3, r4
 800aade:	2004      	movs	r0, #4
 800aae0:	47a8      	blx	r5
 800aae2:	b10e      	cbz	r6, 800aae8 <acc_cpd_cbank_and_vana_calibration+0x390>
 800aae4:	4e06      	ldr	r6, [pc, #24]	; (800ab00 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800aae6:	e710      	b.n	800a90a <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800aae8:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800aaec:	2601      	movs	r6, #1
 800aaee:	e729      	b.n	800a944 <acc_cpd_cbank_and_vana_calibration+0x1ec>
 800aaf0:	4e03      	ldr	r6, [pc, #12]	; (800ab00 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800aaf2:	4a06      	ldr	r2, [pc, #24]	; (800ab0c <acc_cpd_cbank_and_vana_calibration+0x3b4>)
 800aaf4:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800aaf6:	4904      	ldr	r1, [pc, #16]	; (800ab08 <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 800aaf8:	462b      	mov	r3, r5
 800aafa:	47a0      	blx	r4
 800aafc:	e705      	b.n	800a90a <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800aafe:	bf00      	nop
 800ab00:	200007b0 	.word	0x200007b0
 800ab04:	08012454 	.word	0x08012454
 800ab08:	080122d0 	.word	0x080122d0
 800ab0c:	08012388 	.word	0x08012388

0800ab10 <acc_cpd_sparse_sweep_load_program>:
 800ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	ed2d 8b04 	vpush	{d8-d9}
 800ab18:	4614      	mov	r4, r2
 800ab1a:	b08f      	sub	sp, #60	; 0x3c
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	4606      	mov	r6, r0
 800ab20:	460d      	mov	r5, r1
 800ab22:	ee08 0a90 	vmov	s17, r0
 800ab26:	4601      	mov	r1, r0
 800ab28:	4698      	mov	r8, r3
 800ab2a:	2015      	movs	r0, #21
 800ab2c:	23b4      	movs	r3, #180	; 0xb4
 800ab2e:	f7fc ff7b 	bl	8007a28 <acc_probes_execute_struct>
 800ab32:	ab0d      	add	r3, sp, #52	; 0x34
 800ab34:	4622      	mov	r2, r4
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	2400      	movs	r4, #0
 800ab3e:	ab0c      	add	r3, sp, #48	; 0x30
 800ab40:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800ab44:	f7fe ffe2 	bl	8009b0c <acc_sensor_protocol_r2_prepare_load>
 800ab48:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	f000 83e6 	beq.w	800b31c <acc_cpd_sparse_sweep_load_program+0x80c>
 800ab50:	ee09 5a10 	vmov	s18, r5
 800ab54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab56:	f8df b010 	ldr.w	fp, [pc, #16]	; 800ab68 <acc_cpd_sparse_sweep_load_program+0x58>
 800ab5a:	ed9f 8a02 	vldr	s16, [pc, #8]	; 800ab64 <acc_cpd_sparse_sweep_load_program+0x54>
 800ab5e:	9403      	str	r4, [sp, #12]
 800ab60:	e130      	b.n	800adc4 <acc_cpd_sparse_sweep_load_program+0x2b4>
 800ab62:	bf00      	nop
 800ab64:	3751b717 	.word	0x3751b717
 800ab68:	080137e4 	.word	0x080137e4
 800ab6c:	1f9f      	subs	r7, r3, #6
 800ab6e:	2303      	movs	r3, #3
 800ab70:	4699      	mov	r9, r3
 800ab72:	2274      	movs	r2, #116	; 0x74
 800ab74:	e9cd 2300 	strd	r2, r3, [sp]
 800ab78:	4629      	mov	r1, r5
 800ab7a:	465b      	mov	r3, fp
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f001 f82e 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ab84:	2375      	movs	r3, #117	; 0x75
 800ab86:	e9cd 3900 	strd	r3, r9, [sp]
 800ab8a:	4632      	mov	r2, r6
 800ab8c:	465b      	mov	r3, fp
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4620      	mov	r0, r4
 800ab92:	f001 f825 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ab96:	2376      	movs	r3, #118	; 0x76
 800ab98:	e9cd 3700 	strd	r3, r7, [sp]
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	465b      	mov	r3, fp
 800aba0:	4629      	mov	r1, r5
 800aba2:	4620      	mov	r0, r4
 800aba4:	f001 f81c 	bl	800bbe0 <acc_confprogram_patch_offset>
 800aba8:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	2305      	movs	r3, #5
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	4632      	mov	r2, r6
 800abb4:	465b      	mov	r3, fp
 800abb6:	4629      	mov	r1, r5
 800abb8:	4620      	mov	r0, r4
 800abba:	f001 f811 	bl	800bbe0 <acc_confprogram_patch_offset>
 800abbe:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800abc2:	015b      	lsls	r3, r3, #5
 800abc4:	3b03      	subs	r3, #3
 800abc6:	2263      	movs	r2, #99	; 0x63
 800abc8:	e9cd 2300 	strd	r2, r3, [sp]
 800abcc:	4629      	mov	r1, r5
 800abce:	465b      	mov	r3, fp
 800abd0:	4632      	mov	r2, r6
 800abd2:	4620      	mov	r0, r4
 800abd4:	f001 f804 	bl	800bbe0 <acc_confprogram_patch_offset>
 800abd8:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800abdc:	015b      	lsls	r3, r3, #5
 800abde:	085b      	lsrs	r3, r3, #1
 800abe0:	3b03      	subs	r3, #3
 800abe2:	2264      	movs	r2, #100	; 0x64
 800abe4:	e9cd 2300 	strd	r2, r3, [sp]
 800abe8:	4629      	mov	r1, r5
 800abea:	465b      	mov	r3, fp
 800abec:	4632      	mov	r2, r6
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 fff6 	bl	800bbe0 <acc_confprogram_patch_offset>
 800abf4:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	23e1      	movs	r3, #225	; 0xe1
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	4632      	mov	r2, r6
 800ac00:	465b      	mov	r3, fp
 800ac02:	4629      	mov	r1, r5
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 ffeb 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ac0a:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	23f1      	movs	r3, #241	; 0xf1
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4632      	mov	r2, r6
 800ac16:	465b      	mov	r3, fp
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 ffe0 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ac20:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	2381      	movs	r3, #129	; 0x81
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	4632      	mov	r2, r6
 800ac2c:	465b      	mov	r3, fp
 800ac2e:	4629      	mov	r1, r5
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 ffd5 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ac36:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	23e7      	movs	r3, #231	; 0xe7
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	4632      	mov	r2, r6
 800ac42:	465b      	mov	r3, fp
 800ac44:	4629      	mov	r1, r5
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 ffca 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ac4c:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 800ac50:	9301      	str	r3, [sp, #4]
 800ac52:	237f      	movs	r3, #127	; 0x7f
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	4632      	mov	r2, r6
 800ac58:	465b      	mov	r3, fp
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f000 ffbf 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ac62:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	23cc      	movs	r3, #204	; 0xcc
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	465b      	mov	r3, fp
 800ac70:	4629      	mov	r1, r5
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 ffb4 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ac78:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	2387      	movs	r3, #135	; 0x87
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4632      	mov	r2, r6
 800ac84:	465b      	mov	r3, fp
 800ac86:	4629      	mov	r1, r5
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 ffa9 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ac8e:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	237e      	movs	r3, #126	; 0x7e
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	4632      	mov	r2, r6
 800ac9a:	465b      	mov	r3, fp
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 ff9e 	bl	800bbe0 <acc_confprogram_patch_offset>
 800aca4:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	23ca      	movs	r3, #202	; 0xca
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	4632      	mov	r2, r6
 800acb0:	465b      	mov	r3, fp
 800acb2:	4629      	mov	r1, r5
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 ff93 	bl	800bbe0 <acc_confprogram_patch_offset>
 800acba:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	2386      	movs	r3, #134	; 0x86
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	4632      	mov	r2, r6
 800acc6:	465b      	mov	r3, fp
 800acc8:	4629      	mov	r1, r5
 800acca:	4620      	mov	r0, r4
 800accc:	f000 ff88 	bl	800bbe0 <acc_confprogram_patch_offset>
 800acd0:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	23cb      	movs	r3, #203	; 0xcb
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	4632      	mov	r2, r6
 800acdc:	465b      	mov	r3, fp
 800acde:	4629      	mov	r1, r5
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 ff7d 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ace6:	f898 7070 	ldrb.w	r7, [r8, #112]	; 0x70
 800acea:	2f00      	cmp	r7, #0
 800acec:	f040 8237 	bne.w	800b15e <acc_cpd_sparse_sweep_load_program+0x64e>
 800acf0:	23da      	movs	r3, #218	; 0xda
 800acf2:	2201      	movs	r2, #1
 800acf4:	e9cd 3200 	strd	r3, r2, [sp]
 800acf8:	4629      	mov	r1, r5
 800acfa:	465b      	mov	r3, fp
 800acfc:	4632      	mov	r2, r6
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 ff6e 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ad04:	23db      	movs	r3, #219	; 0xdb
 800ad06:	e9cd 3700 	strd	r3, r7, [sp]
 800ad0a:	4632      	mov	r2, r6
 800ad0c:	465b      	mov	r3, fp
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 ff65 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ad16:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 800ad1a:	22e6      	movs	r2, #230	; 0xe6
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	e9cd 2300 	strd	r2, r3, [sp]
 800ad22:	4629      	mov	r1, r5
 800ad24:	465b      	mov	r3, fp
 800ad26:	4632      	mov	r2, r6
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 ff59 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ad2e:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	23d7      	movs	r3, #215	; 0xd7
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	4632      	mov	r2, r6
 800ad3a:	465b      	mov	r3, fp
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 ff4e 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ad44:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	2378      	movs	r3, #120	; 0x78
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	4632      	mov	r2, r6
 800ad50:	465b      	mov	r3, fp
 800ad52:	4629      	mov	r1, r5
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 ff43 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ad5a:	edd8 7a20 	vldr	s15, [r8, #128]	; 0x80
 800ad5e:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ad62:	22e8      	movs	r2, #232	; 0xe8
 800ad64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad68:	9200      	str	r2, [sp, #0]
 800ad6a:	ee17 3a90 	vmov	r3, s15
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	9301      	str	r3, [sp, #4]
 800ad74:	4632      	mov	r2, r6
 800ad76:	465b      	mov	r3, fp
 800ad78:	4629      	mov	r1, r5
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 ff30 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ad80:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	23d8      	movs	r3, #216	; 0xd8
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	4632      	mov	r2, r6
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 ff25 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ad96:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f040 82af 	bne.w	800b2fe <acc_cpd_sparse_sweep_load_program+0x7ee>
 800ada0:	9b04      	ldr	r3, [sp, #16]
 800ada2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ada6:	ee19 2a10 	vmov	r2, s18
 800adaa:	ee18 0a90 	vmov	r0, s17
 800adae:	f7fe fbbd 	bl	800952c <acc_sensor_r2_load_confmem>
 800adb2:	9903      	ldr	r1, [sp, #12]
 800adb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adb6:	f240 726d 	movw	r2, #1901	; 0x76d
 800adba:	4419      	add	r1, r3
 800adbc:	4291      	cmp	r1, r2
 800adbe:	9103      	str	r1, [sp, #12]
 800adc0:	f200 82ac 	bhi.w	800b31c <acc_cpd_sparse_sweep_load_program+0x80c>
 800adc4:	9d03      	ldr	r5, [sp, #12]
 800adc6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800adc8:	4868      	ldr	r0, [pc, #416]	; (800af6c <acc_cpd_sparse_sweep_load_program+0x45c>)
 800adca:	f5c5 62ed 	rsb	r2, r5, #1896	; 0x768
 800adce:	3206      	adds	r2, #6
 800add0:	429a      	cmp	r2, r3
 800add2:	4616      	mov	r6, r2
 800add4:	bf28      	it	cs
 800add6:	461e      	movcs	r6, r3
 800add8:	086b      	lsrs	r3, r5, #1
 800adda:	0872      	lsrs	r2, r6, #1
 800addc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ade0:	4621      	mov	r1, r4
 800ade2:	9604      	str	r6, [sp, #16]
 800ade4:	9305      	str	r3, [sp, #20]
 800ade6:	f000 fff3 	bl	800bdd0 <acc_confprogram_copy>
 800adea:	f8d8 3000 	ldr.w	r3, [r8]
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	b2b6      	uxth	r6, r6
 800adf2:	b2ad      	uxth	r5, r5
 800adf4:	23d5      	movs	r3, #213	; 0xd5
 800adf6:	4632      	mov	r2, r6
 800adf8:	4620      	mov	r0, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	465b      	mov	r3, fp
 800ae00:	f000 feee 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ae04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	23d3      	movs	r3, #211	; 0xd3
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	4629      	mov	r1, r5
 800ae10:	4620      	mov	r0, r4
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	465b      	mov	r3, fp
 800ae16:	f000 fee3 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ae1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	23d4      	movs	r3, #212	; 0xd4
 800ae22:	4632      	mov	r2, r6
 800ae24:	4629      	mov	r1, r5
 800ae26:	4620      	mov	r0, r4
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	465b      	mov	r3, fp
 800ae2c:	f000 fed8 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ae30:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	23d1      	movs	r3, #209	; 0xd1
 800ae38:	4632      	mov	r2, r6
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	465b      	mov	r3, fp
 800ae42:	f000 fecd 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ae46:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	2365      	movs	r3, #101	; 0x65
 800ae4e:	4632      	mov	r2, r6
 800ae50:	4629      	mov	r1, r5
 800ae52:	4620      	mov	r0, r4
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	465b      	mov	r3, fp
 800ae58:	f000 fec2 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ae5c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	23f3      	movs	r3, #243	; 0xf3
 800ae64:	4632      	mov	r2, r6
 800ae66:	4629      	mov	r1, r5
 800ae68:	4620      	mov	r0, r4
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	465b      	mov	r3, fp
 800ae6e:	f000 feb7 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ae72:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	23eb      	movs	r3, #235	; 0xeb
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	4620      	mov	r0, r4
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	465b      	mov	r3, fp
 800ae84:	f000 feac 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ae88:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800ae8c:	9301      	str	r3, [sp, #4]
 800ae8e:	23ff      	movs	r3, #255	; 0xff
 800ae90:	4632      	mov	r2, r6
 800ae92:	4629      	mov	r1, r5
 800ae94:	4620      	mov	r0, r4
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	465b      	mov	r3, fp
 800ae9a:	f000 fea1 	bl	800bbe0 <acc_confprogram_patch_offset>
 800ae9e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	23e3      	movs	r3, #227	; 0xe3
 800aea6:	4632      	mov	r2, r6
 800aea8:	4629      	mov	r1, r5
 800aeaa:	4620      	mov	r0, r4
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	465b      	mov	r3, fp
 800aeb0:	f000 fe96 	bl	800bbe0 <acc_confprogram_patch_offset>
 800aeb4:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800aeb8:	9301      	str	r3, [sp, #4]
 800aeba:	23e4      	movs	r3, #228	; 0xe4
 800aebc:	4632      	mov	r2, r6
 800aebe:	4629      	mov	r1, r5
 800aec0:	4620      	mov	r0, r4
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	465b      	mov	r3, fp
 800aec6:	f000 fe8b 	bl	800bbe0 <acc_confprogram_patch_offset>
 800aeca:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	2383      	movs	r3, #131	; 0x83
 800aed2:	4632      	mov	r2, r6
 800aed4:	4629      	mov	r1, r5
 800aed6:	4620      	mov	r0, r4
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	465b      	mov	r3, fp
 800aedc:	f000 fe80 	bl	800bbe0 <acc_confprogram_patch_offset>
 800aee0:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	2384      	movs	r3, #132	; 0x84
 800aee8:	4632      	mov	r2, r6
 800aeea:	4629      	mov	r1, r5
 800aeec:	4620      	mov	r0, r4
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	465b      	mov	r3, fp
 800aef2:	f000 fe75 	bl	800bbe0 <acc_confprogram_patch_offset>
 800aef6:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	2382      	movs	r3, #130	; 0x82
 800aefe:	4632      	mov	r2, r6
 800af00:	4629      	mov	r1, r5
 800af02:	4620      	mov	r0, r4
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	2700      	movs	r7, #0
 800af08:	465b      	mov	r3, fp
 800af0a:	f000 fe69 	bl	800bbe0 <acc_confprogram_patch_offset>
 800af0e:	4632      	mov	r2, r6
 800af10:	4629      	mov	r1, r5
 800af12:	4620      	mov	r0, r4
 800af14:	465b      	mov	r3, fp
 800af16:	e9cd 7700 	strd	r7, r7, [sp]
 800af1a:	f000 fe61 	bl	800bbe0 <acc_confprogram_patch_offset>
 800af1e:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	23f2      	movs	r3, #242	; 0xf2
 800af26:	4632      	mov	r2, r6
 800af28:	4629      	mov	r1, r5
 800af2a:	4620      	mov	r0, r4
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	465b      	mov	r3, fp
 800af30:	f000 fe56 	bl	800bbe0 <acc_confprogram_patch_offset>
 800af34:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	23d9      	movs	r3, #217	; 0xd9
 800af3c:	4632      	mov	r2, r6
 800af3e:	4629      	mov	r1, r5
 800af40:	4620      	mov	r0, r4
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	465b      	mov	r3, fp
 800af46:	f000 fe4b 	bl	800bbe0 <acc_confprogram_patch_offset>
 800af4a:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	237b      	movs	r3, #123	; 0x7b
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	4632      	mov	r2, r6
 800af56:	465b      	mov	r3, fp
 800af58:	4629      	mov	r1, r5
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 fe40 	bl	800bbe0 <acc_confprogram_patch_offset>
 800af60:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800af64:	2b00      	cmp	r3, #0
 800af66:	f040 815b 	bne.w	800b220 <acc_cpd_sparse_sweep_load_program+0x710>
 800af6a:	e001      	b.n	800af70 <acc_cpd_sparse_sweep_load_program+0x460>
 800af6c:	080100a8 	.word	0x080100a8
 800af70:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	2389      	movs	r3, #137	; 0x89
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	4632      	mov	r2, r6
 800af7c:	465b      	mov	r3, fp
 800af7e:	4629      	mov	r1, r5
 800af80:	4620      	mov	r0, r4
 800af82:	f000 fe2d 	bl	800bbe0 <acc_confprogram_patch_offset>
 800af86:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 800af8a:	9301      	str	r3, [sp, #4]
 800af8c:	23d6      	movs	r3, #214	; 0xd6
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	4632      	mov	r2, r6
 800af92:	465b      	mov	r3, fp
 800af94:	4629      	mov	r1, r5
 800af96:	4620      	mov	r0, r4
 800af98:	f000 fe22 	bl	800bbe0 <acc_confprogram_patch_offset>
 800af9c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	23f6      	movs	r3, #246	; 0xf6
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	4632      	mov	r2, r6
 800afa8:	465b      	mov	r3, fp
 800afaa:	4629      	mov	r1, r5
 800afac:	4620      	mov	r0, r4
 800afae:	f000 fe17 	bl	800bbe0 <acc_confprogram_patch_offset>
 800afb2:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	2385      	movs	r3, #133	; 0x85
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4632      	mov	r2, r6
 800afbe:	465b      	mov	r3, fp
 800afc0:	4629      	mov	r1, r5
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 fe0c 	bl	800bbe0 <acc_confprogram_patch_offset>
 800afc8:	f8d8 705c 	ldr.w	r7, [r8, #92]	; 0x5c
 800afcc:	b2bb      	uxth	r3, r7
 800afce:	2b08      	cmp	r3, #8
 800afd0:	f200 8110 	bhi.w	800b1f4 <acc_cpd_sparse_sweep_load_program+0x6e4>
 800afd4:	4699      	mov	r9, r3
 800afd6:	2700      	movs	r7, #0
 800afd8:	23ec      	movs	r3, #236	; 0xec
 800afda:	e9cd 3900 	strd	r3, r9, [sp]
 800afde:	4632      	mov	r2, r6
 800afe0:	465b      	mov	r3, fp
 800afe2:	4629      	mov	r1, r5
 800afe4:	4620      	mov	r0, r4
 800afe6:	f000 fdfb 	bl	800bbe0 <acc_confprogram_patch_offset>
 800afea:	23dc      	movs	r3, #220	; 0xdc
 800afec:	4632      	mov	r2, r6
 800afee:	e9cd 3900 	strd	r3, r9, [sp]
 800aff2:	4629      	mov	r1, r5
 800aff4:	465b      	mov	r3, fp
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 fdf2 	bl	800bbe0 <acc_confprogram_patch_offset>
 800affc:	21ee      	movs	r1, #238	; 0xee
 800affe:	4658      	mov	r0, fp
 800b000:	f000 fee2 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b004:	21f0      	movs	r1, #240	; 0xf0
 800b006:	4603      	mov	r3, r0
 800b008:	4658      	mov	r0, fp
 800b00a:	930a      	str	r3, [sp, #40]	; 0x28
 800b00c:	f000 fedc 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b010:	21ef      	movs	r1, #239	; 0xef
 800b012:	4682      	mov	sl, r0
 800b014:	4658      	mov	r0, fp
 800b016:	f000 fed7 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b01a:	21de      	movs	r1, #222	; 0xde
 800b01c:	4681      	mov	r9, r0
 800b01e:	4658      	mov	r0, fp
 800b020:	f000 fed2 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b024:	21e0      	movs	r1, #224	; 0xe0
 800b026:	4602      	mov	r2, r0
 800b028:	4658      	mov	r0, fp
 800b02a:	9202      	str	r2, [sp, #8]
 800b02c:	f000 fecc 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b030:	21df      	movs	r1, #223	; 0xdf
 800b032:	4602      	mov	r2, r0
 800b034:	4658      	mov	r0, fp
 800b036:	9206      	str	r2, [sp, #24]
 800b038:	f000 fec6 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b03c:	21d0      	movs	r1, #208	; 0xd0
 800b03e:	4602      	mov	r2, r0
 800b040:	4658      	mov	r0, fp
 800b042:	9207      	str	r2, [sp, #28]
 800b044:	f000 fec0 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b048:	2188      	movs	r1, #136	; 0x88
 800b04a:	4602      	mov	r2, r0
 800b04c:	4658      	mov	r0, fp
 800b04e:	9208      	str	r2, [sp, #32]
 800b050:	f000 feba 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b054:	2121      	movs	r1, #33	; 0x21
 800b056:	4602      	mov	r2, r0
 800b058:	4658      	mov	r0, fp
 800b05a:	9209      	str	r2, [sp, #36]	; 0x24
 800b05c:	f000 feb4 	bl	800bdc8 <acc_confprogram_get_default_value>
 800b060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b062:	21ee      	movs	r1, #238	; 0xee
 800b064:	433b      	orrs	r3, r7
 800b066:	4684      	mov	ip, r0
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	9100      	str	r1, [sp, #0]
 800b06c:	465b      	mov	r3, fp
 800b06e:	4632      	mov	r2, r6
 800b070:	4629      	mov	r1, r5
 800b072:	4620      	mov	r0, r4
 800b074:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800b078:	f000 fdb2 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b07c:	ea47 030a 	orr.w	r3, r7, sl
 800b080:	21f0      	movs	r1, #240	; 0xf0
 800b082:	9301      	str	r3, [sp, #4]
 800b084:	9100      	str	r1, [sp, #0]
 800b086:	465b      	mov	r3, fp
 800b088:	4632      	mov	r2, r6
 800b08a:	4629      	mov	r1, r5
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fda7 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b092:	ea47 0309 	orr.w	r3, r7, r9
 800b096:	22ef      	movs	r2, #239	; 0xef
 800b098:	e9cd 2300 	strd	r2, r3, [sp]
 800b09c:	4629      	mov	r1, r5
 800b09e:	465b      	mov	r3, fp
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fd9c 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	22de      	movs	r2, #222	; 0xde
 800b0ac:	433b      	orrs	r3, r7
 800b0ae:	e9cd 2300 	strd	r2, r3, [sp]
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	465b      	mov	r3, fp
 800b0b6:	4632      	mov	r2, r6
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 fd91 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b0be:	9b06      	ldr	r3, [sp, #24]
 800b0c0:	22e0      	movs	r2, #224	; 0xe0
 800b0c2:	433b      	orrs	r3, r7
 800b0c4:	e9cd 2300 	strd	r2, r3, [sp]
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	465b      	mov	r3, fp
 800b0cc:	4632      	mov	r2, r6
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 fd86 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b0d4:	9b07      	ldr	r3, [sp, #28]
 800b0d6:	22df      	movs	r2, #223	; 0xdf
 800b0d8:	433b      	orrs	r3, r7
 800b0da:	e9cd 2300 	strd	r2, r3, [sp]
 800b0de:	4629      	mov	r1, r5
 800b0e0:	465b      	mov	r3, fp
 800b0e2:	4632      	mov	r2, r6
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f000 fd7b 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b0ea:	9b08      	ldr	r3, [sp, #32]
 800b0ec:	22d0      	movs	r2, #208	; 0xd0
 800b0ee:	433b      	orrs	r3, r7
 800b0f0:	e9cd 2300 	strd	r2, r3, [sp]
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	465b      	mov	r3, fp
 800b0f8:	4632      	mov	r2, r6
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 fd70 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b102:	2288      	movs	r2, #136	; 0x88
 800b104:	433b      	orrs	r3, r7
 800b106:	e9cd 2300 	strd	r2, r3, [sp]
 800b10a:	4629      	mov	r1, r5
 800b10c:	465b      	mov	r3, fp
 800b10e:	4632      	mov	r2, r6
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fd65 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b118:	431f      	orrs	r7, r3
 800b11a:	2321      	movs	r3, #33	; 0x21
 800b11c:	e9cd 3700 	strd	r3, r7, [sp]
 800b120:	4632      	mov	r2, r6
 800b122:	465b      	mov	r3, fp
 800b124:	4629      	mov	r1, r5
 800b126:	4620      	mov	r0, r4
 800b128:	f000 fd5a 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b12c:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800b130:	2277      	movs	r2, #119	; 0x77
 800b132:	3b01      	subs	r3, #1
 800b134:	e9cd 2300 	strd	r2, r3, [sp]
 800b138:	4629      	mov	r1, r5
 800b13a:	465b      	mov	r3, fp
 800b13c:	4632      	mov	r2, r6
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 fd4e 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b144:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800b148:	2b06      	cmp	r3, #6
 800b14a:	f63f ad0f 	bhi.w	800ab6c <acc_cpd_sparse_sweep_load_program+0x5c>
 800b14e:	2b03      	cmp	r3, #3
 800b150:	f240 80e1 	bls.w	800b316 <acc_cpd_sparse_sweep_load_program+0x806>
 800b154:	f1a3 0903 	sub.w	r9, r3, #3
 800b158:	2700      	movs	r7, #0
 800b15a:	2303      	movs	r3, #3
 800b15c:	e509      	b.n	800ab72 <acc_cpd_sparse_sweep_load_program+0x62>
 800b15e:	2700      	movs	r7, #0
 800b160:	23da      	movs	r3, #218	; 0xda
 800b162:	e9cd 3700 	strd	r3, r7, [sp]
 800b166:	4632      	mov	r2, r6
 800b168:	465b      	mov	r3, fp
 800b16a:	4629      	mov	r1, r5
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 fd37 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b172:	23db      	movs	r3, #219	; 0xdb
 800b174:	2201      	movs	r2, #1
 800b176:	e9cd 3200 	strd	r3, r2, [sp]
 800b17a:	4629      	mov	r1, r5
 800b17c:	465b      	mov	r3, fp
 800b17e:	4632      	mov	r2, r6
 800b180:	4620      	mov	r0, r4
 800b182:	f000 fd2d 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b186:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b18a:	4a67      	ldr	r2, [pc, #412]	; (800b328 <acc_cpd_sparse_sweep_load_program+0x818>)
 800b18c:	46b9      	mov	r9, r7
 800b18e:	46ba      	mov	sl, r7
 800b190:	3301      	adds	r3, #1
 800b192:	278a      	movs	r7, #138	; 0x8a
 800b194:	f8cd 9008 	str.w	r9, [sp, #8]
 800b198:	9306      	str	r3, [sp, #24]
 800b19a:	46bc      	mov	ip, r7
 800b19c:	4691      	mov	r9, r2
 800b19e:	e01b      	b.n	800b1d8 <acc_cpd_sparse_sweep_load_program+0x6c8>
 800b1a0:	e9cd ce00 	strd	ip, lr, [sp]
 800b1a4:	f000 fd1c 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b1a8:	4b60      	ldr	r3, [pc, #384]	; (800b32c <acc_cpd_sparse_sweep_load_program+0x81c>)
 800b1aa:	9a02      	ldr	r2, [sp, #8]
 800b1ac:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800b1b0:	e9cd 3200 	strd	r3, r2, [sp]
 800b1b4:	465b      	mov	r3, fp
 800b1b6:	4632      	mov	r2, r6
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fd10 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b1c0:	9a02      	ldr	r2, [sp, #8]
 800b1c2:	9b06      	ldr	r3, [sp, #24]
 800b1c4:	f10a 0a01 	add.w	sl, sl, #1
 800b1c8:	441a      	add	r2, r3
 800b1ca:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800b1ce:	9202      	str	r2, [sp, #8]
 800b1d0:	f43f adad 	beq.w	800ad2e <acc_cpd_sparse_sweep_load_program+0x21e>
 800b1d4:	f839 cf02 	ldrh.w	ip, [r9, #2]!
 800b1d8:	f8d8 7060 	ldr.w	r7, [r8, #96]	; 0x60
 800b1dc:	4557      	cmp	r7, sl
 800b1de:	f04f 0e01 	mov.w	lr, #1
 800b1e2:	465b      	mov	r3, fp
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	d8d9      	bhi.n	800b1a0 <acc_cpd_sparse_sweep_load_program+0x690>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e9cd c300 	strd	ip, r3, [sp]
 800b1f2:	e7df      	b.n	800b1b4 <acc_cpd_sparse_sweep_load_program+0x6a4>
 800b1f4:	fa1f f987 	uxth.w	r9, r7
 800b1f8:	23e5      	movs	r3, #229	; 0xe5
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f1a9 0908 	sub.w	r9, r9, #8
 800b200:	27ff      	movs	r7, #255	; 0xff
 800b202:	e9cd 3200 	strd	r3, r2, [sp]
 800b206:	fa07 f709 	lsl.w	r7, r7, r9
 800b20a:	465b      	mov	r3, fp
 800b20c:	4632      	mov	r2, r6
 800b20e:	4629      	mov	r1, r5
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fce5 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b216:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800b21a:	f04f 0908 	mov.w	r9, #8
 800b21e:	e6db      	b.n	800afd8 <acc_cpd_sparse_sweep_load_program+0x4c8>
 800b220:	230f      	movs	r3, #15
 800b222:	2201      	movs	r2, #1
 800b224:	e9cd 3200 	strd	r3, r2, [sp]
 800b228:	4629      	mov	r1, r5
 800b22a:	465b      	mov	r3, fp
 800b22c:	4632      	mov	r2, r6
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 fcd6 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b234:	f64f 7a80 	movw	sl, #65408	; 0xff80
 800b238:	2311      	movs	r3, #17
 800b23a:	e9cd 3a00 	strd	r3, sl, [sp]
 800b23e:	4632      	mov	r2, r6
 800b240:	465b      	mov	r3, fp
 800b242:	4629      	mov	r1, r5
 800b244:	4620      	mov	r0, r4
 800b246:	f000 fccb 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b24a:	f04f 0907 	mov.w	r9, #7
 800b24e:	2313      	movs	r3, #19
 800b250:	e9cd 3900 	strd	r3, r9, [sp]
 800b254:	4632      	mov	r2, r6
 800b256:	465b      	mov	r3, fp
 800b258:	4629      	mov	r1, r5
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 fcc0 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b260:	2310      	movs	r3, #16
 800b262:	e9cd 3a00 	strd	r3, sl, [sp]
 800b266:	4632      	mov	r2, r6
 800b268:	465b      	mov	r3, fp
 800b26a:	4629      	mov	r1, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 fcb7 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b272:	2312      	movs	r3, #18
 800b274:	e9cd 3700 	strd	r3, r7, [sp]
 800b278:	4632      	mov	r2, r6
 800b27a:	465b      	mov	r3, fp
 800b27c:	4629      	mov	r1, r5
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fcae 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b284:	2314      	movs	r3, #20
 800b286:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 800b28a:	e9cd 3200 	strd	r3, r2, [sp]
 800b28e:	4629      	mov	r1, r5
 800b290:	465b      	mov	r3, fp
 800b292:	4632      	mov	r2, r6
 800b294:	4620      	mov	r0, r4
 800b296:	f000 fca3 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b29a:	2315      	movs	r3, #21
 800b29c:	e9cd 3900 	strd	r3, r9, [sp]
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 fc9a 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b2ac:	230d      	movs	r3, #13
 800b2ae:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800b2b2:	e9cd 3200 	strd	r3, r2, [sp]
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	465b      	mov	r3, fp
 800b2ba:	4632      	mov	r2, r6
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f000 fc8f 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b2c2:	230e      	movs	r3, #14
 800b2c4:	e9cd 3900 	strd	r3, r9, [sp]
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	465b      	mov	r3, fp
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f000 fc86 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b2d4:	2316      	movs	r3, #22
 800b2d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2da:	e9cd 3200 	strd	r3, r2, [sp]
 800b2de:	4629      	mov	r1, r5
 800b2e0:	465b      	mov	r3, fp
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fc7b 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b2ea:	2317      	movs	r3, #23
 800b2ec:	e9cd 3900 	strd	r3, r9, [sp]
 800b2f0:	4632      	mov	r2, r6
 800b2f2:	465b      	mov	r3, fp
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 fc72 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b2fc:	e638      	b.n	800af70 <acc_cpd_sparse_sweep_load_program+0x460>
 800b2fe:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	2371      	movs	r3, #113	; 0x71
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	4632      	mov	r2, r6
 800b30a:	4629      	mov	r1, r5
 800b30c:	4620      	mov	r0, r4
 800b30e:	465b      	mov	r3, fp
 800b310:	f000 fc66 	bl	800bbe0 <acc_confprogram_patch_offset>
 800b314:	e544      	b.n	800ada0 <acc_cpd_sparse_sweep_load_program+0x290>
 800b316:	2700      	movs	r7, #0
 800b318:	46b9      	mov	r9, r7
 800b31a:	e42a      	b.n	800ab72 <acc_cpd_sparse_sweep_load_program+0x62>
 800b31c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b31e:	b00f      	add	sp, #60	; 0x3c
 800b320:	ecbd 8b04 	vpop	{d8-d9}
 800b324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b328:	080124f4 	.word	0x080124f4
 800b32c:	08012474 	.word	0x08012474

0800b330 <acc_cpd_sparse_sweep_run_program>:
 800b330:	f240 11e9 	movw	r1, #489	; 0x1e9
 800b334:	f7fe bc4e 	b.w	8009bd4 <acc_sensor_protocol_r2_run_program>

0800b338 <acc_cpd_sparse_sweep_update_program>:
 800b338:	780b      	ldrb	r3, [r1, #0]
 800b33a:	b90b      	cbnz	r3, 800b340 <acc_cpd_sparse_sweep_update_program+0x8>
 800b33c:	2001      	movs	r0, #1
 800b33e:	4770      	bx	lr
 800b340:	b500      	push	{lr}
 800b342:	b085      	sub	sp, #20
 800b344:	684b      	ldr	r3, [r1, #4]
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	4a06      	ldr	r2, [pc, #24]	; (800b364 <acc_cpd_sparse_sweep_update_program+0x2c>)
 800b34a:	9202      	str	r2, [sp, #8]
 800b34c:	23f2      	movs	r3, #242	; 0xf2
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	4905      	ldr	r1, [pc, #20]	; (800b368 <acc_cpd_sparse_sweep_update_program+0x30>)
 800b352:	4b06      	ldr	r3, [pc, #24]	; (800b36c <acc_cpd_sparse_sweep_update_program+0x34>)
 800b354:	2200      	movs	r2, #0
 800b356:	f000 fccb 	bl	800bcf0 <acc_confprogram_live_patch>
 800b35a:	2001      	movs	r0, #1
 800b35c:	b005      	add	sp, #20
 800b35e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b362:	bf00      	nop
 800b364:	080094d1 	.word	0x080094d1
 800b368:	080100a8 	.word	0x080100a8
 800b36c:	080137e4 	.word	0x080137e4

0800b370 <acc_radar_engine_check_asic_id>:
 800b370:	6800      	ldr	r0, [r0, #0]
 800b372:	2100      	movs	r1, #0
 800b374:	f7fe be48 	b.w	800a008 <acc_sensor_protocol_r2_check_asic_id>

0800b378 <acc_radar_engine_wait_for_radar_data>:
 800b378:	6800      	ldr	r0, [r0, #0]
 800b37a:	f7fe bdb3 	b.w	8009ee4 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b37e:	bf00      	nop

0800b380 <acc_radar_engine_measure>:
 800b380:	6800      	ldr	r0, [r0, #0]
 800b382:	f7fe bc89 	b.w	8009c98 <acc_sensor_protocol_r2_ack_event>
 800b386:	bf00      	nop

0800b388 <acc_radar_engine_wait_for_hibernate_ready>:
 800b388:	6800      	ldr	r0, [r0, #0]
 800b38a:	f7fe bda7 	b.w	8009edc <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800b38e:	bf00      	nop

0800b390 <acc_radar_engine_acquire_adc_data>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	ed2d 8b02 	vpush	{d8}
 800b398:	2600      	movs	r6, #0
 800b39a:	6016      	str	r6, [r2, #0]
 800b39c:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800b3a0:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800b4b8 <acc_radar_engine_acquire_adc_data+0x128>
 800b3a4:	7bc3      	ldrb	r3, [r0, #15]
 800b3a6:	f890 800e 	ldrb.w	r8, [r0, #14]
 800b3aa:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800b3ae:	7316      	strb	r6, [r2, #12]
 800b3b0:	b089      	sub	sp, #36	; 0x24
 800b3b2:	460f      	mov	r7, r1
 800b3b4:	7116      	strb	r6, [r2, #4]
 800b3b6:	f88d 600e 	strb.w	r6, [sp, #14]
 800b3ba:	f88d 600f 	strb.w	r6, [sp, #15]
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	ed82 8a02 	vstr	s16, [r2, #8]
 800b3c4:	f1ba 0f00 	cmp.w	sl, #0
 800b3c8:	d05b      	beq.n	800b482 <acc_radar_engine_acquire_adc_data+0xf2>
 800b3ca:	4647      	mov	r7, r8
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	4688      	mov	r8, r1
 800b3d2:	b927      	cbnz	r7, 800b3de <acc_radar_engine_acquire_adc_data+0x4e>
 800b3d4:	6828      	ldr	r0, [r5, #0]
 800b3d6:	f7fe fc5f 	bl	8009c98 <acc_sensor_protocol_r2_ack_event>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d05e      	beq.n	800b49c <acc_radar_engine_acquire_adc_data+0x10c>
 800b3de:	6828      	ldr	r0, [r5, #0]
 800b3e0:	f10d 020e 	add.w	r2, sp, #14
 800b3e4:	4659      	mov	r1, fp
 800b3e6:	f7fe fd7d 	bl	8009ee4 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d056      	beq.n	800b49c <acc_radar_engine_acquire_adc_data+0x10c>
 800b3ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b3f2:	b903      	cbnz	r3, 800b3f6 <acc_radar_engine_acquire_adc_data+0x66>
 800b3f4:	78a3      	ldrb	r3, [r4, #2]
 800b3f6:	69aa      	ldr	r2, [r5, #24]
 800b3f8:	70a3      	strb	r3, [r4, #2]
 800b3fa:	4641      	mov	r1, r8
 800b3fc:	6953      	ldr	r3, [r2, #20]
 800b3fe:	4628      	mov	r0, r5
 800b400:	f10d 020f 	add.w	r2, sp, #15
 800b404:	4798      	blx	r3
 800b406:	69aa      	ldr	r2, [r5, #24]
 800b408:	9004      	str	r0, [sp, #16]
 800b40a:	2300      	movs	r3, #0
 800b40c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b410:	f88d 3014 	strb.w	r3, [sp, #20]
 800b414:	f88d 301c 	strb.w	r3, [sp, #28]
 800b418:	ed8d 8a06 	vstr	s16, [sp, #24]
 800b41c:	ab05      	add	r3, sp, #20
 800b41e:	aa04      	add	r2, sp, #16
 800b420:	4641      	mov	r1, r8
 800b422:	4628      	mov	r0, r5
 800b424:	47c8      	blx	r9
 800b426:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b42a:	b903      	cbnz	r3, 800b42e <acc_radar_engine_acquire_adc_data+0x9e>
 800b42c:	7b23      	ldrb	r3, [r4, #12]
 800b42e:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800b432:	7323      	strb	r3, [r4, #12]
 800b434:	f1b9 0f00 	cmp.w	r9, #0
 800b438:	d129      	bne.n	800b48e <acc_radar_engine_acquire_adc_data+0xfe>
 800b43a:	7923      	ldrb	r3, [r4, #4]
 800b43c:	edd4 0a02 	vldr	s1, [r4, #8]
 800b440:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b444:	7123      	strb	r3, [r4, #4]
 800b446:	f003 fcf7 	bl	800ee38 <fmaxf>
 800b44a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b44e:	ed84 0a02 	vstr	s0, [r4, #8]
 800b452:	b902      	cbnz	r2, 800b456 <acc_radar_engine_acquire_adc_data+0xc6>
 800b454:	78e2      	ldrb	r2, [r4, #3]
 800b456:	8821      	ldrh	r1, [r4, #0]
 800b458:	9b04      	ldr	r3, [sp, #16]
 800b45a:	70e2      	strb	r2, [r4, #3]
 800b45c:	69aa      	ldr	r2, [r5, #24]
 800b45e:	440b      	add	r3, r1
 800b460:	8023      	strh	r3, [r4, #0]
 800b462:	4649      	mov	r1, r9
 800b464:	69d3      	ldr	r3, [r2, #28]
 800b466:	4628      	mov	r0, r5
 800b468:	4798      	blx	r3
 800b46a:	9b01      	ldr	r3, [sp, #4]
 800b46c:	b11b      	cbz	r3, 800b476 <acc_radar_engine_acquire_adc_data+0xe6>
 800b46e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b472:	42b3      	cmp	r3, r6
 800b474:	d018      	beq.n	800b4a8 <acc_radar_engine_acquire_adc_data+0x118>
 800b476:	b967      	cbnz	r7, 800b492 <acc_radar_engine_acquire_adc_data+0x102>
 800b478:	3601      	adds	r6, #1
 800b47a:	b2b3      	uxth	r3, r6
 800b47c:	4553      	cmp	r3, sl
 800b47e:	d3a8      	bcc.n	800b3d2 <acc_radar_engine_acquire_adc_data+0x42>
 800b480:	4647      	mov	r7, r8
 800b482:	6838      	ldr	r0, [r7, #0]
 800b484:	b009      	add	sp, #36	; 0x24
 800b486:	ecbd 8b02 	vpop	{d8}
 800b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48e:	464b      	mov	r3, r9
 800b490:	e7d4      	b.n	800b43c <acc_radar_engine_acquire_adc_data+0xac>
 800b492:	6828      	ldr	r0, [r5, #0]
 800b494:	f7fe fc00 	bl	8009c98 <acc_sensor_protocol_r2_ack_event>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d1ed      	bne.n	800b478 <acc_radar_engine_acquire_adc_data+0xe8>
 800b49c:	2000      	movs	r0, #0
 800b49e:	b009      	add	sp, #36	; 0x24
 800b4a0:	ecbd 8b02 	vpop	{d8}
 800b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a8:	f8d8 0000 	ldr.w	r0, [r8]
 800b4ac:	b009      	add	sp, #36	; 0x24
 800b4ae:	ecbd 8b02 	vpop	{d8}
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	bf00      	nop
 800b4b8:	ff800000 	.word	0xff800000

0800b4bc <acc_sensor_diagnostics_r2_sensor_status>:
 800b4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c0:	b094      	sub	sp, #80	; 0x50
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	f7fc fa92 	bl	80079ec <acc_rss_integration_log_level>
 800b4c8:	2801      	cmp	r0, #1
 800b4ca:	d905      	bls.n	800b4d8 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800b4cc:	4b9c      	ldr	r3, [pc, #624]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b4ce:	4a9d      	ldr	r2, [pc, #628]	; (800b744 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800b4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d2:	499d      	ldr	r1, [pc, #628]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b4d4:	2002      	movs	r0, #2
 800b4d6:	4798      	blx	r3
 800b4d8:	2201      	movs	r2, #1
 800b4da:	21b2      	movs	r1, #178	; 0xb2
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f7fe ffc5 	bl	800a46c <acc_sensor_reg_write>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f8df a258 	ldr.w	sl, [pc, #600]	; 800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800b4e8:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800b774 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800b4ec:	4f96      	ldr	r7, [pc, #600]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b4ee:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800b4f2:	2564      	movs	r5, #100	; 0x64
 800b4f4:	e013      	b.n	800b51e <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800b4f6:	f7fc fa79 	bl	80079ec <acc_rss_integration_log_level>
 800b4fa:	2801      	cmp	r0, #1
 800b4fc:	4623      	mov	r3, r4
 800b4fe:	464a      	mov	r2, r9
 800b500:	4639      	mov	r1, r7
 800b502:	f04f 0002 	mov.w	r0, #2
 800b506:	d907      	bls.n	800b518 <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800b508:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800b50c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b510:	9600      	str	r6, [sp, #0]
 800b512:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800b516:	47b0      	blx	r6
 800b518:	3d01      	subs	r5, #1
 800b51a:	b2ad      	uxth	r5, r5
 800b51c:	b1c5      	cbz	r5, 800b550 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b51e:	aa0c      	add	r2, sp, #48	; 0x30
 800b520:	2111      	movs	r1, #17
 800b522:	4620      	mov	r0, r4
 800b524:	f7fe ff8c 	bl	800a440 <acc_sensor_reg_read>
 800b528:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b52c:	055b      	lsls	r3, r3, #21
 800b52e:	d4e2      	bmi.n	800b4f6 <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800b530:	f7fc fa5c 	bl	80079ec <acc_rss_integration_log_level>
 800b534:	2801      	cmp	r0, #1
 800b536:	d90b      	bls.n	800b550 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b538:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b53c:	4980      	ldr	r1, [pc, #512]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b53e:	4a83      	ldr	r2, [pc, #524]	; (800b74c <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800b540:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b542:	4981      	ldr	r1, [pc, #516]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	2002      	movs	r0, #2
 800b54c:	4623      	mov	r3, r4
 800b54e:	47a8      	blx	r5
 800b550:	2600      	movs	r6, #0
 800b552:	4631      	mov	r1, r6
 800b554:	aa09      	add	r2, sp, #36	; 0x24
 800b556:	4620      	mov	r0, r4
 800b558:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800b55c:	4d7c      	ldr	r5, [pc, #496]	; (800b750 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800b55e:	f7fe ff6f 	bl	800a440 <acc_sensor_reg_read>
 800b562:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b566:	212a      	movs	r1, #42	; 0x2a
 800b568:	4620      	mov	r0, r4
 800b56a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800b56e:	f7fe ff67 	bl	800a440 <acc_sensor_reg_read>
 800b572:	2128      	movs	r1, #40	; 0x28
 800b574:	aa0a      	add	r2, sp, #40	; 0x28
 800b576:	4620      	mov	r0, r4
 800b578:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800b57c:	f105 071e 	add.w	r7, r5, #30
 800b580:	f7fe ff5e 	bl	800a440 <acc_sensor_reg_read>
 800b584:	ae0c      	add	r6, sp, #48	; 0x30
 800b586:	2163      	movs	r1, #99	; 0x63
 800b588:	e001      	b.n	800b58e <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800b58a:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b58e:	4632      	mov	r2, r6
 800b590:	4620      	mov	r0, r4
 800b592:	f7fe ff55 	bl	800a440 <acc_sensor_reg_read>
 800b596:	42af      	cmp	r7, r5
 800b598:	f106 0602 	add.w	r6, r6, #2
 800b59c:	d1f5      	bne.n	800b58a <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800b59e:	f7fc fa25 	bl	80079ec <acc_rss_integration_log_level>
 800b5a2:	2801      	cmp	r0, #1
 800b5a4:	d91e      	bls.n	800b5e4 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800b5a6:	4d66      	ldr	r5, [pc, #408]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b5a8:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800b5ac:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800b5b0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b5b2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800b5b6:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b5ba:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800b5be:	9107      	str	r1, [sp, #28]
 800b5c0:	9206      	str	r2, [sp, #24]
 800b5c2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b5c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b5ca:	9305      	str	r3, [sp, #20]
 800b5cc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b5d6:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b5da:	4a5e      	ldr	r2, [pc, #376]	; (800b754 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800b5dc:	495a      	ldr	r1, [pc, #360]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b5de:	4623      	mov	r3, r4
 800b5e0:	2002      	movs	r0, #2
 800b5e2:	47a8      	blx	r5
 800b5e4:	f7fc fa02 	bl	80079ec <acc_rss_integration_log_level>
 800b5e8:	2801      	cmp	r0, #1
 800b5ea:	d91e      	bls.n	800b62a <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800b5ec:	4d54      	ldr	r5, [pc, #336]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b5ee:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800b5f2:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800b5f6:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b5f8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800b5fc:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800b600:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800b604:	9107      	str	r1, [sp, #28]
 800b606:	9206      	str	r2, [sp, #24]
 800b608:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800b60c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800b610:	9305      	str	r3, [sp, #20]
 800b612:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b61c:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b620:	4a4d      	ldr	r2, [pc, #308]	; (800b758 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800b622:	4949      	ldr	r1, [pc, #292]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b624:	4623      	mov	r3, r4
 800b626:	2002      	movs	r0, #2
 800b628:	47a8      	blx	r5
 800b62a:	aa0c      	add	r2, sp, #48	; 0x30
 800b62c:	2168      	movs	r1, #104	; 0x68
 800b62e:	4620      	mov	r0, r4
 800b630:	f7fe ff06 	bl	800a440 <acc_sensor_reg_read>
 800b634:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800b638:	2167      	movs	r1, #103	; 0x67
 800b63a:	4620      	mov	r0, r4
 800b63c:	f7fe ff00 	bl	800a440 <acc_sensor_reg_read>
 800b640:	aa0d      	add	r2, sp, #52	; 0x34
 800b642:	2166      	movs	r1, #102	; 0x66
 800b644:	4620      	mov	r0, r4
 800b646:	f7fe fefb 	bl	800a440 <acc_sensor_reg_read>
 800b64a:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800b64e:	2165      	movs	r1, #101	; 0x65
 800b650:	4620      	mov	r0, r4
 800b652:	f7fe fef5 	bl	800a440 <acc_sensor_reg_read>
 800b656:	f7fc f9c9 	bl	80079ec <acc_rss_integration_log_level>
 800b65a:	2801      	cmp	r0, #1
 800b65c:	d912      	bls.n	800b684 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800b65e:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b662:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b666:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b66a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b66e:	4d34      	ldr	r5, [pc, #208]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b670:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b672:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800b676:	e9cd 3200 	strd	r3, r2, [sp]
 800b67a:	4933      	ldr	r1, [pc, #204]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b67c:	4a37      	ldr	r2, [pc, #220]	; (800b75c <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800b67e:	4623      	mov	r3, r4
 800b680:	2002      	movs	r0, #2
 800b682:	47a8      	blx	r5
 800b684:	2500      	movs	r5, #0
 800b686:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800b68a:	2153      	movs	r1, #83	; 0x53
 800b68c:	4620      	mov	r0, r4
 800b68e:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800b692:	f7fe fed5 	bl	800a440 <acc_sensor_reg_read>
 800b696:	aa0c      	add	r2, sp, #48	; 0x30
 800b698:	2140      	movs	r1, #64	; 0x40
 800b69a:	4620      	mov	r0, r4
 800b69c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b6a0:	f7fe fece 	bl	800a440 <acc_sensor_reg_read>
 800b6a4:	f7fc f9a2 	bl	80079ec <acc_rss_integration_log_level>
 800b6a8:	2801      	cmp	r0, #1
 800b6aa:	d909      	bls.n	800b6c0 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800b6ac:	4a24      	ldr	r2, [pc, #144]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6b2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b6b4:	4924      	ldr	r1, [pc, #144]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	4a29      	ldr	r2, [pc, #164]	; (800b760 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800b6ba:	4623      	mov	r3, r4
 800b6bc:	2002      	movs	r0, #2
 800b6be:	47a8      	blx	r5
 800b6c0:	f7fc f994 	bl	80079ec <acc_rss_integration_log_level>
 800b6c4:	2801      	cmp	r0, #1
 800b6c6:	d90e      	bls.n	800b6e6 <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800b6c8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6cc:	491c      	ldr	r1, [pc, #112]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6ce:	4a25      	ldr	r2, [pc, #148]	; (800b764 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800b6d0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b6d2:	491d      	ldr	r1, [pc, #116]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6d4:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800b6d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6dc:	e9cd 3000 	strd	r3, r0, [sp]
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	2002      	movs	r0, #2
 800b6e4:	47a8      	blx	r5
 800b6e6:	f7fc f981 	bl	80079ec <acc_rss_integration_log_level>
 800b6ea:	2801      	cmp	r0, #1
 800b6ec:	d90e      	bls.n	800b70c <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800b6ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6f2:	4913      	ldr	r1, [pc, #76]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6f4:	4a1c      	ldr	r2, [pc, #112]	; (800b768 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800b6f6:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b6f8:	4913      	ldr	r1, [pc, #76]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6fa:	f003 0010 	and.w	r0, r3, #16
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	e9cd 3000 	strd	r3, r0, [sp]
 800b706:	4623      	mov	r3, r4
 800b708:	2002      	movs	r0, #2
 800b70a:	47a8      	blx	r5
 800b70c:	f7fc f96e 	bl	80079ec <acc_rss_integration_log_level>
 800b710:	2801      	cmp	r0, #1
 800b712:	d90e      	bls.n	800b732 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800b714:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b718:	4909      	ldr	r1, [pc, #36]	; (800b740 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b71a:	4a14      	ldr	r2, [pc, #80]	; (800b76c <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800b71c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b71e:	490a      	ldr	r1, [pc, #40]	; (800b748 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b720:	f003 0004 	and.w	r0, r3, #4
 800b724:	f003 0308 	and.w	r3, r3, #8
 800b728:	e9cd 3000 	strd	r3, r0, [sp]
 800b72c:	4623      	mov	r3, r4
 800b72e:	2002      	movs	r0, #2
 800b730:	47a8      	blx	r5
 800b732:	4d0f      	ldr	r5, [pc, #60]	; (800b770 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800b734:	ae0c      	add	r6, sp, #48	; 0x30
 800b736:	f105 071e 	add.w	r7, r5, #30
 800b73a:	21f0      	movs	r1, #240	; 0xf0
 800b73c:	e01e      	b.n	800b77c <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800b73e:	bf00      	nop
 800b740:	200007b0 	.word	0x200007b0
 800b744:	08012574 	.word	0x08012574
 800b748:	080125b4 	.word	0x080125b4
 800b74c:	080125ec 	.word	0x080125ec
 800b750:	080128fc 	.word	0x080128fc
 800b754:	0801260c 	.word	0x0801260c
 800b758:	08012654 	.word	0x08012654
 800b75c:	080126a0 	.word	0x080126a0
 800b760:	080126d4 	.word	0x080126d4
 800b764:	080126f4 	.word	0x080126f4
 800b768:	08012720 	.word	0x08012720
 800b76c:	08012754 	.word	0x08012754
 800b770:	0801291c 	.word	0x0801291c
 800b774:	080125cc 	.word	0x080125cc
 800b778:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b77c:	4632      	mov	r2, r6
 800b77e:	4620      	mov	r0, r4
 800b780:	f7fe fe5e 	bl	800a440 <acc_sensor_reg_read>
 800b784:	42bd      	cmp	r5, r7
 800b786:	f106 0602 	add.w	r6, r6, #2
 800b78a:	d1f5      	bne.n	800b778 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800b78c:	f7fc f92e 	bl	80079ec <acc_rss_integration_log_level>
 800b790:	2801      	cmp	r0, #1
 800b792:	f240 80b6 	bls.w	800b902 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800b796:	4a5c      	ldr	r2, [pc, #368]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b798:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b79c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b79e:	495b      	ldr	r1, [pc, #364]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	4a5b      	ldr	r2, [pc, #364]	; (800b910 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	2002      	movs	r0, #2
 800b7a8:	47a8      	blx	r5
 800b7aa:	2501      	movs	r5, #1
 800b7ac:	f7fc f91e 	bl	80079ec <acc_rss_integration_log_level>
 800b7b0:	2801      	cmp	r0, #1
 800b7b2:	d90e      	bls.n	800b7d2 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800b7b4:	ab14      	add	r3, sp, #80	; 0x50
 800b7b6:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800b7ba:	4b53      	ldr	r3, [pc, #332]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b7bc:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800b7c0:	9200      	str	r2, [sp, #0]
 800b7c2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b7c4:	4a53      	ldr	r2, [pc, #332]	; (800b914 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800b7c6:	4951      	ldr	r1, [pc, #324]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b7c8:	3501      	adds	r5, #1
 800b7ca:	4623      	mov	r3, r4
 800b7cc:	2002      	movs	r0, #2
 800b7ce:	b2ed      	uxtb	r5, r5
 800b7d0:	47b0      	blx	r6
 800b7d2:	f8df a134 	ldr.w	sl, [pc, #308]	; 800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800b7d6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800b930 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800b7da:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800b7de:	2601      	movs	r6, #1
 800b7e0:	f7fc f904 	bl	80079ec <acc_rss_integration_log_level>
 800b7e4:	ab14      	add	r3, sp, #80	; 0x50
 800b7e6:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800b7ea:	2801      	cmp	r0, #1
 800b7ec:	4667      	mov	r7, ip
 800b7ee:	4623      	mov	r3, r4
 800b7f0:	464a      	mov	r2, r9
 800b7f2:	4641      	mov	r1, r8
 800b7f4:	f04f 0002 	mov.w	r0, #2
 800b7f8:	d909      	bls.n	800b80e <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800b7fa:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800b7fe:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800b802:	9600      	str	r6, [sp, #0]
 800b804:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800b808:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800b80c:	47b8      	blx	r7
 800b80e:	3601      	adds	r6, #1
 800b810:	3502      	adds	r5, #2
 800b812:	2e08      	cmp	r6, #8
 800b814:	b2ed      	uxtb	r5, r5
 800b816:	d1e3      	bne.n	800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800b818:	2500      	movs	r5, #0
 800b81a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b81c:	219d      	movs	r1, #157	; 0x9d
 800b81e:	4620      	mov	r0, r4
 800b820:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800b824:	f7fe fe0c 	bl	800a440 <acc_sensor_reg_read>
 800b828:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800b82c:	2199      	movs	r1, #153	; 0x99
 800b82e:	4620      	mov	r0, r4
 800b830:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800b834:	f7fe fe04 	bl	800a440 <acc_sensor_reg_read>
 800b838:	aa0c      	add	r2, sp, #48	; 0x30
 800b83a:	2196      	movs	r1, #150	; 0x96
 800b83c:	4620      	mov	r0, r4
 800b83e:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b842:	f7fe fdfd 	bl	800a440 <acc_sensor_reg_read>
 800b846:	462a      	mov	r2, r5
 800b848:	21b2      	movs	r1, #178	; 0xb2
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7fe fe0e 	bl	800a46c <acc_sensor_reg_write>
 800b850:	f7fc f8cc 	bl	80079ec <acc_rss_integration_log_level>
 800b854:	2801      	cmp	r0, #1
 800b856:	d90f      	bls.n	800b878 <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800b858:	482b      	ldr	r0, [pc, #172]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b85a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800b85e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b862:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b866:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b86e:	4623      	mov	r3, r4
 800b870:	4a29      	ldr	r2, [pc, #164]	; (800b918 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800b872:	4926      	ldr	r1, [pc, #152]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b874:	2002      	movs	r0, #2
 800b876:	47a8      	blx	r5
 800b878:	f7fc f8b8 	bl	80079ec <acc_rss_integration_log_level>
 800b87c:	2801      	cmp	r0, #1
 800b87e:	d909      	bls.n	800b894 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800b880:	4a21      	ldr	r2, [pc, #132]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b882:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800b886:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b888:	4920      	ldr	r1, [pc, #128]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	4a23      	ldr	r2, [pc, #140]	; (800b91c <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800b88e:	4623      	mov	r3, r4
 800b890:	2002      	movs	r0, #2
 800b892:	47a8      	blx	r5
 800b894:	f7fc f8aa 	bl	80079ec <acc_rss_integration_log_level>
 800b898:	2801      	cmp	r0, #1
 800b89a:	d909      	bls.n	800b8b0 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800b89c:	4a1a      	ldr	r2, [pc, #104]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b89e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b8a2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b8a4:	4919      	ldr	r1, [pc, #100]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	4a1d      	ldr	r2, [pc, #116]	; (800b920 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800b8aa:	4623      	mov	r3, r4
 800b8ac:	2002      	movs	r0, #2
 800b8ae:	47a8      	blx	r5
 800b8b0:	f7fc f89c 	bl	80079ec <acc_rss_integration_log_level>
 800b8b4:	2801      	cmp	r0, #1
 800b8b6:	d909      	bls.n	800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800b8b8:	4a13      	ldr	r2, [pc, #76]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8ba:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800b8be:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b8c0:	4912      	ldr	r1, [pc, #72]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	4a17      	ldr	r2, [pc, #92]	; (800b924 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800b8c6:	4623      	mov	r3, r4
 800b8c8:	2002      	movs	r0, #2
 800b8ca:	47a8      	blx	r5
 800b8cc:	f7fc f88e 	bl	80079ec <acc_rss_integration_log_level>
 800b8d0:	2801      	cmp	r0, #1
 800b8d2:	d909      	bls.n	800b8e8 <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800b8d4:	4a0c      	ldr	r2, [pc, #48]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8d6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b8da:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b8dc:	490b      	ldr	r1, [pc, #44]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	4a11      	ldr	r2, [pc, #68]	; (800b928 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800b8e2:	4623      	mov	r3, r4
 800b8e4:	2002      	movs	r0, #2
 800b8e6:	47a8      	blx	r5
 800b8e8:	f7fc f880 	bl	80079ec <acc_rss_integration_log_level>
 800b8ec:	2801      	cmp	r0, #1
 800b8ee:	d905      	bls.n	800b8fc <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800b8f0:	4b05      	ldr	r3, [pc, #20]	; (800b908 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8f2:	4a0e      	ldr	r2, [pc, #56]	; (800b92c <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800b8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f6:	4905      	ldr	r1, [pc, #20]	; (800b90c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8f8:	2002      	movs	r0, #2
 800b8fa:	4798      	blx	r3
 800b8fc:	b014      	add	sp, #80	; 0x50
 800b8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b902:	2500      	movs	r5, #0
 800b904:	e752      	b.n	800b7ac <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800b906:	bf00      	nop
 800b908:	200007b0 	.word	0x200007b0
 800b90c:	080125b4 	.word	0x080125b4
 800b910:	08012784 	.word	0x08012784
 800b914:	080127ac 	.word	0x080127ac
 800b918:	080127f4 	.word	0x080127f4
 800b91c:	08012848 	.word	0x08012848
 800b920:	0801286c 	.word	0x0801286c
 800b924:	08012888 	.word	0x08012888
 800b928:	080128a0 	.word	0x080128a0
 800b92c:	080128bc 	.word	0x080128bc
 800b930:	080127cc 	.word	0x080127cc

0800b934 <acc_alg_basic_saturation_check_u16>:
 800b934:	eddf 6a17 	vldr	s13, [pc, #92]	; 800b994 <acc_alg_basic_saturation_check_u16+0x60>
 800b938:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800b998 <acc_alg_basic_saturation_check_u16+0x64>
 800b93c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b940:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800b944:	0849      	lsrs	r1, r1, #1
 800b946:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800b94a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b94e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b952:	d01c      	beq.n	800b98e <acc_alg_basic_saturation_check_u16+0x5a>
 800b954:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b95c:	ee17 3a10 	vmov	r3, s14
 800b960:	b430      	push	{r4, r5}
 800b962:	b29d      	uxth	r5, r3
 800b964:	ee17 3a90 	vmov	r3, s15
 800b968:	b29c      	uxth	r4, r3
 800b96a:	1e83      	subs	r3, r0, #2
 800b96c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800b970:	e003      	b.n	800b97a <acc_alg_basic_saturation_check_u16+0x46>
 800b972:	42aa      	cmp	r2, r5
 800b974:	d905      	bls.n	800b982 <acc_alg_basic_saturation_check_u16+0x4e>
 800b976:	428b      	cmp	r3, r1
 800b978:	d006      	beq.n	800b988 <acc_alg_basic_saturation_check_u16+0x54>
 800b97a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800b97e:	42a2      	cmp	r2, r4
 800b980:	d3f7      	bcc.n	800b972 <acc_alg_basic_saturation_check_u16+0x3e>
 800b982:	2001      	movs	r0, #1
 800b984:	bc30      	pop	{r4, r5}
 800b986:	4770      	bx	lr
 800b988:	2000      	movs	r0, #0
 800b98a:	bc30      	pop	{r4, r5}
 800b98c:	4770      	bx	lr
 800b98e:	4608      	mov	r0, r1
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	42c80000 	.word	0x42c80000
 800b998:	477fff00 	.word	0x477fff00

0800b99c <acc_alg_basic_saturation_check_i16>:
 800b99c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800b9fc <acc_alg_basic_saturation_check_i16+0x60>
 800b9a0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800ba00 <acc_alg_basic_saturation_check_i16+0x64>
 800b9a4:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800ba04 <acc_alg_basic_saturation_check_i16+0x68>
 800b9a8:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800b9ac:	0849      	lsrs	r1, r1, #1
 800b9ae:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800b9b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b9b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b9ba:	d01c      	beq.n	800b9f6 <acc_alg_basic_saturation_check_i16+0x5a>
 800b9bc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b9c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9c4:	ee17 3a10 	vmov	r3, s14
 800b9c8:	b430      	push	{r4, r5}
 800b9ca:	b21d      	sxth	r5, r3
 800b9cc:	ee17 3a90 	vmov	r3, s15
 800b9d0:	b21c      	sxth	r4, r3
 800b9d2:	1e83      	subs	r3, r0, #2
 800b9d4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800b9d8:	e003      	b.n	800b9e2 <acc_alg_basic_saturation_check_i16+0x46>
 800b9da:	42aa      	cmp	r2, r5
 800b9dc:	dd05      	ble.n	800b9ea <acc_alg_basic_saturation_check_i16+0x4e>
 800b9de:	428b      	cmp	r3, r1
 800b9e0:	d006      	beq.n	800b9f0 <acc_alg_basic_saturation_check_i16+0x54>
 800b9e2:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800b9e6:	42a2      	cmp	r2, r4
 800b9e8:	dbf7      	blt.n	800b9da <acc_alg_basic_saturation_check_i16+0x3e>
 800b9ea:	2001      	movs	r0, #1
 800b9ec:	bc30      	pop	{r4, r5}
 800b9ee:	4770      	bx	lr
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	bc30      	pop	{r4, r5}
 800b9f4:	4770      	bx	lr
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	42c80000 	.word	0x42c80000
 800ba00:	c7000000 	.word	0xc7000000
 800ba04:	46fffe00 	.word	0x46fffe00

0800ba08 <acc_confprogram_modify_bin_sensor>:
 800ba08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ba12:	2501      	movs	r5, #1
 800ba14:	409d      	lsls	r5, r3
 800ba16:	42b5      	cmp	r5, r6
 800ba18:	4688      	mov	r8, r1
 800ba1a:	d917      	bls.n	800ba4c <acc_confprogram_modify_bin_sensor+0x44>
 800ba1c:	461c      	mov	r4, r3
 800ba1e:	4692      	mov	sl, r2
 800ba20:	4681      	mov	r9, r0
 800ba22:	f1c4 0420 	rsb	r4, r4, #32
 800ba26:	f7fe fd5f 	bl	800a4e8 <acc_sensor_conf_read_instr>
 800ba2a:	f04f 35ff 	mov.w	r5, #4294967295
 800ba2e:	40e5      	lsrs	r5, r4
 800ba30:	fa05 f40a 	lsl.w	r4, r5, sl
 800ba34:	ea20 0404 	bic.w	r4, r0, r4
 800ba38:	fa06 f20a 	lsl.w	r2, r6, sl
 800ba3c:	4641      	mov	r1, r8
 800ba3e:	4648      	mov	r0, r9
 800ba40:	4322      	orrs	r2, r4
 800ba42:	463b      	mov	r3, r7
 800ba44:	b002      	add	sp, #8
 800ba46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba4a:	4718      	bx	r3
 800ba4c:	4a06      	ldr	r2, [pc, #24]	; (800ba68 <acc_confprogram_modify_bin_sensor+0x60>)
 800ba4e:	9600      	str	r6, [sp, #0]
 800ba50:	3d01      	subs	r5, #1
 800ba52:	9501      	str	r5, [sp, #4]
 800ba54:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ba56:	4a05      	ldr	r2, [pc, #20]	; (800ba6c <acc_confprogram_modify_bin_sensor+0x64>)
 800ba58:	460b      	mov	r3, r1
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	4904      	ldr	r1, [pc, #16]	; (800ba70 <acc_confprogram_modify_bin_sensor+0x68>)
 800ba5e:	47a0      	blx	r4
 800ba60:	4803      	ldr	r0, [pc, #12]	; (800ba70 <acc_confprogram_modify_bin_sensor+0x68>)
 800ba62:	2128      	movs	r1, #40	; 0x28
 800ba64:	f7fb feaa 	bl	80077bc <acc_assert_fail>
 800ba68:	200007b0 	.word	0x200007b0
 800ba6c:	0801293c 	.word	0x0801293c
 800ba70:	08012974 	.word	0x08012974

0800ba74 <acc_confprogram_modify_bin>:
 800ba74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	2701      	movs	r7, #1
 800ba7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ba7e:	fa07 f503 	lsl.w	r5, r7, r3
 800ba82:	42b5      	cmp	r5, r6
 800ba84:	d91e      	bls.n	800bac4 <acc_confprogram_modify_bin+0x50>
 800ba86:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 800ba8a:	4690      	mov	r8, r2
 800ba8c:	461c      	mov	r4, r3
 800ba8e:	4628      	mov	r0, r5
 800ba90:	463a      	mov	r2, r7
 800ba92:	a902      	add	r1, sp, #8
 800ba94:	f7fc f80e 	bl	8007ab4 <acc_utils_transfer_buffer_to_uint32>
 800ba98:	f1c4 0420 	rsb	r4, r4, #32
 800ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 800baa0:	9902      	ldr	r1, [sp, #8]
 800baa2:	40e3      	lsrs	r3, r4
 800baa4:	fa03 f308 	lsl.w	r3, r3, r8
 800baa8:	fa06 f608 	lsl.w	r6, r6, r8
 800baac:	ea21 0303 	bic.w	r3, r1, r3
 800bab0:	4333      	orrs	r3, r6
 800bab2:	4629      	mov	r1, r5
 800bab4:	463a      	mov	r2, r7
 800bab6:	a803      	add	r0, sp, #12
 800bab8:	9303      	str	r3, [sp, #12]
 800baba:	f7fb ffed 	bl	8007a98 <acc_utils_uint32_to_transfer_buffer>
 800babe:	b004      	add	sp, #16
 800bac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac4:	4a06      	ldr	r2, [pc, #24]	; (800bae0 <acc_confprogram_modify_bin+0x6c>)
 800bac6:	9600      	str	r6, [sp, #0]
 800bac8:	3d01      	subs	r5, #1
 800baca:	9501      	str	r5, [sp, #4]
 800bacc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bace:	4a05      	ldr	r2, [pc, #20]	; (800bae4 <acc_confprogram_modify_bin+0x70>)
 800bad0:	460b      	mov	r3, r1
 800bad2:	2000      	movs	r0, #0
 800bad4:	4904      	ldr	r1, [pc, #16]	; (800bae8 <acc_confprogram_modify_bin+0x74>)
 800bad6:	47a0      	blx	r4
 800bad8:	4803      	ldr	r0, [pc, #12]	; (800bae8 <acc_confprogram_modify_bin+0x74>)
 800bada:	2138      	movs	r1, #56	; 0x38
 800badc:	f7fb fe6e 	bl	80077bc <acc_assert_fail>
 800bae0:	200007b0 	.word	0x200007b0
 800bae4:	08012980 	.word	0x08012980
 800bae8:	08012974 	.word	0x08012974

0800baec <acc_confprogram_modify_runif_sensor>:
 800baec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf0:	4614      	mov	r4, r2
 800baf2:	b082      	sub	sp, #8
 800baf4:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800baf8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800bafc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800bb00:	f025 050f 	bic.w	r5, r5, #15
 800bb04:	4606      	mov	r6, r0
 800bb06:	b1b2      	cbz	r2, 800bb36 <acc_confprogram_modify_runif_sensor+0x4a>
 800bb08:	461f      	mov	r7, r3
 800bb0a:	f7fb ff6f 	bl	80079ec <acc_rss_integration_log_level>
 800bb0e:	2803      	cmp	r0, #3
 800bb10:	ea45 0507 	orr.w	r5, r5, r7
 800bb14:	d907      	bls.n	800bb26 <acc_confprogram_modify_runif_sensor+0x3a>
 800bb16:	4b0e      	ldr	r3, [pc, #56]	; (800bb50 <acc_confprogram_modify_runif_sensor+0x64>)
 800bb18:	9700      	str	r7, [sp, #0]
 800bb1a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bb1c:	4a0d      	ldr	r2, [pc, #52]	; (800bb54 <acc_confprogram_modify_runif_sensor+0x68>)
 800bb1e:	490e      	ldr	r1, [pc, #56]	; (800bb58 <acc_confprogram_modify_runif_sensor+0x6c>)
 800bb20:	4623      	mov	r3, r4
 800bb22:	2004      	movs	r0, #4
 800bb24:	47b8      	blx	r7
 800bb26:	462a      	mov	r2, r5
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	4643      	mov	r3, r8
 800bb2e:	b002      	add	sp, #8
 800bb30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb34:	4718      	bx	r3
 800bb36:	f7fb ff59 	bl	80079ec <acc_rss_integration_log_level>
 800bb3a:	2803      	cmp	r0, #3
 800bb3c:	d9f3      	bls.n	800bb26 <acc_confprogram_modify_runif_sensor+0x3a>
 800bb3e:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <acc_confprogram_modify_runif_sensor+0x64>)
 800bb40:	4a06      	ldr	r2, [pc, #24]	; (800bb5c <acc_confprogram_modify_runif_sensor+0x70>)
 800bb42:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bb44:	4904      	ldr	r1, [pc, #16]	; (800bb58 <acc_confprogram_modify_runif_sensor+0x6c>)
 800bb46:	4623      	mov	r3, r4
 800bb48:	2004      	movs	r0, #4
 800bb4a:	47b8      	blx	r7
 800bb4c:	e7eb      	b.n	800bb26 <acc_confprogram_modify_runif_sensor+0x3a>
 800bb4e:	bf00      	nop
 800bb50:	200007b0 	.word	0x200007b0
 800bb54:	080129b8 	.word	0x080129b8
 800bb58:	08012974 	.word	0x08012974
 800bb5c:	080129f0 	.word	0x080129f0

0800bb60 <acc_confprogram_modify_runif>:
 800bb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb64:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800bb68:	b084      	sub	sp, #16
 800bb6a:	4616      	mov	r6, r2
 800bb6c:	460f      	mov	r7, r1
 800bb6e:	4628      	mov	r0, r5
 800bb70:	2201      	movs	r2, #1
 800bb72:	a902      	add	r1, sp, #8
 800bb74:	4698      	mov	r8, r3
 800bb76:	f7fb ff9d 	bl	8007ab4 <acc_utils_transfer_buffer_to_uint32>
 800bb7a:	9c02      	ldr	r4, [sp, #8]
 800bb7c:	f024 040f 	bic.w	r4, r4, #15
 800bb80:	9403      	str	r4, [sp, #12]
 800bb82:	f1b8 0f00 	cmp.w	r8, #0
 800bb86:	d015      	beq.n	800bbb4 <acc_confprogram_modify_runif+0x54>
 800bb88:	433c      	orrs	r4, r7
 800bb8a:	9403      	str	r4, [sp, #12]
 800bb8c:	f7fb ff2e 	bl	80079ec <acc_rss_integration_log_level>
 800bb90:	2803      	cmp	r0, #3
 800bb92:	d907      	bls.n	800bba4 <acc_confprogram_modify_runif+0x44>
 800bb94:	4a0e      	ldr	r2, [pc, #56]	; (800bbd0 <acc_confprogram_modify_runif+0x70>)
 800bb96:	9700      	str	r7, [sp, #0]
 800bb98:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bb9a:	490e      	ldr	r1, [pc, #56]	; (800bbd4 <acc_confprogram_modify_runif+0x74>)
 800bb9c:	4a0e      	ldr	r2, [pc, #56]	; (800bbd8 <acc_confprogram_modify_runif+0x78>)
 800bb9e:	0873      	lsrs	r3, r6, #1
 800bba0:	2004      	movs	r0, #4
 800bba2:	47a0      	blx	r4
 800bba4:	4629      	mov	r1, r5
 800bba6:	2201      	movs	r2, #1
 800bba8:	a803      	add	r0, sp, #12
 800bbaa:	f7fb ff75 	bl	8007a98 <acc_utils_uint32_to_transfer_buffer>
 800bbae:	b004      	add	sp, #16
 800bbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb4:	f7fb ff1a 	bl	80079ec <acc_rss_integration_log_level>
 800bbb8:	2803      	cmp	r0, #3
 800bbba:	d9f3      	bls.n	800bba4 <acc_confprogram_modify_runif+0x44>
 800bbbc:	4a04      	ldr	r2, [pc, #16]	; (800bbd0 <acc_confprogram_modify_runif+0x70>)
 800bbbe:	9700      	str	r7, [sp, #0]
 800bbc0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bbc2:	4904      	ldr	r1, [pc, #16]	; (800bbd4 <acc_confprogram_modify_runif+0x74>)
 800bbc4:	4a05      	ldr	r2, [pc, #20]	; (800bbdc <acc_confprogram_modify_runif+0x7c>)
 800bbc6:	0873      	lsrs	r3, r6, #1
 800bbc8:	2004      	movs	r0, #4
 800bbca:	47a0      	blx	r4
 800bbcc:	e7ea      	b.n	800bba4 <acc_confprogram_modify_runif+0x44>
 800bbce:	bf00      	nop
 800bbd0:	200007b0 	.word	0x200007b0
 800bbd4:	08012974 	.word	0x08012974
 800bbd8:	080129b8 	.word	0x080129b8
 800bbdc:	08012a20 	.word	0x08012a20

0800bbe0 <acc_confprogram_patch_offset>:
 800bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	4680      	mov	r8, r0
 800bbe8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800bbec:	460e      	mov	r6, r1
 800bbee:	4617      	mov	r7, r2
 800bbf0:	461d      	mov	r5, r3
 800bbf2:	f7fb fefb 	bl	80079ec <acc_rss_integration_log_level>
 800bbf6:	2803      	cmp	r0, #3
 800bbf8:	d909      	bls.n	800bc0e <acc_confprogram_patch_offset+0x2e>
 800bbfa:	4b39      	ldr	r3, [pc, #228]	; (800bce0 <acc_confprogram_patch_offset+0x100>)
 800bbfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbfe:	9200      	str	r2, [sp, #0]
 800bc00:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800bc04:	4a37      	ldr	r2, [pc, #220]	; (800bce4 <acc_confprogram_patch_offset+0x104>)
 800bc06:	4938      	ldr	r1, [pc, #224]	; (800bce8 <acc_confprogram_patch_offset+0x108>)
 800bc08:	4623      	mov	r3, r4
 800bc0a:	2004      	movs	r0, #4
 800bc0c:	47c8      	blx	r9
 800bc0e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bc12:	8869      	ldrh	r1, [r5, #2]
 800bc14:	2900      	cmp	r1, #0
 800bc16:	d03a      	beq.n	800bc8e <acc_confprogram_patch_offset+0xae>
 800bc18:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 800bce0 <acc_confprogram_patch_offset+0x100>
 800bc1c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800bcec <acc_confprogram_patch_offset+0x10c>
 800bc20:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800bce8 <acc_confprogram_patch_offset+0x108>
 800bc24:	2400      	movs	r4, #0
 800bc26:	e01c      	b.n	800bc62 <acc_confprogram_patch_offset+0x82>
 800bc28:	f10c 33ff 	add.w	r3, ip, #4294967295
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d824      	bhi.n	800bc7a <acc_confprogram_patch_offset+0x9a>
 800bc30:	8882      	ldrh	r2, [r0, #4]
 800bc32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d010      	beq.n	800bc5c <acc_confprogram_patch_offset+0x7c>
 800bc3a:	0052      	lsls	r2, r2, #1
 800bc3c:	fa1f fe82 	uxth.w	lr, r2
 800bc40:	45b6      	cmp	lr, r6
 800bc42:	d30b      	bcc.n	800bc5c <acc_confprogram_patch_offset+0x7c>
 800bc44:	19f3      	adds	r3, r6, r7
 800bc46:	459e      	cmp	lr, r3
 800bc48:	da08      	bge.n	800bc5c <acc_confprogram_patch_offset+0x7c>
 800bc4a:	f1bc 0f01 	cmp.w	ip, #1
 800bc4e:	d021      	beq.n	800bc94 <acc_confprogram_patch_offset+0xb4>
 800bc50:	f1bc 0f02 	cmp.w	ip, #2
 800bc54:	d037      	beq.n	800bcc6 <acc_confprogram_patch_offset+0xe6>
 800bc56:	f1bc 0f00 	cmp.w	ip, #0
 800bc5a:	d028      	beq.n	800bcae <acc_confprogram_patch_offset+0xce>
 800bc5c:	3401      	adds	r4, #1
 800bc5e:	42a1      	cmp	r1, r4
 800bc60:	d915      	bls.n	800bc8e <acc_confprogram_patch_offset+0xae>
 800bc62:	6868      	ldr	r0, [r5, #4]
 800bc64:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800bc68:	f810 c013 	ldrb.w	ip, [r0, r3, lsl #1]
 800bc6c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800bc70:	f1bc 0f00 	cmp.w	ip, #0
 800bc74:	d1d8      	bne.n	800bc28 <acc_confprogram_patch_offset+0x48>
 800bc76:	8842      	ldrh	r2, [r0, #2]
 800bc78:	e7db      	b.n	800bc32 <acc_confprogram_patch_offset+0x52>
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800bc80:	4652      	mov	r2, sl
 800bc82:	2000      	movs	r0, #0
 800bc84:	4798      	blx	r3
 800bc86:	8869      	ldrh	r1, [r5, #2]
 800bc88:	3401      	adds	r4, #1
 800bc8a:	42a1      	cmp	r1, r4
 800bc8c:	d8e9      	bhi.n	800bc62 <acc_confprogram_patch_offset+0x82>
 800bc8e:	b003      	add	sp, #12
 800bc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc96:	8841      	ldrh	r1, [r0, #2]
 800bc98:	ebae 0206 	sub.w	r2, lr, r6
 800bc9c:	3b00      	subs	r3, #0
 800bc9e:	b292      	uxth	r2, r2
 800bca0:	bf18      	it	ne
 800bca2:	2301      	movne	r3, #1
 800bca4:	4640      	mov	r0, r8
 800bca6:	f7ff ff5b 	bl	800bb60 <acc_confprogram_modify_runif>
 800bcaa:	8869      	ldrh	r1, [r5, #2]
 800bcac:	e7d6      	b.n	800bc5c <acc_confprogram_patch_offset+0x7c>
 800bcae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bcb0:	7943      	ldrb	r3, [r0, #5]
 800bcb2:	7902      	ldrb	r2, [r0, #4]
 800bcb4:	9100      	str	r1, [sp, #0]
 800bcb6:	ebae 0106 	sub.w	r1, lr, r6
 800bcba:	b289      	uxth	r1, r1
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	f7ff fed9 	bl	800ba74 <acc_confprogram_modify_bin>
 800bcc2:	8869      	ldrh	r1, [r5, #2]
 800bcc4:	e7ca      	b.n	800bc5c <acc_confprogram_patch_offset+0x7c>
 800bcc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcc8:	8841      	ldrh	r1, [r0, #2]
 800bcca:	ebae 0206 	sub.w	r2, lr, r6
 800bcce:	fab3 f383 	clz	r3, r3
 800bcd2:	b292      	uxth	r2, r2
 800bcd4:	095b      	lsrs	r3, r3, #5
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	f7ff ff42 	bl	800bb60 <acc_confprogram_modify_runif>
 800bcdc:	8869      	ldrh	r1, [r5, #2]
 800bcde:	e7bd      	b.n	800bc5c <acc_confprogram_patch_offset+0x7c>
 800bce0:	200007b0 	.word	0x200007b0
 800bce4:	08012a88 	.word	0x08012a88
 800bce8:	08012974 	.word	0x08012974
 800bcec:	08012a54 	.word	0x08012a54

0800bcf0 <acc_confprogram_live_patch>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	b083      	sub	sp, #12
 800bcf6:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
 800bcfa:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800bcfe:	4607      	mov	r7, r0
 800bd00:	468b      	mov	fp, r1
 800bd02:	4690      	mov	r8, r2
 800bd04:	461e      	mov	r6, r3
 800bd06:	f7fb fe71 	bl	80079ec <acc_rss_integration_log_level>
 800bd0a:	2803      	cmp	r0, #3
 800bd0c:	d908      	bls.n	800bd20 <acc_confprogram_live_patch+0x30>
 800bd0e:	4b2a      	ldr	r3, [pc, #168]	; (800bdb8 <acc_confprogram_live_patch+0xc8>)
 800bd10:	f8cd 9000 	str.w	r9, [sp]
 800bd14:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800bd16:	4a29      	ldr	r2, [pc, #164]	; (800bdbc <acc_confprogram_live_patch+0xcc>)
 800bd18:	4929      	ldr	r1, [pc, #164]	; (800bdc0 <acc_confprogram_live_patch+0xd0>)
 800bd1a:	4623      	mov	r3, r4
 800bd1c:	2004      	movs	r0, #4
 800bd1e:	47a8      	blx	r5
 800bd20:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800bd24:	8873      	ldrh	r3, [r6, #2]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d043      	beq.n	800bdb2 <acc_confprogram_live_patch+0xc2>
 800bd2a:	2500      	movs	r5, #0
 800bd2c:	e011      	b.n	800bd52 <acc_confprogram_live_patch+0x62>
 800bd2e:	88a2      	ldrh	r2, [r4, #4]
 800bd30:	8863      	ldrh	r3, [r4, #2]
 800bd32:	f8cd a004 	str.w	sl, [sp, #4]
 800bd36:	fab9 f189 	clz	r1, r9
 800bd3a:	4442      	add	r2, r8
 800bd3c:	0949      	lsrs	r1, r1, #5
 800bd3e:	9100      	str	r1, [sp, #0]
 800bd40:	b292      	uxth	r2, r2
 800bd42:	4659      	mov	r1, fp
 800bd44:	4638      	mov	r0, r7
 800bd46:	f7ff fed1 	bl	800baec <acc_confprogram_modify_runif_sensor>
 800bd4a:	8873      	ldrh	r3, [r6, #2]
 800bd4c:	3501      	adds	r5, #1
 800bd4e:	42ab      	cmp	r3, r5
 800bd50:	d92f      	bls.n	800bdb2 <acc_confprogram_live_patch+0xc2>
 800bd52:	6873      	ldr	r3, [r6, #4]
 800bd54:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800bd58:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
 800bd5c:	2a01      	cmp	r2, #1
 800bd5e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800bd62:	d00c      	beq.n	800bd7e <acc_confprogram_live_patch+0x8e>
 800bd64:	2a02      	cmp	r2, #2
 800bd66:	d0e2      	beq.n	800bd2e <acc_confprogram_live_patch+0x3e>
 800bd68:	b19a      	cbz	r2, 800bd92 <acc_confprogram_live_patch+0xa2>
 800bd6a:	4b13      	ldr	r3, [pc, #76]	; (800bdb8 <acc_confprogram_live_patch+0xc8>)
 800bd6c:	4914      	ldr	r1, [pc, #80]	; (800bdc0 <acc_confprogram_live_patch+0xd0>)
 800bd6e:	4a15      	ldr	r2, [pc, #84]	; (800bdc4 <acc_confprogram_live_patch+0xd4>)
 800bd70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd72:	2000      	movs	r0, #0
 800bd74:	4798      	blx	r3
 800bd76:	4812      	ldr	r0, [pc, #72]	; (800bdc0 <acc_confprogram_live_patch+0xd0>)
 800bd78:	21e6      	movs	r1, #230	; 0xe6
 800bd7a:	f7fb fd1f 	bl	80077bc <acc_assert_fail>
 800bd7e:	88a2      	ldrh	r2, [r4, #4]
 800bd80:	8863      	ldrh	r3, [r4, #2]
 800bd82:	f8cd a004 	str.w	sl, [sp, #4]
 800bd86:	f1b9 0100 	subs.w	r1, r9, #0
 800bd8a:	4442      	add	r2, r8
 800bd8c:	bf18      	it	ne
 800bd8e:	2101      	movne	r1, #1
 800bd90:	e7d5      	b.n	800bd3e <acc_confprogram_live_patch+0x4e>
 800bd92:	8861      	ldrh	r1, [r4, #2]
 800bd94:	7963      	ldrb	r3, [r4, #5]
 800bd96:	7922      	ldrb	r2, [r4, #4]
 800bd98:	f8cd a004 	str.w	sl, [sp, #4]
 800bd9c:	4441      	add	r1, r8
 800bd9e:	b289      	uxth	r1, r1
 800bda0:	f8cd 9000 	str.w	r9, [sp]
 800bda4:	4638      	mov	r0, r7
 800bda6:	f7ff fe2f 	bl	800ba08 <acc_confprogram_modify_bin_sensor>
 800bdaa:	8873      	ldrh	r3, [r6, #2]
 800bdac:	3501      	adds	r5, #1
 800bdae:	42ab      	cmp	r3, r5
 800bdb0:	d8cf      	bhi.n	800bd52 <acc_confprogram_live_patch+0x62>
 800bdb2:	b003      	add	sp, #12
 800bdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb8:	200007b0 	.word	0x200007b0
 800bdbc:	08012a84 	.word	0x08012a84
 800bdc0:	08012974 	.word	0x08012974
 800bdc4:	08012aa8 	.word	0x08012aa8

0800bdc8 <acc_confprogram_get_default_value>:
 800bdc8:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop

0800bdd0 <acc_confprogram_copy>:
 800bdd0:	b152      	cbz	r2, 800bde8 <acc_confprogram_copy+0x18>
 800bdd2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bdd6:	3804      	subs	r0, #4
 800bdd8:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800bddc:	804b      	strh	r3, [r1, #2]
 800bdde:	0c1b      	lsrs	r3, r3, #16
 800bde0:	800b      	strh	r3, [r1, #0]
 800bde2:	3104      	adds	r1, #4
 800bde4:	4291      	cmp	r1, r2
 800bde6:	d1f7      	bne.n	800bdd8 <acc_confprogram_copy+0x8>
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop

0800bdec <acc_diagnostic_log_set_scope>:
 800bdec:	4b02      	ldr	r3, [pc, #8]	; (800bdf8 <acc_diagnostic_log_set_scope+0xc>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	b10b      	cbz	r3, 800bdf6 <acc_diagnostic_log_set_scope+0xa>
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4718      	bx	r3
 800bdf6:	4770      	bx	lr
 800bdf8:	2000079c 	.word	0x2000079c

0800bdfc <acc_diagnostic_log_declare_parameter>:
 800bdfc:	4b02      	ldr	r3, [pc, #8]	; (800be08 <acc_diagnostic_log_declare_parameter+0xc>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	b10b      	cbz	r3, 800be06 <acc_diagnostic_log_declare_parameter+0xa>
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	4718      	bx	r3
 800be06:	4770      	bx	lr
 800be08:	2000079c 	.word	0x2000079c

0800be0c <acc_diagnostic_log_set_parameter>:
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <acc_diagnostic_log_set_parameter+0xc>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	b10b      	cbz	r3, 800be16 <acc_diagnostic_log_set_parameter+0xa>
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	4718      	bx	r3
 800be16:	4770      	bx	lr
 800be18:	2000079c 	.word	0x2000079c

0800be1c <acc_diagnostic_log_array>:
 800be1c:	4b02      	ldr	r3, [pc, #8]	; (800be28 <acc_diagnostic_log_array+0xc>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	b10b      	cbz	r3, 800be26 <acc_diagnostic_log_array+0xa>
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	4718      	bx	r3
 800be26:	4770      	bx	lr
 800be28:	2000079c 	.word	0x2000079c

0800be2c <acc_diagnostic_log_scalar>:
 800be2c:	4b02      	ldr	r3, [pc, #8]	; (800be38 <acc_diagnostic_log_scalar+0xc>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	b10b      	cbz	r3, 800be36 <acc_diagnostic_log_scalar+0xa>
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	4718      	bx	r3
 800be36:	4770      	bx	lr
 800be38:	2000079c 	.word	0x2000079c

0800be3c <acc_diagnostic_log_data_u16>:
 800be3c:	4b02      	ldr	r3, [pc, #8]	; (800be48 <acc_diagnostic_log_data_u16+0xc>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	b10b      	cbz	r3, 800be46 <acc_diagnostic_log_data_u16+0xa>
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	4718      	bx	r3
 800be46:	4770      	bx	lr
 800be48:	2000079c 	.word	0x2000079c

0800be4c <__errno>:
 800be4c:	4b01      	ldr	r3, [pc, #4]	; (800be54 <__errno+0x8>)
 800be4e:	6818      	ldr	r0, [r3, #0]
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	20000134 	.word	0x20000134

0800be58 <__sflush_r>:
 800be58:	898a      	ldrh	r2, [r1, #12]
 800be5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5e:	4605      	mov	r5, r0
 800be60:	0710      	lsls	r0, r2, #28
 800be62:	460c      	mov	r4, r1
 800be64:	d458      	bmi.n	800bf18 <__sflush_r+0xc0>
 800be66:	684b      	ldr	r3, [r1, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dc05      	bgt.n	800be78 <__sflush_r+0x20>
 800be6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dc02      	bgt.n	800be78 <__sflush_r+0x20>
 800be72:	2000      	movs	r0, #0
 800be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	d0f9      	beq.n	800be72 <__sflush_r+0x1a>
 800be7e:	2300      	movs	r3, #0
 800be80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be84:	682f      	ldr	r7, [r5, #0]
 800be86:	602b      	str	r3, [r5, #0]
 800be88:	d032      	beq.n	800bef0 <__sflush_r+0x98>
 800be8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	075a      	lsls	r2, r3, #29
 800be90:	d505      	bpl.n	800be9e <__sflush_r+0x46>
 800be92:	6863      	ldr	r3, [r4, #4]
 800be94:	1ac0      	subs	r0, r0, r3
 800be96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be98:	b10b      	cbz	r3, 800be9e <__sflush_r+0x46>
 800be9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be9c:	1ac0      	subs	r0, r0, r3
 800be9e:	2300      	movs	r3, #0
 800bea0:	4602      	mov	r2, r0
 800bea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bea4:	6a21      	ldr	r1, [r4, #32]
 800bea6:	4628      	mov	r0, r5
 800bea8:	47b0      	blx	r6
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	d106      	bne.n	800bebe <__sflush_r+0x66>
 800beb0:	6829      	ldr	r1, [r5, #0]
 800beb2:	291d      	cmp	r1, #29
 800beb4:	d82c      	bhi.n	800bf10 <__sflush_r+0xb8>
 800beb6:	4a2a      	ldr	r2, [pc, #168]	; (800bf60 <__sflush_r+0x108>)
 800beb8:	40ca      	lsrs	r2, r1
 800beba:	07d6      	lsls	r6, r2, #31
 800bebc:	d528      	bpl.n	800bf10 <__sflush_r+0xb8>
 800bebe:	2200      	movs	r2, #0
 800bec0:	6062      	str	r2, [r4, #4]
 800bec2:	04d9      	lsls	r1, r3, #19
 800bec4:	6922      	ldr	r2, [r4, #16]
 800bec6:	6022      	str	r2, [r4, #0]
 800bec8:	d504      	bpl.n	800bed4 <__sflush_r+0x7c>
 800beca:	1c42      	adds	r2, r0, #1
 800becc:	d101      	bne.n	800bed2 <__sflush_r+0x7a>
 800bece:	682b      	ldr	r3, [r5, #0]
 800bed0:	b903      	cbnz	r3, 800bed4 <__sflush_r+0x7c>
 800bed2:	6560      	str	r0, [r4, #84]	; 0x54
 800bed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bed6:	602f      	str	r7, [r5, #0]
 800bed8:	2900      	cmp	r1, #0
 800beda:	d0ca      	beq.n	800be72 <__sflush_r+0x1a>
 800bedc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bee0:	4299      	cmp	r1, r3
 800bee2:	d002      	beq.n	800beea <__sflush_r+0x92>
 800bee4:	4628      	mov	r0, r5
 800bee6:	f000 f9e9 	bl	800c2bc <_free_r>
 800beea:	2000      	movs	r0, #0
 800beec:	6360      	str	r0, [r4, #52]	; 0x34
 800beee:	e7c1      	b.n	800be74 <__sflush_r+0x1c>
 800bef0:	6a21      	ldr	r1, [r4, #32]
 800bef2:	2301      	movs	r3, #1
 800bef4:	4628      	mov	r0, r5
 800bef6:	47b0      	blx	r6
 800bef8:	1c41      	adds	r1, r0, #1
 800befa:	d1c7      	bne.n	800be8c <__sflush_r+0x34>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0c4      	beq.n	800be8c <__sflush_r+0x34>
 800bf02:	2b1d      	cmp	r3, #29
 800bf04:	d001      	beq.n	800bf0a <__sflush_r+0xb2>
 800bf06:	2b16      	cmp	r3, #22
 800bf08:	d101      	bne.n	800bf0e <__sflush_r+0xb6>
 800bf0a:	602f      	str	r7, [r5, #0]
 800bf0c:	e7b1      	b.n	800be72 <__sflush_r+0x1a>
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	e7ad      	b.n	800be74 <__sflush_r+0x1c>
 800bf18:	690f      	ldr	r7, [r1, #16]
 800bf1a:	2f00      	cmp	r7, #0
 800bf1c:	d0a9      	beq.n	800be72 <__sflush_r+0x1a>
 800bf1e:	0793      	lsls	r3, r2, #30
 800bf20:	680e      	ldr	r6, [r1, #0]
 800bf22:	bf08      	it	eq
 800bf24:	694b      	ldreq	r3, [r1, #20]
 800bf26:	600f      	str	r7, [r1, #0]
 800bf28:	bf18      	it	ne
 800bf2a:	2300      	movne	r3, #0
 800bf2c:	eba6 0807 	sub.w	r8, r6, r7
 800bf30:	608b      	str	r3, [r1, #8]
 800bf32:	f1b8 0f00 	cmp.w	r8, #0
 800bf36:	dd9c      	ble.n	800be72 <__sflush_r+0x1a>
 800bf38:	6a21      	ldr	r1, [r4, #32]
 800bf3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf3c:	4643      	mov	r3, r8
 800bf3e:	463a      	mov	r2, r7
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b0      	blx	r6
 800bf44:	2800      	cmp	r0, #0
 800bf46:	dc06      	bgt.n	800bf56 <__sflush_r+0xfe>
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4e:	81a3      	strh	r3, [r4, #12]
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e78e      	b.n	800be74 <__sflush_r+0x1c>
 800bf56:	4407      	add	r7, r0
 800bf58:	eba8 0800 	sub.w	r8, r8, r0
 800bf5c:	e7e9      	b.n	800bf32 <__sflush_r+0xda>
 800bf5e:	bf00      	nop
 800bf60:	20400001 	.word	0x20400001

0800bf64 <_fflush_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	690b      	ldr	r3, [r1, #16]
 800bf68:	4605      	mov	r5, r0
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	b913      	cbnz	r3, 800bf74 <_fflush_r+0x10>
 800bf6e:	2500      	movs	r5, #0
 800bf70:	4628      	mov	r0, r5
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	b118      	cbz	r0, 800bf7e <_fflush_r+0x1a>
 800bf76:	6983      	ldr	r3, [r0, #24]
 800bf78:	b90b      	cbnz	r3, 800bf7e <_fflush_r+0x1a>
 800bf7a:	f000 f899 	bl	800c0b0 <__sinit>
 800bf7e:	4b14      	ldr	r3, [pc, #80]	; (800bfd0 <_fflush_r+0x6c>)
 800bf80:	429c      	cmp	r4, r3
 800bf82:	d11b      	bne.n	800bfbc <_fflush_r+0x58>
 800bf84:	686c      	ldr	r4, [r5, #4]
 800bf86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0ef      	beq.n	800bf6e <_fflush_r+0xa>
 800bf8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf90:	07d0      	lsls	r0, r2, #31
 800bf92:	d404      	bmi.n	800bf9e <_fflush_r+0x3a>
 800bf94:	0599      	lsls	r1, r3, #22
 800bf96:	d402      	bmi.n	800bf9e <_fflush_r+0x3a>
 800bf98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf9a:	f000 f94c 	bl	800c236 <__retarget_lock_acquire_recursive>
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	f7ff ff59 	bl	800be58 <__sflush_r>
 800bfa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfa8:	07da      	lsls	r2, r3, #31
 800bfaa:	4605      	mov	r5, r0
 800bfac:	d4e0      	bmi.n	800bf70 <_fflush_r+0xc>
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	059b      	lsls	r3, r3, #22
 800bfb2:	d4dd      	bmi.n	800bf70 <_fflush_r+0xc>
 800bfb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb6:	f000 f93f 	bl	800c238 <__retarget_lock_release_recursive>
 800bfba:	e7d9      	b.n	800bf70 <_fflush_r+0xc>
 800bfbc:	4b05      	ldr	r3, [pc, #20]	; (800bfd4 <_fflush_r+0x70>)
 800bfbe:	429c      	cmp	r4, r3
 800bfc0:	d101      	bne.n	800bfc6 <_fflush_r+0x62>
 800bfc2:	68ac      	ldr	r4, [r5, #8]
 800bfc4:	e7df      	b.n	800bf86 <_fflush_r+0x22>
 800bfc6:	4b04      	ldr	r3, [pc, #16]	; (800bfd8 <_fflush_r+0x74>)
 800bfc8:	429c      	cmp	r4, r3
 800bfca:	bf08      	it	eq
 800bfcc:	68ec      	ldreq	r4, [r5, #12]
 800bfce:	e7da      	b.n	800bf86 <_fflush_r+0x22>
 800bfd0:	08014004 	.word	0x08014004
 800bfd4:	08014024 	.word	0x08014024
 800bfd8:	08013fe4 	.word	0x08013fe4

0800bfdc <fflush>:
 800bfdc:	4601      	mov	r1, r0
 800bfde:	b920      	cbnz	r0, 800bfea <fflush+0xe>
 800bfe0:	4b04      	ldr	r3, [pc, #16]	; (800bff4 <fflush+0x18>)
 800bfe2:	4905      	ldr	r1, [pc, #20]	; (800bff8 <fflush+0x1c>)
 800bfe4:	6818      	ldr	r0, [r3, #0]
 800bfe6:	f000 b8e1 	b.w	800c1ac <_fwalk_reent>
 800bfea:	4b04      	ldr	r3, [pc, #16]	; (800bffc <fflush+0x20>)
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	f7ff bfb9 	b.w	800bf64 <_fflush_r>
 800bff2:	bf00      	nop
 800bff4:	08014044 	.word	0x08014044
 800bff8:	0800bf65 	.word	0x0800bf65
 800bffc:	20000134 	.word	0x20000134

0800c000 <std>:
 800c000:	2300      	movs	r3, #0
 800c002:	b510      	push	{r4, lr}
 800c004:	4604      	mov	r4, r0
 800c006:	e9c0 3300 	strd	r3, r3, [r0]
 800c00a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c00e:	6083      	str	r3, [r0, #8]
 800c010:	8181      	strh	r1, [r0, #12]
 800c012:	6643      	str	r3, [r0, #100]	; 0x64
 800c014:	81c2      	strh	r2, [r0, #14]
 800c016:	6183      	str	r3, [r0, #24]
 800c018:	4619      	mov	r1, r3
 800c01a:	2208      	movs	r2, #8
 800c01c:	305c      	adds	r0, #92	; 0x5c
 800c01e:	f000 f945 	bl	800c2ac <memset>
 800c022:	4b05      	ldr	r3, [pc, #20]	; (800c038 <std+0x38>)
 800c024:	6263      	str	r3, [r4, #36]	; 0x24
 800c026:	4b05      	ldr	r3, [pc, #20]	; (800c03c <std+0x3c>)
 800c028:	62a3      	str	r3, [r4, #40]	; 0x28
 800c02a:	4b05      	ldr	r3, [pc, #20]	; (800c040 <std+0x40>)
 800c02c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <std+0x44>)
 800c030:	6224      	str	r4, [r4, #32]
 800c032:	6323      	str	r3, [r4, #48]	; 0x30
 800c034:	bd10      	pop	{r4, pc}
 800c036:	bf00      	nop
 800c038:	0800cecd 	.word	0x0800cecd
 800c03c:	0800ceef 	.word	0x0800ceef
 800c040:	0800cf27 	.word	0x0800cf27
 800c044:	0800cf4b 	.word	0x0800cf4b

0800c048 <_cleanup_r>:
 800c048:	4901      	ldr	r1, [pc, #4]	; (800c050 <_cleanup_r+0x8>)
 800c04a:	f000 b8af 	b.w	800c1ac <_fwalk_reent>
 800c04e:	bf00      	nop
 800c050:	0800bf65 	.word	0x0800bf65

0800c054 <__sfmoreglue>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	2268      	movs	r2, #104	; 0x68
 800c058:	1e4d      	subs	r5, r1, #1
 800c05a:	4355      	muls	r5, r2
 800c05c:	460e      	mov	r6, r1
 800c05e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c062:	f000 f997 	bl	800c394 <_malloc_r>
 800c066:	4604      	mov	r4, r0
 800c068:	b140      	cbz	r0, 800c07c <__sfmoreglue+0x28>
 800c06a:	2100      	movs	r1, #0
 800c06c:	e9c0 1600 	strd	r1, r6, [r0]
 800c070:	300c      	adds	r0, #12
 800c072:	60a0      	str	r0, [r4, #8]
 800c074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c078:	f000 f918 	bl	800c2ac <memset>
 800c07c:	4620      	mov	r0, r4
 800c07e:	bd70      	pop	{r4, r5, r6, pc}

0800c080 <__sfp_lock_acquire>:
 800c080:	4801      	ldr	r0, [pc, #4]	; (800c088 <__sfp_lock_acquire+0x8>)
 800c082:	f000 b8d8 	b.w	800c236 <__retarget_lock_acquire_recursive>
 800c086:	bf00      	nop
 800c088:	200007a1 	.word	0x200007a1

0800c08c <__sfp_lock_release>:
 800c08c:	4801      	ldr	r0, [pc, #4]	; (800c094 <__sfp_lock_release+0x8>)
 800c08e:	f000 b8d3 	b.w	800c238 <__retarget_lock_release_recursive>
 800c092:	bf00      	nop
 800c094:	200007a1 	.word	0x200007a1

0800c098 <__sinit_lock_acquire>:
 800c098:	4801      	ldr	r0, [pc, #4]	; (800c0a0 <__sinit_lock_acquire+0x8>)
 800c09a:	f000 b8cc 	b.w	800c236 <__retarget_lock_acquire_recursive>
 800c09e:	bf00      	nop
 800c0a0:	200007a2 	.word	0x200007a2

0800c0a4 <__sinit_lock_release>:
 800c0a4:	4801      	ldr	r0, [pc, #4]	; (800c0ac <__sinit_lock_release+0x8>)
 800c0a6:	f000 b8c7 	b.w	800c238 <__retarget_lock_release_recursive>
 800c0aa:	bf00      	nop
 800c0ac:	200007a2 	.word	0x200007a2

0800c0b0 <__sinit>:
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	f7ff fff0 	bl	800c098 <__sinit_lock_acquire>
 800c0b8:	69a3      	ldr	r3, [r4, #24]
 800c0ba:	b11b      	cbz	r3, 800c0c4 <__sinit+0x14>
 800c0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0c0:	f7ff bff0 	b.w	800c0a4 <__sinit_lock_release>
 800c0c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0c8:	6523      	str	r3, [r4, #80]	; 0x50
 800c0ca:	4b13      	ldr	r3, [pc, #76]	; (800c118 <__sinit+0x68>)
 800c0cc:	4a13      	ldr	r2, [pc, #76]	; (800c11c <__sinit+0x6c>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0d2:	42a3      	cmp	r3, r4
 800c0d4:	bf04      	itt	eq
 800c0d6:	2301      	moveq	r3, #1
 800c0d8:	61a3      	streq	r3, [r4, #24]
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f000 f820 	bl	800c120 <__sfp>
 800c0e0:	6060      	str	r0, [r4, #4]
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 f81c 	bl	800c120 <__sfp>
 800c0e8:	60a0      	str	r0, [r4, #8]
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f000 f818 	bl	800c120 <__sfp>
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	60e0      	str	r0, [r4, #12]
 800c0f4:	2104      	movs	r1, #4
 800c0f6:	6860      	ldr	r0, [r4, #4]
 800c0f8:	f7ff ff82 	bl	800c000 <std>
 800c0fc:	68a0      	ldr	r0, [r4, #8]
 800c0fe:	2201      	movs	r2, #1
 800c100:	2109      	movs	r1, #9
 800c102:	f7ff ff7d 	bl	800c000 <std>
 800c106:	68e0      	ldr	r0, [r4, #12]
 800c108:	2202      	movs	r2, #2
 800c10a:	2112      	movs	r1, #18
 800c10c:	f7ff ff78 	bl	800c000 <std>
 800c110:	2301      	movs	r3, #1
 800c112:	61a3      	str	r3, [r4, #24]
 800c114:	e7d2      	b.n	800c0bc <__sinit+0xc>
 800c116:	bf00      	nop
 800c118:	08014044 	.word	0x08014044
 800c11c:	0800c049 	.word	0x0800c049

0800c120 <__sfp>:
 800c120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c122:	4607      	mov	r7, r0
 800c124:	f7ff ffac 	bl	800c080 <__sfp_lock_acquire>
 800c128:	4b1e      	ldr	r3, [pc, #120]	; (800c1a4 <__sfp+0x84>)
 800c12a:	681e      	ldr	r6, [r3, #0]
 800c12c:	69b3      	ldr	r3, [r6, #24]
 800c12e:	b913      	cbnz	r3, 800c136 <__sfp+0x16>
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff ffbd 	bl	800c0b0 <__sinit>
 800c136:	3648      	adds	r6, #72	; 0x48
 800c138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	d503      	bpl.n	800c148 <__sfp+0x28>
 800c140:	6833      	ldr	r3, [r6, #0]
 800c142:	b30b      	cbz	r3, 800c188 <__sfp+0x68>
 800c144:	6836      	ldr	r6, [r6, #0]
 800c146:	e7f7      	b.n	800c138 <__sfp+0x18>
 800c148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c14c:	b9d5      	cbnz	r5, 800c184 <__sfp+0x64>
 800c14e:	4b16      	ldr	r3, [pc, #88]	; (800c1a8 <__sfp+0x88>)
 800c150:	60e3      	str	r3, [r4, #12]
 800c152:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c156:	6665      	str	r5, [r4, #100]	; 0x64
 800c158:	f000 f86c 	bl	800c234 <__retarget_lock_init_recursive>
 800c15c:	f7ff ff96 	bl	800c08c <__sfp_lock_release>
 800c160:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c164:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c168:	6025      	str	r5, [r4, #0]
 800c16a:	61a5      	str	r5, [r4, #24]
 800c16c:	2208      	movs	r2, #8
 800c16e:	4629      	mov	r1, r5
 800c170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c174:	f000 f89a 	bl	800c2ac <memset>
 800c178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c17c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c180:	4620      	mov	r0, r4
 800c182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c184:	3468      	adds	r4, #104	; 0x68
 800c186:	e7d9      	b.n	800c13c <__sfp+0x1c>
 800c188:	2104      	movs	r1, #4
 800c18a:	4638      	mov	r0, r7
 800c18c:	f7ff ff62 	bl	800c054 <__sfmoreglue>
 800c190:	4604      	mov	r4, r0
 800c192:	6030      	str	r0, [r6, #0]
 800c194:	2800      	cmp	r0, #0
 800c196:	d1d5      	bne.n	800c144 <__sfp+0x24>
 800c198:	f7ff ff78 	bl	800c08c <__sfp_lock_release>
 800c19c:	230c      	movs	r3, #12
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	e7ee      	b.n	800c180 <__sfp+0x60>
 800c1a2:	bf00      	nop
 800c1a4:	08014044 	.word	0x08014044
 800c1a8:	ffff0001 	.word	0xffff0001

0800c1ac <_fwalk_reent>:
 800c1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	4688      	mov	r8, r1
 800c1b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1b8:	2700      	movs	r7, #0
 800c1ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1be:	f1b9 0901 	subs.w	r9, r9, #1
 800c1c2:	d505      	bpl.n	800c1d0 <_fwalk_reent+0x24>
 800c1c4:	6824      	ldr	r4, [r4, #0]
 800c1c6:	2c00      	cmp	r4, #0
 800c1c8:	d1f7      	bne.n	800c1ba <_fwalk_reent+0xe>
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1d0:	89ab      	ldrh	r3, [r5, #12]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d907      	bls.n	800c1e6 <_fwalk_reent+0x3a>
 800c1d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	d003      	beq.n	800c1e6 <_fwalk_reent+0x3a>
 800c1de:	4629      	mov	r1, r5
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	47c0      	blx	r8
 800c1e4:	4307      	orrs	r7, r0
 800c1e6:	3568      	adds	r5, #104	; 0x68
 800c1e8:	e7e9      	b.n	800c1be <_fwalk_reent+0x12>
	...

0800c1ec <__libc_init_array>:
 800c1ec:	b570      	push	{r4, r5, r6, lr}
 800c1ee:	4d0d      	ldr	r5, [pc, #52]	; (800c224 <__libc_init_array+0x38>)
 800c1f0:	4c0d      	ldr	r4, [pc, #52]	; (800c228 <__libc_init_array+0x3c>)
 800c1f2:	1b64      	subs	r4, r4, r5
 800c1f4:	10a4      	asrs	r4, r4, #2
 800c1f6:	2600      	movs	r6, #0
 800c1f8:	42a6      	cmp	r6, r4
 800c1fa:	d109      	bne.n	800c210 <__libc_init_array+0x24>
 800c1fc:	4d0b      	ldr	r5, [pc, #44]	; (800c22c <__libc_init_array+0x40>)
 800c1fe:	4c0c      	ldr	r4, [pc, #48]	; (800c230 <__libc_init_array+0x44>)
 800c200:	f003 f940 	bl	800f484 <_init>
 800c204:	1b64      	subs	r4, r4, r5
 800c206:	10a4      	asrs	r4, r4, #2
 800c208:	2600      	movs	r6, #0
 800c20a:	42a6      	cmp	r6, r4
 800c20c:	d105      	bne.n	800c21a <__libc_init_array+0x2e>
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	f855 3b04 	ldr.w	r3, [r5], #4
 800c214:	4798      	blx	r3
 800c216:	3601      	adds	r6, #1
 800c218:	e7ee      	b.n	800c1f8 <__libc_init_array+0xc>
 800c21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c21e:	4798      	blx	r3
 800c220:	3601      	adds	r6, #1
 800c222:	e7f2      	b.n	800c20a <__libc_init_array+0x1e>
 800c224:	080143dc 	.word	0x080143dc
 800c228:	080143dc 	.word	0x080143dc
 800c22c:	080143dc 	.word	0x080143dc
 800c230:	080143e0 	.word	0x080143e0

0800c234 <__retarget_lock_init_recursive>:
 800c234:	4770      	bx	lr

0800c236 <__retarget_lock_acquire_recursive>:
 800c236:	4770      	bx	lr

0800c238 <__retarget_lock_release_recursive>:
 800c238:	4770      	bx	lr
	...

0800c23c <malloc>:
 800c23c:	4b02      	ldr	r3, [pc, #8]	; (800c248 <malloc+0xc>)
 800c23e:	4601      	mov	r1, r0
 800c240:	6818      	ldr	r0, [r3, #0]
 800c242:	f000 b8a7 	b.w	800c394 <_malloc_r>
 800c246:	bf00      	nop
 800c248:	20000134 	.word	0x20000134

0800c24c <free>:
 800c24c:	4b02      	ldr	r3, [pc, #8]	; (800c258 <free+0xc>)
 800c24e:	4601      	mov	r1, r0
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f000 b833 	b.w	800c2bc <_free_r>
 800c256:	bf00      	nop
 800c258:	20000134 	.word	0x20000134

0800c25c <memcpy>:
 800c25c:	440a      	add	r2, r1
 800c25e:	4291      	cmp	r1, r2
 800c260:	f100 33ff 	add.w	r3, r0, #4294967295
 800c264:	d100      	bne.n	800c268 <memcpy+0xc>
 800c266:	4770      	bx	lr
 800c268:	b510      	push	{r4, lr}
 800c26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c272:	4291      	cmp	r1, r2
 800c274:	d1f9      	bne.n	800c26a <memcpy+0xe>
 800c276:	bd10      	pop	{r4, pc}

0800c278 <memmove>:
 800c278:	4288      	cmp	r0, r1
 800c27a:	b510      	push	{r4, lr}
 800c27c:	eb01 0402 	add.w	r4, r1, r2
 800c280:	d902      	bls.n	800c288 <memmove+0x10>
 800c282:	4284      	cmp	r4, r0
 800c284:	4623      	mov	r3, r4
 800c286:	d807      	bhi.n	800c298 <memmove+0x20>
 800c288:	1e43      	subs	r3, r0, #1
 800c28a:	42a1      	cmp	r1, r4
 800c28c:	d008      	beq.n	800c2a0 <memmove+0x28>
 800c28e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c292:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c296:	e7f8      	b.n	800c28a <memmove+0x12>
 800c298:	4402      	add	r2, r0
 800c29a:	4601      	mov	r1, r0
 800c29c:	428a      	cmp	r2, r1
 800c29e:	d100      	bne.n	800c2a2 <memmove+0x2a>
 800c2a0:	bd10      	pop	{r4, pc}
 800c2a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2aa:	e7f7      	b.n	800c29c <memmove+0x24>

0800c2ac <memset>:
 800c2ac:	4402      	add	r2, r0
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d100      	bne.n	800c2b6 <memset+0xa>
 800c2b4:	4770      	bx	lr
 800c2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ba:	e7f9      	b.n	800c2b0 <memset+0x4>

0800c2bc <_free_r>:
 800c2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2be:	2900      	cmp	r1, #0
 800c2c0:	d044      	beq.n	800c34c <_free_r+0x90>
 800c2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c6:	9001      	str	r0, [sp, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c2ce:	bfb8      	it	lt
 800c2d0:	18e4      	addlt	r4, r4, r3
 800c2d2:	f001 fe4f 	bl	800df74 <__malloc_lock>
 800c2d6:	4a1e      	ldr	r2, [pc, #120]	; (800c350 <_free_r+0x94>)
 800c2d8:	9801      	ldr	r0, [sp, #4]
 800c2da:	6813      	ldr	r3, [r2, #0]
 800c2dc:	b933      	cbnz	r3, 800c2ec <_free_r+0x30>
 800c2de:	6063      	str	r3, [r4, #4]
 800c2e0:	6014      	str	r4, [r2, #0]
 800c2e2:	b003      	add	sp, #12
 800c2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2e8:	f001 be4a 	b.w	800df80 <__malloc_unlock>
 800c2ec:	42a3      	cmp	r3, r4
 800c2ee:	d908      	bls.n	800c302 <_free_r+0x46>
 800c2f0:	6825      	ldr	r5, [r4, #0]
 800c2f2:	1961      	adds	r1, r4, r5
 800c2f4:	428b      	cmp	r3, r1
 800c2f6:	bf01      	itttt	eq
 800c2f8:	6819      	ldreq	r1, [r3, #0]
 800c2fa:	685b      	ldreq	r3, [r3, #4]
 800c2fc:	1949      	addeq	r1, r1, r5
 800c2fe:	6021      	streq	r1, [r4, #0]
 800c300:	e7ed      	b.n	800c2de <_free_r+0x22>
 800c302:	461a      	mov	r2, r3
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	b10b      	cbz	r3, 800c30c <_free_r+0x50>
 800c308:	42a3      	cmp	r3, r4
 800c30a:	d9fa      	bls.n	800c302 <_free_r+0x46>
 800c30c:	6811      	ldr	r1, [r2, #0]
 800c30e:	1855      	adds	r5, r2, r1
 800c310:	42a5      	cmp	r5, r4
 800c312:	d10b      	bne.n	800c32c <_free_r+0x70>
 800c314:	6824      	ldr	r4, [r4, #0]
 800c316:	4421      	add	r1, r4
 800c318:	1854      	adds	r4, r2, r1
 800c31a:	42a3      	cmp	r3, r4
 800c31c:	6011      	str	r1, [r2, #0]
 800c31e:	d1e0      	bne.n	800c2e2 <_free_r+0x26>
 800c320:	681c      	ldr	r4, [r3, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	6053      	str	r3, [r2, #4]
 800c326:	4421      	add	r1, r4
 800c328:	6011      	str	r1, [r2, #0]
 800c32a:	e7da      	b.n	800c2e2 <_free_r+0x26>
 800c32c:	d902      	bls.n	800c334 <_free_r+0x78>
 800c32e:	230c      	movs	r3, #12
 800c330:	6003      	str	r3, [r0, #0]
 800c332:	e7d6      	b.n	800c2e2 <_free_r+0x26>
 800c334:	6825      	ldr	r5, [r4, #0]
 800c336:	1961      	adds	r1, r4, r5
 800c338:	428b      	cmp	r3, r1
 800c33a:	bf04      	itt	eq
 800c33c:	6819      	ldreq	r1, [r3, #0]
 800c33e:	685b      	ldreq	r3, [r3, #4]
 800c340:	6063      	str	r3, [r4, #4]
 800c342:	bf04      	itt	eq
 800c344:	1949      	addeq	r1, r1, r5
 800c346:	6021      	streq	r1, [r4, #0]
 800c348:	6054      	str	r4, [r2, #4]
 800c34a:	e7ca      	b.n	800c2e2 <_free_r+0x26>
 800c34c:	b003      	add	sp, #12
 800c34e:	bd30      	pop	{r4, r5, pc}
 800c350:	200007a4 	.word	0x200007a4

0800c354 <sbrk_aligned>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	4e0e      	ldr	r6, [pc, #56]	; (800c390 <sbrk_aligned+0x3c>)
 800c358:	460c      	mov	r4, r1
 800c35a:	6831      	ldr	r1, [r6, #0]
 800c35c:	4605      	mov	r5, r0
 800c35e:	b911      	cbnz	r1, 800c366 <sbrk_aligned+0x12>
 800c360:	f000 fd84 	bl	800ce6c <_sbrk_r>
 800c364:	6030      	str	r0, [r6, #0]
 800c366:	4621      	mov	r1, r4
 800c368:	4628      	mov	r0, r5
 800c36a:	f000 fd7f 	bl	800ce6c <_sbrk_r>
 800c36e:	1c43      	adds	r3, r0, #1
 800c370:	d00a      	beq.n	800c388 <sbrk_aligned+0x34>
 800c372:	1cc4      	adds	r4, r0, #3
 800c374:	f024 0403 	bic.w	r4, r4, #3
 800c378:	42a0      	cmp	r0, r4
 800c37a:	d007      	beq.n	800c38c <sbrk_aligned+0x38>
 800c37c:	1a21      	subs	r1, r4, r0
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 fd74 	bl	800ce6c <_sbrk_r>
 800c384:	3001      	adds	r0, #1
 800c386:	d101      	bne.n	800c38c <sbrk_aligned+0x38>
 800c388:	f04f 34ff 	mov.w	r4, #4294967295
 800c38c:	4620      	mov	r0, r4
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
 800c390:	200007a8 	.word	0x200007a8

0800c394 <_malloc_r>:
 800c394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c398:	1ccd      	adds	r5, r1, #3
 800c39a:	f025 0503 	bic.w	r5, r5, #3
 800c39e:	3508      	adds	r5, #8
 800c3a0:	2d0c      	cmp	r5, #12
 800c3a2:	bf38      	it	cc
 800c3a4:	250c      	movcc	r5, #12
 800c3a6:	2d00      	cmp	r5, #0
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	db01      	blt.n	800c3b0 <_malloc_r+0x1c>
 800c3ac:	42a9      	cmp	r1, r5
 800c3ae:	d905      	bls.n	800c3bc <_malloc_r+0x28>
 800c3b0:	230c      	movs	r3, #12
 800c3b2:	603b      	str	r3, [r7, #0]
 800c3b4:	2600      	movs	r6, #0
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3bc:	4e2e      	ldr	r6, [pc, #184]	; (800c478 <_malloc_r+0xe4>)
 800c3be:	f001 fdd9 	bl	800df74 <__malloc_lock>
 800c3c2:	6833      	ldr	r3, [r6, #0]
 800c3c4:	461c      	mov	r4, r3
 800c3c6:	bb34      	cbnz	r4, 800c416 <_malloc_r+0x82>
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	f7ff ffc2 	bl	800c354 <sbrk_aligned>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	d14d      	bne.n	800c472 <_malloc_r+0xde>
 800c3d6:	6834      	ldr	r4, [r6, #0]
 800c3d8:	4626      	mov	r6, r4
 800c3da:	2e00      	cmp	r6, #0
 800c3dc:	d140      	bne.n	800c460 <_malloc_r+0xcc>
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	4631      	mov	r1, r6
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	eb04 0803 	add.w	r8, r4, r3
 800c3e8:	f000 fd40 	bl	800ce6c <_sbrk_r>
 800c3ec:	4580      	cmp	r8, r0
 800c3ee:	d13a      	bne.n	800c466 <_malloc_r+0xd2>
 800c3f0:	6821      	ldr	r1, [r4, #0]
 800c3f2:	3503      	adds	r5, #3
 800c3f4:	1a6d      	subs	r5, r5, r1
 800c3f6:	f025 0503 	bic.w	r5, r5, #3
 800c3fa:	3508      	adds	r5, #8
 800c3fc:	2d0c      	cmp	r5, #12
 800c3fe:	bf38      	it	cc
 800c400:	250c      	movcc	r5, #12
 800c402:	4629      	mov	r1, r5
 800c404:	4638      	mov	r0, r7
 800c406:	f7ff ffa5 	bl	800c354 <sbrk_aligned>
 800c40a:	3001      	adds	r0, #1
 800c40c:	d02b      	beq.n	800c466 <_malloc_r+0xd2>
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	442b      	add	r3, r5
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	e00e      	b.n	800c434 <_malloc_r+0xa0>
 800c416:	6822      	ldr	r2, [r4, #0]
 800c418:	1b52      	subs	r2, r2, r5
 800c41a:	d41e      	bmi.n	800c45a <_malloc_r+0xc6>
 800c41c:	2a0b      	cmp	r2, #11
 800c41e:	d916      	bls.n	800c44e <_malloc_r+0xba>
 800c420:	1961      	adds	r1, r4, r5
 800c422:	42a3      	cmp	r3, r4
 800c424:	6025      	str	r5, [r4, #0]
 800c426:	bf18      	it	ne
 800c428:	6059      	strne	r1, [r3, #4]
 800c42a:	6863      	ldr	r3, [r4, #4]
 800c42c:	bf08      	it	eq
 800c42e:	6031      	streq	r1, [r6, #0]
 800c430:	5162      	str	r2, [r4, r5]
 800c432:	604b      	str	r3, [r1, #4]
 800c434:	4638      	mov	r0, r7
 800c436:	f104 060b 	add.w	r6, r4, #11
 800c43a:	f001 fda1 	bl	800df80 <__malloc_unlock>
 800c43e:	f026 0607 	bic.w	r6, r6, #7
 800c442:	1d23      	adds	r3, r4, #4
 800c444:	1af2      	subs	r2, r6, r3
 800c446:	d0b6      	beq.n	800c3b6 <_malloc_r+0x22>
 800c448:	1b9b      	subs	r3, r3, r6
 800c44a:	50a3      	str	r3, [r4, r2]
 800c44c:	e7b3      	b.n	800c3b6 <_malloc_r+0x22>
 800c44e:	6862      	ldr	r2, [r4, #4]
 800c450:	42a3      	cmp	r3, r4
 800c452:	bf0c      	ite	eq
 800c454:	6032      	streq	r2, [r6, #0]
 800c456:	605a      	strne	r2, [r3, #4]
 800c458:	e7ec      	b.n	800c434 <_malloc_r+0xa0>
 800c45a:	4623      	mov	r3, r4
 800c45c:	6864      	ldr	r4, [r4, #4]
 800c45e:	e7b2      	b.n	800c3c6 <_malloc_r+0x32>
 800c460:	4634      	mov	r4, r6
 800c462:	6876      	ldr	r6, [r6, #4]
 800c464:	e7b9      	b.n	800c3da <_malloc_r+0x46>
 800c466:	230c      	movs	r3, #12
 800c468:	603b      	str	r3, [r7, #0]
 800c46a:	4638      	mov	r0, r7
 800c46c:	f001 fd88 	bl	800df80 <__malloc_unlock>
 800c470:	e7a1      	b.n	800c3b6 <_malloc_r+0x22>
 800c472:	6025      	str	r5, [r4, #0]
 800c474:	e7de      	b.n	800c434 <_malloc_r+0xa0>
 800c476:	bf00      	nop
 800c478:	200007a4 	.word	0x200007a4

0800c47c <__cvt>:
 800c47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c480:	ec55 4b10 	vmov	r4, r5, d0
 800c484:	2d00      	cmp	r5, #0
 800c486:	460e      	mov	r6, r1
 800c488:	4619      	mov	r1, r3
 800c48a:	462b      	mov	r3, r5
 800c48c:	bfbb      	ittet	lt
 800c48e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c492:	461d      	movlt	r5, r3
 800c494:	2300      	movge	r3, #0
 800c496:	232d      	movlt	r3, #45	; 0x2d
 800c498:	700b      	strb	r3, [r1, #0]
 800c49a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c49c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c4a0:	4691      	mov	r9, r2
 800c4a2:	f023 0820 	bic.w	r8, r3, #32
 800c4a6:	bfbc      	itt	lt
 800c4a8:	4622      	movlt	r2, r4
 800c4aa:	4614      	movlt	r4, r2
 800c4ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4b0:	d005      	beq.n	800c4be <__cvt+0x42>
 800c4b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c4b6:	d100      	bne.n	800c4ba <__cvt+0x3e>
 800c4b8:	3601      	adds	r6, #1
 800c4ba:	2102      	movs	r1, #2
 800c4bc:	e000      	b.n	800c4c0 <__cvt+0x44>
 800c4be:	2103      	movs	r1, #3
 800c4c0:	ab03      	add	r3, sp, #12
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	ab02      	add	r3, sp, #8
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	ec45 4b10 	vmov	d0, r4, r5
 800c4cc:	4653      	mov	r3, sl
 800c4ce:	4632      	mov	r2, r6
 800c4d0:	f000 fee6 	bl	800d2a0 <_dtoa_r>
 800c4d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c4d8:	4607      	mov	r7, r0
 800c4da:	d102      	bne.n	800c4e2 <__cvt+0x66>
 800c4dc:	f019 0f01 	tst.w	r9, #1
 800c4e0:	d022      	beq.n	800c528 <__cvt+0xac>
 800c4e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4e6:	eb07 0906 	add.w	r9, r7, r6
 800c4ea:	d110      	bne.n	800c50e <__cvt+0x92>
 800c4ec:	783b      	ldrb	r3, [r7, #0]
 800c4ee:	2b30      	cmp	r3, #48	; 0x30
 800c4f0:	d10a      	bne.n	800c508 <__cvt+0x8c>
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f4 fabd 	bl	8000a78 <__aeabi_dcmpeq>
 800c4fe:	b918      	cbnz	r0, 800c508 <__cvt+0x8c>
 800c500:	f1c6 0601 	rsb	r6, r6, #1
 800c504:	f8ca 6000 	str.w	r6, [sl]
 800c508:	f8da 3000 	ldr.w	r3, [sl]
 800c50c:	4499      	add	r9, r3
 800c50e:	2200      	movs	r2, #0
 800c510:	2300      	movs	r3, #0
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	f7f4 faaf 	bl	8000a78 <__aeabi_dcmpeq>
 800c51a:	b108      	cbz	r0, 800c520 <__cvt+0xa4>
 800c51c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c520:	2230      	movs	r2, #48	; 0x30
 800c522:	9b03      	ldr	r3, [sp, #12]
 800c524:	454b      	cmp	r3, r9
 800c526:	d307      	bcc.n	800c538 <__cvt+0xbc>
 800c528:	9b03      	ldr	r3, [sp, #12]
 800c52a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c52c:	1bdb      	subs	r3, r3, r7
 800c52e:	4638      	mov	r0, r7
 800c530:	6013      	str	r3, [r2, #0]
 800c532:	b004      	add	sp, #16
 800c534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c538:	1c59      	adds	r1, r3, #1
 800c53a:	9103      	str	r1, [sp, #12]
 800c53c:	701a      	strb	r2, [r3, #0]
 800c53e:	e7f0      	b.n	800c522 <__cvt+0xa6>

0800c540 <__exponent>:
 800c540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c542:	4603      	mov	r3, r0
 800c544:	2900      	cmp	r1, #0
 800c546:	bfb8      	it	lt
 800c548:	4249      	neglt	r1, r1
 800c54a:	f803 2b02 	strb.w	r2, [r3], #2
 800c54e:	bfb4      	ite	lt
 800c550:	222d      	movlt	r2, #45	; 0x2d
 800c552:	222b      	movge	r2, #43	; 0x2b
 800c554:	2909      	cmp	r1, #9
 800c556:	7042      	strb	r2, [r0, #1]
 800c558:	dd2a      	ble.n	800c5b0 <__exponent+0x70>
 800c55a:	f10d 0407 	add.w	r4, sp, #7
 800c55e:	46a4      	mov	ip, r4
 800c560:	270a      	movs	r7, #10
 800c562:	46a6      	mov	lr, r4
 800c564:	460a      	mov	r2, r1
 800c566:	fb91 f6f7 	sdiv	r6, r1, r7
 800c56a:	fb07 1516 	mls	r5, r7, r6, r1
 800c56e:	3530      	adds	r5, #48	; 0x30
 800c570:	2a63      	cmp	r2, #99	; 0x63
 800c572:	f104 34ff 	add.w	r4, r4, #4294967295
 800c576:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c57a:	4631      	mov	r1, r6
 800c57c:	dcf1      	bgt.n	800c562 <__exponent+0x22>
 800c57e:	3130      	adds	r1, #48	; 0x30
 800c580:	f1ae 0502 	sub.w	r5, lr, #2
 800c584:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c588:	1c44      	adds	r4, r0, #1
 800c58a:	4629      	mov	r1, r5
 800c58c:	4561      	cmp	r1, ip
 800c58e:	d30a      	bcc.n	800c5a6 <__exponent+0x66>
 800c590:	f10d 0209 	add.w	r2, sp, #9
 800c594:	eba2 020e 	sub.w	r2, r2, lr
 800c598:	4565      	cmp	r5, ip
 800c59a:	bf88      	it	hi
 800c59c:	2200      	movhi	r2, #0
 800c59e:	4413      	add	r3, r2
 800c5a0:	1a18      	subs	r0, r3, r0
 800c5a2:	b003      	add	sp, #12
 800c5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c5ae:	e7ed      	b.n	800c58c <__exponent+0x4c>
 800c5b0:	2330      	movs	r3, #48	; 0x30
 800c5b2:	3130      	adds	r1, #48	; 0x30
 800c5b4:	7083      	strb	r3, [r0, #2]
 800c5b6:	70c1      	strb	r1, [r0, #3]
 800c5b8:	1d03      	adds	r3, r0, #4
 800c5ba:	e7f1      	b.n	800c5a0 <__exponent+0x60>

0800c5bc <_printf_float>:
 800c5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c0:	ed2d 8b02 	vpush	{d8}
 800c5c4:	b08d      	sub	sp, #52	; 0x34
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c5cc:	4616      	mov	r6, r2
 800c5ce:	461f      	mov	r7, r3
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	f001 fc53 	bl	800de7c <_localeconv_r>
 800c5d6:	f8d0 a000 	ldr.w	sl, [r0]
 800c5da:	4650      	mov	r0, sl
 800c5dc:	f7f3 fdd0 	bl	8000180 <strlen>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	9305      	str	r3, [sp, #20]
 800c5e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	f023 0307 	bic.w	r3, r3, #7
 800c5f6:	f103 0208 	add.w	r2, r3, #8
 800c5fa:	f8c8 2000 	str.w	r2, [r8]
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c606:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c60a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c60e:	9307      	str	r3, [sp, #28]
 800c610:	f8cd 8018 	str.w	r8, [sp, #24]
 800c614:	ee08 0a10 	vmov	s16, r0
 800c618:	4b9f      	ldr	r3, [pc, #636]	; (800c898 <_printf_float+0x2dc>)
 800c61a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c61e:	f04f 32ff 	mov.w	r2, #4294967295
 800c622:	f7f4 fa5b 	bl	8000adc <__aeabi_dcmpun>
 800c626:	bb88      	cbnz	r0, 800c68c <_printf_float+0xd0>
 800c628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c62c:	4b9a      	ldr	r3, [pc, #616]	; (800c898 <_printf_float+0x2dc>)
 800c62e:	f04f 32ff 	mov.w	r2, #4294967295
 800c632:	f7f4 fa35 	bl	8000aa0 <__aeabi_dcmple>
 800c636:	bb48      	cbnz	r0, 800c68c <_printf_float+0xd0>
 800c638:	2200      	movs	r2, #0
 800c63a:	2300      	movs	r3, #0
 800c63c:	4640      	mov	r0, r8
 800c63e:	4649      	mov	r1, r9
 800c640:	f7f4 fa24 	bl	8000a8c <__aeabi_dcmplt>
 800c644:	b110      	cbz	r0, 800c64c <_printf_float+0x90>
 800c646:	232d      	movs	r3, #45	; 0x2d
 800c648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c64c:	4b93      	ldr	r3, [pc, #588]	; (800c89c <_printf_float+0x2e0>)
 800c64e:	4894      	ldr	r0, [pc, #592]	; (800c8a0 <_printf_float+0x2e4>)
 800c650:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c654:	bf94      	ite	ls
 800c656:	4698      	movls	r8, r3
 800c658:	4680      	movhi	r8, r0
 800c65a:	2303      	movs	r3, #3
 800c65c:	6123      	str	r3, [r4, #16]
 800c65e:	9b05      	ldr	r3, [sp, #20]
 800c660:	f023 0204 	bic.w	r2, r3, #4
 800c664:	6022      	str	r2, [r4, #0]
 800c666:	f04f 0900 	mov.w	r9, #0
 800c66a:	9700      	str	r7, [sp, #0]
 800c66c:	4633      	mov	r3, r6
 800c66e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c670:	4621      	mov	r1, r4
 800c672:	4628      	mov	r0, r5
 800c674:	f000 f9d8 	bl	800ca28 <_printf_common>
 800c678:	3001      	adds	r0, #1
 800c67a:	f040 8090 	bne.w	800c79e <_printf_float+0x1e2>
 800c67e:	f04f 30ff 	mov.w	r0, #4294967295
 800c682:	b00d      	add	sp, #52	; 0x34
 800c684:	ecbd 8b02 	vpop	{d8}
 800c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	4642      	mov	r2, r8
 800c68e:	464b      	mov	r3, r9
 800c690:	4640      	mov	r0, r8
 800c692:	4649      	mov	r1, r9
 800c694:	f7f4 fa22 	bl	8000adc <__aeabi_dcmpun>
 800c698:	b140      	cbz	r0, 800c6ac <_printf_float+0xf0>
 800c69a:	464b      	mov	r3, r9
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	bfbc      	itt	lt
 800c6a0:	232d      	movlt	r3, #45	; 0x2d
 800c6a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c6a6:	487f      	ldr	r0, [pc, #508]	; (800c8a4 <_printf_float+0x2e8>)
 800c6a8:	4b7f      	ldr	r3, [pc, #508]	; (800c8a8 <_printf_float+0x2ec>)
 800c6aa:	e7d1      	b.n	800c650 <_printf_float+0x94>
 800c6ac:	6863      	ldr	r3, [r4, #4]
 800c6ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c6b2:	9206      	str	r2, [sp, #24]
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	d13f      	bne.n	800c738 <_printf_float+0x17c>
 800c6b8:	2306      	movs	r3, #6
 800c6ba:	6063      	str	r3, [r4, #4]
 800c6bc:	9b05      	ldr	r3, [sp, #20]
 800c6be:	6861      	ldr	r1, [r4, #4]
 800c6c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	9303      	str	r3, [sp, #12]
 800c6c8:	ab0a      	add	r3, sp, #40	; 0x28
 800c6ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c6ce:	ab09      	add	r3, sp, #36	; 0x24
 800c6d0:	ec49 8b10 	vmov	d0, r8, r9
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	6022      	str	r2, [r4, #0]
 800c6d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f7ff fecd 	bl	800c47c <__cvt>
 800c6e2:	9b06      	ldr	r3, [sp, #24]
 800c6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6e6:	2b47      	cmp	r3, #71	; 0x47
 800c6e8:	4680      	mov	r8, r0
 800c6ea:	d108      	bne.n	800c6fe <_printf_float+0x142>
 800c6ec:	1cc8      	adds	r0, r1, #3
 800c6ee:	db02      	blt.n	800c6f6 <_printf_float+0x13a>
 800c6f0:	6863      	ldr	r3, [r4, #4]
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	dd41      	ble.n	800c77a <_printf_float+0x1be>
 800c6f6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c6fa:	fa5f fb8b 	uxtb.w	fp, fp
 800c6fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c702:	d820      	bhi.n	800c746 <_printf_float+0x18a>
 800c704:	3901      	subs	r1, #1
 800c706:	465a      	mov	r2, fp
 800c708:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c70c:	9109      	str	r1, [sp, #36]	; 0x24
 800c70e:	f7ff ff17 	bl	800c540 <__exponent>
 800c712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c714:	1813      	adds	r3, r2, r0
 800c716:	2a01      	cmp	r2, #1
 800c718:	4681      	mov	r9, r0
 800c71a:	6123      	str	r3, [r4, #16]
 800c71c:	dc02      	bgt.n	800c724 <_printf_float+0x168>
 800c71e:	6822      	ldr	r2, [r4, #0]
 800c720:	07d2      	lsls	r2, r2, #31
 800c722:	d501      	bpl.n	800c728 <_printf_float+0x16c>
 800c724:	3301      	adds	r3, #1
 800c726:	6123      	str	r3, [r4, #16]
 800c728:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d09c      	beq.n	800c66a <_printf_float+0xae>
 800c730:	232d      	movs	r3, #45	; 0x2d
 800c732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c736:	e798      	b.n	800c66a <_printf_float+0xae>
 800c738:	9a06      	ldr	r2, [sp, #24]
 800c73a:	2a47      	cmp	r2, #71	; 0x47
 800c73c:	d1be      	bne.n	800c6bc <_printf_float+0x100>
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1bc      	bne.n	800c6bc <_printf_float+0x100>
 800c742:	2301      	movs	r3, #1
 800c744:	e7b9      	b.n	800c6ba <_printf_float+0xfe>
 800c746:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c74a:	d118      	bne.n	800c77e <_printf_float+0x1c2>
 800c74c:	2900      	cmp	r1, #0
 800c74e:	6863      	ldr	r3, [r4, #4]
 800c750:	dd0b      	ble.n	800c76a <_printf_float+0x1ae>
 800c752:	6121      	str	r1, [r4, #16]
 800c754:	b913      	cbnz	r3, 800c75c <_printf_float+0x1a0>
 800c756:	6822      	ldr	r2, [r4, #0]
 800c758:	07d0      	lsls	r0, r2, #31
 800c75a:	d502      	bpl.n	800c762 <_printf_float+0x1a6>
 800c75c:	3301      	adds	r3, #1
 800c75e:	440b      	add	r3, r1
 800c760:	6123      	str	r3, [r4, #16]
 800c762:	65a1      	str	r1, [r4, #88]	; 0x58
 800c764:	f04f 0900 	mov.w	r9, #0
 800c768:	e7de      	b.n	800c728 <_printf_float+0x16c>
 800c76a:	b913      	cbnz	r3, 800c772 <_printf_float+0x1b6>
 800c76c:	6822      	ldr	r2, [r4, #0]
 800c76e:	07d2      	lsls	r2, r2, #31
 800c770:	d501      	bpl.n	800c776 <_printf_float+0x1ba>
 800c772:	3302      	adds	r3, #2
 800c774:	e7f4      	b.n	800c760 <_printf_float+0x1a4>
 800c776:	2301      	movs	r3, #1
 800c778:	e7f2      	b.n	800c760 <_printf_float+0x1a4>
 800c77a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c780:	4299      	cmp	r1, r3
 800c782:	db05      	blt.n	800c790 <_printf_float+0x1d4>
 800c784:	6823      	ldr	r3, [r4, #0]
 800c786:	6121      	str	r1, [r4, #16]
 800c788:	07d8      	lsls	r0, r3, #31
 800c78a:	d5ea      	bpl.n	800c762 <_printf_float+0x1a6>
 800c78c:	1c4b      	adds	r3, r1, #1
 800c78e:	e7e7      	b.n	800c760 <_printf_float+0x1a4>
 800c790:	2900      	cmp	r1, #0
 800c792:	bfd4      	ite	le
 800c794:	f1c1 0202 	rsble	r2, r1, #2
 800c798:	2201      	movgt	r2, #1
 800c79a:	4413      	add	r3, r2
 800c79c:	e7e0      	b.n	800c760 <_printf_float+0x1a4>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	055a      	lsls	r2, r3, #21
 800c7a2:	d407      	bmi.n	800c7b4 <_printf_float+0x1f8>
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	4642      	mov	r2, r8
 800c7a8:	4631      	mov	r1, r6
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	47b8      	blx	r7
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	d12c      	bne.n	800c80c <_printf_float+0x250>
 800c7b2:	e764      	b.n	800c67e <_printf_float+0xc2>
 800c7b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c7b8:	f240 80e0 	bls.w	800c97c <_printf_float+0x3c0>
 800c7bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f7f4 f958 	bl	8000a78 <__aeabi_dcmpeq>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d034      	beq.n	800c836 <_printf_float+0x27a>
 800c7cc:	4a37      	ldr	r2, [pc, #220]	; (800c8ac <_printf_float+0x2f0>)
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4631      	mov	r1, r6
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	47b8      	blx	r7
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	f43f af51 	beq.w	800c67e <_printf_float+0xc2>
 800c7dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	db02      	blt.n	800c7ea <_printf_float+0x22e>
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	07d8      	lsls	r0, r3, #31
 800c7e8:	d510      	bpl.n	800c80c <_printf_float+0x250>
 800c7ea:	ee18 3a10 	vmov	r3, s16
 800c7ee:	4652      	mov	r2, sl
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	47b8      	blx	r7
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	f43f af41 	beq.w	800c67e <_printf_float+0xc2>
 800c7fc:	f04f 0800 	mov.w	r8, #0
 800c800:	f104 091a 	add.w	r9, r4, #26
 800c804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c806:	3b01      	subs	r3, #1
 800c808:	4543      	cmp	r3, r8
 800c80a:	dc09      	bgt.n	800c820 <_printf_float+0x264>
 800c80c:	6823      	ldr	r3, [r4, #0]
 800c80e:	079b      	lsls	r3, r3, #30
 800c810:	f100 8105 	bmi.w	800ca1e <_printf_float+0x462>
 800c814:	68e0      	ldr	r0, [r4, #12]
 800c816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c818:	4298      	cmp	r0, r3
 800c81a:	bfb8      	it	lt
 800c81c:	4618      	movlt	r0, r3
 800c81e:	e730      	b.n	800c682 <_printf_float+0xc6>
 800c820:	2301      	movs	r3, #1
 800c822:	464a      	mov	r2, r9
 800c824:	4631      	mov	r1, r6
 800c826:	4628      	mov	r0, r5
 800c828:	47b8      	blx	r7
 800c82a:	3001      	adds	r0, #1
 800c82c:	f43f af27 	beq.w	800c67e <_printf_float+0xc2>
 800c830:	f108 0801 	add.w	r8, r8, #1
 800c834:	e7e6      	b.n	800c804 <_printf_float+0x248>
 800c836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dc39      	bgt.n	800c8b0 <_printf_float+0x2f4>
 800c83c:	4a1b      	ldr	r2, [pc, #108]	; (800c8ac <_printf_float+0x2f0>)
 800c83e:	2301      	movs	r3, #1
 800c840:	4631      	mov	r1, r6
 800c842:	4628      	mov	r0, r5
 800c844:	47b8      	blx	r7
 800c846:	3001      	adds	r0, #1
 800c848:	f43f af19 	beq.w	800c67e <_printf_float+0xc2>
 800c84c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c850:	4313      	orrs	r3, r2
 800c852:	d102      	bne.n	800c85a <_printf_float+0x29e>
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	07d9      	lsls	r1, r3, #31
 800c858:	d5d8      	bpl.n	800c80c <_printf_float+0x250>
 800c85a:	ee18 3a10 	vmov	r3, s16
 800c85e:	4652      	mov	r2, sl
 800c860:	4631      	mov	r1, r6
 800c862:	4628      	mov	r0, r5
 800c864:	47b8      	blx	r7
 800c866:	3001      	adds	r0, #1
 800c868:	f43f af09 	beq.w	800c67e <_printf_float+0xc2>
 800c86c:	f04f 0900 	mov.w	r9, #0
 800c870:	f104 0a1a 	add.w	sl, r4, #26
 800c874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c876:	425b      	negs	r3, r3
 800c878:	454b      	cmp	r3, r9
 800c87a:	dc01      	bgt.n	800c880 <_printf_float+0x2c4>
 800c87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c87e:	e792      	b.n	800c7a6 <_printf_float+0x1ea>
 800c880:	2301      	movs	r3, #1
 800c882:	4652      	mov	r2, sl
 800c884:	4631      	mov	r1, r6
 800c886:	4628      	mov	r0, r5
 800c888:	47b8      	blx	r7
 800c88a:	3001      	adds	r0, #1
 800c88c:	f43f aef7 	beq.w	800c67e <_printf_float+0xc2>
 800c890:	f109 0901 	add.w	r9, r9, #1
 800c894:	e7ee      	b.n	800c874 <_printf_float+0x2b8>
 800c896:	bf00      	nop
 800c898:	7fefffff 	.word	0x7fefffff
 800c89c:	08014048 	.word	0x08014048
 800c8a0:	0801404c 	.word	0x0801404c
 800c8a4:	08014054 	.word	0x08014054
 800c8a8:	08014050 	.word	0x08014050
 800c8ac:	08014058 	.word	0x08014058
 800c8b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	bfa8      	it	ge
 800c8b8:	461a      	movge	r2, r3
 800c8ba:	2a00      	cmp	r2, #0
 800c8bc:	4691      	mov	r9, r2
 800c8be:	dc37      	bgt.n	800c930 <_printf_float+0x374>
 800c8c0:	f04f 0b00 	mov.w	fp, #0
 800c8c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8c8:	f104 021a 	add.w	r2, r4, #26
 800c8cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	eba3 0309 	sub.w	r3, r3, r9
 800c8d4:	455b      	cmp	r3, fp
 800c8d6:	dc33      	bgt.n	800c940 <_printf_float+0x384>
 800c8d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	db3b      	blt.n	800c958 <_printf_float+0x39c>
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	07da      	lsls	r2, r3, #31
 800c8e4:	d438      	bmi.n	800c958 <_printf_float+0x39c>
 800c8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8e8:	9a05      	ldr	r2, [sp, #20]
 800c8ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8ec:	1a9a      	subs	r2, r3, r2
 800c8ee:	eba3 0901 	sub.w	r9, r3, r1
 800c8f2:	4591      	cmp	r9, r2
 800c8f4:	bfa8      	it	ge
 800c8f6:	4691      	movge	r9, r2
 800c8f8:	f1b9 0f00 	cmp.w	r9, #0
 800c8fc:	dc35      	bgt.n	800c96a <_printf_float+0x3ae>
 800c8fe:	f04f 0800 	mov.w	r8, #0
 800c902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c906:	f104 0a1a 	add.w	sl, r4, #26
 800c90a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c90e:	1a9b      	subs	r3, r3, r2
 800c910:	eba3 0309 	sub.w	r3, r3, r9
 800c914:	4543      	cmp	r3, r8
 800c916:	f77f af79 	ble.w	800c80c <_printf_float+0x250>
 800c91a:	2301      	movs	r3, #1
 800c91c:	4652      	mov	r2, sl
 800c91e:	4631      	mov	r1, r6
 800c920:	4628      	mov	r0, r5
 800c922:	47b8      	blx	r7
 800c924:	3001      	adds	r0, #1
 800c926:	f43f aeaa 	beq.w	800c67e <_printf_float+0xc2>
 800c92a:	f108 0801 	add.w	r8, r8, #1
 800c92e:	e7ec      	b.n	800c90a <_printf_float+0x34e>
 800c930:	4613      	mov	r3, r2
 800c932:	4631      	mov	r1, r6
 800c934:	4642      	mov	r2, r8
 800c936:	4628      	mov	r0, r5
 800c938:	47b8      	blx	r7
 800c93a:	3001      	adds	r0, #1
 800c93c:	d1c0      	bne.n	800c8c0 <_printf_float+0x304>
 800c93e:	e69e      	b.n	800c67e <_printf_float+0xc2>
 800c940:	2301      	movs	r3, #1
 800c942:	4631      	mov	r1, r6
 800c944:	4628      	mov	r0, r5
 800c946:	9205      	str	r2, [sp, #20]
 800c948:	47b8      	blx	r7
 800c94a:	3001      	adds	r0, #1
 800c94c:	f43f ae97 	beq.w	800c67e <_printf_float+0xc2>
 800c950:	9a05      	ldr	r2, [sp, #20]
 800c952:	f10b 0b01 	add.w	fp, fp, #1
 800c956:	e7b9      	b.n	800c8cc <_printf_float+0x310>
 800c958:	ee18 3a10 	vmov	r3, s16
 800c95c:	4652      	mov	r2, sl
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	47b8      	blx	r7
 800c964:	3001      	adds	r0, #1
 800c966:	d1be      	bne.n	800c8e6 <_printf_float+0x32a>
 800c968:	e689      	b.n	800c67e <_printf_float+0xc2>
 800c96a:	9a05      	ldr	r2, [sp, #20]
 800c96c:	464b      	mov	r3, r9
 800c96e:	4442      	add	r2, r8
 800c970:	4631      	mov	r1, r6
 800c972:	4628      	mov	r0, r5
 800c974:	47b8      	blx	r7
 800c976:	3001      	adds	r0, #1
 800c978:	d1c1      	bne.n	800c8fe <_printf_float+0x342>
 800c97a:	e680      	b.n	800c67e <_printf_float+0xc2>
 800c97c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c97e:	2a01      	cmp	r2, #1
 800c980:	dc01      	bgt.n	800c986 <_printf_float+0x3ca>
 800c982:	07db      	lsls	r3, r3, #31
 800c984:	d538      	bpl.n	800c9f8 <_printf_float+0x43c>
 800c986:	2301      	movs	r3, #1
 800c988:	4642      	mov	r2, r8
 800c98a:	4631      	mov	r1, r6
 800c98c:	4628      	mov	r0, r5
 800c98e:	47b8      	blx	r7
 800c990:	3001      	adds	r0, #1
 800c992:	f43f ae74 	beq.w	800c67e <_printf_float+0xc2>
 800c996:	ee18 3a10 	vmov	r3, s16
 800c99a:	4652      	mov	r2, sl
 800c99c:	4631      	mov	r1, r6
 800c99e:	4628      	mov	r0, r5
 800c9a0:	47b8      	blx	r7
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	f43f ae6b 	beq.w	800c67e <_printf_float+0xc2>
 800c9a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f7f4 f862 	bl	8000a78 <__aeabi_dcmpeq>
 800c9b4:	b9d8      	cbnz	r0, 800c9ee <_printf_float+0x432>
 800c9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b8:	f108 0201 	add.w	r2, r8, #1
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	4631      	mov	r1, r6
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b8      	blx	r7
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d10e      	bne.n	800c9e6 <_printf_float+0x42a>
 800c9c8:	e659      	b.n	800c67e <_printf_float+0xc2>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	4652      	mov	r2, sl
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	47b8      	blx	r7
 800c9d4:	3001      	adds	r0, #1
 800c9d6:	f43f ae52 	beq.w	800c67e <_printf_float+0xc2>
 800c9da:	f108 0801 	add.w	r8, r8, #1
 800c9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	4543      	cmp	r3, r8
 800c9e4:	dcf1      	bgt.n	800c9ca <_printf_float+0x40e>
 800c9e6:	464b      	mov	r3, r9
 800c9e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c9ec:	e6dc      	b.n	800c7a8 <_printf_float+0x1ec>
 800c9ee:	f04f 0800 	mov.w	r8, #0
 800c9f2:	f104 0a1a 	add.w	sl, r4, #26
 800c9f6:	e7f2      	b.n	800c9de <_printf_float+0x422>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	4642      	mov	r2, r8
 800c9fc:	e7df      	b.n	800c9be <_printf_float+0x402>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	464a      	mov	r2, r9
 800ca02:	4631      	mov	r1, r6
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b8      	blx	r7
 800ca08:	3001      	adds	r0, #1
 800ca0a:	f43f ae38 	beq.w	800c67e <_printf_float+0xc2>
 800ca0e:	f108 0801 	add.w	r8, r8, #1
 800ca12:	68e3      	ldr	r3, [r4, #12]
 800ca14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca16:	1a5b      	subs	r3, r3, r1
 800ca18:	4543      	cmp	r3, r8
 800ca1a:	dcf0      	bgt.n	800c9fe <_printf_float+0x442>
 800ca1c:	e6fa      	b.n	800c814 <_printf_float+0x258>
 800ca1e:	f04f 0800 	mov.w	r8, #0
 800ca22:	f104 0919 	add.w	r9, r4, #25
 800ca26:	e7f4      	b.n	800ca12 <_printf_float+0x456>

0800ca28 <_printf_common>:
 800ca28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca2c:	4616      	mov	r6, r2
 800ca2e:	4699      	mov	r9, r3
 800ca30:	688a      	ldr	r2, [r1, #8]
 800ca32:	690b      	ldr	r3, [r1, #16]
 800ca34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	bfb8      	it	lt
 800ca3c:	4613      	movlt	r3, r2
 800ca3e:	6033      	str	r3, [r6, #0]
 800ca40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca44:	4607      	mov	r7, r0
 800ca46:	460c      	mov	r4, r1
 800ca48:	b10a      	cbz	r2, 800ca4e <_printf_common+0x26>
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	6033      	str	r3, [r6, #0]
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	0699      	lsls	r1, r3, #26
 800ca52:	bf42      	ittt	mi
 800ca54:	6833      	ldrmi	r3, [r6, #0]
 800ca56:	3302      	addmi	r3, #2
 800ca58:	6033      	strmi	r3, [r6, #0]
 800ca5a:	6825      	ldr	r5, [r4, #0]
 800ca5c:	f015 0506 	ands.w	r5, r5, #6
 800ca60:	d106      	bne.n	800ca70 <_printf_common+0x48>
 800ca62:	f104 0a19 	add.w	sl, r4, #25
 800ca66:	68e3      	ldr	r3, [r4, #12]
 800ca68:	6832      	ldr	r2, [r6, #0]
 800ca6a:	1a9b      	subs	r3, r3, r2
 800ca6c:	42ab      	cmp	r3, r5
 800ca6e:	dc26      	bgt.n	800cabe <_printf_common+0x96>
 800ca70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca74:	1e13      	subs	r3, r2, #0
 800ca76:	6822      	ldr	r2, [r4, #0]
 800ca78:	bf18      	it	ne
 800ca7a:	2301      	movne	r3, #1
 800ca7c:	0692      	lsls	r2, r2, #26
 800ca7e:	d42b      	bmi.n	800cad8 <_printf_common+0xb0>
 800ca80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca84:	4649      	mov	r1, r9
 800ca86:	4638      	mov	r0, r7
 800ca88:	47c0      	blx	r8
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	d01e      	beq.n	800cacc <_printf_common+0xa4>
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	68e5      	ldr	r5, [r4, #12]
 800ca92:	6832      	ldr	r2, [r6, #0]
 800ca94:	f003 0306 	and.w	r3, r3, #6
 800ca98:	2b04      	cmp	r3, #4
 800ca9a:	bf08      	it	eq
 800ca9c:	1aad      	subeq	r5, r5, r2
 800ca9e:	68a3      	ldr	r3, [r4, #8]
 800caa0:	6922      	ldr	r2, [r4, #16]
 800caa2:	bf0c      	ite	eq
 800caa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caa8:	2500      	movne	r5, #0
 800caaa:	4293      	cmp	r3, r2
 800caac:	bfc4      	itt	gt
 800caae:	1a9b      	subgt	r3, r3, r2
 800cab0:	18ed      	addgt	r5, r5, r3
 800cab2:	2600      	movs	r6, #0
 800cab4:	341a      	adds	r4, #26
 800cab6:	42b5      	cmp	r5, r6
 800cab8:	d11a      	bne.n	800caf0 <_printf_common+0xc8>
 800caba:	2000      	movs	r0, #0
 800cabc:	e008      	b.n	800cad0 <_printf_common+0xa8>
 800cabe:	2301      	movs	r3, #1
 800cac0:	4652      	mov	r2, sl
 800cac2:	4649      	mov	r1, r9
 800cac4:	4638      	mov	r0, r7
 800cac6:	47c0      	blx	r8
 800cac8:	3001      	adds	r0, #1
 800caca:	d103      	bne.n	800cad4 <_printf_common+0xac>
 800cacc:	f04f 30ff 	mov.w	r0, #4294967295
 800cad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad4:	3501      	adds	r5, #1
 800cad6:	e7c6      	b.n	800ca66 <_printf_common+0x3e>
 800cad8:	18e1      	adds	r1, r4, r3
 800cada:	1c5a      	adds	r2, r3, #1
 800cadc:	2030      	movs	r0, #48	; 0x30
 800cade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cae2:	4422      	add	r2, r4
 800cae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800caec:	3302      	adds	r3, #2
 800caee:	e7c7      	b.n	800ca80 <_printf_common+0x58>
 800caf0:	2301      	movs	r3, #1
 800caf2:	4622      	mov	r2, r4
 800caf4:	4649      	mov	r1, r9
 800caf6:	4638      	mov	r0, r7
 800caf8:	47c0      	blx	r8
 800cafa:	3001      	adds	r0, #1
 800cafc:	d0e6      	beq.n	800cacc <_printf_common+0xa4>
 800cafe:	3601      	adds	r6, #1
 800cb00:	e7d9      	b.n	800cab6 <_printf_common+0x8e>
	...

0800cb04 <_printf_i>:
 800cb04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb08:	7e0f      	ldrb	r7, [r1, #24]
 800cb0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb0c:	2f78      	cmp	r7, #120	; 0x78
 800cb0e:	4691      	mov	r9, r2
 800cb10:	4680      	mov	r8, r0
 800cb12:	460c      	mov	r4, r1
 800cb14:	469a      	mov	sl, r3
 800cb16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb1a:	d807      	bhi.n	800cb2c <_printf_i+0x28>
 800cb1c:	2f62      	cmp	r7, #98	; 0x62
 800cb1e:	d80a      	bhi.n	800cb36 <_printf_i+0x32>
 800cb20:	2f00      	cmp	r7, #0
 800cb22:	f000 80d8 	beq.w	800ccd6 <_printf_i+0x1d2>
 800cb26:	2f58      	cmp	r7, #88	; 0x58
 800cb28:	f000 80a3 	beq.w	800cc72 <_printf_i+0x16e>
 800cb2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb34:	e03a      	b.n	800cbac <_printf_i+0xa8>
 800cb36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb3a:	2b15      	cmp	r3, #21
 800cb3c:	d8f6      	bhi.n	800cb2c <_printf_i+0x28>
 800cb3e:	a101      	add	r1, pc, #4	; (adr r1, 800cb44 <_printf_i+0x40>)
 800cb40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb44:	0800cb9d 	.word	0x0800cb9d
 800cb48:	0800cbb1 	.word	0x0800cbb1
 800cb4c:	0800cb2d 	.word	0x0800cb2d
 800cb50:	0800cb2d 	.word	0x0800cb2d
 800cb54:	0800cb2d 	.word	0x0800cb2d
 800cb58:	0800cb2d 	.word	0x0800cb2d
 800cb5c:	0800cbb1 	.word	0x0800cbb1
 800cb60:	0800cb2d 	.word	0x0800cb2d
 800cb64:	0800cb2d 	.word	0x0800cb2d
 800cb68:	0800cb2d 	.word	0x0800cb2d
 800cb6c:	0800cb2d 	.word	0x0800cb2d
 800cb70:	0800ccbd 	.word	0x0800ccbd
 800cb74:	0800cbe1 	.word	0x0800cbe1
 800cb78:	0800cc9f 	.word	0x0800cc9f
 800cb7c:	0800cb2d 	.word	0x0800cb2d
 800cb80:	0800cb2d 	.word	0x0800cb2d
 800cb84:	0800ccdf 	.word	0x0800ccdf
 800cb88:	0800cb2d 	.word	0x0800cb2d
 800cb8c:	0800cbe1 	.word	0x0800cbe1
 800cb90:	0800cb2d 	.word	0x0800cb2d
 800cb94:	0800cb2d 	.word	0x0800cb2d
 800cb98:	0800cca7 	.word	0x0800cca7
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	1d1a      	adds	r2, r3, #4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	602a      	str	r2, [r5, #0]
 800cba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbac:	2301      	movs	r3, #1
 800cbae:	e0a3      	b.n	800ccf8 <_printf_i+0x1f4>
 800cbb0:	6820      	ldr	r0, [r4, #0]
 800cbb2:	6829      	ldr	r1, [r5, #0]
 800cbb4:	0606      	lsls	r6, r0, #24
 800cbb6:	f101 0304 	add.w	r3, r1, #4
 800cbba:	d50a      	bpl.n	800cbd2 <_printf_i+0xce>
 800cbbc:	680e      	ldr	r6, [r1, #0]
 800cbbe:	602b      	str	r3, [r5, #0]
 800cbc0:	2e00      	cmp	r6, #0
 800cbc2:	da03      	bge.n	800cbcc <_printf_i+0xc8>
 800cbc4:	232d      	movs	r3, #45	; 0x2d
 800cbc6:	4276      	negs	r6, r6
 800cbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbcc:	485e      	ldr	r0, [pc, #376]	; (800cd48 <_printf_i+0x244>)
 800cbce:	230a      	movs	r3, #10
 800cbd0:	e019      	b.n	800cc06 <_printf_i+0x102>
 800cbd2:	680e      	ldr	r6, [r1, #0]
 800cbd4:	602b      	str	r3, [r5, #0]
 800cbd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cbda:	bf18      	it	ne
 800cbdc:	b236      	sxthne	r6, r6
 800cbde:	e7ef      	b.n	800cbc0 <_printf_i+0xbc>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	6820      	ldr	r0, [r4, #0]
 800cbe4:	1d19      	adds	r1, r3, #4
 800cbe6:	6029      	str	r1, [r5, #0]
 800cbe8:	0601      	lsls	r1, r0, #24
 800cbea:	d501      	bpl.n	800cbf0 <_printf_i+0xec>
 800cbec:	681e      	ldr	r6, [r3, #0]
 800cbee:	e002      	b.n	800cbf6 <_printf_i+0xf2>
 800cbf0:	0646      	lsls	r6, r0, #25
 800cbf2:	d5fb      	bpl.n	800cbec <_printf_i+0xe8>
 800cbf4:	881e      	ldrh	r6, [r3, #0]
 800cbf6:	4854      	ldr	r0, [pc, #336]	; (800cd48 <_printf_i+0x244>)
 800cbf8:	2f6f      	cmp	r7, #111	; 0x6f
 800cbfa:	bf0c      	ite	eq
 800cbfc:	2308      	moveq	r3, #8
 800cbfe:	230a      	movne	r3, #10
 800cc00:	2100      	movs	r1, #0
 800cc02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc06:	6865      	ldr	r5, [r4, #4]
 800cc08:	60a5      	str	r5, [r4, #8]
 800cc0a:	2d00      	cmp	r5, #0
 800cc0c:	bfa2      	ittt	ge
 800cc0e:	6821      	ldrge	r1, [r4, #0]
 800cc10:	f021 0104 	bicge.w	r1, r1, #4
 800cc14:	6021      	strge	r1, [r4, #0]
 800cc16:	b90e      	cbnz	r6, 800cc1c <_printf_i+0x118>
 800cc18:	2d00      	cmp	r5, #0
 800cc1a:	d04d      	beq.n	800ccb8 <_printf_i+0x1b4>
 800cc1c:	4615      	mov	r5, r2
 800cc1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc22:	fb03 6711 	mls	r7, r3, r1, r6
 800cc26:	5dc7      	ldrb	r7, [r0, r7]
 800cc28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc2c:	4637      	mov	r7, r6
 800cc2e:	42bb      	cmp	r3, r7
 800cc30:	460e      	mov	r6, r1
 800cc32:	d9f4      	bls.n	800cc1e <_printf_i+0x11a>
 800cc34:	2b08      	cmp	r3, #8
 800cc36:	d10b      	bne.n	800cc50 <_printf_i+0x14c>
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	07de      	lsls	r6, r3, #31
 800cc3c:	d508      	bpl.n	800cc50 <_printf_i+0x14c>
 800cc3e:	6923      	ldr	r3, [r4, #16]
 800cc40:	6861      	ldr	r1, [r4, #4]
 800cc42:	4299      	cmp	r1, r3
 800cc44:	bfde      	ittt	le
 800cc46:	2330      	movle	r3, #48	; 0x30
 800cc48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc50:	1b52      	subs	r2, r2, r5
 800cc52:	6122      	str	r2, [r4, #16]
 800cc54:	f8cd a000 	str.w	sl, [sp]
 800cc58:	464b      	mov	r3, r9
 800cc5a:	aa03      	add	r2, sp, #12
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	4640      	mov	r0, r8
 800cc60:	f7ff fee2 	bl	800ca28 <_printf_common>
 800cc64:	3001      	adds	r0, #1
 800cc66:	d14c      	bne.n	800cd02 <_printf_i+0x1fe>
 800cc68:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6c:	b004      	add	sp, #16
 800cc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc72:	4835      	ldr	r0, [pc, #212]	; (800cd48 <_printf_i+0x244>)
 800cc74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc78:	6829      	ldr	r1, [r5, #0]
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc80:	6029      	str	r1, [r5, #0]
 800cc82:	061d      	lsls	r5, r3, #24
 800cc84:	d514      	bpl.n	800ccb0 <_printf_i+0x1ac>
 800cc86:	07df      	lsls	r7, r3, #31
 800cc88:	bf44      	itt	mi
 800cc8a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc8e:	6023      	strmi	r3, [r4, #0]
 800cc90:	b91e      	cbnz	r6, 800cc9a <_printf_i+0x196>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	f023 0320 	bic.w	r3, r3, #32
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	2310      	movs	r3, #16
 800cc9c:	e7b0      	b.n	800cc00 <_printf_i+0xfc>
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	f043 0320 	orr.w	r3, r3, #32
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	2378      	movs	r3, #120	; 0x78
 800cca8:	4828      	ldr	r0, [pc, #160]	; (800cd4c <_printf_i+0x248>)
 800ccaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccae:	e7e3      	b.n	800cc78 <_printf_i+0x174>
 800ccb0:	0659      	lsls	r1, r3, #25
 800ccb2:	bf48      	it	mi
 800ccb4:	b2b6      	uxthmi	r6, r6
 800ccb6:	e7e6      	b.n	800cc86 <_printf_i+0x182>
 800ccb8:	4615      	mov	r5, r2
 800ccba:	e7bb      	b.n	800cc34 <_printf_i+0x130>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	6826      	ldr	r6, [r4, #0]
 800ccc0:	6961      	ldr	r1, [r4, #20]
 800ccc2:	1d18      	adds	r0, r3, #4
 800ccc4:	6028      	str	r0, [r5, #0]
 800ccc6:	0635      	lsls	r5, r6, #24
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	d501      	bpl.n	800ccd0 <_printf_i+0x1cc>
 800cccc:	6019      	str	r1, [r3, #0]
 800ccce:	e002      	b.n	800ccd6 <_printf_i+0x1d2>
 800ccd0:	0670      	lsls	r0, r6, #25
 800ccd2:	d5fb      	bpl.n	800cccc <_printf_i+0x1c8>
 800ccd4:	8019      	strh	r1, [r3, #0]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	6123      	str	r3, [r4, #16]
 800ccda:	4615      	mov	r5, r2
 800ccdc:	e7ba      	b.n	800cc54 <_printf_i+0x150>
 800ccde:	682b      	ldr	r3, [r5, #0]
 800cce0:	1d1a      	adds	r2, r3, #4
 800cce2:	602a      	str	r2, [r5, #0]
 800cce4:	681d      	ldr	r5, [r3, #0]
 800cce6:	6862      	ldr	r2, [r4, #4]
 800cce8:	2100      	movs	r1, #0
 800ccea:	4628      	mov	r0, r5
 800ccec:	f7f3 fa50 	bl	8000190 <memchr>
 800ccf0:	b108      	cbz	r0, 800ccf6 <_printf_i+0x1f2>
 800ccf2:	1b40      	subs	r0, r0, r5
 800ccf4:	6060      	str	r0, [r4, #4]
 800ccf6:	6863      	ldr	r3, [r4, #4]
 800ccf8:	6123      	str	r3, [r4, #16]
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd00:	e7a8      	b.n	800cc54 <_printf_i+0x150>
 800cd02:	6923      	ldr	r3, [r4, #16]
 800cd04:	462a      	mov	r2, r5
 800cd06:	4649      	mov	r1, r9
 800cd08:	4640      	mov	r0, r8
 800cd0a:	47d0      	blx	sl
 800cd0c:	3001      	adds	r0, #1
 800cd0e:	d0ab      	beq.n	800cc68 <_printf_i+0x164>
 800cd10:	6823      	ldr	r3, [r4, #0]
 800cd12:	079b      	lsls	r3, r3, #30
 800cd14:	d413      	bmi.n	800cd3e <_printf_i+0x23a>
 800cd16:	68e0      	ldr	r0, [r4, #12]
 800cd18:	9b03      	ldr	r3, [sp, #12]
 800cd1a:	4298      	cmp	r0, r3
 800cd1c:	bfb8      	it	lt
 800cd1e:	4618      	movlt	r0, r3
 800cd20:	e7a4      	b.n	800cc6c <_printf_i+0x168>
 800cd22:	2301      	movs	r3, #1
 800cd24:	4632      	mov	r2, r6
 800cd26:	4649      	mov	r1, r9
 800cd28:	4640      	mov	r0, r8
 800cd2a:	47d0      	blx	sl
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	d09b      	beq.n	800cc68 <_printf_i+0x164>
 800cd30:	3501      	adds	r5, #1
 800cd32:	68e3      	ldr	r3, [r4, #12]
 800cd34:	9903      	ldr	r1, [sp, #12]
 800cd36:	1a5b      	subs	r3, r3, r1
 800cd38:	42ab      	cmp	r3, r5
 800cd3a:	dcf2      	bgt.n	800cd22 <_printf_i+0x21e>
 800cd3c:	e7eb      	b.n	800cd16 <_printf_i+0x212>
 800cd3e:	2500      	movs	r5, #0
 800cd40:	f104 0619 	add.w	r6, r4, #25
 800cd44:	e7f5      	b.n	800cd32 <_printf_i+0x22e>
 800cd46:	bf00      	nop
 800cd48:	0801405a 	.word	0x0801405a
 800cd4c:	0801406b 	.word	0x0801406b

0800cd50 <iprintf>:
 800cd50:	b40f      	push	{r0, r1, r2, r3}
 800cd52:	4b0a      	ldr	r3, [pc, #40]	; (800cd7c <iprintf+0x2c>)
 800cd54:	b513      	push	{r0, r1, r4, lr}
 800cd56:	681c      	ldr	r4, [r3, #0]
 800cd58:	b124      	cbz	r4, 800cd64 <iprintf+0x14>
 800cd5a:	69a3      	ldr	r3, [r4, #24]
 800cd5c:	b913      	cbnz	r3, 800cd64 <iprintf+0x14>
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7ff f9a6 	bl	800c0b0 <__sinit>
 800cd64:	ab05      	add	r3, sp, #20
 800cd66:	9a04      	ldr	r2, [sp, #16]
 800cd68:	68a1      	ldr	r1, [r4, #8]
 800cd6a:	9301      	str	r3, [sp, #4]
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f001 fe2d 	bl	800e9cc <_vfiprintf_r>
 800cd72:	b002      	add	sp, #8
 800cd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd78:	b004      	add	sp, #16
 800cd7a:	4770      	bx	lr
 800cd7c:	20000134 	.word	0x20000134

0800cd80 <_puts_r>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	460e      	mov	r6, r1
 800cd84:	4605      	mov	r5, r0
 800cd86:	b118      	cbz	r0, 800cd90 <_puts_r+0x10>
 800cd88:	6983      	ldr	r3, [r0, #24]
 800cd8a:	b90b      	cbnz	r3, 800cd90 <_puts_r+0x10>
 800cd8c:	f7ff f990 	bl	800c0b0 <__sinit>
 800cd90:	69ab      	ldr	r3, [r5, #24]
 800cd92:	68ac      	ldr	r4, [r5, #8]
 800cd94:	b913      	cbnz	r3, 800cd9c <_puts_r+0x1c>
 800cd96:	4628      	mov	r0, r5
 800cd98:	f7ff f98a 	bl	800c0b0 <__sinit>
 800cd9c:	4b2c      	ldr	r3, [pc, #176]	; (800ce50 <_puts_r+0xd0>)
 800cd9e:	429c      	cmp	r4, r3
 800cda0:	d120      	bne.n	800cde4 <_puts_r+0x64>
 800cda2:	686c      	ldr	r4, [r5, #4]
 800cda4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cda6:	07db      	lsls	r3, r3, #31
 800cda8:	d405      	bmi.n	800cdb6 <_puts_r+0x36>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	0598      	lsls	r0, r3, #22
 800cdae:	d402      	bmi.n	800cdb6 <_puts_r+0x36>
 800cdb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdb2:	f7ff fa40 	bl	800c236 <__retarget_lock_acquire_recursive>
 800cdb6:	89a3      	ldrh	r3, [r4, #12]
 800cdb8:	0719      	lsls	r1, r3, #28
 800cdba:	d51d      	bpl.n	800cdf8 <_puts_r+0x78>
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	b1db      	cbz	r3, 800cdf8 <_puts_r+0x78>
 800cdc0:	3e01      	subs	r6, #1
 800cdc2:	68a3      	ldr	r3, [r4, #8]
 800cdc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	60a3      	str	r3, [r4, #8]
 800cdcc:	bb39      	cbnz	r1, 800ce1e <_puts_r+0x9e>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	da38      	bge.n	800ce44 <_puts_r+0xc4>
 800cdd2:	4622      	mov	r2, r4
 800cdd4:	210a      	movs	r1, #10
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f000 f8f4 	bl	800cfc4 <__swbuf_r>
 800cddc:	3001      	adds	r0, #1
 800cdde:	d011      	beq.n	800ce04 <_puts_r+0x84>
 800cde0:	250a      	movs	r5, #10
 800cde2:	e011      	b.n	800ce08 <_puts_r+0x88>
 800cde4:	4b1b      	ldr	r3, [pc, #108]	; (800ce54 <_puts_r+0xd4>)
 800cde6:	429c      	cmp	r4, r3
 800cde8:	d101      	bne.n	800cdee <_puts_r+0x6e>
 800cdea:	68ac      	ldr	r4, [r5, #8]
 800cdec:	e7da      	b.n	800cda4 <_puts_r+0x24>
 800cdee:	4b1a      	ldr	r3, [pc, #104]	; (800ce58 <_puts_r+0xd8>)
 800cdf0:	429c      	cmp	r4, r3
 800cdf2:	bf08      	it	eq
 800cdf4:	68ec      	ldreq	r4, [r5, #12]
 800cdf6:	e7d5      	b.n	800cda4 <_puts_r+0x24>
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f000 f946 	bl	800d08c <__swsetup_r>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d0dd      	beq.n	800cdc0 <_puts_r+0x40>
 800ce04:	f04f 35ff 	mov.w	r5, #4294967295
 800ce08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce0a:	07da      	lsls	r2, r3, #31
 800ce0c:	d405      	bmi.n	800ce1a <_puts_r+0x9a>
 800ce0e:	89a3      	ldrh	r3, [r4, #12]
 800ce10:	059b      	lsls	r3, r3, #22
 800ce12:	d402      	bmi.n	800ce1a <_puts_r+0x9a>
 800ce14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce16:	f7ff fa0f 	bl	800c238 <__retarget_lock_release_recursive>
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	bd70      	pop	{r4, r5, r6, pc}
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	da04      	bge.n	800ce2c <_puts_r+0xac>
 800ce22:	69a2      	ldr	r2, [r4, #24]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	dc06      	bgt.n	800ce36 <_puts_r+0xb6>
 800ce28:	290a      	cmp	r1, #10
 800ce2a:	d004      	beq.n	800ce36 <_puts_r+0xb6>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	1c5a      	adds	r2, r3, #1
 800ce30:	6022      	str	r2, [r4, #0]
 800ce32:	7019      	strb	r1, [r3, #0]
 800ce34:	e7c5      	b.n	800cdc2 <_puts_r+0x42>
 800ce36:	4622      	mov	r2, r4
 800ce38:	4628      	mov	r0, r5
 800ce3a:	f000 f8c3 	bl	800cfc4 <__swbuf_r>
 800ce3e:	3001      	adds	r0, #1
 800ce40:	d1bf      	bne.n	800cdc2 <_puts_r+0x42>
 800ce42:	e7df      	b.n	800ce04 <_puts_r+0x84>
 800ce44:	6823      	ldr	r3, [r4, #0]
 800ce46:	250a      	movs	r5, #10
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	6022      	str	r2, [r4, #0]
 800ce4c:	701d      	strb	r5, [r3, #0]
 800ce4e:	e7db      	b.n	800ce08 <_puts_r+0x88>
 800ce50:	08014004 	.word	0x08014004
 800ce54:	08014024 	.word	0x08014024
 800ce58:	08013fe4 	.word	0x08013fe4

0800ce5c <puts>:
 800ce5c:	4b02      	ldr	r3, [pc, #8]	; (800ce68 <puts+0xc>)
 800ce5e:	4601      	mov	r1, r0
 800ce60:	6818      	ldr	r0, [r3, #0]
 800ce62:	f7ff bf8d 	b.w	800cd80 <_puts_r>
 800ce66:	bf00      	nop
 800ce68:	20000134 	.word	0x20000134

0800ce6c <_sbrk_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4d06      	ldr	r5, [pc, #24]	; (800ce88 <_sbrk_r+0x1c>)
 800ce70:	2300      	movs	r3, #0
 800ce72:	4604      	mov	r4, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	602b      	str	r3, [r5, #0]
 800ce78:	f7f4 fe6e 	bl	8001b58 <_sbrk>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	d102      	bne.n	800ce86 <_sbrk_r+0x1a>
 800ce80:	682b      	ldr	r3, [r5, #0]
 800ce82:	b103      	cbz	r3, 800ce86 <_sbrk_r+0x1a>
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	200007ac 	.word	0x200007ac

0800ce8c <siprintf>:
 800ce8c:	b40e      	push	{r1, r2, r3}
 800ce8e:	b500      	push	{lr}
 800ce90:	b09c      	sub	sp, #112	; 0x70
 800ce92:	ab1d      	add	r3, sp, #116	; 0x74
 800ce94:	9002      	str	r0, [sp, #8]
 800ce96:	9006      	str	r0, [sp, #24]
 800ce98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce9c:	4809      	ldr	r0, [pc, #36]	; (800cec4 <siprintf+0x38>)
 800ce9e:	9107      	str	r1, [sp, #28]
 800cea0:	9104      	str	r1, [sp, #16]
 800cea2:	4909      	ldr	r1, [pc, #36]	; (800cec8 <siprintf+0x3c>)
 800cea4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cea8:	9105      	str	r1, [sp, #20]
 800ceaa:	6800      	ldr	r0, [r0, #0]
 800ceac:	9301      	str	r3, [sp, #4]
 800ceae:	a902      	add	r1, sp, #8
 800ceb0:	f001 fc62 	bl	800e778 <_svfiprintf_r>
 800ceb4:	9b02      	ldr	r3, [sp, #8]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	701a      	strb	r2, [r3, #0]
 800ceba:	b01c      	add	sp, #112	; 0x70
 800cebc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec0:	b003      	add	sp, #12
 800cec2:	4770      	bx	lr
 800cec4:	20000134 	.word	0x20000134
 800cec8:	ffff0208 	.word	0xffff0208

0800cecc <__sread>:
 800cecc:	b510      	push	{r4, lr}
 800cece:	460c      	mov	r4, r1
 800ced0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced4:	f001 feaa 	bl	800ec2c <_read_r>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	bfab      	itete	ge
 800cedc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cede:	89a3      	ldrhlt	r3, [r4, #12]
 800cee0:	181b      	addge	r3, r3, r0
 800cee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cee6:	bfac      	ite	ge
 800cee8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ceea:	81a3      	strhlt	r3, [r4, #12]
 800ceec:	bd10      	pop	{r4, pc}

0800ceee <__swrite>:
 800ceee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef2:	461f      	mov	r7, r3
 800cef4:	898b      	ldrh	r3, [r1, #12]
 800cef6:	05db      	lsls	r3, r3, #23
 800cef8:	4605      	mov	r5, r0
 800cefa:	460c      	mov	r4, r1
 800cefc:	4616      	mov	r6, r2
 800cefe:	d505      	bpl.n	800cf0c <__swrite+0x1e>
 800cf00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf04:	2302      	movs	r3, #2
 800cf06:	2200      	movs	r2, #0
 800cf08:	f000 ffbc 	bl	800de84 <_lseek_r>
 800cf0c:	89a3      	ldrh	r3, [r4, #12]
 800cf0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf16:	81a3      	strh	r3, [r4, #12]
 800cf18:	4632      	mov	r2, r6
 800cf1a:	463b      	mov	r3, r7
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf22:	f000 b8a1 	b.w	800d068 <_write_r>

0800cf26 <__sseek>:
 800cf26:	b510      	push	{r4, lr}
 800cf28:	460c      	mov	r4, r1
 800cf2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf2e:	f000 ffa9 	bl	800de84 <_lseek_r>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	bf15      	itete	ne
 800cf38:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf42:	81a3      	strheq	r3, [r4, #12]
 800cf44:	bf18      	it	ne
 800cf46:	81a3      	strhne	r3, [r4, #12]
 800cf48:	bd10      	pop	{r4, pc}

0800cf4a <__sclose>:
 800cf4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf4e:	f000 b90b 	b.w	800d168 <_close_r>

0800cf52 <_vsniprintf_r>:
 800cf52:	b530      	push	{r4, r5, lr}
 800cf54:	4614      	mov	r4, r2
 800cf56:	2c00      	cmp	r4, #0
 800cf58:	b09b      	sub	sp, #108	; 0x6c
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	da05      	bge.n	800cf6c <_vsniprintf_r+0x1a>
 800cf60:	238b      	movs	r3, #139	; 0x8b
 800cf62:	6003      	str	r3, [r0, #0]
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	b01b      	add	sp, #108	; 0x6c
 800cf6a:	bd30      	pop	{r4, r5, pc}
 800cf6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf70:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cf74:	bf14      	ite	ne
 800cf76:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cf7a:	4623      	moveq	r3, r4
 800cf7c:	9302      	str	r3, [sp, #8]
 800cf7e:	9305      	str	r3, [sp, #20]
 800cf80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf84:	9100      	str	r1, [sp, #0]
 800cf86:	9104      	str	r1, [sp, #16]
 800cf88:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cf8c:	4669      	mov	r1, sp
 800cf8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf90:	f001 fbf2 	bl	800e778 <_svfiprintf_r>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	bfbc      	itt	lt
 800cf98:	238b      	movlt	r3, #139	; 0x8b
 800cf9a:	602b      	strlt	r3, [r5, #0]
 800cf9c:	2c00      	cmp	r4, #0
 800cf9e:	d0e3      	beq.n	800cf68 <_vsniprintf_r+0x16>
 800cfa0:	9b00      	ldr	r3, [sp, #0]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	701a      	strb	r2, [r3, #0]
 800cfa6:	e7df      	b.n	800cf68 <_vsniprintf_r+0x16>

0800cfa8 <vsniprintf>:
 800cfa8:	b507      	push	{r0, r1, r2, lr}
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	4613      	mov	r3, r2
 800cfae:	460a      	mov	r2, r1
 800cfb0:	4601      	mov	r1, r0
 800cfb2:	4803      	ldr	r0, [pc, #12]	; (800cfc0 <vsniprintf+0x18>)
 800cfb4:	6800      	ldr	r0, [r0, #0]
 800cfb6:	f7ff ffcc 	bl	800cf52 <_vsniprintf_r>
 800cfba:	b003      	add	sp, #12
 800cfbc:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfc0:	20000134 	.word	0x20000134

0800cfc4 <__swbuf_r>:
 800cfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc6:	460e      	mov	r6, r1
 800cfc8:	4614      	mov	r4, r2
 800cfca:	4605      	mov	r5, r0
 800cfcc:	b118      	cbz	r0, 800cfd6 <__swbuf_r+0x12>
 800cfce:	6983      	ldr	r3, [r0, #24]
 800cfd0:	b90b      	cbnz	r3, 800cfd6 <__swbuf_r+0x12>
 800cfd2:	f7ff f86d 	bl	800c0b0 <__sinit>
 800cfd6:	4b21      	ldr	r3, [pc, #132]	; (800d05c <__swbuf_r+0x98>)
 800cfd8:	429c      	cmp	r4, r3
 800cfda:	d12b      	bne.n	800d034 <__swbuf_r+0x70>
 800cfdc:	686c      	ldr	r4, [r5, #4]
 800cfde:	69a3      	ldr	r3, [r4, #24]
 800cfe0:	60a3      	str	r3, [r4, #8]
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	071a      	lsls	r2, r3, #28
 800cfe6:	d52f      	bpl.n	800d048 <__swbuf_r+0x84>
 800cfe8:	6923      	ldr	r3, [r4, #16]
 800cfea:	b36b      	cbz	r3, 800d048 <__swbuf_r+0x84>
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	6820      	ldr	r0, [r4, #0]
 800cff0:	1ac0      	subs	r0, r0, r3
 800cff2:	6963      	ldr	r3, [r4, #20]
 800cff4:	b2f6      	uxtb	r6, r6
 800cff6:	4283      	cmp	r3, r0
 800cff8:	4637      	mov	r7, r6
 800cffa:	dc04      	bgt.n	800d006 <__swbuf_r+0x42>
 800cffc:	4621      	mov	r1, r4
 800cffe:	4628      	mov	r0, r5
 800d000:	f7fe ffb0 	bl	800bf64 <_fflush_r>
 800d004:	bb30      	cbnz	r0, 800d054 <__swbuf_r+0x90>
 800d006:	68a3      	ldr	r3, [r4, #8]
 800d008:	3b01      	subs	r3, #1
 800d00a:	60a3      	str	r3, [r4, #8]
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	1c5a      	adds	r2, r3, #1
 800d010:	6022      	str	r2, [r4, #0]
 800d012:	701e      	strb	r6, [r3, #0]
 800d014:	6963      	ldr	r3, [r4, #20]
 800d016:	3001      	adds	r0, #1
 800d018:	4283      	cmp	r3, r0
 800d01a:	d004      	beq.n	800d026 <__swbuf_r+0x62>
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	07db      	lsls	r3, r3, #31
 800d020:	d506      	bpl.n	800d030 <__swbuf_r+0x6c>
 800d022:	2e0a      	cmp	r6, #10
 800d024:	d104      	bne.n	800d030 <__swbuf_r+0x6c>
 800d026:	4621      	mov	r1, r4
 800d028:	4628      	mov	r0, r5
 800d02a:	f7fe ff9b 	bl	800bf64 <_fflush_r>
 800d02e:	b988      	cbnz	r0, 800d054 <__swbuf_r+0x90>
 800d030:	4638      	mov	r0, r7
 800d032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d034:	4b0a      	ldr	r3, [pc, #40]	; (800d060 <__swbuf_r+0x9c>)
 800d036:	429c      	cmp	r4, r3
 800d038:	d101      	bne.n	800d03e <__swbuf_r+0x7a>
 800d03a:	68ac      	ldr	r4, [r5, #8]
 800d03c:	e7cf      	b.n	800cfde <__swbuf_r+0x1a>
 800d03e:	4b09      	ldr	r3, [pc, #36]	; (800d064 <__swbuf_r+0xa0>)
 800d040:	429c      	cmp	r4, r3
 800d042:	bf08      	it	eq
 800d044:	68ec      	ldreq	r4, [r5, #12]
 800d046:	e7ca      	b.n	800cfde <__swbuf_r+0x1a>
 800d048:	4621      	mov	r1, r4
 800d04a:	4628      	mov	r0, r5
 800d04c:	f000 f81e 	bl	800d08c <__swsetup_r>
 800d050:	2800      	cmp	r0, #0
 800d052:	d0cb      	beq.n	800cfec <__swbuf_r+0x28>
 800d054:	f04f 37ff 	mov.w	r7, #4294967295
 800d058:	e7ea      	b.n	800d030 <__swbuf_r+0x6c>
 800d05a:	bf00      	nop
 800d05c:	08014004 	.word	0x08014004
 800d060:	08014024 	.word	0x08014024
 800d064:	08013fe4 	.word	0x08013fe4

0800d068 <_write_r>:
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	4d07      	ldr	r5, [pc, #28]	; (800d088 <_write_r+0x20>)
 800d06c:	4604      	mov	r4, r0
 800d06e:	4608      	mov	r0, r1
 800d070:	4611      	mov	r1, r2
 800d072:	2200      	movs	r2, #0
 800d074:	602a      	str	r2, [r5, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	f7f4 fd1d 	bl	8001ab6 <_write>
 800d07c:	1c43      	adds	r3, r0, #1
 800d07e:	d102      	bne.n	800d086 <_write_r+0x1e>
 800d080:	682b      	ldr	r3, [r5, #0]
 800d082:	b103      	cbz	r3, 800d086 <_write_r+0x1e>
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	bd38      	pop	{r3, r4, r5, pc}
 800d088:	200007ac 	.word	0x200007ac

0800d08c <__swsetup_r>:
 800d08c:	4b32      	ldr	r3, [pc, #200]	; (800d158 <__swsetup_r+0xcc>)
 800d08e:	b570      	push	{r4, r5, r6, lr}
 800d090:	681d      	ldr	r5, [r3, #0]
 800d092:	4606      	mov	r6, r0
 800d094:	460c      	mov	r4, r1
 800d096:	b125      	cbz	r5, 800d0a2 <__swsetup_r+0x16>
 800d098:	69ab      	ldr	r3, [r5, #24]
 800d09a:	b913      	cbnz	r3, 800d0a2 <__swsetup_r+0x16>
 800d09c:	4628      	mov	r0, r5
 800d09e:	f7ff f807 	bl	800c0b0 <__sinit>
 800d0a2:	4b2e      	ldr	r3, [pc, #184]	; (800d15c <__swsetup_r+0xd0>)
 800d0a4:	429c      	cmp	r4, r3
 800d0a6:	d10f      	bne.n	800d0c8 <__swsetup_r+0x3c>
 800d0a8:	686c      	ldr	r4, [r5, #4]
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0b0:	0719      	lsls	r1, r3, #28
 800d0b2:	d42c      	bmi.n	800d10e <__swsetup_r+0x82>
 800d0b4:	06dd      	lsls	r5, r3, #27
 800d0b6:	d411      	bmi.n	800d0dc <__swsetup_r+0x50>
 800d0b8:	2309      	movs	r3, #9
 800d0ba:	6033      	str	r3, [r6, #0]
 800d0bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0c0:	81a3      	strh	r3, [r4, #12]
 800d0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c6:	e03e      	b.n	800d146 <__swsetup_r+0xba>
 800d0c8:	4b25      	ldr	r3, [pc, #148]	; (800d160 <__swsetup_r+0xd4>)
 800d0ca:	429c      	cmp	r4, r3
 800d0cc:	d101      	bne.n	800d0d2 <__swsetup_r+0x46>
 800d0ce:	68ac      	ldr	r4, [r5, #8]
 800d0d0:	e7eb      	b.n	800d0aa <__swsetup_r+0x1e>
 800d0d2:	4b24      	ldr	r3, [pc, #144]	; (800d164 <__swsetup_r+0xd8>)
 800d0d4:	429c      	cmp	r4, r3
 800d0d6:	bf08      	it	eq
 800d0d8:	68ec      	ldreq	r4, [r5, #12]
 800d0da:	e7e6      	b.n	800d0aa <__swsetup_r+0x1e>
 800d0dc:	0758      	lsls	r0, r3, #29
 800d0de:	d512      	bpl.n	800d106 <__swsetup_r+0x7a>
 800d0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0e2:	b141      	cbz	r1, 800d0f6 <__swsetup_r+0x6a>
 800d0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0e8:	4299      	cmp	r1, r3
 800d0ea:	d002      	beq.n	800d0f2 <__swsetup_r+0x66>
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7ff f8e5 	bl	800c2bc <_free_r>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	6363      	str	r3, [r4, #52]	; 0x34
 800d0f6:	89a3      	ldrh	r3, [r4, #12]
 800d0f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0fc:	81a3      	strh	r3, [r4, #12]
 800d0fe:	2300      	movs	r3, #0
 800d100:	6063      	str	r3, [r4, #4]
 800d102:	6923      	ldr	r3, [r4, #16]
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f043 0308 	orr.w	r3, r3, #8
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	6923      	ldr	r3, [r4, #16]
 800d110:	b94b      	cbnz	r3, 800d126 <__swsetup_r+0x9a>
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d11c:	d003      	beq.n	800d126 <__swsetup_r+0x9a>
 800d11e:	4621      	mov	r1, r4
 800d120:	4630      	mov	r0, r6
 800d122:	f000 fee7 	bl	800def4 <__smakebuf_r>
 800d126:	89a0      	ldrh	r0, [r4, #12]
 800d128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d12c:	f010 0301 	ands.w	r3, r0, #1
 800d130:	d00a      	beq.n	800d148 <__swsetup_r+0xbc>
 800d132:	2300      	movs	r3, #0
 800d134:	60a3      	str	r3, [r4, #8]
 800d136:	6963      	ldr	r3, [r4, #20]
 800d138:	425b      	negs	r3, r3
 800d13a:	61a3      	str	r3, [r4, #24]
 800d13c:	6923      	ldr	r3, [r4, #16]
 800d13e:	b943      	cbnz	r3, 800d152 <__swsetup_r+0xc6>
 800d140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d144:	d1ba      	bne.n	800d0bc <__swsetup_r+0x30>
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	0781      	lsls	r1, r0, #30
 800d14a:	bf58      	it	pl
 800d14c:	6963      	ldrpl	r3, [r4, #20]
 800d14e:	60a3      	str	r3, [r4, #8]
 800d150:	e7f4      	b.n	800d13c <__swsetup_r+0xb0>
 800d152:	2000      	movs	r0, #0
 800d154:	e7f7      	b.n	800d146 <__swsetup_r+0xba>
 800d156:	bf00      	nop
 800d158:	20000134 	.word	0x20000134
 800d15c:	08014004 	.word	0x08014004
 800d160:	08014024 	.word	0x08014024
 800d164:	08013fe4 	.word	0x08013fe4

0800d168 <_close_r>:
 800d168:	b538      	push	{r3, r4, r5, lr}
 800d16a:	4d06      	ldr	r5, [pc, #24]	; (800d184 <_close_r+0x1c>)
 800d16c:	2300      	movs	r3, #0
 800d16e:	4604      	mov	r4, r0
 800d170:	4608      	mov	r0, r1
 800d172:	602b      	str	r3, [r5, #0]
 800d174:	f7f4 fcbb 	bl	8001aee <_close>
 800d178:	1c43      	adds	r3, r0, #1
 800d17a:	d102      	bne.n	800d182 <_close_r+0x1a>
 800d17c:	682b      	ldr	r3, [r5, #0]
 800d17e:	b103      	cbz	r3, 800d182 <_close_r+0x1a>
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	bd38      	pop	{r3, r4, r5, pc}
 800d184:	200007ac 	.word	0x200007ac

0800d188 <quorem>:
 800d188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	6903      	ldr	r3, [r0, #16]
 800d18e:	690c      	ldr	r4, [r1, #16]
 800d190:	42a3      	cmp	r3, r4
 800d192:	4607      	mov	r7, r0
 800d194:	f2c0 8081 	blt.w	800d29a <quorem+0x112>
 800d198:	3c01      	subs	r4, #1
 800d19a:	f101 0814 	add.w	r8, r1, #20
 800d19e:	f100 0514 	add.w	r5, r0, #20
 800d1a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1a6:	9301      	str	r3, [sp, #4]
 800d1a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1c0:	d331      	bcc.n	800d226 <quorem+0x9e>
 800d1c2:	f04f 0e00 	mov.w	lr, #0
 800d1c6:	4640      	mov	r0, r8
 800d1c8:	46ac      	mov	ip, r5
 800d1ca:	46f2      	mov	sl, lr
 800d1cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1d0:	b293      	uxth	r3, r2
 800d1d2:	fb06 e303 	mla	r3, r6, r3, lr
 800d1d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d1e0:	f8dc a000 	ldr.w	sl, [ip]
 800d1e4:	0c12      	lsrs	r2, r2, #16
 800d1e6:	fa13 f38a 	uxtah	r3, r3, sl
 800d1ea:	fb06 e202 	mla	r2, r6, r2, lr
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	9b00      	ldr	r3, [sp, #0]
 800d1f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1f6:	b292      	uxth	r2, r2
 800d1f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d200:	f8bd 3000 	ldrh.w	r3, [sp]
 800d204:	4581      	cmp	r9, r0
 800d206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d20a:	f84c 3b04 	str.w	r3, [ip], #4
 800d20e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d212:	d2db      	bcs.n	800d1cc <quorem+0x44>
 800d214:	f855 300b 	ldr.w	r3, [r5, fp]
 800d218:	b92b      	cbnz	r3, 800d226 <quorem+0x9e>
 800d21a:	9b01      	ldr	r3, [sp, #4]
 800d21c:	3b04      	subs	r3, #4
 800d21e:	429d      	cmp	r5, r3
 800d220:	461a      	mov	r2, r3
 800d222:	d32e      	bcc.n	800d282 <quorem+0xfa>
 800d224:	613c      	str	r4, [r7, #16]
 800d226:	4638      	mov	r0, r7
 800d228:	f001 f932 	bl	800e490 <__mcmp>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	db24      	blt.n	800d27a <quorem+0xf2>
 800d230:	3601      	adds	r6, #1
 800d232:	4628      	mov	r0, r5
 800d234:	f04f 0c00 	mov.w	ip, #0
 800d238:	f858 2b04 	ldr.w	r2, [r8], #4
 800d23c:	f8d0 e000 	ldr.w	lr, [r0]
 800d240:	b293      	uxth	r3, r2
 800d242:	ebac 0303 	sub.w	r3, ip, r3
 800d246:	0c12      	lsrs	r2, r2, #16
 800d248:	fa13 f38e 	uxtah	r3, r3, lr
 800d24c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d254:	b29b      	uxth	r3, r3
 800d256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d25a:	45c1      	cmp	r9, r8
 800d25c:	f840 3b04 	str.w	r3, [r0], #4
 800d260:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d264:	d2e8      	bcs.n	800d238 <quorem+0xb0>
 800d266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d26a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d26e:	b922      	cbnz	r2, 800d27a <quorem+0xf2>
 800d270:	3b04      	subs	r3, #4
 800d272:	429d      	cmp	r5, r3
 800d274:	461a      	mov	r2, r3
 800d276:	d30a      	bcc.n	800d28e <quorem+0x106>
 800d278:	613c      	str	r4, [r7, #16]
 800d27a:	4630      	mov	r0, r6
 800d27c:	b003      	add	sp, #12
 800d27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d282:	6812      	ldr	r2, [r2, #0]
 800d284:	3b04      	subs	r3, #4
 800d286:	2a00      	cmp	r2, #0
 800d288:	d1cc      	bne.n	800d224 <quorem+0x9c>
 800d28a:	3c01      	subs	r4, #1
 800d28c:	e7c7      	b.n	800d21e <quorem+0x96>
 800d28e:	6812      	ldr	r2, [r2, #0]
 800d290:	3b04      	subs	r3, #4
 800d292:	2a00      	cmp	r2, #0
 800d294:	d1f0      	bne.n	800d278 <quorem+0xf0>
 800d296:	3c01      	subs	r4, #1
 800d298:	e7eb      	b.n	800d272 <quorem+0xea>
 800d29a:	2000      	movs	r0, #0
 800d29c:	e7ee      	b.n	800d27c <quorem+0xf4>
	...

0800d2a0 <_dtoa_r>:
 800d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	ed2d 8b04 	vpush	{d8-d9}
 800d2a8:	ec57 6b10 	vmov	r6, r7, d0
 800d2ac:	b093      	sub	sp, #76	; 0x4c
 800d2ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d2b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d2b4:	9106      	str	r1, [sp, #24]
 800d2b6:	ee10 aa10 	vmov	sl, s0
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d2be:	930c      	str	r3, [sp, #48]	; 0x30
 800d2c0:	46bb      	mov	fp, r7
 800d2c2:	b975      	cbnz	r5, 800d2e2 <_dtoa_r+0x42>
 800d2c4:	2010      	movs	r0, #16
 800d2c6:	f7fe ffb9 	bl	800c23c <malloc>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	6260      	str	r0, [r4, #36]	; 0x24
 800d2ce:	b920      	cbnz	r0, 800d2da <_dtoa_r+0x3a>
 800d2d0:	4ba7      	ldr	r3, [pc, #668]	; (800d570 <_dtoa_r+0x2d0>)
 800d2d2:	21ea      	movs	r1, #234	; 0xea
 800d2d4:	48a7      	ldr	r0, [pc, #668]	; (800d574 <_dtoa_r+0x2d4>)
 800d2d6:	f001 fcbb 	bl	800ec50 <__assert_func>
 800d2da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2de:	6005      	str	r5, [r0, #0]
 800d2e0:	60c5      	str	r5, [r0, #12]
 800d2e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2e4:	6819      	ldr	r1, [r3, #0]
 800d2e6:	b151      	cbz	r1, 800d2fe <_dtoa_r+0x5e>
 800d2e8:	685a      	ldr	r2, [r3, #4]
 800d2ea:	604a      	str	r2, [r1, #4]
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	4093      	lsls	r3, r2
 800d2f0:	608b      	str	r3, [r1, #8]
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f000 fe8a 	bl	800e00c <_Bfree>
 800d2f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	1e3b      	subs	r3, r7, #0
 800d300:	bfaa      	itet	ge
 800d302:	2300      	movge	r3, #0
 800d304:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d308:	f8c8 3000 	strge.w	r3, [r8]
 800d30c:	4b9a      	ldr	r3, [pc, #616]	; (800d578 <_dtoa_r+0x2d8>)
 800d30e:	bfbc      	itt	lt
 800d310:	2201      	movlt	r2, #1
 800d312:	f8c8 2000 	strlt.w	r2, [r8]
 800d316:	ea33 030b 	bics.w	r3, r3, fp
 800d31a:	d11b      	bne.n	800d354 <_dtoa_r+0xb4>
 800d31c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d31e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d328:	4333      	orrs	r3, r6
 800d32a:	f000 8592 	beq.w	800de52 <_dtoa_r+0xbb2>
 800d32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d330:	b963      	cbnz	r3, 800d34c <_dtoa_r+0xac>
 800d332:	4b92      	ldr	r3, [pc, #584]	; (800d57c <_dtoa_r+0x2dc>)
 800d334:	e022      	b.n	800d37c <_dtoa_r+0xdc>
 800d336:	4b92      	ldr	r3, [pc, #584]	; (800d580 <_dtoa_r+0x2e0>)
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	3308      	adds	r3, #8
 800d33c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d33e:	6013      	str	r3, [r2, #0]
 800d340:	9801      	ldr	r0, [sp, #4]
 800d342:	b013      	add	sp, #76	; 0x4c
 800d344:	ecbd 8b04 	vpop	{d8-d9}
 800d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34c:	4b8b      	ldr	r3, [pc, #556]	; (800d57c <_dtoa_r+0x2dc>)
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	3303      	adds	r3, #3
 800d352:	e7f3      	b.n	800d33c <_dtoa_r+0x9c>
 800d354:	2200      	movs	r2, #0
 800d356:	2300      	movs	r3, #0
 800d358:	4650      	mov	r0, sl
 800d35a:	4659      	mov	r1, fp
 800d35c:	f7f3 fb8c 	bl	8000a78 <__aeabi_dcmpeq>
 800d360:	ec4b ab19 	vmov	d9, sl, fp
 800d364:	4680      	mov	r8, r0
 800d366:	b158      	cbz	r0, 800d380 <_dtoa_r+0xe0>
 800d368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d36a:	2301      	movs	r3, #1
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 856b 	beq.w	800de4c <_dtoa_r+0xbac>
 800d376:	4883      	ldr	r0, [pc, #524]	; (800d584 <_dtoa_r+0x2e4>)
 800d378:	6018      	str	r0, [r3, #0]
 800d37a:	1e43      	subs	r3, r0, #1
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	e7df      	b.n	800d340 <_dtoa_r+0xa0>
 800d380:	ec4b ab10 	vmov	d0, sl, fp
 800d384:	aa10      	add	r2, sp, #64	; 0x40
 800d386:	a911      	add	r1, sp, #68	; 0x44
 800d388:	4620      	mov	r0, r4
 800d38a:	f001 f927 	bl	800e5dc <__d2b>
 800d38e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d392:	ee08 0a10 	vmov	s16, r0
 800d396:	2d00      	cmp	r5, #0
 800d398:	f000 8084 	beq.w	800d4a4 <_dtoa_r+0x204>
 800d39c:	ee19 3a90 	vmov	r3, s19
 800d3a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d3a8:	4656      	mov	r6, sl
 800d3aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d3ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d3b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d3b6:	4b74      	ldr	r3, [pc, #464]	; (800d588 <_dtoa_r+0x2e8>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	4639      	mov	r1, r7
 800d3be:	f7f2 ff3b 	bl	8000238 <__aeabi_dsub>
 800d3c2:	a365      	add	r3, pc, #404	; (adr r3, 800d558 <_dtoa_r+0x2b8>)
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f7f3 f8ee 	bl	80005a8 <__aeabi_dmul>
 800d3cc:	a364      	add	r3, pc, #400	; (adr r3, 800d560 <_dtoa_r+0x2c0>)
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	f7f2 ff33 	bl	800023c <__adddf3>
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	4628      	mov	r0, r5
 800d3da:	460f      	mov	r7, r1
 800d3dc:	f7f3 f87a 	bl	80004d4 <__aeabi_i2d>
 800d3e0:	a361      	add	r3, pc, #388	; (adr r3, 800d568 <_dtoa_r+0x2c8>)
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	f7f3 f8df 	bl	80005a8 <__aeabi_dmul>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	4639      	mov	r1, r7
 800d3f2:	f7f2 ff23 	bl	800023c <__adddf3>
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	460f      	mov	r7, r1
 800d3fa:	f7f3 fb85 	bl	8000b08 <__aeabi_d2iz>
 800d3fe:	2200      	movs	r2, #0
 800d400:	9000      	str	r0, [sp, #0]
 800d402:	2300      	movs	r3, #0
 800d404:	4630      	mov	r0, r6
 800d406:	4639      	mov	r1, r7
 800d408:	f7f3 fb40 	bl	8000a8c <__aeabi_dcmplt>
 800d40c:	b150      	cbz	r0, 800d424 <_dtoa_r+0x184>
 800d40e:	9800      	ldr	r0, [sp, #0]
 800d410:	f7f3 f860 	bl	80004d4 <__aeabi_i2d>
 800d414:	4632      	mov	r2, r6
 800d416:	463b      	mov	r3, r7
 800d418:	f7f3 fb2e 	bl	8000a78 <__aeabi_dcmpeq>
 800d41c:	b910      	cbnz	r0, 800d424 <_dtoa_r+0x184>
 800d41e:	9b00      	ldr	r3, [sp, #0]
 800d420:	3b01      	subs	r3, #1
 800d422:	9300      	str	r3, [sp, #0]
 800d424:	9b00      	ldr	r3, [sp, #0]
 800d426:	2b16      	cmp	r3, #22
 800d428:	d85a      	bhi.n	800d4e0 <_dtoa_r+0x240>
 800d42a:	9a00      	ldr	r2, [sp, #0]
 800d42c:	4b57      	ldr	r3, [pc, #348]	; (800d58c <_dtoa_r+0x2ec>)
 800d42e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d436:	ec51 0b19 	vmov	r0, r1, d9
 800d43a:	f7f3 fb27 	bl	8000a8c <__aeabi_dcmplt>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d050      	beq.n	800d4e4 <_dtoa_r+0x244>
 800d442:	9b00      	ldr	r3, [sp, #0]
 800d444:	3b01      	subs	r3, #1
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	2300      	movs	r3, #0
 800d44a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d44c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d44e:	1b5d      	subs	r5, r3, r5
 800d450:	1e6b      	subs	r3, r5, #1
 800d452:	9305      	str	r3, [sp, #20]
 800d454:	bf45      	ittet	mi
 800d456:	f1c5 0301 	rsbmi	r3, r5, #1
 800d45a:	9304      	strmi	r3, [sp, #16]
 800d45c:	2300      	movpl	r3, #0
 800d45e:	2300      	movmi	r3, #0
 800d460:	bf4c      	ite	mi
 800d462:	9305      	strmi	r3, [sp, #20]
 800d464:	9304      	strpl	r3, [sp, #16]
 800d466:	9b00      	ldr	r3, [sp, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	db3d      	blt.n	800d4e8 <_dtoa_r+0x248>
 800d46c:	9b05      	ldr	r3, [sp, #20]
 800d46e:	9a00      	ldr	r2, [sp, #0]
 800d470:	920a      	str	r2, [sp, #40]	; 0x28
 800d472:	4413      	add	r3, r2
 800d474:	9305      	str	r3, [sp, #20]
 800d476:	2300      	movs	r3, #0
 800d478:	9307      	str	r3, [sp, #28]
 800d47a:	9b06      	ldr	r3, [sp, #24]
 800d47c:	2b09      	cmp	r3, #9
 800d47e:	f200 8089 	bhi.w	800d594 <_dtoa_r+0x2f4>
 800d482:	2b05      	cmp	r3, #5
 800d484:	bfc4      	itt	gt
 800d486:	3b04      	subgt	r3, #4
 800d488:	9306      	strgt	r3, [sp, #24]
 800d48a:	9b06      	ldr	r3, [sp, #24]
 800d48c:	f1a3 0302 	sub.w	r3, r3, #2
 800d490:	bfcc      	ite	gt
 800d492:	2500      	movgt	r5, #0
 800d494:	2501      	movle	r5, #1
 800d496:	2b03      	cmp	r3, #3
 800d498:	f200 8087 	bhi.w	800d5aa <_dtoa_r+0x30a>
 800d49c:	e8df f003 	tbb	[pc, r3]
 800d4a0:	59383a2d 	.word	0x59383a2d
 800d4a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d4a8:	441d      	add	r5, r3
 800d4aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d4ae:	2b20      	cmp	r3, #32
 800d4b0:	bfc1      	itttt	gt
 800d4b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d4b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d4ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800d4be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d4c2:	bfda      	itte	le
 800d4c4:	f1c3 0320 	rsble	r3, r3, #32
 800d4c8:	fa06 f003 	lslle.w	r0, r6, r3
 800d4cc:	4318      	orrgt	r0, r3
 800d4ce:	f7f2 fff1 	bl	80004b4 <__aeabi_ui2d>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d4da:	3d01      	subs	r5, #1
 800d4dc:	930e      	str	r3, [sp, #56]	; 0x38
 800d4de:	e76a      	b.n	800d3b6 <_dtoa_r+0x116>
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e7b2      	b.n	800d44a <_dtoa_r+0x1aa>
 800d4e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4e6:	e7b1      	b.n	800d44c <_dtoa_r+0x1ac>
 800d4e8:	9b04      	ldr	r3, [sp, #16]
 800d4ea:	9a00      	ldr	r2, [sp, #0]
 800d4ec:	1a9b      	subs	r3, r3, r2
 800d4ee:	9304      	str	r3, [sp, #16]
 800d4f0:	4253      	negs	r3, r2
 800d4f2:	9307      	str	r3, [sp, #28]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d4f8:	e7bf      	b.n	800d47a <_dtoa_r+0x1da>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9308      	str	r3, [sp, #32]
 800d4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d500:	2b00      	cmp	r3, #0
 800d502:	dc55      	bgt.n	800d5b0 <_dtoa_r+0x310>
 800d504:	2301      	movs	r3, #1
 800d506:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d50a:	461a      	mov	r2, r3
 800d50c:	9209      	str	r2, [sp, #36]	; 0x24
 800d50e:	e00c      	b.n	800d52a <_dtoa_r+0x28a>
 800d510:	2301      	movs	r3, #1
 800d512:	e7f3      	b.n	800d4fc <_dtoa_r+0x25c>
 800d514:	2300      	movs	r3, #0
 800d516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d518:	9308      	str	r3, [sp, #32]
 800d51a:	9b00      	ldr	r3, [sp, #0]
 800d51c:	4413      	add	r3, r2
 800d51e:	9302      	str	r3, [sp, #8]
 800d520:	3301      	adds	r3, #1
 800d522:	2b01      	cmp	r3, #1
 800d524:	9303      	str	r3, [sp, #12]
 800d526:	bfb8      	it	lt
 800d528:	2301      	movlt	r3, #1
 800d52a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d52c:	2200      	movs	r2, #0
 800d52e:	6042      	str	r2, [r0, #4]
 800d530:	2204      	movs	r2, #4
 800d532:	f102 0614 	add.w	r6, r2, #20
 800d536:	429e      	cmp	r6, r3
 800d538:	6841      	ldr	r1, [r0, #4]
 800d53a:	d93d      	bls.n	800d5b8 <_dtoa_r+0x318>
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 fd25 	bl	800df8c <_Balloc>
 800d542:	9001      	str	r0, [sp, #4]
 800d544:	2800      	cmp	r0, #0
 800d546:	d13b      	bne.n	800d5c0 <_dtoa_r+0x320>
 800d548:	4b11      	ldr	r3, [pc, #68]	; (800d590 <_dtoa_r+0x2f0>)
 800d54a:	4602      	mov	r2, r0
 800d54c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d550:	e6c0      	b.n	800d2d4 <_dtoa_r+0x34>
 800d552:	2301      	movs	r3, #1
 800d554:	e7df      	b.n	800d516 <_dtoa_r+0x276>
 800d556:	bf00      	nop
 800d558:	636f4361 	.word	0x636f4361
 800d55c:	3fd287a7 	.word	0x3fd287a7
 800d560:	8b60c8b3 	.word	0x8b60c8b3
 800d564:	3fc68a28 	.word	0x3fc68a28
 800d568:	509f79fb 	.word	0x509f79fb
 800d56c:	3fd34413 	.word	0x3fd34413
 800d570:	08014089 	.word	0x08014089
 800d574:	080140a0 	.word	0x080140a0
 800d578:	7ff00000 	.word	0x7ff00000
 800d57c:	08014085 	.word	0x08014085
 800d580:	0801407c 	.word	0x0801407c
 800d584:	08014059 	.word	0x08014059
 800d588:	3ff80000 	.word	0x3ff80000
 800d58c:	08014190 	.word	0x08014190
 800d590:	080140fb 	.word	0x080140fb
 800d594:	2501      	movs	r5, #1
 800d596:	2300      	movs	r3, #0
 800d598:	9306      	str	r3, [sp, #24]
 800d59a:	9508      	str	r5, [sp, #32]
 800d59c:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	2312      	movs	r3, #18
 800d5a8:	e7b0      	b.n	800d50c <_dtoa_r+0x26c>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	9308      	str	r3, [sp, #32]
 800d5ae:	e7f5      	b.n	800d59c <_dtoa_r+0x2fc>
 800d5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d5b6:	e7b8      	b.n	800d52a <_dtoa_r+0x28a>
 800d5b8:	3101      	adds	r1, #1
 800d5ba:	6041      	str	r1, [r0, #4]
 800d5bc:	0052      	lsls	r2, r2, #1
 800d5be:	e7b8      	b.n	800d532 <_dtoa_r+0x292>
 800d5c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5c2:	9a01      	ldr	r2, [sp, #4]
 800d5c4:	601a      	str	r2, [r3, #0]
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	2b0e      	cmp	r3, #14
 800d5ca:	f200 809d 	bhi.w	800d708 <_dtoa_r+0x468>
 800d5ce:	2d00      	cmp	r5, #0
 800d5d0:	f000 809a 	beq.w	800d708 <_dtoa_r+0x468>
 800d5d4:	9b00      	ldr	r3, [sp, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	dd32      	ble.n	800d640 <_dtoa_r+0x3a0>
 800d5da:	4ab7      	ldr	r2, [pc, #732]	; (800d8b8 <_dtoa_r+0x618>)
 800d5dc:	f003 030f 	and.w	r3, r3, #15
 800d5e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5e8:	9b00      	ldr	r3, [sp, #0]
 800d5ea:	05d8      	lsls	r0, r3, #23
 800d5ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d5f0:	d516      	bpl.n	800d620 <_dtoa_r+0x380>
 800d5f2:	4bb2      	ldr	r3, [pc, #712]	; (800d8bc <_dtoa_r+0x61c>)
 800d5f4:	ec51 0b19 	vmov	r0, r1, d9
 800d5f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5fc:	f7f3 f8fe 	bl	80007fc <__aeabi_ddiv>
 800d600:	f007 070f 	and.w	r7, r7, #15
 800d604:	4682      	mov	sl, r0
 800d606:	468b      	mov	fp, r1
 800d608:	2503      	movs	r5, #3
 800d60a:	4eac      	ldr	r6, [pc, #688]	; (800d8bc <_dtoa_r+0x61c>)
 800d60c:	b957      	cbnz	r7, 800d624 <_dtoa_r+0x384>
 800d60e:	4642      	mov	r2, r8
 800d610:	464b      	mov	r3, r9
 800d612:	4650      	mov	r0, sl
 800d614:	4659      	mov	r1, fp
 800d616:	f7f3 f8f1 	bl	80007fc <__aeabi_ddiv>
 800d61a:	4682      	mov	sl, r0
 800d61c:	468b      	mov	fp, r1
 800d61e:	e028      	b.n	800d672 <_dtoa_r+0x3d2>
 800d620:	2502      	movs	r5, #2
 800d622:	e7f2      	b.n	800d60a <_dtoa_r+0x36a>
 800d624:	07f9      	lsls	r1, r7, #31
 800d626:	d508      	bpl.n	800d63a <_dtoa_r+0x39a>
 800d628:	4640      	mov	r0, r8
 800d62a:	4649      	mov	r1, r9
 800d62c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d630:	f7f2 ffba 	bl	80005a8 <__aeabi_dmul>
 800d634:	3501      	adds	r5, #1
 800d636:	4680      	mov	r8, r0
 800d638:	4689      	mov	r9, r1
 800d63a:	107f      	asrs	r7, r7, #1
 800d63c:	3608      	adds	r6, #8
 800d63e:	e7e5      	b.n	800d60c <_dtoa_r+0x36c>
 800d640:	f000 809b 	beq.w	800d77a <_dtoa_r+0x4da>
 800d644:	9b00      	ldr	r3, [sp, #0]
 800d646:	4f9d      	ldr	r7, [pc, #628]	; (800d8bc <_dtoa_r+0x61c>)
 800d648:	425e      	negs	r6, r3
 800d64a:	4b9b      	ldr	r3, [pc, #620]	; (800d8b8 <_dtoa_r+0x618>)
 800d64c:	f006 020f 	and.w	r2, r6, #15
 800d650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	ec51 0b19 	vmov	r0, r1, d9
 800d65c:	f7f2 ffa4 	bl	80005a8 <__aeabi_dmul>
 800d660:	1136      	asrs	r6, r6, #4
 800d662:	4682      	mov	sl, r0
 800d664:	468b      	mov	fp, r1
 800d666:	2300      	movs	r3, #0
 800d668:	2502      	movs	r5, #2
 800d66a:	2e00      	cmp	r6, #0
 800d66c:	d17a      	bne.n	800d764 <_dtoa_r+0x4c4>
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1d3      	bne.n	800d61a <_dtoa_r+0x37a>
 800d672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d674:	2b00      	cmp	r3, #0
 800d676:	f000 8082 	beq.w	800d77e <_dtoa_r+0x4de>
 800d67a:	4b91      	ldr	r3, [pc, #580]	; (800d8c0 <_dtoa_r+0x620>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	4650      	mov	r0, sl
 800d680:	4659      	mov	r1, fp
 800d682:	f7f3 fa03 	bl	8000a8c <__aeabi_dcmplt>
 800d686:	2800      	cmp	r0, #0
 800d688:	d079      	beq.n	800d77e <_dtoa_r+0x4de>
 800d68a:	9b03      	ldr	r3, [sp, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d076      	beq.n	800d77e <_dtoa_r+0x4de>
 800d690:	9b02      	ldr	r3, [sp, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	dd36      	ble.n	800d704 <_dtoa_r+0x464>
 800d696:	9b00      	ldr	r3, [sp, #0]
 800d698:	4650      	mov	r0, sl
 800d69a:	4659      	mov	r1, fp
 800d69c:	1e5f      	subs	r7, r3, #1
 800d69e:	2200      	movs	r2, #0
 800d6a0:	4b88      	ldr	r3, [pc, #544]	; (800d8c4 <_dtoa_r+0x624>)
 800d6a2:	f7f2 ff81 	bl	80005a8 <__aeabi_dmul>
 800d6a6:	9e02      	ldr	r6, [sp, #8]
 800d6a8:	4682      	mov	sl, r0
 800d6aa:	468b      	mov	fp, r1
 800d6ac:	3501      	adds	r5, #1
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f7f2 ff10 	bl	80004d4 <__aeabi_i2d>
 800d6b4:	4652      	mov	r2, sl
 800d6b6:	465b      	mov	r3, fp
 800d6b8:	f7f2 ff76 	bl	80005a8 <__aeabi_dmul>
 800d6bc:	4b82      	ldr	r3, [pc, #520]	; (800d8c8 <_dtoa_r+0x628>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f7f2 fdbc 	bl	800023c <__adddf3>
 800d6c4:	46d0      	mov	r8, sl
 800d6c6:	46d9      	mov	r9, fp
 800d6c8:	4682      	mov	sl, r0
 800d6ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d6ce:	2e00      	cmp	r6, #0
 800d6d0:	d158      	bne.n	800d784 <_dtoa_r+0x4e4>
 800d6d2:	4b7e      	ldr	r3, [pc, #504]	; (800d8cc <_dtoa_r+0x62c>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	4640      	mov	r0, r8
 800d6d8:	4649      	mov	r1, r9
 800d6da:	f7f2 fdad 	bl	8000238 <__aeabi_dsub>
 800d6de:	4652      	mov	r2, sl
 800d6e0:	465b      	mov	r3, fp
 800d6e2:	4680      	mov	r8, r0
 800d6e4:	4689      	mov	r9, r1
 800d6e6:	f7f3 f9ef 	bl	8000ac8 <__aeabi_dcmpgt>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	f040 8295 	bne.w	800dc1a <_dtoa_r+0x97a>
 800d6f0:	4652      	mov	r2, sl
 800d6f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6f6:	4640      	mov	r0, r8
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	f7f3 f9c7 	bl	8000a8c <__aeabi_dcmplt>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	f040 8289 	bne.w	800dc16 <_dtoa_r+0x976>
 800d704:	ec5b ab19 	vmov	sl, fp, d9
 800d708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f2c0 8148 	blt.w	800d9a0 <_dtoa_r+0x700>
 800d710:	9a00      	ldr	r2, [sp, #0]
 800d712:	2a0e      	cmp	r2, #14
 800d714:	f300 8144 	bgt.w	800d9a0 <_dtoa_r+0x700>
 800d718:	4b67      	ldr	r3, [pc, #412]	; (800d8b8 <_dtoa_r+0x618>)
 800d71a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d71e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d724:	2b00      	cmp	r3, #0
 800d726:	f280 80d5 	bge.w	800d8d4 <_dtoa_r+0x634>
 800d72a:	9b03      	ldr	r3, [sp, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f300 80d1 	bgt.w	800d8d4 <_dtoa_r+0x634>
 800d732:	f040 826f 	bne.w	800dc14 <_dtoa_r+0x974>
 800d736:	4b65      	ldr	r3, [pc, #404]	; (800d8cc <_dtoa_r+0x62c>)
 800d738:	2200      	movs	r2, #0
 800d73a:	4640      	mov	r0, r8
 800d73c:	4649      	mov	r1, r9
 800d73e:	f7f2 ff33 	bl	80005a8 <__aeabi_dmul>
 800d742:	4652      	mov	r2, sl
 800d744:	465b      	mov	r3, fp
 800d746:	f7f3 f9b5 	bl	8000ab4 <__aeabi_dcmpge>
 800d74a:	9e03      	ldr	r6, [sp, #12]
 800d74c:	4637      	mov	r7, r6
 800d74e:	2800      	cmp	r0, #0
 800d750:	f040 8245 	bne.w	800dbde <_dtoa_r+0x93e>
 800d754:	9d01      	ldr	r5, [sp, #4]
 800d756:	2331      	movs	r3, #49	; 0x31
 800d758:	f805 3b01 	strb.w	r3, [r5], #1
 800d75c:	9b00      	ldr	r3, [sp, #0]
 800d75e:	3301      	adds	r3, #1
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	e240      	b.n	800dbe6 <_dtoa_r+0x946>
 800d764:	07f2      	lsls	r2, r6, #31
 800d766:	d505      	bpl.n	800d774 <_dtoa_r+0x4d4>
 800d768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d76c:	f7f2 ff1c 	bl	80005a8 <__aeabi_dmul>
 800d770:	3501      	adds	r5, #1
 800d772:	2301      	movs	r3, #1
 800d774:	1076      	asrs	r6, r6, #1
 800d776:	3708      	adds	r7, #8
 800d778:	e777      	b.n	800d66a <_dtoa_r+0x3ca>
 800d77a:	2502      	movs	r5, #2
 800d77c:	e779      	b.n	800d672 <_dtoa_r+0x3d2>
 800d77e:	9f00      	ldr	r7, [sp, #0]
 800d780:	9e03      	ldr	r6, [sp, #12]
 800d782:	e794      	b.n	800d6ae <_dtoa_r+0x40e>
 800d784:	9901      	ldr	r1, [sp, #4]
 800d786:	4b4c      	ldr	r3, [pc, #304]	; (800d8b8 <_dtoa_r+0x618>)
 800d788:	4431      	add	r1, r6
 800d78a:	910d      	str	r1, [sp, #52]	; 0x34
 800d78c:	9908      	ldr	r1, [sp, #32]
 800d78e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d792:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d796:	2900      	cmp	r1, #0
 800d798:	d043      	beq.n	800d822 <_dtoa_r+0x582>
 800d79a:	494d      	ldr	r1, [pc, #308]	; (800d8d0 <_dtoa_r+0x630>)
 800d79c:	2000      	movs	r0, #0
 800d79e:	f7f3 f82d 	bl	80007fc <__aeabi_ddiv>
 800d7a2:	4652      	mov	r2, sl
 800d7a4:	465b      	mov	r3, fp
 800d7a6:	f7f2 fd47 	bl	8000238 <__aeabi_dsub>
 800d7aa:	9d01      	ldr	r5, [sp, #4]
 800d7ac:	4682      	mov	sl, r0
 800d7ae:	468b      	mov	fp, r1
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	f7f3 f9a8 	bl	8000b08 <__aeabi_d2iz>
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	f7f2 fe8b 	bl	80004d4 <__aeabi_i2d>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	4640      	mov	r0, r8
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	f7f2 fd37 	bl	8000238 <__aeabi_dsub>
 800d7ca:	3630      	adds	r6, #48	; 0x30
 800d7cc:	f805 6b01 	strb.w	r6, [r5], #1
 800d7d0:	4652      	mov	r2, sl
 800d7d2:	465b      	mov	r3, fp
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	4689      	mov	r9, r1
 800d7d8:	f7f3 f958 	bl	8000a8c <__aeabi_dcmplt>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d163      	bne.n	800d8a8 <_dtoa_r+0x608>
 800d7e0:	4642      	mov	r2, r8
 800d7e2:	464b      	mov	r3, r9
 800d7e4:	4936      	ldr	r1, [pc, #216]	; (800d8c0 <_dtoa_r+0x620>)
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	f7f2 fd26 	bl	8000238 <__aeabi_dsub>
 800d7ec:	4652      	mov	r2, sl
 800d7ee:	465b      	mov	r3, fp
 800d7f0:	f7f3 f94c 	bl	8000a8c <__aeabi_dcmplt>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	f040 80b5 	bne.w	800d964 <_dtoa_r+0x6c4>
 800d7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7fc:	429d      	cmp	r5, r3
 800d7fe:	d081      	beq.n	800d704 <_dtoa_r+0x464>
 800d800:	4b30      	ldr	r3, [pc, #192]	; (800d8c4 <_dtoa_r+0x624>)
 800d802:	2200      	movs	r2, #0
 800d804:	4650      	mov	r0, sl
 800d806:	4659      	mov	r1, fp
 800d808:	f7f2 fece 	bl	80005a8 <__aeabi_dmul>
 800d80c:	4b2d      	ldr	r3, [pc, #180]	; (800d8c4 <_dtoa_r+0x624>)
 800d80e:	4682      	mov	sl, r0
 800d810:	468b      	mov	fp, r1
 800d812:	4640      	mov	r0, r8
 800d814:	4649      	mov	r1, r9
 800d816:	2200      	movs	r2, #0
 800d818:	f7f2 fec6 	bl	80005a8 <__aeabi_dmul>
 800d81c:	4680      	mov	r8, r0
 800d81e:	4689      	mov	r9, r1
 800d820:	e7c6      	b.n	800d7b0 <_dtoa_r+0x510>
 800d822:	4650      	mov	r0, sl
 800d824:	4659      	mov	r1, fp
 800d826:	f7f2 febf 	bl	80005a8 <__aeabi_dmul>
 800d82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d82c:	9d01      	ldr	r5, [sp, #4]
 800d82e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d830:	4682      	mov	sl, r0
 800d832:	468b      	mov	fp, r1
 800d834:	4649      	mov	r1, r9
 800d836:	4640      	mov	r0, r8
 800d838:	f7f3 f966 	bl	8000b08 <__aeabi_d2iz>
 800d83c:	4606      	mov	r6, r0
 800d83e:	f7f2 fe49 	bl	80004d4 <__aeabi_i2d>
 800d842:	3630      	adds	r6, #48	; 0x30
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	4640      	mov	r0, r8
 800d84a:	4649      	mov	r1, r9
 800d84c:	f7f2 fcf4 	bl	8000238 <__aeabi_dsub>
 800d850:	f805 6b01 	strb.w	r6, [r5], #1
 800d854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d856:	429d      	cmp	r5, r3
 800d858:	4680      	mov	r8, r0
 800d85a:	4689      	mov	r9, r1
 800d85c:	f04f 0200 	mov.w	r2, #0
 800d860:	d124      	bne.n	800d8ac <_dtoa_r+0x60c>
 800d862:	4b1b      	ldr	r3, [pc, #108]	; (800d8d0 <_dtoa_r+0x630>)
 800d864:	4650      	mov	r0, sl
 800d866:	4659      	mov	r1, fp
 800d868:	f7f2 fce8 	bl	800023c <__adddf3>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4640      	mov	r0, r8
 800d872:	4649      	mov	r1, r9
 800d874:	f7f3 f928 	bl	8000ac8 <__aeabi_dcmpgt>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d173      	bne.n	800d964 <_dtoa_r+0x6c4>
 800d87c:	4652      	mov	r2, sl
 800d87e:	465b      	mov	r3, fp
 800d880:	4913      	ldr	r1, [pc, #76]	; (800d8d0 <_dtoa_r+0x630>)
 800d882:	2000      	movs	r0, #0
 800d884:	f7f2 fcd8 	bl	8000238 <__aeabi_dsub>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	4640      	mov	r0, r8
 800d88e:	4649      	mov	r1, r9
 800d890:	f7f3 f8fc 	bl	8000a8c <__aeabi_dcmplt>
 800d894:	2800      	cmp	r0, #0
 800d896:	f43f af35 	beq.w	800d704 <_dtoa_r+0x464>
 800d89a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d89c:	1e6b      	subs	r3, r5, #1
 800d89e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d8a4:	2b30      	cmp	r3, #48	; 0x30
 800d8a6:	d0f8      	beq.n	800d89a <_dtoa_r+0x5fa>
 800d8a8:	9700      	str	r7, [sp, #0]
 800d8aa:	e049      	b.n	800d940 <_dtoa_r+0x6a0>
 800d8ac:	4b05      	ldr	r3, [pc, #20]	; (800d8c4 <_dtoa_r+0x624>)
 800d8ae:	f7f2 fe7b 	bl	80005a8 <__aeabi_dmul>
 800d8b2:	4680      	mov	r8, r0
 800d8b4:	4689      	mov	r9, r1
 800d8b6:	e7bd      	b.n	800d834 <_dtoa_r+0x594>
 800d8b8:	08014190 	.word	0x08014190
 800d8bc:	08014168 	.word	0x08014168
 800d8c0:	3ff00000 	.word	0x3ff00000
 800d8c4:	40240000 	.word	0x40240000
 800d8c8:	401c0000 	.word	0x401c0000
 800d8cc:	40140000 	.word	0x40140000
 800d8d0:	3fe00000 	.word	0x3fe00000
 800d8d4:	9d01      	ldr	r5, [sp, #4]
 800d8d6:	4656      	mov	r6, sl
 800d8d8:	465f      	mov	r7, fp
 800d8da:	4642      	mov	r2, r8
 800d8dc:	464b      	mov	r3, r9
 800d8de:	4630      	mov	r0, r6
 800d8e0:	4639      	mov	r1, r7
 800d8e2:	f7f2 ff8b 	bl	80007fc <__aeabi_ddiv>
 800d8e6:	f7f3 f90f 	bl	8000b08 <__aeabi_d2iz>
 800d8ea:	4682      	mov	sl, r0
 800d8ec:	f7f2 fdf2 	bl	80004d4 <__aeabi_i2d>
 800d8f0:	4642      	mov	r2, r8
 800d8f2:	464b      	mov	r3, r9
 800d8f4:	f7f2 fe58 	bl	80005a8 <__aeabi_dmul>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4639      	mov	r1, r7
 800d900:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d904:	f7f2 fc98 	bl	8000238 <__aeabi_dsub>
 800d908:	f805 6b01 	strb.w	r6, [r5], #1
 800d90c:	9e01      	ldr	r6, [sp, #4]
 800d90e:	9f03      	ldr	r7, [sp, #12]
 800d910:	1bae      	subs	r6, r5, r6
 800d912:	42b7      	cmp	r7, r6
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	d135      	bne.n	800d986 <_dtoa_r+0x6e6>
 800d91a:	f7f2 fc8f 	bl	800023c <__adddf3>
 800d91e:	4642      	mov	r2, r8
 800d920:	464b      	mov	r3, r9
 800d922:	4606      	mov	r6, r0
 800d924:	460f      	mov	r7, r1
 800d926:	f7f3 f8cf 	bl	8000ac8 <__aeabi_dcmpgt>
 800d92a:	b9d0      	cbnz	r0, 800d962 <_dtoa_r+0x6c2>
 800d92c:	4642      	mov	r2, r8
 800d92e:	464b      	mov	r3, r9
 800d930:	4630      	mov	r0, r6
 800d932:	4639      	mov	r1, r7
 800d934:	f7f3 f8a0 	bl	8000a78 <__aeabi_dcmpeq>
 800d938:	b110      	cbz	r0, 800d940 <_dtoa_r+0x6a0>
 800d93a:	f01a 0f01 	tst.w	sl, #1
 800d93e:	d110      	bne.n	800d962 <_dtoa_r+0x6c2>
 800d940:	4620      	mov	r0, r4
 800d942:	ee18 1a10 	vmov	r1, s16
 800d946:	f000 fb61 	bl	800e00c <_Bfree>
 800d94a:	2300      	movs	r3, #0
 800d94c:	9800      	ldr	r0, [sp, #0]
 800d94e:	702b      	strb	r3, [r5, #0]
 800d950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d952:	3001      	adds	r0, #1
 800d954:	6018      	str	r0, [r3, #0]
 800d956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f43f acf1 	beq.w	800d340 <_dtoa_r+0xa0>
 800d95e:	601d      	str	r5, [r3, #0]
 800d960:	e4ee      	b.n	800d340 <_dtoa_r+0xa0>
 800d962:	9f00      	ldr	r7, [sp, #0]
 800d964:	462b      	mov	r3, r5
 800d966:	461d      	mov	r5, r3
 800d968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d96c:	2a39      	cmp	r2, #57	; 0x39
 800d96e:	d106      	bne.n	800d97e <_dtoa_r+0x6de>
 800d970:	9a01      	ldr	r2, [sp, #4]
 800d972:	429a      	cmp	r2, r3
 800d974:	d1f7      	bne.n	800d966 <_dtoa_r+0x6c6>
 800d976:	9901      	ldr	r1, [sp, #4]
 800d978:	2230      	movs	r2, #48	; 0x30
 800d97a:	3701      	adds	r7, #1
 800d97c:	700a      	strb	r2, [r1, #0]
 800d97e:	781a      	ldrb	r2, [r3, #0]
 800d980:	3201      	adds	r2, #1
 800d982:	701a      	strb	r2, [r3, #0]
 800d984:	e790      	b.n	800d8a8 <_dtoa_r+0x608>
 800d986:	4ba6      	ldr	r3, [pc, #664]	; (800dc20 <_dtoa_r+0x980>)
 800d988:	2200      	movs	r2, #0
 800d98a:	f7f2 fe0d 	bl	80005a8 <__aeabi_dmul>
 800d98e:	2200      	movs	r2, #0
 800d990:	2300      	movs	r3, #0
 800d992:	4606      	mov	r6, r0
 800d994:	460f      	mov	r7, r1
 800d996:	f7f3 f86f 	bl	8000a78 <__aeabi_dcmpeq>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d09d      	beq.n	800d8da <_dtoa_r+0x63a>
 800d99e:	e7cf      	b.n	800d940 <_dtoa_r+0x6a0>
 800d9a0:	9a08      	ldr	r2, [sp, #32]
 800d9a2:	2a00      	cmp	r2, #0
 800d9a4:	f000 80d7 	beq.w	800db56 <_dtoa_r+0x8b6>
 800d9a8:	9a06      	ldr	r2, [sp, #24]
 800d9aa:	2a01      	cmp	r2, #1
 800d9ac:	f300 80ba 	bgt.w	800db24 <_dtoa_r+0x884>
 800d9b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9b2:	2a00      	cmp	r2, #0
 800d9b4:	f000 80b2 	beq.w	800db1c <_dtoa_r+0x87c>
 800d9b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9bc:	9e07      	ldr	r6, [sp, #28]
 800d9be:	9d04      	ldr	r5, [sp, #16]
 800d9c0:	9a04      	ldr	r2, [sp, #16]
 800d9c2:	441a      	add	r2, r3
 800d9c4:	9204      	str	r2, [sp, #16]
 800d9c6:	9a05      	ldr	r2, [sp, #20]
 800d9c8:	2101      	movs	r1, #1
 800d9ca:	441a      	add	r2, r3
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	9205      	str	r2, [sp, #20]
 800d9d0:	f000 fbd4 	bl	800e17c <__i2b>
 800d9d4:	4607      	mov	r7, r0
 800d9d6:	2d00      	cmp	r5, #0
 800d9d8:	dd0c      	ble.n	800d9f4 <_dtoa_r+0x754>
 800d9da:	9b05      	ldr	r3, [sp, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dd09      	ble.n	800d9f4 <_dtoa_r+0x754>
 800d9e0:	42ab      	cmp	r3, r5
 800d9e2:	9a04      	ldr	r2, [sp, #16]
 800d9e4:	bfa8      	it	ge
 800d9e6:	462b      	movge	r3, r5
 800d9e8:	1ad2      	subs	r2, r2, r3
 800d9ea:	9204      	str	r2, [sp, #16]
 800d9ec:	9a05      	ldr	r2, [sp, #20]
 800d9ee:	1aed      	subs	r5, r5, r3
 800d9f0:	1ad3      	subs	r3, r2, r3
 800d9f2:	9305      	str	r3, [sp, #20]
 800d9f4:	9b07      	ldr	r3, [sp, #28]
 800d9f6:	b31b      	cbz	r3, 800da40 <_dtoa_r+0x7a0>
 800d9f8:	9b08      	ldr	r3, [sp, #32]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f000 80af 	beq.w	800db5e <_dtoa_r+0x8be>
 800da00:	2e00      	cmp	r6, #0
 800da02:	dd13      	ble.n	800da2c <_dtoa_r+0x78c>
 800da04:	4639      	mov	r1, r7
 800da06:	4632      	mov	r2, r6
 800da08:	4620      	mov	r0, r4
 800da0a:	f000 fc77 	bl	800e2fc <__pow5mult>
 800da0e:	ee18 2a10 	vmov	r2, s16
 800da12:	4601      	mov	r1, r0
 800da14:	4607      	mov	r7, r0
 800da16:	4620      	mov	r0, r4
 800da18:	f000 fbc6 	bl	800e1a8 <__multiply>
 800da1c:	ee18 1a10 	vmov	r1, s16
 800da20:	4680      	mov	r8, r0
 800da22:	4620      	mov	r0, r4
 800da24:	f000 faf2 	bl	800e00c <_Bfree>
 800da28:	ee08 8a10 	vmov	s16, r8
 800da2c:	9b07      	ldr	r3, [sp, #28]
 800da2e:	1b9a      	subs	r2, r3, r6
 800da30:	d006      	beq.n	800da40 <_dtoa_r+0x7a0>
 800da32:	ee18 1a10 	vmov	r1, s16
 800da36:	4620      	mov	r0, r4
 800da38:	f000 fc60 	bl	800e2fc <__pow5mult>
 800da3c:	ee08 0a10 	vmov	s16, r0
 800da40:	2101      	movs	r1, #1
 800da42:	4620      	mov	r0, r4
 800da44:	f000 fb9a 	bl	800e17c <__i2b>
 800da48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	4606      	mov	r6, r0
 800da4e:	f340 8088 	ble.w	800db62 <_dtoa_r+0x8c2>
 800da52:	461a      	mov	r2, r3
 800da54:	4601      	mov	r1, r0
 800da56:	4620      	mov	r0, r4
 800da58:	f000 fc50 	bl	800e2fc <__pow5mult>
 800da5c:	9b06      	ldr	r3, [sp, #24]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	4606      	mov	r6, r0
 800da62:	f340 8081 	ble.w	800db68 <_dtoa_r+0x8c8>
 800da66:	f04f 0800 	mov.w	r8, #0
 800da6a:	6933      	ldr	r3, [r6, #16]
 800da6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da70:	6918      	ldr	r0, [r3, #16]
 800da72:	f000 fb33 	bl	800e0dc <__hi0bits>
 800da76:	f1c0 0020 	rsb	r0, r0, #32
 800da7a:	9b05      	ldr	r3, [sp, #20]
 800da7c:	4418      	add	r0, r3
 800da7e:	f010 001f 	ands.w	r0, r0, #31
 800da82:	f000 8092 	beq.w	800dbaa <_dtoa_r+0x90a>
 800da86:	f1c0 0320 	rsb	r3, r0, #32
 800da8a:	2b04      	cmp	r3, #4
 800da8c:	f340 808a 	ble.w	800dba4 <_dtoa_r+0x904>
 800da90:	f1c0 001c 	rsb	r0, r0, #28
 800da94:	9b04      	ldr	r3, [sp, #16]
 800da96:	4403      	add	r3, r0
 800da98:	9304      	str	r3, [sp, #16]
 800da9a:	9b05      	ldr	r3, [sp, #20]
 800da9c:	4403      	add	r3, r0
 800da9e:	4405      	add	r5, r0
 800daa0:	9305      	str	r3, [sp, #20]
 800daa2:	9b04      	ldr	r3, [sp, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	dd07      	ble.n	800dab8 <_dtoa_r+0x818>
 800daa8:	ee18 1a10 	vmov	r1, s16
 800daac:	461a      	mov	r2, r3
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 fc7e 	bl	800e3b0 <__lshift>
 800dab4:	ee08 0a10 	vmov	s16, r0
 800dab8:	9b05      	ldr	r3, [sp, #20]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	dd05      	ble.n	800daca <_dtoa_r+0x82a>
 800dabe:	4631      	mov	r1, r6
 800dac0:	461a      	mov	r2, r3
 800dac2:	4620      	mov	r0, r4
 800dac4:	f000 fc74 	bl	800e3b0 <__lshift>
 800dac8:	4606      	mov	r6, r0
 800daca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d06e      	beq.n	800dbae <_dtoa_r+0x90e>
 800dad0:	ee18 0a10 	vmov	r0, s16
 800dad4:	4631      	mov	r1, r6
 800dad6:	f000 fcdb 	bl	800e490 <__mcmp>
 800dada:	2800      	cmp	r0, #0
 800dadc:	da67      	bge.n	800dbae <_dtoa_r+0x90e>
 800dade:	9b00      	ldr	r3, [sp, #0]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	ee18 1a10 	vmov	r1, s16
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	220a      	movs	r2, #10
 800daea:	2300      	movs	r3, #0
 800daec:	4620      	mov	r0, r4
 800daee:	f000 faaf 	bl	800e050 <__multadd>
 800daf2:	9b08      	ldr	r3, [sp, #32]
 800daf4:	ee08 0a10 	vmov	s16, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 81b1 	beq.w	800de60 <_dtoa_r+0xbc0>
 800dafe:	2300      	movs	r3, #0
 800db00:	4639      	mov	r1, r7
 800db02:	220a      	movs	r2, #10
 800db04:	4620      	mov	r0, r4
 800db06:	f000 faa3 	bl	800e050 <__multadd>
 800db0a:	9b02      	ldr	r3, [sp, #8]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	4607      	mov	r7, r0
 800db10:	f300 808e 	bgt.w	800dc30 <_dtoa_r+0x990>
 800db14:	9b06      	ldr	r3, [sp, #24]
 800db16:	2b02      	cmp	r3, #2
 800db18:	dc51      	bgt.n	800dbbe <_dtoa_r+0x91e>
 800db1a:	e089      	b.n	800dc30 <_dtoa_r+0x990>
 800db1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db22:	e74b      	b.n	800d9bc <_dtoa_r+0x71c>
 800db24:	9b03      	ldr	r3, [sp, #12]
 800db26:	1e5e      	subs	r6, r3, #1
 800db28:	9b07      	ldr	r3, [sp, #28]
 800db2a:	42b3      	cmp	r3, r6
 800db2c:	bfbf      	itttt	lt
 800db2e:	9b07      	ldrlt	r3, [sp, #28]
 800db30:	9607      	strlt	r6, [sp, #28]
 800db32:	1af2      	sublt	r2, r6, r3
 800db34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db36:	bfb6      	itet	lt
 800db38:	189b      	addlt	r3, r3, r2
 800db3a:	1b9e      	subge	r6, r3, r6
 800db3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800db3e:	9b03      	ldr	r3, [sp, #12]
 800db40:	bfb8      	it	lt
 800db42:	2600      	movlt	r6, #0
 800db44:	2b00      	cmp	r3, #0
 800db46:	bfb7      	itett	lt
 800db48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800db4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800db50:	1a9d      	sublt	r5, r3, r2
 800db52:	2300      	movlt	r3, #0
 800db54:	e734      	b.n	800d9c0 <_dtoa_r+0x720>
 800db56:	9e07      	ldr	r6, [sp, #28]
 800db58:	9d04      	ldr	r5, [sp, #16]
 800db5a:	9f08      	ldr	r7, [sp, #32]
 800db5c:	e73b      	b.n	800d9d6 <_dtoa_r+0x736>
 800db5e:	9a07      	ldr	r2, [sp, #28]
 800db60:	e767      	b.n	800da32 <_dtoa_r+0x792>
 800db62:	9b06      	ldr	r3, [sp, #24]
 800db64:	2b01      	cmp	r3, #1
 800db66:	dc18      	bgt.n	800db9a <_dtoa_r+0x8fa>
 800db68:	f1ba 0f00 	cmp.w	sl, #0
 800db6c:	d115      	bne.n	800db9a <_dtoa_r+0x8fa>
 800db6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db72:	b993      	cbnz	r3, 800db9a <_dtoa_r+0x8fa>
 800db74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db78:	0d1b      	lsrs	r3, r3, #20
 800db7a:	051b      	lsls	r3, r3, #20
 800db7c:	b183      	cbz	r3, 800dba0 <_dtoa_r+0x900>
 800db7e:	9b04      	ldr	r3, [sp, #16]
 800db80:	3301      	adds	r3, #1
 800db82:	9304      	str	r3, [sp, #16]
 800db84:	9b05      	ldr	r3, [sp, #20]
 800db86:	3301      	adds	r3, #1
 800db88:	9305      	str	r3, [sp, #20]
 800db8a:	f04f 0801 	mov.w	r8, #1
 800db8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db90:	2b00      	cmp	r3, #0
 800db92:	f47f af6a 	bne.w	800da6a <_dtoa_r+0x7ca>
 800db96:	2001      	movs	r0, #1
 800db98:	e76f      	b.n	800da7a <_dtoa_r+0x7da>
 800db9a:	f04f 0800 	mov.w	r8, #0
 800db9e:	e7f6      	b.n	800db8e <_dtoa_r+0x8ee>
 800dba0:	4698      	mov	r8, r3
 800dba2:	e7f4      	b.n	800db8e <_dtoa_r+0x8ee>
 800dba4:	f43f af7d 	beq.w	800daa2 <_dtoa_r+0x802>
 800dba8:	4618      	mov	r0, r3
 800dbaa:	301c      	adds	r0, #28
 800dbac:	e772      	b.n	800da94 <_dtoa_r+0x7f4>
 800dbae:	9b03      	ldr	r3, [sp, #12]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	dc37      	bgt.n	800dc24 <_dtoa_r+0x984>
 800dbb4:	9b06      	ldr	r3, [sp, #24]
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	dd34      	ble.n	800dc24 <_dtoa_r+0x984>
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	9302      	str	r3, [sp, #8]
 800dbbe:	9b02      	ldr	r3, [sp, #8]
 800dbc0:	b96b      	cbnz	r3, 800dbde <_dtoa_r+0x93e>
 800dbc2:	4631      	mov	r1, r6
 800dbc4:	2205      	movs	r2, #5
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f000 fa42 	bl	800e050 <__multadd>
 800dbcc:	4601      	mov	r1, r0
 800dbce:	4606      	mov	r6, r0
 800dbd0:	ee18 0a10 	vmov	r0, s16
 800dbd4:	f000 fc5c 	bl	800e490 <__mcmp>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	f73f adbb 	bgt.w	800d754 <_dtoa_r+0x4b4>
 800dbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe0:	9d01      	ldr	r5, [sp, #4]
 800dbe2:	43db      	mvns	r3, r3
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	f04f 0800 	mov.w	r8, #0
 800dbea:	4631      	mov	r1, r6
 800dbec:	4620      	mov	r0, r4
 800dbee:	f000 fa0d 	bl	800e00c <_Bfree>
 800dbf2:	2f00      	cmp	r7, #0
 800dbf4:	f43f aea4 	beq.w	800d940 <_dtoa_r+0x6a0>
 800dbf8:	f1b8 0f00 	cmp.w	r8, #0
 800dbfc:	d005      	beq.n	800dc0a <_dtoa_r+0x96a>
 800dbfe:	45b8      	cmp	r8, r7
 800dc00:	d003      	beq.n	800dc0a <_dtoa_r+0x96a>
 800dc02:	4641      	mov	r1, r8
 800dc04:	4620      	mov	r0, r4
 800dc06:	f000 fa01 	bl	800e00c <_Bfree>
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f000 f9fd 	bl	800e00c <_Bfree>
 800dc12:	e695      	b.n	800d940 <_dtoa_r+0x6a0>
 800dc14:	2600      	movs	r6, #0
 800dc16:	4637      	mov	r7, r6
 800dc18:	e7e1      	b.n	800dbde <_dtoa_r+0x93e>
 800dc1a:	9700      	str	r7, [sp, #0]
 800dc1c:	4637      	mov	r7, r6
 800dc1e:	e599      	b.n	800d754 <_dtoa_r+0x4b4>
 800dc20:	40240000 	.word	0x40240000
 800dc24:	9b08      	ldr	r3, [sp, #32]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f000 80ca 	beq.w	800ddc0 <_dtoa_r+0xb20>
 800dc2c:	9b03      	ldr	r3, [sp, #12]
 800dc2e:	9302      	str	r3, [sp, #8]
 800dc30:	2d00      	cmp	r5, #0
 800dc32:	dd05      	ble.n	800dc40 <_dtoa_r+0x9a0>
 800dc34:	4639      	mov	r1, r7
 800dc36:	462a      	mov	r2, r5
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 fbb9 	bl	800e3b0 <__lshift>
 800dc3e:	4607      	mov	r7, r0
 800dc40:	f1b8 0f00 	cmp.w	r8, #0
 800dc44:	d05b      	beq.n	800dcfe <_dtoa_r+0xa5e>
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f000 f99f 	bl	800df8c <_Balloc>
 800dc4e:	4605      	mov	r5, r0
 800dc50:	b928      	cbnz	r0, 800dc5e <_dtoa_r+0x9be>
 800dc52:	4b87      	ldr	r3, [pc, #540]	; (800de70 <_dtoa_r+0xbd0>)
 800dc54:	4602      	mov	r2, r0
 800dc56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc5a:	f7ff bb3b 	b.w	800d2d4 <_dtoa_r+0x34>
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	3202      	adds	r2, #2
 800dc62:	0092      	lsls	r2, r2, #2
 800dc64:	f107 010c 	add.w	r1, r7, #12
 800dc68:	300c      	adds	r0, #12
 800dc6a:	f7fe faf7 	bl	800c25c <memcpy>
 800dc6e:	2201      	movs	r2, #1
 800dc70:	4629      	mov	r1, r5
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 fb9c 	bl	800e3b0 <__lshift>
 800dc78:	9b01      	ldr	r3, [sp, #4]
 800dc7a:	f103 0901 	add.w	r9, r3, #1
 800dc7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dc82:	4413      	add	r3, r2
 800dc84:	9305      	str	r3, [sp, #20]
 800dc86:	f00a 0301 	and.w	r3, sl, #1
 800dc8a:	46b8      	mov	r8, r7
 800dc8c:	9304      	str	r3, [sp, #16]
 800dc8e:	4607      	mov	r7, r0
 800dc90:	4631      	mov	r1, r6
 800dc92:	ee18 0a10 	vmov	r0, s16
 800dc96:	f7ff fa77 	bl	800d188 <quorem>
 800dc9a:	4641      	mov	r1, r8
 800dc9c:	9002      	str	r0, [sp, #8]
 800dc9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dca2:	ee18 0a10 	vmov	r0, s16
 800dca6:	f000 fbf3 	bl	800e490 <__mcmp>
 800dcaa:	463a      	mov	r2, r7
 800dcac:	9003      	str	r0, [sp, #12]
 800dcae:	4631      	mov	r1, r6
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f000 fc09 	bl	800e4c8 <__mdiff>
 800dcb6:	68c2      	ldr	r2, [r0, #12]
 800dcb8:	f109 3bff 	add.w	fp, r9, #4294967295
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	bb02      	cbnz	r2, 800dd02 <_dtoa_r+0xa62>
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	ee18 0a10 	vmov	r0, s16
 800dcc6:	f000 fbe3 	bl	800e490 <__mcmp>
 800dcca:	4602      	mov	r2, r0
 800dccc:	4629      	mov	r1, r5
 800dcce:	4620      	mov	r0, r4
 800dcd0:	9207      	str	r2, [sp, #28]
 800dcd2:	f000 f99b 	bl	800e00c <_Bfree>
 800dcd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dcda:	ea43 0102 	orr.w	r1, r3, r2
 800dcde:	9b04      	ldr	r3, [sp, #16]
 800dce0:	430b      	orrs	r3, r1
 800dce2:	464d      	mov	r5, r9
 800dce4:	d10f      	bne.n	800dd06 <_dtoa_r+0xa66>
 800dce6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dcea:	d02a      	beq.n	800dd42 <_dtoa_r+0xaa2>
 800dcec:	9b03      	ldr	r3, [sp, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	dd02      	ble.n	800dcf8 <_dtoa_r+0xa58>
 800dcf2:	9b02      	ldr	r3, [sp, #8]
 800dcf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dcf8:	f88b a000 	strb.w	sl, [fp]
 800dcfc:	e775      	b.n	800dbea <_dtoa_r+0x94a>
 800dcfe:	4638      	mov	r0, r7
 800dd00:	e7ba      	b.n	800dc78 <_dtoa_r+0x9d8>
 800dd02:	2201      	movs	r2, #1
 800dd04:	e7e2      	b.n	800dccc <_dtoa_r+0xa2c>
 800dd06:	9b03      	ldr	r3, [sp, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	db04      	blt.n	800dd16 <_dtoa_r+0xa76>
 800dd0c:	9906      	ldr	r1, [sp, #24]
 800dd0e:	430b      	orrs	r3, r1
 800dd10:	9904      	ldr	r1, [sp, #16]
 800dd12:	430b      	orrs	r3, r1
 800dd14:	d122      	bne.n	800dd5c <_dtoa_r+0xabc>
 800dd16:	2a00      	cmp	r2, #0
 800dd18:	ddee      	ble.n	800dcf8 <_dtoa_r+0xa58>
 800dd1a:	ee18 1a10 	vmov	r1, s16
 800dd1e:	2201      	movs	r2, #1
 800dd20:	4620      	mov	r0, r4
 800dd22:	f000 fb45 	bl	800e3b0 <__lshift>
 800dd26:	4631      	mov	r1, r6
 800dd28:	ee08 0a10 	vmov	s16, r0
 800dd2c:	f000 fbb0 	bl	800e490 <__mcmp>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	dc03      	bgt.n	800dd3c <_dtoa_r+0xa9c>
 800dd34:	d1e0      	bne.n	800dcf8 <_dtoa_r+0xa58>
 800dd36:	f01a 0f01 	tst.w	sl, #1
 800dd3a:	d0dd      	beq.n	800dcf8 <_dtoa_r+0xa58>
 800dd3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd40:	d1d7      	bne.n	800dcf2 <_dtoa_r+0xa52>
 800dd42:	2339      	movs	r3, #57	; 0x39
 800dd44:	f88b 3000 	strb.w	r3, [fp]
 800dd48:	462b      	mov	r3, r5
 800dd4a:	461d      	mov	r5, r3
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd52:	2a39      	cmp	r2, #57	; 0x39
 800dd54:	d071      	beq.n	800de3a <_dtoa_r+0xb9a>
 800dd56:	3201      	adds	r2, #1
 800dd58:	701a      	strb	r2, [r3, #0]
 800dd5a:	e746      	b.n	800dbea <_dtoa_r+0x94a>
 800dd5c:	2a00      	cmp	r2, #0
 800dd5e:	dd07      	ble.n	800dd70 <_dtoa_r+0xad0>
 800dd60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd64:	d0ed      	beq.n	800dd42 <_dtoa_r+0xaa2>
 800dd66:	f10a 0301 	add.w	r3, sl, #1
 800dd6a:	f88b 3000 	strb.w	r3, [fp]
 800dd6e:	e73c      	b.n	800dbea <_dtoa_r+0x94a>
 800dd70:	9b05      	ldr	r3, [sp, #20]
 800dd72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dd76:	4599      	cmp	r9, r3
 800dd78:	d047      	beq.n	800de0a <_dtoa_r+0xb6a>
 800dd7a:	ee18 1a10 	vmov	r1, s16
 800dd7e:	2300      	movs	r3, #0
 800dd80:	220a      	movs	r2, #10
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 f964 	bl	800e050 <__multadd>
 800dd88:	45b8      	cmp	r8, r7
 800dd8a:	ee08 0a10 	vmov	s16, r0
 800dd8e:	f04f 0300 	mov.w	r3, #0
 800dd92:	f04f 020a 	mov.w	r2, #10
 800dd96:	4641      	mov	r1, r8
 800dd98:	4620      	mov	r0, r4
 800dd9a:	d106      	bne.n	800ddaa <_dtoa_r+0xb0a>
 800dd9c:	f000 f958 	bl	800e050 <__multadd>
 800dda0:	4680      	mov	r8, r0
 800dda2:	4607      	mov	r7, r0
 800dda4:	f109 0901 	add.w	r9, r9, #1
 800dda8:	e772      	b.n	800dc90 <_dtoa_r+0x9f0>
 800ddaa:	f000 f951 	bl	800e050 <__multadd>
 800ddae:	4639      	mov	r1, r7
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	220a      	movs	r2, #10
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 f94a 	bl	800e050 <__multadd>
 800ddbc:	4607      	mov	r7, r0
 800ddbe:	e7f1      	b.n	800dda4 <_dtoa_r+0xb04>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	9302      	str	r3, [sp, #8]
 800ddc4:	9d01      	ldr	r5, [sp, #4]
 800ddc6:	ee18 0a10 	vmov	r0, s16
 800ddca:	4631      	mov	r1, r6
 800ddcc:	f7ff f9dc 	bl	800d188 <quorem>
 800ddd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ddd4:	9b01      	ldr	r3, [sp, #4]
 800ddd6:	f805 ab01 	strb.w	sl, [r5], #1
 800ddda:	1aea      	subs	r2, r5, r3
 800dddc:	9b02      	ldr	r3, [sp, #8]
 800ddde:	4293      	cmp	r3, r2
 800dde0:	dd09      	ble.n	800ddf6 <_dtoa_r+0xb56>
 800dde2:	ee18 1a10 	vmov	r1, s16
 800dde6:	2300      	movs	r3, #0
 800dde8:	220a      	movs	r2, #10
 800ddea:	4620      	mov	r0, r4
 800ddec:	f000 f930 	bl	800e050 <__multadd>
 800ddf0:	ee08 0a10 	vmov	s16, r0
 800ddf4:	e7e7      	b.n	800ddc6 <_dtoa_r+0xb26>
 800ddf6:	9b02      	ldr	r3, [sp, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	bfc8      	it	gt
 800ddfc:	461d      	movgt	r5, r3
 800ddfe:	9b01      	ldr	r3, [sp, #4]
 800de00:	bfd8      	it	le
 800de02:	2501      	movle	r5, #1
 800de04:	441d      	add	r5, r3
 800de06:	f04f 0800 	mov.w	r8, #0
 800de0a:	ee18 1a10 	vmov	r1, s16
 800de0e:	2201      	movs	r2, #1
 800de10:	4620      	mov	r0, r4
 800de12:	f000 facd 	bl	800e3b0 <__lshift>
 800de16:	4631      	mov	r1, r6
 800de18:	ee08 0a10 	vmov	s16, r0
 800de1c:	f000 fb38 	bl	800e490 <__mcmp>
 800de20:	2800      	cmp	r0, #0
 800de22:	dc91      	bgt.n	800dd48 <_dtoa_r+0xaa8>
 800de24:	d102      	bne.n	800de2c <_dtoa_r+0xb8c>
 800de26:	f01a 0f01 	tst.w	sl, #1
 800de2a:	d18d      	bne.n	800dd48 <_dtoa_r+0xaa8>
 800de2c:	462b      	mov	r3, r5
 800de2e:	461d      	mov	r5, r3
 800de30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de34:	2a30      	cmp	r2, #48	; 0x30
 800de36:	d0fa      	beq.n	800de2e <_dtoa_r+0xb8e>
 800de38:	e6d7      	b.n	800dbea <_dtoa_r+0x94a>
 800de3a:	9a01      	ldr	r2, [sp, #4]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d184      	bne.n	800dd4a <_dtoa_r+0xaaa>
 800de40:	9b00      	ldr	r3, [sp, #0]
 800de42:	3301      	adds	r3, #1
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	2331      	movs	r3, #49	; 0x31
 800de48:	7013      	strb	r3, [r2, #0]
 800de4a:	e6ce      	b.n	800dbea <_dtoa_r+0x94a>
 800de4c:	4b09      	ldr	r3, [pc, #36]	; (800de74 <_dtoa_r+0xbd4>)
 800de4e:	f7ff ba95 	b.w	800d37c <_dtoa_r+0xdc>
 800de52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de54:	2b00      	cmp	r3, #0
 800de56:	f47f aa6e 	bne.w	800d336 <_dtoa_r+0x96>
 800de5a:	4b07      	ldr	r3, [pc, #28]	; (800de78 <_dtoa_r+0xbd8>)
 800de5c:	f7ff ba8e 	b.w	800d37c <_dtoa_r+0xdc>
 800de60:	9b02      	ldr	r3, [sp, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	dcae      	bgt.n	800ddc4 <_dtoa_r+0xb24>
 800de66:	9b06      	ldr	r3, [sp, #24]
 800de68:	2b02      	cmp	r3, #2
 800de6a:	f73f aea8 	bgt.w	800dbbe <_dtoa_r+0x91e>
 800de6e:	e7a9      	b.n	800ddc4 <_dtoa_r+0xb24>
 800de70:	080140fb 	.word	0x080140fb
 800de74:	08014058 	.word	0x08014058
 800de78:	0801407c 	.word	0x0801407c

0800de7c <_localeconv_r>:
 800de7c:	4800      	ldr	r0, [pc, #0]	; (800de80 <_localeconv_r+0x4>)
 800de7e:	4770      	bx	lr
 800de80:	20000288 	.word	0x20000288

0800de84 <_lseek_r>:
 800de84:	b538      	push	{r3, r4, r5, lr}
 800de86:	4d07      	ldr	r5, [pc, #28]	; (800dea4 <_lseek_r+0x20>)
 800de88:	4604      	mov	r4, r0
 800de8a:	4608      	mov	r0, r1
 800de8c:	4611      	mov	r1, r2
 800de8e:	2200      	movs	r2, #0
 800de90:	602a      	str	r2, [r5, #0]
 800de92:	461a      	mov	r2, r3
 800de94:	f7f3 fe52 	bl	8001b3c <_lseek>
 800de98:	1c43      	adds	r3, r0, #1
 800de9a:	d102      	bne.n	800dea2 <_lseek_r+0x1e>
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	b103      	cbz	r3, 800dea2 <_lseek_r+0x1e>
 800dea0:	6023      	str	r3, [r4, #0]
 800dea2:	bd38      	pop	{r3, r4, r5, pc}
 800dea4:	200007ac 	.word	0x200007ac

0800dea8 <__swhatbuf_r>:
 800dea8:	b570      	push	{r4, r5, r6, lr}
 800deaa:	460e      	mov	r6, r1
 800deac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb0:	2900      	cmp	r1, #0
 800deb2:	b096      	sub	sp, #88	; 0x58
 800deb4:	4614      	mov	r4, r2
 800deb6:	461d      	mov	r5, r3
 800deb8:	da08      	bge.n	800decc <__swhatbuf_r+0x24>
 800deba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800debe:	2200      	movs	r2, #0
 800dec0:	602a      	str	r2, [r5, #0]
 800dec2:	061a      	lsls	r2, r3, #24
 800dec4:	d410      	bmi.n	800dee8 <__swhatbuf_r+0x40>
 800dec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800deca:	e00e      	b.n	800deea <__swhatbuf_r+0x42>
 800decc:	466a      	mov	r2, sp
 800dece:	f000 feef 	bl	800ecb0 <_fstat_r>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	dbf1      	blt.n	800deba <__swhatbuf_r+0x12>
 800ded6:	9a01      	ldr	r2, [sp, #4]
 800ded8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dedc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dee0:	425a      	negs	r2, r3
 800dee2:	415a      	adcs	r2, r3
 800dee4:	602a      	str	r2, [r5, #0]
 800dee6:	e7ee      	b.n	800dec6 <__swhatbuf_r+0x1e>
 800dee8:	2340      	movs	r3, #64	; 0x40
 800deea:	2000      	movs	r0, #0
 800deec:	6023      	str	r3, [r4, #0]
 800deee:	b016      	add	sp, #88	; 0x58
 800def0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800def4 <__smakebuf_r>:
 800def4:	898b      	ldrh	r3, [r1, #12]
 800def6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800def8:	079d      	lsls	r5, r3, #30
 800defa:	4606      	mov	r6, r0
 800defc:	460c      	mov	r4, r1
 800defe:	d507      	bpl.n	800df10 <__smakebuf_r+0x1c>
 800df00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	6123      	str	r3, [r4, #16]
 800df08:	2301      	movs	r3, #1
 800df0a:	6163      	str	r3, [r4, #20]
 800df0c:	b002      	add	sp, #8
 800df0e:	bd70      	pop	{r4, r5, r6, pc}
 800df10:	ab01      	add	r3, sp, #4
 800df12:	466a      	mov	r2, sp
 800df14:	f7ff ffc8 	bl	800dea8 <__swhatbuf_r>
 800df18:	9900      	ldr	r1, [sp, #0]
 800df1a:	4605      	mov	r5, r0
 800df1c:	4630      	mov	r0, r6
 800df1e:	f7fe fa39 	bl	800c394 <_malloc_r>
 800df22:	b948      	cbnz	r0, 800df38 <__smakebuf_r+0x44>
 800df24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df28:	059a      	lsls	r2, r3, #22
 800df2a:	d4ef      	bmi.n	800df0c <__smakebuf_r+0x18>
 800df2c:	f023 0303 	bic.w	r3, r3, #3
 800df30:	f043 0302 	orr.w	r3, r3, #2
 800df34:	81a3      	strh	r3, [r4, #12]
 800df36:	e7e3      	b.n	800df00 <__smakebuf_r+0xc>
 800df38:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <__smakebuf_r+0x7c>)
 800df3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800df3c:	89a3      	ldrh	r3, [r4, #12]
 800df3e:	6020      	str	r0, [r4, #0]
 800df40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df44:	81a3      	strh	r3, [r4, #12]
 800df46:	9b00      	ldr	r3, [sp, #0]
 800df48:	6163      	str	r3, [r4, #20]
 800df4a:	9b01      	ldr	r3, [sp, #4]
 800df4c:	6120      	str	r0, [r4, #16]
 800df4e:	b15b      	cbz	r3, 800df68 <__smakebuf_r+0x74>
 800df50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df54:	4630      	mov	r0, r6
 800df56:	f000 febd 	bl	800ecd4 <_isatty_r>
 800df5a:	b128      	cbz	r0, 800df68 <__smakebuf_r+0x74>
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	f023 0303 	bic.w	r3, r3, #3
 800df62:	f043 0301 	orr.w	r3, r3, #1
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	89a0      	ldrh	r0, [r4, #12]
 800df6a:	4305      	orrs	r5, r0
 800df6c:	81a5      	strh	r5, [r4, #12]
 800df6e:	e7cd      	b.n	800df0c <__smakebuf_r+0x18>
 800df70:	0800c049 	.word	0x0800c049

0800df74 <__malloc_lock>:
 800df74:	4801      	ldr	r0, [pc, #4]	; (800df7c <__malloc_lock+0x8>)
 800df76:	f7fe b95e 	b.w	800c236 <__retarget_lock_acquire_recursive>
 800df7a:	bf00      	nop
 800df7c:	200007a0 	.word	0x200007a0

0800df80 <__malloc_unlock>:
 800df80:	4801      	ldr	r0, [pc, #4]	; (800df88 <__malloc_unlock+0x8>)
 800df82:	f7fe b959 	b.w	800c238 <__retarget_lock_release_recursive>
 800df86:	bf00      	nop
 800df88:	200007a0 	.word	0x200007a0

0800df8c <_Balloc>:
 800df8c:	b570      	push	{r4, r5, r6, lr}
 800df8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df90:	4604      	mov	r4, r0
 800df92:	460d      	mov	r5, r1
 800df94:	b976      	cbnz	r6, 800dfb4 <_Balloc+0x28>
 800df96:	2010      	movs	r0, #16
 800df98:	f7fe f950 	bl	800c23c <malloc>
 800df9c:	4602      	mov	r2, r0
 800df9e:	6260      	str	r0, [r4, #36]	; 0x24
 800dfa0:	b920      	cbnz	r0, 800dfac <_Balloc+0x20>
 800dfa2:	4b18      	ldr	r3, [pc, #96]	; (800e004 <_Balloc+0x78>)
 800dfa4:	4818      	ldr	r0, [pc, #96]	; (800e008 <_Balloc+0x7c>)
 800dfa6:	2166      	movs	r1, #102	; 0x66
 800dfa8:	f000 fe52 	bl	800ec50 <__assert_func>
 800dfac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfb0:	6006      	str	r6, [r0, #0]
 800dfb2:	60c6      	str	r6, [r0, #12]
 800dfb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dfb6:	68f3      	ldr	r3, [r6, #12]
 800dfb8:	b183      	cbz	r3, 800dfdc <_Balloc+0x50>
 800dfba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfc2:	b9b8      	cbnz	r0, 800dff4 <_Balloc+0x68>
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	fa01 f605 	lsl.w	r6, r1, r5
 800dfca:	1d72      	adds	r2, r6, #5
 800dfcc:	0092      	lsls	r2, r2, #2
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 fb60 	bl	800e694 <_calloc_r>
 800dfd4:	b160      	cbz	r0, 800dff0 <_Balloc+0x64>
 800dfd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfda:	e00e      	b.n	800dffa <_Balloc+0x6e>
 800dfdc:	2221      	movs	r2, #33	; 0x21
 800dfde:	2104      	movs	r1, #4
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f000 fb57 	bl	800e694 <_calloc_r>
 800dfe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfe8:	60f0      	str	r0, [r6, #12]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1e4      	bne.n	800dfba <_Balloc+0x2e>
 800dff0:	2000      	movs	r0, #0
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	6802      	ldr	r2, [r0, #0]
 800dff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dffa:	2300      	movs	r3, #0
 800dffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e000:	e7f7      	b.n	800dff2 <_Balloc+0x66>
 800e002:	bf00      	nop
 800e004:	08014089 	.word	0x08014089
 800e008:	0801410c 	.word	0x0801410c

0800e00c <_Bfree>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e010:	4605      	mov	r5, r0
 800e012:	460c      	mov	r4, r1
 800e014:	b976      	cbnz	r6, 800e034 <_Bfree+0x28>
 800e016:	2010      	movs	r0, #16
 800e018:	f7fe f910 	bl	800c23c <malloc>
 800e01c:	4602      	mov	r2, r0
 800e01e:	6268      	str	r0, [r5, #36]	; 0x24
 800e020:	b920      	cbnz	r0, 800e02c <_Bfree+0x20>
 800e022:	4b09      	ldr	r3, [pc, #36]	; (800e048 <_Bfree+0x3c>)
 800e024:	4809      	ldr	r0, [pc, #36]	; (800e04c <_Bfree+0x40>)
 800e026:	218a      	movs	r1, #138	; 0x8a
 800e028:	f000 fe12 	bl	800ec50 <__assert_func>
 800e02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e030:	6006      	str	r6, [r0, #0]
 800e032:	60c6      	str	r6, [r0, #12]
 800e034:	b13c      	cbz	r4, 800e046 <_Bfree+0x3a>
 800e036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e038:	6862      	ldr	r2, [r4, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e040:	6021      	str	r1, [r4, #0]
 800e042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e046:	bd70      	pop	{r4, r5, r6, pc}
 800e048:	08014089 	.word	0x08014089
 800e04c:	0801410c 	.word	0x0801410c

0800e050 <__multadd>:
 800e050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e054:	690d      	ldr	r5, [r1, #16]
 800e056:	4607      	mov	r7, r0
 800e058:	460c      	mov	r4, r1
 800e05a:	461e      	mov	r6, r3
 800e05c:	f101 0c14 	add.w	ip, r1, #20
 800e060:	2000      	movs	r0, #0
 800e062:	f8dc 3000 	ldr.w	r3, [ip]
 800e066:	b299      	uxth	r1, r3
 800e068:	fb02 6101 	mla	r1, r2, r1, r6
 800e06c:	0c1e      	lsrs	r6, r3, #16
 800e06e:	0c0b      	lsrs	r3, r1, #16
 800e070:	fb02 3306 	mla	r3, r2, r6, r3
 800e074:	b289      	uxth	r1, r1
 800e076:	3001      	adds	r0, #1
 800e078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e07c:	4285      	cmp	r5, r0
 800e07e:	f84c 1b04 	str.w	r1, [ip], #4
 800e082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e086:	dcec      	bgt.n	800e062 <__multadd+0x12>
 800e088:	b30e      	cbz	r6, 800e0ce <__multadd+0x7e>
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	42ab      	cmp	r3, r5
 800e08e:	dc19      	bgt.n	800e0c4 <__multadd+0x74>
 800e090:	6861      	ldr	r1, [r4, #4]
 800e092:	4638      	mov	r0, r7
 800e094:	3101      	adds	r1, #1
 800e096:	f7ff ff79 	bl	800df8c <_Balloc>
 800e09a:	4680      	mov	r8, r0
 800e09c:	b928      	cbnz	r0, 800e0aa <__multadd+0x5a>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	4b0c      	ldr	r3, [pc, #48]	; (800e0d4 <__multadd+0x84>)
 800e0a2:	480d      	ldr	r0, [pc, #52]	; (800e0d8 <__multadd+0x88>)
 800e0a4:	21b5      	movs	r1, #181	; 0xb5
 800e0a6:	f000 fdd3 	bl	800ec50 <__assert_func>
 800e0aa:	6922      	ldr	r2, [r4, #16]
 800e0ac:	3202      	adds	r2, #2
 800e0ae:	f104 010c 	add.w	r1, r4, #12
 800e0b2:	0092      	lsls	r2, r2, #2
 800e0b4:	300c      	adds	r0, #12
 800e0b6:	f7fe f8d1 	bl	800c25c <memcpy>
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f7ff ffa5 	bl	800e00c <_Bfree>
 800e0c2:	4644      	mov	r4, r8
 800e0c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0c8:	3501      	adds	r5, #1
 800e0ca:	615e      	str	r6, [r3, #20]
 800e0cc:	6125      	str	r5, [r4, #16]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d4:	080140fb 	.word	0x080140fb
 800e0d8:	0801410c 	.word	0x0801410c

0800e0dc <__hi0bits>:
 800e0dc:	0c03      	lsrs	r3, r0, #16
 800e0de:	041b      	lsls	r3, r3, #16
 800e0e0:	b9d3      	cbnz	r3, 800e118 <__hi0bits+0x3c>
 800e0e2:	0400      	lsls	r0, r0, #16
 800e0e4:	2310      	movs	r3, #16
 800e0e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0ea:	bf04      	itt	eq
 800e0ec:	0200      	lsleq	r0, r0, #8
 800e0ee:	3308      	addeq	r3, #8
 800e0f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0f4:	bf04      	itt	eq
 800e0f6:	0100      	lsleq	r0, r0, #4
 800e0f8:	3304      	addeq	r3, #4
 800e0fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0fe:	bf04      	itt	eq
 800e100:	0080      	lsleq	r0, r0, #2
 800e102:	3302      	addeq	r3, #2
 800e104:	2800      	cmp	r0, #0
 800e106:	db05      	blt.n	800e114 <__hi0bits+0x38>
 800e108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e10c:	f103 0301 	add.w	r3, r3, #1
 800e110:	bf08      	it	eq
 800e112:	2320      	moveq	r3, #32
 800e114:	4618      	mov	r0, r3
 800e116:	4770      	bx	lr
 800e118:	2300      	movs	r3, #0
 800e11a:	e7e4      	b.n	800e0e6 <__hi0bits+0xa>

0800e11c <__lo0bits>:
 800e11c:	6803      	ldr	r3, [r0, #0]
 800e11e:	f013 0207 	ands.w	r2, r3, #7
 800e122:	4601      	mov	r1, r0
 800e124:	d00b      	beq.n	800e13e <__lo0bits+0x22>
 800e126:	07da      	lsls	r2, r3, #31
 800e128:	d423      	bmi.n	800e172 <__lo0bits+0x56>
 800e12a:	0798      	lsls	r0, r3, #30
 800e12c:	bf49      	itett	mi
 800e12e:	085b      	lsrmi	r3, r3, #1
 800e130:	089b      	lsrpl	r3, r3, #2
 800e132:	2001      	movmi	r0, #1
 800e134:	600b      	strmi	r3, [r1, #0]
 800e136:	bf5c      	itt	pl
 800e138:	600b      	strpl	r3, [r1, #0]
 800e13a:	2002      	movpl	r0, #2
 800e13c:	4770      	bx	lr
 800e13e:	b298      	uxth	r0, r3
 800e140:	b9a8      	cbnz	r0, 800e16e <__lo0bits+0x52>
 800e142:	0c1b      	lsrs	r3, r3, #16
 800e144:	2010      	movs	r0, #16
 800e146:	b2da      	uxtb	r2, r3
 800e148:	b90a      	cbnz	r2, 800e14e <__lo0bits+0x32>
 800e14a:	3008      	adds	r0, #8
 800e14c:	0a1b      	lsrs	r3, r3, #8
 800e14e:	071a      	lsls	r2, r3, #28
 800e150:	bf04      	itt	eq
 800e152:	091b      	lsreq	r3, r3, #4
 800e154:	3004      	addeq	r0, #4
 800e156:	079a      	lsls	r2, r3, #30
 800e158:	bf04      	itt	eq
 800e15a:	089b      	lsreq	r3, r3, #2
 800e15c:	3002      	addeq	r0, #2
 800e15e:	07da      	lsls	r2, r3, #31
 800e160:	d403      	bmi.n	800e16a <__lo0bits+0x4e>
 800e162:	085b      	lsrs	r3, r3, #1
 800e164:	f100 0001 	add.w	r0, r0, #1
 800e168:	d005      	beq.n	800e176 <__lo0bits+0x5a>
 800e16a:	600b      	str	r3, [r1, #0]
 800e16c:	4770      	bx	lr
 800e16e:	4610      	mov	r0, r2
 800e170:	e7e9      	b.n	800e146 <__lo0bits+0x2a>
 800e172:	2000      	movs	r0, #0
 800e174:	4770      	bx	lr
 800e176:	2020      	movs	r0, #32
 800e178:	4770      	bx	lr
	...

0800e17c <__i2b>:
 800e17c:	b510      	push	{r4, lr}
 800e17e:	460c      	mov	r4, r1
 800e180:	2101      	movs	r1, #1
 800e182:	f7ff ff03 	bl	800df8c <_Balloc>
 800e186:	4602      	mov	r2, r0
 800e188:	b928      	cbnz	r0, 800e196 <__i2b+0x1a>
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <__i2b+0x24>)
 800e18c:	4805      	ldr	r0, [pc, #20]	; (800e1a4 <__i2b+0x28>)
 800e18e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e192:	f000 fd5d 	bl	800ec50 <__assert_func>
 800e196:	2301      	movs	r3, #1
 800e198:	6144      	str	r4, [r0, #20]
 800e19a:	6103      	str	r3, [r0, #16]
 800e19c:	bd10      	pop	{r4, pc}
 800e19e:	bf00      	nop
 800e1a0:	080140fb 	.word	0x080140fb
 800e1a4:	0801410c 	.word	0x0801410c

0800e1a8 <__multiply>:
 800e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ac:	4691      	mov	r9, r2
 800e1ae:	690a      	ldr	r2, [r1, #16]
 800e1b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	bfb8      	it	lt
 800e1b8:	460b      	movlt	r3, r1
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	bfbc      	itt	lt
 800e1be:	464c      	movlt	r4, r9
 800e1c0:	4699      	movlt	r9, r3
 800e1c2:	6927      	ldr	r7, [r4, #16]
 800e1c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1c8:	68a3      	ldr	r3, [r4, #8]
 800e1ca:	6861      	ldr	r1, [r4, #4]
 800e1cc:	eb07 060a 	add.w	r6, r7, sl
 800e1d0:	42b3      	cmp	r3, r6
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	bfb8      	it	lt
 800e1d6:	3101      	addlt	r1, #1
 800e1d8:	f7ff fed8 	bl	800df8c <_Balloc>
 800e1dc:	b930      	cbnz	r0, 800e1ec <__multiply+0x44>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	4b44      	ldr	r3, [pc, #272]	; (800e2f4 <__multiply+0x14c>)
 800e1e2:	4845      	ldr	r0, [pc, #276]	; (800e2f8 <__multiply+0x150>)
 800e1e4:	f240 115d 	movw	r1, #349	; 0x15d
 800e1e8:	f000 fd32 	bl	800ec50 <__assert_func>
 800e1ec:	f100 0514 	add.w	r5, r0, #20
 800e1f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	4543      	cmp	r3, r8
 800e1fa:	d321      	bcc.n	800e240 <__multiply+0x98>
 800e1fc:	f104 0314 	add.w	r3, r4, #20
 800e200:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e204:	f109 0314 	add.w	r3, r9, #20
 800e208:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e20c:	9202      	str	r2, [sp, #8]
 800e20e:	1b3a      	subs	r2, r7, r4
 800e210:	3a15      	subs	r2, #21
 800e212:	f022 0203 	bic.w	r2, r2, #3
 800e216:	3204      	adds	r2, #4
 800e218:	f104 0115 	add.w	r1, r4, #21
 800e21c:	428f      	cmp	r7, r1
 800e21e:	bf38      	it	cc
 800e220:	2204      	movcc	r2, #4
 800e222:	9201      	str	r2, [sp, #4]
 800e224:	9a02      	ldr	r2, [sp, #8]
 800e226:	9303      	str	r3, [sp, #12]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d80c      	bhi.n	800e246 <__multiply+0x9e>
 800e22c:	2e00      	cmp	r6, #0
 800e22e:	dd03      	ble.n	800e238 <__multiply+0x90>
 800e230:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e234:	2b00      	cmp	r3, #0
 800e236:	d05a      	beq.n	800e2ee <__multiply+0x146>
 800e238:	6106      	str	r6, [r0, #16]
 800e23a:	b005      	add	sp, #20
 800e23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e240:	f843 2b04 	str.w	r2, [r3], #4
 800e244:	e7d8      	b.n	800e1f8 <__multiply+0x50>
 800e246:	f8b3 a000 	ldrh.w	sl, [r3]
 800e24a:	f1ba 0f00 	cmp.w	sl, #0
 800e24e:	d024      	beq.n	800e29a <__multiply+0xf2>
 800e250:	f104 0e14 	add.w	lr, r4, #20
 800e254:	46a9      	mov	r9, r5
 800e256:	f04f 0c00 	mov.w	ip, #0
 800e25a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e25e:	f8d9 1000 	ldr.w	r1, [r9]
 800e262:	fa1f fb82 	uxth.w	fp, r2
 800e266:	b289      	uxth	r1, r1
 800e268:	fb0a 110b 	mla	r1, sl, fp, r1
 800e26c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e270:	f8d9 2000 	ldr.w	r2, [r9]
 800e274:	4461      	add	r1, ip
 800e276:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e27a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e27e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e282:	b289      	uxth	r1, r1
 800e284:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e288:	4577      	cmp	r7, lr
 800e28a:	f849 1b04 	str.w	r1, [r9], #4
 800e28e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e292:	d8e2      	bhi.n	800e25a <__multiply+0xb2>
 800e294:	9a01      	ldr	r2, [sp, #4]
 800e296:	f845 c002 	str.w	ip, [r5, r2]
 800e29a:	9a03      	ldr	r2, [sp, #12]
 800e29c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	f1b9 0f00 	cmp.w	r9, #0
 800e2a6:	d020      	beq.n	800e2ea <__multiply+0x142>
 800e2a8:	6829      	ldr	r1, [r5, #0]
 800e2aa:	f104 0c14 	add.w	ip, r4, #20
 800e2ae:	46ae      	mov	lr, r5
 800e2b0:	f04f 0a00 	mov.w	sl, #0
 800e2b4:	f8bc b000 	ldrh.w	fp, [ip]
 800e2b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2bc:	fb09 220b 	mla	r2, r9, fp, r2
 800e2c0:	4492      	add	sl, r2
 800e2c2:	b289      	uxth	r1, r1
 800e2c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e2c8:	f84e 1b04 	str.w	r1, [lr], #4
 800e2cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2d0:	f8be 1000 	ldrh.w	r1, [lr]
 800e2d4:	0c12      	lsrs	r2, r2, #16
 800e2d6:	fb09 1102 	mla	r1, r9, r2, r1
 800e2da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e2de:	4567      	cmp	r7, ip
 800e2e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2e4:	d8e6      	bhi.n	800e2b4 <__multiply+0x10c>
 800e2e6:	9a01      	ldr	r2, [sp, #4]
 800e2e8:	50a9      	str	r1, [r5, r2]
 800e2ea:	3504      	adds	r5, #4
 800e2ec:	e79a      	b.n	800e224 <__multiply+0x7c>
 800e2ee:	3e01      	subs	r6, #1
 800e2f0:	e79c      	b.n	800e22c <__multiply+0x84>
 800e2f2:	bf00      	nop
 800e2f4:	080140fb 	.word	0x080140fb
 800e2f8:	0801410c 	.word	0x0801410c

0800e2fc <__pow5mult>:
 800e2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e300:	4615      	mov	r5, r2
 800e302:	f012 0203 	ands.w	r2, r2, #3
 800e306:	4606      	mov	r6, r0
 800e308:	460f      	mov	r7, r1
 800e30a:	d007      	beq.n	800e31c <__pow5mult+0x20>
 800e30c:	4c25      	ldr	r4, [pc, #148]	; (800e3a4 <__pow5mult+0xa8>)
 800e30e:	3a01      	subs	r2, #1
 800e310:	2300      	movs	r3, #0
 800e312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e316:	f7ff fe9b 	bl	800e050 <__multadd>
 800e31a:	4607      	mov	r7, r0
 800e31c:	10ad      	asrs	r5, r5, #2
 800e31e:	d03d      	beq.n	800e39c <__pow5mult+0xa0>
 800e320:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e322:	b97c      	cbnz	r4, 800e344 <__pow5mult+0x48>
 800e324:	2010      	movs	r0, #16
 800e326:	f7fd ff89 	bl	800c23c <malloc>
 800e32a:	4602      	mov	r2, r0
 800e32c:	6270      	str	r0, [r6, #36]	; 0x24
 800e32e:	b928      	cbnz	r0, 800e33c <__pow5mult+0x40>
 800e330:	4b1d      	ldr	r3, [pc, #116]	; (800e3a8 <__pow5mult+0xac>)
 800e332:	481e      	ldr	r0, [pc, #120]	; (800e3ac <__pow5mult+0xb0>)
 800e334:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e338:	f000 fc8a 	bl	800ec50 <__assert_func>
 800e33c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e340:	6004      	str	r4, [r0, #0]
 800e342:	60c4      	str	r4, [r0, #12]
 800e344:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e34c:	b94c      	cbnz	r4, 800e362 <__pow5mult+0x66>
 800e34e:	f240 2171 	movw	r1, #625	; 0x271
 800e352:	4630      	mov	r0, r6
 800e354:	f7ff ff12 	bl	800e17c <__i2b>
 800e358:	2300      	movs	r3, #0
 800e35a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e35e:	4604      	mov	r4, r0
 800e360:	6003      	str	r3, [r0, #0]
 800e362:	f04f 0900 	mov.w	r9, #0
 800e366:	07eb      	lsls	r3, r5, #31
 800e368:	d50a      	bpl.n	800e380 <__pow5mult+0x84>
 800e36a:	4639      	mov	r1, r7
 800e36c:	4622      	mov	r2, r4
 800e36e:	4630      	mov	r0, r6
 800e370:	f7ff ff1a 	bl	800e1a8 <__multiply>
 800e374:	4639      	mov	r1, r7
 800e376:	4680      	mov	r8, r0
 800e378:	4630      	mov	r0, r6
 800e37a:	f7ff fe47 	bl	800e00c <_Bfree>
 800e37e:	4647      	mov	r7, r8
 800e380:	106d      	asrs	r5, r5, #1
 800e382:	d00b      	beq.n	800e39c <__pow5mult+0xa0>
 800e384:	6820      	ldr	r0, [r4, #0]
 800e386:	b938      	cbnz	r0, 800e398 <__pow5mult+0x9c>
 800e388:	4622      	mov	r2, r4
 800e38a:	4621      	mov	r1, r4
 800e38c:	4630      	mov	r0, r6
 800e38e:	f7ff ff0b 	bl	800e1a8 <__multiply>
 800e392:	6020      	str	r0, [r4, #0]
 800e394:	f8c0 9000 	str.w	r9, [r0]
 800e398:	4604      	mov	r4, r0
 800e39a:	e7e4      	b.n	800e366 <__pow5mult+0x6a>
 800e39c:	4638      	mov	r0, r7
 800e39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a2:	bf00      	nop
 800e3a4:	08014258 	.word	0x08014258
 800e3a8:	08014089 	.word	0x08014089
 800e3ac:	0801410c 	.word	0x0801410c

0800e3b0 <__lshift>:
 800e3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b4:	460c      	mov	r4, r1
 800e3b6:	6849      	ldr	r1, [r1, #4]
 800e3b8:	6923      	ldr	r3, [r4, #16]
 800e3ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3be:	68a3      	ldr	r3, [r4, #8]
 800e3c0:	4607      	mov	r7, r0
 800e3c2:	4691      	mov	r9, r2
 800e3c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3c8:	f108 0601 	add.w	r6, r8, #1
 800e3cc:	42b3      	cmp	r3, r6
 800e3ce:	db0b      	blt.n	800e3e8 <__lshift+0x38>
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	f7ff fddb 	bl	800df8c <_Balloc>
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	b948      	cbnz	r0, 800e3ee <__lshift+0x3e>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	4b2a      	ldr	r3, [pc, #168]	; (800e488 <__lshift+0xd8>)
 800e3de:	482b      	ldr	r0, [pc, #172]	; (800e48c <__lshift+0xdc>)
 800e3e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3e4:	f000 fc34 	bl	800ec50 <__assert_func>
 800e3e8:	3101      	adds	r1, #1
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	e7ee      	b.n	800e3cc <__lshift+0x1c>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	f100 0114 	add.w	r1, r0, #20
 800e3f4:	f100 0210 	add.w	r2, r0, #16
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	4553      	cmp	r3, sl
 800e3fc:	db37      	blt.n	800e46e <__lshift+0xbe>
 800e3fe:	6920      	ldr	r0, [r4, #16]
 800e400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e404:	f104 0314 	add.w	r3, r4, #20
 800e408:	f019 091f 	ands.w	r9, r9, #31
 800e40c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e414:	d02f      	beq.n	800e476 <__lshift+0xc6>
 800e416:	f1c9 0e20 	rsb	lr, r9, #32
 800e41a:	468a      	mov	sl, r1
 800e41c:	f04f 0c00 	mov.w	ip, #0
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	fa02 f209 	lsl.w	r2, r2, r9
 800e426:	ea42 020c 	orr.w	r2, r2, ip
 800e42a:	f84a 2b04 	str.w	r2, [sl], #4
 800e42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e432:	4298      	cmp	r0, r3
 800e434:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e438:	d8f2      	bhi.n	800e420 <__lshift+0x70>
 800e43a:	1b03      	subs	r3, r0, r4
 800e43c:	3b15      	subs	r3, #21
 800e43e:	f023 0303 	bic.w	r3, r3, #3
 800e442:	3304      	adds	r3, #4
 800e444:	f104 0215 	add.w	r2, r4, #21
 800e448:	4290      	cmp	r0, r2
 800e44a:	bf38      	it	cc
 800e44c:	2304      	movcc	r3, #4
 800e44e:	f841 c003 	str.w	ip, [r1, r3]
 800e452:	f1bc 0f00 	cmp.w	ip, #0
 800e456:	d001      	beq.n	800e45c <__lshift+0xac>
 800e458:	f108 0602 	add.w	r6, r8, #2
 800e45c:	3e01      	subs	r6, #1
 800e45e:	4638      	mov	r0, r7
 800e460:	612e      	str	r6, [r5, #16]
 800e462:	4621      	mov	r1, r4
 800e464:	f7ff fdd2 	bl	800e00c <_Bfree>
 800e468:	4628      	mov	r0, r5
 800e46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e472:	3301      	adds	r3, #1
 800e474:	e7c1      	b.n	800e3fa <__lshift+0x4a>
 800e476:	3904      	subs	r1, #4
 800e478:	f853 2b04 	ldr.w	r2, [r3], #4
 800e47c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e480:	4298      	cmp	r0, r3
 800e482:	d8f9      	bhi.n	800e478 <__lshift+0xc8>
 800e484:	e7ea      	b.n	800e45c <__lshift+0xac>
 800e486:	bf00      	nop
 800e488:	080140fb 	.word	0x080140fb
 800e48c:	0801410c 	.word	0x0801410c

0800e490 <__mcmp>:
 800e490:	b530      	push	{r4, r5, lr}
 800e492:	6902      	ldr	r2, [r0, #16]
 800e494:	690c      	ldr	r4, [r1, #16]
 800e496:	1b12      	subs	r2, r2, r4
 800e498:	d10e      	bne.n	800e4b8 <__mcmp+0x28>
 800e49a:	f100 0314 	add.w	r3, r0, #20
 800e49e:	3114      	adds	r1, #20
 800e4a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4b0:	42a5      	cmp	r5, r4
 800e4b2:	d003      	beq.n	800e4bc <__mcmp+0x2c>
 800e4b4:	d305      	bcc.n	800e4c2 <__mcmp+0x32>
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	bd30      	pop	{r4, r5, pc}
 800e4bc:	4283      	cmp	r3, r0
 800e4be:	d3f3      	bcc.n	800e4a8 <__mcmp+0x18>
 800e4c0:	e7fa      	b.n	800e4b8 <__mcmp+0x28>
 800e4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c6:	e7f7      	b.n	800e4b8 <__mcmp+0x28>

0800e4c8 <__mdiff>:
 800e4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	4690      	mov	r8, r2
 800e4d6:	f7ff ffdb 	bl	800e490 <__mcmp>
 800e4da:	1e05      	subs	r5, r0, #0
 800e4dc:	d110      	bne.n	800e500 <__mdiff+0x38>
 800e4de:	4629      	mov	r1, r5
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff fd53 	bl	800df8c <_Balloc>
 800e4e6:	b930      	cbnz	r0, 800e4f6 <__mdiff+0x2e>
 800e4e8:	4b3a      	ldr	r3, [pc, #232]	; (800e5d4 <__mdiff+0x10c>)
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	f240 2132 	movw	r1, #562	; 0x232
 800e4f0:	4839      	ldr	r0, [pc, #228]	; (800e5d8 <__mdiff+0x110>)
 800e4f2:	f000 fbad 	bl	800ec50 <__assert_func>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e500:	bfa4      	itt	ge
 800e502:	4643      	movge	r3, r8
 800e504:	46a0      	movge	r8, r4
 800e506:	4630      	mov	r0, r6
 800e508:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e50c:	bfa6      	itte	ge
 800e50e:	461c      	movge	r4, r3
 800e510:	2500      	movge	r5, #0
 800e512:	2501      	movlt	r5, #1
 800e514:	f7ff fd3a 	bl	800df8c <_Balloc>
 800e518:	b920      	cbnz	r0, 800e524 <__mdiff+0x5c>
 800e51a:	4b2e      	ldr	r3, [pc, #184]	; (800e5d4 <__mdiff+0x10c>)
 800e51c:	4602      	mov	r2, r0
 800e51e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e522:	e7e5      	b.n	800e4f0 <__mdiff+0x28>
 800e524:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e528:	6926      	ldr	r6, [r4, #16]
 800e52a:	60c5      	str	r5, [r0, #12]
 800e52c:	f104 0914 	add.w	r9, r4, #20
 800e530:	f108 0514 	add.w	r5, r8, #20
 800e534:	f100 0e14 	add.w	lr, r0, #20
 800e538:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e53c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e540:	f108 0210 	add.w	r2, r8, #16
 800e544:	46f2      	mov	sl, lr
 800e546:	2100      	movs	r1, #0
 800e548:	f859 3b04 	ldr.w	r3, [r9], #4
 800e54c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e550:	fa1f f883 	uxth.w	r8, r3
 800e554:	fa11 f18b 	uxtah	r1, r1, fp
 800e558:	0c1b      	lsrs	r3, r3, #16
 800e55a:	eba1 0808 	sub.w	r8, r1, r8
 800e55e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e562:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e566:	fa1f f888 	uxth.w	r8, r8
 800e56a:	1419      	asrs	r1, r3, #16
 800e56c:	454e      	cmp	r6, r9
 800e56e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e572:	f84a 3b04 	str.w	r3, [sl], #4
 800e576:	d8e7      	bhi.n	800e548 <__mdiff+0x80>
 800e578:	1b33      	subs	r3, r6, r4
 800e57a:	3b15      	subs	r3, #21
 800e57c:	f023 0303 	bic.w	r3, r3, #3
 800e580:	3304      	adds	r3, #4
 800e582:	3415      	adds	r4, #21
 800e584:	42a6      	cmp	r6, r4
 800e586:	bf38      	it	cc
 800e588:	2304      	movcc	r3, #4
 800e58a:	441d      	add	r5, r3
 800e58c:	4473      	add	r3, lr
 800e58e:	469e      	mov	lr, r3
 800e590:	462e      	mov	r6, r5
 800e592:	4566      	cmp	r6, ip
 800e594:	d30e      	bcc.n	800e5b4 <__mdiff+0xec>
 800e596:	f10c 0203 	add.w	r2, ip, #3
 800e59a:	1b52      	subs	r2, r2, r5
 800e59c:	f022 0203 	bic.w	r2, r2, #3
 800e5a0:	3d03      	subs	r5, #3
 800e5a2:	45ac      	cmp	ip, r5
 800e5a4:	bf38      	it	cc
 800e5a6:	2200      	movcc	r2, #0
 800e5a8:	441a      	add	r2, r3
 800e5aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5ae:	b17b      	cbz	r3, 800e5d0 <__mdiff+0x108>
 800e5b0:	6107      	str	r7, [r0, #16]
 800e5b2:	e7a3      	b.n	800e4fc <__mdiff+0x34>
 800e5b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5b8:	fa11 f288 	uxtah	r2, r1, r8
 800e5bc:	1414      	asrs	r4, r2, #16
 800e5be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5c2:	b292      	uxth	r2, r2
 800e5c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5c8:	f84e 2b04 	str.w	r2, [lr], #4
 800e5cc:	1421      	asrs	r1, r4, #16
 800e5ce:	e7e0      	b.n	800e592 <__mdiff+0xca>
 800e5d0:	3f01      	subs	r7, #1
 800e5d2:	e7ea      	b.n	800e5aa <__mdiff+0xe2>
 800e5d4:	080140fb 	.word	0x080140fb
 800e5d8:	0801410c 	.word	0x0801410c

0800e5dc <__d2b>:
 800e5dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5e0:	4689      	mov	r9, r1
 800e5e2:	2101      	movs	r1, #1
 800e5e4:	ec57 6b10 	vmov	r6, r7, d0
 800e5e8:	4690      	mov	r8, r2
 800e5ea:	f7ff fccf 	bl	800df8c <_Balloc>
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	b930      	cbnz	r0, 800e600 <__d2b+0x24>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	4b25      	ldr	r3, [pc, #148]	; (800e68c <__d2b+0xb0>)
 800e5f6:	4826      	ldr	r0, [pc, #152]	; (800e690 <__d2b+0xb4>)
 800e5f8:	f240 310a 	movw	r1, #778	; 0x30a
 800e5fc:	f000 fb28 	bl	800ec50 <__assert_func>
 800e600:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e608:	bb35      	cbnz	r5, 800e658 <__d2b+0x7c>
 800e60a:	2e00      	cmp	r6, #0
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	d028      	beq.n	800e662 <__d2b+0x86>
 800e610:	4668      	mov	r0, sp
 800e612:	9600      	str	r6, [sp, #0]
 800e614:	f7ff fd82 	bl	800e11c <__lo0bits>
 800e618:	9900      	ldr	r1, [sp, #0]
 800e61a:	b300      	cbz	r0, 800e65e <__d2b+0x82>
 800e61c:	9a01      	ldr	r2, [sp, #4]
 800e61e:	f1c0 0320 	rsb	r3, r0, #32
 800e622:	fa02 f303 	lsl.w	r3, r2, r3
 800e626:	430b      	orrs	r3, r1
 800e628:	40c2      	lsrs	r2, r0
 800e62a:	6163      	str	r3, [r4, #20]
 800e62c:	9201      	str	r2, [sp, #4]
 800e62e:	9b01      	ldr	r3, [sp, #4]
 800e630:	61a3      	str	r3, [r4, #24]
 800e632:	2b00      	cmp	r3, #0
 800e634:	bf14      	ite	ne
 800e636:	2202      	movne	r2, #2
 800e638:	2201      	moveq	r2, #1
 800e63a:	6122      	str	r2, [r4, #16]
 800e63c:	b1d5      	cbz	r5, 800e674 <__d2b+0x98>
 800e63e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e642:	4405      	add	r5, r0
 800e644:	f8c9 5000 	str.w	r5, [r9]
 800e648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e64c:	f8c8 0000 	str.w	r0, [r8]
 800e650:	4620      	mov	r0, r4
 800e652:	b003      	add	sp, #12
 800e654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e65c:	e7d5      	b.n	800e60a <__d2b+0x2e>
 800e65e:	6161      	str	r1, [r4, #20]
 800e660:	e7e5      	b.n	800e62e <__d2b+0x52>
 800e662:	a801      	add	r0, sp, #4
 800e664:	f7ff fd5a 	bl	800e11c <__lo0bits>
 800e668:	9b01      	ldr	r3, [sp, #4]
 800e66a:	6163      	str	r3, [r4, #20]
 800e66c:	2201      	movs	r2, #1
 800e66e:	6122      	str	r2, [r4, #16]
 800e670:	3020      	adds	r0, #32
 800e672:	e7e3      	b.n	800e63c <__d2b+0x60>
 800e674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e67c:	f8c9 0000 	str.w	r0, [r9]
 800e680:	6918      	ldr	r0, [r3, #16]
 800e682:	f7ff fd2b 	bl	800e0dc <__hi0bits>
 800e686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e68a:	e7df      	b.n	800e64c <__d2b+0x70>
 800e68c:	080140fb 	.word	0x080140fb
 800e690:	0801410c 	.word	0x0801410c

0800e694 <_calloc_r>:
 800e694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e696:	fba1 2402 	umull	r2, r4, r1, r2
 800e69a:	b94c      	cbnz	r4, 800e6b0 <_calloc_r+0x1c>
 800e69c:	4611      	mov	r1, r2
 800e69e:	9201      	str	r2, [sp, #4]
 800e6a0:	f7fd fe78 	bl	800c394 <_malloc_r>
 800e6a4:	9a01      	ldr	r2, [sp, #4]
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	b930      	cbnz	r0, 800e6b8 <_calloc_r+0x24>
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	b003      	add	sp, #12
 800e6ae:	bd30      	pop	{r4, r5, pc}
 800e6b0:	220c      	movs	r2, #12
 800e6b2:	6002      	str	r2, [r0, #0]
 800e6b4:	2500      	movs	r5, #0
 800e6b6:	e7f8      	b.n	800e6aa <_calloc_r+0x16>
 800e6b8:	4621      	mov	r1, r4
 800e6ba:	f7fd fdf7 	bl	800c2ac <memset>
 800e6be:	e7f4      	b.n	800e6aa <_calloc_r+0x16>

0800e6c0 <__ssputs_r>:
 800e6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c4:	688e      	ldr	r6, [r1, #8]
 800e6c6:	429e      	cmp	r6, r3
 800e6c8:	4682      	mov	sl, r0
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	4690      	mov	r8, r2
 800e6ce:	461f      	mov	r7, r3
 800e6d0:	d838      	bhi.n	800e744 <__ssputs_r+0x84>
 800e6d2:	898a      	ldrh	r2, [r1, #12]
 800e6d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6d8:	d032      	beq.n	800e740 <__ssputs_r+0x80>
 800e6da:	6825      	ldr	r5, [r4, #0]
 800e6dc:	6909      	ldr	r1, [r1, #16]
 800e6de:	eba5 0901 	sub.w	r9, r5, r1
 800e6e2:	6965      	ldr	r5, [r4, #20]
 800e6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	444b      	add	r3, r9
 800e6f0:	106d      	asrs	r5, r5, #1
 800e6f2:	429d      	cmp	r5, r3
 800e6f4:	bf38      	it	cc
 800e6f6:	461d      	movcc	r5, r3
 800e6f8:	0553      	lsls	r3, r2, #21
 800e6fa:	d531      	bpl.n	800e760 <__ssputs_r+0xa0>
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	f7fd fe49 	bl	800c394 <_malloc_r>
 800e702:	4606      	mov	r6, r0
 800e704:	b950      	cbnz	r0, 800e71c <__ssputs_r+0x5c>
 800e706:	230c      	movs	r3, #12
 800e708:	f8ca 3000 	str.w	r3, [sl]
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e712:	81a3      	strh	r3, [r4, #12]
 800e714:	f04f 30ff 	mov.w	r0, #4294967295
 800e718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e71c:	6921      	ldr	r1, [r4, #16]
 800e71e:	464a      	mov	r2, r9
 800e720:	f7fd fd9c 	bl	800c25c <memcpy>
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e72e:	81a3      	strh	r3, [r4, #12]
 800e730:	6126      	str	r6, [r4, #16]
 800e732:	6165      	str	r5, [r4, #20]
 800e734:	444e      	add	r6, r9
 800e736:	eba5 0509 	sub.w	r5, r5, r9
 800e73a:	6026      	str	r6, [r4, #0]
 800e73c:	60a5      	str	r5, [r4, #8]
 800e73e:	463e      	mov	r6, r7
 800e740:	42be      	cmp	r6, r7
 800e742:	d900      	bls.n	800e746 <__ssputs_r+0x86>
 800e744:	463e      	mov	r6, r7
 800e746:	6820      	ldr	r0, [r4, #0]
 800e748:	4632      	mov	r2, r6
 800e74a:	4641      	mov	r1, r8
 800e74c:	f7fd fd94 	bl	800c278 <memmove>
 800e750:	68a3      	ldr	r3, [r4, #8]
 800e752:	1b9b      	subs	r3, r3, r6
 800e754:	60a3      	str	r3, [r4, #8]
 800e756:	6823      	ldr	r3, [r4, #0]
 800e758:	4433      	add	r3, r6
 800e75a:	6023      	str	r3, [r4, #0]
 800e75c:	2000      	movs	r0, #0
 800e75e:	e7db      	b.n	800e718 <__ssputs_r+0x58>
 800e760:	462a      	mov	r2, r5
 800e762:	f000 fad9 	bl	800ed18 <_realloc_r>
 800e766:	4606      	mov	r6, r0
 800e768:	2800      	cmp	r0, #0
 800e76a:	d1e1      	bne.n	800e730 <__ssputs_r+0x70>
 800e76c:	6921      	ldr	r1, [r4, #16]
 800e76e:	4650      	mov	r0, sl
 800e770:	f7fd fda4 	bl	800c2bc <_free_r>
 800e774:	e7c7      	b.n	800e706 <__ssputs_r+0x46>
	...

0800e778 <_svfiprintf_r>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	4698      	mov	r8, r3
 800e77e:	898b      	ldrh	r3, [r1, #12]
 800e780:	061b      	lsls	r3, r3, #24
 800e782:	b09d      	sub	sp, #116	; 0x74
 800e784:	4607      	mov	r7, r0
 800e786:	460d      	mov	r5, r1
 800e788:	4614      	mov	r4, r2
 800e78a:	d50e      	bpl.n	800e7aa <_svfiprintf_r+0x32>
 800e78c:	690b      	ldr	r3, [r1, #16]
 800e78e:	b963      	cbnz	r3, 800e7aa <_svfiprintf_r+0x32>
 800e790:	2140      	movs	r1, #64	; 0x40
 800e792:	f7fd fdff 	bl	800c394 <_malloc_r>
 800e796:	6028      	str	r0, [r5, #0]
 800e798:	6128      	str	r0, [r5, #16]
 800e79a:	b920      	cbnz	r0, 800e7a6 <_svfiprintf_r+0x2e>
 800e79c:	230c      	movs	r3, #12
 800e79e:	603b      	str	r3, [r7, #0]
 800e7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a4:	e0d1      	b.n	800e94a <_svfiprintf_r+0x1d2>
 800e7a6:	2340      	movs	r3, #64	; 0x40
 800e7a8:	616b      	str	r3, [r5, #20]
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e7ae:	2320      	movs	r3, #32
 800e7b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7b8:	2330      	movs	r3, #48	; 0x30
 800e7ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e964 <_svfiprintf_r+0x1ec>
 800e7be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7c2:	f04f 0901 	mov.w	r9, #1
 800e7c6:	4623      	mov	r3, r4
 800e7c8:	469a      	mov	sl, r3
 800e7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7ce:	b10a      	cbz	r2, 800e7d4 <_svfiprintf_r+0x5c>
 800e7d0:	2a25      	cmp	r2, #37	; 0x25
 800e7d2:	d1f9      	bne.n	800e7c8 <_svfiprintf_r+0x50>
 800e7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800e7d8:	d00b      	beq.n	800e7f2 <_svfiprintf_r+0x7a>
 800e7da:	465b      	mov	r3, fp
 800e7dc:	4622      	mov	r2, r4
 800e7de:	4629      	mov	r1, r5
 800e7e0:	4638      	mov	r0, r7
 800e7e2:	f7ff ff6d 	bl	800e6c0 <__ssputs_r>
 800e7e6:	3001      	adds	r0, #1
 800e7e8:	f000 80aa 	beq.w	800e940 <_svfiprintf_r+0x1c8>
 800e7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7ee:	445a      	add	r2, fp
 800e7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800e7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f000 80a2 	beq.w	800e940 <_svfiprintf_r+0x1c8>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e806:	f10a 0a01 	add.w	sl, sl, #1
 800e80a:	9304      	str	r3, [sp, #16]
 800e80c:	9307      	str	r3, [sp, #28]
 800e80e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e812:	931a      	str	r3, [sp, #104]	; 0x68
 800e814:	4654      	mov	r4, sl
 800e816:	2205      	movs	r2, #5
 800e818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e81c:	4851      	ldr	r0, [pc, #324]	; (800e964 <_svfiprintf_r+0x1ec>)
 800e81e:	f7f1 fcb7 	bl	8000190 <memchr>
 800e822:	9a04      	ldr	r2, [sp, #16]
 800e824:	b9d8      	cbnz	r0, 800e85e <_svfiprintf_r+0xe6>
 800e826:	06d0      	lsls	r0, r2, #27
 800e828:	bf44      	itt	mi
 800e82a:	2320      	movmi	r3, #32
 800e82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e830:	0711      	lsls	r1, r2, #28
 800e832:	bf44      	itt	mi
 800e834:	232b      	movmi	r3, #43	; 0x2b
 800e836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e83a:	f89a 3000 	ldrb.w	r3, [sl]
 800e83e:	2b2a      	cmp	r3, #42	; 0x2a
 800e840:	d015      	beq.n	800e86e <_svfiprintf_r+0xf6>
 800e842:	9a07      	ldr	r2, [sp, #28]
 800e844:	4654      	mov	r4, sl
 800e846:	2000      	movs	r0, #0
 800e848:	f04f 0c0a 	mov.w	ip, #10
 800e84c:	4621      	mov	r1, r4
 800e84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e852:	3b30      	subs	r3, #48	; 0x30
 800e854:	2b09      	cmp	r3, #9
 800e856:	d94e      	bls.n	800e8f6 <_svfiprintf_r+0x17e>
 800e858:	b1b0      	cbz	r0, 800e888 <_svfiprintf_r+0x110>
 800e85a:	9207      	str	r2, [sp, #28]
 800e85c:	e014      	b.n	800e888 <_svfiprintf_r+0x110>
 800e85e:	eba0 0308 	sub.w	r3, r0, r8
 800e862:	fa09 f303 	lsl.w	r3, r9, r3
 800e866:	4313      	orrs	r3, r2
 800e868:	9304      	str	r3, [sp, #16]
 800e86a:	46a2      	mov	sl, r4
 800e86c:	e7d2      	b.n	800e814 <_svfiprintf_r+0x9c>
 800e86e:	9b03      	ldr	r3, [sp, #12]
 800e870:	1d19      	adds	r1, r3, #4
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	9103      	str	r1, [sp, #12]
 800e876:	2b00      	cmp	r3, #0
 800e878:	bfbb      	ittet	lt
 800e87a:	425b      	neglt	r3, r3
 800e87c:	f042 0202 	orrlt.w	r2, r2, #2
 800e880:	9307      	strge	r3, [sp, #28]
 800e882:	9307      	strlt	r3, [sp, #28]
 800e884:	bfb8      	it	lt
 800e886:	9204      	strlt	r2, [sp, #16]
 800e888:	7823      	ldrb	r3, [r4, #0]
 800e88a:	2b2e      	cmp	r3, #46	; 0x2e
 800e88c:	d10c      	bne.n	800e8a8 <_svfiprintf_r+0x130>
 800e88e:	7863      	ldrb	r3, [r4, #1]
 800e890:	2b2a      	cmp	r3, #42	; 0x2a
 800e892:	d135      	bne.n	800e900 <_svfiprintf_r+0x188>
 800e894:	9b03      	ldr	r3, [sp, #12]
 800e896:	1d1a      	adds	r2, r3, #4
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	9203      	str	r2, [sp, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	bfb8      	it	lt
 800e8a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8a4:	3402      	adds	r4, #2
 800e8a6:	9305      	str	r3, [sp, #20]
 800e8a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e974 <_svfiprintf_r+0x1fc>
 800e8ac:	7821      	ldrb	r1, [r4, #0]
 800e8ae:	2203      	movs	r2, #3
 800e8b0:	4650      	mov	r0, sl
 800e8b2:	f7f1 fc6d 	bl	8000190 <memchr>
 800e8b6:	b140      	cbz	r0, 800e8ca <_svfiprintf_r+0x152>
 800e8b8:	2340      	movs	r3, #64	; 0x40
 800e8ba:	eba0 000a 	sub.w	r0, r0, sl
 800e8be:	fa03 f000 	lsl.w	r0, r3, r0
 800e8c2:	9b04      	ldr	r3, [sp, #16]
 800e8c4:	4303      	orrs	r3, r0
 800e8c6:	3401      	adds	r4, #1
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ce:	4826      	ldr	r0, [pc, #152]	; (800e968 <_svfiprintf_r+0x1f0>)
 800e8d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8d4:	2206      	movs	r2, #6
 800e8d6:	f7f1 fc5b 	bl	8000190 <memchr>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d038      	beq.n	800e950 <_svfiprintf_r+0x1d8>
 800e8de:	4b23      	ldr	r3, [pc, #140]	; (800e96c <_svfiprintf_r+0x1f4>)
 800e8e0:	bb1b      	cbnz	r3, 800e92a <_svfiprintf_r+0x1b2>
 800e8e2:	9b03      	ldr	r3, [sp, #12]
 800e8e4:	3307      	adds	r3, #7
 800e8e6:	f023 0307 	bic.w	r3, r3, #7
 800e8ea:	3308      	adds	r3, #8
 800e8ec:	9303      	str	r3, [sp, #12]
 800e8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f0:	4433      	add	r3, r6
 800e8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f4:	e767      	b.n	800e7c6 <_svfiprintf_r+0x4e>
 800e8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	2001      	movs	r0, #1
 800e8fe:	e7a5      	b.n	800e84c <_svfiprintf_r+0xd4>
 800e900:	2300      	movs	r3, #0
 800e902:	3401      	adds	r4, #1
 800e904:	9305      	str	r3, [sp, #20]
 800e906:	4619      	mov	r1, r3
 800e908:	f04f 0c0a 	mov.w	ip, #10
 800e90c:	4620      	mov	r0, r4
 800e90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e912:	3a30      	subs	r2, #48	; 0x30
 800e914:	2a09      	cmp	r2, #9
 800e916:	d903      	bls.n	800e920 <_svfiprintf_r+0x1a8>
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d0c5      	beq.n	800e8a8 <_svfiprintf_r+0x130>
 800e91c:	9105      	str	r1, [sp, #20]
 800e91e:	e7c3      	b.n	800e8a8 <_svfiprintf_r+0x130>
 800e920:	fb0c 2101 	mla	r1, ip, r1, r2
 800e924:	4604      	mov	r4, r0
 800e926:	2301      	movs	r3, #1
 800e928:	e7f0      	b.n	800e90c <_svfiprintf_r+0x194>
 800e92a:	ab03      	add	r3, sp, #12
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	462a      	mov	r2, r5
 800e930:	4b0f      	ldr	r3, [pc, #60]	; (800e970 <_svfiprintf_r+0x1f8>)
 800e932:	a904      	add	r1, sp, #16
 800e934:	4638      	mov	r0, r7
 800e936:	f7fd fe41 	bl	800c5bc <_printf_float>
 800e93a:	1c42      	adds	r2, r0, #1
 800e93c:	4606      	mov	r6, r0
 800e93e:	d1d6      	bne.n	800e8ee <_svfiprintf_r+0x176>
 800e940:	89ab      	ldrh	r3, [r5, #12]
 800e942:	065b      	lsls	r3, r3, #25
 800e944:	f53f af2c 	bmi.w	800e7a0 <_svfiprintf_r+0x28>
 800e948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e94a:	b01d      	add	sp, #116	; 0x74
 800e94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e950:	ab03      	add	r3, sp, #12
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	462a      	mov	r2, r5
 800e956:	4b06      	ldr	r3, [pc, #24]	; (800e970 <_svfiprintf_r+0x1f8>)
 800e958:	a904      	add	r1, sp, #16
 800e95a:	4638      	mov	r0, r7
 800e95c:	f7fe f8d2 	bl	800cb04 <_printf_i>
 800e960:	e7eb      	b.n	800e93a <_svfiprintf_r+0x1c2>
 800e962:	bf00      	nop
 800e964:	08014264 	.word	0x08014264
 800e968:	0801426e 	.word	0x0801426e
 800e96c:	0800c5bd 	.word	0x0800c5bd
 800e970:	0800e6c1 	.word	0x0800e6c1
 800e974:	0801426a 	.word	0x0801426a

0800e978 <__sfputc_r>:
 800e978:	6893      	ldr	r3, [r2, #8]
 800e97a:	3b01      	subs	r3, #1
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	b410      	push	{r4}
 800e980:	6093      	str	r3, [r2, #8]
 800e982:	da08      	bge.n	800e996 <__sfputc_r+0x1e>
 800e984:	6994      	ldr	r4, [r2, #24]
 800e986:	42a3      	cmp	r3, r4
 800e988:	db01      	blt.n	800e98e <__sfputc_r+0x16>
 800e98a:	290a      	cmp	r1, #10
 800e98c:	d103      	bne.n	800e996 <__sfputc_r+0x1e>
 800e98e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e992:	f7fe bb17 	b.w	800cfc4 <__swbuf_r>
 800e996:	6813      	ldr	r3, [r2, #0]
 800e998:	1c58      	adds	r0, r3, #1
 800e99a:	6010      	str	r0, [r2, #0]
 800e99c:	7019      	strb	r1, [r3, #0]
 800e99e:	4608      	mov	r0, r1
 800e9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9a4:	4770      	bx	lr

0800e9a6 <__sfputs_r>:
 800e9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	460f      	mov	r7, r1
 800e9ac:	4614      	mov	r4, r2
 800e9ae:	18d5      	adds	r5, r2, r3
 800e9b0:	42ac      	cmp	r4, r5
 800e9b2:	d101      	bne.n	800e9b8 <__sfputs_r+0x12>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	e007      	b.n	800e9c8 <__sfputs_r+0x22>
 800e9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9bc:	463a      	mov	r2, r7
 800e9be:	4630      	mov	r0, r6
 800e9c0:	f7ff ffda 	bl	800e978 <__sfputc_r>
 800e9c4:	1c43      	adds	r3, r0, #1
 800e9c6:	d1f3      	bne.n	800e9b0 <__sfputs_r+0xa>
 800e9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9cc <_vfiprintf_r>:
 800e9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d0:	460d      	mov	r5, r1
 800e9d2:	b09d      	sub	sp, #116	; 0x74
 800e9d4:	4614      	mov	r4, r2
 800e9d6:	4698      	mov	r8, r3
 800e9d8:	4606      	mov	r6, r0
 800e9da:	b118      	cbz	r0, 800e9e4 <_vfiprintf_r+0x18>
 800e9dc:	6983      	ldr	r3, [r0, #24]
 800e9de:	b90b      	cbnz	r3, 800e9e4 <_vfiprintf_r+0x18>
 800e9e0:	f7fd fb66 	bl	800c0b0 <__sinit>
 800e9e4:	4b89      	ldr	r3, [pc, #548]	; (800ec0c <_vfiprintf_r+0x240>)
 800e9e6:	429d      	cmp	r5, r3
 800e9e8:	d11b      	bne.n	800ea22 <_vfiprintf_r+0x56>
 800e9ea:	6875      	ldr	r5, [r6, #4]
 800e9ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9ee:	07d9      	lsls	r1, r3, #31
 800e9f0:	d405      	bmi.n	800e9fe <_vfiprintf_r+0x32>
 800e9f2:	89ab      	ldrh	r3, [r5, #12]
 800e9f4:	059a      	lsls	r2, r3, #22
 800e9f6:	d402      	bmi.n	800e9fe <_vfiprintf_r+0x32>
 800e9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9fa:	f7fd fc1c 	bl	800c236 <__retarget_lock_acquire_recursive>
 800e9fe:	89ab      	ldrh	r3, [r5, #12]
 800ea00:	071b      	lsls	r3, r3, #28
 800ea02:	d501      	bpl.n	800ea08 <_vfiprintf_r+0x3c>
 800ea04:	692b      	ldr	r3, [r5, #16]
 800ea06:	b9eb      	cbnz	r3, 800ea44 <_vfiprintf_r+0x78>
 800ea08:	4629      	mov	r1, r5
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	f7fe fb3e 	bl	800d08c <__swsetup_r>
 800ea10:	b1c0      	cbz	r0, 800ea44 <_vfiprintf_r+0x78>
 800ea12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea14:	07dc      	lsls	r4, r3, #31
 800ea16:	d50e      	bpl.n	800ea36 <_vfiprintf_r+0x6a>
 800ea18:	f04f 30ff 	mov.w	r0, #4294967295
 800ea1c:	b01d      	add	sp, #116	; 0x74
 800ea1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea22:	4b7b      	ldr	r3, [pc, #492]	; (800ec10 <_vfiprintf_r+0x244>)
 800ea24:	429d      	cmp	r5, r3
 800ea26:	d101      	bne.n	800ea2c <_vfiprintf_r+0x60>
 800ea28:	68b5      	ldr	r5, [r6, #8]
 800ea2a:	e7df      	b.n	800e9ec <_vfiprintf_r+0x20>
 800ea2c:	4b79      	ldr	r3, [pc, #484]	; (800ec14 <_vfiprintf_r+0x248>)
 800ea2e:	429d      	cmp	r5, r3
 800ea30:	bf08      	it	eq
 800ea32:	68f5      	ldreq	r5, [r6, #12]
 800ea34:	e7da      	b.n	800e9ec <_vfiprintf_r+0x20>
 800ea36:	89ab      	ldrh	r3, [r5, #12]
 800ea38:	0598      	lsls	r0, r3, #22
 800ea3a:	d4ed      	bmi.n	800ea18 <_vfiprintf_r+0x4c>
 800ea3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea3e:	f7fd fbfb 	bl	800c238 <__retarget_lock_release_recursive>
 800ea42:	e7e9      	b.n	800ea18 <_vfiprintf_r+0x4c>
 800ea44:	2300      	movs	r3, #0
 800ea46:	9309      	str	r3, [sp, #36]	; 0x24
 800ea48:	2320      	movs	r3, #32
 800ea4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea52:	2330      	movs	r3, #48	; 0x30
 800ea54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ec18 <_vfiprintf_r+0x24c>
 800ea58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea5c:	f04f 0901 	mov.w	r9, #1
 800ea60:	4623      	mov	r3, r4
 800ea62:	469a      	mov	sl, r3
 800ea64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea68:	b10a      	cbz	r2, 800ea6e <_vfiprintf_r+0xa2>
 800ea6a:	2a25      	cmp	r2, #37	; 0x25
 800ea6c:	d1f9      	bne.n	800ea62 <_vfiprintf_r+0x96>
 800ea6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ea72:	d00b      	beq.n	800ea8c <_vfiprintf_r+0xc0>
 800ea74:	465b      	mov	r3, fp
 800ea76:	4622      	mov	r2, r4
 800ea78:	4629      	mov	r1, r5
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f7ff ff93 	bl	800e9a6 <__sfputs_r>
 800ea80:	3001      	adds	r0, #1
 800ea82:	f000 80aa 	beq.w	800ebda <_vfiprintf_r+0x20e>
 800ea86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea88:	445a      	add	r2, fp
 800ea8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ea8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f000 80a2 	beq.w	800ebda <_vfiprintf_r+0x20e>
 800ea96:	2300      	movs	r3, #0
 800ea98:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaa0:	f10a 0a01 	add.w	sl, sl, #1
 800eaa4:	9304      	str	r3, [sp, #16]
 800eaa6:	9307      	str	r3, [sp, #28]
 800eaa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaac:	931a      	str	r3, [sp, #104]	; 0x68
 800eaae:	4654      	mov	r4, sl
 800eab0:	2205      	movs	r2, #5
 800eab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab6:	4858      	ldr	r0, [pc, #352]	; (800ec18 <_vfiprintf_r+0x24c>)
 800eab8:	f7f1 fb6a 	bl	8000190 <memchr>
 800eabc:	9a04      	ldr	r2, [sp, #16]
 800eabe:	b9d8      	cbnz	r0, 800eaf8 <_vfiprintf_r+0x12c>
 800eac0:	06d1      	lsls	r1, r2, #27
 800eac2:	bf44      	itt	mi
 800eac4:	2320      	movmi	r3, #32
 800eac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaca:	0713      	lsls	r3, r2, #28
 800eacc:	bf44      	itt	mi
 800eace:	232b      	movmi	r3, #43	; 0x2b
 800ead0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ead4:	f89a 3000 	ldrb.w	r3, [sl]
 800ead8:	2b2a      	cmp	r3, #42	; 0x2a
 800eada:	d015      	beq.n	800eb08 <_vfiprintf_r+0x13c>
 800eadc:	9a07      	ldr	r2, [sp, #28]
 800eade:	4654      	mov	r4, sl
 800eae0:	2000      	movs	r0, #0
 800eae2:	f04f 0c0a 	mov.w	ip, #10
 800eae6:	4621      	mov	r1, r4
 800eae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaec:	3b30      	subs	r3, #48	; 0x30
 800eaee:	2b09      	cmp	r3, #9
 800eaf0:	d94e      	bls.n	800eb90 <_vfiprintf_r+0x1c4>
 800eaf2:	b1b0      	cbz	r0, 800eb22 <_vfiprintf_r+0x156>
 800eaf4:	9207      	str	r2, [sp, #28]
 800eaf6:	e014      	b.n	800eb22 <_vfiprintf_r+0x156>
 800eaf8:	eba0 0308 	sub.w	r3, r0, r8
 800eafc:	fa09 f303 	lsl.w	r3, r9, r3
 800eb00:	4313      	orrs	r3, r2
 800eb02:	9304      	str	r3, [sp, #16]
 800eb04:	46a2      	mov	sl, r4
 800eb06:	e7d2      	b.n	800eaae <_vfiprintf_r+0xe2>
 800eb08:	9b03      	ldr	r3, [sp, #12]
 800eb0a:	1d19      	adds	r1, r3, #4
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	9103      	str	r1, [sp, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	bfbb      	ittet	lt
 800eb14:	425b      	neglt	r3, r3
 800eb16:	f042 0202 	orrlt.w	r2, r2, #2
 800eb1a:	9307      	strge	r3, [sp, #28]
 800eb1c:	9307      	strlt	r3, [sp, #28]
 800eb1e:	bfb8      	it	lt
 800eb20:	9204      	strlt	r2, [sp, #16]
 800eb22:	7823      	ldrb	r3, [r4, #0]
 800eb24:	2b2e      	cmp	r3, #46	; 0x2e
 800eb26:	d10c      	bne.n	800eb42 <_vfiprintf_r+0x176>
 800eb28:	7863      	ldrb	r3, [r4, #1]
 800eb2a:	2b2a      	cmp	r3, #42	; 0x2a
 800eb2c:	d135      	bne.n	800eb9a <_vfiprintf_r+0x1ce>
 800eb2e:	9b03      	ldr	r3, [sp, #12]
 800eb30:	1d1a      	adds	r2, r3, #4
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	9203      	str	r2, [sp, #12]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	bfb8      	it	lt
 800eb3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb3e:	3402      	adds	r4, #2
 800eb40:	9305      	str	r3, [sp, #20]
 800eb42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec28 <_vfiprintf_r+0x25c>
 800eb46:	7821      	ldrb	r1, [r4, #0]
 800eb48:	2203      	movs	r2, #3
 800eb4a:	4650      	mov	r0, sl
 800eb4c:	f7f1 fb20 	bl	8000190 <memchr>
 800eb50:	b140      	cbz	r0, 800eb64 <_vfiprintf_r+0x198>
 800eb52:	2340      	movs	r3, #64	; 0x40
 800eb54:	eba0 000a 	sub.w	r0, r0, sl
 800eb58:	fa03 f000 	lsl.w	r0, r3, r0
 800eb5c:	9b04      	ldr	r3, [sp, #16]
 800eb5e:	4303      	orrs	r3, r0
 800eb60:	3401      	adds	r4, #1
 800eb62:	9304      	str	r3, [sp, #16]
 800eb64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb68:	482c      	ldr	r0, [pc, #176]	; (800ec1c <_vfiprintf_r+0x250>)
 800eb6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb6e:	2206      	movs	r2, #6
 800eb70:	f7f1 fb0e 	bl	8000190 <memchr>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d03f      	beq.n	800ebf8 <_vfiprintf_r+0x22c>
 800eb78:	4b29      	ldr	r3, [pc, #164]	; (800ec20 <_vfiprintf_r+0x254>)
 800eb7a:	bb1b      	cbnz	r3, 800ebc4 <_vfiprintf_r+0x1f8>
 800eb7c:	9b03      	ldr	r3, [sp, #12]
 800eb7e:	3307      	adds	r3, #7
 800eb80:	f023 0307 	bic.w	r3, r3, #7
 800eb84:	3308      	adds	r3, #8
 800eb86:	9303      	str	r3, [sp, #12]
 800eb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb8a:	443b      	add	r3, r7
 800eb8c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb8e:	e767      	b.n	800ea60 <_vfiprintf_r+0x94>
 800eb90:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb94:	460c      	mov	r4, r1
 800eb96:	2001      	movs	r0, #1
 800eb98:	e7a5      	b.n	800eae6 <_vfiprintf_r+0x11a>
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	3401      	adds	r4, #1
 800eb9e:	9305      	str	r3, [sp, #20]
 800eba0:	4619      	mov	r1, r3
 800eba2:	f04f 0c0a 	mov.w	ip, #10
 800eba6:	4620      	mov	r0, r4
 800eba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebac:	3a30      	subs	r2, #48	; 0x30
 800ebae:	2a09      	cmp	r2, #9
 800ebb0:	d903      	bls.n	800ebba <_vfiprintf_r+0x1ee>
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d0c5      	beq.n	800eb42 <_vfiprintf_r+0x176>
 800ebb6:	9105      	str	r1, [sp, #20]
 800ebb8:	e7c3      	b.n	800eb42 <_vfiprintf_r+0x176>
 800ebba:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e7f0      	b.n	800eba6 <_vfiprintf_r+0x1da>
 800ebc4:	ab03      	add	r3, sp, #12
 800ebc6:	9300      	str	r3, [sp, #0]
 800ebc8:	462a      	mov	r2, r5
 800ebca:	4b16      	ldr	r3, [pc, #88]	; (800ec24 <_vfiprintf_r+0x258>)
 800ebcc:	a904      	add	r1, sp, #16
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f7fd fcf4 	bl	800c5bc <_printf_float>
 800ebd4:	4607      	mov	r7, r0
 800ebd6:	1c78      	adds	r0, r7, #1
 800ebd8:	d1d6      	bne.n	800eb88 <_vfiprintf_r+0x1bc>
 800ebda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebdc:	07d9      	lsls	r1, r3, #31
 800ebde:	d405      	bmi.n	800ebec <_vfiprintf_r+0x220>
 800ebe0:	89ab      	ldrh	r3, [r5, #12]
 800ebe2:	059a      	lsls	r2, r3, #22
 800ebe4:	d402      	bmi.n	800ebec <_vfiprintf_r+0x220>
 800ebe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebe8:	f7fd fb26 	bl	800c238 <__retarget_lock_release_recursive>
 800ebec:	89ab      	ldrh	r3, [r5, #12]
 800ebee:	065b      	lsls	r3, r3, #25
 800ebf0:	f53f af12 	bmi.w	800ea18 <_vfiprintf_r+0x4c>
 800ebf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebf6:	e711      	b.n	800ea1c <_vfiprintf_r+0x50>
 800ebf8:	ab03      	add	r3, sp, #12
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	462a      	mov	r2, r5
 800ebfe:	4b09      	ldr	r3, [pc, #36]	; (800ec24 <_vfiprintf_r+0x258>)
 800ec00:	a904      	add	r1, sp, #16
 800ec02:	4630      	mov	r0, r6
 800ec04:	f7fd ff7e 	bl	800cb04 <_printf_i>
 800ec08:	e7e4      	b.n	800ebd4 <_vfiprintf_r+0x208>
 800ec0a:	bf00      	nop
 800ec0c:	08014004 	.word	0x08014004
 800ec10:	08014024 	.word	0x08014024
 800ec14:	08013fe4 	.word	0x08013fe4
 800ec18:	08014264 	.word	0x08014264
 800ec1c:	0801426e 	.word	0x0801426e
 800ec20:	0800c5bd 	.word	0x0800c5bd
 800ec24:	0800e9a7 	.word	0x0800e9a7
 800ec28:	0801426a 	.word	0x0801426a

0800ec2c <_read_r>:
 800ec2c:	b538      	push	{r3, r4, r5, lr}
 800ec2e:	4d07      	ldr	r5, [pc, #28]	; (800ec4c <_read_r+0x20>)
 800ec30:	4604      	mov	r4, r0
 800ec32:	4608      	mov	r0, r1
 800ec34:	4611      	mov	r1, r2
 800ec36:	2200      	movs	r2, #0
 800ec38:	602a      	str	r2, [r5, #0]
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	f7f2 ff1e 	bl	8001a7c <_read>
 800ec40:	1c43      	adds	r3, r0, #1
 800ec42:	d102      	bne.n	800ec4a <_read_r+0x1e>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	b103      	cbz	r3, 800ec4a <_read_r+0x1e>
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	bd38      	pop	{r3, r4, r5, pc}
 800ec4c:	200007ac 	.word	0x200007ac

0800ec50 <__assert_func>:
 800ec50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec52:	4614      	mov	r4, r2
 800ec54:	461a      	mov	r2, r3
 800ec56:	4b09      	ldr	r3, [pc, #36]	; (800ec7c <__assert_func+0x2c>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	68d8      	ldr	r0, [r3, #12]
 800ec5e:	b14c      	cbz	r4, 800ec74 <__assert_func+0x24>
 800ec60:	4b07      	ldr	r3, [pc, #28]	; (800ec80 <__assert_func+0x30>)
 800ec62:	9100      	str	r1, [sp, #0]
 800ec64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec68:	4906      	ldr	r1, [pc, #24]	; (800ec84 <__assert_func+0x34>)
 800ec6a:	462b      	mov	r3, r5
 800ec6c:	f000 f80e 	bl	800ec8c <fiprintf>
 800ec70:	f000 f88e 	bl	800ed90 <abort>
 800ec74:	4b04      	ldr	r3, [pc, #16]	; (800ec88 <__assert_func+0x38>)
 800ec76:	461c      	mov	r4, r3
 800ec78:	e7f3      	b.n	800ec62 <__assert_func+0x12>
 800ec7a:	bf00      	nop
 800ec7c:	20000134 	.word	0x20000134
 800ec80:	08014275 	.word	0x08014275
 800ec84:	08014282 	.word	0x08014282
 800ec88:	080142b0 	.word	0x080142b0

0800ec8c <fiprintf>:
 800ec8c:	b40e      	push	{r1, r2, r3}
 800ec8e:	b503      	push	{r0, r1, lr}
 800ec90:	4601      	mov	r1, r0
 800ec92:	ab03      	add	r3, sp, #12
 800ec94:	4805      	ldr	r0, [pc, #20]	; (800ecac <fiprintf+0x20>)
 800ec96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec9a:	6800      	ldr	r0, [r0, #0]
 800ec9c:	9301      	str	r3, [sp, #4]
 800ec9e:	f7ff fe95 	bl	800e9cc <_vfiprintf_r>
 800eca2:	b002      	add	sp, #8
 800eca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eca8:	b003      	add	sp, #12
 800ecaa:	4770      	bx	lr
 800ecac:	20000134 	.word	0x20000134

0800ecb0 <_fstat_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4d07      	ldr	r5, [pc, #28]	; (800ecd0 <_fstat_r+0x20>)
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	4608      	mov	r0, r1
 800ecba:	4611      	mov	r1, r2
 800ecbc:	602b      	str	r3, [r5, #0]
 800ecbe:	f7f2 ff22 	bl	8001b06 <_fstat>
 800ecc2:	1c43      	adds	r3, r0, #1
 800ecc4:	d102      	bne.n	800eccc <_fstat_r+0x1c>
 800ecc6:	682b      	ldr	r3, [r5, #0]
 800ecc8:	b103      	cbz	r3, 800eccc <_fstat_r+0x1c>
 800ecca:	6023      	str	r3, [r4, #0]
 800eccc:	bd38      	pop	{r3, r4, r5, pc}
 800ecce:	bf00      	nop
 800ecd0:	200007ac 	.word	0x200007ac

0800ecd4 <_isatty_r>:
 800ecd4:	b538      	push	{r3, r4, r5, lr}
 800ecd6:	4d06      	ldr	r5, [pc, #24]	; (800ecf0 <_isatty_r+0x1c>)
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4604      	mov	r4, r0
 800ecdc:	4608      	mov	r0, r1
 800ecde:	602b      	str	r3, [r5, #0]
 800ece0:	f7f2 ff21 	bl	8001b26 <_isatty>
 800ece4:	1c43      	adds	r3, r0, #1
 800ece6:	d102      	bne.n	800ecee <_isatty_r+0x1a>
 800ece8:	682b      	ldr	r3, [r5, #0]
 800ecea:	b103      	cbz	r3, 800ecee <_isatty_r+0x1a>
 800ecec:	6023      	str	r3, [r4, #0]
 800ecee:	bd38      	pop	{r3, r4, r5, pc}
 800ecf0:	200007ac 	.word	0x200007ac

0800ecf4 <__ascii_mbtowc>:
 800ecf4:	b082      	sub	sp, #8
 800ecf6:	b901      	cbnz	r1, 800ecfa <__ascii_mbtowc+0x6>
 800ecf8:	a901      	add	r1, sp, #4
 800ecfa:	b142      	cbz	r2, 800ed0e <__ascii_mbtowc+0x1a>
 800ecfc:	b14b      	cbz	r3, 800ed12 <__ascii_mbtowc+0x1e>
 800ecfe:	7813      	ldrb	r3, [r2, #0]
 800ed00:	600b      	str	r3, [r1, #0]
 800ed02:	7812      	ldrb	r2, [r2, #0]
 800ed04:	1e10      	subs	r0, r2, #0
 800ed06:	bf18      	it	ne
 800ed08:	2001      	movne	r0, #1
 800ed0a:	b002      	add	sp, #8
 800ed0c:	4770      	bx	lr
 800ed0e:	4610      	mov	r0, r2
 800ed10:	e7fb      	b.n	800ed0a <__ascii_mbtowc+0x16>
 800ed12:	f06f 0001 	mvn.w	r0, #1
 800ed16:	e7f8      	b.n	800ed0a <__ascii_mbtowc+0x16>

0800ed18 <_realloc_r>:
 800ed18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1c:	4680      	mov	r8, r0
 800ed1e:	4614      	mov	r4, r2
 800ed20:	460e      	mov	r6, r1
 800ed22:	b921      	cbnz	r1, 800ed2e <_realloc_r+0x16>
 800ed24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed28:	4611      	mov	r1, r2
 800ed2a:	f7fd bb33 	b.w	800c394 <_malloc_r>
 800ed2e:	b92a      	cbnz	r2, 800ed3c <_realloc_r+0x24>
 800ed30:	f7fd fac4 	bl	800c2bc <_free_r>
 800ed34:	4625      	mov	r5, r4
 800ed36:	4628      	mov	r0, r5
 800ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed3c:	f000 f82f 	bl	800ed9e <_malloc_usable_size_r>
 800ed40:	4284      	cmp	r4, r0
 800ed42:	4607      	mov	r7, r0
 800ed44:	d802      	bhi.n	800ed4c <_realloc_r+0x34>
 800ed46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed4a:	d812      	bhi.n	800ed72 <_realloc_r+0x5a>
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	4640      	mov	r0, r8
 800ed50:	f7fd fb20 	bl	800c394 <_malloc_r>
 800ed54:	4605      	mov	r5, r0
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d0ed      	beq.n	800ed36 <_realloc_r+0x1e>
 800ed5a:	42bc      	cmp	r4, r7
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4631      	mov	r1, r6
 800ed60:	bf28      	it	cs
 800ed62:	463a      	movcs	r2, r7
 800ed64:	f7fd fa7a 	bl	800c25c <memcpy>
 800ed68:	4631      	mov	r1, r6
 800ed6a:	4640      	mov	r0, r8
 800ed6c:	f7fd faa6 	bl	800c2bc <_free_r>
 800ed70:	e7e1      	b.n	800ed36 <_realloc_r+0x1e>
 800ed72:	4635      	mov	r5, r6
 800ed74:	e7df      	b.n	800ed36 <_realloc_r+0x1e>

0800ed76 <__ascii_wctomb>:
 800ed76:	b149      	cbz	r1, 800ed8c <__ascii_wctomb+0x16>
 800ed78:	2aff      	cmp	r2, #255	; 0xff
 800ed7a:	bf85      	ittet	hi
 800ed7c:	238a      	movhi	r3, #138	; 0x8a
 800ed7e:	6003      	strhi	r3, [r0, #0]
 800ed80:	700a      	strbls	r2, [r1, #0]
 800ed82:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed86:	bf98      	it	ls
 800ed88:	2001      	movls	r0, #1
 800ed8a:	4770      	bx	lr
 800ed8c:	4608      	mov	r0, r1
 800ed8e:	4770      	bx	lr

0800ed90 <abort>:
 800ed90:	b508      	push	{r3, lr}
 800ed92:	2006      	movs	r0, #6
 800ed94:	f000 f834 	bl	800ee00 <raise>
 800ed98:	2001      	movs	r0, #1
 800ed9a:	f7f2 fe65 	bl	8001a68 <_exit>

0800ed9e <_malloc_usable_size_r>:
 800ed9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eda2:	1f18      	subs	r0, r3, #4
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	bfbc      	itt	lt
 800eda8:	580b      	ldrlt	r3, [r1, r0]
 800edaa:	18c0      	addlt	r0, r0, r3
 800edac:	4770      	bx	lr

0800edae <_raise_r>:
 800edae:	291f      	cmp	r1, #31
 800edb0:	b538      	push	{r3, r4, r5, lr}
 800edb2:	4604      	mov	r4, r0
 800edb4:	460d      	mov	r5, r1
 800edb6:	d904      	bls.n	800edc2 <_raise_r+0x14>
 800edb8:	2316      	movs	r3, #22
 800edba:	6003      	str	r3, [r0, #0]
 800edbc:	f04f 30ff 	mov.w	r0, #4294967295
 800edc0:	bd38      	pop	{r3, r4, r5, pc}
 800edc2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edc4:	b112      	cbz	r2, 800edcc <_raise_r+0x1e>
 800edc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edca:	b94b      	cbnz	r3, 800ede0 <_raise_r+0x32>
 800edcc:	4620      	mov	r0, r4
 800edce:	f000 f831 	bl	800ee34 <_getpid_r>
 800edd2:	462a      	mov	r2, r5
 800edd4:	4601      	mov	r1, r0
 800edd6:	4620      	mov	r0, r4
 800edd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eddc:	f000 b818 	b.w	800ee10 <_kill_r>
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d00a      	beq.n	800edfa <_raise_r+0x4c>
 800ede4:	1c59      	adds	r1, r3, #1
 800ede6:	d103      	bne.n	800edf0 <_raise_r+0x42>
 800ede8:	2316      	movs	r3, #22
 800edea:	6003      	str	r3, [r0, #0]
 800edec:	2001      	movs	r0, #1
 800edee:	e7e7      	b.n	800edc0 <_raise_r+0x12>
 800edf0:	2400      	movs	r4, #0
 800edf2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edf6:	4628      	mov	r0, r5
 800edf8:	4798      	blx	r3
 800edfa:	2000      	movs	r0, #0
 800edfc:	e7e0      	b.n	800edc0 <_raise_r+0x12>
	...

0800ee00 <raise>:
 800ee00:	4b02      	ldr	r3, [pc, #8]	; (800ee0c <raise+0xc>)
 800ee02:	4601      	mov	r1, r0
 800ee04:	6818      	ldr	r0, [r3, #0]
 800ee06:	f7ff bfd2 	b.w	800edae <_raise_r>
 800ee0a:	bf00      	nop
 800ee0c:	20000134 	.word	0x20000134

0800ee10 <_kill_r>:
 800ee10:	b538      	push	{r3, r4, r5, lr}
 800ee12:	4d07      	ldr	r5, [pc, #28]	; (800ee30 <_kill_r+0x20>)
 800ee14:	2300      	movs	r3, #0
 800ee16:	4604      	mov	r4, r0
 800ee18:	4608      	mov	r0, r1
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	602b      	str	r3, [r5, #0]
 800ee1e:	f7f2 fe13 	bl	8001a48 <_kill>
 800ee22:	1c43      	adds	r3, r0, #1
 800ee24:	d102      	bne.n	800ee2c <_kill_r+0x1c>
 800ee26:	682b      	ldr	r3, [r5, #0]
 800ee28:	b103      	cbz	r3, 800ee2c <_kill_r+0x1c>
 800ee2a:	6023      	str	r3, [r4, #0]
 800ee2c:	bd38      	pop	{r3, r4, r5, pc}
 800ee2e:	bf00      	nop
 800ee30:	200007ac 	.word	0x200007ac

0800ee34 <_getpid_r>:
 800ee34:	f7f2 be00 	b.w	8001a38 <_getpid>

0800ee38 <fmaxf>:
 800ee38:	b508      	push	{r3, lr}
 800ee3a:	ed2d 8b02 	vpush	{d8}
 800ee3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ee42:	eef0 8a60 	vmov.f32	s17, s1
 800ee46:	f000 f82d 	bl	800eea4 <__fpclassifyf>
 800ee4a:	b148      	cbz	r0, 800ee60 <fmaxf+0x28>
 800ee4c:	eeb0 0a68 	vmov.f32	s0, s17
 800ee50:	f000 f828 	bl	800eea4 <__fpclassifyf>
 800ee54:	b130      	cbz	r0, 800ee64 <fmaxf+0x2c>
 800ee56:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	dc01      	bgt.n	800ee64 <fmaxf+0x2c>
 800ee60:	eeb0 8a68 	vmov.f32	s16, s17
 800ee64:	eeb0 0a48 	vmov.f32	s0, s16
 800ee68:	ecbd 8b02 	vpop	{d8}
 800ee6c:	bd08      	pop	{r3, pc}

0800ee6e <fminf>:
 800ee6e:	b508      	push	{r3, lr}
 800ee70:	ed2d 8b02 	vpush	{d8}
 800ee74:	eeb0 8a40 	vmov.f32	s16, s0
 800ee78:	eef0 8a60 	vmov.f32	s17, s1
 800ee7c:	f000 f812 	bl	800eea4 <__fpclassifyf>
 800ee80:	b148      	cbz	r0, 800ee96 <fminf+0x28>
 800ee82:	eeb0 0a68 	vmov.f32	s0, s17
 800ee86:	f000 f80d 	bl	800eea4 <__fpclassifyf>
 800ee8a:	b130      	cbz	r0, 800ee9a <fminf+0x2c>
 800ee8c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ee90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee94:	d401      	bmi.n	800ee9a <fminf+0x2c>
 800ee96:	eeb0 8a68 	vmov.f32	s16, s17
 800ee9a:	eeb0 0a48 	vmov.f32	s0, s16
 800ee9e:	ecbd 8b02 	vpop	{d8}
 800eea2:	bd08      	pop	{r3, pc}

0800eea4 <__fpclassifyf>:
 800eea4:	ee10 3a10 	vmov	r3, s0
 800eea8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800eeac:	d00d      	beq.n	800eeca <__fpclassifyf+0x26>
 800eeae:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800eeb2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800eeb6:	d30a      	bcc.n	800eece <__fpclassifyf+0x2a>
 800eeb8:	4b07      	ldr	r3, [pc, #28]	; (800eed8 <__fpclassifyf+0x34>)
 800eeba:	1e42      	subs	r2, r0, #1
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d908      	bls.n	800eed2 <__fpclassifyf+0x2e>
 800eec0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800eec4:	4258      	negs	r0, r3
 800eec6:	4158      	adcs	r0, r3
 800eec8:	4770      	bx	lr
 800eeca:	2002      	movs	r0, #2
 800eecc:	4770      	bx	lr
 800eece:	2004      	movs	r0, #4
 800eed0:	4770      	bx	lr
 800eed2:	2003      	movs	r0, #3
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	007ffffe 	.word	0x007ffffe

0800eedc <roundf>:
 800eedc:	ee10 0a10 	vmov	r0, s0
 800eee0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800eee4:	3a7f      	subs	r2, #127	; 0x7f
 800eee6:	2a16      	cmp	r2, #22
 800eee8:	dc15      	bgt.n	800ef16 <roundf+0x3a>
 800eeea:	2a00      	cmp	r2, #0
 800eeec:	da08      	bge.n	800ef00 <roundf+0x24>
 800eeee:	3201      	adds	r2, #1
 800eef0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800eef4:	d101      	bne.n	800eefa <roundf+0x1e>
 800eef6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800eefa:	ee00 3a10 	vmov	s0, r3
 800eefe:	4770      	bx	lr
 800ef00:	4907      	ldr	r1, [pc, #28]	; (800ef20 <roundf+0x44>)
 800ef02:	4111      	asrs	r1, r2
 800ef04:	4208      	tst	r0, r1
 800ef06:	d0fa      	beq.n	800eefe <roundf+0x22>
 800ef08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ef0c:	4113      	asrs	r3, r2
 800ef0e:	4403      	add	r3, r0
 800ef10:	ea23 0301 	bic.w	r3, r3, r1
 800ef14:	e7f1      	b.n	800eefa <roundf+0x1e>
 800ef16:	2a80      	cmp	r2, #128	; 0x80
 800ef18:	d1f1      	bne.n	800eefe <roundf+0x22>
 800ef1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ef1e:	4770      	bx	lr
 800ef20:	007fffff 	.word	0x007fffff

0800ef24 <expf>:
 800ef24:	b508      	push	{r3, lr}
 800ef26:	ed2d 8b02 	vpush	{d8}
 800ef2a:	eef0 8a40 	vmov.f32	s17, s0
 800ef2e:	f000 f85d 	bl	800efec <__ieee754_expf>
 800ef32:	eeb0 8a40 	vmov.f32	s16, s0
 800ef36:	eeb0 0a68 	vmov.f32	s0, s17
 800ef3a:	f000 f99f 	bl	800f27c <finitef>
 800ef3e:	b160      	cbz	r0, 800ef5a <expf+0x36>
 800ef40:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ef80 <expf+0x5c>
 800ef44:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ef48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef4c:	dd0a      	ble.n	800ef64 <expf+0x40>
 800ef4e:	f7fc ff7d 	bl	800be4c <__errno>
 800ef52:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800ef84 <expf+0x60>
 800ef56:	2322      	movs	r3, #34	; 0x22
 800ef58:	6003      	str	r3, [r0, #0]
 800ef5a:	eeb0 0a48 	vmov.f32	s0, s16
 800ef5e:	ecbd 8b02 	vpop	{d8}
 800ef62:	bd08      	pop	{r3, pc}
 800ef64:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ef88 <expf+0x64>
 800ef68:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ef6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef70:	d5f3      	bpl.n	800ef5a <expf+0x36>
 800ef72:	f7fc ff6b 	bl	800be4c <__errno>
 800ef76:	2322      	movs	r3, #34	; 0x22
 800ef78:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800ef8c <expf+0x68>
 800ef7c:	6003      	str	r3, [r0, #0]
 800ef7e:	e7ec      	b.n	800ef5a <expf+0x36>
 800ef80:	42b17180 	.word	0x42b17180
 800ef84:	7f800000 	.word	0x7f800000
 800ef88:	c2cff1b5 	.word	0xc2cff1b5
 800ef8c:	00000000 	.word	0x00000000

0800ef90 <log10f>:
 800ef90:	b508      	push	{r3, lr}
 800ef92:	ed2d 8b02 	vpush	{d8}
 800ef96:	eeb0 8a40 	vmov.f32	s16, s0
 800ef9a:	f000 f8f5 	bl	800f188 <__ieee754_log10f>
 800ef9e:	eeb4 8a48 	vcmp.f32	s16, s16
 800efa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa6:	d60f      	bvs.n	800efc8 <log10f+0x38>
 800efa8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800efac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb0:	d80a      	bhi.n	800efc8 <log10f+0x38>
 800efb2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efba:	d108      	bne.n	800efce <log10f+0x3e>
 800efbc:	f7fc ff46 	bl	800be4c <__errno>
 800efc0:	2322      	movs	r3, #34	; 0x22
 800efc2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800efe4 <log10f+0x54>
 800efc6:	6003      	str	r3, [r0, #0]
 800efc8:	ecbd 8b02 	vpop	{d8}
 800efcc:	bd08      	pop	{r3, pc}
 800efce:	f7fc ff3d 	bl	800be4c <__errno>
 800efd2:	ecbd 8b02 	vpop	{d8}
 800efd6:	2321      	movs	r3, #33	; 0x21
 800efd8:	6003      	str	r3, [r0, #0]
 800efda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800efde:	4802      	ldr	r0, [pc, #8]	; (800efe8 <log10f+0x58>)
 800efe0:	f000 b95a 	b.w	800f298 <nanf>
 800efe4:	ff800000 	.word	0xff800000
 800efe8:	080142b0 	.word	0x080142b0

0800efec <__ieee754_expf>:
 800efec:	ee10 2a10 	vmov	r2, s0
 800eff0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800eff4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eff8:	d902      	bls.n	800f000 <__ieee754_expf+0x14>
 800effa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800effe:	4770      	bx	lr
 800f000:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800f004:	d106      	bne.n	800f014 <__ieee754_expf+0x28>
 800f006:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800f140 <__ieee754_expf+0x154>
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	bf18      	it	ne
 800f00e:	eeb0 0a67 	vmovne.f32	s0, s15
 800f012:	4770      	bx	lr
 800f014:	484b      	ldr	r0, [pc, #300]	; (800f144 <__ieee754_expf+0x158>)
 800f016:	4282      	cmp	r2, r0
 800f018:	dd02      	ble.n	800f020 <__ieee754_expf+0x34>
 800f01a:	2000      	movs	r0, #0
 800f01c:	f000 b928 	b.w	800f270 <__math_oflowf>
 800f020:	2a00      	cmp	r2, #0
 800f022:	da05      	bge.n	800f030 <__ieee754_expf+0x44>
 800f024:	4a48      	ldr	r2, [pc, #288]	; (800f148 <__ieee754_expf+0x15c>)
 800f026:	4291      	cmp	r1, r2
 800f028:	d902      	bls.n	800f030 <__ieee754_expf+0x44>
 800f02a:	2000      	movs	r0, #0
 800f02c:	f000 b91a 	b.w	800f264 <__math_uflowf>
 800f030:	4a46      	ldr	r2, [pc, #280]	; (800f14c <__ieee754_expf+0x160>)
 800f032:	4291      	cmp	r1, r2
 800f034:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f038:	d952      	bls.n	800f0e0 <__ieee754_expf+0xf4>
 800f03a:	4a45      	ldr	r2, [pc, #276]	; (800f150 <__ieee754_expf+0x164>)
 800f03c:	4291      	cmp	r1, r2
 800f03e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f042:	d834      	bhi.n	800f0ae <__ieee754_expf+0xc2>
 800f044:	4943      	ldr	r1, [pc, #268]	; (800f154 <__ieee754_expf+0x168>)
 800f046:	4411      	add	r1, r2
 800f048:	ed91 7a00 	vldr	s14, [r1]
 800f04c:	4942      	ldr	r1, [pc, #264]	; (800f158 <__ieee754_expf+0x16c>)
 800f04e:	440a      	add	r2, r1
 800f050:	edd2 7a00 	vldr	s15, [r2]
 800f054:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f058:	f1c3 0201 	rsb	r2, r3, #1
 800f05c:	1ad2      	subs	r2, r2, r3
 800f05e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f062:	ee20 6a00 	vmul.f32	s12, s0, s0
 800f066:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800f15c <__ieee754_expf+0x170>
 800f06a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f160 <__ieee754_expf+0x174>
 800f06e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800f072:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800f164 <__ieee754_expf+0x178>
 800f076:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f07a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f168 <__ieee754_expf+0x17c>
 800f07e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800f082:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f16c <__ieee754_expf+0x180>
 800f086:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f08a:	eef0 6a40 	vmov.f32	s13, s0
 800f08e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800f092:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800f096:	ee20 5a26 	vmul.f32	s10, s0, s13
 800f09a:	bb92      	cbnz	r2, 800f102 <__ieee754_expf+0x116>
 800f09c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f0a0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800f0a4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f0a8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800f0ac:	4770      	bx	lr
 800f0ae:	4b30      	ldr	r3, [pc, #192]	; (800f170 <__ieee754_expf+0x184>)
 800f0b0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800f174 <__ieee754_expf+0x188>
 800f0b4:	eddf 6a30 	vldr	s13, [pc, #192]	; 800f178 <__ieee754_expf+0x18c>
 800f0b8:	4413      	add	r3, r2
 800f0ba:	edd3 7a00 	vldr	s15, [r3]
 800f0be:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f0c2:	eeb0 7a40 	vmov.f32	s14, s0
 800f0c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0ca:	ee17 2a90 	vmov	r2, s15
 800f0ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0d2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f0d6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f17c <__ieee754_expf+0x190>
 800f0da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f0de:	e7be      	b.n	800f05e <__ieee754_expf+0x72>
 800f0e0:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800f0e4:	d20b      	bcs.n	800f0fe <__ieee754_expf+0x112>
 800f0e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f180 <__ieee754_expf+0x194>
 800f0ea:	ee70 6a26 	vadd.f32	s13, s0, s13
 800f0ee:	eef4 6ae5 	vcmpe.f32	s13, s11
 800f0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f6:	dd02      	ble.n	800f0fe <__ieee754_expf+0x112>
 800f0f8:	ee30 0a25 	vadd.f32	s0, s0, s11
 800f0fc:	4770      	bx	lr
 800f0fe:	2200      	movs	r2, #0
 800f100:	e7af      	b.n	800f062 <__ieee754_expf+0x76>
 800f102:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f106:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800f10a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800f10e:	bfb8      	it	lt
 800f110:	3264      	addlt	r2, #100	; 0x64
 800f112:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f116:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f11a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800f11e:	ee17 3a90 	vmov	r3, s15
 800f122:	bfab      	itete	ge
 800f124:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f128:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f12c:	ee00 3a10 	vmovge	s0, r3
 800f130:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800f184 <__ieee754_expf+0x198>
 800f134:	bfbc      	itt	lt
 800f136:	ee00 3a10 	vmovlt	s0, r3
 800f13a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f13e:	4770      	bx	lr
 800f140:	00000000 	.word	0x00000000
 800f144:	42b17217 	.word	0x42b17217
 800f148:	42cff1b5 	.word	0x42cff1b5
 800f14c:	3eb17218 	.word	0x3eb17218
 800f150:	3f851591 	.word	0x3f851591
 800f154:	080143c4 	.word	0x080143c4
 800f158:	080143cc 	.word	0x080143cc
 800f15c:	3331bb4c 	.word	0x3331bb4c
 800f160:	b5ddea0e 	.word	0xb5ddea0e
 800f164:	388ab355 	.word	0x388ab355
 800f168:	bb360b61 	.word	0xbb360b61
 800f16c:	3e2aaaab 	.word	0x3e2aaaab
 800f170:	080143bc 	.word	0x080143bc
 800f174:	3fb8aa3b 	.word	0x3fb8aa3b
 800f178:	3f317180 	.word	0x3f317180
 800f17c:	3717f7d1 	.word	0x3717f7d1
 800f180:	7149f2ca 	.word	0x7149f2ca
 800f184:	0d800000 	.word	0x0d800000

0800f188 <__ieee754_log10f>:
 800f188:	b508      	push	{r3, lr}
 800f18a:	ee10 2a10 	vmov	r2, s0
 800f18e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f192:	ed2d 8b02 	vpush	{d8}
 800f196:	d108      	bne.n	800f1aa <__ieee754_log10f+0x22>
 800f198:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800f220 <__ieee754_log10f+0x98>
 800f19c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f224 <__ieee754_log10f+0x9c>
 800f1a0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f1a4:	ecbd 8b02 	vpop	{d8}
 800f1a8:	bd08      	pop	{r3, pc}
 800f1aa:	2a00      	cmp	r2, #0
 800f1ac:	da02      	bge.n	800f1b4 <__ieee754_log10f+0x2c>
 800f1ae:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f1b2:	e7f3      	b.n	800f19c <__ieee754_log10f+0x14>
 800f1b4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f1b8:	db02      	blt.n	800f1c0 <__ieee754_log10f+0x38>
 800f1ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f1be:	e7f1      	b.n	800f1a4 <__ieee754_log10f+0x1c>
 800f1c0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f1c4:	bfbf      	itttt	lt
 800f1c6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800f228 <__ieee754_log10f+0xa0>
 800f1ca:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f1ce:	f06f 0118 	mvnlt.w	r1, #24
 800f1d2:	ee17 2a90 	vmovlt	r2, s15
 800f1d6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800f1da:	bfa8      	it	ge
 800f1dc:	2100      	movge	r1, #0
 800f1de:	3b7f      	subs	r3, #127	; 0x7f
 800f1e0:	440b      	add	r3, r1
 800f1e2:	0fd9      	lsrs	r1, r3, #31
 800f1e4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f1e8:	ee07 3a90 	vmov	s15, r3
 800f1ec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f1f0:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800f1f4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f1f8:	ee00 3a10 	vmov	s0, r3
 800f1fc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f200:	f000 f850 	bl	800f2a4 <__ieee754_logf>
 800f204:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f22c <__ieee754_log10f+0xa4>
 800f208:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f20c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f230 <__ieee754_log10f+0xa8>
 800f210:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f214:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f234 <__ieee754_log10f+0xac>
 800f218:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f21c:	e7c2      	b.n	800f1a4 <__ieee754_log10f+0x1c>
 800f21e:	bf00      	nop
 800f220:	cc000000 	.word	0xcc000000
 800f224:	00000000 	.word	0x00000000
 800f228:	4c000000 	.word	0x4c000000
 800f22c:	3ede5bd9 	.word	0x3ede5bd9
 800f230:	355427db 	.word	0x355427db
 800f234:	3e9a2080 	.word	0x3e9a2080

0800f238 <with_errnof>:
 800f238:	b513      	push	{r0, r1, r4, lr}
 800f23a:	4604      	mov	r4, r0
 800f23c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f240:	f7fc fe04 	bl	800be4c <__errno>
 800f244:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f248:	6004      	str	r4, [r0, #0]
 800f24a:	b002      	add	sp, #8
 800f24c:	bd10      	pop	{r4, pc}

0800f24e <xflowf>:
 800f24e:	b130      	cbz	r0, 800f25e <xflowf+0x10>
 800f250:	eef1 7a40 	vneg.f32	s15, s0
 800f254:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f258:	2022      	movs	r0, #34	; 0x22
 800f25a:	f7ff bfed 	b.w	800f238 <with_errnof>
 800f25e:	eef0 7a40 	vmov.f32	s15, s0
 800f262:	e7f7      	b.n	800f254 <xflowf+0x6>

0800f264 <__math_uflowf>:
 800f264:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f26c <__math_uflowf+0x8>
 800f268:	f7ff bff1 	b.w	800f24e <xflowf>
 800f26c:	10000000 	.word	0x10000000

0800f270 <__math_oflowf>:
 800f270:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f278 <__math_oflowf+0x8>
 800f274:	f7ff bfeb 	b.w	800f24e <xflowf>
 800f278:	70000000 	.word	0x70000000

0800f27c <finitef>:
 800f27c:	b082      	sub	sp, #8
 800f27e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f282:	9801      	ldr	r0, [sp, #4]
 800f284:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f288:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f28c:	bfac      	ite	ge
 800f28e:	2000      	movge	r0, #0
 800f290:	2001      	movlt	r0, #1
 800f292:	b002      	add	sp, #8
 800f294:	4770      	bx	lr
	...

0800f298 <nanf>:
 800f298:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f2a0 <nanf+0x8>
 800f29c:	4770      	bx	lr
 800f29e:	bf00      	nop
 800f2a0:	7fc00000 	.word	0x7fc00000

0800f2a4 <__ieee754_logf>:
 800f2a4:	ee10 3a10 	vmov	r3, s0
 800f2a8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f2ac:	d106      	bne.n	800f2bc <__ieee754_logf+0x18>
 800f2ae:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f444 <__ieee754_logf+0x1a0>
 800f2b2:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f448 <__ieee754_logf+0x1a4>
 800f2b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f2ba:	4770      	bx	lr
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	da02      	bge.n	800f2c6 <__ieee754_logf+0x22>
 800f2c0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f2c4:	e7f5      	b.n	800f2b2 <__ieee754_logf+0xe>
 800f2c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f2ca:	db02      	blt.n	800f2d2 <__ieee754_logf+0x2e>
 800f2cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f2d0:	4770      	bx	lr
 800f2d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f2d6:	bfb8      	it	lt
 800f2d8:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800f44c <__ieee754_logf+0x1a8>
 800f2dc:	485c      	ldr	r0, [pc, #368]	; (800f450 <__ieee754_logf+0x1ac>)
 800f2de:	bfbe      	ittt	lt
 800f2e0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f2e4:	f06f 0118 	mvnlt.w	r1, #24
 800f2e8:	ee17 3a90 	vmovlt	r3, s15
 800f2ec:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f2f0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f2f4:	4418      	add	r0, r3
 800f2f6:	bfa8      	it	ge
 800f2f8:	2100      	movge	r1, #0
 800f2fa:	3a7f      	subs	r2, #127	; 0x7f
 800f2fc:	440a      	add	r2, r1
 800f2fe:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f302:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f306:	4319      	orrs	r1, r3
 800f308:	ee00 1a10 	vmov	s0, r1
 800f30c:	4951      	ldr	r1, [pc, #324]	; (800f454 <__ieee754_logf+0x1b0>)
 800f30e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f312:	f103 000f 	add.w	r0, r3, #15
 800f316:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f31a:	4001      	ands	r1, r0
 800f31c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f320:	bb89      	cbnz	r1, 800f386 <__ieee754_logf+0xe2>
 800f322:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32a:	d10f      	bne.n	800f34c <__ieee754_logf+0xa8>
 800f32c:	2a00      	cmp	r2, #0
 800f32e:	f000 8085 	beq.w	800f43c <__ieee754_logf+0x198>
 800f332:	ee07 2a90 	vmov	s15, r2
 800f336:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f458 <__ieee754_logf+0x1b4>
 800f33a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f45c <__ieee754_logf+0x1b8>
 800f33e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f342:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f346:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f34a:	4770      	bx	lr
 800f34c:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f460 <__ieee754_logf+0x1bc>
 800f350:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f354:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f358:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f35c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f360:	b912      	cbnz	r2, 800f368 <__ieee754_logf+0xc4>
 800f362:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f366:	4770      	bx	lr
 800f368:	ee07 2a90 	vmov	s15, r2
 800f36c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f458 <__ieee754_logf+0x1b4>
 800f370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f374:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f378:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f37c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f45c <__ieee754_logf+0x1b8>
 800f380:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f384:	4770      	bx	lr
 800f386:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f38a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f38e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f464 <__ieee754_logf+0x1c0>
 800f392:	eddf 4a35 	vldr	s9, [pc, #212]	; 800f468 <__ieee754_logf+0x1c4>
 800f396:	4935      	ldr	r1, [pc, #212]	; (800f46c <__ieee754_logf+0x1c8>)
 800f398:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f39c:	4419      	add	r1, r3
 800f39e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f3a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f3a6:	430b      	orrs	r3, r1
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	ee07 2a90 	vmov	s15, r2
 800f3ae:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f3b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f3b6:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f3ba:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f470 <__ieee754_logf+0x1cc>
 800f3be:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f3c2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f474 <__ieee754_logf+0x1d0>
 800f3c6:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f3ca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f478 <__ieee754_logf+0x1d4>
 800f3ce:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f3d2:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800f47c <__ieee754_logf+0x1d8>
 800f3d6:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f3da:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f480 <__ieee754_logf+0x1dc>
 800f3de:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f3e2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f3e6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f3ea:	dd1c      	ble.n	800f426 <__ieee754_logf+0x182>
 800f3ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f3f0:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f3f4:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f3f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f400:	b922      	cbnz	r2, 800f40c <__ieee754_logf+0x168>
 800f402:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f406:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f40a:	4770      	bx	lr
 800f40c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800f458 <__ieee754_logf+0x1b4>
 800f410:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f414:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f418:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f41c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f45c <__ieee754_logf+0x1b8>
 800f420:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f424:	4770      	bx	lr
 800f426:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f42a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f42e:	2a00      	cmp	r2, #0
 800f430:	d0e9      	beq.n	800f406 <__ieee754_logf+0x162>
 800f432:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f458 <__ieee754_logf+0x1b4>
 800f436:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f43a:	e7ed      	b.n	800f418 <__ieee754_logf+0x174>
 800f43c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f448 <__ieee754_logf+0x1a4>
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	cc000000 	.word	0xcc000000
 800f448:	00000000 	.word	0x00000000
 800f44c:	4c000000 	.word	0x4c000000
 800f450:	004afb20 	.word	0x004afb20
 800f454:	007ffff0 	.word	0x007ffff0
 800f458:	3717f7d1 	.word	0x3717f7d1
 800f45c:	3f317180 	.word	0x3f317180
 800f460:	3eaaaaab 	.word	0x3eaaaaab
 800f464:	3e1cd04f 	.word	0x3e1cd04f
 800f468:	3e178897 	.word	0x3e178897
 800f46c:	ffcf5c30 	.word	0xffcf5c30
 800f470:	3e638e29 	.word	0x3e638e29
 800f474:	3ecccccd 	.word	0x3ecccccd
 800f478:	3e3a3325 	.word	0x3e3a3325
 800f47c:	3e924925 	.word	0x3e924925
 800f480:	3f2aaaab 	.word	0x3f2aaaab

0800f484 <_init>:
 800f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f486:	bf00      	nop
 800f488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f48a:	bc08      	pop	{r3}
 800f48c:	469e      	mov	lr, r3
 800f48e:	4770      	bx	lr

0800f490 <_fini>:
 800f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f492:	bf00      	nop
 800f494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f496:	bc08      	pop	{r3}
 800f498:	469e      	mov	lr, r3
 800f49a:	4770      	bx	lr
