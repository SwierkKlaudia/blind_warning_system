
STM_radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f48c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f34  0800f5d0  0800f5d0  0001f5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014504  08014504  00024504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801450c  0801450c  0002450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014510  08014510  00024510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000300  20000004  08014514  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000524  20000304  08014814  00030304  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000828  08014814  00030828  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 10 .debug_info   00053733  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b189  00000000  00000000  00083a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029c0  00000000  00000000  0008ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00005928  00000000  00000000  000915b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000248a2  00000000  00000000  00096ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000285e8  00000000  00000000  000bb77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7582  00000000  00000000  000e3d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000009c  00000000  00000000  001cb2e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000afd0  00000000  00000000  001cb380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000178da  00000000  00000000  001d6350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000304 	.word	0x20000304
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f5b4 	.word	0x0800f5b4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000308 	.word	0x20000308
 800017c:	0800f5b4 	.word	0x0800f5b4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
	__disable_irq();
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000e72:	b662      	cpsie	i
}
 8000e74:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000e94:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e98:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f001 faf1 	bl	8002488 <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <acc_hal_integration_sensor_transfer+0x48>)
 8000eb6:	f003 facf 	bl	8004458 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f001 fae1 	bl	8002488 <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000364 	.word	0x20000364

08000ed4 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2120      	movs	r1, #32
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f001 fad0 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2110      	movs	r1, #16
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 faca 	bl	8002488 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f001 f80b 	bl	8001f10 <HAL_Delay>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f001 fab9 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f001 fab3 	bl	8002488 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f000 fff4 	bl	8001f10 <HAL_Delay>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 8000f3a:	f000 ffd1 	bl	8001ee0 <HAL_GetTick>
 8000f3e:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f40:	e00d      	b.n	8000f5e <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8000f42:	f7ff ff8b 	bl	8000e5c <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f001 fa83 	bl	8002458 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d000      	beq.n	8000f5a <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 8000f58:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8000f5a:	f7ff ff88 	bl	8000e6e <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 fa77 	bl	8002458 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d007      	beq.n	8000f80 <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000f70:	f000 ffb6 	bl	8001ee0 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8e0      	bhi.n	8000f42 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8000f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f001 fa66 	bl	8002458 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <acc_hal_integration_get_reference_frequency+0x18>)
 8000fa6:	ee07 3a90 	vmov	s15, r3
}
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	4bc65d40 	.word	0x4bc65d40

08000fbc <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	return &hal;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <acc_hal_integration_get_implementation+0x10>)
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	080110b4 	.word	0x080110b4

08000fd0 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8000fd0:	b40c      	push	{r2, r3}
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b0b4      	sub	sp, #208	; 0xd0
 8000fd6:	af04      	add	r7, sp, #16
 8000fd8:	4603      	mov	r3, r0
 8000fda:	6039      	str	r1, [r7, #0]
 8000fdc:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 8000fde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe2:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8000fe4:	f107 000c 	add.w	r0, r7, #12
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000fee:	2196      	movs	r1, #150	; 0x96
 8000ff0:	f00c f870 	bl	800d0d4 <vsniprintf>
 8000ff4:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8000ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ffc:	2b95      	cmp	r3, #149	; 0x95
 8000ffe:	dd0b      	ble.n	8001018 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8001000:	232e      	movs	r3, #46	; 0x2e
 8001002:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8001006:	232e      	movs	r3, #46	; 0x2e
 8001008:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 800100c:	232e      	movs	r3, #46	; 0x2e
 800100e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8001018:	f000 f881 	bl	800111e <acc_integration_get_time>
 800101c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8001020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <acc_integration_log+0x11c>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0d5b      	lsrs	r3, r3, #21
 8001034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8001038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800103c:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <acc_integration_log+0x120>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0b9a      	lsrs	r2, r3, #14
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <acc_integration_log+0x124>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	0959      	lsrs	r1, r3, #5
 800104c:	460b      	mov	r3, r1
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800105a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <acc_integration_log+0x128>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	099a      	lsrs	r2, r3, #6
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <acc_integration_log+0x124>)
 8001068:	fba3 1302 	umull	r1, r3, r3, r2
 800106c:	0959      	lsrs	r1, r3, #5
 800106e:	460b      	mov	r3, r1
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	1a5b      	subs	r3, r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 800107c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <acc_integration_log+0x128>)
 8001082:	fba2 1203 	umull	r1, r2, r2, r3
 8001086:	0992      	lsrs	r2, r2, #6
 8001088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800108c:	fb01 f202 	mul.w	r2, r1, r2
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d803      	bhi.n	80010a4 <acc_integration_log+0xd4>
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <acc_integration_log+0x12c>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	e000      	b.n	80010a6 <acc_integration_log+0xd6>
 80010a4:	233f      	movs	r3, #63	; 0x3f
 80010a6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80010aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80010ae:	f107 020c 	add.w	r2, r7, #12
 80010b2:	9203      	str	r2, [sp, #12]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	9202      	str	r2, [sp, #8]
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80010c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <acc_integration_log+0x130>)
 80010ce:	f00b fed5 	bl	800ce7c <iprintf>

	fflush(stdout);
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <acc_integration_log+0x134>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4618      	mov	r0, r3
 80010da:	f00b f815 	bl	800c108 <fflush>

	va_end(ap);
}
 80010de:	bf00      	nop
 80010e0:	37c0      	adds	r7, #192	; 0xc0
 80010e2:	46bd      	mov	sp, r7
 80010e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010e8:	b002      	add	sp, #8
 80010ea:	4770      	bx	lr
 80010ec:	95217cb1 	.word	0x95217cb1
 80010f0:	45e7b273 	.word	0x45e7b273
 80010f4:	88888889 	.word	0x88888889
 80010f8:	10624dd3 	.word	0x10624dd3
 80010fc:	0800f5f4 	.word	0x0800f5f4
 8001100:	0800f5d0 	.word	0x0800f5d0
 8001104:	20000134 	.word	0x20000134

08001108 <acc_integration_sleep_ms>:

#include "acc_integration.h"


void acc_integration_sleep_ms(uint32_t time_msec)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_msec);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fefd 	bl	8001f10 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001122:	f000 fedd 	bl	8001ee0 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}

0800112c <Detector_Init>:

static void Update_Configuration(acc_detector_presence_configuration_t presence_configuration);
static float Average(float *tab, int N);

int Detector_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8001132:	f7ff ff43 	bl	8000fbc <acc_hal_integration_get_implementation>
 8001136:	6078      	str	r0, [r7, #4]

	if (!acc_rss_activate(hal))
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f005 f8bd 	bl	80062b8 <acc_rss_activate>
 800113e:	4603      	mov	r3, r0
 8001140:	f083 0301 	eor.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <Detector_Init+0x28>
	{
		printf("Failed to activate RSS\n");
 800114a:	4825      	ldr	r0, [pc, #148]	; (80011e0 <Detector_Init+0xb4>)
 800114c:	f00b ff1c 	bl	800cf88 <puts>
		return EXIT_FAILURE;
 8001150:	2301      	movs	r3, #1
 8001152:	e041      	b.n	80011d8 <Detector_Init+0xac>
	}

	acc_detector_presence_configuration_t presence_configuration = acc_detector_presence_configuration_create();
 8001154:	f004 fb4a 	bl	80057ec <acc_detector_presence_configuration_create>
 8001158:	4603      	mov	r3, r0
 800115a:	603b      	str	r3, [r7, #0]
	if (presence_configuration == NULL)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <Detector_Init+0x44>
	{
		printf("Failed to create configuration\n");
 8001162:	4820      	ldr	r0, [pc, #128]	; (80011e4 <Detector_Init+0xb8>)
 8001164:	f00b ff10 	bl	800cf88 <puts>
		acc_rss_deactivate();
 8001168:	f005 f8e4 	bl	8006334 <acc_rss_deactivate>
		return EXIT_FAILURE;
 800116c:	2301      	movs	r3, #1
 800116e:	e033      	b.n	80011d8 <Detector_Init+0xac>
	}

	Update_Configuration(presence_configuration);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f89a 	bl	80012ac <Update_Configuration>

	handle = acc_detector_presence_create(presence_configuration);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f004 fbae 	bl	80058dc <acc_detector_presence_create>
 8001180:	4603      	mov	r3, r0
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <Detector_Init+0xbc>)
 8001184:	6013      	str	r3, [r2, #0]
	if (handle == NULL)
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <Detector_Init+0xbc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10a      	bne.n	80011a4 <Detector_Init+0x78>
	{
		printf("Failed to create detector\n");
 800118e:	4817      	ldr	r0, [pc, #92]	; (80011ec <Detector_Init+0xc0>)
 8001190:	f00b fefa 	bl	800cf88 <puts>
		acc_detector_presence_configuration_destroy(&presence_configuration);
 8001194:	463b      	mov	r3, r7
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fb7c 	bl	8005894 <acc_detector_presence_configuration_destroy>
		acc_rss_deactivate();
 800119c:	f005 f8ca 	bl	8006334 <acc_rss_deactivate>
		return EXIT_FAILURE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e019      	b.n	80011d8 <Detector_Init+0xac>
	}

	acc_detector_presence_configuration_destroy(&presence_configuration);
 80011a4:	463b      	mov	r3, r7
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fb74 	bl	8005894 <acc_detector_presence_configuration_destroy>

	if (!acc_detector_presence_activate(handle))
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <Detector_Init+0xbc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fbf7 	bl	80059a4 <acc_detector_presence_activate>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f083 0301 	eor.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <Detector_Init+0xaa>
	{
		printf("Failed to activate detector\n");
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <Detector_Init+0xc4>)
 80011c4:	f00b fee0 	bl	800cf88 <puts>
		acc_detector_presence_destroy(&handle);
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <Detector_Init+0xbc>)
 80011ca:	f004 fbc5 	bl	8005958 <acc_detector_presence_destroy>
		acc_rss_deactivate();
 80011ce:	f005 f8b1 	bl	8006334 <acc_rss_deactivate>
		return EXIT_FAILURE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <Detector_Init+0xac>
	}

	return EXIT_SUCCESS;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0800f5fc 	.word	0x0800f5fc
 80011e4:	0800f614 	.word	0x0800f614
 80011e8:	20000350 	.word	0x20000350
 80011ec:	0800f634 	.word	0x0800f634
 80011f0:	0800f650 	.word	0x0800f650

080011f4 <Detector_Presence>:

int Detector_Presence(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	bool success = true;
 80011fa:	2301      	movs	r3, #1
 80011fc:	71fb      	strb	r3, [r7, #7]

	success = acc_detector_presence_get_next(handle, &result);
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <Detector_Presence+0x40>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <Detector_Presence+0x44>)
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fc0f 	bl	8005a28 <acc_detector_presence_get_next>
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	if (!success)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f083 0301 	eor.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <Detector_Presence+0x30>
	{
		printf("acc_detector_presence_get_next() failed\n");
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <Detector_Presence+0x48>)
 800121c:	f00b feb4 	bl	800cf88 <puts>
		return EXIT_FAILURE;
 8001220:	2301      	movs	r3, #1
 8001222:	e003      	b.n	800122c <Detector_Presence+0x38>
	}

	acc_integration_sleep_ms(100 / DEFAULT_UPDATE_RATE);
 8001224:	200a      	movs	r0, #10
 8001226:	f7ff ff6f 	bl	8001108 <acc_integration_sleep_ms>

	return EXIT_SUCCESS;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000350 	.word	0x20000350
 8001238:	20000354 	.word	0x20000354
 800123c:	0800f66c 	.word	0x0800f66c

08001240 <Detector_Deactivate>:

int Detector_Deactivate(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	bool deactivated = acc_detector_presence_deactivate(handle);
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <Detector_Deactivate+0x38>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fbc6 	bl	80059dc <acc_detector_presence_deactivate>
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]

	acc_detector_presence_destroy(&handle);
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <Detector_Deactivate+0x38>)
 8001256:	f004 fb7f 	bl	8005958 <acc_detector_presence_destroy>

	acc_rss_deactivate();
 800125a:	f005 f86b 	bl	8006334 <acc_rss_deactivate>

	if (deactivated)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <Detector_Deactivate+0x2e>
	{
		printf("Application finished OK\n");
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <Detector_Deactivate+0x3c>)
 8001266:	f00b fe8f 	bl	800cf88 <puts>
		return EXIT_SUCCESS;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <Detector_Deactivate+0x30>
	}

	return EXIT_FAILURE;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000350 	.word	0x20000350
 800127c:	0800f694 	.word	0x0800f694

08001280 <Get_Detector_Distance>:

float Get_Detector_Distance(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	if (true == result.presence_detected)
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <Get_Detector_Distance+0x24>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <Get_Detector_Distance+0x12>
	{
		return result.presence_distance;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <Get_Detector_Distance+0x24>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	e000      	b.n	8001294 <Get_Detector_Distance+0x14>
	}
	else
	{
		return 9999;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <Get_Detector_Distance+0x28>)
	}
}
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000354 	.word	0x20000354
 80012a8:	461c3c00 	.word	0x461c3c00

080012ac <Update_Configuration>:

static void Update_Configuration(acc_detector_presence_configuration_t presence_configuration)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	acc_detector_presence_configuration_update_rate_set(presence_configuration, DEFAULT_UPDATE_RATE);
 80012b4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f004 fc35 	bl	8005b28 <acc_detector_presence_configuration_update_rate_set>
	acc_detector_presence_configuration_detection_threshold_set(presence_configuration, DEFAULT_DETECTION_THRESHOLD);
 80012be:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f004 fc1a 	bl	8005afc <acc_detector_presence_configuration_detection_threshold_set>
	acc_detector_presence_configuration_start_set(presence_configuration, DEFAULT_START_M);
 80012c8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80012f4 <Update_Configuration+0x48>
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f004 fbe9 	bl	8005aa4 <acc_detector_presence_configuration_start_set>
	acc_detector_presence_configuration_length_set(presence_configuration, DEFAULT_LENGTH_M);
 80012d2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80012f8 <Update_Configuration+0x4c>
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f004 fbfa 	bl	8005ad0 <acc_detector_presence_configuration_length_set>
	acc_detector_presence_configuration_power_save_mode_set(presence_configuration, DEFAULT_POWER_SAVE_MODE);
 80012dc:	2101      	movs	r1, #1
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f004 fc4e 	bl	8005b80 <acc_detector_presence_configuration_power_save_mode_set>
	acc_detector_presence_configuration_nbr_removed_pc_set(presence_configuration, DEFAULT_NBR_REMOVED_PC);
 80012e4:	2100      	movs	r1, #0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f004 fc34 	bl	8005b54 <acc_detector_presence_configuration_nbr_removed_pc_set>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	3e4ccccd 	.word	0x3e4ccccd
 80012f8:	3fb33333 	.word	0x3fb33333

080012fc <Average>:



static float Average(float *tab, int N)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	float avg = 0;
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < N; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e00e      	b.n	8001330 <Average+0x34>
    {
        avg += tab[i];
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001326:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < N; i++)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3301      	adds	r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbec      	blt.n	8001312 <Average+0x16>
    }

    return (avg/(uint32_t)N);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001342:	ed97 7a03 	vldr	s14, [r7, #12]
 8001346:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800134a:	eef0 7a66 	vmov.f32	s15, s13
}
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <Average_Distance>:


float Average_Distance(float distance)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	if (sample_counter < NUMBER_OF_SAMPLES)
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <Average_Distance+0x58>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b09      	cmp	r3, #9
 800136c:	d80d      	bhi.n	800138a <Average_Distance+0x2e>
	{
		buffor[sample_counter] = distance;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <Average_Distance+0x58>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <Average_Distance+0x5c>)
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	601a      	str	r2, [r3, #0]
		sample_counter++;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <Average_Distance+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <Average_Distance+0x58>)
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e00b      	b.n	80013a2 <Average_Distance+0x46>
	}
	else
	{
		avg_distance = Average(buffor, NUMBER_OF_SAMPLES);
 800138a:	210a      	movs	r1, #10
 800138c:	480a      	ldr	r0, [pc, #40]	; (80013b8 <Average_Distance+0x5c>)
 800138e:	f7ff ffb5 	bl	80012fc <Average>
 8001392:	eef0 7a40 	vmov.f32	s15, s0
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <Average_Distance+0x60>)
 8001398:	edc3 7a00 	vstr	s15, [r3]
		sample_counter = 0;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <Average_Distance+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
	}
	return avg_distance;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <Average_Distance+0x60>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ee07 3a90 	vmov	s15, r3
}
 80013aa:	eeb0 0a67 	vmov.f32	s0, s15
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000320 	.word	0x20000320
 80013b8:	20000328 	.word	0x20000328
 80013bc:	20000324 	.word	0x20000324

080013c0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d0:	f023 0218 	bic.w	r2, r3, #24
 80013d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4313      	orrs	r3, r2
 80013dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4313      	orrs	r3, r2
 8001402:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001410:	68fb      	ldr	r3, [r7, #12]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001424:	f000 fcee 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001428:	f000 f864 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142c:	f000 f9ba 	bl	80017a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001430:	f000 f944 	bl	80016bc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001434:	f000 f98e 	bl	8001754 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8001438:	f000 f902 	bl	8001640 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  detector_result = Detector_Init();
 800143c:	f7ff fe76 	bl	800112c <Detector_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <main+0xc0>)
 8001444:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (EXIT_SUCCESS == detector_result)
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <main+0xc0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d136      	bne.n	80014bc <main+0x9c>
	  {
		  detector_result = Detector_Presence();
 800144e:	f7ff fed1 	bl	80011f4 <Detector_Presence>
 8001452:	4603      	mov	r3, r0
 8001454:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <main+0xc0>)
 8001456:	6013      	str	r3, [r2, #0]
		  distance = Get_Detector_Distance();
 8001458:	f7ff ff12 	bl	8001280 <Get_Detector_Distance>
 800145c:	eef0 7a40 	vmov.f32	s15, s0
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <main+0xc4>)
 8001462:	edc3 7a00 	vstr	s15, [r3]

		  if (distance != 9999)
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <main+0xc4>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80014e8 <main+0xc8>
 8001470:	eef4 7a47 	vcmp.f32	s15, s14
 8001474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001478:	d011      	beq.n	800149e <main+0x7e>
		  {
			  counter++;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <main+0xcc>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <main+0xcc>)
 8001484:	701a      	strb	r2, [r3, #0]
			  average_distance = Average_Distance(distance);
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <main+0xc4>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	eeb0 0a67 	vmov.f32	s0, s15
 8001490:	f7ff ff64 	bl	800135c <Average_Distance>
 8001494:	eef0 7a40 	vmov.f32	s15, s0
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <main+0xd0>)
 800149a:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if (counter > 10)
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <main+0xcc>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d9cf      	bls.n	8001446 <main+0x26>
		  {
			  Send_Distance_UART(average_distance);
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <main+0xd0>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eeb0 0a67 	vmov.f32	s0, s15
 80014b0:	f000 f9ec 	bl	800188c <Send_Distance_UART>
			  counter = 0;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <main+0xcc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e7c4      	b.n	8001446 <main+0x26>
		  }
	  }
	  else
	  {
		  detector_result = Detector_Deactivate();
 80014bc:	f7ff fec0 	bl	8001240 <Detector_Deactivate>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <main+0xc0>)
 80014c4:	6013      	str	r3, [r2, #0]
		  counter = 0;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <main+0xcc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
		  if (EXIT_SUCCESS == detector_result)
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <main+0xc0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1b8      	bne.n	8001446 <main+0x26>
		  {
			  detector_result = Detector_Init();
 80014d4:	f7ff fe2a 	bl	800112c <Detector_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a01      	ldr	r2, [pc, #4]	; (80014e0 <main+0xc0>)
 80014dc:	6013      	str	r3, [r2, #0]
	  if (EXIT_SUCCESS == detector_result)
 80014de:	e7b2      	b.n	8001446 <main+0x26>
 80014e0:	20000004 	.word	0x20000004
 80014e4:	20000754 	.word	0x20000754
 80014e8:	461c3c00 	.word	0x461c3c00
 80014ec:	2000074c 	.word	0x2000074c
 80014f0:	20000750 	.word	0x20000750

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0ae      	sub	sp, #184	; 0xb8
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014fe:	2248      	movs	r2, #72	; 0x48
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00a ff68 	bl	800c3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2250      	movs	r2, #80	; 0x50
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f00a ff58 	bl	800c3d8 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001536:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800154c:	f001 f8e6 	bl	800271c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff35 	bl	80013c0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <SystemClock_Config+0x148>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800155e:	4a37      	ldr	r2, [pc, #220]	; (800163c <SystemClock_Config+0x148>)
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <SystemClock_Config+0x148>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001572:	2327      	movs	r3, #39	; 0x27
 8001574:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800157c:	2301      	movs	r3, #1
 800157e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001584:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001586:	2301      	movs	r3, #1
 8001588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fc4b 	bl	8002e44 <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015b4:	f000 f9bc 	bl	8001930 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80015b8:	236f      	movs	r3, #111	; 0x6f
 80015ba:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015bc:	2302      	movs	r3, #2
 80015be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015d8:	2101      	movs	r1, #1
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 ffc0 	bl	8003560 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015e6:	f000 f9a3 	bl	8001930 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80015ea:	f242 1301 	movw	r3, #8449	; 0x2101
 80015ee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80015f0:	2318      	movs	r3, #24
 80015f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80015f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80015fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001600:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001604:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800160a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001610:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001616:	2300      	movs	r3, #0
 8001618:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800161a:	2300      	movs	r3, #0
 800161c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4618      	mov	r0, r3
 8001622:	f002 fbe9 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 800162c:	f000 f980 	bl	8001930 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001630:	f002 fd58 	bl	80040e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001634:	bf00      	nop
 8001636:	37b8      	adds	r7, #184	; 0xb8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	58000400 	.word	0x58000400

08001640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <MX_SPI1_Init+0x78>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_SPI1_Init+0x74>)
 800164c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_SPI1_Init+0x74>)
 800165a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800165e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_SPI1_Init+0x74>)
 800166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001672:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001676:	2220      	movs	r2, #32
 8001678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_SPI1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI1_Init+0x74>)
 800168e:	2207      	movs	r2, #7
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI1_Init+0x74>)
 800169a:	2208      	movs	r2, #8
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_SPI1_Init+0x74>)
 80016a0:	f002 fe37 	bl	8004312 <HAL_SPI_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016aa:	f000 f941 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000364 	.word	0x20000364
 80016b8:	40013000 	.word	0x40013000

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016c2:	4a23      	ldr	r2, [pc, #140]	; (8001750 <MX_USART1_UART_Init+0x94>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_USART1_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001704:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_USART1_UART_Init+0x90>)
 8001706:	f003 fa37 	bl	8004b78 <HAL_UART_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 f90e 	bl	8001930 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001714:	2100      	movs	r1, #0
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_USART1_UART_Init+0x90>)
 8001718:	f003 fee2 	bl	80054e0 <HAL_UARTEx_SetTxFifoThreshold>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001722:	f000 f905 	bl	8001930 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	4808      	ldr	r0, [pc, #32]	; (800174c <MX_USART1_UART_Init+0x90>)
 800172a:	f003 ff17 	bl	800555c <HAL_UARTEx_SetRxFifoThreshold>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001734:	f000 f8fc 	bl	8001930 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_USART1_UART_Init+0x90>)
 800173a:	f003 fe98 	bl	800546e <HAL_UARTEx_DisableFifoMode>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001744:	f000 f8f4 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200003c8 	.word	0x200003c8
 8001750:	40013800 	.word	0x40013800

08001754 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_USB_PCD_Init+0x48>)
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <MX_USB_PCD_Init+0x4c>)
 800175c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_USB_PCD_Init+0x48>)
 8001760:	2208      	movs	r2, #8
 8001762:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <MX_USB_PCD_Init+0x48>)
 8001766:	2202      	movs	r2, #2
 8001768:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USB_PCD_Init+0x48>)
 800176c:	2202      	movs	r2, #2
 800176e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_USB_PCD_Init+0x48>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USB_PCD_Init+0x48>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_USB_PCD_Init+0x48>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USB_PCD_Init+0x48>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_USB_PCD_Init+0x48>)
 800178a:	f000 feb8 	bl	80024fe <HAL_PCD_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001794:	f000 f8cc 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000458 	.word	0x20000458
 80017a0:	40006800 	.word	0x40006800

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	2004      	movs	r0, #4
 80017ba:	f7ff fe17 	bl	80013ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff fe14 	bl	80013ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	2002      	movs	r0, #2
 80017c6:	f7ff fe11 	bl	80013ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	2008      	movs	r0, #8
 80017cc:	f7ff fe0e 	bl	80013ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A111_CS_N_Pin|A111_ENABLE_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2130      	movs	r1, #48	; 0x30
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f000 fe56 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|SPEAKER_VCC_Pin|LD1_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2133      	movs	r1, #51	; 0x33
 80017e0:	4826      	ldr	r0, [pc, #152]	; (800187c <MX_GPIO_Init+0xd8>)
 80017e2:	f000 fe51 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A111_CS_N_Pin A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|A111_ENABLE_Pin;
 80017e6:	2330      	movs	r3, #48	; 0x30
 80017e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f2:	2302      	movs	r3, #2
 80017f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f000 fcbb 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8001802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001806:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_GPIO_Init+0xdc>)
 800180a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f000 fcae 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800181c:	2310      	movs	r3, #16
 800181e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	4815      	ldr	r0, [pc, #84]	; (8001884 <MX_GPIO_Init+0xe0>)
 800182e:	f000 fca3 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin SPEAKER_VCC_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|SPEAKER_VCC_Pin|LD1_Pin;
 8001832:	2333      	movs	r3, #51	; 0x33
 8001834:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_GPIO_Init+0xd8>)
 8001848:	f000 fc96 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800184c:	2303      	movs	r3, #3
 800184e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4619      	mov	r1, r3
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <MX_GPIO_Init+0xe4>)
 800185e:	f000 fc8b 	bl	8002178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2017      	movs	r0, #23
 8001868:	f000 fc51 	bl	800210e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800186c:	2017      	movs	r0, #23
 800186e:	f000 fc68 	bl	8002142 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	48000400 	.word	0x48000400
 8001880:	10110000 	.word	0x10110000
 8001884:	48000800 	.word	0x48000800
 8001888:	48000c00 	.word	0x48000c00

0800188c <Send_Distance_UART>:

/* USER CODE BEGIN 4 */
static void Send_Distance_UART(float distance)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	ed87 0a01 	vstr	s0, [r7, #4]
	if (distance < 9999)
 8001896:	edd7 7a01 	vldr	s15, [r7, #4]
 800189a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001918 <Send_Distance_UART+0x8c>
 800189e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	d51e      	bpl.n	80018e6 <Send_Distance_UART+0x5a>
	{
		distance = distance * 100;
 80018a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800191c <Send_Distance_UART+0x90>
 80018b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b4:	edc7 7a01 	vstr	s15, [r7, #4]
		char uart_buf[23];
		sprintf(uart_buf, "Distance: %.1f [cm]\r\n", (distance));
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7fe fe1d 	bl	80004f8 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	f107 0008 	add.w	r0, r7, #8
 80018c6:	4916      	ldr	r1, [pc, #88]	; (8001920 <Send_Distance_UART+0x94>)
 80018c8:	f00b fb76 	bl	800cfb8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fc55 	bl	8000180 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	f107 0108 	add.w	r1, r7, #8
 80018de:	2364      	movs	r3, #100	; 0x64
 80018e0:	4810      	ldr	r0, [pc, #64]	; (8001924 <Send_Distance_UART+0x98>)
 80018e2:	f003 f999 	bl	8004c18 <HAL_UART_Transmit>
	}

	if (distance < 60)
 80018e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001928 <Send_Distance_UART+0x9c>
 80018ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	d505      	bpl.n	8001904 <Send_Distance_UART+0x78>
	{
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2110      	movs	r1, #16
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <Send_Distance_UART+0xa0>)
 80018fe:	f000 fdc3 	bl	8002488 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_RESET);
	}
}
 8001902:	e004      	b.n	800190e <Send_Distance_UART+0x82>
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2110      	movs	r1, #16
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <Send_Distance_UART+0xa0>)
 800190a:	f000 fdbd 	bl	8002488 <HAL_GPIO_WritePin>
}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	461c3c00 	.word	0x461c3c00
 800191c:	42c80000 	.word	0x42c80000
 8001920:	0800f6ac 	.word	0x0800f6ac
 8001924:	200003c8 	.word	0x200003c8
 8001928:	42700000 	.word	0x42700000
 800192c:	48000400 	.word	0x48000400

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001938:	e7fe      	b.n	8001938 <Error_Handler+0x8>

0800193a <LL_AHB2_GRP1_EnableClock>:
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001948:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4313      	orrs	r3, r2
 8001950:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4013      	ands	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800197a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4313      	orrs	r3, r2
 8001982:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001990:	68fb      	ldr	r3, [r7, #12]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4013      	ands	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_SPI_MspInit+0x5c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d117      	bne.n	8001a32 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a06:	f7ff ffca 	bl	800199e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff ff95 	bl	800193a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8001a10:	23c2      	movs	r3, #194	; 0xc2
 8001a12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a20:	2305      	movs	r3, #5
 8001a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2e:	f000 fba3 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40013000 	.word	0x40013000

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <HAL_UART_MspInit+0x58>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d116      	bne.n	8001a90 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a66:	f7ff ff9a 	bl	800199e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7ff ff65 	bl	800193a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a70:	23c0      	movs	r3, #192	; 0xc0
 8001a72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a80:	2307      	movs	r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <HAL_UART_MspInit+0x5c>)
 8001a8c:	f000 fb74 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_PCD_MspInit+0x5c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d118      	bne.n	8001af4 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7ff ff39 	bl	800193a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ac8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ada:	230a      	movs	r3, #10
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae8:	f000 fb46 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001aec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001af0:	f7ff ff3c 	bl	800196c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40006800 	.word	0x40006800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 f9b4 	bl	8001eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b5c:	f000 fcac 	bl	80024b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_kill>:

int _kill(int pid, int sig)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b7e:	f00a f9fb 	bl	800bf78 <__errno>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2216      	movs	r2, #22
 8001b86:	601a      	str	r2, [r3, #0]
	return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_exit>:

void _exit (int status)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffe7 	bl	8001b74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ba6:	e7fe      	b.n	8001ba6 <_exit+0x12>

08001ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00a      	b.n	8001bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bba:	f3af 8000 	nop.w
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf0      	blt.n	8001bba <_read+0x12>
	}

return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e009      	b.n	8001c08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf1      	blt.n	8001bf4 <_write+0x12>
	}
	return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_close>:

int _close(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c42:	605a      	str	r2, [r3, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_isatty>:

int _isatty(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f00a f960 	bl	800bf78 <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20030000 	.word	0x20030000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	20000758 	.word	0x20000758
 8001cec:	20000828 	.word	0x20000828

08001cf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <SystemInit+0x98>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <SystemInit+0x98>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001d1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <SystemInit+0x9c>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3a:	f023 0305 	bic.w	r3, r3, #5
 8001d3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <SystemInit+0xa0>)
 8001d5c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <SystemInit+0xa0>)
 8001d64:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00
 8001d8c:	faf6fefb 	.word	0xfaf6fefb
 8001d90:	22041000 	.word	0x22041000

08001d94 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001d94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d98:	3304      	adds	r3, #4

08001d9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001d9e:	d3f9      	bcc.n	8001d94 <CopyDataInit>
  bx lr
 8001da0:	4770      	bx	lr

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001da2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001da4:	3004      	adds	r0, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001da6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>
  bx lr
 8001daa:	4770      	bx	lr

08001dac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001dae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001db0:	f7ff ff9e 	bl	8001cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <LoopForever+0x8>)
 8001db6:	490c      	ldr	r1, [pc, #48]	; (8001de8 <LoopForever+0xc>)
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <LoopForever+0x10>)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f7ff ffed 	bl	8001d9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001dc0:	480b      	ldr	r0, [pc, #44]	; (8001df0 <LoopForever+0x14>)
 8001dc2:	490c      	ldr	r1, [pc, #48]	; (8001df4 <LoopForever+0x18>)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f7ff ffee 	bl	8001da6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <LoopForever+0x1c>)
 8001dcc:	490b      	ldr	r1, [pc, #44]	; (8001dfc <LoopForever+0x20>)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f7ff ffe9 	bl	8001da6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dd4:	f00a faa0 	bl	800c318 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001dd8:	f7ff fb22 	bl	8001420 <main>

08001ddc <LoopForever>:

LoopForever:
  b LoopForever
 8001ddc:	e7fe      	b.n	8001ddc <LoopForever>
 8001dde:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001de0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001de4:	20000004 	.word	0x20000004
 8001de8:	20000304 	.word	0x20000304
 8001dec:	08014514 	.word	0x08014514
  INIT_BSS _sbss, _ebss
 8001df0:	20000304 	.word	0x20000304
 8001df4:	20000828 	.word	0x20000828
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001df8:	20030000 	.word	0x20030000
 8001dfc:	20030000 	.word	0x20030000

08001e00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_Init+0x3c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <HAL_Init+0x3c>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	f000 f96c 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e20:	2000      	movs	r0, #0
 8001e22:	f000 f80f 	bl	8001e44 <HAL_InitTick>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	e001      	b.n	8001e36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e32:	f7ff fdcd 	bl	80019d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e36:	79fb      	ldrb	r3, [r7, #7]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	58004000 	.word	0x58004000

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_InitTick+0x6c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d024      	beq.n	8001ea2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e58:	f001 fd2e 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_InitTick+0x6c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	4619      	mov	r1, r3
 8001e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e68:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f974 	bl	800215e <HAL_SYSTICK_Config>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10f      	bne.n	8001e9c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b0f      	cmp	r3, #15
 8001e80:	d809      	bhi.n	8001e96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e82:	2200      	movs	r2, #0
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8a:	f000 f940 	bl	800210e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_InitTick+0x70>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	e004      	b.n	8001ea6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e001      	b.n	8001ea6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000010 	.word	0x20000010
 8001eb4:	2000000c 	.word	0x2000000c

08001eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x24>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_IncTick+0x24>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000010 	.word	0x20000010
 8001edc:	2000075c 	.word	0x2000075c

08001ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_GetTick+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	2000075c 	.word	0x2000075c

08001ef8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_GetTickPrio+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	2000000c 	.word	0x2000000c

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff ffe2 	bl	8001ee0 <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffd2 	bl	8001ee0 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
    {
    }
  }
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000010 	.word	0x20000010

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4907      	ldr	r1, [pc, #28]	; (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f7ff ff8e 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff29 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff40 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff90 	bl	800204c <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5f 	bl	8001ff8 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff33 	bl	8001fbc <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa4 	bl	80020b4 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002186:	e14c      	b.n	8002422 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 813e 	beq.w	800241c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d00b      	beq.n	80021c0 <HAL_GPIO_Init+0x48>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b4:	2b11      	cmp	r3, #17
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b12      	cmp	r3, #18
 80021be:	d130      	bne.n	8002222 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f6:	2201      	movs	r2, #1
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 0201 	and.w	r2, r3, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0xea>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b12      	cmp	r3, #18
 8002260:	d123      	bne.n	80022aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	6939      	ldr	r1, [r7, #16]
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0203 	and.w	r2, r3, #3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8098 	beq.w	800241c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80022ec:	4a54      	ldr	r2, [pc, #336]	; (8002440 <HAL_GPIO_Init+0x2c8>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002316:	d019      	beq.n	800234c <HAL_GPIO_Init+0x1d4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <HAL_GPIO_Init+0x2cc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_GPIO_Init+0x1d0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a49      	ldr	r2, [pc, #292]	; (8002448 <HAL_GPIO_Init+0x2d0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00d      	beq.n	8002344 <HAL_GPIO_Init+0x1cc>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a48      	ldr	r2, [pc, #288]	; (800244c <HAL_GPIO_Init+0x2d4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <HAL_GPIO_Init+0x1c8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a47      	ldr	r2, [pc, #284]	; (8002450 <HAL_GPIO_Init+0x2d8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_GPIO_Init+0x1c4>
 8002338:	2304      	movs	r3, #4
 800233a:	e008      	b.n	800234e <HAL_GPIO_Init+0x1d6>
 800233c:	2307      	movs	r3, #7
 800233e:	e006      	b.n	800234e <HAL_GPIO_Init+0x1d6>
 8002340:	2303      	movs	r3, #3
 8002342:	e004      	b.n	800234e <HAL_GPIO_Init+0x1d6>
 8002344:	2302      	movs	r3, #2
 8002346:	e002      	b.n	800234e <HAL_GPIO_Init+0x1d6>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_GPIO_Init+0x1d6>
 800234c:	2300      	movs	r3, #0
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	f002 0203 	and.w	r2, r2, #3
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	4093      	lsls	r3, r2
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800235e:	4938      	ldr	r1, [pc, #224]	; (8002440 <HAL_GPIO_Init+0x2c8>)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_GPIO_Init+0x2dc>)
 800236e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002392:	4a30      	ldr	r2, [pc, #192]	; (8002454 <HAL_GPIO_Init+0x2dc>)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800239a:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_GPIO_Init+0x2dc>)
 800239c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023c0:	4a24      	ldr	r2, [pc, #144]	; (8002454 <HAL_GPIO_Init+0x2dc>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_GPIO_Init+0x2dc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_GPIO_Init+0x2dc>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x2dc>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <HAL_GPIO_Init+0x2dc>)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f aeab 	bne.w	8002188 <HAL_GPIO_Init+0x10>
  }
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40010000 	.word	0x40010000
 8002444:	48000400 	.word	0x48000400
 8002448:	48000800 	.word	0x48000800
 800244c:	48000c00 	.word	0x48000c00
 8002450:	48001000 	.word	0x48001000
 8002454:	58000800 	.word	0x58000800

08002458 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e001      	b.n	800247a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a4:	e002      	b.n	80024ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f806 	bl	80024e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	58000800 	.word	0x58000800

080024e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002500:	b08b      	sub	sp, #44	; 0x2c
 8002502:	af06      	add	r7, sp, #24
 8002504:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0d7      	b.n	80026c0 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d106      	bne.n	800252a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fabb 	bl	8001aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2203      	movs	r2, #3
 800252e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 f89c 	bl	8005674 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e04c      	b.n	80025dc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	3301      	adds	r3, #1
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	b298      	uxth	r0, r3
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	3336      	adds	r3, #54	; 0x36
 8002580:	4602      	mov	r2, r0
 8002582:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	3303      	adds	r3, #3
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	3338      	adds	r3, #56	; 0x38
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	333c      	adds	r3, #60	; 0x3c
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	3340      	adds	r3, #64	; 0x40
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	3301      	adds	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3ad      	bcc.n	8002542 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e044      	b.n	8002676 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	3301      	adds	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d3b5      	bcc.n	80025ec <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	687e      	ldr	r6, [r7, #4]
 8002688:	466d      	mov	r5, sp
 800268a:	f106 0410 	add.w	r4, r6, #16
 800268e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	602b      	str	r3, [r5, #0]
 8002696:	1d33      	adds	r3, r6, #4
 8002698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800269a:	6838      	ldr	r0, [r7, #0]
 800269c:	f003 f805 	bl	80056aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f805 	bl	80026c8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002700:	b29b      	uxth	r3, r3
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	58000400 	.word	0x58000400

0800273c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_PWREx_GetVoltageRange+0x18>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	58000400 	.word	0x58000400

08002758 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800276a:	d101      	bne.n	8002770 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_RCC_HSE_Enable>:
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_RCC_HSE_Disable>:
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_HSE_IsReady>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027ca:	d101      	bne.n	80027d0 <LL_RCC_HSE_IsReady+0x18>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_RCC_HSE_IsReady+0x1a>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_RCC_HSI_Enable>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_RCC_HSI_Disable>:
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_RCC_HSI_IsReady>:
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d101      	bne.n	8002830 <LL_RCC_HSI_IsReady+0x18>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <LL_RCC_HSI_IsReady+0x1a>
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_RCC_HSI_SetCalibTrimming>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_RCC_HSI48_Enable>:
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_RCC_HSI48_Disable>:
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_HSI48_IsReady>:
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d101      	bne.n	80028c2 <LL_RCC_HSI48_IsReady+0x18>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_RCC_HSI48_IsReady+0x1a>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_RCC_LSE_Enable>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_RCC_LSE_Disable>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_RCC_LSE_EnableBypass>:
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_RCC_LSE_DisableBypass>:
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b02      	cmp	r3, #2
 8002968:	d101      	bne.n	800296e <LL_RCC_LSE_IsReady+0x18>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_RCC_LSE_IsReady+0x1a>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d101      	bne.n	80029d6 <LL_RCC_LSI1_IsReady+0x18>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <LL_RCC_LSI1_IsReady+0x1a>
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d101      	bne.n	8002a3e <LL_RCC_LSI2_IsReady+0x18>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_RCC_LSI2_IsReady+0x1a>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6013      	str	r3, [r2, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d101      	bne.n	8002aca <LL_RCC_MSI_IsReady+0x16>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_RCC_MSI_IsReady+0x18>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b0e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2bb0      	cmp	r3, #176	; 0xb0
 8002b14:	d901      	bls.n	8002b1a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002b16:	23b0      	movs	r3, #176	; 0xb0
 8002b18:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002b1a:	687b      	ldr	r3, [r7, #4]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 0203 	bic.w	r2, r3, #3
 8002b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bf6:	f023 020f 	bic.w	r2, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	6013      	str	r3, [r2, #0]
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d16:	d101      	bne.n	8002d1c <LL_RCC_PLL_IsReady+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_RCC_PLL_IsReady+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d101      	bne.n	8002da2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dc2:	d101      	bne.n	8002dc8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d101      	bne.n	8002dee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e0c:	d101      	bne.n	8002e12 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e30:	d101      	bne.n	8002e36 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b08d      	sub	sp, #52	; 0x34
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e37f      	b.n	8003556 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8092 	beq.w	8002f88 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e64:	f7ff fe89 	bl	8002b7a <LL_RCC_GetSysClkSource>
 8002e68:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6a:	f7ff ff82 	bl	8002d72 <LL_RCC_PLL_GetMainSource>
 8002e6e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x3e>
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d14c      	bne.n	8002f16 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d149      	bne.n	8002f16 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e82:	f7ff fe17 	bl	8002ab4 <LL_RCC_MSI_IsReady>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_OscConfig+0x54>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e35e      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002e9c:	f7ff fe2f 	bl	8002afe <LL_RCC_MSI_GetRange>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	429c      	cmp	r4, r3
 8002ea4:	d914      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd44 	bl	8003938 <RCC_SetFlashLatencyFromMSIRange>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e34d      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fe09 	bl	8002ad6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fe2d 	bl	8002b28 <LL_RCC_MSI_SetCalibTrimming>
 8002ece:	e013      	b.n	8002ef8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fdfe 	bl	8002ad6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fe22 	bl	8002b28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fd25 	bl	8003938 <RCC_SetFlashLatencyFromMSIRange>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e32e      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ef8:	f000 fcde 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4aa5      	ldr	r2, [pc, #660]	; (8003194 <HAL_RCC_OscConfig+0x350>)
 8002f00:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f02:	4ba5      	ldr	r3, [pc, #660]	; (8003198 <HAL_RCC_OscConfig+0x354>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe ff9c 	bl	8001e44 <HAL_InitTick>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d039      	beq.n	8002f86 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e31f      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01e      	beq.n	8002f5c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f1e:	f7ff fdab 	bl	8002a78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f22:	f7fe ffdd 	bl	8001ee0 <HAL_GetTick>
 8002f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f2a:	f7fe ffd9 	bl	8001ee0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e30c      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f3c:	f7ff fdba 	bl	8002ab4 <LL_RCC_MSI_IsReady>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f1      	beq.n	8002f2a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fdc3 	bl	8002ad6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fde7 	bl	8002b28 <LL_RCC_MSI_SetCalibTrimming>
 8002f5a:	e015      	b.n	8002f88 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f5c:	f7ff fd9b 	bl	8002a96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f60:	f7fe ffbe 	bl	8001ee0 <HAL_GetTick>
 8002f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f68:	f7fe ffba 	bl	8001ee0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e2ed      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f7a:	f7ff fd9b 	bl	8002ab4 <LL_RCC_MSI_IsReady>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f1      	bne.n	8002f68 <HAL_RCC_OscConfig+0x124>
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d04e      	beq.n	8003032 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f94:	f7ff fdf1 	bl	8002b7a <LL_RCC_GetSysClkSource>
 8002f98:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9a:	f7ff feea 	bl	8002d72 <LL_RCC_PLL_GetMainSource>
 8002f9e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x16e>
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d10d      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb2:	f7ff fc01 	bl	80027b8 <LL_RCC_HSE_IsReady>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d039      	beq.n	8003030 <HAL_RCC_OscConfig+0x1ec>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d135      	bne.n	8003030 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e2c6      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x194>
 8002fd2:	f7ff fbd3 	bl	800277c <LL_RCC_HSE_Enable>
 8002fd6:	e001      	b.n	8002fdc <HAL_RCC_OscConfig+0x198>
 8002fd8:	f7ff fbdf 	bl	800279a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d012      	beq.n	800300a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe ff7c 	bl	8001ee0 <HAL_GetTick>
 8002fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe ff78 	bl	8001ee0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e2ab      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ffe:	f7ff fbdb 	bl	80027b8 <LL_RCC_HSE_IsReady>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f1      	beq.n	8002fec <HAL_RCC_OscConfig+0x1a8>
 8003008:	e013      	b.n	8003032 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe ff69 	bl	8001ee0 <HAL_GetTick>
 800300e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003012:	f7fe ff65 	bl	8001ee0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e298      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003024:	f7ff fbc8 	bl	80027b8 <LL_RCC_HSE_IsReady>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f1      	bne.n	8003012 <HAL_RCC_OscConfig+0x1ce>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d051      	beq.n	80030e2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303e:	f7ff fd9c 	bl	8002b7a <LL_RCC_GetSysClkSource>
 8003042:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003044:	f7ff fe95 	bl	8002d72 <LL_RCC_PLL_GetMainSource>
 8003048:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d005      	beq.n	800305c <HAL_RCC_OscConfig+0x218>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d113      	bne.n	800307e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d110      	bne.n	800307e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305c:	f7ff fbdc 	bl	8002818 <LL_RCC_HSI_IsReady>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x22e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e271      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fbe0 	bl	800283c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800307c:	e031      	b.n	80030e2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003086:	f7ff fba9 	bl	80027dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe ff29 	bl	8001ee0 <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe ff25 	bl	8001ee0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e258      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80030a4:	f7ff fbb8 	bl	8002818 <LL_RCC_HSI_IsReady>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f1      	beq.n	8003092 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fbc2 	bl	800283c <LL_RCC_HSI_SetCalibTrimming>
 80030b8:	e013      	b.n	80030e2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	f7ff fb9e 	bl	80027fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe ff0f 	bl	8001ee0 <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7fe ff0b 	bl	8001ee0 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e23e      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80030d8:	f7ff fb9e 	bl	8002818 <LL_RCC_HSI_IsReady>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f1      	bne.n	80030c6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80a4 	beq.w	8003244 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d077      	beq.n	80031f4 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d04b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003110:	f7ff fc55 	bl	80029be <LL_RCC_LSI1_IsReady>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d113      	bne.n	8003142 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800311a:	f7ff fc2e 	bl	800297a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800311e:	f7fe fedf 	bl	8001ee0 <HAL_GetTick>
 8003122:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003126:	f7fe fedb 	bl	8001ee0 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e20e      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003138:	f7ff fc41 	bl	80029be <LL_RCC_LSI1_IsReady>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f1      	beq.n	8003126 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003142:	f7ff fc4e 	bl	80029e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe fecb 	bl	8001ee0 <HAL_GetTick>
 800314a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800314e:	f7fe fec7 	bl	8001ee0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1fa      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003160:	f7ff fc61 	bl	8002a26 <LL_RCC_LSI2_IsReady>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f1      	beq.n	800314e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fc6b 	bl	8002a4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003174:	f7ff fc12 	bl	800299c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe feb2 	bl	8001ee0 <HAL_GetTick>
 800317c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800317e:	e00d      	b.n	800319c <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003180:	f7fe feae 	bl	8001ee0 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d906      	bls.n	800319c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1e1      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
 8003192:	bf00      	nop
 8003194:	20000008 	.word	0x20000008
 8003198:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() != 0U)
 800319c:	f7ff fc0f 	bl	80029be <LL_RCC_LSI1_IsReady>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ec      	bne.n	8003180 <HAL_RCC_OscConfig+0x33c>
 80031a6:	e04d      	b.n	8003244 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80031a8:	f7ff fbe7 	bl	800297a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fe98 	bl	8001ee0 <HAL_GetTick>
 80031b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80031b4:	f7fe fe94 	bl	8001ee0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1c7      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80031c6:	f7ff fbfa 	bl	80029be <LL_RCC_LSI1_IsReady>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f1      	beq.n	80031b4 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80031d0:	f7ff fc18 	bl	8002a04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031d6:	f7fe fe83 	bl	8001ee0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1b6      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80031e8:	f7ff fc1d 	bl	8002a26 <LL_RCC_LSI2_IsReady>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f1      	bne.n	80031d6 <HAL_RCC_OscConfig+0x392>
 80031f2:	e027      	b.n	8003244 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80031f4:	f7ff fc06 	bl	8002a04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe fe72 	bl	8001ee0 <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003200:	f7fe fe6e 	bl	8001ee0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b03      	cmp	r3, #3
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e1a1      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003212:	f7ff fc08 	bl	8002a26 <LL_RCC_LSI2_IsReady>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f1      	bne.n	8003200 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800321c:	f7ff fbbe 	bl	800299c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fe fe5e 	bl	8001ee0 <HAL_GetTick>
 8003224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003228:	f7fe fe5a 	bl	8001ee0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e18d      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800323a:	f7ff fbc0 	bl	80029be <LL_RCC_LSI1_IsReady>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f1      	bne.n	8003228 <HAL_RCC_OscConfig+0x3e4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d05b      	beq.n	8003308 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003250:	4ba7      	ldr	r3, [pc, #668]	; (80034f0 <HAL_RCC_OscConfig+0x6ac>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d114      	bne.n	8003286 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800325c:	f7ff fa5e 	bl	800271c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003260:	f7fe fe3e 	bl	8001ee0 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fe fe3a 	bl	8001ee0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e16d      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327a:	4b9d      	ldr	r3, [pc, #628]	; (80034f0 <HAL_RCC_OscConfig+0x6ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d102      	bne.n	8003294 <HAL_RCC_OscConfig+0x450>
 800328e:	f7ff fb1e 	bl	80028ce <LL_RCC_LSE_Enable>
 8003292:	e00c      	b.n	80032ae <HAL_RCC_OscConfig+0x46a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d104      	bne.n	80032a6 <HAL_RCC_OscConfig+0x462>
 800329c:	f7ff fb39 	bl	8002912 <LL_RCC_LSE_EnableBypass>
 80032a0:	f7ff fb15 	bl	80028ce <LL_RCC_LSE_Enable>
 80032a4:	e003      	b.n	80032ae <HAL_RCC_OscConfig+0x46a>
 80032a6:	f7ff fb23 	bl	80028f0 <LL_RCC_LSE_Disable>
 80032aa:	f7ff fb43 	bl	8002934 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d014      	beq.n	80032e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe fe13 	bl	8001ee0 <HAL_GetTick>
 80032ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe fe0f 	bl	8001ee0 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e140      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80032d4:	f7ff fb3f 	bl	8002956 <LL_RCC_LSE_IsReady>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ef      	beq.n	80032be <HAL_RCC_OscConfig+0x47a>
 80032de:	e013      	b.n	8003308 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe fdfe 	bl	8001ee0 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fdfa 	bl	8001ee0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e12b      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032fe:	f7ff fb2a 	bl	8002956 <LL_RCC_LSE_IsReady>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ef      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02c      	beq.n	800336e <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d014      	beq.n	8003346 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800331c:	f7ff faa3 	bl	8002866 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fdde 	bl	8001ee0 <HAL_GetTick>
 8003324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003328:	f7fe fdda 	bl	8001ee0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e10d      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800333a:	f7ff fab6 	bl	80028aa <LL_RCC_HSI48_IsReady>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f1      	beq.n	8003328 <HAL_RCC_OscConfig+0x4e4>
 8003344:	e013      	b.n	800336e <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003346:	f7ff fa9f 	bl	8002888 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe fdc9 	bl	8001ee0 <HAL_GetTick>
 800334e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003352:	f7fe fdc5 	bl	8001ee0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0f8      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003364:	f7ff faa1 	bl	80028aa <LL_RCC_HSI48_IsReady>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f1      	bne.n	8003352 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80ee 	beq.w	8003554 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003378:	f7ff fbff 	bl	8002b7a <LL_RCC_GetSysClkSource>
 800337c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	2b02      	cmp	r3, #2
 800338c:	f040 80b4 	bne.w	80034f8 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	429a      	cmp	r2, r3
 800339c:	d123      	bne.n	80033e6 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d11c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d114      	bne.n	80033e6 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d10d      	bne.n	80033e6 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d05d      	beq.n	80034a2 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d058      	beq.n	800349e <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0ab      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033fe:	f7ff fc72 	bl	8002ce6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003402:	f7fe fd6d 	bl	8001ee0 <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fd69 	bl	8001ee0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e09c      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCC_OscConfig+0x6b0>)
 8003432:	4013      	ands	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800343c:	4311      	orrs	r1, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003442:	0212      	lsls	r2, r2, #8
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003450:	4311      	orrs	r1, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003456:	430a      	orrs	r2, r1
 8003458:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800345c:	4313      	orrs	r3, r2
 800345e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003460:	f7ff fc32 	bl	8002cc8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003472:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003474:	f7fe fd34 	bl	8001ee0 <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe fd30 	bl	8001ee0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e063      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ef      	beq.n	800347c <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349c:	e05a      	b.n	8003554 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e059      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d151      	bne.n	8003554 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034b0:	f7ff fc0a 	bl	8002cc8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034c4:	f7fe fd0c 	bl	8001ee0 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe fd08 	bl	8001ee0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e03b      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ef      	beq.n	80034cc <HAL_RCC_OscConfig+0x688>
 80034ec:	e032      	b.n	8003554 <HAL_RCC_OscConfig+0x710>
 80034ee:	bf00      	nop
 80034f0:	58000400 	.word	0x58000400
 80034f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d028      	beq.n	8003550 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	f7ff fbf2 	bl	8002ce6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800350c:	f023 0303 	bic.w	r3, r3, #3
 8003510:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003524:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe fcdb 	bl	8001ee0 <HAL_GetTick>
 800352a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe fcd7 	bl	8001ee0 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ef      	bne.n	800352e <HAL_RCC_OscConfig+0x6ea>
 800354e:	e001      	b.n	8003554 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3734      	adds	r7, #52	; 0x34
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}
 800355e:	bf00      	nop

08003560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e12d      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4b98      	ldr	r3, [pc, #608]	; (80037d8 <HAL_RCC_ClockConfig+0x278>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d91b      	bls.n	80035ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b95      	ldr	r3, [pc, #596]	; (80037d8 <HAL_RCC_ClockConfig+0x278>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 0207 	bic.w	r2, r3, #7
 800358a:	4993      	ldr	r1, [pc, #588]	; (80037d8 <HAL_RCC_ClockConfig+0x278>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003592:	f7fe fca5 	bl	8001ee0 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003598:	e008      	b.n	80035ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800359a:	f7fe fca1 	bl	8001ee0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e111      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ac:	4b8a      	ldr	r3, [pc, #552]	; (80037d8 <HAL_RCC_ClockConfig+0x278>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d1ef      	bne.n	800359a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fae1 	bl	8002b92 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035d0:	f7fe fc86 	bl	8001ee0 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035d8:	f7fe fc82 	bl	8001ee0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0f2      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035ea:	f7ff fbce 	bl	8002d8a <LL_RCC_IsActiveFlag_HPRE>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f1      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d016      	beq.n	800362e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fad8 	bl	8002bba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800360a:	f7fe fc69 	bl	8001ee0 <HAL_GetTick>
 800360e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003612:	f7fe fc65 	bl	8001ee0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0d5      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003624:	f7ff fbc3 	bl	8002dae <LL_RCC_IsActiveFlag_C2HPRE>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f1      	beq.n	8003612 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d016      	beq.n	8003668 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fad1 	bl	8002be6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003644:	f7fe fc4c 	bl	8001ee0 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800364c:	f7fe fc48 	bl	8001ee0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0b8      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800365e:	f7ff fbb9 	bl	8002dd4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f1      	beq.n	800364c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d016      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff facb 	bl	8002c14 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800367e:	f7fe fc2f 	bl	8001ee0 <HAL_GetTick>
 8003682:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003686:	f7fe fc2b 	bl	8001ee0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e09b      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003698:	f7ff fbaf 	bl	8002dfa <LL_RCC_IsActiveFlag_PPRE1>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f1      	beq.n	8003686 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fac1 	bl	8002c3c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036ba:	f7fe fc11 	bl	8001ee0 <HAL_GetTick>
 80036be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036c2:	f7fe fc0d 	bl	8001ee0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e07d      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036d4:	f7ff fba3 	bl	8002e1e <LL_RCC_IsActiveFlag_PPRE2>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f1      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d043      	beq.n	8003772 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d106      	bne.n	8003700 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80036f2:	f7ff f861 	bl	80027b8 <LL_RCC_HSE_IsReady>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11e      	bne.n	800373a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e067      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d106      	bne.n	8003716 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003708:	f7ff fafc 	bl	8002d04 <LL_RCC_PLL_IsReady>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d113      	bne.n	800373a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e05c      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800371e:	f7ff f9c9 	bl	8002ab4 <LL_RCC_MSI_IsReady>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e051      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800372c:	f7ff f874 	bl	8002818 <LL_RCC_HSI_IsReady>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e04a      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fa07 	bl	8002b52 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003744:	f7fe fbcc 	bl	8001ee0 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374a:	e00a      	b.n	8003762 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374c:	f7fe fbc8 	bl	8001ee0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e036      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	f7ff fa0a 	bl	8002b7a <LL_RCC_GetSysClkSource>
 8003766:	4602      	mov	r2, r0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	429a      	cmp	r2, r3
 8003770:	d1ec      	bne.n	800374c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_ClockConfig+0x278>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d21b      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_RCC_ClockConfig+0x278>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4913      	ldr	r1, [pc, #76]	; (80037d8 <HAL_RCC_ClockConfig+0x278>)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003790:	f7fe fba6 	bl	8001ee0 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	e008      	b.n	80037aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003798:	f7fe fba2 	bl	8001ee0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e012      	b.n	80037d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_ClockConfig+0x278>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1ef      	bne.n	8003798 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037b8:	f000 f87e 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80037bc:	4603      	mov	r3, r0
 80037be:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_RCC_ClockConfig+0x27c>)
 80037c0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80037c2:	f7fe fb99 	bl	8001ef8 <HAL_GetTickPrio>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fb3b 	bl	8001e44 <HAL_InitTick>
 80037ce:	4603      	mov	r3, r0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	58004000 	.word	0x58004000
 80037dc:	20000008 	.word	0x20000008

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e6:	f7ff f9c8 	bl	8002b7a <LL_RCC_GetSysClkSource>
 80037ea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80037f2:	f7ff f984 	bl	8002afe <LL_RCC_MSI_GetRange>
 80037f6:	4603      	mov	r3, r0
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8003800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e04b      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d102      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800380e:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e045      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d10a      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800381a:	f7fe ff9d 	bl	8002758 <LL_RCC_HSE_IsEnabledDiv2>
 800381e:	4603      	mov	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d102      	bne.n	800382a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003824:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e03a      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e037      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003830:	f7ff fa9f 	bl	8002d72 <LL_RCC_PLL_GetMainSource>
 8003834:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d003      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x64>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d003      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x6a>
 8003842:	e00d      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003844:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003846:	60bb      	str	r3, [r7, #8]
        break;
 8003848:	e015      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800384a:	f7fe ff85 	bl	8002758 <LL_RCC_HSE_IsEnabledDiv2>
 800384e:	4603      	mov	r3, r0
 8003850:	2b01      	cmp	r3, #1
 8003852:	d102      	bne.n	800385a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003856:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003858:	e00d      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800385c:	60bb      	str	r3, [r7, #8]
        break;
 800385e:	e00a      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003860:	f7ff f94d 	bl	8002afe <LL_RCC_MSI_GetRange>
 8003864:	4603      	mov	r3, r0
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	60bb      	str	r3, [r7, #8]
        break;
 8003874:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003876:	f7ff fa57 	bl	8002d28 <LL_RCC_PLL_GetN>
 800387a:	4602      	mov	r2, r0
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	fb03 f402 	mul.w	r4, r3, r2
 8003882:	f7ff fa6a 	bl	8002d5a <LL_RCC_PLL_GetDivider>
 8003886:	4603      	mov	r3, r0
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	3301      	adds	r3, #1
 800388c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003890:	f7ff fa57 	bl	8002d42 <LL_RCC_PLL_GetR>
 8003894:	4603      	mov	r3, r0
 8003896:	0f5b      	lsrs	r3, r3, #29
 8003898:	3301      	adds	r3, #1
 800389a:	fbb4 f3f3 	udiv	r3, r4, r3
 800389e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd90      	pop	{r4, r7, pc}
 80038aa:	bf00      	nop
 80038ac:	08011150 	.word	0x08011150
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	01e84800 	.word	0x01e84800

080038b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b598      	push	{r3, r4, r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80038bc:	f7ff ff90 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 80038c0:	4604      	mov	r4, r0
 80038c2:	f7ff f9cf 	bl	8002c64 <LL_RCC_GetAHBPrescaler>
 80038c6:	4603      	mov	r3, r0
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	4a03      	ldr	r2, [pc, #12]	; (80038dc <HAL_RCC_GetHCLKFreq+0x24>)
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd98      	pop	{r3, r4, r7, pc}
 80038dc:	080110f0 	.word	0x080110f0

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b598      	push	{r3, r4, r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038e4:	f7ff ffe8 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038e8:	4604      	mov	r4, r0
 80038ea:	f7ff f9d5 	bl	8002c98 <LL_RCC_GetAPB1Prescaler>
 80038ee:	4603      	mov	r3, r0
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	4a04      	ldr	r2, [pc, #16]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd98      	pop	{r3, r4, r7, pc}
 8003908:	08011130 	.word	0x08011130

0800390c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800390c:	b598      	push	{r3, r4, r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003910:	f7ff ffd2 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003914:	4604      	mov	r4, r0
 8003916:	f7ff f9cb 	bl	8002cb0 <LL_RCC_GetAPB2Prescaler>
 800391a:	4603      	mov	r3, r0
 800391c:	0adb      	lsrs	r3, r3, #11
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd98      	pop	{r3, r4, r7, pc}
 8003934:	08011130 	.word	0x08011130

08003938 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2bb0      	cmp	r3, #176	; 0xb0
 8003944:	d903      	bls.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e007      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800395e:	f7ff f98d 	bl	8002c7c <LL_RCC_GetAHB4Prescaler>
 8003962:	4603      	mov	r3, r0
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	0c9c      	lsrs	r4, r3, #18
 8003982:	f7fe fedb 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003986:	4603      	mov	r3, r0
 8003988:	4619      	mov	r1, r3
 800398a:	4620      	mov	r0, r4
 800398c:	f000 f80c 	bl	80039a8 <RCC_SetFlashLatency>
 8003990:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}
 800399a:	bf00      	nop
 800399c:	08011150 	.word	0x08011150
 80039a0:	080110f0 	.word	0x080110f0
 80039a4:	431bde83 	.word	0x431bde83

080039a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b093      	sub	sp, #76	; 0x4c
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <RCC_SetFlashLatency+0xe8>)
 80039b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80039b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80039be:	4a35      	ldr	r2, [pc, #212]	; (8003a94 <RCC_SetFlashLatency+0xec>)
 80039c0:	f107 031c 	add.w	r3, r7, #28
 80039c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80039c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80039ca:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <RCC_SetFlashLatency+0xf0>)
 80039cc:	f107 040c 	add.w	r4, r7, #12
 80039d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80039d6:	2300      	movs	r3, #0
 80039d8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e0:	d11a      	bne.n	8003a18 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	643b      	str	r3, [r7, #64]	; 0x40
 80039e6:	e013      	b.n	8003a10 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	3348      	adds	r3, #72	; 0x48
 80039ee:	443b      	add	r3, r7
 80039f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d807      	bhi.n	8003a0a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	3348      	adds	r3, #72	; 0x48
 8003a00:	443b      	add	r3, r7
 8003a02:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003a06:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003a08:	e020      	b.n	8003a4c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d9e8      	bls.n	80039e8 <RCC_SetFlashLatency+0x40>
 8003a16:	e019      	b.n	8003a4c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1c:	e013      	b.n	8003a46 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	3348      	adds	r3, #72	; 0x48
 8003a24:	443b      	add	r3, r7
 8003a26:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d807      	bhi.n	8003a40 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	3348      	adds	r3, #72	; 0x48
 8003a36:	443b      	add	r3, r7
 8003a38:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003a3e:	e005      	b.n	8003a4c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a42:	3301      	adds	r3, #1
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d9e8      	bls.n	8003a1e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <RCC_SetFlashLatency+0xf4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 0207 	bic.w	r2, r3, #7
 8003a54:	4911      	ldr	r1, [pc, #68]	; (8003a9c <RCC_SetFlashLatency+0xf4>)
 8003a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a5c:	f7fe fa40 	bl	8001ee0 <HAL_GetTick>
 8003a60:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a62:	e008      	b.n	8003a76 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a64:	f7fe fa3c 	bl	8001ee0 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e007      	b.n	8003a86 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <RCC_SetFlashLatency+0xf4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1ef      	bne.n	8003a64 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	374c      	adds	r7, #76	; 0x4c
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd90      	pop	{r4, r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	0800f6c4 	.word	0x0800f6c4
 8003a94:	0800f6d4 	.word	0x0800f6d4
 8003a98:	0800f6e0 	.word	0x0800f6e0
 8003a9c:	58004000 	.word	0x58004000

08003aa0 <LL_RCC_LSE_IsEnabled>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <LL_RCC_LSE_IsEnabled+0x18>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LL_RCC_LSE_IsEnabled+0x1a>
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_LSE_IsReady>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d101      	bne.n	8003adc <LL_RCC_LSE_IsReady+0x18>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <LL_RCC_LSE_IsReady+0x1a>
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_MSI_EnablePLLMode>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003af6:	f043 0304 	orr.w	r3, r3, #4
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_RCC_SetRFWKPClockSource>:
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_SetSMPSClockSource>:
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f023 0203 	bic.w	r2, r3, #3
 8003b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_SetSMPSPrescaler>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_RCC_SetUSARTClockSource>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_SetLPUARTClockSource>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <LL_RCC_SetI2CClockSource>:
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	401a      	ands	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_RCC_SetLPTIMClockSource>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_SetSAIClockSource>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_RCC_SetRNGClockSource>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_SetCLK48ClockSource>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_RCC_SetUSBClockSource>:
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ffe3 	bl	8003ca0 <LL_RCC_SetCLK48ClockSource>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <LL_RCC_SetADCClockSource>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_RCC_SetRTCClockSource>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_RCC_GetRTCClockSource>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_RCC_ForceBackupDomainReset>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_RCC_PLLSAI1_Enable>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003daa:	6013      	str	r3, [r2, #0]
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_RCC_PLLSAI1_Disable>:
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dc8:	6013      	str	r3, [r2, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_RCC_PLLSAI1_IsReady>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de6:	d101      	bne.n	8003dec <LL_RCC_PLLSAI1_IsReady+0x18>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003e00:	2300      	movs	r3, #0
 8003e02:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e04:	2300      	movs	r3, #0
 8003e06:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d034      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e1c:	d021      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003e1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e22:	d81b      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e28:	d01d      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e2e:	d815      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00b      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e38:	d110      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e48:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e4a:	e00d      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f94d 	bl	80040f0 <RCCEx_PLLSAI1_ConfigNP>
 8003e56:	4603      	mov	r3, r0
 8003e58:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e5a:	e005      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	77fb      	strb	r3, [r7, #31]
        break;
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e68:	7ffb      	ldrb	r3, [r7, #31]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fee8 	bl	8003c48 <LL_RCC_SetSAIClockSource>
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7ffb      	ldrb	r3, [r7, #31]
 8003e7c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d046      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003e8a:	f7ff ff56 	bl	8003d3a <LL_RCC_GetRTCClockSource>
 8003e8e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d03c      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e9a:	f7fe fc3f 	bl	800271c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff30 	bl	8003d0e <LL_RCC_SetRTCClockSource>
 8003eae:	e02e      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003eba:	f7ff ff4b 	bl	8003d54 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003ebe:	f7ff ff5a 	bl	8003d76 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003eda:	f7ff fde1 	bl	8003aa0 <LL_RCC_LSE_IsEnabled>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d114      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ee4:	f7fd fffc 	bl	8001ee0 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003eea:	e00b      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fd fff8 	bl	8001ee0 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d902      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	77fb      	strb	r3, [r7, #31]
              break;
 8003f02:	e004      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f04:	f7ff fdde 	bl	8003ac4 <LL_RCC_LSE_IsReady>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d1ee      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003f0e:	7ffb      	ldrb	r3, [r7, #31]
 8003f10:	77bb      	strb	r3, [r7, #30]
 8003f12:	e001      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	7ffb      	ldrb	r3, [r7, #31]
 8003f16:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fe2a 	bl	8003b82 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fe35 	bl	8003bae <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d004      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fe5d 	bl	8003c14 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d004      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fe52 	bl	8003c14 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fe2a 	bl	8003bda <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fe1f 	bl	8003bda <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d022      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fe8d 	bl	8003ccc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fba:	d107      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fca:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f8e3 	bl	80041a6 <RCCEx_PLLSAI1_ConfigNQ>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d02b      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d008      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800400c:	d003      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fe2a 	bl	8003c74 <LL_RCC_SetRNGClockSource>
 8004020:	e00a      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	2000      	movs	r0, #0
 800402e:	f7ff fe21 	bl	8003c74 <LL_RCC_SetRNGClockSource>
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff fe34 	bl	8003ca0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004040:	d107      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004050:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	2b00      	cmp	r3, #0
 800405c:	d022      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fe3d 	bl	8003ce2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004070:	d107      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408a:	d10b      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f8e3 	bl	800425c <RCCEx_PLLSAI1_ConfigNR>
 8004096:	4603      	mov	r3, r0
 8004098:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fd26 	bl	8003b06 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fd45 	bl	8003b5a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fd2c 	bl	8003b32 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80040da:	7fbb      	ldrb	r3, [r7, #30]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80040e8:	f7ff fcfe 	bl	8003ae8 <LL_RCC_MSI_EnablePLLMode>
}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80040fc:	f7ff fe5b 	bl	8003db6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004100:	f7fd feee 	bl	8001ee0 <HAL_GetTick>
 8004104:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004106:	e009      	b.n	800411c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004108:	f7fd feea 	bl	8001ee0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d902      	bls.n	800411c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	73fb      	strb	r3, [r7, #15]
      break;
 800411a:	e004      	b.n	8004126 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800411c:	f7ff fe5a 	bl	8003dd4 <LL_RCC_PLLSAI1_IsReady>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d137      	bne.n	800419c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004140:	4313      	orrs	r3, r2
 8004142:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004156:	4313      	orrs	r3, r2
 8004158:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800415a:	f7ff fe1d 	bl	8003d98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415e:	f7fd febf 	bl	8001ee0 <HAL_GetTick>
 8004162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004164:	e009      	b.n	800417a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004166:	f7fd febb 	bl	8001ee0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d902      	bls.n	800417a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	73fb      	strb	r3, [r7, #15]
        break;
 8004178:	e004      	b.n	8004184 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800417a:	f7ff fe2b 	bl	8003dd4 <LL_RCC_PLLSAI1_IsReady>
 800417e:	4603      	mov	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d1f0      	bne.n	8004166 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d108      	bne.n	800419c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004198:	4313      	orrs	r3, r2
 800419a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80041b2:	f7ff fe00 	bl	8003db6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041b6:	f7fd fe93 	bl	8001ee0 <HAL_GetTick>
 80041ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041bc:	e009      	b.n	80041d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041be:	f7fd fe8f 	bl	8001ee0 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d902      	bls.n	80041d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	73fb      	strb	r3, [r7, #15]
      break;
 80041d0:	e004      	b.n	80041dc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041d2:	f7ff fdff 	bl	8003dd4 <LL_RCC_PLLSAI1_IsReady>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d137      	bne.n	8004252 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800420c:	4313      	orrs	r3, r2
 800420e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004210:	f7ff fdc2 	bl	8003d98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fd fe64 	bl	8001ee0 <HAL_GetTick>
 8004218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800421a:	e009      	b.n	8004230 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800421c:	f7fd fe60 	bl	8001ee0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	73fb      	strb	r3, [r7, #15]
        break;
 800422e:	e004      	b.n	800423a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004230:	f7ff fdd0 	bl	8003dd4 <LL_RCC_PLLSAI1_IsReady>
 8004234:	4603      	mov	r3, r0
 8004236:	2b01      	cmp	r3, #1
 8004238:	d1f0      	bne.n	800421c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d108      	bne.n	8004252 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424e:	4313      	orrs	r3, r2
 8004250:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004268:	f7ff fda5 	bl	8003db6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800426c:	f7fd fe38 	bl	8001ee0 <HAL_GetTick>
 8004270:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004272:	e009      	b.n	8004288 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004274:	f7fd fe34 	bl	8001ee0 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d902      	bls.n	8004288 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	73fb      	strb	r3, [r7, #15]
      break;
 8004286:	e004      	b.n	8004292 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004288:	f7ff fda4 	bl	8003dd4 <LL_RCC_PLLSAI1_IsReady>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d137      	bne.n	8004308 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ac:	4313      	orrs	r3, r2
 80042ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80042b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80042c6:	f7ff fd67 	bl	8003d98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ca:	f7fd fe09 	bl	8001ee0 <HAL_GetTick>
 80042ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042d0:	e009      	b.n	80042e6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042d2:	f7fd fe05 	bl	8001ee0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d902      	bls.n	80042e6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	73fb      	strb	r3, [r7, #15]
        break;
 80042e4:	e004      	b.n	80042f0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042e6:	f7ff fd75 	bl	8003dd4 <LL_RCC_PLLSAI1_IsReady>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d1f0      	bne.n	80042d2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004304:	4313      	orrs	r3, r2
 8004306:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e095      	b.n	8004450 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004334:	d009      	beq.n	800434a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	61da      	str	r2, [r3, #28]
 800433c:	e005      	b.n	800434a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7fd fb3b 	bl	80019e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004380:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800438a:	d902      	bls.n	8004392 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e002      	b.n	8004398 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004396:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043a0:	d007      	beq.n	80043b2 <HAL_SPI_Init+0xa0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043aa:	d002      	beq.n	80043b2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f4:	ea42 0103 	orr.w	r1, r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	f003 0204 	and.w	r2, r3, #4
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800442e:	ea42 0103 	orr.w	r1, r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004466:	2301      	movs	r3, #1
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_SPI_TransmitReceive+0x26>
 800447a:	2302      	movs	r3, #2
 800447c:	e1fb      	b.n	8004876 <HAL_SPI_TransmitReceive+0x41e>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004486:	f7fd fd2b 	bl	8001ee0 <HAL_GetTick>
 800448a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004492:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800449a:	887b      	ldrh	r3, [r7, #2]
 800449c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800449e:	887b      	ldrh	r3, [r7, #2]
 80044a0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044a2:	7efb      	ldrb	r3, [r7, #27]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d00e      	beq.n	80044c6 <HAL_SPI_TransmitReceive+0x6e>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ae:	d106      	bne.n	80044be <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <HAL_SPI_TransmitReceive+0x66>
 80044b8:	7efb      	ldrb	r3, [r7, #27]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d003      	beq.n	80044c6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80044be:	2302      	movs	r3, #2
 80044c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80044c4:	e1cd      	b.n	8004862 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x80>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x80>
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d103      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80044de:	e1c0      	b.n	8004862 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d003      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2205      	movs	r2, #5
 80044f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	887a      	ldrh	r2, [r7, #2]
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	887a      	ldrh	r2, [r7, #2]
 8004520:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004536:	d802      	bhi.n	800453e <HAL_SPI_TransmitReceive+0xe6>
 8004538:	8a3b      	ldrh	r3, [r7, #16]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d908      	bls.n	8004550 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	e007      	b.n	8004560 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d007      	beq.n	800457e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004586:	d97c      	bls.n	8004682 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_SPI_TransmitReceive+0x13e>
 8004590:	8a7b      	ldrh	r3, [r7, #18]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d169      	bne.n	800466a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	881a      	ldrh	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	1c9a      	adds	r2, r3, #2
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ba:	e056      	b.n	800466a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d11b      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x1aa>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d016      	beq.n	8004602 <HAL_SPI_TransmitReceive+0x1aa>
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d113      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	881a      	ldrh	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	1c9a      	adds	r2, r3, #2
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d11c      	bne.n	800464a <HAL_SPI_TransmitReceive+0x1f2>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d016      	beq.n	800464a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	b292      	uxth	r2, r2
 8004628:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004646:	2301      	movs	r3, #1
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800464a:	f7fd fc49 	bl	8001ee0 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004656:	429a      	cmp	r2, r3
 8004658:	d807      	bhi.n	800466a <HAL_SPI_TransmitReceive+0x212>
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d003      	beq.n	800466a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004668:	e0fb      	b.n	8004862 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1a3      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x164>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d19d      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x164>
 8004680:	e0df      	b.n	8004842 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x23a>
 800468a:	8a7b      	ldrh	r3, [r7, #18]
 800468c:	2b01      	cmp	r3, #1
 800468e:	f040 80cb 	bne.w	8004828 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d912      	bls.n	80046c2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b02      	subs	r3, #2
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046c0:	e0b2      	b.n	8004828 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	7812      	ldrb	r2, [r2, #0]
 80046ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046e8:	e09e      	b.n	8004828 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d134      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x30a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d02f      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x30a>
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	2b01      	cmp	r3, #1
 8004706:	d12c      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d912      	bls.n	8004738 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	881a      	ldrh	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	1c9a      	adds	r2, r3, #2
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b02      	subs	r3, #2
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004736:	e012      	b.n	800475e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d148      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x3aa>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d042      	beq.n	8004802 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d923      	bls.n	80047d0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	b292      	uxth	r2, r2
 8004794:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	1c9a      	adds	r2, r3, #2
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b02      	subs	r3, #2
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d81f      	bhi.n	80047fe <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	e016      	b.n	80047fe <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f103 020c 	add.w	r2, r3, #12
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047fe:	2301      	movs	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004802:	f7fd fb6d 	bl	8001ee0 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480e:	429a      	cmp	r2, r3
 8004810:	d803      	bhi.n	800481a <HAL_SPI_TransmitReceive+0x3c2>
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d102      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x3c8>
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004826:	e01c      	b.n	8004862 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	f47f af5b 	bne.w	80046ea <HAL_SPI_TransmitReceive+0x292>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	f47f af54 	bne.w	80046ea <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f930 	bl	8004aac <SPI_EndRxTxTransaction>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d006      	beq.n	8004860 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	661a      	str	r2, [r3, #96]	; 0x60
 800485e:	e000      	b.n	8004862 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004876:	4618      	mov	r0, r3
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004890:	f7fd fb26 	bl	8001ee0 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	4413      	add	r3, r2
 800489e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048a0:	f7fd fb1e 	bl	8001ee0 <HAL_GetTick>
 80048a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048a6:	4b39      	ldr	r3, [pc, #228]	; (800498c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	015b      	lsls	r3, r3, #5
 80048ac:	0d1b      	lsrs	r3, r3, #20
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048b6:	e054      	b.n	8004962 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d050      	beq.n	8004962 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048c0:	f7fd fb0e 	bl	8001ee0 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d902      	bls.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d13d      	bne.n	8004952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ee:	d111      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d004      	beq.n	8004904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d107      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491c:	d10f      	bne.n	800493e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e017      	b.n	8004982 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3b01      	subs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	429a      	cmp	r2, r3
 800497e:	d19b      	bne.n	80048b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000008 	.word	0x20000008

08004990 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800499e:	f7fd fa9f 	bl	8001ee0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	4413      	add	r3, r2
 80049ac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049ae:	f7fd fa97 	bl	8001ee0 <HAL_GetTick>
 80049b2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80049b4:	4b3c      	ldr	r3, [pc, #240]	; (8004aa8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	00da      	lsls	r2, r3, #3
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	0d1b      	lsrs	r3, r3, #20
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80049cc:	e05f      	b.n	8004a8e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049d4:	d106      	bne.n	80049e4 <SPI_WaitFifoStateUntilTimeout+0x54>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d103      	bne.n	80049e4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d050      	beq.n	8004a8e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049ec:	f7fd fa78 	bl	8001ee0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d902      	bls.n	8004a02 <SPI_WaitFifoStateUntilTimeout+0x72>
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d13d      	bne.n	8004a7e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1a:	d111      	bne.n	8004a40 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a24:	d004      	beq.n	8004a30 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2e:	d107      	bne.n	8004a40 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d10f      	bne.n	8004a6a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e010      	b.n	8004aa0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4013      	ands	r3, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d197      	bne.n	80049ce <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000008 	.word	0x20000008

08004aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff ff63 	bl	8004990 <SPI_WaitFifoStateUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e027      	b.n	8004b30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff fec8 	bl	8004880 <SPI_WaitFlagStateUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e014      	b.n	8004b30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff ff3c 	bl	8004990 <SPI_WaitFifoStateUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b22:	f043 0220 	orr.w	r2, r3, #32
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e000      	b.n	8004b30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <LL_RCC_GetUSARTClockSource>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4013      	ands	r3, r2
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <LL_RCC_GetLPUARTClockSource>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4013      	ands	r3, r2
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e042      	b.n	8004c10 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fc ff4f 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2224      	movs	r2, #36	; 0x24
 8004ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8c2 	bl	8004d44 <UART_SetConfig>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e022      	b.n	8004c10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fade 	bl	8005194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb65 	bl	80052d8 <UART_CheckIdleState>
 8004c0e:	4603      	mov	r3, r0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	f040 8083 	bne.w	8004d3a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_UART_Transmit+0x28>
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e07b      	b.n	8004d3c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Transmit+0x3a>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e074      	b.n	8004d3c <HAL_UART_Transmit+0x124>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2221      	movs	r2, #33	; 0x21
 8004c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c6a:	f7fd f939 	bl	8001ee0 <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d108      	bne.n	8004c9c <HAL_UART_Transmit+0x84>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e003      	b.n	8004ca4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004cac:	e02c      	b.n	8004d08 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2180      	movs	r1, #128	; 0x80
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fb58 	bl	800536e <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e039      	b.n	8004d3c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	e007      	b.n	8004cf6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1cc      	bne.n	8004cae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2140      	movs	r1, #64	; 0x40
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fb25 	bl	800536e <UART_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e006      	b.n	8004d3c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e000      	b.n	8004d3c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d3a:	2302      	movs	r3, #2
  }
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d48:	b08c      	sub	sp, #48	; 0x30
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4baf      	ldr	r3, [pc, #700]	; (8005030 <UART_SetConfig+0x2ec>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4aa4      	ldr	r2, [pc, #656]	; (8005034 <UART_SetConfig+0x2f0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	4313      	orrs	r3, r2
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004dba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	f023 010f 	bic.w	r1, r3, #15
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a95      	ldr	r2, [pc, #596]	; (8005038 <UART_SetConfig+0x2f4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d125      	bne.n	8004e34 <UART_SetConfig+0xf0>
 8004de8:	2003      	movs	r0, #3
 8004dea:	f7ff fea5 	bl	8004b38 <LL_RCC_GetUSARTClockSource>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d81b      	bhi.n	8004e2c <UART_SetConfig+0xe8>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0xb8>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e0d 	.word	0x08004e0d
 8004e00:	08004e1d 	.word	0x08004e1d
 8004e04:	08004e15 	.word	0x08004e15
 8004e08:	08004e25 	.word	0x08004e25
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e12:	e042      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e14:	2302      	movs	r3, #2
 8004e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e1a:	e03e      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e22:	e03a      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e24:	2308      	movs	r3, #8
 8004e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2a:	e036      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e32:	e032      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a7e      	ldr	r2, [pc, #504]	; (8005034 <UART_SetConfig+0x2f0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d12a      	bne.n	8004e94 <UART_SetConfig+0x150>
 8004e3e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004e42:	f7ff fe89 	bl	8004b58 <LL_RCC_GetLPUARTClockSource>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e4c:	d01a      	beq.n	8004e84 <UART_SetConfig+0x140>
 8004e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e52:	d81b      	bhi.n	8004e8c <UART_SetConfig+0x148>
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e58:	d00c      	beq.n	8004e74 <UART_SetConfig+0x130>
 8004e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5e:	d815      	bhi.n	8004e8c <UART_SetConfig+0x148>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <UART_SetConfig+0x128>
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d008      	beq.n	8004e7c <UART_SetConfig+0x138>
 8004e6a:	e00f      	b.n	8004e8c <UART_SetConfig+0x148>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e72:	e012      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e74:	2302      	movs	r3, #2
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7a:	e00e      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e82:	e00a      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e84:	2308      	movs	r3, #8
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8a:	e006      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e92:	e002      	b.n	8004e9a <UART_SetConfig+0x156>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a65      	ldr	r2, [pc, #404]	; (8005034 <UART_SetConfig+0x2f0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	f040 8097 	bne.w	8004fd4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d823      	bhi.n	8004ef6 <UART_SetConfig+0x1b2>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <UART_SetConfig+0x170>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ef7 	.word	0x08004ef7
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004ee7 	.word	0x08004ee7
 8004ec8:	08004ef7 	.word	0x08004ef7
 8004ecc:	08004ef7 	.word	0x08004ef7
 8004ed0:	08004ef7 	.word	0x08004ef7
 8004ed4:	08004eef 	.word	0x08004eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fe fd02 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ede:	e010      	b.n	8004f02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee0:	4b56      	ldr	r3, [pc, #344]	; (800503c <UART_SetConfig+0x2f8>)
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ee4:	e00d      	b.n	8004f02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee6:	f7fe fc7b 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eec:	e009      	b.n	8004f02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef4:	e005      	b.n	8004f02 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 812b 	beq.w	8005160 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	4a4c      	ldr	r2, [pc, #304]	; (8005040 <UART_SetConfig+0x2fc>)
 8004f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f14:	461a      	mov	r2, r3
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	4413      	add	r3, r2
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d305      	bcc.n	8004f3a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d903      	bls.n	8004f42 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f40:	e10e      	b.n	8005160 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2200      	movs	r2, #0
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	60fa      	str	r2, [r7, #12]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <UART_SetConfig+0x2fc>)
 8004f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2200      	movs	r2, #0
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f64:	f7fb fdf8 	bl	8000b58 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	020b      	lsls	r3, r1, #8
 8004f7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f7e:	0202      	lsls	r2, r0, #8
 8004f80:	6979      	ldr	r1, [r7, #20]
 8004f82:	6849      	ldr	r1, [r1, #4]
 8004f84:	0849      	lsrs	r1, r1, #1
 8004f86:	2000      	movs	r0, #0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	eb12 0804 	adds.w	r8, r2, r4
 8004f90:	eb43 0905 	adc.w	r9, r3, r5
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	469a      	mov	sl, r3
 8004f9c:	4693      	mov	fp, r2
 8004f9e:	4652      	mov	r2, sl
 8004fa0:	465b      	mov	r3, fp
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	f7fb fdd7 	bl	8000b58 <__aeabi_uldivmod>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4613      	mov	r3, r2
 8004fb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb8:	d308      	bcc.n	8004fcc <UART_SetConfig+0x288>
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc0:	d204      	bcs.n	8004fcc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	e0c9      	b.n	8005160 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fd2:	e0c5      	b.n	8005160 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d16e      	bne.n	80050bc <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004fde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2b07      	cmp	r3, #7
 8004fe6:	d82d      	bhi.n	8005044 <UART_SetConfig+0x300>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x2ac>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005045 	.word	0x08005045
 8004ffc:	0800501f 	.word	0x0800501f
 8005000:	08005045 	.word	0x08005045
 8005004:	08005045 	.word	0x08005045
 8005008:	08005045 	.word	0x08005045
 800500c:	08005027 	.word	0x08005027
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7fe fc7c 	bl	800390c <HAL_RCC_GetPCLK2Freq>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005016:	e01b      	b.n	8005050 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <UART_SetConfig+0x2f8>)
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800501c:	e018      	b.n	8005050 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501e:	f7fe fbdf 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005024:	e014      	b.n	8005050 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800502c:	e010      	b.n	8005050 <UART_SetConfig+0x30c>
 800502e:	bf00      	nop
 8005030:	cfff69f3 	.word	0xcfff69f3
 8005034:	40008000 	.word	0x40008000
 8005038:	40013800 	.word	0x40013800
 800503c:	00f42400 	.word	0x00f42400
 8005040:	08011190 	.word	0x08011190
      default:
        pclk = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800504e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8084 	beq.w	8005160 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	4a4b      	ldr	r2, [pc, #300]	; (800518c <UART_SetConfig+0x448>)
 800505e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005062:	461a      	mov	r2, r3
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	fbb3 f3f2 	udiv	r3, r3, r2
 800506a:	005a      	lsls	r2, r3, #1
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	441a      	add	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	2b0f      	cmp	r3, #15
 8005084:	d916      	bls.n	80050b4 <UART_SetConfig+0x370>
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d212      	bcs.n	80050b4 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f023 030f 	bic.w	r3, r3, #15
 8005096:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	b29b      	uxth	r3, r3
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	8bfb      	ldrh	r3, [r7, #30]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	8bfa      	ldrh	r2, [r7, #30]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	e055      	b.n	8005160 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050ba:	e051      	b.n	8005160 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050c0:	3b01      	subs	r3, #1
 80050c2:	2b07      	cmp	r3, #7
 80050c4:	d821      	bhi.n	800510a <UART_SetConfig+0x3c6>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x388>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050ed 	.word	0x080050ed
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	080050fb 	.word	0x080050fb
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	0800510b 	.word	0x0800510b
 80050e4:	0800510b 	.word	0x0800510b
 80050e8:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe fc0e 	bl	800390c <HAL_RCC_GetPCLK2Freq>
 80050f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050f2:	e010      	b.n	8005116 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b26      	ldr	r3, [pc, #152]	; (8005190 <UART_SetConfig+0x44c>)
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fb71 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005108:	e005      	b.n	8005116 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005114:	bf00      	nop
    }

    if (pclk != 0U)
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d021      	beq.n	8005160 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	4a1a      	ldr	r2, [pc, #104]	; (800518c <UART_SetConfig+0x448>)
 8005122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005126:	461a      	mov	r2, r3
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	fbb3 f2f2 	udiv	r2, r3, r2
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	441a      	add	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	b29b      	uxth	r3, r3
 8005140:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b0f      	cmp	r3, #15
 8005146:	d908      	bls.n	800515a <UART_SetConfig+0x416>
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514e:	d204      	bcs.n	800515a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	60da      	str	r2, [r3, #12]
 8005158:	e002      	b.n	8005160 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2201      	movs	r2, #1
 8005164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2201      	movs	r2, #1
 800516c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2200      	movs	r2, #0
 8005174:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2200      	movs	r2, #0
 800517a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800517c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005180:	4618      	mov	r0, r3
 8005182:	3730      	adds	r7, #48	; 0x30
 8005184:	46bd      	mov	sp, r7
 8005186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800518a:	bf00      	nop
 800518c:	08011190 	.word	0x08011190
 8005190:	00f42400 	.word	0x00f42400

08005194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01a      	beq.n	80052aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005292:	d10a      	bne.n	80052aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af02      	add	r7, sp, #8
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052e8:	f7fc fdfa 	bl	8001ee0 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d10e      	bne.n	800531a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f82f 	bl	800536e <UART_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e025      	b.n	8005366 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b04      	cmp	r3, #4
 8005326:	d10e      	bne.n	8005346 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f819 	bl	800536e <UART_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e00f      	b.n	8005366 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800537e:	e062      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d05e      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005388:	f7fc fdaa 	bl	8001ee0 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	429a      	cmp	r2, r3
 8005396:	d302      	bcc.n	800539e <UART_WaitOnFlagUntilTimeout+0x30>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11d      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e045      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d02e      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f6:	d126      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005400:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005410:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e00f      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d08d      	beq.n	8005380 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_UARTEx_DisableFifoMode+0x16>
 8005480:	2302      	movs	r3, #2
 8005482:	e027      	b.n	80054d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2224      	movs	r2, #36	; 0x24
 8005490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e02d      	b.n	8005554 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2224      	movs	r2, #36	; 0x24
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0201 	bic.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f84f 	bl	80055d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005570:	2302      	movs	r3, #2
 8005572:	e02d      	b.n	80055d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2224      	movs	r2, #36	; 0x24
 8005580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f811 	bl	80055d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d108      	bne.n	80055fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055f8:	e031      	b.n	800565e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055fa:	2308      	movs	r3, #8
 80055fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055fe:	2308      	movs	r3, #8
 8005600:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	0e5b      	lsrs	r3, r3, #25
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	0f5b      	lsrs	r3, r3, #29
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005622:	7bbb      	ldrb	r3, [r7, #14]
 8005624:	7b3a      	ldrb	r2, [r7, #12]
 8005626:	4911      	ldr	r1, [pc, #68]	; (800566c <UARTEx_SetNbDataToProcess+0x94>)
 8005628:	5c8a      	ldrb	r2, [r1, r2]
 800562a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800562e:	7b3a      	ldrb	r2, [r7, #12]
 8005630:	490f      	ldr	r1, [pc, #60]	; (8005670 <UARTEx_SetNbDataToProcess+0x98>)
 8005632:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005634:	fb93 f3f2 	sdiv	r3, r3, r2
 8005638:	b29a      	uxth	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	7b7a      	ldrb	r2, [r7, #13]
 8005644:	4909      	ldr	r1, [pc, #36]	; (800566c <UARTEx_SetNbDataToProcess+0x94>)
 8005646:	5c8a      	ldrb	r2, [r1, r2]
 8005648:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800564c:	7b7a      	ldrb	r2, [r7, #13]
 800564e:	4908      	ldr	r1, [pc, #32]	; (8005670 <UARTEx_SetNbDataToProcess+0x98>)
 8005650:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005652:	fb93 f3f2 	sdiv	r3, r3, r2
 8005656:	b29a      	uxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	080111a8 	.word	0x080111a8
 8005670:	080111b0 	.word	0x080111b0

08005674 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800567c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005680:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	b29b      	uxth	r3, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	b29b      	uxth	r3, r3
 8005692:	4013      	ands	r3, r2
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056aa:	b084      	sub	sp, #16
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	f107 0014 	add.w	r0, r7, #20
 80056b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	b004      	add	sp, #16
 80056ea:	4770      	bx	lr

080056ec <get_sparse_data>:
 80056ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ee:	4606      	mov	r6, r0
 80056f0:	b087      	sub	sp, #28
 80056f2:	6840      	ldr	r0, [r0, #4]
 80056f4:	460f      	mov	r7, r1
 80056f6:	4615      	mov	r5, r2
 80056f8:	f001 fb22 	bl	8006d40 <acc_service_sparse_get_next_by_reference>
 80056fc:	4604      	mov	r4, r0
 80056fe:	b1f0      	cbz	r0, 800573e <get_sparse_data+0x52>
 8005700:	782b      	ldrb	r3, [r5, #0]
 8005702:	b15b      	cbz	r3, 800571c <get_sparse_data+0x30>
 8005704:	4c1c      	ldr	r4, [pc, #112]	; (8005778 <get_sparse_data+0x8c>)
 8005706:	4a1d      	ldr	r2, [pc, #116]	; (800577c <get_sparse_data+0x90>)
 8005708:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800570a:	491d      	ldr	r1, [pc, #116]	; (8005780 <get_sparse_data+0x94>)
 800570c:	2000      	movs	r0, #0
 800570e:	4798      	blx	r3
 8005710:	786b      	ldrb	r3, [r5, #1]
 8005712:	b9e3      	cbnz	r3, 800574e <get_sparse_data+0x62>
 8005714:	2400      	movs	r4, #0
 8005716:	4620      	mov	r0, r4
 8005718:	b007      	add	sp, #28
 800571a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571c:	786b      	ldrb	r3, [r5, #1]
 800571e:	68f5      	ldr	r5, [r6, #12]
 8005720:	b9fb      	cbnz	r3, 8005762 <get_sparse_data+0x76>
 8005722:	b14d      	cbz	r5, 8005738 <get_sparse_data+0x4c>
 8005724:	6870      	ldr	r0, [r6, #4]
 8005726:	a901      	add	r1, sp, #4
 8005728:	f001 fae6 	bl	8006cf8 <acc_service_sparse_get_metadata>
 800572c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005730:	6932      	ldr	r2, [r6, #16]
 8005732:	6838      	ldr	r0, [r7, #0]
 8005734:	0049      	lsls	r1, r1, #1
 8005736:	47a8      	blx	r5
 8005738:	4620      	mov	r0, r4
 800573a:	b007      	add	sp, #28
 800573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <get_sparse_data+0x8c>)
 8005740:	4a10      	ldr	r2, [pc, #64]	; (8005784 <get_sparse_data+0x98>)
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	490e      	ldr	r1, [pc, #56]	; (8005780 <get_sparse_data+0x94>)
 8005746:	4798      	blx	r3
 8005748:	4620      	mov	r0, r4
 800574a:	b007      	add	sp, #28
 800574c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800574e:	f002 f9e3 	bl	8007b18 <acc_rss_integration_log_level>
 8005752:	2800      	cmp	r0, #0
 8005754:	d0de      	beq.n	8005714 <get_sparse_data+0x28>
 8005756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005758:	4a0b      	ldr	r2, [pc, #44]	; (8005788 <get_sparse_data+0x9c>)
 800575a:	4909      	ldr	r1, [pc, #36]	; (8005780 <get_sparse_data+0x94>)
 800575c:	2001      	movs	r0, #1
 800575e:	4798      	blx	r3
 8005760:	e7d8      	b.n	8005714 <get_sparse_data+0x28>
 8005762:	f002 f9d9 	bl	8007b18 <acc_rss_integration_log_level>
 8005766:	2800      	cmp	r0, #0
 8005768:	d0db      	beq.n	8005722 <get_sparse_data+0x36>
 800576a:	4b03      	ldr	r3, [pc, #12]	; (8005778 <get_sparse_data+0x8c>)
 800576c:	4a06      	ldr	r2, [pc, #24]	; (8005788 <get_sparse_data+0x9c>)
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	4903      	ldr	r1, [pc, #12]	; (8005780 <get_sparse_data+0x94>)
 8005772:	2001      	movs	r0, #1
 8005774:	4798      	blx	r3
 8005776:	e7d4      	b.n	8005722 <get_sparse_data+0x36>
 8005778:	200007ec 	.word	0x200007ec
 800577c:	080111b8 	.word	0x080111b8
 8005780:	080111cc 	.word	0x080111cc
 8005784:	080111f0 	.word	0x080111f0
 8005788:	080111e0 	.word	0x080111e0

0800578c <presence_service_setup.isra.0>:
 800578c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800578e:	4606      	mov	r6, r0
 8005790:	b087      	sub	sp, #28
 8005792:	6850      	ldr	r0, [r2, #4]
 8005794:	460f      	mov	r7, r1
 8005796:	4615      	mov	r5, r2
 8005798:	f001 f884 	bl	80068a4 <acc_service_create>
 800579c:	6038      	str	r0, [r7, #0]
 800579e:	b198      	cbz	r0, 80057c8 <presence_service_setup.isra.0+0x3c>
 80057a0:	2300      	movs	r3, #0
 80057a2:	a901      	add	r1, sp, #4
 80057a4:	ac01      	add	r4, sp, #4
 80057a6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80057aa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80057ae:	9305      	str	r3, [sp, #20]
 80057b0:	f001 faa2 	bl	8006cf8 <acc_service_sparse_get_metadata>
 80057b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b6:	3534      	adds	r5, #52	; 0x34
 80057b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	4b07      	ldr	r3, [pc, #28]	; (80057dc <presence_service_setup.isra.0+0x50>)
 80057be:	602a      	str	r2, [r5, #0]
 80057c0:	2001      	movs	r0, #1
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	b007      	add	sp, #28
 80057c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <presence_service_setup.isra.0+0x54>)
 80057ca:	4a06      	ldr	r2, [pc, #24]	; (80057e4 <presence_service_setup.isra.0+0x58>)
 80057cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ce:	4906      	ldr	r1, [pc, #24]	; (80057e8 <presence_service_setup.isra.0+0x5c>)
 80057d0:	4604      	mov	r4, r0
 80057d2:	4798      	blx	r3
 80057d4:	4620      	mov	r0, r4
 80057d6:	b007      	add	sp, #28
 80057d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057da:	bf00      	nop
 80057dc:	acc54323 	.word	0xacc54323
 80057e0:	200007ec 	.word	0x200007ec
 80057e4:	08011208 	.word	0x08011208
 80057e8:	080111cc 	.word	0x080111cc

080057ec <acc_detector_presence_configuration_create>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4920      	ldr	r1, [pc, #128]	; (8005870 <acc_detector_presence_configuration_create+0x84>)
 80057f0:	2259      	movs	r2, #89	; 0x59
 80057f2:	2050      	movs	r0, #80	; 0x50
 80057f4:	f002 f93a 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 80057f8:	4604      	mov	r4, r0
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d030      	beq.n	8005860 <acc_detector_presence_configuration_create+0x74>
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <acc_detector_presence_configuration_create+0x88>)
 8005800:	6003      	str	r3, [r0, #0]
 8005802:	f001 f9cf 	bl	8006ba4 <acc_service_sparse_configuration_create>
 8005806:	2103      	movs	r1, #3
 8005808:	6060      	str	r0, [r4, #4]
 800580a:	f000 ffc5 	bl	8006798 <acc_service_profile_set>
 800580e:	6860      	ldr	r0, [r4, #4]
 8005810:	4e19      	ldr	r6, [pc, #100]	; (8005878 <acc_detector_presence_configuration_create+0x8c>)
 8005812:	2110      	movs	r1, #16
 8005814:	f001 fa62 	bl	8006cdc <acc_service_sparse_configuration_sweeps_per_frame_set>
 8005818:	6860      	ldr	r0, [r4, #4]
 800581a:	f000 fea1 	bl	8006560 <acc_service_repetition_mode_on_demand_set>
 800581e:	2300      	movs	r3, #0
 8005820:	4916      	ldr	r1, [pc, #88]	; (800587c <acc_detector_presence_configuration_create+0x90>)
 8005822:	4817      	ldr	r0, [pc, #92]	; (8005880 <acc_detector_presence_configuration_create+0x94>)
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <acc_detector_presence_configuration_create+0x98>)
 8005826:	61e1      	str	r1, [r4, #28]
 8005828:	63a3      	str	r3, [r4, #56]	; 0x38
 800582a:	2110      	movs	r1, #16
 800582c:	6363      	str	r3, [r4, #52]	; 0x34
 800582e:	6463      	str	r3, [r4, #68]	; 0x44
 8005830:	6423      	str	r3, [r4, #64]	; 0x40
 8005832:	2300      	movs	r3, #0
 8005834:	6220      	str	r0, [r4, #32]
 8005836:	f04f 557f 	mov.w	r5, #1069547520	; 0x3fc00000
 800583a:	4813      	ldr	r0, [pc, #76]	; (8005888 <acc_detector_presence_configuration_create+0x9c>)
 800583c:	6262      	str	r2, [r4, #36]	; 0x24
 800583e:	8121      	strh	r1, [r4, #8]
 8005840:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005844:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005848:	8623      	strh	r3, [r4, #48]	; 0x30
 800584a:	61a0      	str	r0, [r4, #24]
 800584c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005850:	60e6      	str	r6, [r4, #12]
 8005852:	6125      	str	r5, [r4, #16]
 8005854:	6162      	str	r2, [r4, #20]
 8005856:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005858:	62a1      	str	r1, [r4, #40]	; 0x28
 800585a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800585c:	4620      	mov	r0, r4
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <acc_detector_presence_configuration_create+0xa0>)
 8005862:	4a0b      	ldr	r2, [pc, #44]	; (8005890 <acc_detector_presence_configuration_create+0xa4>)
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	4902      	ldr	r1, [pc, #8]	; (8005870 <acc_detector_presence_configuration_create+0x84>)
 8005868:	4798      	blx	r3
 800586a:	4620      	mov	r0, r4
 800586c:	bd70      	pop	{r4, r5, r6, pc}
 800586e:	bf00      	nop
 8005870:	080111cc 	.word	0x080111cc
 8005874:	acc12ad9 	.word	0xacc12ad9
 8005878:	41200000 	.word	0x41200000
 800587c:	3e4ccccd 	.word	0x3e4ccccd
 8005880:	3e19999a 	.word	0x3e19999a
 8005884:	3f19999a 	.word	0x3f19999a
 8005888:	41a00000 	.word	0x41a00000
 800588c:	200007ec 	.word	0x200007ec
 8005890:	08011228 	.word	0x08011228

08005894 <acc_detector_presence_configuration_destroy>:
 8005894:	b1c0      	cbz	r0, 80058c8 <acc_detector_presence_configuration_destroy+0x34>
 8005896:	b510      	push	{r4, lr}
 8005898:	4604      	mov	r4, r0
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	b118      	cbz	r0, 80058a6 <acc_detector_presence_configuration_destroy+0x12>
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <acc_detector_presence_configuration_destroy+0x38>)
 80058a0:	6802      	ldr	r2, [r0, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d007      	beq.n	80058b6 <acc_detector_presence_configuration_destroy+0x22>
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <acc_detector_presence_configuration_destroy+0x3c>)
 80058a8:	4a0a      	ldr	r2, [pc, #40]	; (80058d4 <acc_detector_presence_configuration_destroy+0x40>)
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	490a      	ldr	r1, [pc, #40]	; (80058d8 <acc_detector_presence_configuration_destroy+0x44>)
 80058ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b2:	2000      	movs	r0, #0
 80058b4:	4718      	bx	r3
 80058b6:	3004      	adds	r0, #4
 80058b8:	f001 f9fe 	bl	8006cb8 <acc_service_sparse_configuration_destroy>
 80058bc:	6820      	ldr	r0, [r4, #0]
 80058be:	f002 f919 	bl	8007af4 <acc_rss_integration_mem_free>
 80058c2:	2300      	movs	r3, #0
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd10      	pop	{r4, pc}
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	acc12ad9 	.word	0xacc12ad9
 80058d0:	200007ec 	.word	0x200007ec
 80058d4:	08011248 	.word	0x08011248
 80058d8:	080111cc 	.word	0x080111cc

080058dc <acc_detector_presence_create>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	4606      	mov	r6, r0
 80058e0:	b1d0      	cbz	r0, 8005918 <acc_detector_presence_create+0x3c>
 80058e2:	4919      	ldr	r1, [pc, #100]	; (8005948 <acc_detector_presence_create+0x6c>)
 80058e4:	22a1      	movs	r2, #161	; 0xa1
 80058e6:	2014      	movs	r0, #20
 80058e8:	f002 f8c0 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 80058ec:	4604      	mov	r4, r0
 80058ee:	b320      	cbz	r0, 800593a <acc_detector_presence_create+0x5e>
 80058f0:	1d07      	adds	r7, r0, #4
 80058f2:	4639      	mov	r1, r7
 80058f4:	4632      	mov	r2, r6
 80058f6:	f7ff ff49 	bl	800578c <presence_service_setup.isra.0>
 80058fa:	4605      	mov	r5, r0
 80058fc:	b1b8      	cbz	r0, 800592e <acc_detector_presence_create+0x52>
 80058fe:	f106 0008 	add.w	r0, r6, #8
 8005902:	f000 fb79 	bl	8005ff8 <acc_detector_presence_processing_create>
 8005906:	4605      	mov	r5, r0
 8005908:	60a0      	str	r0, [r4, #8]
 800590a:	b168      	cbz	r0, 8005928 <acc_detector_presence_create+0x4c>
 800590c:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
 8005910:	4620      	mov	r0, r4
 8005912:	e9c4 2303 	strd	r2, r3, [r4, #12]
 8005916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <acc_detector_presence_create+0x70>)
 800591a:	4a0d      	ldr	r2, [pc, #52]	; (8005950 <acc_detector_presence_create+0x74>)
 800591c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591e:	490a      	ldr	r1, [pc, #40]	; (8005948 <acc_detector_presence_create+0x6c>)
 8005920:	4604      	mov	r4, r0
 8005922:	4798      	blx	r3
 8005924:	4620      	mov	r0, r4
 8005926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005928:	4638      	mov	r0, r7
 800592a:	f001 f82f 	bl	800698c <acc_service_destroy>
 800592e:	4620      	mov	r0, r4
 8005930:	462c      	mov	r4, r5
 8005932:	f002 f8df 	bl	8007af4 <acc_rss_integration_mem_free>
 8005936:	4620      	mov	r0, r4
 8005938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <acc_detector_presence_create+0x70>)
 800593c:	4a05      	ldr	r2, [pc, #20]	; (8005954 <acc_detector_presence_create+0x78>)
 800593e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005940:	4901      	ldr	r1, [pc, #4]	; (8005948 <acc_detector_presence_create+0x6c>)
 8005942:	4798      	blx	r3
 8005944:	4620      	mov	r0, r4
 8005946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005948:	080111cc 	.word	0x080111cc
 800594c:	200007ec 	.word	0x200007ec
 8005950:	08011260 	.word	0x08011260
 8005954:	08011278 	.word	0x08011278

08005958 <acc_detector_presence_destroy>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4604      	mov	r4, r0
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	b118      	cbz	r0, 8005968 <acc_detector_presence_destroy+0x10>
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <acc_detector_presence_destroy+0x3c>)
 8005962:	6802      	ldr	r2, [r0, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d007      	beq.n	8005978 <acc_detector_presence_destroy+0x20>
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <acc_detector_presence_destroy+0x40>)
 800596a:	4a0c      	ldr	r2, [pc, #48]	; (800599c <acc_detector_presence_destroy+0x44>)
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596e:	490c      	ldr	r1, [pc, #48]	; (80059a0 <acc_detector_presence_destroy+0x48>)
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	2000      	movs	r0, #0
 8005976:	4718      	bx	r3
 8005978:	3008      	adds	r0, #8
 800597a:	f000 fb6b 	bl	8006054 <acc_detector_presence_processing_destroy>
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	3004      	adds	r0, #4
 8005982:	f001 f803 	bl	800698c <acc_service_destroy>
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	f002 f8b4 	bl	8007af4 <acc_rss_integration_mem_free>
 800598c:	2300      	movs	r3, #0
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	bd10      	pop	{r4, pc}
 8005992:	bf00      	nop
 8005994:	acc54323 	.word	0xacc54323
 8005998:	200007ec 	.word	0x200007ec
 800599c:	08011290 	.word	0x08011290
 80059a0:	080111cc 	.word	0x080111cc

080059a4 <acc_detector_presence_activate>:
 80059a4:	b508      	push	{r3, lr}
 80059a6:	b118      	cbz	r0, 80059b0 <acc_detector_presence_activate+0xc>
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <acc_detector_presence_activate+0x28>)
 80059aa:	6802      	ldr	r2, [r0, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d007      	beq.n	80059c0 <acc_detector_presence_activate+0x1c>
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <acc_detector_presence_activate+0x2c>)
 80059b2:	4a08      	ldr	r2, [pc, #32]	; (80059d4 <acc_detector_presence_activate+0x30>)
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	4908      	ldr	r1, [pc, #32]	; (80059d8 <acc_detector_presence_activate+0x34>)
 80059b8:	2000      	movs	r0, #0
 80059ba:	4798      	blx	r3
 80059bc:	2000      	movs	r0, #0
 80059be:	bd08      	pop	{r3, pc}
 80059c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80059c4:	6840      	ldr	r0, [r0, #4]
 80059c6:	f000 bd17 	b.w	80063f8 <acc_service_activate>
 80059ca:	bf00      	nop
 80059cc:	acc54323 	.word	0xacc54323
 80059d0:	200007ec 	.word	0x200007ec
 80059d4:	08011290 	.word	0x08011290
 80059d8:	080111cc 	.word	0x080111cc

080059dc <acc_detector_presence_deactivate>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	b118      	cbz	r0, 80059e8 <acc_detector_presence_deactivate+0xc>
 80059e0:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <acc_detector_presence_deactivate+0x38>)
 80059e2:	6802      	ldr	r2, [r0, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d008      	beq.n	80059fa <acc_detector_presence_deactivate+0x1e>
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <acc_detector_presence_deactivate+0x3c>)
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <acc_detector_presence_deactivate+0x40>)
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	490c      	ldr	r1, [pc, #48]	; (8005a20 <acc_detector_presence_deactivate+0x44>)
 80059f0:	2000      	movs	r0, #0
 80059f2:	4798      	blx	r3
 80059f4:	2400      	movs	r4, #0
 80059f6:	4620      	mov	r0, r4
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	6840      	ldr	r0, [r0, #4]
 80059fc:	f000 fd4a 	bl	8006494 <acc_service_deactivate>
 8005a00:	4604      	mov	r4, r0
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d1f7      	bne.n	80059f6 <acc_detector_presence_deactivate+0x1a>
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <acc_detector_presence_deactivate+0x3c>)
 8005a08:	4a06      	ldr	r2, [pc, #24]	; (8005a24 <acc_detector_presence_deactivate+0x48>)
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	4904      	ldr	r1, [pc, #16]	; (8005a20 <acc_detector_presence_deactivate+0x44>)
 8005a0e:	4798      	blx	r3
 8005a10:	e7f1      	b.n	80059f6 <acc_detector_presence_deactivate+0x1a>
 8005a12:	bf00      	nop
 8005a14:	acc54323 	.word	0xacc54323
 8005a18:	200007ec 	.word	0x200007ec
 8005a1c:	08011290 	.word	0x08011290
 8005a20:	080111cc 	.word	0x080111cc
 8005a24:	080112a0 	.word	0x080112a0

08005a28 <acc_detector_presence_get_next>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	b120      	cbz	r0, 8005a38 <acc_detector_presence_get_next+0x10>
 8005a2e:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <acc_detector_presence_get_next+0x6c>)
 8005a30:	6802      	ldr	r2, [r0, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	4604      	mov	r4, r0
 8005a36:	d009      	beq.n	8005a4c <acc_detector_presence_get_next+0x24>
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <acc_detector_presence_get_next+0x70>)
 8005a3a:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <acc_detector_presence_get_next+0x74>)
 8005a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3e:	4918      	ldr	r1, [pc, #96]	; (8005aa0 <acc_detector_presence_get_next+0x78>)
 8005a40:	2000      	movs	r0, #0
 8005a42:	4798      	blx	r3
 8005a44:	2500      	movs	r5, #0
 8005a46:	4628      	mov	r0, r5
 8005a48:	b008      	add	sp, #32
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	460e      	mov	r6, r1
 8005a4e:	2100      	movs	r1, #0
 8005a50:	2300      	movs	r3, #0
 8005a52:	9104      	str	r1, [sp, #16]
 8005a54:	9105      	str	r1, [sp, #20]
 8005a56:	aa01      	add	r2, sp, #4
 8005a58:	a902      	add	r1, sp, #8
 8005a5a:	f88d 300c 	strb.w	r3, [sp, #12]
 8005a5e:	9307      	str	r3, [sp, #28]
 8005a60:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005a64:	f7ff fe42 	bl	80056ec <get_sparse_data>
 8005a68:	4605      	mov	r5, r0
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d0eb      	beq.n	8005a46 <acc_detector_presence_get_next+0x1e>
 8005a6e:	68a0      	ldr	r0, [r4, #8]
 8005a70:	9902      	ldr	r1, [sp, #8]
 8005a72:	aa03      	add	r2, sp, #12
 8005a74:	f000 fb0e 	bl	8006094 <acc_detector_presence_processing_next>
 8005a78:	2e00      	cmp	r6, #0
 8005a7a:	d0e4      	beq.n	8005a46 <acc_detector_presence_get_next+0x1e>
 8005a7c:	9804      	ldr	r0, [sp, #16]
 8005a7e:	9905      	ldr	r1, [sp, #20]
 8005a80:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8005a84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005a88:	6070      	str	r0, [r6, #4]
 8005a8a:	60b1      	str	r1, [r6, #8]
 8005a8c:	7032      	strb	r2, [r6, #0]
 8005a8e:	81b3      	strh	r3, [r6, #12]
 8005a90:	e7d9      	b.n	8005a46 <acc_detector_presence_get_next+0x1e>
 8005a92:	bf00      	nop
 8005a94:	acc54323 	.word	0xacc54323
 8005a98:	200007ec 	.word	0x200007ec
 8005a9c:	08011290 	.word	0x08011290
 8005aa0:	080111cc 	.word	0x080111cc

08005aa4 <acc_detector_presence_configuration_start_set>:
 8005aa4:	b118      	cbz	r0, 8005aae <acc_detector_presence_configuration_start_set+0xa>
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <acc_detector_presence_configuration_start_set+0x1c>)
 8005aa8:	6802      	ldr	r2, [r0, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d005      	beq.n	8005aba <acc_detector_presence_configuration_start_set+0x16>
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <acc_detector_presence_configuration_start_set+0x20>)
 8005ab0:	4a05      	ldr	r2, [pc, #20]	; (8005ac8 <acc_detector_presence_configuration_start_set+0x24>)
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	4905      	ldr	r1, [pc, #20]	; (8005acc <acc_detector_presence_configuration_start_set+0x28>)
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	4718      	bx	r3
 8005aba:	6840      	ldr	r0, [r0, #4]
 8005abc:	f000 bd34 	b.w	8006528 <acc_service_requested_start_set>
 8005ac0:	acc12ad9 	.word	0xacc12ad9
 8005ac4:	200007ec 	.word	0x200007ec
 8005ac8:	08011248 	.word	0x08011248
 8005acc:	080111cc 	.word	0x080111cc

08005ad0 <acc_detector_presence_configuration_length_set>:
 8005ad0:	b118      	cbz	r0, 8005ada <acc_detector_presence_configuration_length_set+0xa>
 8005ad2:	4b06      	ldr	r3, [pc, #24]	; (8005aec <acc_detector_presence_configuration_length_set+0x1c>)
 8005ad4:	6802      	ldr	r2, [r0, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d005      	beq.n	8005ae6 <acc_detector_presence_configuration_length_set+0x16>
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <acc_detector_presence_configuration_length_set+0x20>)
 8005adc:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <acc_detector_presence_configuration_length_set+0x24>)
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	4905      	ldr	r1, [pc, #20]	; (8005af8 <acc_detector_presence_configuration_length_set+0x28>)
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	4718      	bx	r3
 8005ae6:	6840      	ldr	r0, [r0, #4]
 8005ae8:	f000 bd2c 	b.w	8006544 <acc_service_requested_length_set>
 8005aec:	acc12ad9 	.word	0xacc12ad9
 8005af0:	200007ec 	.word	0x200007ec
 8005af4:	08011248 	.word	0x08011248
 8005af8:	080111cc 	.word	0x080111cc

08005afc <acc_detector_presence_configuration_detection_threshold_set>:
 8005afc:	b118      	cbz	r0, 8005b06 <acc_detector_presence_configuration_detection_threshold_set+0xa>
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <acc_detector_presence_configuration_detection_threshold_set+0x1c>)
 8005b00:	6802      	ldr	r2, [r0, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d005      	beq.n	8005b12 <acc_detector_presence_configuration_detection_threshold_set+0x16>
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <acc_detector_presence_configuration_detection_threshold_set+0x20>)
 8005b08:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <acc_detector_presence_configuration_detection_threshold_set+0x24>)
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	4905      	ldr	r1, [pc, #20]	; (8005b24 <acc_detector_presence_configuration_detection_threshold_set+0x28>)
 8005b0e:	2000      	movs	r0, #0
 8005b10:	4718      	bx	r3
 8005b12:	ed80 0a04 	vstr	s0, [r0, #16]
 8005b16:	4770      	bx	lr
 8005b18:	acc12ad9 	.word	0xacc12ad9
 8005b1c:	200007ec 	.word	0x200007ec
 8005b20:	08011248 	.word	0x08011248
 8005b24:	080111cc 	.word	0x080111cc

08005b28 <acc_detector_presence_configuration_update_rate_set>:
 8005b28:	b118      	cbz	r0, 8005b32 <acc_detector_presence_configuration_update_rate_set+0xa>
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <acc_detector_presence_configuration_update_rate_set+0x1c>)
 8005b2c:	6802      	ldr	r2, [r0, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d005      	beq.n	8005b3e <acc_detector_presence_configuration_update_rate_set+0x16>
 8005b32:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <acc_detector_presence_configuration_update_rate_set+0x20>)
 8005b34:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <acc_detector_presence_configuration_update_rate_set+0x24>)
 8005b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b38:	4905      	ldr	r1, [pc, #20]	; (8005b50 <acc_detector_presence_configuration_update_rate_set+0x28>)
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	4718      	bx	r3
 8005b3e:	ed80 0a03 	vstr	s0, [r0, #12]
 8005b42:	4770      	bx	lr
 8005b44:	acc12ad9 	.word	0xacc12ad9
 8005b48:	200007ec 	.word	0x200007ec
 8005b4c:	08011248 	.word	0x08011248
 8005b50:	080111cc 	.word	0x080111cc

08005b54 <acc_detector_presence_configuration_nbr_removed_pc_set>:
 8005b54:	b118      	cbz	r0, 8005b5e <acc_detector_presence_configuration_nbr_removed_pc_set+0xa>
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <acc_detector_presence_configuration_nbr_removed_pc_set+0x1c>)
 8005b58:	6802      	ldr	r2, [r0, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d005      	beq.n	8005b6a <acc_detector_presence_configuration_nbr_removed_pc_set+0x16>
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <acc_detector_presence_configuration_nbr_removed_pc_set+0x20>)
 8005b60:	4a05      	ldr	r2, [pc, #20]	; (8005b78 <acc_detector_presence_configuration_nbr_removed_pc_set+0x24>)
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	4905      	ldr	r1, [pc, #20]	; (8005b7c <acc_detector_presence_configuration_nbr_removed_pc_set+0x28>)
 8005b66:	2000      	movs	r0, #0
 8005b68:	4718      	bx	r3
 8005b6a:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 8005b6e:	4770      	bx	lr
 8005b70:	acc12ad9 	.word	0xacc12ad9
 8005b74:	200007ec 	.word	0x200007ec
 8005b78:	08011248 	.word	0x08011248
 8005b7c:	080111cc 	.word	0x080111cc

08005b80 <acc_detector_presence_configuration_power_save_mode_set>:
 8005b80:	b118      	cbz	r0, 8005b8a <acc_detector_presence_configuration_power_save_mode_set+0xa>
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <acc_detector_presence_configuration_power_save_mode_set+0x1c>)
 8005b84:	6802      	ldr	r2, [r0, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d005      	beq.n	8005b96 <acc_detector_presence_configuration_power_save_mode_set+0x16>
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <acc_detector_presence_configuration_power_save_mode_set+0x20>)
 8005b8c:	4a05      	ldr	r2, [pc, #20]	; (8005ba4 <acc_detector_presence_configuration_power_save_mode_set+0x24>)
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	4905      	ldr	r1, [pc, #20]	; (8005ba8 <acc_detector_presence_configuration_power_save_mode_set+0x28>)
 8005b92:	2000      	movs	r0, #0
 8005b94:	4718      	bx	r3
 8005b96:	6840      	ldr	r0, [r0, #4]
 8005b98:	f000 bcea 	b.w	8006570 <acc_service_power_save_mode_set>
 8005b9c:	acc12ad9 	.word	0xacc12ad9
 8005ba0:	200007ec 	.word	0x200007ec
 8005ba4:	08011248 	.word	0x08011248
 8005ba8:	080111cc 	.word	0x080111cc

08005bac <processing_buffers_teardown>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	4604      	mov	r4, r0
 8005bb0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005bb2:	b118      	cbz	r0, 8005bbc <processing_buffers_teardown+0x10>
 8005bb4:	f001 ff9e 	bl	8007af4 <acc_rss_integration_mem_free>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	65a3      	str	r3, [r4, #88]	; 0x58
 8005bbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d035      	beq.n	8005c2e <processing_buffers_teardown+0x82>
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	b120      	cbz	r0, 8005bd0 <processing_buffers_teardown+0x24>
 8005bc6:	f001 ff95 	bl	8007af4 <acc_rss_integration_mem_free>
 8005bca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	6858      	ldr	r0, [r3, #4]
 8005bd2:	b120      	cbz	r0, 8005bde <processing_buffers_teardown+0x32>
 8005bd4:	f001 ff8e 	bl	8007af4 <acc_rss_integration_mem_free>
 8005bd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	6898      	ldr	r0, [r3, #8]
 8005be0:	b120      	cbz	r0, 8005bec <processing_buffers_teardown+0x40>
 8005be2:	f001 ff87 	bl	8007af4 <acc_rss_integration_mem_free>
 8005be6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005be8:	2200      	movs	r2, #0
 8005bea:	609a      	str	r2, [r3, #8]
 8005bec:	68d8      	ldr	r0, [r3, #12]
 8005bee:	b120      	cbz	r0, 8005bfa <processing_buffers_teardown+0x4e>
 8005bf0:	f001 ff80 	bl	8007af4 <acc_rss_integration_mem_free>
 8005bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	6918      	ldr	r0, [r3, #16]
 8005bfc:	b120      	cbz	r0, 8005c08 <processing_buffers_teardown+0x5c>
 8005bfe:	f001 ff79 	bl	8007af4 <acc_rss_integration_mem_free>
 8005c02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c04:	2200      	movs	r2, #0
 8005c06:	611a      	str	r2, [r3, #16]
 8005c08:	6958      	ldr	r0, [r3, #20]
 8005c0a:	b120      	cbz	r0, 8005c16 <processing_buffers_teardown+0x6a>
 8005c0c:	f001 ff72 	bl	8007af4 <acc_rss_integration_mem_free>
 8005c10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c12:	2200      	movs	r2, #0
 8005c14:	615a      	str	r2, [r3, #20]
 8005c16:	6998      	ldr	r0, [r3, #24]
 8005c18:	b120      	cbz	r0, 8005c24 <processing_buffers_teardown+0x78>
 8005c1a:	f001 ff6b 	bl	8007af4 <acc_rss_integration_mem_free>
 8005c1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c20:	2200      	movs	r2, #0
 8005c22:	619a      	str	r2, [r3, #24]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 ff65 	bl	8007af4 <acc_rss_integration_mem_free>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6563      	str	r3, [r4, #84]	; 0x54
 8005c2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005c30:	b118      	cbz	r0, 8005c3a <processing_buffers_teardown+0x8e>
 8005c32:	f001 ff5f 	bl	8007af4 <acc_rss_integration_mem_free>
 8005c36:	2300      	movs	r3, #0
 8005c38:	6523      	str	r3, [r4, #80]	; 0x50
 8005c3a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005c3c:	b118      	cbz	r0, 8005c46 <processing_buffers_teardown+0x9a>
 8005c3e:	f001 ff59 	bl	8007af4 <acc_rss_integration_mem_free>
 8005c42:	2300      	movs	r3, #0
 8005c44:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005c46:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005c48:	b118      	cbz	r0, 8005c52 <processing_buffers_teardown+0xa6>
 8005c4a:	f001 ff53 	bl	8007af4 <acc_rss_integration_mem_free>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6623      	str	r3, [r4, #96]	; 0x60
 8005c52:	bd10      	pop	{r4, pc}

08005c54 <smoothing_factor_from_low_pass_cutoff>:
 8005c54:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8005c58:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005c9c <smoothing_factor_from_low_pass_cutoff+0x48>
 8005c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c64:	dd02      	ble.n	8005c6c <smoothing_factor_from_low_pass_cutoff+0x18>
 8005c66:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005ca0 <smoothing_factor_from_low_pass_cutoff+0x4c>
 8005c6a:	4770      	bx	lr
 8005c6c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005ca4 <smoothing_factor_from_low_pass_cutoff+0x50>
 8005c70:	b508      	push	{r3, lr}
 8005c72:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005c76:	f001 f8e5 	bl	8006e44 <acc_alg_basic_math_restricted_sin_f32>
 8005c7a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005c7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c86:	ee30 7a00 	vadd.f32	s14, s0, s0
 8005c8a:	eef1 6ac6 	vsqrt.f32	s13, s12
 8005c8e:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8005c92:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005c96:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005c9a:	bd08      	pop	{r3, pc}
 8005c9c:	3f0000a8 	.word	0x3f0000a8
 8005ca0:	00000000 	.word	0x00000000
 8005ca4:	40490fdb 	.word	0x40490fdb

08005ca8 <setup_processing_parameters>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	880e      	ldrh	r6, [r1, #0]
 8005cac:	f8b1 c034 	ldrh.w	ip, [r1, #52]	; 0x34
 8005cb0:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8005e40 <setup_processing_parameters+0x198>
 8005cb4:	fbbc fcf6 	udiv	ip, ip, r6
 8005cb8:	ed2d 8b02 	vpush	{d8}
 8005cbc:	f101 072c 	add.w	r7, r1, #44	; 0x2c
 8005cc0:	7206      	strb	r6, [r0, #8]
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005cc8:	69e6      	ldr	r6, [r4, #28]
 8005cca:	f8c5 e000 	str.w	lr, [r5]
 8005cce:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005cd2:	62ae      	str	r6, [r5, #40]	; 0x28
 8005cd4:	f105 062c 	add.w	r6, r5, #44	; 0x2c
 8005cd8:	f8c5 e00c 	str.w	lr, [r5, #12]
 8005cdc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005cde:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005ce8:	ed94 8a01 	vldr	s16, [r4, #4]
 8005cec:	6032      	str	r2, [r6, #0]
 8005cee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf6:	f8c5 c004 	str.w	ip, [r5, #4]
 8005cfa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8005cfe:	f240 8088 	bls.w	8005e12 <setup_processing_parameters+0x16a>
 8005d02:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005d06:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8005d0a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005d0e:	f009 f9a1 	bl	800f054 <expf>
 8005d12:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 8005d16:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8005d1a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d909      	bls.n	8005d36 <setup_processing_parameters+0x8e>
 8005d22:	4b42      	ldr	r3, [pc, #264]	; (8005e2c <setup_processing_parameters+0x184>)
 8005d24:	4a42      	ldr	r2, [pc, #264]	; (8005e30 <setup_processing_parameters+0x188>)
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	4942      	ldr	r1, [pc, #264]	; (8005e34 <setup_processing_parameters+0x18c>)
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	4798      	blx	r3
 8005d2e:	2000      	movs	r0, #0
 8005d30:	ecbd 8b02 	vpop	{d8}
 8005d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3e:	d965      	bls.n	8005e0c <setup_processing_parameters+0x164>
 8005d40:	ed94 0a04 	vldr	s0, [r4, #16]
 8005d44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4c:	d45e      	bmi.n	8005e0c <setup_processing_parameters+0x164>
 8005d4e:	edd4 7a05 	vldr	s15, [r4, #20]
 8005d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d5a:	d457      	bmi.n	8005e0c <setup_processing_parameters+0x164>
 8005d5c:	edd4 7a03 	vldr	s15, [r4, #12]
 8005d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d68:	d450      	bmi.n	8005e0c <setup_processing_parameters+0x164>
 8005d6a:	edd4 7a06 	vldr	s15, [r4, #24]
 8005d6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	d449      	bmi.n	8005e0c <setup_processing_parameters+0x164>
 8005d78:	edd4 7a08 	vldr	s15, [r4, #32]
 8005d7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d84:	d442      	bmi.n	8005e0c <setup_processing_parameters+0x164>
 8005d86:	eef0 0a48 	vmov.f32	s1, s16
 8005d8a:	f7ff ff63 	bl	8005c54 <smoothing_factor_from_low_pass_cutoff>
 8005d8e:	eef0 0a48 	vmov.f32	s1, s16
 8005d92:	ed85 0a04 	vstr	s0, [r5, #16]
 8005d96:	ed94 0a05 	vldr	s0, [r4, #20]
 8005d9a:	f7ff ff5b 	bl	8005c54 <smoothing_factor_from_low_pass_cutoff>
 8005d9e:	edd4 7a03 	vldr	s15, [r4, #12]
 8005da2:	ed85 0a05 	vstr	s0, [r5, #20]
 8005da6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	d933      	bls.n	8005e18 <setup_processing_parameters+0x170>
 8005db0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005db4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005db8:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005dbc:	f009 f94a 	bl	800f054 <expf>
 8005dc0:	edd4 7a06 	vldr	s15, [r4, #24]
 8005dc4:	ed85 0a06 	vstr	s0, [r5, #24]
 8005dc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd0:	d928      	bls.n	8005e24 <setup_processing_parameters+0x17c>
 8005dd2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005dd6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005dda:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005dde:	f009 f939 	bl	800f054 <expf>
 8005de2:	edd4 0a08 	vldr	s1, [r4, #32]
 8005de6:	ed85 0a07 	vstr	s0, [r5, #28]
 8005dea:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	d914      	bls.n	8005e1e <setup_processing_parameters+0x176>
 8005df4:	ee28 8a20 	vmul.f32	s16, s16, s1
 8005df8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005dfc:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8005e00:	f009 f928 	bl	800f054 <expf>
 8005e04:	2001      	movs	r0, #1
 8005e06:	ed85 0a08 	vstr	s0, [r5, #32]
 8005e0a:	e791      	b.n	8005d30 <setup_processing_parameters+0x88>
 8005e0c:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <setup_processing_parameters+0x184>)
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <setup_processing_parameters+0x190>)
 8005e10:	e789      	b.n	8005d26 <setup_processing_parameters+0x7e>
 8005e12:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8005e3c <setup_processing_parameters+0x194>
 8005e16:	e77c      	b.n	8005d12 <setup_processing_parameters+0x6a>
 8005e18:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005e3c <setup_processing_parameters+0x194>
 8005e1c:	e7d0      	b.n	8005dc0 <setup_processing_parameters+0x118>
 8005e1e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8005e3c <setup_processing_parameters+0x194>
 8005e22:	e7ef      	b.n	8005e04 <setup_processing_parameters+0x15c>
 8005e24:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005e3c <setup_processing_parameters+0x194>
 8005e28:	e7db      	b.n	8005de2 <setup_processing_parameters+0x13a>
 8005e2a:	bf00      	nop
 8005e2c:	200007ec 	.word	0x200007ec
 8005e30:	080112bc 	.word	0x080112bc
 8005e34:	080112d8 	.word	0x080112d8
 8005e38:	080112f8 	.word	0x080112f8
 8005e3c:	00000000 	.word	0x00000000
 8005e40:	acc12ad1 	.word	0xacc12ad1

08005e44 <processing_buffers_setup>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 80ad 	bne.w	8005fac <processing_buffers_setup+0x168>
 8005e52:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d06c      	beq.n	8005f34 <processing_buffers_setup+0xf0>
 8005e5a:	4961      	ldr	r1, [pc, #388]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005e5c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8005e60:	2034      	movs	r0, #52	; 0x34
 8005e62:	f001 fe03 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005e66:	4605      	mov	r5, r0
 8005e68:	6560      	str	r0, [r4, #84]	; 0x54
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	f000 80b4 	beq.w	8005fd8 <processing_buffers_setup+0x194>
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005e76:	495a      	ldr	r1, [pc, #360]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	fb03 f002 	mul.w	r0, r3, r2
 8005e7e:	e9c5 0007 	strd	r0, r0, [r5, #28]
 8005e82:	7a26      	ldrb	r6, [r4, #8]
 8005e84:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005e86:	fb12 f206 	smulbb	r2, r2, r6
 8005e8a:	0092      	lsls	r2, r2, #2
 8005e8c:	632a      	str	r2, [r5, #48]	; 0x30
 8005e8e:	1ef2      	subs	r2, r6, #3
 8005e90:	fb03 f202 	mul.w	r2, r3, r2
 8005e94:	fb03 f306 	mul.w	r3, r3, r6
 8005e98:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 8005e9c:	f240 124d 	movw	r2, #333	; 0x14d
 8005ea0:	f001 fde4 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005ea4:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005ea6:	494e      	ldr	r1, [pc, #312]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005ea8:	6028      	str	r0, [r5, #0]
 8005eaa:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8005eae:	6a38      	ldr	r0, [r7, #32]
 8005eb0:	f001 fddc 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005eb4:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005eb6:	494a      	ldr	r1, [pc, #296]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	f240 124f 	movw	r2, #335	; 0x14f
 8005ebe:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8005ec0:	f001 fdd4 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005ec4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005ec6:	4946      	ldr	r1, [pc, #280]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005ec8:	60b0      	str	r0, [r6, #8]
 8005eca:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8005ece:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8005ed0:	f001 fdcc 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005ed4:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005ed6:	4942      	ldr	r1, [pc, #264]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005ed8:	60e8      	str	r0, [r5, #12]
 8005eda:	f240 1251 	movw	r2, #337	; 0x151
 8005ede:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005ee0:	f001 fdc4 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005ee4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005ee6:	493e      	ldr	r1, [pc, #248]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005ee8:	6130      	str	r0, [r6, #16]
 8005eea:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005eee:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005ef0:	f001 fdbc 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005ef4:	6863      	ldr	r3, [r4, #4]
 8005ef6:	493a      	ldr	r1, [pc, #232]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005ef8:	6168      	str	r0, [r5, #20]
 8005efa:	f240 1253 	movw	r2, #339	; 0x153
 8005efe:	0098      	lsls	r0, r3, #2
 8005f00:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005f02:	f001 fdb3 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005f06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f08:	61a8      	str	r0, [r5, #24]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d04a      	beq.n	8005fa6 <processing_buffers_setup+0x162>
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	d047      	beq.n	8005fa6 <processing_buffers_setup+0x162>
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	d044      	beq.n	8005fa6 <processing_buffers_setup+0x162>
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	d041      	beq.n	8005fa6 <processing_buffers_setup+0x162>
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	2a00      	cmp	r2, #0
 8005f26:	d03e      	beq.n	8005fa6 <processing_buffers_setup+0x162>
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	d03b      	beq.n	8005fa6 <processing_buffers_setup+0x162>
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d038      	beq.n	8005fa6 <processing_buffers_setup+0x162>
 8005f34:	6860      	ldr	r0, [r4, #4]
 8005f36:	492a      	ldr	r1, [pc, #168]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005f38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f3c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005f40:	0080      	lsls	r0, r0, #2
 8005f42:	f001 fd93 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	4925      	ldr	r1, [pc, #148]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005f4a:	6520      	str	r0, [r4, #80]	; 0x50
 8005f4c:	f240 1261 	movw	r2, #353	; 0x161
 8005f50:	0098      	lsls	r0, r3, #2
 8005f52:	f001 fd8b 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	65e0      	str	r0, [r4, #92]	; 0x5c
 8005f5a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005f5e:	4920      	ldr	r1, [pc, #128]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005f60:	0098      	lsls	r0, r3, #2
 8005f62:	f001 fd83 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005f66:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005f68:	6620      	str	r0, [r4, #96]	; 0x60
 8005f6a:	b18a      	cbz	r2, 8005f90 <processing_buffers_setup+0x14c>
 8005f6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f6e:	b17b      	cbz	r3, 8005f90 <processing_buffers_setup+0x14c>
 8005f70:	b170      	cbz	r0, 8005f90 <processing_buffers_setup+0x14c>
 8005f72:	2100      	movs	r1, #0
 8005f74:	2500      	movs	r5, #0
 8005f76:	6461      	str	r1, [r4, #68]	; 0x44
 8005f78:	4610      	mov	r0, r2
 8005f7a:	64a1      	str	r1, [r4, #72]	; 0x48
 8005f7c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f80:	88a2      	ldrh	r2, [r4, #4]
 8005f82:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005f84:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 8005f88:	f001 f828 	bl	8006fdc <acc_alg_sparse_frame_abs_deviation_accumulator_reset>
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f90:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <processing_buffers_setup+0x1a0>)
 8005f92:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <processing_buffers_setup+0x1a4>)
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	4912      	ldr	r1, [pc, #72]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005f98:	2000      	movs	r0, #0
 8005f9a:	4798      	blx	r3
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff fe05 	bl	8005bac <processing_buffers_teardown>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <processing_buffers_setup+0x1a0>)
 8005fa8:	4a10      	ldr	r2, [pc, #64]	; (8005fec <processing_buffers_setup+0x1a8>)
 8005faa:	e7f3      	b.n	8005f94 <processing_buffers_setup+0x150>
 8005fac:	6840      	ldr	r0, [r0, #4]
 8005fae:	490c      	ldr	r1, [pc, #48]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005fb0:	0080      	lsls	r0, r0, #2
 8005fb2:	f240 1229 	movw	r2, #297	; 0x129
 8005fb6:	f001 fd59 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8005fba:	4605      	mov	r5, r0
 8005fbc:	65a0      	str	r0, [r4, #88]	; 0x58
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f47f af47 	bne.w	8005e52 <processing_buffers_setup+0xe>
 8005fc4:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <processing_buffers_setup+0x1a0>)
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <processing_buffers_setup+0x1ac>)
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	4905      	ldr	r1, [pc, #20]	; (8005fe0 <processing_buffers_setup+0x19c>)
 8005fcc:	4798      	blx	r3
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7ff fdec 	bl	8005bac <processing_buffers_teardown>
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd8:	4b02      	ldr	r3, [pc, #8]	; (8005fe4 <processing_buffers_setup+0x1a0>)
 8005fda:	4a06      	ldr	r2, [pc, #24]	; (8005ff4 <processing_buffers_setup+0x1b0>)
 8005fdc:	e7f4      	b.n	8005fc8 <processing_buffers_setup+0x184>
 8005fde:	bf00      	nop
 8005fe0:	080112d8 	.word	0x080112d8
 8005fe4:	200007ec 	.word	0x200007ec
 8005fe8:	08011378 	.word	0x08011378
 8005fec:	0801135c 	.word	0x0801135c
 8005ff0:	0801131c 	.word	0x0801131c
 8005ff4:	08011340 	.word	0x08011340

08005ff8 <acc_detector_presence_processing_create>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4913      	ldr	r1, [pc, #76]	; (8006048 <acc_detector_presence_processing_create+0x50>)
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	225b      	movs	r2, #91	; 0x5b
 8006000:	2064      	movs	r0, #100	; 0x64
 8006002:	f001 fd33 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8006006:	4604      	mov	r4, r0
 8006008:	b1b0      	cbz	r0, 8006038 <acc_detector_presence_processing_create+0x40>
 800600a:	2264      	movs	r2, #100	; 0x64
 800600c:	2100      	movs	r1, #0
 800600e:	f006 f9e3 	bl	800c3d8 <memset>
 8006012:	4629      	mov	r1, r5
 8006014:	4620      	mov	r0, r4
 8006016:	f7ff fe47 	bl	8005ca8 <setup_processing_parameters>
 800601a:	4605      	mov	r5, r0
 800601c:	4620      	mov	r0, r4
 800601e:	b135      	cbz	r5, 800602e <acc_detector_presence_processing_create+0x36>
 8006020:	f7ff ff10 	bl	8005e44 <processing_buffers_setup>
 8006024:	4605      	mov	r5, r0
 8006026:	b108      	cbz	r0, 800602c <acc_detector_presence_processing_create+0x34>
 8006028:	4620      	mov	r0, r4
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	4620      	mov	r0, r4
 800602e:	462c      	mov	r4, r5
 8006030:	f001 fd60 	bl	8007af4 <acc_rss_integration_mem_free>
 8006034:	4620      	mov	r0, r4
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	4b04      	ldr	r3, [pc, #16]	; (800604c <acc_detector_presence_processing_create+0x54>)
 800603a:	4a05      	ldr	r2, [pc, #20]	; (8006050 <acc_detector_presence_processing_create+0x58>)
 800603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603e:	4902      	ldr	r1, [pc, #8]	; (8006048 <acc_detector_presence_processing_create+0x50>)
 8006040:	4798      	blx	r3
 8006042:	4620      	mov	r0, r4
 8006044:	bd38      	pop	{r3, r4, r5, pc}
 8006046:	bf00      	nop
 8006048:	080112d8 	.word	0x080112d8
 800604c:	200007ec 	.word	0x200007ec
 8006050:	08011390 	.word	0x08011390

08006054 <acc_detector_presence_processing_destroy>:
 8006054:	b510      	push	{r4, lr}
 8006056:	4604      	mov	r4, r0
 8006058:	6800      	ldr	r0, [r0, #0]
 800605a:	b118      	cbz	r0, 8006064 <acc_detector_presence_processing_destroy+0x10>
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <acc_detector_presence_processing_destroy+0x30>)
 800605e:	6802      	ldr	r2, [r0, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d007      	beq.n	8006074 <acc_detector_presence_processing_destroy+0x20>
 8006064:	4b08      	ldr	r3, [pc, #32]	; (8006088 <acc_detector_presence_processing_destroy+0x34>)
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <acc_detector_presence_processing_destroy+0x38>)
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	4909      	ldr	r1, [pc, #36]	; (8006090 <acc_detector_presence_processing_destroy+0x3c>)
 800606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006070:	2000      	movs	r0, #0
 8006072:	4718      	bx	r3
 8006074:	f7ff fd9a 	bl	8005bac <processing_buffers_teardown>
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	f001 fd3b 	bl	8007af4 <acc_rss_integration_mem_free>
 800607e:	2300      	movs	r3, #0
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd10      	pop	{r4, pc}
 8006084:	acc12ad1 	.word	0xacc12ad1
 8006088:	200007ec 	.word	0x200007ec
 800608c:	080113b0 	.word	0x080113b0
 8006090:	080112d8 	.word	0x080112d8

08006094 <acc_detector_presence_processing_next>:
 8006094:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 8006098:	ed90 0a04 	vldr	s0, [r0, #16]
 800609c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060a0:	3301      	adds	r3, #1
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060aa:	ed2d 8b04 	vpush	{d8-d9}
 80060ae:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80060b2:	eec8 0a27 	vdiv.f32	s1, s16, s15
 80060b6:	b08b      	sub	sp, #44	; 0x2c
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	4616      	mov	r6, r2
 80060be:	ee38 8a60 	vsub.f32	s16, s16, s1
 80060c2:	eef0 0a48 	vmov.f32	s1, s16
 80060c6:	f008 ff6a 	bl	800ef9e <fminf>
 80060ca:	eef0 0a48 	vmov.f32	s1, s16
 80060ce:	eef0 7a40 	vmov.f32	s15, s0
 80060d2:	ed94 0a05 	vldr	s0, [r4, #20]
 80060d6:	edcd 7a05 	vstr	s15, [sp, #20]
 80060da:	f008 ff60 	bl	800ef9e <fminf>
 80060de:	eef0 0a48 	vmov.f32	s1, s16
 80060e2:	eef0 7a40 	vmov.f32	s15, s0
 80060e6:	ed94 0a06 	vldr	s0, [r4, #24]
 80060ea:	edcd 7a06 	vstr	s15, [sp, #24]
 80060ee:	f008 ff56 	bl	800ef9e <fminf>
 80060f2:	eef0 0a48 	vmov.f32	s1, s16
 80060f6:	eef0 7a40 	vmov.f32	s15, s0
 80060fa:	ed94 0a07 	vldr	s0, [r4, #28]
 80060fe:	edcd 7a07 	vstr	s15, [sp, #28]
 8006102:	f008 ff4c 	bl	800ef9e <fminf>
 8006106:	eef0 0a48 	vmov.f32	s1, s16
 800610a:	eef0 7a40 	vmov.f32	s15, s0
 800610e:	ed94 0a08 	vldr	s0, [r4, #32]
 8006112:	edcd 7a08 	vstr	s15, [sp, #32]
 8006116:	f008 ff42 	bl	800ef9e <fminf>
 800611a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800611e:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8006122:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8006126:	b1ab      	cbz	r3, 8006154 <acc_detector_presence_processing_next+0xc0>
 8006128:	88a1      	ldrh	r1, [r4, #4]
 800612a:	9100      	str	r1, [sp, #0]
 800612c:	a805      	add	r0, sp, #20
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	9002      	str	r0, [sp, #8]
 8006132:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8006136:	7a23      	ldrb	r3, [r4, #8]
 8006138:	462a      	mov	r2, r5
 800613a:	f001 f84b 	bl	80071d4 <acc_alg_sparse_frame_abs_deviation_accumulate_pca>
 800613e:	b998      	cbnz	r0, 8006168 <acc_detector_presence_processing_next+0xd4>
 8006140:	4b58      	ldr	r3, [pc, #352]	; (80062a4 <acc_detector_presence_processing_next+0x210>)
 8006142:	4a59      	ldr	r2, [pc, #356]	; (80062a8 <acc_detector_presence_processing_next+0x214>)
 8006144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006146:	4959      	ldr	r1, [pc, #356]	; (80062ac <acc_detector_presence_processing_next+0x218>)
 8006148:	4798      	blx	r3
 800614a:	b00b      	add	sp, #44	; 0x2c
 800614c:	ecbd 8b04 	vpop	{d8-d9}
 8006150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006154:	ab05      	add	r3, sp, #20
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	88a3      	ldrh	r3, [r4, #4]
 800615a:	7a22      	ldrb	r2, [r4, #8]
 800615c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800615e:	4629      	mov	r1, r5
 8006160:	f000 ff74 	bl	800704c <acc_alg_sparse_frame_abs_deviation_accumulate>
 8006164:	2800      	cmp	r0, #0
 8006166:	d0eb      	beq.n	8006140 <acc_detector_presence_processing_next+0xac>
 8006168:	e9d4 3217 	ldrd	r3, r2, [r4, #92]	; 0x5c
 800616c:	88a1      	ldrh	r1, [r4, #4]
 800616e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006170:	f001 fb6a 	bl	8007848 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio>
 8006174:	2800      	cmp	r0, #0
 8006176:	f000 8085 	beq.w	8006284 <acc_detector_presence_processing_next+0x1f0>
 800617a:	6867      	ldr	r7, [r4, #4]
 800617c:	2f00      	cmp	r7, #0
 800617e:	f000 808b 	beq.w	8006298 <acc_detector_presence_processing_next+0x204>
 8006182:	e9d4 ec17 	ldrd	lr, ip, [r4, #92]	; 0x5c
 8006186:	2300      	movs	r3, #0
 8006188:	f894 8040 	ldrb.w	r8, [r4, #64]	; 0x40
 800618c:	eddf 8a48 	vldr	s17, [pc, #288]	; 80062b0 <acc_detector_presence_processing_next+0x21c>
 8006190:	4699      	mov	r9, r3
 8006192:	4619      	mov	r1, r3
 8006194:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006198:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800619c:	eb0e 0281 	add.w	r2, lr, r1, lsl #2
 80061a0:	eb0c 0081 	add.w	r0, ip, r1, lsl #2
 80061a4:	ee75 7ac7 	vsub.f32	s15, s11, s14
 80061a8:	ed92 6a00 	vldr	s12, [r2]
 80061ac:	edd0 6a00 	vldr	s13, [r0]
 80061b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80061b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80061b8:	1c5d      	adds	r5, r3, #1
 80061ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061be:	008a      	lsls	r2, r1, #2
 80061c0:	eef4 7ae8 	vcmpe.f32	s15, s17
 80061c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c8:	bfc8      	it	gt
 80061ca:	4699      	movgt	r9, r3
 80061cc:	b2ab      	uxth	r3, r5
 80061ce:	bfc8      	it	gt
 80061d0:	eef0 8a67 	vmovgt.f32	s17, s15
 80061d4:	4619      	mov	r1, r3
 80061d6:	f1b8 0f00 	cmp.w	r8, #0
 80061da:	d003      	beq.n	80061e4 <acc_detector_presence_processing_next+0x150>
 80061dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061de:	4410      	add	r0, r2
 80061e0:	edc0 7a00 	vstr	s15, [r0]
 80061e4:	42bb      	cmp	r3, r7
 80061e6:	d3d7      	bcc.n	8006198 <acc_detector_presence_processing_next+0x104>
 80061e8:	edd4 9a03 	vldr	s19, [r4, #12]
 80061ec:	eef4 9ae8 	vcmpe.f32	s19, s17
 80061f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f4:	d80d      	bhi.n	8006212 <acc_detector_presence_processing_next+0x17e>
 80061f6:	ee07 9a90 	vmov	s15, r9
 80061fa:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80061fe:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800620a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800620e:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 8006212:	eeb0 0a49 	vmov.f32	s0, s18
 8006216:	eef0 0a48 	vmov.f32	s1, s16
 800621a:	f008 fec0 	bl	800ef9e <fminf>
 800621e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006222:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 8006226:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800622a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800622e:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8006232:	ee70 8a28 	vadd.f32	s17, s0, s17
 8006236:	eef4 9ae8 	vcmpe.f32	s19, s17
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	bf94      	ite	ls
 8006240:	2301      	movls	r3, #1
 8006242:	2300      	movhi	r3, #0
 8006244:	edc4 8a11 	vstr	s17, [r4, #68]	; 0x44
 8006248:	edc6 8a01 	vstr	s17, [r6, #4]
 800624c:	7033      	strb	r3, [r6, #0]
 800624e:	f1b8 0f00 	cmp.w	r8, #0
 8006252:	d002      	beq.n	800625a <acc_detector_presence_processing_next+0x1c6>
 8006254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006256:	6133      	str	r3, [r6, #16]
 8006258:	81b7      	strh	r7, [r6, #12]
 800625a:	eef4 9ae8 	vcmpe.f32	s19, s17
 800625e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006262:	bf9c      	itt	ls
 8006264:	6ca3      	ldrls	r3, [r4, #72]	; 0x48
 8006266:	60b3      	strls	r3, [r6, #8]
 8006268:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800626c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006270:	4293      	cmp	r3, r2
 8006272:	bf1c      	itt	ne
 8006274:	3301      	addne	r3, #1
 8006276:	f8a4 304c 	strhne.w	r3, [r4, #76]	; 0x4c
 800627a:	b00b      	add	sp, #44	; 0x2c
 800627c:	ecbd 8b04 	vpop	{d8-d9}
 8006280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006284:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <acc_detector_presence_processing_next+0x210>)
 8006286:	4a0b      	ldr	r2, [pc, #44]	; (80062b4 <acc_detector_presence_processing_next+0x220>)
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	4908      	ldr	r1, [pc, #32]	; (80062ac <acc_detector_presence_processing_next+0x218>)
 800628c:	4798      	blx	r3
 800628e:	b00b      	add	sp, #44	; 0x2c
 8006290:	ecbd 8b04 	vpop	{d8-d9}
 8006294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006298:	f894 8040 	ldrb.w	r8, [r4, #64]	; 0x40
 800629c:	eddf 8a04 	vldr	s17, [pc, #16]	; 80062b0 <acc_detector_presence_processing_next+0x21c>
 80062a0:	46b9      	mov	r9, r7
 80062a2:	e7a1      	b.n	80061e8 <acc_detector_presence_processing_next+0x154>
 80062a4:	200007ec 	.word	0x200007ec
 80062a8:	080113cc 	.word	0x080113cc
 80062ac:	080112d8 	.word	0x080112d8
 80062b0:	00000000 	.word	0x00000000
 80062b4:	08011404 	.word	0x08011404

080062b8 <acc_rss_activate>:
 80062b8:	b510      	push	{r4, lr}
 80062ba:	4c18      	ldr	r4, [pc, #96]	; (800631c <acc_rss_activate+0x64>)
 80062bc:	7823      	ldrb	r3, [r4, #0]
 80062be:	b9c3      	cbnz	r3, 80062f2 <acc_rss_activate+0x3a>
 80062c0:	b1a8      	cbz	r0, 80062ee <acc_rss_activate+0x36>
 80062c2:	f001 fb29 	bl	8007918 <acc_rss_integration_register>
 80062c6:	b188      	cbz	r0, 80062ec <acc_rss_activate+0x34>
 80062c8:	f000 fade 	bl	8006888 <acc_service_manager_activate>
 80062cc:	b1e8      	cbz	r0, 800630a <acc_rss_activate+0x52>
 80062ce:	f003 fab1 	bl	8009834 <acc_sensor_manager_activate>
 80062d2:	b1d0      	cbz	r0, 800630a <acc_rss_activate+0x52>
 80062d4:	2301      	movs	r3, #1
 80062d6:	7023      	strb	r3, [r4, #0]
 80062d8:	f001 fc1e 	bl	8007b18 <acc_rss_integration_log_level>
 80062dc:	2801      	cmp	r0, #1
 80062de:	d905      	bls.n	80062ec <acc_rss_activate+0x34>
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <acc_rss_activate+0x68>)
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <acc_rss_activate+0x6c>)
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	4910      	ldr	r1, [pc, #64]	; (8006328 <acc_rss_activate+0x70>)
 80062e8:	2002      	movs	r0, #2
 80062ea:	4798      	blx	r3
 80062ec:	7823      	ldrb	r3, [r4, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	f001 fc11 	bl	8007b18 <acc_rss_integration_log_level>
 80062f6:	2801      	cmp	r0, #1
 80062f8:	d9f8      	bls.n	80062ec <acc_rss_activate+0x34>
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <acc_rss_activate+0x68>)
 80062fc:	4a0b      	ldr	r2, [pc, #44]	; (800632c <acc_rss_activate+0x74>)
 80062fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006300:	4909      	ldr	r1, [pc, #36]	; (8006328 <acc_rss_activate+0x70>)
 8006302:	2002      	movs	r0, #2
 8006304:	4798      	blx	r3
 8006306:	7823      	ldrb	r3, [r4, #0]
 8006308:	e7f1      	b.n	80062ee <acc_rss_activate+0x36>
 800630a:	4b05      	ldr	r3, [pc, #20]	; (8006320 <acc_rss_activate+0x68>)
 800630c:	4a08      	ldr	r2, [pc, #32]	; (8006330 <acc_rss_activate+0x78>)
 800630e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006310:	4905      	ldr	r1, [pc, #20]	; (8006328 <acc_rss_activate+0x70>)
 8006312:	2000      	movs	r0, #0
 8006314:	4798      	blx	r3
 8006316:	7823      	ldrb	r3, [r4, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	bd10      	pop	{r4, pc}
 800631c:	20000760 	.word	0x20000760
 8006320:	200007ec 	.word	0x200007ec
 8006324:	08011440 	.word	0x08011440
 8006328:	08011460 	.word	0x08011460
 800632c:	0801147c 	.word	0x0801147c
 8006330:	08011464 	.word	0x08011464

08006334 <acc_rss_deactivate>:
 8006334:	b510      	push	{r4, lr}
 8006336:	4c0b      	ldr	r4, [pc, #44]	; (8006364 <acc_rss_deactivate+0x30>)
 8006338:	7823      	ldrb	r3, [r4, #0]
 800633a:	b903      	cbnz	r3, 800633e <acc_rss_deactivate+0xa>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	f000 fb51 	bl	80069e4 <acc_service_manager_deactivate>
 8006342:	f003 fab3 	bl	80098ac <acc_sensor_manager_deactivate>
 8006346:	f001 fbe7 	bl	8007b18 <acc_rss_integration_log_level>
 800634a:	2801      	cmp	r0, #1
 800634c:	d905      	bls.n	800635a <acc_rss_deactivate+0x26>
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <acc_rss_deactivate+0x34>)
 8006350:	4a06      	ldr	r2, [pc, #24]	; (800636c <acc_rss_deactivate+0x38>)
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	4906      	ldr	r1, [pc, #24]	; (8006370 <acc_rss_deactivate+0x3c>)
 8006356:	2002      	movs	r0, #2
 8006358:	4798      	blx	r3
 800635a:	f001 fb1d 	bl	8007998 <acc_rss_integration_unregister>
 800635e:	2300      	movs	r3, #0
 8006360:	7023      	strb	r3, [r4, #0]
 8006362:	bd10      	pop	{r4, pc}
 8006364:	20000760 	.word	0x20000760
 8006368:	200007ec 	.word	0x200007ec
 800636c:	080114a4 	.word	0x080114a4
 8006370:	08011460 	.word	0x08011460

08006374 <acc_service_maximize_signal_attenuation_set.part.0>:
 8006374:	4b02      	ldr	r3, [pc, #8]	; (8006380 <acc_service_maximize_signal_attenuation_set.part.0+0xc>)
 8006376:	4a03      	ldr	r2, [pc, #12]	; (8006384 <acc_service_maximize_signal_attenuation_set.part.0+0x10>)
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	4903      	ldr	r1, [pc, #12]	; (8006388 <acc_service_maximize_signal_attenuation_set.part.0+0x14>)
 800637c:	2001      	movs	r0, #1
 800637e:	4718      	bx	r3
 8006380:	200007ec 	.word	0x200007ec
 8006384:	08011248 	.word	0x08011248
 8006388:	080114c8 	.word	0x080114c8

0800638c <acc_service_get_base_configuration>:
 800638c:	b510      	push	{r4, lr}
 800638e:	4604      	mov	r4, r0
 8006390:	b108      	cbz	r0, 8006396 <acc_service_get_base_configuration+0xa>
 8006392:	6900      	ldr	r0, [r0, #16]
 8006394:	bd10      	pop	{r4, pc}
 8006396:	f001 fbbf 	bl	8007b18 <acc_rss_integration_log_level>
 800639a:	2800      	cmp	r0, #0
 800639c:	d0fa      	beq.n	8006394 <acc_service_get_base_configuration+0x8>
 800639e:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <acc_service_get_base_configuration+0x24>)
 80063a0:	4a04      	ldr	r2, [pc, #16]	; (80063b4 <acc_service_get_base_configuration+0x28>)
 80063a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a4:	4904      	ldr	r1, [pc, #16]	; (80063b8 <acc_service_get_base_configuration+0x2c>)
 80063a6:	2001      	movs	r0, #1
 80063a8:	4798      	blx	r3
 80063aa:	4620      	mov	r0, r4
 80063ac:	bd10      	pop	{r4, pc}
 80063ae:	bf00      	nop
 80063b0:	200007ec 	.word	0x200007ec
 80063b4:	08011248 	.word	0x08011248
 80063b8:	080114c8 	.word	0x080114c8

080063bc <set_maximize_signal_attenuation>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	460d      	mov	r5, r1
 80063c0:	4606      	mov	r6, r0
 80063c2:	f7ff ffe3 	bl	800638c <acc_service_get_base_configuration>
 80063c6:	b158      	cbz	r0, 80063e0 <set_maximize_signal_attenuation+0x24>
 80063c8:	4629      	mov	r1, r5
 80063ca:	4604      	mov	r4, r0
 80063cc:	f001 fe9c 	bl	8008108 <acc_base_configuration_maximize_signal_attenuation_set>
 80063d0:	b93d      	cbnz	r5, 80063e2 <set_maximize_signal_attenuation+0x26>
 80063d2:	68b3      	ldr	r3, [r6, #8]
 80063d4:	b123      	cbz	r3, 80063e0 <set_maximize_signal_attenuation+0x24>
 80063d6:	7971      	ldrb	r1, [r6, #5]
 80063d8:	4630      	mov	r0, r6
 80063da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063de:	4718      	bx	r3
 80063e0:	bd70      	pop	{r4, r5, r6, pc}
 80063e2:	4620      	mov	r0, r4
 80063e4:	210f      	movs	r1, #15
 80063e6:	f001 fd4d 	bl	8007e84 <acc_base_configuration_integrator_set>
 80063ea:	4620      	mov	r0, r4
 80063ec:	2101      	movs	r1, #1
 80063ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063f2:	f001 bd77 	b.w	8007ee4 <acc_base_configuration_integrator_ramp_up_set>
 80063f6:	bf00      	nop

080063f8 <acc_service_activate>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	b120      	cbz	r0, 8006406 <acc_service_activate+0xe>
 80063fc:	4b1e      	ldr	r3, [pc, #120]	; (8006478 <acc_service_activate+0x80>)
 80063fe:	6802      	ldr	r2, [r0, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	4604      	mov	r4, r0
 8006404:	d00c      	beq.n	8006420 <acc_service_activate+0x28>
 8006406:	4c1d      	ldr	r4, [pc, #116]	; (800647c <acc_service_activate+0x84>)
 8006408:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <acc_service_activate+0x88>)
 800640a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800640c:	491d      	ldr	r1, [pc, #116]	; (8006484 <acc_service_activate+0x8c>)
 800640e:	2000      	movs	r0, #0
 8006410:	4798      	blx	r3
 8006412:	2000      	movs	r0, #0
 8006414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006416:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <acc_service_activate+0x90>)
 8006418:	491a      	ldr	r1, [pc, #104]	; (8006484 <acc_service_activate+0x8c>)
 800641a:	4798      	blx	r3
 800641c:	2000      	movs	r0, #0
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	4b1a      	ldr	r3, [pc, #104]	; (800648c <acc_service_activate+0x94>)
 8006422:	7818      	ldrb	r0, [r3, #0]
 8006424:	b198      	cbz	r0, 800644e <acc_service_activate+0x56>
 8006426:	7a63      	ldrb	r3, [r4, #9]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f8      	beq.n	800641e <acc_service_activate+0x26>
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	2b2a      	cmp	r3, #42	; 0x2a
 8006430:	d80d      	bhi.n	800644e <acc_service_activate+0x56>
 8006432:	4d17      	ldr	r5, [pc, #92]	; (8006490 <acc_service_activate+0x98>)
 8006434:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 8006438:	b94a      	cbnz	r2, 800644e <acc_service_activate+0x56>
 800643a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 800643e:	2101      	movs	r1, #1
 8006440:	7856      	ldrb	r6, [r2, #1]
 8006442:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 8006446:	b126      	cbz	r6, 8006452 <acc_service_activate+0x5a>
 8006448:	2200      	movs	r2, #0
 800644a:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 800644e:	4c0b      	ldr	r4, [pc, #44]	; (800647c <acc_service_activate+0x84>)
 8006450:	e7df      	b.n	8006412 <acc_service_activate+0x1a>
 8006452:	f104 0018 	add.w	r0, r4, #24
 8006456:	f003 fb93 	bl	8009b80 <acc_sensor_manager_start_measurement>
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	b138      	cbz	r0, 800646e <acc_service_activate+0x76>
 800645e:	2b2a      	cmp	r3, #42	; 0x2a
 8006460:	d808      	bhi.n	8006474 <acc_service_activate+0x7c>
 8006462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006466:	7266      	strb	r6, [r4, #9]
 8006468:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 800646c:	bd70      	pop	{r4, r5, r6, pc}
 800646e:	2b2a      	cmp	r3, #42	; 0x2a
 8006470:	d8ed      	bhi.n	800644e <acc_service_activate+0x56>
 8006472:	e7e9      	b.n	8006448 <acc_service_activate+0x50>
 8006474:	7266      	strb	r6, [r4, #9]
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	acc09ee8 	.word	0xacc09ee8
 800647c:	200007ec 	.word	0x200007ec
 8006480:	08011290 	.word	0x08011290
 8006484:	080114c8 	.word	0x080114c8
 8006488:	080114d0 	.word	0x080114d0
 800648c:	20000761 	.word	0x20000761
 8006490:	20000764 	.word	0x20000764

08006494 <acc_service_deactivate>:
 8006494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006498:	b120      	cbz	r0, 80064a4 <acc_service_deactivate+0x10>
 800649a:	4b1c      	ldr	r3, [pc, #112]	; (800650c <acc_service_deactivate+0x78>)
 800649c:	6802      	ldr	r2, [r0, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	4604      	mov	r4, r0
 80064a2:	d00e      	beq.n	80064c2 <acc_service_deactivate+0x2e>
 80064a4:	4c1a      	ldr	r4, [pc, #104]	; (8006510 <acc_service_deactivate+0x7c>)
 80064a6:	4a1b      	ldr	r2, [pc, #108]	; (8006514 <acc_service_deactivate+0x80>)
 80064a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064aa:	491b      	ldr	r1, [pc, #108]	; (8006518 <acc_service_deactivate+0x84>)
 80064ac:	2000      	movs	r0, #0
 80064ae:	4798      	blx	r3
 80064b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064b2:	4a1a      	ldr	r2, [pc, #104]	; (800651c <acc_service_deactivate+0x88>)
 80064b4:	4918      	ldr	r1, [pc, #96]	; (8006518 <acc_service_deactivate+0x84>)
 80064b6:	2000      	movs	r0, #0
 80064b8:	4798      	blx	r3
 80064ba:	2500      	movs	r5, #0
 80064bc:	4628      	mov	r0, r5
 80064be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c2:	4b17      	ldr	r3, [pc, #92]	; (8006520 <acc_service_deactivate+0x8c>)
 80064c4:	781d      	ldrb	r5, [r3, #0]
 80064c6:	b1dd      	cbz	r5, 8006500 <acc_service_deactivate+0x6c>
 80064c8:	7a43      	ldrb	r3, [r0, #9]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1f6      	bne.n	80064bc <acc_service_deactivate+0x28>
 80064ce:	6843      	ldr	r3, [r0, #4]
 80064d0:	2b2a      	cmp	r3, #42	; 0x2a
 80064d2:	d815      	bhi.n	8006500 <acc_service_deactivate+0x6c>
 80064d4:	4e13      	ldr	r6, [pc, #76]	; (8006524 <acc_service_deactivate+0x90>)
 80064d6:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 80064da:	b98f      	cbnz	r7, 8006500 <acc_service_deactivate+0x6c>
 80064dc:	f04f 0801 	mov.w	r8, #1
 80064e0:	3018      	adds	r0, #24
 80064e2:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 80064e6:	f003 fb85 	bl	8009bf4 <acc_sensor_manager_stop_measurement>
 80064ea:	6863      	ldr	r3, [r4, #4]
 80064ec:	2b2a      	cmp	r3, #42	; 0x2a
 80064ee:	d809      	bhi.n	8006504 <acc_service_deactivate+0x70>
 80064f0:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 80064f4:	7057      	strb	r7, [r2, #1]
 80064f6:	f884 8009 	strb.w	r8, [r4, #9]
 80064fa:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 80064fe:	e7dd      	b.n	80064bc <acc_service_deactivate+0x28>
 8006500:	4c03      	ldr	r4, [pc, #12]	; (8006510 <acc_service_deactivate+0x7c>)
 8006502:	e7d5      	b.n	80064b0 <acc_service_deactivate+0x1c>
 8006504:	f884 8009 	strb.w	r8, [r4, #9]
 8006508:	e7d8      	b.n	80064bc <acc_service_deactivate+0x28>
 800650a:	bf00      	nop
 800650c:	acc09ee8 	.word	0xacc09ee8
 8006510:	200007ec 	.word	0x200007ec
 8006514:	08011290 	.word	0x08011290
 8006518:	080114c8 	.word	0x080114c8
 800651c:	080114ec 	.word	0x080114ec
 8006520:	20000761 	.word	0x20000761
 8006524:	20000764 	.word	0x20000764

08006528 <acc_service_requested_start_set>:
 8006528:	b500      	push	{lr}
 800652a:	b083      	sub	sp, #12
 800652c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006530:	f7ff ff2c 	bl	800638c <acc_service_get_base_configuration>
 8006534:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006538:	b003      	add	sp, #12
 800653a:	f85d eb04 	ldr.w	lr, [sp], #4
 800653e:	f001 bb99 	b.w	8007c74 <acc_base_configuration_requested_start_set>
 8006542:	bf00      	nop

08006544 <acc_service_requested_length_set>:
 8006544:	b500      	push	{lr}
 8006546:	b083      	sub	sp, #12
 8006548:	ed8d 0a01 	vstr	s0, [sp, #4]
 800654c:	f7ff ff1e 	bl	800638c <acc_service_get_base_configuration>
 8006550:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006554:	b003      	add	sp, #12
 8006556:	f85d eb04 	ldr.w	lr, [sp], #4
 800655a:	f001 bbad 	b.w	8007cb8 <acc_base_configuration_requested_length_set>
 800655e:	bf00      	nop

08006560 <acc_service_repetition_mode_on_demand_set>:
 8006560:	b508      	push	{r3, lr}
 8006562:	f7ff ff13 	bl	800638c <acc_service_get_base_configuration>
 8006566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800656a:	f001 bbb7 	b.w	8007cdc <acc_base_configuration_repetition_mode_on_demand_set>
 800656e:	bf00      	nop

08006570 <acc_service_power_save_mode_set>:
 8006570:	b500      	push	{lr}
 8006572:	b083      	sub	sp, #12
 8006574:	9101      	str	r1, [sp, #4]
 8006576:	f7ff ff09 	bl	800638c <acc_service_get_base_configuration>
 800657a:	9901      	ldr	r1, [sp, #4]
 800657c:	b003      	add	sp, #12
 800657e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006582:	f001 bbc1 	b.w	8007d08 <acc_base_configuration_power_save_mode_set>
 8006586:	bf00      	nop

08006588 <acc_service_pipeline_destroy>:
 8006588:	b510      	push	{r4, lr}
 800658a:	4604      	mov	r4, r0
 800658c:	6900      	ldr	r0, [r0, #16]
 800658e:	b118      	cbz	r0, 8006598 <acc_service_pipeline_destroy+0x10>
 8006590:	68c3      	ldr	r3, [r0, #12]
 8006592:	4798      	blx	r3
 8006594:	2300      	movs	r3, #0
 8006596:	6123      	str	r3, [r4, #16]
 8006598:	bd10      	pop	{r4, pc}
 800659a:	bf00      	nop

0800659c <acc_service_get_next>:
 800659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a0:	460e      	mov	r6, r1
 80065a2:	b082      	sub	sp, #8
 80065a4:	4604      	mov	r4, r0
 80065a6:	b118      	cbz	r0, 80065b0 <acc_service_get_next+0x14>
 80065a8:	4b32      	ldr	r3, [pc, #200]	; (8006674 <acc_service_get_next+0xd8>)
 80065aa:	6802      	ldr	r2, [r0, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d02c      	beq.n	800660a <acc_service_get_next+0x6e>
 80065b0:	4b31      	ldr	r3, [pc, #196]	; (8006678 <acc_service_get_next+0xdc>)
 80065b2:	4a32      	ldr	r2, [pc, #200]	; (800667c <acc_service_get_next+0xe0>)
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	4932      	ldr	r1, [pc, #200]	; (8006680 <acc_service_get_next+0xe4>)
 80065b8:	2000      	movs	r0, #0
 80065ba:	4798      	blx	r3
 80065bc:	2300      	movs	r3, #0
 80065be:	7eb5      	ldrb	r5, [r6, #26]
 80065c0:	b175      	cbz	r5, 80065e0 <acc_service_get_next+0x44>
 80065c2:	6872      	ldr	r2, [r6, #4]
 80065c4:	b10a      	cbz	r2, 80065ca <acc_service_get_next+0x2e>
 80065c6:	68f2      	ldr	r2, [r6, #12]
 80065c8:	b96a      	cbnz	r2, 80065e6 <acc_service_get_next+0x4a>
 80065ca:	4b2b      	ldr	r3, [pc, #172]	; (8006678 <acc_service_get_next+0xdc>)
 80065cc:	4a2d      	ldr	r2, [pc, #180]	; (8006684 <acc_service_get_next+0xe8>)
 80065ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d0:	492b      	ldr	r1, [pc, #172]	; (8006680 <acc_service_get_next+0xe4>)
 80065d2:	2000      	movs	r0, #0
 80065d4:	4798      	blx	r3
 80065d6:	2500      	movs	r5, #0
 80065d8:	4628      	mov	r0, r5
 80065da:	b002      	add	sp, #8
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	68b2      	ldr	r2, [r6, #8]
 80065e2:	2a00      	cmp	r2, #0
 80065e4:	d035      	beq.n	8006652 <acc_service_get_next+0xb6>
 80065e6:	b923      	cbnz	r3, 80065f2 <acc_service_get_next+0x56>
 80065e8:	2500      	movs	r5, #0
 80065ea:	4628      	mov	r0, r5
 80065ec:	b002      	add	sp, #8
 80065ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f2:	7a23      	ldrb	r3, [r4, #8]
 80065f4:	7832      	ldrb	r2, [r6, #0]
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d009      	beq.n	800660e <acc_service_get_next+0x72>
 80065fa:	491f      	ldr	r1, [pc, #124]	; (8006678 <acc_service_get_next+0xdc>)
 80065fc:	9200      	str	r2, [sp, #0]
 80065fe:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8006600:	4a21      	ldr	r2, [pc, #132]	; (8006688 <acc_service_get_next+0xec>)
 8006602:	491f      	ldr	r1, [pc, #124]	; (8006680 <acc_service_get_next+0xe4>)
 8006604:	2000      	movs	r0, #0
 8006606:	47a0      	blx	r4
 8006608:	e7ee      	b.n	80065e8 <acc_service_get_next+0x4c>
 800660a:	2301      	movs	r3, #1
 800660c:	e7d7      	b.n	80065be <acc_service_get_next+0x22>
 800660e:	7e37      	ldrb	r7, [r6, #24]
 8006610:	bb4f      	cbnz	r7, 8006666 <acc_service_get_next+0xca>
 8006612:	f894 8009 	ldrb.w	r8, [r4, #9]
 8006616:	f1b8 0f00 	cmp.w	r8, #0
 800661a:	d00f      	beq.n	800663c <acc_service_get_next+0xa0>
 800661c:	4b16      	ldr	r3, [pc, #88]	; (8006678 <acc_service_get_next+0xdc>)
 800661e:	4a1b      	ldr	r2, [pc, #108]	; (800668c <acc_service_get_next+0xf0>)
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	4917      	ldr	r1, [pc, #92]	; (8006680 <acc_service_get_next+0xe4>)
 8006624:	2000      	movs	r0, #0
 8006626:	4798      	blx	r3
 8006628:	2500      	movs	r5, #0
 800662a:	2f00      	cmp	r7, #0
 800662c:	d0dd      	beq.n	80065ea <acc_service_get_next+0x4e>
 800662e:	4620      	mov	r0, r4
 8006630:	f7ff ff30 	bl	8006494 <acc_service_deactivate>
 8006634:	4628      	mov	r0, r5
 8006636:	b002      	add	sp, #8
 8006638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	6166      	str	r6, [r4, #20]
 8006640:	e9d3 0200 	ldrd	r0, r2, [r3]
 8006644:	4790      	blx	r2
 8006646:	7e75      	ldrb	r5, [r6, #25]
 8006648:	f8c4 8014 	str.w	r8, [r4, #20]
 800664c:	f085 0501 	eor.w	r5, r5, #1
 8006650:	e7eb      	b.n	800662a <acc_service_get_next+0x8e>
 8006652:	4b09      	ldr	r3, [pc, #36]	; (8006678 <acc_service_get_next+0xdc>)
 8006654:	4a0e      	ldr	r2, [pc, #56]	; (8006690 <acc_service_get_next+0xf4>)
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	4909      	ldr	r1, [pc, #36]	; (8006680 <acc_service_get_next+0xe4>)
 800665a:	4628      	mov	r0, r5
 800665c:	4798      	blx	r3
 800665e:	4628      	mov	r0, r5
 8006660:	b002      	add	sp, #8
 8006662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006666:	4620      	mov	r0, r4
 8006668:	f7ff fec6 	bl	80063f8 <acc_service_activate>
 800666c:	4607      	mov	r7, r0
 800666e:	2800      	cmp	r0, #0
 8006670:	d1cf      	bne.n	8006612 <acc_service_get_next+0x76>
 8006672:	e7b9      	b.n	80065e8 <acc_service_get_next+0x4c>
 8006674:	acc09ee8 	.word	0xacc09ee8
 8006678:	200007ec 	.word	0x200007ec
 800667c:	08011290 	.word	0x08011290
 8006680:	080114c8 	.word	0x080114c8
 8006684:	08011508 	.word	0x08011508
 8006688:	08011540 	.word	0x08011540
 800668c:	0801155c 	.word	0x0801155c
 8006690:	08011528 	.word	0x08011528

08006694 <acc_service_send_data>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	9e06      	ldr	r6, [sp, #24]
 8006698:	6944      	ldr	r4, [r0, #20]
 800669a:	7835      	ldrb	r5, [r6, #0]
 800669c:	461f      	mov	r7, r3
 800669e:	b91d      	cbnz	r5, 80066a8 <acc_service_send_data+0x14>
 80066a0:	7ea5      	ldrb	r5, [r4, #26]
 80066a2:	b95d      	cbnz	r5, 80066bc <acc_service_send_data+0x28>
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	6019      	str	r1, [r3, #0]
 80066a8:	6920      	ldr	r0, [r4, #16]
 80066aa:	7665      	strb	r5, [r4, #25]
 80066ac:	b128      	cbz	r0, 80066ba <acc_service_send_data+0x26>
 80066ae:	6962      	ldr	r2, [r4, #20]
 80066b0:	4639      	mov	r1, r7
 80066b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066b6:	f005 be67 	b.w	800c388 <memcpy>
 80066ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066bc:	68e3      	ldr	r3, [r4, #12]
 80066be:	6860      	ldr	r0, [r4, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	bf28      	it	cs
 80066c4:	461a      	movcs	r2, r3
 80066c6:	f005 fe5f 	bl	800c388 <memcpy>
 80066ca:	7835      	ldrb	r5, [r6, #0]
 80066cc:	e7ec      	b.n	80066a8 <acc_service_send_data+0x14>
 80066ce:	bf00      	nop

080066d0 <acc_service_set_module_active>:
 80066d0:	4b01      	ldr	r3, [pc, #4]	; (80066d8 <acc_service_set_module_active+0x8>)
 80066d2:	7018      	strb	r0, [r3, #0]
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000761 	.word	0x20000761

080066dc <acc_service_handle_valid>:
 80066dc:	b508      	push	{r3, lr}
 80066de:	b118      	cbz	r0, 80066e8 <acc_service_handle_valid+0xc>
 80066e0:	6802      	ldr	r2, [r0, #0]
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <acc_service_handle_valid+0x20>)
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d007      	beq.n	80066f8 <acc_service_handle_valid+0x1c>
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <acc_service_handle_valid+0x24>)
 80066ea:	4a06      	ldr	r2, [pc, #24]	; (8006704 <acc_service_handle_valid+0x28>)
 80066ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ee:	4906      	ldr	r1, [pc, #24]	; (8006708 <acc_service_handle_valid+0x2c>)
 80066f0:	2000      	movs	r0, #0
 80066f2:	4798      	blx	r3
 80066f4:	2000      	movs	r0, #0
 80066f6:	bd08      	pop	{r3, pc}
 80066f8:	2001      	movs	r0, #1
 80066fa:	bd08      	pop	{r3, pc}
 80066fc:	acc09ee8 	.word	0xacc09ee8
 8006700:	200007ec 	.word	0x200007ec
 8006704:	08011290 	.word	0x08011290
 8006708:	080114c8 	.word	0x080114c8

0800670c <acc_service_configuration_valid>:
 800670c:	b508      	push	{r3, lr}
 800670e:	b118      	cbz	r0, 8006718 <acc_service_configuration_valid+0xc>
 8006710:	4b09      	ldr	r3, [pc, #36]	; (8006738 <acc_service_configuration_valid+0x2c>)
 8006712:	6802      	ldr	r2, [r0, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d007      	beq.n	8006728 <acc_service_configuration_valid+0x1c>
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <acc_service_configuration_valid+0x30>)
 800671a:	4a09      	ldr	r2, [pc, #36]	; (8006740 <acc_service_configuration_valid+0x34>)
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	4909      	ldr	r1, [pc, #36]	; (8006744 <acc_service_configuration_valid+0x38>)
 8006720:	2000      	movs	r0, #0
 8006722:	4798      	blx	r3
 8006724:	2000      	movs	r0, #0
 8006726:	bd08      	pop	{r3, pc}
 8006728:	8b03      	ldrh	r3, [r0, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f4      	beq.n	8006718 <acc_service_configuration_valid+0xc>
 800672e:	6943      	ldr	r3, [r0, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f1      	beq.n	8006718 <acc_service_configuration_valid+0xc>
 8006734:	2001      	movs	r0, #1
 8006736:	bd08      	pop	{r3, pc}
 8006738:	acc09dd7 	.word	0xacc09dd7
 800673c:	200007ec 	.word	0x200007ec
 8006740:	08011248 	.word	0x08011248
 8006744:	080114c8 	.word	0x080114c8

08006748 <acc_service_configuration_check>:
 8006748:	b508      	push	{r3, lr}
 800674a:	b118      	cbz	r0, 8006754 <acc_service_configuration_check+0xc>
 800674c:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <acc_service_configuration_check+0x3c>)
 800674e:	6802      	ldr	r2, [r0, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d007      	beq.n	8006764 <acc_service_configuration_check+0x1c>
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <acc_service_configuration_check+0x40>)
 8006756:	4a0d      	ldr	r2, [pc, #52]	; (800678c <acc_service_configuration_check+0x44>)
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	490d      	ldr	r1, [pc, #52]	; (8006790 <acc_service_configuration_check+0x48>)
 800675c:	2000      	movs	r0, #0
 800675e:	4798      	blx	r3
 8006760:	2000      	movs	r0, #0
 8006762:	bd08      	pop	{r3, pc}
 8006764:	8b03      	ldrh	r3, [r0, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f4      	beq.n	8006754 <acc_service_configuration_check+0xc>
 800676a:	6943      	ldr	r3, [r0, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f1      	beq.n	8006754 <acc_service_configuration_check+0xc>
 8006770:	7943      	ldrb	r3, [r0, #5]
 8006772:	3b01      	subs	r3, #1
 8006774:	2b04      	cmp	r3, #4
 8006776:	d801      	bhi.n	800677c <acc_service_configuration_check+0x34>
 8006778:	2001      	movs	r0, #1
 800677a:	bd08      	pop	{r3, pc}
 800677c:	4b02      	ldr	r3, [pc, #8]	; (8006788 <acc_service_configuration_check+0x40>)
 800677e:	4a05      	ldr	r2, [pc, #20]	; (8006794 <acc_service_configuration_check+0x4c>)
 8006780:	e7ea      	b.n	8006758 <acc_service_configuration_check+0x10>
 8006782:	bf00      	nop
 8006784:	acc09dd7 	.word	0xacc09dd7
 8006788:	200007ec 	.word	0x200007ec
 800678c:	08011248 	.word	0x08011248
 8006790:	080114c8 	.word	0x080114c8
 8006794:	08011574 	.word	0x08011574

08006798 <acc_service_profile_set>:
 8006798:	b510      	push	{r4, lr}
 800679a:	b138      	cbz	r0, 80067ac <acc_service_profile_set+0x14>
 800679c:	6882      	ldr	r2, [r0, #8]
 800679e:	4604      	mov	r4, r0
 80067a0:	b122      	cbz	r2, 80067ac <acc_service_profile_set+0x14>
 80067a2:	7141      	strb	r1, [r0, #5]
 80067a4:	4790      	blx	r2
 80067a6:	7b23      	ldrb	r3, [r4, #12]
 80067a8:	b943      	cbnz	r3, 80067bc <acc_service_profile_set+0x24>
 80067aa:	bd10      	pop	{r4, pc}
 80067ac:	f001 f9b4 	bl	8007b18 <acc_rss_integration_log_level>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d0fa      	beq.n	80067aa <acc_service_profile_set+0x12>
 80067b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b8:	f7ff bddc 	b.w	8006374 <acc_service_maximize_signal_attenuation_set.part.0>
 80067bc:	4620      	mov	r0, r4
 80067be:	2101      	movs	r1, #1
 80067c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c4:	f7ff bdfa 	b.w	80063bc <set_maximize_signal_attenuation>

080067c8 <acc_service_maximize_signal_attenuation_set>:
 80067c8:	b508      	push	{r3, lr}
 80067ca:	b120      	cbz	r0, 80067d6 <acc_service_maximize_signal_attenuation_set+0xe>
 80067cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80067d0:	7301      	strb	r1, [r0, #12]
 80067d2:	f7ff bdf3 	b.w	80063bc <set_maximize_signal_attenuation>
 80067d6:	f001 f99f 	bl	8007b18 <acc_rss_integration_log_level>
 80067da:	b118      	cbz	r0, 80067e4 <acc_service_maximize_signal_attenuation_set+0x1c>
 80067dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80067e0:	f7ff bdc8 	b.w	8006374 <acc_service_maximize_signal_attenuation_set.part.0>
 80067e4:	bd08      	pop	{r3, pc}
 80067e6:	bf00      	nop

080067e8 <acc_service_initialize_service_configuration>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	7101      	strb	r1, [r0, #4]
 80067ec:	6102      	str	r2, [r0, #16]
 80067ee:	9905      	ldr	r1, [sp, #20]
 80067f0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80067f4:	4d07      	ldr	r5, [pc, #28]	; (8006814 <acc_service_initialize_service_configuration+0x2c>)
 80067f6:	6143      	str	r3, [r0, #20]
 80067f8:	4604      	mov	r4, r0
 80067fa:	6005      	str	r5, [r0, #0]
 80067fc:	6081      	str	r1, [r0, #8]
 80067fe:	8302      	strh	r2, [r0, #24]
 8006800:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8006804:	f7ff ffc8 	bl	8006798 <acc_service_profile_set>
 8006808:	4620      	mov	r0, r4
 800680a:	2100      	movs	r1, #0
 800680c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006810:	f7ff bfda 	b.w	80067c8 <acc_service_maximize_signal_attenuation_set>
 8006814:	acc09dd7 	.word	0xacc09dd7

08006818 <destroy_handle>:
 8006818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681c:	4e15      	ldr	r6, [pc, #84]	; (8006874 <destroy_handle+0x5c>)
 800681e:	4605      	mov	r5, r0
 8006820:	6874      	ldr	r4, [r6, #4]
 8006822:	f001 f979 	bl	8007b18 <acc_rss_integration_log_level>
 8006826:	2803      	cmp	r0, #3
 8006828:	d906      	bls.n	8006838 <destroy_handle+0x20>
 800682a:	4a13      	ldr	r2, [pc, #76]	; (8006878 <destroy_handle+0x60>)
 800682c:	686b      	ldr	r3, [r5, #4]
 800682e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8006830:	4912      	ldr	r1, [pc, #72]	; (800687c <destroy_handle+0x64>)
 8006832:	4a13      	ldr	r2, [pc, #76]	; (8006880 <destroy_handle+0x68>)
 8006834:	2004      	movs	r0, #4
 8006836:	47b8      	blx	r7
 8006838:	b144      	cbz	r4, 800684c <destroy_handle+0x34>
 800683a:	42ac      	cmp	r4, r5
 800683c:	d102      	bne.n	8006844 <destroy_handle+0x2c>
 800683e:	e016      	b.n	800686e <destroy_handle+0x56>
 8006840:	42a5      	cmp	r5, r4
 8006842:	d00d      	beq.n	8006860 <destroy_handle+0x48>
 8006844:	4623      	mov	r3, r4
 8006846:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8006848:	2c00      	cmp	r4, #0
 800684a:	d1f9      	bne.n	8006840 <destroy_handle+0x28>
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <destroy_handle+0x60>)
 800684e:	686b      	ldr	r3, [r5, #4]
 8006850:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006852:	490a      	ldr	r1, [pc, #40]	; (800687c <destroy_handle+0x64>)
 8006854:	4a0b      	ldr	r2, [pc, #44]	; (8006884 <destroy_handle+0x6c>)
 8006856:	46a4      	mov	ip, r4
 8006858:	2000      	movs	r0, #0
 800685a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800685e:	4760      	bx	ip
 8006860:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8006862:	655a      	str	r2, [r3, #84]	; 0x54
 8006864:	4628      	mov	r0, r5
 8006866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800686a:	f001 b943 	b.w	8007af4 <acc_rss_integration_mem_free>
 800686e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006870:	6073      	str	r3, [r6, #4]
 8006872:	e7f7      	b.n	8006864 <destroy_handle+0x4c>
 8006874:	200007bc 	.word	0x200007bc
 8006878:	200007ec 	.word	0x200007ec
 800687c:	080115b0 	.word	0x080115b0
 8006880:	0801158c 	.word	0x0801158c
 8006884:	080115c0 	.word	0x080115c0

08006888 <acc_service_manager_activate>:
 8006888:	b510      	push	{r4, lr}
 800688a:	4c05      	ldr	r4, [pc, #20]	; (80068a0 <acc_service_manager_activate+0x18>)
 800688c:	7820      	ldrb	r0, [r4, #0]
 800688e:	b100      	cbz	r0, 8006892 <acc_service_manager_activate+0xa>
 8006890:	bd10      	pop	{r4, pc}
 8006892:	2001      	movs	r0, #1
 8006894:	7020      	strb	r0, [r4, #0]
 8006896:	f7ff ff1b 	bl	80066d0 <acc_service_set_module_active>
 800689a:	7820      	ldrb	r0, [r4, #0]
 800689c:	bd10      	pop	{r4, pc}
 800689e:	bf00      	nop
 80068a0:	200007bc 	.word	0x200007bc

080068a4 <acc_service_create>:
 80068a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a8:	4e30      	ldr	r6, [pc, #192]	; (800696c <acc_service_create+0xc8>)
 80068aa:	7834      	ldrb	r4, [r6, #0]
 80068ac:	2c00      	cmp	r4, #0
 80068ae:	d041      	beq.n	8006934 <acc_service_create+0x90>
 80068b0:	4605      	mov	r5, r0
 80068b2:	f7ff ff2b 	bl	800670c <acc_service_configuration_valid>
 80068b6:	b1a0      	cbz	r0, 80068e2 <acc_service_create+0x3e>
 80068b8:	692b      	ldr	r3, [r5, #16]
 80068ba:	68df      	ldr	r7, [r3, #12]
 80068bc:	1e7b      	subs	r3, r7, #1
 80068be:	2b29      	cmp	r3, #41	; 0x29
 80068c0:	d84a      	bhi.n	8006958 <acc_service_create+0xb4>
 80068c2:	7873      	ldrb	r3, [r6, #1]
 80068c4:	b98b      	cbnz	r3, 80068ea <acc_service_create+0x46>
 80068c6:	6873      	ldr	r3, [r6, #4]
 80068c8:	b913      	cbnz	r3, 80068d0 <acc_service_create+0x2c>
 80068ca:	e00e      	b.n	80068ea <acc_service_create+0x46>
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	b163      	cbz	r3, 80068ea <acc_service_create+0x46>
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	4297      	cmp	r7, r2
 80068d4:	d1fa      	bne.n	80068cc <acc_service_create+0x28>
 80068d6:	4b26      	ldr	r3, [pc, #152]	; (8006970 <acc_service_create+0xcc>)
 80068d8:	4a26      	ldr	r2, [pc, #152]	; (8006974 <acc_service_create+0xd0>)
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	4926      	ldr	r1, [pc, #152]	; (8006978 <acc_service_create+0xd4>)
 80068de:	2000      	movs	r0, #0
 80068e0:	4798      	blx	r3
 80068e2:	2400      	movs	r4, #0
 80068e4:	4620      	mov	r0, r4
 80068e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ea:	8b2c      	ldrh	r4, [r5, #24]
 80068ec:	f001 f914 	bl	8007b18 <acc_rss_integration_log_level>
 80068f0:	2803      	cmp	r0, #3
 80068f2:	d907      	bls.n	8006904 <acc_service_create+0x60>
 80068f4:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <acc_service_create+0xcc>)
 80068f6:	4a21      	ldr	r2, [pc, #132]	; (800697c <acc_service_create+0xd8>)
 80068f8:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80068fc:	491e      	ldr	r1, [pc, #120]	; (8006978 <acc_service_create+0xd4>)
 80068fe:	463b      	mov	r3, r7
 8006900:	2004      	movs	r0, #4
 8006902:	47c0      	blx	r8
 8006904:	4621      	mov	r1, r4
 8006906:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <acc_service_create+0xd4>)
 8006908:	23bd      	movs	r3, #189	; 0xbd
 800690a:	2001      	movs	r0, #1
 800690c:	f001 f8d2 	bl	8007ab4 <acc_rss_integration_mem_calloc_debug>
 8006910:	4604      	mov	r4, r0
 8006912:	2800      	cmp	r0, #0
 8006914:	d0e5      	beq.n	80068e2 <acc_service_create+0x3e>
 8006916:	6873      	ldr	r3, [r6, #4]
 8006918:	4a19      	ldr	r2, [pc, #100]	; (8006980 <acc_service_create+0xdc>)
 800691a:	6047      	str	r7, [r0, #4]
 800691c:	6002      	str	r2, [r0, #0]
 800691e:	6543      	str	r3, [r0, #84]	; 0x54
 8006920:	6070      	str	r0, [r6, #4]
 8006922:	696b      	ldr	r3, [r5, #20]
 8006924:	4629      	mov	r1, r5
 8006926:	4798      	blx	r3
 8006928:	b168      	cbz	r0, 8006946 <acc_service_create+0xa2>
 800692a:	2301      	movs	r3, #1
 800692c:	7263      	strb	r3, [r4, #9]
 800692e:	4620      	mov	r0, r4
 8006930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006934:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <acc_service_create+0xcc>)
 8006936:	4a13      	ldr	r2, [pc, #76]	; (8006984 <acc_service_create+0xe0>)
 8006938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693a:	490f      	ldr	r1, [pc, #60]	; (8006978 <acc_service_create+0xd4>)
 800693c:	4620      	mov	r0, r4
 800693e:	4798      	blx	r3
 8006940:	4620      	mov	r0, r4
 8006942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006946:	68e3      	ldr	r3, [r4, #12]
 8006948:	b10b      	cbz	r3, 800694e <acc_service_create+0xaa>
 800694a:	4620      	mov	r0, r4
 800694c:	4798      	blx	r3
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff ff62 	bl	8006818 <destroy_handle>
 8006954:	2400      	movs	r4, #0
 8006956:	e7c5      	b.n	80068e4 <acc_service_create+0x40>
 8006958:	4b05      	ldr	r3, [pc, #20]	; (8006970 <acc_service_create+0xcc>)
 800695a:	4a0b      	ldr	r2, [pc, #44]	; (8006988 <acc_service_create+0xe4>)
 800695c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800695e:	4906      	ldr	r1, [pc, #24]	; (8006978 <acc_service_create+0xd4>)
 8006960:	232a      	movs	r3, #42	; 0x2a
 8006962:	2000      	movs	r0, #0
 8006964:	47a0      	blx	r4
 8006966:	2400      	movs	r4, #0
 8006968:	e7bc      	b.n	80068e4 <acc_service_create+0x40>
 800696a:	bf00      	nop
 800696c:	200007bc 	.word	0x200007bc
 8006970:	200007ec 	.word	0x200007ec
 8006974:	08011654 	.word	0x08011654
 8006978:	080115b0 	.word	0x080115b0
 800697c:	08011620 	.word	0x08011620
 8006980:	acc09ee8 	.word	0xacc09ee8
 8006984:	08011640 	.word	0x08011640
 8006988:	080115f4 	.word	0x080115f4

0800698c <acc_service_destroy>:
 800698c:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <acc_service_destroy+0x48>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b510      	push	{r4, lr}
 8006992:	b133      	cbz	r3, 80069a2 <acc_service_destroy+0x16>
 8006994:	4604      	mov	r4, r0
 8006996:	b118      	cbz	r0, 80069a0 <acc_service_destroy+0x14>
 8006998:	6800      	ldr	r0, [r0, #0]
 800699a:	f7ff fe9f 	bl	80066dc <acc_service_handle_valid>
 800699e:	b960      	cbnz	r0, 80069ba <acc_service_destroy+0x2e>
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	f001 f8b9 	bl	8007b18 <acc_rss_integration_log_level>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d0fa      	beq.n	80069a0 <acc_service_destroy+0x14>
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <acc_service_destroy+0x4c>)
 80069ac:	4a0b      	ldr	r2, [pc, #44]	; (80069dc <acc_service_destroy+0x50>)
 80069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b0:	490b      	ldr	r1, [pc, #44]	; (80069e0 <acc_service_destroy+0x54>)
 80069b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b6:	2001      	movs	r0, #1
 80069b8:	4718      	bx	r3
 80069ba:	6820      	ldr	r0, [r4, #0]
 80069bc:	f7ff fd6a 	bl	8006494 <acc_service_deactivate>
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	68c3      	ldr	r3, [r0, #12]
 80069c4:	b10b      	cbz	r3, 80069ca <acc_service_destroy+0x3e>
 80069c6:	4798      	blx	r3
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	f7ff ff25 	bl	8006818 <destroy_handle>
 80069ce:	2300      	movs	r3, #0
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd10      	pop	{r4, pc}
 80069d4:	200007bc 	.word	0x200007bc
 80069d8:	200007ec 	.word	0x200007ec
 80069dc:	08011640 	.word	0x08011640
 80069e0:	080115b0 	.word	0x080115b0

080069e4 <acc_service_manager_deactivate>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4c0e      	ldr	r4, [pc, #56]	; (8006a20 <acc_service_manager_deactivate+0x3c>)
 80069e8:	7823      	ldrb	r3, [r4, #0]
 80069ea:	b1bb      	cbz	r3, 8006a1c <acc_service_manager_deactivate+0x38>
 80069ec:	6863      	ldr	r3, [r4, #4]
 80069ee:	b17b      	cbz	r3, 8006a10 <acc_service_manager_deactivate+0x2c>
 80069f0:	1d25      	adds	r5, r4, #4
 80069f2:	4628      	mov	r0, r5
 80069f4:	f7ff ffca 	bl	800698c <acc_service_destroy>
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f9      	bne.n	80069f2 <acc_service_manager_deactivate+0xe>
 80069fe:	f001 f88b 	bl	8007b18 <acc_rss_integration_log_level>
 8006a02:	b128      	cbz	r0, 8006a10 <acc_service_manager_deactivate+0x2c>
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <acc_service_manager_deactivate+0x40>)
 8006a06:	4a08      	ldr	r2, [pc, #32]	; (8006a28 <acc_service_manager_deactivate+0x44>)
 8006a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0a:	4908      	ldr	r1, [pc, #32]	; (8006a2c <acc_service_manager_deactivate+0x48>)
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	4798      	blx	r3
 8006a10:	2000      	movs	r0, #0
 8006a12:	7020      	strb	r0, [r4, #0]
 8006a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a18:	f7ff be5a 	b.w	80066d0 <acc_service_set_module_active>
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	bf00      	nop
 8006a20:	200007bc 	.word	0x200007bc
 8006a24:	200007ec 	.word	0x200007ec
 8006a28:	0801167c 	.word	0x0801167c
 8006a2c:	080115b0 	.word	0x080115b0

08006a30 <sparse_send_data>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	460b      	mov	r3, r1
 8006a34:	b084      	sub	sp, #16
 8006a36:	ad02      	add	r5, sp, #8
 8006a38:	795c      	ldrb	r4, [r3, #5]
 8006a3a:	9500      	str	r5, [sp, #0]
 8006a3c:	791e      	ldrb	r6, [r3, #4]
 8006a3e:	799d      	ldrb	r5, [r3, #6]
 8006a40:	f88d 400c 	strb.w	r4, [sp, #12]
 8006a44:	4601      	mov	r1, r0
 8006a46:	4610      	mov	r0, r2
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	f88d 4008 	strb.w	r4, [sp, #8]
 8006a4e:	ab03      	add	r3, sp, #12
 8006a50:	f88d 600d 	strb.w	r6, [sp, #13]
 8006a54:	f88d 500e 	strb.w	r5, [sp, #14]
 8006a58:	f7ff fe1c 	bl	8006694 <acc_service_send_data>
 8006a5c:	b004      	add	sp, #16
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}

08006a60 <sparse_create_service>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	b0a2      	sub	sp, #136	; 0x88
 8006a64:	4605      	mov	r5, r0
 8006a66:	2284      	movs	r2, #132	; 0x84
 8006a68:	a801      	add	r0, sp, #4
 8006a6a:	460e      	mov	r6, r1
 8006a6c:	f005 fc8c 	bl	800c388 <memcpy>
 8006a70:	a801      	add	r0, sp, #4
 8006a72:	f7ff fe69 	bl	8006748 <acc_service_configuration_check>
 8006a76:	b910      	cbnz	r0, 8006a7e <sparse_create_service+0x1e>
 8006a78:	2000      	movs	r0, #0
 8006a7a:	b022      	add	sp, #136	; 0x88
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	a808      	add	r0, sp, #32
 8006a80:	f001 fc54 	bl	800832c <acc_base_configuration_check>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d0f7      	beq.n	8006a78 <sparse_create_service+0x18>
 8006a88:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 8006a8c:	b1ec      	cbz	r4, 8006aca <sparse_create_service+0x6a>
 8006a8e:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d012      	beq.n	8006abc <sparse_create_service+0x5c>
 8006a96:	7933      	ldrb	r3, [r6, #4]
 8006a98:	722b      	strb	r3, [r5, #8]
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <sparse_create_service+0x78>)
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	aa08      	add	r2, sp, #32
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	4669      	mov	r1, sp
 8006aa4:	f105 0018 	add.w	r0, r5, #24
 8006aa8:	f001 fcde 	bl	8008468 <acc_pipeline_direct_assemble>
 8006aac:	4a0b      	ldr	r2, [pc, #44]	; (8006adc <sparse_create_service+0x7c>)
 8006aae:	6128      	str	r0, [r5, #16]
 8006ab0:	3800      	subs	r0, #0
 8006ab2:	bf18      	it	ne
 8006ab4:	2001      	movne	r0, #1
 8006ab6:	60ea      	str	r2, [r5, #12]
 8006ab8:	b022      	add	sp, #136	; 0x88
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d9e8      	bls.n	8006a96 <sparse_create_service+0x36>
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <sparse_create_service+0x80>)
 8006ac6:	4a07      	ldr	r2, [pc, #28]	; (8006ae4 <sparse_create_service+0x84>)
 8006ac8:	e001      	b.n	8006ace <sparse_create_service+0x6e>
 8006aca:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <sparse_create_service+0x80>)
 8006acc:	4a06      	ldr	r2, [pc, #24]	; (8006ae8 <sparse_create_service+0x88>)
 8006ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad0:	4906      	ldr	r1, [pc, #24]	; (8006aec <sparse_create_service+0x8c>)
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	4798      	blx	r3
 8006ad6:	e7cf      	b.n	8006a78 <sparse_create_service+0x18>
 8006ad8:	08006a31 	.word	0x08006a31
 8006adc:	08006589 	.word	0x08006589
 8006ae0:	200007ec 	.word	0x200007ec
 8006ae4:	08011708 	.word	0x08011708
 8006ae8:	080116c8 	.word	0x080116c8
 8006aec:	080116f8 	.word	0x080116f8

08006af0 <get_sparse_configuration>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	4604      	mov	r4, r0
 8006af4:	b120      	cbz	r0, 8006b00 <get_sparse_configuration+0x10>
 8006af6:	7903      	ldrb	r3, [r0, #4]
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d000      	beq.n	8006afe <get_sparse_configuration+0xe>
 8006afc:	2000      	movs	r0, #0
 8006afe:	bd10      	pop	{r4, pc}
 8006b00:	f001 f80a 	bl	8007b18 <acc_rss_integration_log_level>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d0f9      	beq.n	8006afc <get_sparse_configuration+0xc>
 8006b08:	4b03      	ldr	r3, [pc, #12]	; (8006b18 <get_sparse_configuration+0x28>)
 8006b0a:	4a04      	ldr	r2, [pc, #16]	; (8006b1c <get_sparse_configuration+0x2c>)
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	4904      	ldr	r1, [pc, #16]	; (8006b20 <get_sparse_configuration+0x30>)
 8006b10:	2001      	movs	r0, #1
 8006b12:	4798      	blx	r3
 8006b14:	4620      	mov	r0, r4
 8006b16:	bd10      	pop	{r4, pc}
 8006b18:	200007ec 	.word	0x200007ec
 8006b1c:	08011248 	.word	0x08011248
 8006b20:	080116f8 	.word	0x080116f8

08006b24 <set_configuration_for_profile>:
 8006b24:	b510      	push	{r4, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	460c      	mov	r4, r1
 8006b2a:	f7ff ffe1 	bl	8006af0 <get_sparse_configuration>
 8006b2e:	b140      	cbz	r0, 8006b42 <set_configuration_for_profile+0x1e>
 8006b30:	1e61      	subs	r1, r4, #1
 8006b32:	301c      	adds	r0, #28
 8006b34:	2904      	cmp	r1, #4
 8006b36:	d804      	bhi.n	8006b42 <set_configuration_for_profile+0x1e>
 8006b38:	e8df f001 	tbb	[pc, r1]
 8006b3c:	31261b10 	.word	0x31261b10
 8006b40:	05          	.byte	0x05
 8006b41:	00          	.byte	0x00
 8006b42:	b002      	add	sp, #8
 8006b44:	bd10      	pop	{r4, pc}
 8006b46:	2110      	movs	r1, #16
 8006b48:	9001      	str	r0, [sp, #4]
 8006b4a:	f001 f9b3 	bl	8007eb4 <acc_base_configuration_wg_duration_set>
 8006b4e:	9801      	ldr	r0, [sp, #4]
 8006b50:	2106      	movs	r1, #6
 8006b52:	b002      	add	sp, #8
 8006b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b58:	f001 b994 	b.w	8007e84 <acc_base_configuration_integrator_set>
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	9001      	str	r0, [sp, #4]
 8006b60:	f001 f9a8 	bl	8007eb4 <acc_base_configuration_wg_duration_set>
 8006b64:	9801      	ldr	r0, [sp, #4]
 8006b66:	2100      	movs	r1, #0
 8006b68:	b002      	add	sp, #8
 8006b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6e:	f001 b989 	b.w	8007e84 <acc_base_configuration_integrator_set>
 8006b72:	2107      	movs	r1, #7
 8006b74:	9001      	str	r0, [sp, #4]
 8006b76:	f001 f99d 	bl	8007eb4 <acc_base_configuration_wg_duration_set>
 8006b7a:	9801      	ldr	r0, [sp, #4]
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	b002      	add	sp, #8
 8006b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b84:	f001 b97e 	b.w	8007e84 <acc_base_configuration_integrator_set>
 8006b88:	2109      	movs	r1, #9
 8006b8a:	9001      	str	r0, [sp, #4]
 8006b8c:	f001 f992 	bl	8007eb4 <acc_base_configuration_wg_duration_set>
 8006b90:	9801      	ldr	r0, [sp, #4]
 8006b92:	2103      	movs	r1, #3
 8006b94:	b002      	add	sp, #8
 8006b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9a:	f001 b973 	b.w	8007e84 <acc_base_configuration_integrator_set>
 8006b9e:	210c      	movs	r1, #12
 8006ba0:	e7d2      	b.n	8006b48 <set_configuration_for_profile+0x24>
 8006ba2:	bf00      	nop

08006ba4 <acc_service_sparse_configuration_create>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	4a3d      	ldr	r2, [pc, #244]	; (8006c9c <acc_service_sparse_configuration_create+0xf8>)
 8006ba8:	b084      	sub	sp, #16
 8006baa:	2360      	movs	r3, #96	; 0x60
 8006bac:	2184      	movs	r1, #132	; 0x84
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f000 ff80 	bl	8007ab4 <acc_rss_integration_mem_calloc_debug>
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d06d      	beq.n	8006c96 <acc_service_sparse_configuration_create+0xf2>
 8006bba:	4939      	ldr	r1, [pc, #228]	; (8006ca0 <acc_service_sparse_configuration_create+0xfc>)
 8006bbc:	f100 041c 	add.w	r4, r0, #28
 8006bc0:	2602      	movs	r6, #2
 8006bc2:	2358      	movs	r3, #88	; 0x58
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	e9cd 3100 	strd	r3, r1, [sp]
 8006bca:	9602      	str	r6, [sp, #8]
 8006bcc:	4b35      	ldr	r3, [pc, #212]	; (8006ca4 <acc_service_sparse_configuration_create+0x100>)
 8006bce:	2103      	movs	r1, #3
 8006bd0:	f7ff fe0a 	bl	80067e8 <acc_service_initialize_service_configuration>
 8006bd4:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8006ca8 <acc_service_sparse_configuration_create+0x104>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f001 f84b 	bl	8007c74 <acc_base_configuration_requested_start_set>
 8006bde:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8006cac <acc_service_sparse_configuration_create+0x108>
 8006be2:	4620      	mov	r0, r4
 8006be4:	f001 f868 	bl	8007cb8 <acc_base_configuration_requested_length_set>
 8006be8:	4620      	mov	r0, r4
 8006bea:	2106      	movs	r1, #6
 8006bec:	f001 fac0 	bl	8008170 <acc_base_configuration_mur_set>
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f001 f822 	bl	8007c3c <acc_base_configuration_sensor_set>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f001 f86f 	bl	8007cdc <acc_base_configuration_repetition_mode_on_demand_set>
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4620      	mov	r0, r4
 8006c02:	f001 f881 	bl	8007d08 <acc_base_configuration_power_save_mode_set>
 8006c06:	4620      	mov	r0, r4
 8006c08:	2100      	movs	r1, #0
 8006c0a:	f001 f99b 	bl	8007f44 <acc_base_configuration_use_point_range_set>
 8006c0e:	2110      	movs	r1, #16
 8006c10:	4620      	mov	r0, r4
 8006c12:	f001 f9d3 	bl	8007fbc <acc_base_configuration_sparse_sweeps_per_frame_set>
 8006c16:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8006cb0 <acc_service_sparse_configuration_create+0x10c>
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f001 f9e6 	bl	8007fec <acc_base_configuration_sparse_sweep_rate_set>
 8006c20:	4620      	mov	r0, r4
 8006c22:	2100      	movs	r1, #0
 8006c24:	f001 f982 	bl	8007f2c <acc_base_configuration_sweep_type_debug_set>
 8006c28:	4620      	mov	r0, r4
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	f001 f884 	bl	8007d38 <acc_base_configuration_tx_disable_set>
 8006c30:	4620      	mov	r0, r4
 8006c32:	2100      	movs	r1, #0
 8006c34:	f001 f898 	bl	8007d68 <acc_base_configuration_decrease_tx_emission_set>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	2340      	movs	r3, #64	; 0x40
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f001 fa84 	bl	800814c <acc_base_configuration_cca_set>
 8006c44:	4620      	mov	r0, r4
 8006c46:	21ff      	movs	r1, #255	; 0xff
 8006c48:	f001 f9a0 	bl	8007f8c <acc_base_configuration_staggered_vga_stabilization_time_set>
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	2100      	movs	r1, #0
 8006c50:	f001 f990 	bl	8007f74 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8006c54:	4620      	mov	r0, r4
 8006c56:	2101      	movs	r1, #1
 8006c58:	f001 f9f6 	bl	8008048 <acc_base_configuration_downsampling_factor_set>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	2101      	movs	r1, #1
 8006c60:	f001 f958 	bl	8007f14 <acc_base_configuration_sampling_mode_set>
 8006c64:	4620      	mov	r0, r4
 8006c66:	210b      	movs	r1, #11
 8006c68:	f001 f8f4 	bl	8007e54 <acc_base_configuration_gain_set>
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	210a      	movs	r1, #10
 8006c70:	f001 f892 	bl	8007d98 <acc_base_configuration_hw_accelerated_average_samples_set>
 8006c74:	4620      	mov	r0, r4
 8006c76:	2100      	movs	r1, #0
 8006c78:	f001 f9fe 	bl	8008078 <acc_base_configuration_noise_level_normalization_set>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	2101      	movs	r1, #1
 8006c80:	f001 fa1e 	bl	80080c0 <acc_base_configuration_asynchronous_measurement_set>
 8006c84:	4620      	mov	r0, r4
 8006c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c8a:	f001 fa31 	bl	80080f0 <acc_base_configuration_min_pipeline_memory_size_set>
 8006c8e:	4909      	ldr	r1, [pc, #36]	; (8006cb4 <acc_service_sparse_configuration_create+0x110>)
 8006c90:	4620      	mov	r0, r4
 8006c92:	f001 f88d 	bl	8007db0 <acc_base_configuration_radar_engine_creation_set>
 8006c96:	4628      	mov	r0, r5
 8006c98:	b004      	add	sp, #16
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	080116f8 	.word	0x080116f8
 8006ca0:	08006b25 	.word	0x08006b25
 8006ca4:	08006a61 	.word	0x08006a61
 8006ca8:	3e4ccccd 	.word	0x3e4ccccd
 8006cac:	3e99999a 	.word	0x3e99999a
 8006cb0:	00000000 	.word	0x00000000
 8006cb4:	0800949d 	.word	0x0800949d

08006cb8 <acc_service_sparse_configuration_destroy>:
 8006cb8:	b130      	cbz	r0, 8006cc8 <acc_service_sparse_configuration_destroy+0x10>
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	6800      	ldr	r0, [r0, #0]
 8006cc0:	f7ff fd24 	bl	800670c <acc_service_configuration_valid>
 8006cc4:	b908      	cbnz	r0, 8006cca <acc_service_sparse_configuration_destroy+0x12>
 8006cc6:	bd10      	pop	{r4, pc}
 8006cc8:	4770      	bx	lr
 8006cca:	6820      	ldr	r0, [r4, #0]
 8006ccc:	f7ff ff10 	bl	8006af0 <get_sparse_configuration>
 8006cd0:	f000 ff10 	bl	8007af4 <acc_rss_integration_mem_free>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop

08006cdc <acc_service_sparse_configuration_sweeps_per_frame_set>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	460d      	mov	r5, r1
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	f7ff fd13 	bl	800670c <acc_service_configuration_valid>
 8006ce6:	b900      	cbnz	r0, 8006cea <acc_service_sparse_configuration_sweeps_per_frame_set+0xe>
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	6920      	ldr	r0, [r4, #16]
 8006cec:	4629      	mov	r1, r5
 8006cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cf2:	f001 b963 	b.w	8007fbc <acc_base_configuration_sparse_sweeps_per_frame_set>
 8006cf6:	bf00      	nop

08006cf8 <acc_service_sparse_get_metadata>:
 8006cf8:	b110      	cbz	r0, 8006d00 <acc_service_sparse_get_metadata+0x8>
 8006cfa:	7a03      	ldrb	r3, [r0, #8]
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d000      	beq.n	8006d02 <acc_service_sparse_get_metadata+0xa>
 8006d00:	4770      	bx	lr
 8006d02:	2900      	cmp	r1, #0
 8006d04:	d0fc      	beq.n	8006d00 <acc_service_sparse_get_metadata+0x8>
 8006d06:	6903      	ldr	r3, [r0, #16]
 8006d08:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006d3c <acc_service_sparse_get_metadata+0x44>
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8006d12:	6998      	ldr	r0, [r3, #24]
 8006d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d22:	b410      	push	{r4}
 8006d24:	695c      	ldr	r4, [r3, #20]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d28:	810b      	strh	r3, [r1, #8]
 8006d2a:	600c      	str	r4, [r1, #0]
 8006d2c:	6048      	str	r0, [r1, #4]
 8006d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d32:	edc1 7a04 	vstr	s15, [r1, #16]
 8006d36:	60ca      	str	r2, [r1, #12]
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	4d8ef3c2 	.word	0x4d8ef3c2

08006d40 <acc_service_sparse_get_next_by_reference>:
 8006d40:	b909      	cbnz	r1, 8006d46 <acc_service_sparse_get_next_by_reference+0x6>
 8006d42:	4608      	mov	r0, r1
 8006d44:	4770      	bx	lr
 8006d46:	b530      	push	{r4, r5, lr}
 8006d48:	b089      	sub	sp, #36	; 0x24
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	680d      	ldr	r5, [r1, #0]
 8006d4e:	9103      	str	r1, [sp, #12]
 8006d50:	2403      	movs	r4, #3
 8006d52:	a901      	add	r1, sp, #4
 8006d54:	9502      	str	r5, [sp, #8]
 8006d56:	9205      	str	r2, [sp, #20]
 8006d58:	f88d 4004 	strb.w	r4, [sp, #4]
 8006d5c:	9406      	str	r4, [sp, #24]
 8006d5e:	9304      	str	r3, [sp, #16]
 8006d60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006d64:	f88d 301e 	strb.w	r3, [sp, #30]
 8006d68:	f7ff fc18 	bl	800659c <acc_service_get_next>
 8006d6c:	b009      	add	sp, #36	; 0x24
 8006d6e:	bd30      	pop	{r4, r5, pc}

08006d70 <quarter_pi_cos_sin_f32>:
 8006d70:	eddf 7a20 	vldr	s15, [pc, #128]	; 8006df4 <quarter_pi_cos_sin_f32+0x84>
 8006d74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7c:	d436      	bmi.n	8006dec <quarter_pi_cos_sin_f32+0x7c>
 8006d7e:	b1e0      	cbz	r0, 8006dba <quarter_pi_cos_sin_f32+0x4a>
 8006d80:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d84:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006df8 <quarter_pi_cos_sin_f32+0x88>
 8006d88:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006dfc <quarter_pi_cos_sin_f32+0x8c>
 8006d8c:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8006e00 <quarter_pi_cos_sin_f32+0x90>
 8006d90:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006d94:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006d98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006da0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006da4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006da8:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006dac:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006db0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006db4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006db8:	4770      	bx	lr
 8006dba:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006dbe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006e04 <quarter_pi_cos_sin_f32+0x94>
 8006dc2:	eddf 5a11 	vldr	s11, [pc, #68]	; 8006e08 <quarter_pi_cos_sin_f32+0x98>
 8006dc6:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8006e0c <quarter_pi_cos_sin_f32+0x9c>
 8006dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006dd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006dda:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006dea:	4770      	bx	lr
 8006dec:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006e10 <quarter_pi_cos_sin_f32+0xa0>
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	bf490fdb 	.word	0xbf490fdb
 8006df8:	37cd1800 	.word	0x37cd1800
 8006dfc:	3ab606a0 	.word	0x3ab606a0
 8006e00:	3d2aaaa6 	.word	0x3d2aaaa6
 8006e04:	b94c909b 	.word	0xb94c909b
 8006e08:	3c088366 	.word	0x3c088366
 8006e0c:	3e2aaaa2 	.word	0x3e2aaaa2
 8006e10:	7fc00000 	.word	0x7fc00000

08006e14 <restricted_cos_sin_f32>:
 8006e14:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006e3c <restricted_cos_sin_f32+0x28>
 8006e18:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006e40 <restricted_cos_sin_f32+0x2c>
 8006e1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006e20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e24:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e2c:	bf5c      	itt	pl
 8006e2e:	f080 0001 	eorpl.w	r0, r0, #1
 8006e32:	eeb0 0a67 	vmovpl.f32	s0, s15
 8006e36:	f7ff bf9b 	b.w	8006d70 <quarter_pi_cos_sin_f32>
 8006e3a:	bf00      	nop
 8006e3c:	3fc90fdb 	.word	0x3fc90fdb
 8006e40:	333bbd2e 	.word	0x333bbd2e

08006e44 <acc_alg_basic_math_restricted_sin_f32>:
 8006e44:	2000      	movs	r0, #0
 8006e46:	f7ff bfe5 	b.w	8006e14 <restricted_cos_sin_f32>
 8006e4a:	bf00      	nop

08006e4c <apply_spatial_smoothing>:
 8006e4c:	b931      	cbnz	r1, 8006e5c <apply_spatial_smoothing+0x10>
 8006e4e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006ec0 <apply_spatial_smoothing+0x74>
 8006e52:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006e56:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006e5a:	4770      	bx	lr
 8006e5c:	b410      	push	{r4}
 8006e5e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006ec0 <apply_spatial_smoothing+0x74>
 8006e62:	edd0 7a00 	vldr	s15, [r0]
 8006e66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e6a:	1f03      	subs	r3, r0, #4
 8006e6c:	eef0 6a47 	vmov.f32	s13, s14
 8006e70:	2200      	movs	r2, #0
 8006e72:	1c54      	adds	r4, r2, #1
 8006e74:	42a1      	cmp	r1, r4
 8006e76:	bfc4      	itt	gt
 8006e78:	ed93 7a02 	vldrgt	s14, [r3, #8]
 8006e7c:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8006e80:	b18a      	cbz	r2, 8006ea6 <apply_spatial_smoothing+0x5a>
 8006e82:	ed93 7a00 	vldr	s14, [r3]
 8006e86:	edc3 6a00 	vstr	s13, [r3]
 8006e8a:	b2a2      	uxth	r2, r4
 8006e8c:	4291      	cmp	r1, r2
 8006e8e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006e92:	f103 0304 	add.w	r3, r3, #4
 8006e96:	d80d      	bhi.n	8006eb4 <apply_spatial_smoothing+0x68>
 8006e98:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ea0:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006ea4:	4770      	bx	lr
 8006ea6:	b2a2      	uxth	r2, r4
 8006ea8:	4291      	cmp	r1, r2
 8006eaa:	eeb0 7a67 	vmov.f32	s14, s15
 8006eae:	f103 0304 	add.w	r3, r3, #4
 8006eb2:	d9f1      	bls.n	8006e98 <apply_spatial_smoothing+0x4c>
 8006eb4:	eef0 6a67 	vmov.f32	s13, s15
 8006eb8:	4622      	mov	r2, r4
 8006eba:	eef0 7a47 	vmov.f32	s15, s14
 8006ebe:	e7d8      	b.n	8006e72 <apply_spatial_smoothing+0x26>
 8006ec0:	00000000 	.word	0x00000000

08006ec4 <calculate_l2_norm>:
 8006ec4:	b470      	push	{r4, r5, r6}
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	b085      	sub	sp, #20
 8006eca:	e9cd 5500 	strd	r5, r5, [sp]
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d046      	beq.n	8006f60 <calculate_l2_norm+0x9c>
 8006ed2:	b19a      	cbz	r2, 8006efc <calculate_l2_norm+0x38>
 8006ed4:	fb02 f605 	mul.w	r6, r2, r5
 8006ed8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006edc:	466c      	mov	r4, sp
 8006ede:	2300      	movs	r3, #0
 8006ee0:	ecf6 7a01 	vldmia	r6!, {s15}
 8006ee4:	ed94 7a00 	vldr	s14, [r4]
 8006ee8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006eec:	3301      	adds	r3, #1
 8006eee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	ece4 7a01 	vstmia	r4!, {s15}
 8006efa:	d1f1      	bne.n	8006ee0 <calculate_l2_norm+0x1c>
 8006efc:	3501      	adds	r5, #1
 8006efe:	b2ad      	uxth	r5, r5
 8006f00:	42a9      	cmp	r1, r5
 8006f02:	d8e6      	bhi.n	8006ed2 <calculate_l2_norm+0xe>
 8006f04:	b172      	cbz	r2, 8006f24 <calculate_l2_norm+0x60>
 8006f06:	ed9d 7a00 	vldr	s14, [sp]
 8006f0a:	eef1 7ac7 	vsqrt.f32	s15, s14
 8006f0e:	2a01      	cmp	r2, #1
 8006f10:	edcd 7a02 	vstr	s15, [sp, #8]
 8006f14:	d905      	bls.n	8006f22 <calculate_l2_norm+0x5e>
 8006f16:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006f1a:	eef1 7ac7 	vsqrt.f32	s15, s14
 8006f1e:	edcd 7a03 	vstr	s15, [sp, #12]
 8006f22:	b1d1      	cbz	r1, 8006f5a <calculate_l2_norm+0x96>
 8006f24:	eddd 6a02 	vldr	s13, [sp, #8]
 8006f28:	ed9d 6a03 	vldr	s12, [sp, #12]
 8006f2c:	1d03      	adds	r3, r0, #4
 8006f2e:	0095      	lsls	r5, r2, #2
 8006f30:	2000      	movs	r0, #0
 8006f32:	b16a      	cbz	r2, 8006f50 <calculate_l2_norm+0x8c>
 8006f34:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f3c:	2a01      	cmp	r2, #1
 8006f3e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006f42:	d905      	bls.n	8006f50 <calculate_l2_norm+0x8c>
 8006f44:	ed93 7a00 	vldr	s14, [r3]
 8006f48:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8006f4c:	edc3 7a00 	vstr	s15, [r3]
 8006f50:	3001      	adds	r0, #1
 8006f52:	b284      	uxth	r4, r0
 8006f54:	42a1      	cmp	r1, r4
 8006f56:	442b      	add	r3, r5
 8006f58:	d8eb      	bhi.n	8006f32 <calculate_l2_norm+0x6e>
 8006f5a:	b005      	add	sp, #20
 8006f5c:	bc70      	pop	{r4, r5, r6}
 8006f5e:	4770      	bx	lr
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d1d0      	bne.n	8006f06 <calculate_l2_norm+0x42>
 8006f64:	e7f9      	b.n	8006f5a <calculate_l2_norm+0x96>
 8006f66:	bf00      	nop

08006f68 <calculate_accumulation_factors>:
 8006f68:	ee07 1a90 	vmov	s15, r1
 8006f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f70:	b410      	push	{r4}
 8006f72:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8006f76:	1e4c      	subs	r4, r1, #1
 8006f78:	fb01 f404 	mul.w	r4, r1, r4
 8006f7c:	3903      	subs	r1, #3
 8006f7e:	ee07 4a10 	vmov	s14, r4
 8006f82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006f86:	edd0 6a02 	vldr	s13, [r0, #8]
 8006f8a:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006fd8 <calculate_accumulation_factors+0x70>
 8006f8e:	eef1 5ac7 	vsqrt.f32	s11, s14
 8006f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f96:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006f9a:	ee07 1a90 	vmov	s15, r1
 8006f9e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fa6:	edc2 6a00 	vstr	s13, [r2]
 8006faa:	edd0 6a03 	vldr	s13, [r0, #12]
 8006fae:	9901      	ldr	r1, [sp, #4]
 8006fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fb4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006fb8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006fbc:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8006fc0:	ed83 6a00 	vstr	s12, [r3]
 8006fc4:	edd0 6a04 	vldr	s13, [r0, #16]
 8006fc8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006fcc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006fd0:	edc1 6a00 	vstr	s13, [r1]
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	408f1bbd 	.word	0x408f1bbd

08006fdc <acc_alg_sparse_frame_abs_deviation_accumulator_reset>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	4617      	mov	r7, r2
 8006fe0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006fe4:	461e      	mov	r6, r3
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	0092      	lsls	r2, r2, #2
 8006fea:	2100      	movs	r1, #0
 8006fec:	f005 f9f4 	bl	800c3d8 <memset>
 8006ff0:	b35e      	cbz	r6, 800704a <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x6e>
 8006ff2:	6820      	ldr	r0, [r4, #0]
 8006ff4:	b31f      	cbz	r7, 800703e <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x62>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4684      	mov	ip, r0
 8006ffa:	1d02      	adds	r2, r0, #4
 8006ffc:	461d      	mov	r5, r3
 8006ffe:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8007002:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007006:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800700a:	edcc 7a00 	vstr	s15, [ip]
 800700e:	f005 0501 	and.w	r5, r5, #1
 8007012:	4614      	mov	r4, r2
 8007014:	2100      	movs	r1, #0
 8007016:	e008      	b.n	800702a <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x4e>
 8007018:	2d00      	cmp	r5, #0
 800701a:	bf0c      	ite	eq
 800701c:	eeb0 7a66 	vmoveq.f32	s14, s13
 8007020:	eeb0 7a67 	vmovne.f32	s14, s15
 8007024:	ed84 7a00 	vstr	s14, [r4]
 8007028:	3404      	adds	r4, #4
 800702a:	3101      	adds	r1, #1
 800702c:	b2c9      	uxtb	r1, r1
 800702e:	428e      	cmp	r6, r1
 8007030:	d1f2      	bne.n	8007018 <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x3c>
 8007032:	3301      	adds	r3, #1
 8007034:	b29d      	uxth	r5, r3
 8007036:	42af      	cmp	r7, r5
 8007038:	44f4      	add	ip, lr
 800703a:	4472      	add	r2, lr
 800703c:	d8e5      	bhi.n	800700a <acc_alg_sparse_frame_abs_deviation_accumulator_reset+0x2e>
 800703e:	4632      	mov	r2, r6
 8007040:	4639      	mov	r1, r7
 8007042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007046:	f7ff bf3d 	b.w	8006ec4 <calculate_l2_norm>
 800704a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800704c <acc_alg_sparse_frame_abs_deviation_accumulate>:
 800704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007050:	ed2d 8b02 	vpush	{d8}
 8007054:	b089      	sub	sp, #36	; 0x24
 8007056:	2a05      	cmp	r2, #5
 8007058:	4681      	mov	r9, r0
 800705a:	9302      	str	r3, [sp, #8]
 800705c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800705e:	f240 80b2 	bls.w	80071c6 <acc_alg_sparse_frame_abs_deviation_accumulate+0x17a>
 8007062:	2800      	cmp	r0, #0
 8007064:	f000 80aa 	beq.w	80071bc <acc_alg_sparse_frame_abs_deviation_accumulate+0x170>
 8007068:	4690      	mov	r8, r2
 800706a:	461c      	mov	r4, r3
 800706c:	ab07      	add	r3, sp, #28
 800706e:	468a      	mov	sl, r1
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	aa05      	add	r2, sp, #20
 8007074:	ab06      	add	r3, sp, #24
 8007076:	4641      	mov	r1, r8
 8007078:	f7ff ff76 	bl	8006f68 <calculate_accumulation_factors>
 800707c:	2c00      	cmp	r4, #0
 800707e:	f000 809c 	beq.w	80071ba <acc_alg_sparse_frame_abs_deviation_accumulate+0x16e>
 8007082:	ea4f 0358 	mov.w	r3, r8, lsr #1
 8007086:	ed90 3a00 	vldr	s6, [r0]
 800708a:	edd0 3a01 	vldr	s7, [r0, #4]
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	ed9d 8a05 	vldr	s16, [sp, #20]
 800709a:	ed9d 0a06 	vldr	s0, [sp, #24]
 800709e:	eddd 0a07 	vldr	s1, [sp, #28]
 80070a2:	ed90 1a02 	vldr	s2, [r0, #8]
 80070a6:	edd0 1a03 	vldr	s3, [r0, #12]
 80070aa:	ed90 2a04 	vldr	s4, [r0, #16]
 80070ae:	ee74 2a43 	vsub.f32	s5, s8, s6
 80070b2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80070b6:	005a      	lsls	r2, r3, #1
 80070b8:	f04f 0b00 	mov.w	fp, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	461f      	mov	r7, r3
 80070c0:	461e      	mov	r6, r3
 80070c2:	4618      	mov	r0, r3
 80070c4:	469e      	mov	lr, r3
 80070c6:	461c      	mov	r4, r3
 80070c8:	4655      	mov	r5, sl
 80070ca:	4601      	mov	r1, r0
 80070cc:	8828      	ldrh	r0, [r5, #0]
 80070ce:	46b4      	mov	ip, r6
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	eba0 0601 	sub.w	r6, r0, r1
 80070d6:	f103 0301 	add.w	r3, r3, #1
 80070da:	4639      	mov	r1, r7
 80070dc:	4404      	add	r4, r0
 80070de:	eba6 070c 	sub.w	r7, r6, ip
 80070e2:	4415      	add	r5, r2
 80070e4:	fa1f fc83 	uxth.w	ip, r3
 80070e8:	d904      	bls.n	80070f4 <acc_alg_sparse_frame_abs_deviation_accumulate+0xa8>
 80070ea:	1a79      	subs	r1, r7, r1
 80070ec:	2900      	cmp	r1, #0
 80070ee:	bfb8      	it	lt
 80070f0:	4249      	neglt	r1, r1
 80070f2:	448e      	add	lr, r1
 80070f4:	45e0      	cmp	r8, ip
 80070f6:	d8e8      	bhi.n	80070ca <acc_alg_sparse_frame_abs_deviation_accumulate+0x7e>
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	2100      	movs	r1, #0
 80070fc:	460d      	mov	r5, r1
 80070fe:	4650      	mov	r0, sl
 8007100:	441c      	add	r4, r3
 8007102:	fbb4 f4f8 	udiv	r4, r4, r8
 8007106:	8803      	ldrh	r3, [r0, #0]
 8007108:	3101      	adds	r1, #1
 800710a:	1b1b      	subs	r3, r3, r4
 800710c:	2b00      	cmp	r3, #0
 800710e:	b28e      	uxth	r6, r1
 8007110:	bfb8      	it	lt
 8007112:	425b      	neglt	r3, r3
 8007114:	45b0      	cmp	r8, r6
 8007116:	441d      	add	r5, r3
 8007118:	4410      	add	r0, r2
 800711a:	d8f4      	bhi.n	8007106 <acc_alg_sparse_frame_abs_deviation_accumulate+0xba>
 800711c:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
 8007120:	ee07 4a90 	vmov	s15, r4
 8007124:	edd9 5a00 	vldr	s11, [r9]
 8007128:	ed99 6a01 	vldr	s12, [r9, #4]
 800712c:	edd9 8a02 	vldr	s17, [r9, #8]
 8007130:	edd9 4a03 	vldr	s9, [r9, #12]
 8007134:	ed99 5a04 	vldr	s10, [r9, #16]
 8007138:	9902      	ldr	r1, [sp, #8]
 800713a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800713e:	ee63 5a25 	vmul.f32	s11, s6, s11
 8007142:	ee27 7aa2 	vmul.f32	s14, s15, s5
 8007146:	ee23 6a86 	vmul.f32	s12, s7, s12
 800714a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800714e:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007152:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007156:	ee07 ea10 	vmov	s14, lr
 800715a:	ee07 5a90 	vmov	s15, r5
 800715e:	ee75 6ac6 	vsub.f32	s13, s11, s12
 8007162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007166:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800716a:	eef0 6ae6 	vabs.f32	s13, s13
 800716e:	ee66 6a88 	vmul.f32	s13, s13, s16
 8007172:	ee61 8a28 	vmul.f32	s17, s2, s17
 8007176:	ee61 4aa4 	vmul.f32	s9, s3, s9
 800717a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800717e:	ee22 5a05 	vmul.f32	s10, s4, s10
 8007182:	ee27 7a20 	vmul.f32	s14, s14, s1
 8007186:	f10b 0b01 	add.w	fp, fp, #1
 800718a:	ee76 6aa8 	vadd.f32	s13, s13, s17
 800718e:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8007192:	ee35 7a07 	vadd.f32	s14, s10, s14
 8007196:	fa1f f38b 	uxth.w	r3, fp
 800719a:	4299      	cmp	r1, r3
 800719c:	edc9 5a00 	vstr	s11, [r9]
 80071a0:	ed89 6a01 	vstr	s12, [r9, #4]
 80071a4:	edc9 6a02 	vstr	s13, [r9, #8]
 80071a8:	edc9 7a03 	vstr	s15, [r9, #12]
 80071ac:	ed89 7a04 	vstr	s14, [r9, #16]
 80071b0:	f10a 0a02 	add.w	sl, sl, #2
 80071b4:	f109 0914 	add.w	r9, r9, #20
 80071b8:	d880      	bhi.n	80070bc <acc_alg_sparse_frame_abs_deviation_accumulate+0x70>
 80071ba:	2001      	movs	r0, #1
 80071bc:	b009      	add	sp, #36	; 0x24
 80071be:	ecbd 8b02 	vpop	{d8}
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	2000      	movs	r0, #0
 80071c8:	b009      	add	sp, #36	; 0x24
 80071ca:	ecbd 8b02 	vpop	{d8}
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	bf00      	nop

080071d4 <acc_alg_sparse_frame_abs_deviation_accumulate_pca>:
 80071d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d8:	b09d      	sub	sp, #116	; 0x74
 80071da:	2b05      	cmp	r3, #5
 80071dc:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
 80071e0:	f8bd b098 	ldrh.w	fp, [sp, #152]	; 0x98
 80071e4:	f89d 409c 	ldrb.w	r4, [sp, #156]	; 0x9c
 80071e8:	f240 8082 	bls.w	80072f0 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x11c>
 80071ec:	461e      	mov	r6, r3
 80071ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d07d      	beq.n	80072f0 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x11c>
 80071f4:	460d      	mov	r5, r1
 80071f6:	ab17      	add	r3, sp, #92	; 0x5c
 80071f8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	aa15      	add	r2, sp, #84	; 0x54
 80071fe:	4631      	mov	r1, r6
 8007200:	ab16      	add	r3, sp, #88	; 0x58
 8007202:	f7ff feb1 	bl	8006f68 <calculate_accumulation_factors>
 8007206:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007208:	6968      	ldr	r0, [r5, #20]
 800720a:	2100      	movs	r1, #0
 800720c:	f005 f8e4 	bl	800c3d8 <memset>
 8007210:	f1bb 0f00 	cmp.w	fp, #0
 8007214:	f000 830d 	beq.w	8007832 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x65e>
 8007218:	1e63      	subs	r3, r4, #1
 800721a:	b2db      	uxtb	r3, r3
 800721c:	6969      	ldr	r1, [r5, #20]
 800721e:	69a8      	ldr	r0, [r5, #24]
 8007220:	68ef      	ldr	r7, [r5, #12]
 8007222:	9706      	str	r7, [sp, #24]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	9312      	str	r3, [sp, #72]	; 0x48
 8007228:	3304      	adds	r3, #4
 800722a:	9310      	str	r3, [sp, #64]	; 0x40
 800722c:	440b      	add	r3, r1
 800722e:	ee07 6a90 	vmov	s15, r6
 8007232:	9308      	str	r3, [sp, #32]
 8007234:	b223      	sxth	r3, r4
 8007236:	930d      	str	r3, [sp, #52]	; 0x34
 8007238:	00a3      	lsls	r3, r4, #2
 800723a:	2700      	movs	r7, #0
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007244:	9102      	str	r1, [sp, #8]
 8007246:	9009      	str	r0, [sp, #36]	; 0x24
 8007248:	9705      	str	r7, [sp, #20]
 800724a:	4680      	mov	r8, r0
 800724c:	9707      	str	r7, [sp, #28]
 800724e:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8007252:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007256:	9304      	str	r3, [sp, #16]
 8007258:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800725c:	2300      	movs	r3, #0
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	4619      	mov	r1, r3
 8007262:	3301      	adds	r3, #1
 8007264:	8817      	ldrh	r7, [r2, #0]
 8007266:	b298      	uxth	r0, r3
 8007268:	4286      	cmp	r6, r0
 800726a:	4439      	add	r1, r7
 800726c:	444a      	add	r2, r9
 800726e:	d8f8      	bhi.n	8007262 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x8e>
 8007270:	ee07 1a90 	vmov	s15, r1
 8007274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007278:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800727c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007280:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8007284:	9b05      	ldr	r3, [sp, #20]
 8007286:	9808      	ldr	r0, [sp, #32]
 8007288:	9f04      	ldr	r7, [sp, #16]
 800728a:	f04f 0e00 	mov.w	lr, #0
 800728e:	46f4      	mov	ip, lr
 8007290:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8007294:	eca8 7a01 	vstmia	r8!, {s14}
 8007298:	883b      	ldrh	r3, [r7, #0]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072a6:	edc1 7a00 	vstr	s15, [r1]
 80072aa:	b19c      	cbz	r4, 80072d4 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x100>
 80072ac:	682a      	ldr	r2, [r5, #0]
 80072ae:	9b02      	ldr	r3, [sp, #8]
 80072b0:	445a      	add	r2, fp
 80072b2:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80072b6:	e001      	b.n	80072bc <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xe8>
 80072b8:	edd1 7a00 	vldr	s15, [r1]
 80072bc:	ecb2 7a01 	vldmia	r2!, {s14}
 80072c0:	edd3 6a00 	vldr	s13, [r3]
 80072c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072cc:	ece3 7a01 	vstmia	r3!, {s15}
 80072d0:	4298      	cmp	r0, r3
 80072d2:	d1f1      	bne.n	80072b8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xe4>
 80072d4:	f10c 0c01 	add.w	ip, ip, #1
 80072d8:	9a03      	ldr	r2, [sp, #12]
 80072da:	fa1f f38c 	uxth.w	r3, ip
 80072de:	429e      	cmp	r6, r3
 80072e0:	444f      	add	r7, r9
 80072e2:	4451      	add	r1, sl
 80072e4:	44a6      	add	lr, r4
 80072e6:	4410      	add	r0, r2
 80072e8:	d906      	bls.n	80072f8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x124>
 80072ea:	ed18 7a01 	vldr	s14, [r8, #-4]
 80072ee:	e7d3      	b.n	8007298 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0xc4>
 80072f0:	2000      	movs	r0, #0
 80072f2:	b01d      	add	sp, #116	; 0x74
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	9a04      	ldr	r2, [sp, #16]
 80072fa:	9b07      	ldr	r3, [sp, #28]
 80072fc:	3202      	adds	r2, #2
 80072fe:	9204      	str	r2, [sp, #16]
 8007300:	9a05      	ldr	r2, [sp, #20]
 8007302:	4422      	add	r2, r4
 8007304:	3301      	adds	r3, #1
 8007306:	9205      	str	r2, [sp, #20]
 8007308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800730a:	9307      	str	r3, [sp, #28]
 800730c:	b29b      	uxth	r3, r3
 800730e:	429a      	cmp	r2, r3
 8007310:	d8a4      	bhi.n	800725c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x88>
 8007312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007314:	f8cd 9014 	str.w	r9, [sp, #20]
 8007318:	e9dd 9802 	ldrd	r9, r8, [sp, #8]
 800731c:	f04f 0c00 	mov.w	ip, #0
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	ed9f 6a88 	vldr	s12, [pc, #544]	; 8007544 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 8007326:	930a      	str	r3, [sp, #40]	; 0x28
 8007328:	46e6      	mov	lr, ip
 800732a:	9204      	str	r2, [sp, #16]
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	9a08      	ldr	r2, [sp, #32]
 8007330:	2700      	movs	r7, #0
 8007332:	4638      	mov	r0, r7
 8007334:	eb03 018e 	add.w	r1, r3, lr, lsl #2
 8007338:	eeb0 7a46 	vmov.f32	s14, s12
 800733c:	b194      	cbz	r4, 8007364 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x190>
 800733e:	682b      	ldr	r3, [r5, #0]
 8007340:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007544 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 8007344:	eb03 0b0c 	add.w	fp, r3, ip
 8007348:	eb09 0387 	add.w	r3, r9, r7, lsl #2
 800734c:	ecf3 7a01 	vldmia	r3!, {s15}
 8007350:	ecfb 6a01 	vldmia	fp!, {s13}
 8007354:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007358:	429a      	cmp	r2, r3
 800735a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800735e:	d1f5      	bne.n	800734c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x178>
 8007360:	eeb0 7ac7 	vabs.f32	s14, s14
 8007364:	edd1 7a00 	vldr	s15, [r1]
 8007368:	eef0 7ae7 	vabs.f32	s15, s15
 800736c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007370:	3001      	adds	r0, #1
 8007372:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737a:	b283      	uxth	r3, r0
 800737c:	bfd8      	it	le
 800737e:	eeb0 7a46 	vmovle.f32	s14, s12
 8007382:	429e      	cmp	r6, r3
 8007384:	ed81 7a00 	vstr	s14, [r1]
 8007388:	4427      	add	r7, r4
 800738a:	4451      	add	r1, sl
 800738c:	4442      	add	r2, r8
 800738e:	d8d3      	bhi.n	8007338 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x164>
 8007390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007392:	f10e 0e01 	add.w	lr, lr, #1
 8007396:	4494      	add	ip, r2
 8007398:	9a04      	ldr	r2, [sp, #16]
 800739a:	fa1f f38e 	uxth.w	r3, lr
 800739e:	429a      	cmp	r2, r3
 80073a0:	d8c4      	bhi.n	800732c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x158>
 80073a2:	e9dd b904 	ldrd	fp, r9, [sp, #16]
 80073a6:	692a      	ldr	r2, [r5, #16]
 80073a8:	920f      	str	r2, [sp, #60]	; 0x3c
 80073aa:	9208      	str	r2, [sp, #32]
 80073ac:	9a06      	ldr	r2, [sp, #24]
 80073ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073b0:	9111      	str	r1, [sp, #68]	; 0x44
 80073b2:	ebab 030a 	sub.w	r3, fp, sl
 80073b6:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	2300      	movs	r3, #0
 80073be:	e9cd b90d 	strd	fp, r9, [sp, #52]	; 0x34
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80073c8:	468b      	mov	fp, r1
 80073ca:	9413      	str	r4, [sp, #76]	; 0x4c
 80073cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ce:	9906      	ldr	r1, [sp, #24]
 80073d0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80073d4:	4618      	mov	r0, r3
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8007544 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 80073dc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80073e0:	9504      	str	r5, [sp, #16]
 80073e2:	2200      	movs	r2, #0
 80073e4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 80073e8:	4696      	mov	lr, r2
 80073ea:	4694      	mov	ip, r2
 80073ec:	4617      	mov	r7, r2
 80073ee:	4691      	mov	r9, r2
 80073f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80073f4:	463b      	mov	r3, r7
 80073f6:	8827      	ldrh	r7, [r4, #0]
 80073f8:	edd0 7a00 	vldr	s15, [r0]
 80073fc:	4661      	mov	r1, ip
 80073fe:	eba7 0c03 	sub.w	ip, r7, r3
 8007402:	eef0 7ae7 	vabs.f32	s15, s15
 8007406:	4673      	mov	r3, lr
 8007408:	2a02      	cmp	r2, #2
 800740a:	ebac 0e01 	sub.w	lr, ip, r1
 800740e:	f102 0201 	add.w	r2, r2, #1
 8007412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007416:	fa1f f882 	uxth.w	r8, r2
 800741a:	445c      	add	r4, fp
 800741c:	ebae 0303 	sub.w	r3, lr, r3
 8007420:	d90f      	bls.n	8007442 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x26e>
 8007422:	9904      	ldr	r1, [sp, #16]
 8007424:	688d      	ldr	r5, [r1, #8]
 8007426:	9905      	ldr	r1, [sp, #20]
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	440d      	add	r5, r1
 800742e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007432:	4629      	mov	r1, r5
 8007434:	2b00      	cmp	r3, #0
 8007436:	4401      	add	r1, r0
 8007438:	bfb8      	it	lt
 800743a:	425b      	neglt	r3, r3
 800743c:	edc1 7a00 	vstr	s15, [r1]
 8007440:	4499      	add	r9, r3
 8007442:	4546      	cmp	r6, r8
 8007444:	4450      	add	r0, sl
 8007446:	d8d5      	bhi.n	80073f4 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x220>
 8007448:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800744a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800744e:	edd3 7a00 	vldr	s15, [r3]
 8007452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007454:	eddb 6a00 	vldr	s13, [fp]
 8007458:	edd2 5a00 	vldr	s11, [r2]
 800745c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800745e:	ed9b 4a01 	vldr	s8, [fp, #4]
 8007462:	9b07      	ldr	r3, [sp, #28]
 8007464:	9d04      	ldr	r5, [sp, #16]
 8007466:	ee35 6a67 	vsub.f32	s12, s10, s15
 800746a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800746e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007472:	ee07 9a90 	vmov	s15, r9
 8007476:	ee76 6a86 	vadd.f32	s13, s13, s12
 800747a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800747e:	edcb 6a00 	vstr	s13, [fp]
 8007482:	edd1 5a01 	vldr	s11, [r1, #4]
 8007486:	ecf2 4a01 	vldmia	r2!, {s9}
 800748a:	ee35 6a65 	vsub.f32	s12, s10, s11
 800748e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007492:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007496:	9209      	str	r2, [sp, #36]	; 0x24
 8007498:	ee36 6a25 	vadd.f32	s12, s12, s11
 800749c:	9a08      	ldr	r2, [sp, #32]
 800749e:	ed8b 6a01 	vstr	s12, [fp, #4]
 80074a2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80074a6:	3301      	adds	r3, #1
 80074a8:	ece2 6a01 	vstmia	r2!, {s13}
 80074ac:	edd1 6a03 	vldr	s13, [r1, #12]
 80074b0:	ed9b 4a03 	vldr	s8, [fp, #12]
 80074b4:	eddd 4a16 	vldr	s9, [sp, #88]	; 0x58
 80074b8:	ed9b 6a04 	vldr	s12, [fp, #16]
 80074bc:	eddd 5a17 	vldr	s11, [sp, #92]	; 0x5c
 80074c0:	9208      	str	r2, [sp, #32]
 80074c2:	ee66 6a84 	vmul.f32	s13, s13, s8
 80074c6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80074ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80074ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80074d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074d4:	ed8b 7a03 	vstr	s14, [fp, #12]
 80074d8:	ed91 7a04 	vldr	s14, [r1, #16]
 80074dc:	9307      	str	r3, [sp, #28]
 80074de:	ee27 7a06 	vmul.f32	s14, s14, s12
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074e8:	4293      	cmp	r3, r2
 80074ea:	edcb 7a04 	vstr	s15, [fp, #16]
 80074ee:	f10b 0b14 	add.w	fp, fp, #20
 80074f2:	f4ff af6b 	bcc.w	80073cc <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x1f8>
 80074f6:	2000      	movs	r0, #0
 80074f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80074fc:	1e57      	subs	r7, r2, #1
 80074fe:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 8007502:	b2bf      	uxth	r7, r7
 8007504:	4693      	mov	fp, r2
 8007506:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800750a:	b1a4      	cbz	r4, 8007536 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x362>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	edd1 6a00 	vldr	s13, [r1]
 8007512:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007516:	aa18      	add	r2, sp, #96	; 0x60
 8007518:	2300      	movs	r3, #0
 800751a:	ecfc 7a01 	vldmia	ip!, {s15}
 800751e:	ed92 7a00 	vldr	s14, [r2]
 8007522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007526:	3301      	adds	r3, #1
 8007528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800752c:	b2db      	uxtb	r3, r3
 800752e:	429c      	cmp	r4, r3
 8007530:	ece2 7a01 	vstmia	r2!, {s15}
 8007534:	d1f1      	bne.n	800751a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x346>
 8007536:	428f      	cmp	r7, r1
 8007538:	4420      	add	r0, r4
 800753a:	f101 0304 	add.w	r3, r1, #4
 800753e:	d003      	beq.n	8007548 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x374>
 8007540:	4619      	mov	r1, r3
 8007542:	e7e2      	b.n	800750a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x336>
 8007544:	00000000 	.word	0x00000000
 8007548:	2000      	movs	r0, #0
 800754a:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 800754e:	eddd 5a19 	vldr	s11, [sp, #100]	; 0x64
 8007552:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8007544 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 8007556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007558:	9f03      	ldr	r7, [sp, #12]
 800755a:	4601      	mov	r1, r0
 800755c:	2c00      	cmp	r4, #0
 800755e:	f000 8161 	beq.w	8007824 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x650>
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	4403      	add	r3, r0
 8007566:	edd3 7a00 	vldr	s15, [r3]
 800756a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800756e:	2c01      	cmp	r4, #1
 8007570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007574:	d905      	bls.n	8007582 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3ae>
 8007576:	ed93 7a01 	vldr	s14, [r3, #4]
 800757a:	ee25 7a87 	vmul.f32	s14, s11, s14
 800757e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007582:	eeb0 7ae7 	vabs.f32	s14, s15
 8007586:	edd2 7a00 	vldr	s15, [r2]
 800758a:	eef0 7ae7 	vabs.f32	s15, s15
 800758e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007592:	3101      	adds	r1, #1
 8007594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	b28b      	uxth	r3, r1
 800759e:	bfd8      	it	le
 80075a0:	eef0 7a66 	vmovle.f32	s15, s13
 80075a4:	459b      	cmp	fp, r3
 80075a6:	4438      	add	r0, r7
 80075a8:	ece2 7a01 	vstmia	r2!, {s15}
 80075ac:	d8d6      	bhi.n	800755c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x388>
 80075ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80075b0:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 80075b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80075b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075b8:	ed93 6a02 	vldr	s12, [r3, #8]
 80075bc:	2300      	movs	r3, #0
 80075be:	edd2 7a02 	vldr	s15, [r2, #8]
 80075c2:	ecb1 7a01 	vldmia	r1!, {s14}
 80075c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80075ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 80075ce:	3301      	adds	r3, #1
 80075d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075d4:	b298      	uxth	r0, r3
 80075d6:	4583      	cmp	fp, r0
 80075d8:	edc2 7a02 	vstr	s15, [r2, #8]
 80075dc:	f102 0214 	add.w	r2, r2, #20
 80075e0:	d8ed      	bhi.n	80075be <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3ea>
 80075e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80075e4:	9802      	ldr	r0, [sp, #8]
 80075e6:	2100      	movs	r1, #0
 80075e8:	f004 fef6 	bl	800c3d8 <memset>
 80075ec:	2300      	movs	r3, #0
 80075ee:	1e62      	subs	r2, r4, #1
 80075f0:	f1a6 0e03 	sub.w	lr, r6, #3
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	9205      	str	r2, [sp, #20]
 80075f8:	4698      	mov	r8, r3
 80075fa:	fa1f fa82 	uxth.w	sl, r2
 80075fe:	b2a6      	uxth	r6, r4
 8007600:	9b04      	ldr	r3, [sp, #16]
 8007602:	2700      	movs	r7, #0
 8007604:	4639      	mov	r1, r7
 8007606:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800760a:	b306      	cbz	r6, 800764e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x47a>
 800760c:	682a      	ldr	r2, [r5, #0]
 800760e:	9202      	str	r2, [sp, #8]
 8007610:	68aa      	ldr	r2, [r5, #8]
 8007612:	696b      	ldr	r3, [r5, #20]
 8007614:	fb04 f001 	mul.w	r0, r4, r1
 8007618:	fb0b 8101 	mla	r1, fp, r1, r8
 800761c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007620:	9a02      	ldr	r2, [sp, #8]
 8007622:	f103 0c04 	add.w	ip, r3, #4
 8007626:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800762a:	4450      	add	r0, sl
 800762c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8007630:	444a      	add	r2, r9
 8007632:	ecf2 7a01 	vldmia	r2!, {s15}
 8007636:	edd1 6a00 	vldr	s13, [r1]
 800763a:	ed93 7a00 	vldr	s14, [r3]
 800763e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007646:	ece3 7a01 	vstmia	r3!, {s15}
 800764a:	4298      	cmp	r0, r3
 800764c:	d1f1      	bne.n	8007632 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x45e>
 800764e:	3701      	adds	r7, #1
 8007650:	b2bf      	uxth	r7, r7
 8007652:	4577      	cmp	r7, lr
 8007654:	4639      	mov	r1, r7
 8007656:	dbd8      	blt.n	800760a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x436>
 8007658:	9a04      	ldr	r2, [sp, #16]
 800765a:	f108 0801 	add.w	r8, r8, #1
 800765e:	fa1f f388 	uxth.w	r3, r8
 8007662:	4422      	add	r2, r4
 8007664:	459b      	cmp	fp, r3
 8007666:	9204      	str	r2, [sp, #16]
 8007668:	d8ca      	bhi.n	8007600 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x42c>
 800766a:	686b      	ldr	r3, [r5, #4]
 800766c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8007670:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007672:	ed1f 6a4c 	vldr	s12, [pc, #-304]	; 8007544 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 8007676:	9304      	str	r3, [sp, #16]
 8007678:	2100      	movs	r1, #0
 800767a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800767e:	4691      	mov	r9, r2
 8007680:	3004      	adds	r0, #4
 8007682:	4499      	add	r9, r3
 8007684:	469a      	mov	sl, r3
 8007686:	4688      	mov	r8, r1
 8007688:	468c      	mov	ip, r1
 800768a:	b134      	cbz	r4, 800769a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4c6>
 800768c:	9b04      	ldr	r3, [sp, #16]
 800768e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8007692:	eca3 6a01 	vstmia	r3!, {s12}
 8007696:	4599      	cmp	r9, r3
 8007698:	d1fb      	bne.n	8007692 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4be>
 800769a:	2100      	movs	r1, #0
 800769c:	460f      	mov	r7, r1
 800769e:	b1d6      	cbz	r6, 80076d6 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x502>
 80076a0:	696b      	ldr	r3, [r5, #20]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	68ab      	ldr	r3, [r5, #8]
 80076a6:	fb0b 8207 	mla	r2, fp, r7, r8
 80076aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	fb04 f707 	mul.w	r7, r4, r7
 80076b4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80076b8:	4657      	mov	r7, sl
 80076ba:	ecf3 7a01 	vldmia	r3!, {s15}
 80076be:	edd2 6a00 	vldr	s13, [r2]
 80076c2:	ed97 7a00 	vldr	s14, [r7]
 80076c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80076ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076ce:	ece7 7a01 	vstmia	r7!, {s15}
 80076d2:	42b8      	cmp	r0, r7
 80076d4:	d1f1      	bne.n	80076ba <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4e6>
 80076d6:	3101      	adds	r1, #1
 80076d8:	b289      	uxth	r1, r1
 80076da:	4571      	cmp	r1, lr
 80076dc:	460f      	mov	r7, r1
 80076de:	dbde      	blt.n	800769e <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4ca>
 80076e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e2:	f108 0801 	add.w	r8, r8, #1
 80076e6:	fa1f f388 	uxth.w	r3, r8
 80076ea:	4492      	add	sl, r2
 80076ec:	4410      	add	r0, r2
 80076ee:	9a03      	ldr	r2, [sp, #12]
 80076f0:	459b      	cmp	fp, r3
 80076f2:	44a4      	add	ip, r4
 80076f4:	4491      	add	r9, r2
 80076f6:	d8c8      	bhi.n	800768a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x4b6>
 80076f8:	9804      	ldr	r0, [sp, #16]
 80076fa:	4622      	mov	r2, r4
 80076fc:	4659      	mov	r1, fp
 80076fe:	f7ff fbe1 	bl	8006ec4 <calculate_l2_norm>
 8007702:	2600      	movs	r6, #0
 8007704:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8007708:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800770c:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8007710:	4637      	mov	r7, r6
 8007712:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007716:	b1cc      	cbz	r4, 800774c <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x578>
 8007718:	e9d5 3200 	ldrd	r3, r2, [r5]
 800771c:	eb06 0108 	add.w	r1, r6, r8
 8007720:	1d18      	adds	r0, r3, #4
 8007722:	4401      	add	r1, r0
 8007724:	4433      	add	r3, r6
 8007726:	4432      	add	r2, r6
 8007728:	ed9c 7a04 	vldr	s14, [ip, #16]
 800772c:	ecf2 6a01 	vldmia	r2!, {s13}
 8007730:	ed93 6a00 	vldr	s12, [r3]
 8007734:	ee75 7ac7 	vsub.f32	s15, s11, s14
 8007738:	ee27 7a06 	vmul.f32	s14, s14, s12
 800773c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007744:	ece3 7a01 	vstmia	r3!, {s15}
 8007748:	4299      	cmp	r1, r3
 800774a:	d1ed      	bne.n	8007728 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x554>
 800774c:	3701      	adds	r7, #1
 800774e:	b2bb      	uxth	r3, r7
 8007750:	459b      	cmp	fp, r3
 8007752:	4476      	add	r6, lr
 8007754:	d8df      	bhi.n	8007716 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x542>
 8007756:	2600      	movs	r6, #0
 8007758:	e9cd 661a 	strd	r6, r6, [sp, #104]	; 0x68
 800775c:	2c00      	cmp	r4, #0
 800775e:	d064      	beq.n	800782a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x656>
 8007760:	f104 3cff 	add.w	ip, r4, #4294967295
 8007764:	af1a      	add	r7, sp, #104	; 0x68
 8007766:	fa5f fc8c 	uxtb.w	ip, ip
 800776a:	00a4      	lsls	r4, r4, #2
 800776c:	4658      	mov	r0, fp
 800776e:	bb66      	cbnz	r6, 80077ca <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5f6>
 8007770:	b310      	cbz	r0, 80077b8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5e4>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	46b0      	mov	r8, r6
 8007776:	4443      	add	r3, r8
 8007778:	ed97 7a00 	vldr	s14, [r7]
 800777c:	4619      	mov	r1, r3
 800777e:	2200      	movs	r2, #0
 8007780:	edd1 7a00 	vldr	s15, [r1]
 8007784:	3201      	adds	r2, #1
 8007786:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800778a:	fa1f fe82 	uxth.w	lr, r2
 800778e:	4570      	cmp	r0, lr
 8007790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007794:	4421      	add	r1, r4
 8007796:	d8f3      	bhi.n	8007780 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5ac>
 8007798:	eef1 6ac7 	vsqrt.f32	s13, s14
 800779c:	2200      	movs	r2, #0
 800779e:	ed87 7a00 	vstr	s14, [r7]
 80077a2:	ed93 7a00 	vldr	s14, [r3]
 80077a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077aa:	3201      	adds	r2, #1
 80077ac:	b291      	uxth	r1, r2
 80077ae:	4288      	cmp	r0, r1
 80077b0:	edc3 7a00 	vstr	s15, [r3]
 80077b4:	4423      	add	r3, r4
 80077b6:	d8f4      	bhi.n	80077a2 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5ce>
 80077b8:	45b4      	cmp	ip, r6
 80077ba:	f107 0704 	add.w	r7, r7, #4
 80077be:	f106 0301 	add.w	r3, r6, #1
 80077c2:	d032      	beq.n	800782a <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x656>
 80077c4:	461e      	mov	r6, r3
 80077c6:	2e00      	cmp	r6, #0
 80077c8:	d0d2      	beq.n	8007770 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x59c>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d0f4      	beq.n	80077b8 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5e4>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	ed5f 6aa4 	vldr	s13, [pc, #-656]	; 8007544 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x370>
 80077d4:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 80077d8:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80077dc:	2100      	movs	r1, #0
 80077de:	edd2 7a00 	vldr	s15, [r2]
 80077e2:	ed12 7a01 	vldr	s14, [r2, #-4]
 80077e6:	3101      	adds	r1, #1
 80077e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077ec:	fa1f fe81 	uxth.w	lr, r1
 80077f0:	4570      	cmp	r0, lr
 80077f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80077f6:	4422      	add	r2, r4
 80077f8:	d8f1      	bhi.n	80077de <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x60a>
 80077fa:	f1a8 0204 	sub.w	r2, r8, #4
 80077fe:	441a      	add	r2, r3
 8007800:	2100      	movs	r1, #0
 8007802:	ed92 7a00 	vldr	s14, [r2]
 8007806:	edd2 7a01 	vldr	s15, [r2, #4]
 800780a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800780e:	3101      	adds	r1, #1
 8007810:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007814:	fa1f fe81 	uxth.w	lr, r1
 8007818:	4570      	cmp	r0, lr
 800781a:	edc2 7a01 	vstr	s15, [r2, #4]
 800781e:	4422      	add	r2, r4
 8007820:	d8ef      	bhi.n	8007802 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x62e>
 8007822:	e7a8      	b.n	8007776 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x5a2>
 8007824:	eeb0 7a66 	vmov.f32	s14, s13
 8007828:	e6ad      	b.n	8007586 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x3b2>
 800782a:	2001      	movs	r0, #1
 800782c:	b01d      	add	sp, #116	; 0x74
 800782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007832:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007834:	6968      	ldr	r0, [r5, #20]
 8007836:	4659      	mov	r1, fp
 8007838:	f004 fdce 	bl	800c3d8 <memset>
 800783c:	6868      	ldr	r0, [r5, #4]
 800783e:	4622      	mov	r2, r4
 8007840:	4659      	mov	r1, fp
 8007842:	f7ff fb3f 	bl	8006ec4 <calculate_l2_norm>
 8007846:	e786      	b.n	8007756 <acc_alg_sparse_frame_abs_deviation_accumulate_pca+0x582>

08007848 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio>:
 8007848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784a:	4604      	mov	r4, r0
 800784c:	b083      	sub	sp, #12
 800784e:	2a00      	cmp	r2, #0
 8007850:	d041      	beq.n	80078d6 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x8e>
 8007852:	b389      	cbz	r1, 80078b8 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x70>
 8007854:	ed9f 5a23 	vldr	s10, [pc, #140]	; 80078e4 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x9c>
 8007858:	461f      	mov	r7, r3
 800785a:	4616      	mov	r6, r2
 800785c:	2500      	movs	r5, #0
 800785e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007862:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8007866:	edd4 7a04 	vldr	s15, [r4, #16]
 800786a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800786e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007872:	bfc8      	it	gt
 8007874:	ee67 7aa5 	vmulgt.f32	s15, s15, s11
 8007878:	f105 0501 	add.w	r5, r5, #1
 800787c:	bfc8      	it	gt
 800787e:	eec6 6a27 	vdivgt.f32	s13, s12, s15
 8007882:	fa1f fc85 	uxth.w	ip, r5
 8007886:	bfd8      	it	le
 8007888:	eef0 6a45 	vmovle.f32	s13, s10
 800788c:	b12a      	cbz	r2, 800789a <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x52>
 800788e:	ed94 7a03 	vldr	s14, [r4, #12]
 8007892:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007896:	ed86 7a00 	vstr	s14, [r6]
 800789a:	3604      	adds	r6, #4
 800789c:	b12b      	cbz	r3, 80078aa <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x62>
 800789e:	edd4 7a02 	vldr	s15, [r4, #8]
 80078a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078a6:	edc7 7a00 	vstr	s15, [r7]
 80078aa:	4561      	cmp	r1, ip
 80078ac:	f104 0414 	add.w	r4, r4, #20
 80078b0:	f107 0704 	add.w	r7, r7, #4
 80078b4:	d8d7      	bhi.n	8007866 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x1e>
 80078b6:	b122      	cbz	r2, 80078c2 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x7a>
 80078b8:	4610      	mov	r0, r2
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	f7ff fac6 	bl	8006e4c <apply_spatial_smoothing>
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	b12b      	cbz	r3, 80078d0 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x88>
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fac1 	bl	8006e4c <apply_spatial_smoothing>
 80078ca:	2001      	movs	r0, #1
 80078cc:	b003      	add	sp, #12
 80078ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078d0:	2001      	movs	r0, #1
 80078d2:	b003      	add	sp, #12
 80078d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078d6:	b113      	cbz	r3, 80078de <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x96>
 80078d8:	2900      	cmp	r1, #0
 80078da:	d1bb      	bne.n	8007854 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0xc>
 80078dc:	e7f2      	b.n	80078c4 <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x7c>
 80078de:	4618      	mov	r0, r3
 80078e0:	e7f4      	b.n	80078cc <acc_alg_sparse_frame_abs_deviation_to_noise_ratio+0x84>
 80078e2:	bf00      	nop
 80078e4:	00000000 	.word	0x00000000

080078e8 <acc_assert_fail>:
 80078e8:	b500      	push	{lr}
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <acc_assert_fail+0x20>)
 80078ec:	4a07      	ldr	r2, [pc, #28]	; (800790c <acc_assert_fail+0x24>)
 80078ee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80078f0:	b083      	sub	sp, #12
 80078f2:	4603      	mov	r3, r0
 80078f4:	9100      	str	r1, [sp, #0]
 80078f6:	2000      	movs	r0, #0
 80078f8:	4905      	ldr	r1, [pc, #20]	; (8007910 <acc_assert_fail+0x28>)
 80078fa:	47a0      	blx	r4
 80078fc:	4b05      	ldr	r3, [pc, #20]	; (8007914 <acc_assert_fail+0x2c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	b103      	cbz	r3, 8007904 <acc_assert_fail+0x1c>
 8007902:	4798      	blx	r3
 8007904:	e7fe      	b.n	8007904 <acc_assert_fail+0x1c>
 8007906:	bf00      	nop
 8007908:	200007ec 	.word	0x200007ec
 800790c:	08011734 	.word	0x08011734
 8007910:	0801174c 	.word	0x0801174c
 8007914:	200007c4 	.word	0x200007c4

08007918 <acc_rss_integration_register>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	6943      	ldr	r3, [r0, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d02b      	beq.n	8007978 <acc_rss_integration_register+0x60>
 8007920:	6983      	ldr	r3, [r0, #24]
 8007922:	b34b      	cbz	r3, 8007978 <acc_rss_integration_register+0x60>
 8007924:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007926:	b323      	cbz	r3, 8007972 <acc_rss_integration_register+0x5a>
 8007928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800792a:	b32b      	cbz	r3, 8007978 <acc_rss_integration_register+0x60>
 800792c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800792e:	b31b      	cbz	r3, 8007978 <acc_rss_integration_register+0x60>
 8007930:	6883      	ldr	r3, [r0, #8]
 8007932:	b30b      	cbz	r3, 8007978 <acc_rss_integration_register+0x60>
 8007934:	68c3      	ldr	r3, [r0, #12]
 8007936:	b1fb      	cbz	r3, 8007978 <acc_rss_integration_register+0x60>
 8007938:	6903      	ldr	r3, [r0, #16]
 800793a:	b1eb      	cbz	r3, 8007978 <acc_rss_integration_register+0x60>
 800793c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800793e:	b313      	cbz	r3, 8007986 <acc_rss_integration_register+0x6e>
 8007940:	6802      	ldr	r2, [r0, #0]
 8007942:	2a2a      	cmp	r2, #42	; 0x2a
 8007944:	d81a      	bhi.n	800797c <acc_rss_integration_register+0x64>
 8007946:	6842      	ldr	r2, [r0, #4]
 8007948:	2a0f      	cmp	r2, #15
 800794a:	d917      	bls.n	800797c <acc_rss_integration_register+0x64>
 800794c:	69c2      	ldr	r2, [r0, #28]
 800794e:	b10a      	cbz	r2, 8007954 <acc_rss_integration_register+0x3c>
 8007950:	6a02      	ldr	r2, [r0, #32]
 8007952:	b19a      	cbz	r2, 800797c <acc_rss_integration_register+0x64>
 8007954:	4605      	mov	r5, r0
 8007956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007958:	4c0c      	ldr	r4, [pc, #48]	; (800798c <acc_rss_integration_register+0x74>)
 800795a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800795c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800795e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007968:	2301      	movs	r3, #1
 800796a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800796e:	4618      	mov	r0, r3
 8007970:	bd38      	pop	{r3, r4, r5, pc}
 8007972:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1d7      	bne.n	8007928 <acc_rss_integration_register+0x10>
 8007978:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800797a:	b123      	cbz	r3, 8007986 <acc_rss_integration_register+0x6e>
 800797c:	4a04      	ldr	r2, [pc, #16]	; (8007990 <acc_rss_integration_register+0x78>)
 800797e:	4905      	ldr	r1, [pc, #20]	; (8007994 <acc_rss_integration_register+0x7c>)
 8007980:	2000      	movs	r0, #0
 8007982:	4798      	blx	r3
 8007984:	2300      	movs	r3, #0
 8007986:	4618      	mov	r0, r3
 8007988:	bd38      	pop	{r3, r4, r5, pc}
 800798a:	bf00      	nop
 800798c:	200007ec 	.word	0x200007ec
 8007990:	08011754 	.word	0x08011754
 8007994:	08011768 	.word	0x08011768

08007998 <acc_rss_integration_unregister>:
 8007998:	4802      	ldr	r0, [pc, #8]	; (80079a4 <acc_rss_integration_unregister+0xc>)
 800799a:	223c      	movs	r2, #60	; 0x3c
 800799c:	2100      	movs	r1, #0
 800799e:	f004 bd1b 	b.w	800c3d8 <memset>
 80079a2:	bf00      	nop
 80079a4:	200007ec 	.word	0x200007ec

080079a8 <acc_rss_integration_get_sensor_count>:
 80079a8:	4b01      	ldr	r3, [pc, #4]	; (80079b0 <acc_rss_integration_get_sensor_count+0x8>)
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	200007ec 	.word	0x200007ec

080079b4 <acc_rss_integration_get_sensor_reference_frequency>:
 80079b4:	4b01      	ldr	r3, [pc, #4]	; (80079bc <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	4718      	bx	r3
 80079ba:	bf00      	nop
 80079bc:	200007ec 	.word	0x200007ec

080079c0 <acc_rss_integration_get_max_spi_transfer_size>:
 80079c0:	4b01      	ldr	r3, [pc, #4]	; (80079c8 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 80079c2:	6858      	ldr	r0, [r3, #4]
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	200007ec 	.word	0x200007ec

080079cc <acc_rss_integration_sensor_device_power_on>:
 80079cc:	4b01      	ldr	r3, [pc, #4]	; (80079d4 <acc_rss_integration_sensor_device_power_on+0x8>)
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	4718      	bx	r3
 80079d2:	bf00      	nop
 80079d4:	200007ec 	.word	0x200007ec

080079d8 <acc_rss_integration_sensor_device_power_off>:
 80079d8:	4b01      	ldr	r3, [pc, #4]	; (80079e0 <acc_rss_integration_sensor_device_power_off+0x8>)
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	4718      	bx	r3
 80079de:	bf00      	nop
 80079e0:	200007ec 	.word	0x200007ec

080079e4 <acc_rss_integration_sensor_device_hibernate_enter>:
 80079e4:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	b103      	cbz	r3, 80079ec <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 80079ea:	4718      	bx	r3
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	200007ec 	.word	0x200007ec

080079f4 <acc_rss_integration_sensor_device_hibernate_exit>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	b103      	cbz	r3, 80079fc <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 80079fa:	4718      	bx	r3
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	200007ec 	.word	0x200007ec

08007a04 <acc_rss_integration_is_hibernate_capable>:
 8007a04:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <acc_rss_integration_is_hibernate_capable+0xc>)
 8007a06:	69d8      	ldr	r0, [r3, #28]
 8007a08:	3800      	subs	r0, #0
 8007a0a:	bf18      	it	ne
 8007a0c:	2001      	movne	r0, #1
 8007a0e:	4770      	bx	lr
 8007a10:	200007ec 	.word	0x200007ec

08007a14 <acc_rss_integration_wait_for_sensor_interrupt>:
 8007a14:	4b01      	ldr	r3, [pc, #4]	; (8007a1c <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	4718      	bx	r3
 8007a1a:	bf00      	nop
 8007a1c:	200007ec 	.word	0x200007ec

08007a20 <acc_rss_integration_sensor_device_transfer>:
 8007a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a24:	4f10      	ldr	r7, [pc, #64]	; (8007a68 <acc_rss_integration_sensor_device_transfer+0x48>)
 8007a26:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 8007a2a:	f1be 0f00 	cmp.w	lr, #0
 8007a2e:	d003      	beq.n	8007a38 <acc_rss_integration_sensor_device_transfer+0x18>
 8007a30:	4673      	mov	r3, lr
 8007a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	4718      	bx	r3
 8007a38:	460c      	mov	r4, r1
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4615      	mov	r5, r2
 8007a40:	4620      	mov	r0, r4
 8007a42:	4698      	mov	r8, r3
 8007a44:	f000 f8b4 	bl	8007bb0 <acc_utils_swap16_array>
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	006a      	lsls	r2, r5, #1
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4798      	blx	r3
 8007a52:	f1b8 0f00 	cmp.w	r8, #0
 8007a56:	d101      	bne.n	8007a5c <acc_rss_integration_sensor_device_transfer+0x3c>
 8007a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4620      	mov	r0, r4
 8007a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a64:	f000 b8a4 	b.w	8007bb0 <acc_utils_swap16_array>
 8007a68:	200007ec 	.word	0x200007ec

08007a6c <acc_rss_integration_mem_alloc_debug>:
 8007a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a70:	4f0c      	ldr	r7, [pc, #48]	; (8007aa4 <acc_rss_integration_mem_alloc_debug+0x38>)
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	4688      	mov	r8, r1
 8007a76:	4616      	mov	r6, r2
 8007a78:	4605      	mov	r5, r0
 8007a7a:	4798      	blx	r3
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	b150      	cbz	r0, 8007a96 <acc_rss_integration_mem_alloc_debug+0x2a>
 8007a80:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <acc_rss_integration_mem_alloc_debug+0x3c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b123      	cbz	r3, 8007a90 <acc_rss_integration_mem_alloc_debug+0x24>
 8007a86:	681f      	ldr	r7, [r3, #0]
 8007a88:	4642      	mov	r2, r8
 8007a8a:	4633      	mov	r3, r6
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	47b8      	blx	r7
 8007a90:	4620      	mov	r0, r4
 8007a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a98:	4a04      	ldr	r2, [pc, #16]	; (8007aac <acc_rss_integration_mem_alloc_debug+0x40>)
 8007a9a:	4905      	ldr	r1, [pc, #20]	; (8007ab0 <acc_rss_integration_mem_alloc_debug+0x44>)
 8007a9c:	4798      	blx	r3
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa4:	200007ec 	.word	0x200007ec
 8007aa8:	200007c8 	.word	0x200007c8
 8007aac:	08011778 	.word	0x08011778
 8007ab0:	08011768 	.word	0x08011768

08007ab4 <acc_rss_integration_mem_calloc_debug>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	b190      	cbz	r0, 8007ade <acc_rss_integration_mem_calloc_debug+0x2a>
 8007ab8:	460c      	mov	r4, r1
 8007aba:	4611      	mov	r1, r2
 8007abc:	461a      	mov	r2, r3
 8007abe:	fba0 3604 	umull	r3, r6, r0, r4
 8007ac2:	b97e      	cbnz	r6, 8007ae4 <acc_rss_integration_mem_calloc_debug+0x30>
 8007ac4:	fb04 f500 	mul.w	r5, r4, r0
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f7ff ffcf 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 8007ace:	4604      	mov	r4, r0
 8007ad0:	b118      	cbz	r0, 8007ada <acc_rss_integration_mem_calloc_debug+0x26>
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	f004 fc7f 	bl	800c3d8 <memset>
 8007ada:	4620      	mov	r0, r4
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	4802      	ldr	r0, [pc, #8]	; (8007af0 <acc_rss_integration_mem_calloc_debug+0x3c>)
 8007ae6:	f240 1115 	movw	r1, #277	; 0x115
 8007aea:	f7ff fefd 	bl	80078e8 <acc_assert_fail>
 8007aee:	bf00      	nop
 8007af0:	08011768 	.word	0x08011768

08007af4 <acc_rss_integration_mem_free>:
 8007af4:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <acc_rss_integration_mem_free+0x1c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	b510      	push	{r4, lr}
 8007afa:	4604      	mov	r4, r0
 8007afc:	b10b      	cbz	r3, 8007b02 <acc_rss_integration_mem_free+0xe>
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	4798      	blx	r3
 8007b02:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <acc_rss_integration_mem_free+0x20>)
 8007b04:	4620      	mov	r0, r4
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b0c:	4718      	bx	r3
 8007b0e:	bf00      	nop
 8007b10:	200007c8 	.word	0x200007c8
 8007b14:	200007ec 	.word	0x200007ec

08007b18 <acc_rss_integration_log_level>:
 8007b18:	4b01      	ldr	r3, [pc, #4]	; (8007b20 <acc_rss_integration_log_level+0x8>)
 8007b1a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8007b1e:	4770      	bx	lr
 8007b20:	200007ec 	.word	0x200007ec

08007b24 <acc_probes_execute_uint16>:
 8007b24:	b530      	push	{r4, r5, lr}
 8007b26:	b085      	sub	sp, #20
 8007b28:	4c09      	ldr	r4, [pc, #36]	; (8007b50 <acc_probes_execute_uint16+0x2c>)
 8007b2a:	f88d 0004 	strb.w	r0, [sp, #4]
 8007b2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007b32:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007b36:	2501      	movs	r5, #1
 8007b38:	6844      	ldr	r4, [r0, #4]
 8007b3a:	9102      	str	r1, [sp, #8]
 8007b3c:	9503      	str	r5, [sp, #12]
 8007b3e:	b12c      	cbz	r4, 8007b4c <acc_probes_execute_uint16+0x28>
 8007b40:	4611      	mov	r1, r2
 8007b42:	461a      	mov	r2, r3
 8007b44:	40aa      	lsls	r2, r5
 8007b46:	6883      	ldr	r3, [r0, #8]
 8007b48:	a801      	add	r0, sp, #4
 8007b4a:	47a0      	blx	r4
 8007b4c:	b005      	add	sp, #20
 8007b4e:	bd30      	pop	{r4, r5, pc}
 8007b50:	20000014 	.word	0x20000014

08007b54 <acc_probes_execute_struct>:
 8007b54:	b530      	push	{r4, r5, lr}
 8007b56:	b085      	sub	sp, #20
 8007b58:	4c09      	ldr	r4, [pc, #36]	; (8007b80 <acc_probes_execute_struct+0x2c>)
 8007b5a:	f88d 0004 	strb.w	r0, [sp, #4]
 8007b5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007b62:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007b66:	2507      	movs	r5, #7
 8007b68:	6844      	ldr	r4, [r0, #4]
 8007b6a:	9102      	str	r1, [sp, #8]
 8007b6c:	9503      	str	r5, [sp, #12]
 8007b6e:	b124      	cbz	r4, 8007b7a <acc_probes_execute_struct+0x26>
 8007b70:	4611      	mov	r1, r2
 8007b72:	461a      	mov	r2, r3
 8007b74:	6883      	ldr	r3, [r0, #8]
 8007b76:	a801      	add	r0, sp, #4
 8007b78:	47a0      	blx	r4
 8007b7a:	b005      	add	sp, #20
 8007b7c:	bd30      	pop	{r4, r5, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000014 	.word	0x20000014

08007b84 <acc_probes_execute_primitive_probe>:
 8007b84:	b510      	push	{r4, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	4b08      	ldr	r3, [pc, #32]	; (8007bac <acc_probes_execute_primitive_probe+0x28>)
 8007b8a:	f88d 0004 	strb.w	r0, [sp, #4]
 8007b8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007b92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007b96:	2200      	movs	r2, #0
 8007b98:	6844      	ldr	r4, [r0, #4]
 8007b9a:	9102      	str	r1, [sp, #8]
 8007b9c:	9203      	str	r2, [sp, #12]
 8007b9e:	b11c      	cbz	r4, 8007ba8 <acc_probes_execute_primitive_probe+0x24>
 8007ba0:	6883      	ldr	r3, [r0, #8]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	a801      	add	r0, sp, #4
 8007ba6:	47a0      	blx	r4
 8007ba8:	b004      	add	sp, #16
 8007baa:	bd10      	pop	{r4, pc}
 8007bac:	20000014 	.word	0x20000014

08007bb0 <acc_utils_swap16_array>:
 8007bb0:	1e4a      	subs	r2, r1, #1
 8007bb2:	b131      	cbz	r1, 8007bc2 <acc_utils_swap16_array+0x12>
 8007bb4:	8803      	ldrh	r3, [r0, #0]
 8007bb6:	3a01      	subs	r2, #1
 8007bb8:	ba5b      	rev16	r3, r3
 8007bba:	f820 3b02 	strh.w	r3, [r0], #2
 8007bbe:	1c53      	adds	r3, r2, #1
 8007bc0:	d1f8      	bne.n	8007bb4 <acc_utils_swap16_array+0x4>
 8007bc2:	4770      	bx	lr

08007bc4 <acc_utils_uint32_to_transfer_buffer>:
 8007bc4:	b152      	cbz	r2, 8007bdc <acc_utils_uint32_to_transfer_buffer+0x18>
 8007bc6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007bca:	3804      	subs	r0, #4
 8007bcc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8007bd0:	804b      	strh	r3, [r1, #2]
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	800b      	strh	r3, [r1, #0]
 8007bd6:	3104      	adds	r1, #4
 8007bd8:	4291      	cmp	r1, r2
 8007bda:	d1f7      	bne.n	8007bcc <acc_utils_uint32_to_transfer_buffer+0x8>
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <acc_utils_transfer_buffer_to_uint32>:
 8007be0:	b17a      	cbz	r2, 8007c02 <acc_utils_transfer_buffer_to_uint32+0x22>
 8007be2:	b410      	push	{r4}
 8007be4:	3904      	subs	r1, #4
 8007be6:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8007bea:	8802      	ldrh	r2, [r0, #0]
 8007bec:	8843      	ldrh	r3, [r0, #2]
 8007bee:	3004      	adds	r0, #4
 8007bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bf4:	4284      	cmp	r4, r0
 8007bf6:	f841 3f04 	str.w	r3, [r1, #4]!
 8007bfa:	d1f6      	bne.n	8007bea <acc_utils_transfer_buffer_to_uint32+0xa>
 8007bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	4770      	bx	lr

08007c04 <configuration_is_valid.part.0>:
 8007c04:	b508      	push	{r3, lr}
 8007c06:	f7ff ff87 	bl	8007b18 <acc_rss_integration_log_level>
 8007c0a:	b128      	cbz	r0, 8007c18 <configuration_is_valid.part.0+0x14>
 8007c0c:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <configuration_is_valid.part.0+0x18>)
 8007c0e:	4a04      	ldr	r2, [pc, #16]	; (8007c20 <configuration_is_valid.part.0+0x1c>)
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	4904      	ldr	r1, [pc, #16]	; (8007c24 <configuration_is_valid.part.0+0x20>)
 8007c14:	2001      	movs	r0, #1
 8007c16:	4798      	blx	r3
 8007c18:	2000      	movs	r0, #0
 8007c1a:	bd08      	pop	{r3, pc}
 8007c1c:	200007ec 	.word	0x200007ec
 8007c20:	08011788 	.word	0x08011788
 8007c24:	080117a4 	.word	0x080117a4

08007c28 <acc_base_configuration_sensor_get>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	b108      	cbz	r0, 8007c32 <acc_base_configuration_sensor_get+0xa>
 8007c2e:	68e0      	ldr	r0, [r4, #12]
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	f7ff ffe7 	bl	8007c04 <configuration_is_valid.part.0>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d1f9      	bne.n	8007c2e <acc_base_configuration_sensor_get+0x6>
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <acc_base_configuration_sensor_set>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	460d      	mov	r5, r1
 8007c40:	4604      	mov	r4, r0
 8007c42:	b108      	cbz	r0, 8007c48 <acc_base_configuration_sensor_set+0xc>
 8007c44:	60e5      	str	r5, [r4, #12]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	f7ff ffdc 	bl	8007c04 <configuration_is_valid.part.0>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1f9      	bne.n	8007c44 <acc_base_configuration_sensor_set+0x8>
 8007c50:	bd38      	pop	{r3, r4, r5, pc}
 8007c52:	bf00      	nop

08007c54 <acc_base_configuration_requested_start_get>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4604      	mov	r4, r0
 8007c58:	b110      	cbz	r0, 8007c60 <acc_base_configuration_requested_start_get+0xc>
 8007c5a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8007c5e:	bd10      	pop	{r4, pc}
 8007c60:	f7ff ffd0 	bl	8007c04 <configuration_is_valid.part.0>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d1f8      	bne.n	8007c5a <acc_base_configuration_requested_start_get+0x6>
 8007c68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c70 <acc_base_configuration_requested_start_get+0x1c>
 8007c6c:	bd10      	pop	{r4, pc}
 8007c6e:	bf00      	nop
 8007c70:	00000000 	.word	0x00000000

08007c74 <acc_base_configuration_requested_start_set>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	4604      	mov	r4, r0
 8007c78:	ed2d 8b02 	vpush	{d8}
 8007c7c:	eeb0 8a40 	vmov.f32	s16, s0
 8007c80:	b120      	cbz	r0, 8007c8c <acc_base_configuration_requested_start_set+0x18>
 8007c82:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8007c86:	ecbd 8b02 	vpop	{d8}
 8007c8a:	bd10      	pop	{r4, pc}
 8007c8c:	f7ff ffba 	bl	8007c04 <configuration_is_valid.part.0>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1f6      	bne.n	8007c82 <acc_base_configuration_requested_start_set+0xe>
 8007c94:	e7f7      	b.n	8007c86 <acc_base_configuration_requested_start_set+0x12>
 8007c96:	bf00      	nop

08007c98 <acc_base_configuration_requested_length_get>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	b110      	cbz	r0, 8007ca4 <acc_base_configuration_requested_length_get+0xc>
 8007c9e:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8007ca2:	bd10      	pop	{r4, pc}
 8007ca4:	f7ff ffae 	bl	8007c04 <configuration_is_valid.part.0>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d1f8      	bne.n	8007c9e <acc_base_configuration_requested_length_get+0x6>
 8007cac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007cb4 <acc_base_configuration_requested_length_get+0x1c>
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	bf00      	nop
 8007cb4:	00000000 	.word	0x00000000

08007cb8 <acc_base_configuration_requested_length_set>:
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	4604      	mov	r4, r0
 8007cbc:	ed2d 8b02 	vpush	{d8}
 8007cc0:	eeb0 8a40 	vmov.f32	s16, s0
 8007cc4:	b120      	cbz	r0, 8007cd0 <acc_base_configuration_requested_length_set+0x18>
 8007cc6:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8007cca:	ecbd 8b02 	vpop	{d8}
 8007cce:	bd10      	pop	{r4, pc}
 8007cd0:	f7ff ff98 	bl	8007c04 <configuration_is_valid.part.0>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d1f6      	bne.n	8007cc6 <acc_base_configuration_requested_length_set+0xe>
 8007cd8:	e7f7      	b.n	8007cca <acc_base_configuration_requested_length_set+0x12>
 8007cda:	bf00      	nop

08007cdc <acc_base_configuration_repetition_mode_on_demand_set>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	4604      	mov	r4, r0
 8007ce0:	b110      	cbz	r0, 8007ce8 <acc_base_configuration_repetition_mode_on_demand_set+0xc>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	7123      	strb	r3, [r4, #4]
 8007ce6:	bd10      	pop	{r4, pc}
 8007ce8:	f7ff ff8c 	bl	8007c04 <configuration_is_valid.part.0>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d1f8      	bne.n	8007ce2 <acc_base_configuration_repetition_mode_on_demand_set+0x6>
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	bf00      	nop

08007cf4 <acc_base_configuration_power_save_mode_get>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	b108      	cbz	r0, 8007cfe <acc_base_configuration_power_save_mode_get+0xa>
 8007cfa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	f7ff ff81 	bl	8007c04 <configuration_is_valid.part.0>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d1f9      	bne.n	8007cfa <acc_base_configuration_power_save_mode_get+0x6>
 8007d06:	bd10      	pop	{r4, pc}

08007d08 <acc_base_configuration_power_save_mode_set>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	b108      	cbz	r0, 8007d14 <acc_base_configuration_power_save_mode_set+0xc>
 8007d10:	63a5      	str	r5, [r4, #56]	; 0x38
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	f7ff ff76 	bl	8007c04 <configuration_is_valid.part.0>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d1f9      	bne.n	8007d10 <acc_base_configuration_power_save_mode_set+0x8>
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	bf00      	nop

08007d20 <acc_base_configuration_tx_disable_get>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	4604      	mov	r4, r0
 8007d24:	b110      	cbz	r0, 8007d2c <acc_base_configuration_tx_disable_get+0xc>
 8007d26:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8007d2a:	bd10      	pop	{r4, pc}
 8007d2c:	f7ff ff6a 	bl	8007c04 <configuration_is_valid.part.0>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d1f8      	bne.n	8007d26 <acc_base_configuration_tx_disable_get+0x6>
 8007d34:	bd10      	pop	{r4, pc}
 8007d36:	bf00      	nop

08007d38 <acc_base_configuration_tx_disable_set>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	460d      	mov	r5, r1
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	b110      	cbz	r0, 8007d46 <acc_base_configuration_tx_disable_set+0xe>
 8007d40:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8007d44:	bd38      	pop	{r3, r4, r5, pc}
 8007d46:	f7ff ff5d 	bl	8007c04 <configuration_is_valid.part.0>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d1f8      	bne.n	8007d40 <acc_base_configuration_tx_disable_set+0x8>
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}

08007d50 <acc_base_configuration_decrease_tx_emission_get>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	4604      	mov	r4, r0
 8007d54:	b110      	cbz	r0, 8007d5c <acc_base_configuration_decrease_tx_emission_get+0xc>
 8007d56:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8007d5a:	bd10      	pop	{r4, pc}
 8007d5c:	f7ff ff52 	bl	8007c04 <configuration_is_valid.part.0>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d1f8      	bne.n	8007d56 <acc_base_configuration_decrease_tx_emission_get+0x6>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop

08007d68 <acc_base_configuration_decrease_tx_emission_set>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	b110      	cbz	r0, 8007d76 <acc_base_configuration_decrease_tx_emission_set+0xe>
 8007d70:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	f7ff ff45 	bl	8007c04 <configuration_is_valid.part.0>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d1f8      	bne.n	8007d70 <acc_base_configuration_decrease_tx_emission_set+0x8>
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}

08007d80 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4604      	mov	r4, r0
 8007d84:	b110      	cbz	r0, 8007d8c <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8007d86:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	f7ff ff3a 	bl	8007c04 <configuration_is_valid.part.0>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d1f8      	bne.n	8007d86 <acc_base_configuration_hw_accelerated_average_samples_get+0x6>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	bf00      	nop

08007d98 <acc_base_configuration_hw_accelerated_average_samples_set>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	460d      	mov	r5, r1
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	b108      	cbz	r0, 8007da4 <acc_base_configuration_hw_accelerated_average_samples_set+0xc>
 8007da0:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	f7ff ff2e 	bl	8007c04 <configuration_is_valid.part.0>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d1f9      	bne.n	8007da0 <acc_base_configuration_hw_accelerated_average_samples_set+0x8>
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	bf00      	nop

08007db0 <acc_base_configuration_radar_engine_creation_set>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	460d      	mov	r5, r1
 8007db4:	4604      	mov	r4, r0
 8007db6:	b108      	cbz	r0, 8007dbc <acc_base_configuration_radar_engine_creation_set+0xc>
 8007db8:	6025      	str	r5, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	f7ff ff22 	bl	8007c04 <configuration_is_valid.part.0>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d1f9      	bne.n	8007db8 <acc_base_configuration_radar_engine_creation_set+0x8>
 8007dc4:	bd38      	pop	{r3, r4, r5, pc}
 8007dc6:	bf00      	nop

08007dc8 <acc_base_configuration_point_start_get>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	b110      	cbz	r0, 8007dd4 <acc_base_configuration_point_start_get+0xc>
 8007dce:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8007dd2:	bd10      	pop	{r4, pc}
 8007dd4:	f7ff ff16 	bl	8007c04 <configuration_is_valid.part.0>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d1f8      	bne.n	8007dce <acc_base_configuration_point_start_get+0x6>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	bf00      	nop

08007de0 <acc_base_configuration_point_length_get>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	4604      	mov	r4, r0
 8007de4:	b110      	cbz	r0, 8007dec <acc_base_configuration_point_length_get+0xc>
 8007de6:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8007dea:	bd10      	pop	{r4, pc}
 8007dec:	f7ff ff0a 	bl	8007c04 <configuration_is_valid.part.0>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d1f8      	bne.n	8007de6 <acc_base_configuration_point_length_get+0x6>
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	bf00      	nop

08007df8 <acc_base_configuration_repetition_mode_get>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	b108      	cbz	r0, 8007e02 <acc_base_configuration_repetition_mode_get+0xa>
 8007dfe:	7920      	ldrb	r0, [r4, #4]
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	f7ff feff 	bl	8007c04 <configuration_is_valid.part.0>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d1f9      	bne.n	8007dfe <acc_base_configuration_repetition_mode_get+0x6>
 8007e0a:	bd10      	pop	{r4, pc}

08007e0c <acc_base_configuration_update_rate_get>:
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	4604      	mov	r4, r0
 8007e10:	b158      	cbz	r0, 8007e2a <acc_base_configuration_update_rate_get+0x1e>
 8007e12:	7923      	ldrb	r3, [r4, #4]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d002      	beq.n	8007e1e <acc_base_configuration_update_rate_get+0x12>
 8007e18:	d904      	bls.n	8007e24 <acc_base_configuration_update_rate_get+0x18>
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d109      	bne.n	8007e32 <acc_base_configuration_update_rate_get+0x26>
 8007e1e:	ed94 0a02 	vldr	s0, [r4, #8]
 8007e22:	bd10      	pop	{r4, pc}
 8007e24:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8007e38 <acc_base_configuration_update_rate_get+0x2c>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	f7ff feeb 	bl	8007c04 <configuration_is_valid.part.0>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d1ef      	bne.n	8007e12 <acc_base_configuration_update_rate_get+0x6>
 8007e32:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8007e3c <acc_base_configuration_update_rate_get+0x30>
 8007e36:	bd10      	pop	{r4, pc}
 8007e38:	7f800000 	.word	0x7f800000
 8007e3c:	7fc00000 	.word	0x7fc00000

08007e40 <acc_base_configuration_gain_get>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	4604      	mov	r4, r0
 8007e44:	b108      	cbz	r0, 8007e4a <acc_base_configuration_gain_get+0xa>
 8007e46:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8007e48:	bd10      	pop	{r4, pc}
 8007e4a:	f7ff fedb 	bl	8007c04 <configuration_is_valid.part.0>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d1f9      	bne.n	8007e46 <acc_base_configuration_gain_get+0x6>
 8007e52:	bd10      	pop	{r4, pc}

08007e54 <acc_base_configuration_gain_set>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	460d      	mov	r5, r1
 8007e58:	4604      	mov	r4, r0
 8007e5a:	b108      	cbz	r0, 8007e60 <acc_base_configuration_gain_set+0xc>
 8007e5c:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	f7ff fed0 	bl	8007c04 <configuration_is_valid.part.0>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d1f9      	bne.n	8007e5c <acc_base_configuration_gain_set+0x8>
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	bf00      	nop

08007e6c <acc_base_configuration_integrator_get>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	b110      	cbz	r0, 8007e78 <acc_base_configuration_integrator_get+0xc>
 8007e72:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8007e76:	bd10      	pop	{r4, pc}
 8007e78:	f7ff fec4 	bl	8007c04 <configuration_is_valid.part.0>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d1f8      	bne.n	8007e72 <acc_base_configuration_integrator_get+0x6>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	bf00      	nop

08007e84 <acc_base_configuration_integrator_set>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	460d      	mov	r5, r1
 8007e88:	4604      	mov	r4, r0
 8007e8a:	b110      	cbz	r0, 8007e92 <acc_base_configuration_integrator_set+0xe>
 8007e8c:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8007e90:	bd38      	pop	{r3, r4, r5, pc}
 8007e92:	f7ff feb7 	bl	8007c04 <configuration_is_valid.part.0>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d1f8      	bne.n	8007e8c <acc_base_configuration_integrator_set+0x8>
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}

08007e9c <acc_base_configuration_wg_duration_get>:
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	b110      	cbz	r0, 8007ea8 <acc_base_configuration_wg_duration_get+0xc>
 8007ea2:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8007ea6:	bd10      	pop	{r4, pc}
 8007ea8:	f7ff feac 	bl	8007c04 <configuration_is_valid.part.0>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d1f8      	bne.n	8007ea2 <acc_base_configuration_wg_duration_get+0x6>
 8007eb0:	bd10      	pop	{r4, pc}
 8007eb2:	bf00      	nop

08007eb4 <acc_base_configuration_wg_duration_set>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	4604      	mov	r4, r0
 8007eba:	b110      	cbz	r0, 8007ec2 <acc_base_configuration_wg_duration_set+0xe>
 8007ebc:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8007ec0:	bd38      	pop	{r3, r4, r5, pc}
 8007ec2:	f7ff fe9f 	bl	8007c04 <configuration_is_valid.part.0>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d1f8      	bne.n	8007ebc <acc_base_configuration_wg_duration_set+0x8>
 8007eca:	bd38      	pop	{r3, r4, r5, pc}

08007ecc <acc_base_configuration_integrator_ramp_up_get>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	4604      	mov	r4, r0
 8007ed0:	b110      	cbz	r0, 8007ed8 <acc_base_configuration_integrator_ramp_up_get+0xc>
 8007ed2:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8007ed6:	bd10      	pop	{r4, pc}
 8007ed8:	f7ff fe94 	bl	8007c04 <configuration_is_valid.part.0>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d1f8      	bne.n	8007ed2 <acc_base_configuration_integrator_ramp_up_get+0x6>
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop

08007ee4 <acc_base_configuration_integrator_ramp_up_set>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	4604      	mov	r4, r0
 8007eea:	b110      	cbz	r0, 8007ef2 <acc_base_configuration_integrator_ramp_up_set+0xe>
 8007eec:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	f7ff fe87 	bl	8007c04 <configuration_is_valid.part.0>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d1f8      	bne.n	8007eec <acc_base_configuration_integrator_ramp_up_set+0x8>
 8007efa:	bd38      	pop	{r3, r4, r5, pc}

08007efc <acc_base_configuration_sampling_mode_get>:
 8007efc:	b510      	push	{r4, lr}
 8007efe:	4604      	mov	r4, r0
 8007f00:	b110      	cbz	r0, 8007f08 <acc_base_configuration_sampling_mode_get+0xc>
 8007f02:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 8007f06:	bd10      	pop	{r4, pc}
 8007f08:	f7ff fe7c 	bl	8007c04 <configuration_is_valid.part.0>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d1f8      	bne.n	8007f02 <acc_base_configuration_sampling_mode_get+0x6>
 8007f10:	bd10      	pop	{r4, pc}
 8007f12:	bf00      	nop

08007f14 <acc_base_configuration_sampling_mode_set>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	460d      	mov	r5, r1
 8007f18:	4604      	mov	r4, r0
 8007f1a:	b110      	cbz	r0, 8007f22 <acc_base_configuration_sampling_mode_set+0xe>
 8007f1c:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
 8007f22:	f7ff fe6f 	bl	8007c04 <configuration_is_valid.part.0>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d1f8      	bne.n	8007f1c <acc_base_configuration_sampling_mode_set+0x8>
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}

08007f2c <acc_base_configuration_sweep_type_debug_set>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	460d      	mov	r5, r1
 8007f30:	4604      	mov	r4, r0
 8007f32:	b110      	cbz	r0, 8007f3a <acc_base_configuration_sweep_type_debug_set+0xe>
 8007f34:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	f7ff fe63 	bl	8007c04 <configuration_is_valid.part.0>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d1f8      	bne.n	8007f34 <acc_base_configuration_sweep_type_debug_set+0x8>
 8007f42:	bd38      	pop	{r3, r4, r5, pc}

08007f44 <acc_base_configuration_use_point_range_set>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	460d      	mov	r5, r1
 8007f48:	4604      	mov	r4, r0
 8007f4a:	b110      	cbz	r0, 8007f52 <acc_base_configuration_use_point_range_set+0xe>
 8007f4c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8007f50:	bd38      	pop	{r3, r4, r5, pc}
 8007f52:	f7ff fe57 	bl	8007c04 <configuration_is_valid.part.0>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d1f8      	bne.n	8007f4c <acc_base_configuration_use_point_range_set+0x8>
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}

08007f5c <acc_base_configuration_use_point_range_get>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	b110      	cbz	r0, 8007f68 <acc_base_configuration_use_point_range_get+0xc>
 8007f62:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8007f66:	bd10      	pop	{r4, pc}
 8007f68:	f7ff fe4c 	bl	8007c04 <configuration_is_valid.part.0>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d1f8      	bne.n	8007f62 <acc_base_configuration_use_point_range_get+0x6>
 8007f70:	bd10      	pop	{r4, pc}
 8007f72:	bf00      	nop

08007f74 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	460d      	mov	r5, r1
 8007f78:	4604      	mov	r4, r0
 8007f7a:	b110      	cbz	r0, 8007f82 <acc_base_configuration_use_fast_dll_refresh_routine_set+0xe>
 8007f7c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
 8007f82:	f7ff fe3f 	bl	8007c04 <configuration_is_valid.part.0>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d1f8      	bne.n	8007f7c <acc_base_configuration_use_fast_dll_refresh_routine_set+0x8>
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}

08007f8c <acc_base_configuration_staggered_vga_stabilization_time_set>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	460d      	mov	r5, r1
 8007f90:	4604      	mov	r4, r0
 8007f92:	b110      	cbz	r0, 8007f9a <acc_base_configuration_staggered_vga_stabilization_time_set+0xe>
 8007f94:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8007f98:	bd38      	pop	{r3, r4, r5, pc}
 8007f9a:	f7ff fe33 	bl	8007c04 <configuration_is_valid.part.0>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d1f8      	bne.n	8007f94 <acc_base_configuration_staggered_vga_stabilization_time_set+0x8>
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}

08007fa4 <acc_base_configuration_ignore_range_limits_get>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	b110      	cbz	r0, 8007fb0 <acc_base_configuration_ignore_range_limits_get+0xc>
 8007faa:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 8007fae:	bd10      	pop	{r4, pc}
 8007fb0:	f7ff fe28 	bl	8007c04 <configuration_is_valid.part.0>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d1f8      	bne.n	8007faa <acc_base_configuration_ignore_range_limits_get+0x6>
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop

08007fbc <acc_base_configuration_sparse_sweeps_per_frame_set>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	b110      	cbz	r0, 8007fca <acc_base_configuration_sparse_sweeps_per_frame_set+0xe>
 8007fc4:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
 8007fca:	f7ff fe1b 	bl	8007c04 <configuration_is_valid.part.0>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d1f8      	bne.n	8007fc4 <acc_base_configuration_sparse_sweeps_per_frame_set+0x8>
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}

08007fd4 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	b110      	cbz	r0, 8007fe0 <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 8007fda:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8007fde:	bd10      	pop	{r4, pc}
 8007fe0:	f7ff fe10 	bl	8007c04 <configuration_is_valid.part.0>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d1f8      	bne.n	8007fda <acc_base_configuration_sparse_sweeps_per_frame_get+0x6>
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop

08007fec <acc_base_configuration_sparse_sweep_rate_set>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	4604      	mov	r4, r0
 8007ff0:	ed2d 8b02 	vpush	{d8}
 8007ff4:	eeb0 8a40 	vmov.f32	s16, s0
 8007ff8:	b120      	cbz	r0, 8008004 <acc_base_configuration_sparse_sweep_rate_set+0x18>
 8007ffa:	ed84 8a17 	vstr	s16, [r4, #92]	; 0x5c
 8007ffe:	ecbd 8b02 	vpop	{d8}
 8008002:	bd10      	pop	{r4, pc}
 8008004:	f7ff fdfe 	bl	8007c04 <configuration_is_valid.part.0>
 8008008:	2800      	cmp	r0, #0
 800800a:	d1f6      	bne.n	8007ffa <acc_base_configuration_sparse_sweep_rate_set+0xe>
 800800c:	e7f7      	b.n	8007ffe <acc_base_configuration_sparse_sweep_rate_set+0x12>
 800800e:	bf00      	nop

08008010 <acc_base_configuration_sparse_sweep_rate_get>:
 8008010:	b510      	push	{r4, lr}
 8008012:	4604      	mov	r4, r0
 8008014:	b110      	cbz	r0, 800801c <acc_base_configuration_sparse_sweep_rate_get+0xc>
 8008016:	ed94 0a17 	vldr	s0, [r4, #92]	; 0x5c
 800801a:	bd10      	pop	{r4, pc}
 800801c:	f7ff fdf2 	bl	8007c04 <configuration_is_valid.part.0>
 8008020:	2800      	cmp	r0, #0
 8008022:	d1f8      	bne.n	8008016 <acc_base_configuration_sparse_sweep_rate_get+0x6>
 8008024:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800802c <acc_base_configuration_sparse_sweep_rate_get+0x1c>
 8008028:	bd10      	pop	{r4, pc}
 800802a:	bf00      	nop
 800802c:	00000000 	.word	0x00000000

08008030 <acc_base_configuration_downsampling_factor_get>:
 8008030:	b510      	push	{r4, lr}
 8008032:	4604      	mov	r4, r0
 8008034:	b110      	cbz	r0, 800803c <acc_base_configuration_downsampling_factor_get+0xc>
 8008036:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 800803a:	bd10      	pop	{r4, pc}
 800803c:	f7ff fde2 	bl	8007c04 <configuration_is_valid.part.0>
 8008040:	2800      	cmp	r0, #0
 8008042:	d1f8      	bne.n	8008036 <acc_base_configuration_downsampling_factor_get+0x6>
 8008044:	bd10      	pop	{r4, pc}
 8008046:	bf00      	nop

08008048 <acc_base_configuration_downsampling_factor_set>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	460d      	mov	r5, r1
 800804c:	4604      	mov	r4, r0
 800804e:	b110      	cbz	r0, 8008056 <acc_base_configuration_downsampling_factor_set+0xe>
 8008050:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 8008054:	bd38      	pop	{r3, r4, r5, pc}
 8008056:	f7ff fdd5 	bl	8007c04 <configuration_is_valid.part.0>
 800805a:	2800      	cmp	r0, #0
 800805c:	d1f8      	bne.n	8008050 <acc_base_configuration_downsampling_factor_set+0x8>
 800805e:	bd38      	pop	{r3, r4, r5, pc}

08008060 <acc_base_configuration_noise_level_normalization_get>:
 8008060:	b510      	push	{r4, lr}
 8008062:	4604      	mov	r4, r0
 8008064:	b110      	cbz	r0, 800806c <acc_base_configuration_noise_level_normalization_get+0xc>
 8008066:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800806a:	bd10      	pop	{r4, pc}
 800806c:	f7ff fdca 	bl	8007c04 <configuration_is_valid.part.0>
 8008070:	2800      	cmp	r0, #0
 8008072:	d1f8      	bne.n	8008066 <acc_base_configuration_noise_level_normalization_get+0x6>
 8008074:	bd10      	pop	{r4, pc}
 8008076:	bf00      	nop

08008078 <acc_base_configuration_noise_level_normalization_set>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	460d      	mov	r5, r1
 800807c:	4604      	mov	r4, r0
 800807e:	b110      	cbz	r0, 8008086 <acc_base_configuration_noise_level_normalization_set+0xe>
 8008080:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8008084:	bd38      	pop	{r3, r4, r5, pc}
 8008086:	f7ff fdbd 	bl	8007c04 <configuration_is_valid.part.0>
 800808a:	2800      	cmp	r0, #0
 800808c:	d1f8      	bne.n	8008080 <acc_base_configuration_noise_level_normalization_set+0x8>
 800808e:	bd38      	pop	{r3, r4, r5, pc}

08008090 <acc_base_configuration_noise_deviation_override_get>:
 8008090:	b510      	push	{r4, lr}
 8008092:	4604      	mov	r4, r0
 8008094:	b110      	cbz	r0, 800809c <acc_base_configuration_noise_deviation_override_get+0xc>
 8008096:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 800809a:	bd10      	pop	{r4, pc}
 800809c:	f7ff fdb2 	bl	8007c04 <configuration_is_valid.part.0>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d1f8      	bne.n	8008096 <acc_base_configuration_noise_deviation_override_get+0x6>
 80080a4:	bd10      	pop	{r4, pc}
 80080a6:	bf00      	nop

080080a8 <acc_base_configuration_asynchronous_measurement_get>:
 80080a8:	b510      	push	{r4, lr}
 80080aa:	4604      	mov	r4, r0
 80080ac:	b110      	cbz	r0, 80080b4 <acc_base_configuration_asynchronous_measurement_get+0xc>
 80080ae:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 80080b2:	bd10      	pop	{r4, pc}
 80080b4:	f7ff fda6 	bl	8007c04 <configuration_is_valid.part.0>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d1f8      	bne.n	80080ae <acc_base_configuration_asynchronous_measurement_get+0x6>
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	bf00      	nop

080080c0 <acc_base_configuration_asynchronous_measurement_set>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	460d      	mov	r5, r1
 80080c4:	4604      	mov	r4, r0
 80080c6:	b110      	cbz	r0, 80080ce <acc_base_configuration_asynchronous_measurement_set+0xe>
 80080c8:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 80080cc:	bd38      	pop	{r3, r4, r5, pc}
 80080ce:	f7ff fd99 	bl	8007c04 <configuration_is_valid.part.0>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d1f8      	bne.n	80080c8 <acc_base_configuration_asynchronous_measurement_set+0x8>
 80080d6:	bd38      	pop	{r3, r4, r5, pc}

080080d8 <acc_base_configuration_min_pipeline_memory_size_get>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	4604      	mov	r4, r0
 80080dc:	b110      	cbz	r0, 80080e4 <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 80080de:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80080e2:	bd10      	pop	{r4, pc}
 80080e4:	f7ff fd8e 	bl	8007c04 <configuration_is_valid.part.0>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1f8      	bne.n	80080de <acc_base_configuration_min_pipeline_memory_size_get+0x6>
 80080ec:	bd10      	pop	{r4, pc}
 80080ee:	bf00      	nop

080080f0 <acc_base_configuration_min_pipeline_memory_size_set>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	460d      	mov	r5, r1
 80080f4:	4604      	mov	r4, r0
 80080f6:	b110      	cbz	r0, 80080fe <acc_base_configuration_min_pipeline_memory_size_set+0xe>
 80080f8:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80080fc:	bd38      	pop	{r3, r4, r5, pc}
 80080fe:	f7ff fd81 	bl	8007c04 <configuration_is_valid.part.0>
 8008102:	2800      	cmp	r0, #0
 8008104:	d1f8      	bne.n	80080f8 <acc_base_configuration_min_pipeline_memory_size_set+0x8>
 8008106:	bd38      	pop	{r3, r4, r5, pc}

08008108 <acc_base_configuration_maximize_signal_attenuation_set>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	460d      	mov	r5, r1
 800810c:	4604      	mov	r4, r0
 800810e:	b110      	cbz	r0, 8008116 <acc_base_configuration_maximize_signal_attenuation_set+0xe>
 8008110:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 8008114:	bd38      	pop	{r3, r4, r5, pc}
 8008116:	f7ff fd75 	bl	8007c04 <configuration_is_valid.part.0>
 800811a:	2800      	cmp	r0, #0
 800811c:	d1f8      	bne.n	8008110 <acc_base_configuration_maximize_signal_attenuation_set+0x8>
 800811e:	bd38      	pop	{r3, r4, r5, pc}

08008120 <acc_base_configuration_cca_get>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	460e      	mov	r6, r1
 8008124:	4615      	mov	r5, r2
 8008126:	4604      	mov	r4, r0
 8008128:	b150      	cbz	r0, 8008140 <acc_base_configuration_cca_get+0x20>
 800812a:	b116      	cbz	r6, 8008132 <acc_base_configuration_cca_get+0x12>
 800812c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8008130:	7033      	strb	r3, [r6, #0]
 8008132:	b115      	cbz	r5, 800813a <acc_base_configuration_cca_get+0x1a>
 8008134:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8008138:	802b      	strh	r3, [r5, #0]
 800813a:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f7ff fd60 	bl	8007c04 <configuration_is_valid.part.0>
 8008144:	2800      	cmp	r0, #0
 8008146:	d1f0      	bne.n	800812a <acc_base_configuration_cca_get+0xa>
 8008148:	bd70      	pop	{r4, r5, r6, pc}
 800814a:	bf00      	nop

0800814c <acc_base_configuration_cca_set>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	460d      	mov	r5, r1
 8008150:	4616      	mov	r6, r2
 8008152:	461f      	mov	r7, r3
 8008154:	4604      	mov	r4, r0
 8008156:	b130      	cbz	r0, 8008166 <acc_base_configuration_cca_set+0x1a>
 8008158:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
 800815c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8008160:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8008164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008166:	f7ff fd4d 	bl	8007c04 <configuration_is_valid.part.0>
 800816a:	2800      	cmp	r0, #0
 800816c:	d1f4      	bne.n	8008158 <acc_base_configuration_cca_set+0xc>
 800816e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008170 <acc_base_configuration_mur_set>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	460d      	mov	r5, r1
 8008174:	4604      	mov	r4, r0
 8008176:	b110      	cbz	r0, 800817e <acc_base_configuration_mur_set+0xe>
 8008178:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	f7ff fd41 	bl	8007c04 <configuration_is_valid.part.0>
 8008182:	2800      	cmp	r0, #0
 8008184:	d1f8      	bne.n	8008178 <acc_base_configuration_mur_set+0x8>
 8008186:	bd38      	pop	{r3, r4, r5, pc}

08008188 <acc_base_configuration_mur_get>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4604      	mov	r4, r0
 800818c:	b110      	cbz	r0, 8008194 <acc_base_configuration_mur_get+0xc>
 800818e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8008192:	bd10      	pop	{r4, pc}
 8008194:	f7ff fd36 	bl	8007c04 <configuration_is_valid.part.0>
 8008198:	2800      	cmp	r0, #0
 800819a:	d1f8      	bne.n	800818e <acc_base_configuration_mur_get+0x6>
 800819c:	2006      	movs	r0, #6
 800819e:	bd10      	pop	{r4, pc}

080081a0 <acc_base_configuration_print>:
 80081a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a4:	b08a      	sub	sp, #40	; 0x28
 80081a6:	4604      	mov	r4, r0
 80081a8:	f7ff fcb6 	bl	8007b18 <acc_rss_integration_log_level>
 80081ac:	2801      	cmp	r0, #1
 80081ae:	d92e      	bls.n	800820e <acc_base_configuration_print+0x6e>
 80081b0:	4b56      	ldr	r3, [pc, #344]	; (800830c <acc_base_configuration_print+0x16c>)
 80081b2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80081b4:	2c00      	cmp	r4, #0
 80081b6:	d036      	beq.n	8008226 <acc_base_configuration_print+0x86>
 80081b8:	68e3      	ldr	r3, [r4, #12]
 80081ba:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 80081be:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
 80081c0:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
 80081c4:	f8b4 e042 	ldrh.w	lr, [r4, #66]	; 0x42
 80081c8:	f8b4 8044 	ldrh.w	r8, [r4, #68]	; 0x44
 80081cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80081ce:	2a04      	cmp	r2, #4
 80081d0:	d920      	bls.n	8008214 <acc_base_configuration_print+0x74>
 80081d2:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 80081d6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8008310 <acc_base_configuration_print+0x170>
 80081da:	b311      	cbz	r1, 8008222 <acc_base_configuration_print+0x82>
 80081dc:	4a4c      	ldr	r2, [pc, #304]	; (8008310 <acc_base_configuration_print+0x170>)
 80081de:	484d      	ldr	r0, [pc, #308]	; (8008314 <acc_base_configuration_print+0x174>)
 80081e0:	2901      	cmp	r1, #1
 80081e2:	bf08      	it	eq
 80081e4:	4602      	moveq	r2, r0
 80081e6:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 80081ea:	f8b4 a05a 	ldrh.w	sl, [r4, #90]	; 0x5a
 80081ee:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80081f2:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80081f6:	e9cd a008 	strd	sl, r0, [sp, #32]
 80081fa:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80081fe:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8008202:	e9cd 6700 	strd	r6, r7, [sp]
 8008206:	4a44      	ldr	r2, [pc, #272]	; (8008318 <acc_base_configuration_print+0x178>)
 8008208:	4944      	ldr	r1, [pc, #272]	; (800831c <acc_base_configuration_print+0x17c>)
 800820a:	2002      	movs	r0, #2
 800820c:	47a8      	blx	r5
 800820e:	b00a      	add	sp, #40	; 0x28
 8008210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008214:	4942      	ldr	r1, [pc, #264]	; (8008320 <acc_base_configuration_print+0x180>)
 8008216:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]
 800821a:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 800821e:	2900      	cmp	r1, #0
 8008220:	d1dc      	bne.n	80081dc <acc_base_configuration_print+0x3c>
 8008222:	4a40      	ldr	r2, [pc, #256]	; (8008324 <acc_base_configuration_print+0x184>)
 8008224:	e7df      	b.n	80081e6 <acc_base_configuration_print+0x46>
 8008226:	f7ff fced 	bl	8007c04 <configuration_is_valid.part.0>
 800822a:	2800      	cmp	r0, #0
 800822c:	d1c4      	bne.n	80081b8 <acc_base_configuration_print+0x18>
 800822e:	f7ff fce9 	bl	8007c04 <configuration_is_valid.part.0>
 8008232:	bb68      	cbnz	r0, 8008290 <acc_base_configuration_print+0xf0>
 8008234:	f7ff fce6 	bl	8007c04 <configuration_is_valid.part.0>
 8008238:	2800      	cmp	r0, #0
 800823a:	d164      	bne.n	8008306 <acc_base_configuration_print+0x166>
 800823c:	f7ff fce2 	bl	8007c04 <configuration_is_valid.part.0>
 8008240:	2800      	cmp	r0, #0
 8008242:	d15c      	bne.n	80082fe <acc_base_configuration_print+0x15e>
 8008244:	f7ff fcde 	bl	8007c04 <configuration_is_valid.part.0>
 8008248:	2800      	cmp	r0, #0
 800824a:	d153      	bne.n	80082f4 <acc_base_configuration_print+0x154>
 800824c:	f7ff fcda 	bl	8007c04 <configuration_is_valid.part.0>
 8008250:	2800      	cmp	r0, #0
 8008252:	d149      	bne.n	80082e8 <acc_base_configuration_print+0x148>
 8008254:	f7ff fcd6 	bl	8007c04 <configuration_is_valid.part.0>
 8008258:	2800      	cmp	r0, #0
 800825a:	d13e      	bne.n	80082da <acc_base_configuration_print+0x13a>
 800825c:	f7ff fcd2 	bl	8007c04 <configuration_is_valid.part.0>
 8008260:	bbb8      	cbnz	r0, 80082d2 <acc_base_configuration_print+0x132>
 8008262:	f7ff fccf 	bl	8007c04 <configuration_is_valid.part.0>
 8008266:	4606      	mov	r6, r0
 8008268:	bb48      	cbnz	r0, 80082be <acc_base_configuration_print+0x11e>
 800826a:	f7ff fccb 	bl	8007c04 <configuration_is_valid.part.0>
 800826e:	4607      	mov	r7, r0
 8008270:	b9d8      	cbnz	r0, 80082aa <acc_base_configuration_print+0x10a>
 8008272:	f7ff fcc7 	bl	8007c04 <configuration_is_valid.part.0>
 8008276:	b968      	cbnz	r0, 8008294 <acc_base_configuration_print+0xf4>
 8008278:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8008328 <acc_base_configuration_print+0x188>
 800827c:	4a29      	ldr	r2, [pc, #164]	; (8008324 <acc_base_configuration_print+0x184>)
 800827e:	4603      	mov	r3, r0
 8008280:	4682      	mov	sl, r0
 8008282:	4601      	mov	r1, r0
 8008284:	4680      	mov	r8, r0
 8008286:	4686      	mov	lr, r0
 8008288:	4684      	mov	ip, r0
 800828a:	4607      	mov	r7, r0
 800828c:	4606      	mov	r6, r0
 800828e:	e7b0      	b.n	80081f2 <acc_base_configuration_print+0x52>
 8008290:	4623      	mov	r3, r4
 8008292:	e792      	b.n	80081ba <acc_base_configuration_print+0x1a>
 8008294:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008328 <acc_base_configuration_print+0x188>
 8008298:	4a22      	ldr	r2, [pc, #136]	; (8008324 <acc_base_configuration_print+0x184>)
 800829a:	463b      	mov	r3, r7
 800829c:	46ba      	mov	sl, r7
 800829e:	4639      	mov	r1, r7
 80082a0:	46b8      	mov	r8, r7
 80082a2:	46be      	mov	lr, r7
 80082a4:	46bc      	mov	ip, r7
 80082a6:	463e      	mov	r6, r7
 80082a8:	e7a1      	b.n	80081ee <acc_base_configuration_print+0x4e>
 80082aa:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8008328 <acc_base_configuration_print+0x188>
 80082ae:	4a1d      	ldr	r2, [pc, #116]	; (8008324 <acc_base_configuration_print+0x184>)
 80082b0:	4633      	mov	r3, r6
 80082b2:	4631      	mov	r1, r6
 80082b4:	46b0      	mov	r8, r6
 80082b6:	46b6      	mov	lr, r6
 80082b8:	46b4      	mov	ip, r6
 80082ba:	4637      	mov	r7, r6
 80082bc:	e795      	b.n	80081ea <acc_base_configuration_print+0x4a>
 80082be:	2300      	movs	r3, #0
 80082c0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8008328 <acc_base_configuration_print+0x188>
 80082c4:	4a17      	ldr	r2, [pc, #92]	; (8008324 <acc_base_configuration_print+0x184>)
 80082c6:	4698      	mov	r8, r3
 80082c8:	469e      	mov	lr, r3
 80082ca:	469c      	mov	ip, r3
 80082cc:	461f      	mov	r7, r3
 80082ce:	461e      	mov	r6, r3
 80082d0:	e789      	b.n	80081e6 <acc_base_configuration_print+0x46>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80082d8:	deff      	udf	#255	; 0xff
 80082da:	4623      	mov	r3, r4
 80082dc:	46a0      	mov	r8, r4
 80082de:	46a6      	mov	lr, r4
 80082e0:	46a4      	mov	ip, r4
 80082e2:	4627      	mov	r7, r4
 80082e4:	4626      	mov	r6, r4
 80082e6:	e771      	b.n	80081cc <acc_base_configuration_print+0x2c>
 80082e8:	4623      	mov	r3, r4
 80082ea:	46a6      	mov	lr, r4
 80082ec:	46a4      	mov	ip, r4
 80082ee:	4627      	mov	r7, r4
 80082f0:	4626      	mov	r6, r4
 80082f2:	e769      	b.n	80081c8 <acc_base_configuration_print+0x28>
 80082f4:	4623      	mov	r3, r4
 80082f6:	46a4      	mov	ip, r4
 80082f8:	4627      	mov	r7, r4
 80082fa:	4626      	mov	r6, r4
 80082fc:	e762      	b.n	80081c4 <acc_base_configuration_print+0x24>
 80082fe:	4623      	mov	r3, r4
 8008300:	4627      	mov	r7, r4
 8008302:	4626      	mov	r6, r4
 8008304:	e75c      	b.n	80081c0 <acc_base_configuration_print+0x20>
 8008306:	4623      	mov	r3, r4
 8008308:	4626      	mov	r6, r4
 800830a:	e758      	b.n	80081be <acc_base_configuration_print+0x1e>
 800830c:	200007ec 	.word	0x200007ec
 8008310:	08012bb0 	.word	0x08012bb0
 8008314:	080117bc 	.word	0x080117bc
 8008318:	080117c4 	.word	0x080117c4
 800831c:	080117a4 	.word	0x080117a4
 8008320:	080119d4 	.word	0x080119d4
 8008324:	080117b8 	.word	0x080117b8
 8008328:	080117c0 	.word	0x080117c0

0800832c <acc_base_configuration_check>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	2800      	cmp	r0, #0
 8008332:	d038      	beq.n	80083a6 <acc_base_configuration_check+0x7a>
 8008334:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008336:	2b04      	cmp	r3, #4
 8008338:	d819      	bhi.n	800836e <acc_base_configuration_check+0x42>
 800833a:	d024      	beq.n	8008386 <acc_base_configuration_check+0x5a>
 800833c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800833e:	2b16      	cmp	r3, #22
 8008340:	d81e      	bhi.n	8008380 <acc_base_configuration_check+0x54>
 8008342:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8008344:	3b01      	subs	r3, #1
 8008346:	b29b      	uxth	r3, r3
 8008348:	2b3e      	cmp	r3, #62	; 0x3e
 800834a:	d835      	bhi.n	80083b8 <acc_base_configuration_check+0x8c>
 800834c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800834e:	7923      	ldrb	r3, [r4, #4]
 8008350:	b31e      	cbz	r6, 800839a <acc_base_configuration_check+0x6e>
 8008352:	2b03      	cmp	r3, #3
 8008354:	d033      	beq.n	80083be <acc_base_configuration_check+0x92>
 8008356:	f036 0304 	bics.w	r3, r6, #4
 800835a:	d020      	beq.n	800839e <acc_base_configuration_check+0x72>
 800835c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8008360:	2b06      	cmp	r3, #6
 8008362:	d026      	beq.n	80083b2 <acc_base_configuration_check+0x86>
 8008364:	2b09      	cmp	r3, #9
 8008366:	d024      	beq.n	80083b2 <acc_base_configuration_check+0x86>
 8008368:	4b1f      	ldr	r3, [pc, #124]	; (80083e8 <acc_base_configuration_check+0xbc>)
 800836a:	4a20      	ldr	r2, [pc, #128]	; (80083ec <acc_base_configuration_check+0xc0>)
 800836c:	e001      	b.n	8008372 <acc_base_configuration_check+0x46>
 800836e:	4b1e      	ldr	r3, [pc, #120]	; (80083e8 <acc_base_configuration_check+0xbc>)
 8008370:	4a1f      	ldr	r2, [pc, #124]	; (80083f0 <acc_base_configuration_check+0xc4>)
 8008372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008374:	491f      	ldr	r1, [pc, #124]	; (80083f4 <acc_base_configuration_check+0xc8>)
 8008376:	2000      	movs	r0, #0
 8008378:	4798      	blx	r3
 800837a:	2500      	movs	r5, #0
 800837c:	4628      	mov	r0, r5
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	4b19      	ldr	r3, [pc, #100]	; (80083e8 <acc_base_configuration_check+0xbc>)
 8008382:	4a1d      	ldr	r2, [pc, #116]	; (80083f8 <acc_base_configuration_check+0xcc>)
 8008384:	e7f5      	b.n	8008372 <acc_base_configuration_check+0x46>
 8008386:	f7ff fb3d 	bl	8007a04 <acc_rss_integration_is_hibernate_capable>
 800838a:	4605      	mov	r5, r0
 800838c:	b310      	cbz	r0, 80083d4 <acc_base_configuration_check+0xa8>
 800838e:	7923      	ldrb	r3, [r4, #4]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d1d3      	bne.n	800833c <acc_base_configuration_check+0x10>
 8008394:	4b14      	ldr	r3, [pc, #80]	; (80083e8 <acc_base_configuration_check+0xbc>)
 8008396:	4a19      	ldr	r2, [pc, #100]	; (80083fc <acc_base_configuration_check+0xd0>)
 8008398:	e7eb      	b.n	8008372 <acc_base_configuration_check+0x46>
 800839a:	2b03      	cmp	r3, #3
 800839c:	d020      	beq.n	80083e0 <acc_base_configuration_check+0xb4>
 800839e:	2301      	movs	r3, #1
 80083a0:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 80083a4:	e7da      	b.n	800835c <acc_base_configuration_check+0x30>
 80083a6:	f7ff fc2d 	bl	8007c04 <configuration_is_valid.part.0>
 80083aa:	4605      	mov	r5, r0
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d1c1      	bne.n	8008334 <acc_base_configuration_check+0x8>
 80083b0:	e7e4      	b.n	800837c <acc_base_configuration_check+0x50>
 80083b2:	2501      	movs	r5, #1
 80083b4:	4628      	mov	r0, r5
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <acc_base_configuration_check+0xbc>)
 80083ba:	4a11      	ldr	r2, [pc, #68]	; (8008400 <acc_base_configuration_check+0xd4>)
 80083bc:	e7d9      	b.n	8008372 <acc_base_configuration_check+0x46>
 80083be:	f894 504e 	ldrb.w	r5, [r4, #78]	; 0x4e
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	d1c7      	bne.n	8008356 <acc_base_configuration_check+0x2a>
 80083c6:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <acc_base_configuration_check+0xbc>)
 80083c8:	4a0e      	ldr	r2, [pc, #56]	; (8008404 <acc_base_configuration_check+0xd8>)
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	4909      	ldr	r1, [pc, #36]	; (80083f4 <acc_base_configuration_check+0xc8>)
 80083ce:	4628      	mov	r0, r5
 80083d0:	4798      	blx	r3
 80083d2:	e7d3      	b.n	800837c <acc_base_configuration_check+0x50>
 80083d4:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <acc_base_configuration_check+0xbc>)
 80083d6:	4a0c      	ldr	r2, [pc, #48]	; (8008408 <acc_base_configuration_check+0xdc>)
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	4906      	ldr	r1, [pc, #24]	; (80083f4 <acc_base_configuration_check+0xc8>)
 80083dc:	4798      	blx	r3
 80083de:	e7cd      	b.n	800837c <acc_base_configuration_check+0x50>
 80083e0:	4b01      	ldr	r3, [pc, #4]	; (80083e8 <acc_base_configuration_check+0xbc>)
 80083e2:	4a0a      	ldr	r2, [pc, #40]	; (800840c <acc_base_configuration_check+0xe0>)
 80083e4:	e7c5      	b.n	8008372 <acc_base_configuration_check+0x46>
 80083e6:	bf00      	nop
 80083e8:	200007ec 	.word	0x200007ec
 80083ec:	0801199c 	.word	0x0801199c
 80083f0:	080117fc 	.word	0x080117fc
 80083f4:	080117a4 	.word	0x080117a4
 80083f8:	08011898 	.word	0x08011898
 80083fc:	08011854 	.word	0x08011854
 8008400:	080118cc 	.word	0x080118cc
 8008404:	0801195c 	.word	0x0801195c
 8008408:	08011814 	.word	0x08011814
 800840c:	08011920 	.word	0x08011920

08008410 <inject_data>:
 8008410:	3034      	adds	r0, #52	; 0x34
 8008412:	f002 ba21 	b.w	800a858 <acc_element_source_adc_inject_data>
 8008416:	bf00      	nop

08008418 <disassemble>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	6805      	ldr	r5, [r0, #0]
 800841c:	4604      	mov	r4, r0
 800841e:	b155      	cbz	r5, 8008436 <disassemble+0x1e>
 8008420:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8008424:	f002 f9c8 	bl	800a7b8 <acc_element_source_adc_release>
 8008428:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 800842c:	f7ff fb62 	bl	8007af4 <acc_rss_integration_mem_free>
 8008430:	4628      	mov	r0, r5
 8008432:	f7ff fb5f 	bl	8007af4 <acc_rss_integration_mem_free>
 8008436:	4620      	mov	r0, r4
 8008438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800843c:	f7ff bb5a 	b.w	8007af4 <acc_rss_integration_mem_free>

08008440 <produce>:
 8008440:	b510      	push	{r4, lr}
 8008442:	4604      	mov	r4, r0
 8008444:	3034      	adds	r0, #52	; 0x34
 8008446:	f002 f9c5 	bl	800a7d4 <acc_element_source_adc_produce>
 800844a:	b960      	cbnz	r0, 8008466 <produce+0x26>
 800844c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8008450:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 8008454:	6118      	str	r0, [r3, #16]
 8008456:	2101      	movs	r1, #1
 8008458:	7198      	strb	r0, [r3, #6]
 800845a:	7159      	strb	r1, [r3, #5]
 800845c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8008460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008464:	4710      	bx	r2
 8008466:	bd10      	pop	{r4, pc}

08008468 <acc_pipeline_direct_assemble>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	b085      	sub	sp, #20
 800846e:	469b      	mov	fp, r3
 8008470:	4606      	mov	r6, r0
 8008472:	23ec      	movs	r3, #236	; 0xec
 8008474:	4689      	mov	r9, r1
 8008476:	4617      	mov	r7, r2
 8008478:	2110      	movs	r1, #16
 800847a:	4a58      	ldr	r2, [pc, #352]	; (80085dc <acc_pipeline_direct_assemble+0x174>)
 800847c:	f8cd b00c 	str.w	fp, [sp, #12]
 8008480:	2001      	movs	r0, #1
 8008482:	f7ff fb17 	bl	8007ab4 <acc_rss_integration_mem_calloc_debug>
 8008486:	4a55      	ldr	r2, [pc, #340]	; (80085dc <acc_pipeline_direct_assemble+0x174>)
 8008488:	4605      	mov	r5, r0
 800848a:	23ed      	movs	r3, #237	; 0xed
 800848c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008490:	2001      	movs	r0, #1
 8008492:	f7ff fb0f 	bl	8007ab4 <acc_rss_integration_mem_calloc_debug>
 8008496:	4604      	mov	r4, r0
 8008498:	2d00      	cmp	r5, #0
 800849a:	f000 8094 	beq.w	80085c6 <acc_pipeline_direct_assemble+0x15e>
 800849e:	2800      	cmp	r0, #0
 80084a0:	f000 8091 	beq.w	80085c6 <acc_pipeline_direct_assemble+0x15e>
 80084a4:	f100 02f8 	add.w	r2, r0, #248	; 0xf8
 80084a8:	f100 0b14 	add.w	fp, r0, #20
 80084ac:	f100 0834 	add.w	r8, r0, #52	; 0x34
 80084b0:	6028      	str	r0, [r5, #0]
 80084b2:	4631      	mov	r1, r6
 80084b4:	9200      	str	r2, [sp, #0]
 80084b6:	4640      	mov	r0, r8
 80084b8:	465b      	mov	r3, fp
 80084ba:	463a      	mov	r2, r7
 80084bc:	f002 f95c 	bl	800a778 <acc_element_source_adc_init_radar_engine>
 80084c0:	4606      	mov	r6, r0
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d045      	beq.n	8008552 <acc_pipeline_direct_assemble+0xea>
 80084c6:	f8b4 a106 	ldrh.w	sl, [r4, #262]	; 0x106
 80084ca:	f8b4 6102 	ldrh.w	r6, [r4, #258]	; 0x102
 80084ce:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
 80084d2:	4456      	add	r6, sl
 80084d4:	0076      	lsls	r6, r6, #1
 80084d6:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 80084da:	45b2      	cmp	sl, r6
 80084dc:	4638      	mov	r0, r7
 80084de:	bf38      	it	cc
 80084e0:	46b2      	movcc	sl, r6
 80084e2:	f7ff fdf9 	bl	80080d8 <acc_base_configuration_min_pipeline_memory_size_get>
 80084e6:	4582      	cmp	sl, r0
 80084e8:	bf38      	it	cc
 80084ea:	4682      	movcc	sl, r0
 80084ec:	493b      	ldr	r1, [pc, #236]	; (80085dc <acc_pipeline_direct_assemble+0x174>)
 80084ee:	4650      	mov	r0, sl
 80084f0:	f44f 7298 	mov.w	r2, #304	; 0x130
 80084f4:	f7ff faba 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 80084f8:	4606      	mov	r6, r0
 80084fa:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80084fe:	b340      	cbz	r0, 8008552 <acc_pipeline_direct_assemble+0xea>
 8008500:	f104 0010 	add.w	r0, r4, #16
 8008504:	f104 0e06 	add.w	lr, r4, #6
 8008508:	64a6      	str	r6, [r4, #72]	; 0x48
 800850a:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 800850e:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
 8008512:	f104 0c07 	add.w	ip, r4, #7
 8008516:	65a0      	str	r0, [r4, #88]	; 0x58
 8008518:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 800851c:	f104 060c 	add.w	r6, r4, #12
 8008520:	f104 0008 	add.w	r0, r4, #8
 8008524:	1d23      	adds	r3, r4, #4
 8008526:	e9c4 6019 	strd	r6, r0, [r4, #100]	; 0x64
 800852a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800852e:	f8c4 a118 	str.w	sl, [r4, #280]	; 0x118
 8008532:	6564      	str	r4, [r4, #84]	; 0x54
 8008534:	f8c4 40ec 	str.w	r4, [r4, #236]	; 0xec
 8008538:	465a      	mov	r2, fp
 800853a:	4639      	mov	r1, r7
 800853c:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
 8008540:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 8008544:	f504 738a 	add.w	r3, r4, #276	; 0x114
 8008548:	4640      	mov	r0, r8
 800854a:	f002 f923 	bl	800a794 <acc_element_source_adc_init>
 800854e:	4606      	mov	r6, r0
 8008550:	b938      	cbnz	r0, 8008562 <acc_pipeline_direct_assemble+0xfa>
 8008552:	4628      	mov	r0, r5
 8008554:	f7ff ff60 	bl	8008418 <disassemble>
 8008558:	4635      	mov	r5, r6
 800855a:	4628      	mov	r0, r5
 800855c:	b005      	add	sp, #20
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	f104 0774 	add.w	r7, r4, #116	; 0x74
 8008566:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800856a:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
 800856e:	2102      	movs	r1, #2
 8008570:	4638      	mov	r0, r7
 8008572:	f001 ff79 	bl	800a468 <acc_element_saturation_check_init>
 8008576:	4630      	mov	r0, r6
 8008578:	f8d9 1000 	ldr.w	r1, [r9]
 800857c:	f001 ffe4 	bl	800a548 <acc_element_sink_callback_init>
 8008580:	4639      	mov	r1, r7
 8008582:	4640      	mov	r0, r8
 8008584:	f001 ff2e 	bl	800a3e4 <acc_element_connect>
 8008588:	4631      	mov	r1, r6
 800858a:	4638      	mov	r0, r7
 800858c:	f001 ff2a 	bl	800a3e4 <acc_element_connect>
 8008590:	4640      	mov	r0, r8
 8008592:	f002 f91b 	bl	800a7cc <acc_element_source_adc_validate>
 8008596:	4606      	mov	r6, r0
 8008598:	b178      	cbz	r0, 80085ba <acc_pipeline_direct_assemble+0x152>
 800859a:	4640      	mov	r0, r8
 800859c:	f002 f912 	bl	800a7c4 <acc_element_source_adc_reset>
 80085a0:	9803      	ldr	r0, [sp, #12]
 80085a2:	490f      	ldr	r1, [pc, #60]	; (80085e0 <acc_pipeline_direct_assemble+0x178>)
 80085a4:	4a0f      	ldr	r2, [pc, #60]	; (80085e4 <acc_pipeline_direct_assemble+0x17c>)
 80085a6:	4b10      	ldr	r3, [pc, #64]	; (80085e8 <acc_pipeline_direct_assemble+0x180>)
 80085a8:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
 80085ac:	4628      	mov	r0, r5
 80085ae:	e9c5 1201 	strd	r1, r2, [r5, #4]
 80085b2:	60eb      	str	r3, [r5, #12]
 80085b4:	b005      	add	sp, #20
 80085b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ba:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <acc_pipeline_direct_assemble+0x184>)
 80085bc:	4a0c      	ldr	r2, [pc, #48]	; (80085f0 <acc_pipeline_direct_assemble+0x188>)
 80085be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c0:	4906      	ldr	r1, [pc, #24]	; (80085dc <acc_pipeline_direct_assemble+0x174>)
 80085c2:	4798      	blx	r3
 80085c4:	e7c5      	b.n	8008552 <acc_pipeline_direct_assemble+0xea>
 80085c6:	4628      	mov	r0, r5
 80085c8:	f7ff fa94 	bl	8007af4 <acc_rss_integration_mem_free>
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7ff fa91 	bl	8007af4 <acc_rss_integration_mem_free>
 80085d2:	2500      	movs	r5, #0
 80085d4:	4628      	mov	r0, r5
 80085d6:	b005      	add	sp, #20
 80085d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085dc:	080119e8 	.word	0x080119e8
 80085e0:	08008441 	.word	0x08008441
 80085e4:	08008411 	.word	0x08008411
 80085e8:	08008419 	.word	0x08008419
 80085ec:	200007ec 	.word	0x200007ec
 80085f0:	080119f8 	.word	0x080119f8

080085f4 <measure_noise>:
 80085f4:	2000      	movs	r0, #0
 80085f6:	4770      	bx	lr

080085f8 <destroy>:
 80085f8:	b510      	push	{r4, lr}
 80085fa:	4604      	mov	r4, r0
 80085fc:	6940      	ldr	r0, [r0, #20]
 80085fe:	b118      	cbz	r0, 8008608 <destroy+0x10>
 8008600:	f7ff fa78 	bl	8007af4 <acc_rss_integration_mem_free>
 8008604:	2300      	movs	r3, #0
 8008606:	6163      	str	r3, [r4, #20]
 8008608:	bd10      	pop	{r4, pc}
 800860a:	bf00      	nop

0800860c <update_program>:
 800860c:	b510      	push	{r4, lr}
 800860e:	6944      	ldr	r4, [r0, #20]
 8008610:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8008614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008616:	b082      	sub	sp, #8
 8008618:	b9b2      	cbnz	r2, 8008648 <update_program+0x3c>
 800861a:	b979      	cbnz	r1, 800863c <update_program+0x30>
 800861c:	fab3 f383 	clz	r3, r3
 8008620:	095b      	lsrs	r3, r3, #5
 8008622:	f88d 3000 	strb.w	r3, [sp]
 8008626:	2201      	movs	r2, #1
 8008628:	6800      	ldr	r0, [r0, #0]
 800862a:	9201      	str	r2, [sp, #4]
 800862c:	4669      	mov	r1, sp
 800862e:	f002 ff19 	bl	800b464 <acc_cpd_sparse_sweep_update_program>
 8008632:	b108      	cbz	r0, 8008638 <update_program+0x2c>
 8008634:	9b01      	ldr	r3, [sp, #4]
 8008636:	6423      	str	r3, [r4, #64]	; 0x40
 8008638:	b002      	add	sp, #8
 800863a:	bd10      	pop	{r4, pc}
 800863c:	3b00      	subs	r3, #0
 800863e:	bf18      	it	ne
 8008640:	2301      	movne	r3, #1
 8008642:	f88d 3000 	strb.w	r3, [sp]
 8008646:	e7ef      	b.n	8008628 <update_program+0x1c>
 8008648:	3b00      	subs	r3, #0
 800864a:	bf18      	it	ne
 800864c:	2301      	movne	r3, #1
 800864e:	f88d 3000 	strb.w	r3, [sp]
 8008652:	2200      	movs	r2, #0
 8008654:	e7e8      	b.n	8008628 <update_program+0x1c>
 8008656:	bf00      	nop

08008658 <process_data>:
 8008658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865c:	6946      	ldr	r6, [r0, #20]
 800865e:	f8b6 40b8 	ldrh.w	r4, [r6, #184]	; 0xb8
 8008662:	b914      	cbnz	r4, 800866a <process_data+0x12>
 8008664:	2001      	movs	r0, #1
 8008666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866a:	f8b6 80b4 	ldrh.w	r8, [r6, #180]	; 0xb4
 800866e:	4617      	mov	r7, r2
 8008670:	680a      	ldr	r2, [r1, #0]
 8008672:	6801      	ldr	r1, [r0, #0]
 8008674:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 8008678:	4642      	mov	r2, r8
 800867a:	461d      	mov	r5, r3
 800867c:	2001      	movs	r0, #1
 800867e:	4623      	mov	r3, r4
 8008680:	f7ff fa50 	bl	8007b24 <acc_probes_execute_uint16>
 8008684:	f8b6 10b8 	ldrh.w	r1, [r6, #184]	; 0xb8
 8008688:	4640      	mov	r0, r8
 800868a:	f001 fe7f 	bl	800a38c <acc_alg_cca_calculate>
 800868e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80086c4 <process_data+0x6c>
 8008692:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8008694:	ed85 0a01 	vstr	s0, [r5, #4]
 8008698:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800869c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a0:	bfcc      	ite	gt
 80086a2:	2201      	movgt	r2, #1
 80086a4:	2200      	movle	r2, #0
 80086a6:	702a      	strb	r2, [r5, #0]
 80086a8:	b13b      	cbz	r3, 80086ba <process_data+0x62>
 80086aa:	2300      	movs	r3, #0
 80086ac:	f8b6 20b4 	ldrh.w	r2, [r6, #180]	; 0xb4
 80086b0:	722b      	strb	r3, [r5, #8]
 80086b2:	2001      	movs	r0, #1
 80086b4:	603a      	str	r2, [r7, #0]
 80086b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ba:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
 80086be:	f083 0301 	eor.w	r3, r3, #1
 80086c2:	e7f3      	b.n	80086ac <process_data+0x54>
 80086c4:	42640000 	.word	0x42640000

080086c8 <transfer_data>:
 80086c8:	6943      	ldr	r3, [r0, #20]
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	f8b3 60b8 	ldrh.w	r6, [r3, #184]	; 0xb8
 80086d2:	f8b3 40b4 	ldrh.w	r4, [r3, #180]	; 0xb4
 80086d6:	2300      	movs	r3, #0
 80086d8:	4434      	add	r4, r6
 80086da:	7013      	strb	r3, [r2, #0]
 80086dc:	460d      	mov	r5, r1
 80086de:	4622      	mov	r2, r4
 80086e0:	6809      	ldr	r1, [r1, #0]
 80086e2:	f001 fd15 	bl	800a110 <acc_sensor_protocol_r2_transfer_data>
 80086e6:	0062      	lsls	r2, r4, #1
 80086e8:	4601      	mov	r1, r0
 80086ea:	6828      	ldr	r0, [r5, #0]
 80086ec:	f003 fe5a 	bl	800c3a4 <memmove>
 80086f0:	4620      	mov	r0, r4
 80086f2:	bd70      	pop	{r4, r5, r6, pc}

080086f4 <start>:
 80086f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086f8:	f8d0 9014 	ldr.w	r9, [r0, #20]
 80086fc:	f8d9 6084 	ldr.w	r6, [r9, #132]	; 0x84
 8008700:	f8d9 707c 	ldr.w	r7, [r9, #124]	; 0x7c
 8008704:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
 8008708:	b083      	sub	sp, #12
 800870a:	4605      	mov	r5, r0
 800870c:	b106      	cbz	r6, 8008710 <start+0x1c>
 800870e:	b987      	cbnz	r7, 8008732 <start+0x3e>
 8008710:	e9d1 1200 	ldrd	r1, r2, [r1]
 8008714:	6828      	ldr	r0, [r5, #0]
 8008716:	464b      	mov	r3, r9
 8008718:	f002 fa90 	bl	800ac3c <acc_cpd_sparse_sweep_load_program>
 800871c:	4604      	mov	r4, r0
 800871e:	b960      	cbnz	r0, 800873a <start+0x46>
 8008720:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <start+0x9c>)
 8008722:	4a1c      	ldr	r2, [pc, #112]	; (8008794 <start+0xa0>)
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	491c      	ldr	r1, [pc, #112]	; (8008798 <start+0xa4>)
 8008728:	4798      	blx	r3
 800872a:	4620      	mov	r0, r4
 800872c:	b003      	add	sp, #12
 800872e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008732:	2300      	movs	r3, #0
 8008734:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8008738:	e7ea      	b.n	8008710 <start+0x1c>
 800873a:	6828      	ldr	r0, [r5, #0]
 800873c:	f002 fe8e 	bl	800b45c <acc_cpd_sparse_sweep_run_program>
 8008740:	4604      	mov	r4, r0
 8008742:	b1f8      	cbz	r0, 8008784 <start+0x90>
 8008744:	2f00      	cmp	r7, #0
 8008746:	d0f0      	beq.n	800872a <start+0x36>
 8008748:	6929      	ldr	r1, [r5, #16]
 800874a:	6828      	ldr	r0, [r5, #0]
 800874c:	f001 fcb6 	bl	800a0bc <acc_sensor_protocol_r2_wait_for_sync_start>
 8008750:	b1c0      	cbz	r0, 8008784 <start+0x90>
 8008752:	f7ff f9e1 	bl	8007b18 <acc_rss_integration_log_level>
 8008756:	2801      	cmp	r0, #1
 8008758:	d905      	bls.n	8008766 <start+0x72>
 800875a:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <start+0x9c>)
 800875c:	4a0f      	ldr	r2, [pc, #60]	; (800879c <start+0xa8>)
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	490d      	ldr	r1, [pc, #52]	; (8008798 <start+0xa4>)
 8008762:	2002      	movs	r0, #2
 8008764:	4798      	blx	r3
 8008766:	2e00      	cmp	r6, #0
 8008768:	d0df      	beq.n	800872a <start+0x36>
 800876a:	2301      	movs	r3, #1
 800876c:	6828      	ldr	r0, [r5, #0]
 800876e:	f8c9 8040 	str.w	r8, [r9, #64]	; 0x40
 8008772:	4669      	mov	r1, sp
 8008774:	f8cd 8004 	str.w	r8, [sp, #4]
 8008778:	f88d 3000 	strb.w	r3, [sp]
 800877c:	f002 fe72 	bl	800b464 <acc_cpd_sparse_sweep_update_program>
 8008780:	4604      	mov	r4, r0
 8008782:	e7d2      	b.n	800872a <start+0x36>
 8008784:	2400      	movs	r4, #0
 8008786:	4620      	mov	r0, r4
 8008788:	b003      	add	sp, #12
 800878a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800878e:	bf00      	nop
 8008790:	200007ec 	.word	0x200007ec
 8008794:	08011a18 	.word	0x08011a18
 8008798:	08011a38 	.word	0x08011a38
 800879c:	08011a4c 	.word	0x08011a4c

080087a0 <calibrate>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	6806      	ldr	r6, [r0, #0]
 80087a6:	460c      	mov	r4, r1
 80087a8:	4615      	mov	r5, r2
 80087aa:	f7ff f903 	bl	80079b4 <acc_rss_integration_get_sensor_reference_frequency>
 80087ae:	a805      	add	r0, sp, #20
 80087b0:	a902      	add	r1, sp, #8
 80087b2:	ed8d 0a05 	vstr	s0, [sp, #20]
 80087b6:	f001 ff49 	bl	800a64c <acc_cpd_pll_divisors_calculate>
 80087ba:	b918      	cbnz	r0, 80087c4 <calibrate+0x24>
 80087bc:	2400      	movs	r4, #0
 80087be:	4620      	mov	r0, r4
 80087c0:	b00a      	add	sp, #40	; 0x28
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80087c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80087cc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80087d0:	9605      	str	r6, [sp, #20]
 80087d2:	9006      	str	r0, [sp, #24]
 80087d4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80087d8:	9307      	str	r3, [sp, #28]
 80087da:	9108      	str	r1, [sp, #32]
 80087dc:	aa05      	add	r2, sp, #20
 80087de:	e9d4 0100 	ldrd	r0, r1, [r4]
 80087e2:	466b      	mov	r3, sp
 80087e4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80087e8:	f002 f84c 	bl	800a884 <acc_cpd_cbank_and_vana_calibration>
 80087ec:	4604      	mov	r4, r0
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d0e4      	beq.n	80087bc <calibrate+0x1c>
 80087f2:	9b00      	ldr	r3, [sp, #0]
 80087f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80087f8:	80ab      	strh	r3, [r5, #4]
 80087fa:	2306      	movs	r3, #6
 80087fc:	80ea      	strh	r2, [r5, #6]
 80087fe:	602b      	str	r3, [r5, #0]
 8008800:	f7ff f98a 	bl	8007b18 <acc_rss_integration_log_level>
 8008804:	2801      	cmp	r0, #1
 8008806:	d9da      	bls.n	80087be <calibrate+0x1e>
 8008808:	4b04      	ldr	r3, [pc, #16]	; (800881c <calibrate+0x7c>)
 800880a:	4a05      	ldr	r2, [pc, #20]	; (8008820 <calibrate+0x80>)
 800880c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880e:	4905      	ldr	r1, [pc, #20]	; (8008824 <calibrate+0x84>)
 8008810:	2002      	movs	r0, #2
 8008812:	4798      	blx	r3
 8008814:	4620      	mov	r0, r4
 8008816:	b00a      	add	sp, #40	; 0x28
 8008818:	bd70      	pop	{r4, r5, r6, pc}
 800881a:	bf00      	nop
 800881c:	200007ec 	.word	0x200007ec
 8008820:	08011a70 	.word	0x08011a70
 8008824:	08011a38 	.word	0x08011a38

08008828 <set_calibration_context>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	680b      	ldr	r3, [r1, #0]
 800882c:	2b06      	cmp	r3, #6
 800882e:	b086      	sub	sp, #24
 8008830:	d00a      	beq.n	8008848 <set_calibration_context+0x20>
 8008832:	4914      	ldr	r1, [pc, #80]	; (8008884 <set_calibration_context+0x5c>)
 8008834:	4a14      	ldr	r2, [pc, #80]	; (8008888 <set_calibration_context+0x60>)
 8008836:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008838:	4914      	ldr	r1, [pc, #80]	; (800888c <set_calibration_context+0x64>)
 800883a:	2006      	movs	r0, #6
 800883c:	9000      	str	r0, [sp, #0]
 800883e:	2000      	movs	r0, #0
 8008840:	47a0      	blx	r4
 8008842:	2000      	movs	r0, #0
 8008844:	b006      	add	sp, #24
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	460c      	mov	r4, r1
 800884a:	4605      	mov	r5, r0
 800884c:	f7ff f8b2 	bl	80079b4 <acc_rss_integration_get_sensor_reference_frequency>
 8008850:	a903      	add	r1, sp, #12
 8008852:	a802      	add	r0, sp, #8
 8008854:	ed8d 0a02 	vstr	s0, [sp, #8]
 8008858:	f001 fef8 	bl	800a64c <acc_cpd_pll_divisors_calculate>
 800885c:	2800      	cmp	r0, #0
 800885e:	d0f1      	beq.n	8008844 <set_calibration_context+0x1c>
 8008860:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8008864:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008868:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 800886c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8008870:	606a      	str	r2, [r5, #4]
 8008872:	60ab      	str	r3, [r5, #8]
 8008874:	88a2      	ldrh	r2, [r4, #4]
 8008876:	88e3      	ldrh	r3, [r4, #6]
 8008878:	602e      	str	r6, [r5, #0]
 800887a:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800887e:	81a9      	strh	r1, [r5, #12]
 8008880:	b006      	add	sp, #24
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	200007ec 	.word	0x200007ec
 8008888:	08011a90 	.word	0x08011a90
 800888c:	08011a38 	.word	0x08011a38

08008890 <get_dt>:
 8008890:	b508      	push	{r3, lr}
 8008892:	ed2d 8b02 	vpush	{d8}
 8008896:	f7ff f88d 	bl	80079b4 <acc_rss_integration_get_sensor_reference_frequency>
 800889a:	eeb0 8a40 	vmov.f32	s16, s0
 800889e:	f001 ff63 	bl	800a768 <acc_cpd_pll_divisors_ref_divisor>
 80088a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80088a6:	ecbd 8b02 	vpop	{d8}
 80088aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80088ae:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80088b2:	bd08      	pop	{r3, pc}

080088b4 <initialize>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	ed2d 8b06 	vpush	{d8-d10}
 80088bc:	460c      	mov	r4, r1
 80088be:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 80088c2:	2906      	cmp	r1, #6
 80088c4:	b095      	sub	sp, #84	; 0x54
 80088c6:	4607      	mov	r7, r0
 80088c8:	4691      	mov	r9, r2
 80088ca:	4698      	mov	r8, r3
 80088cc:	d00f      	beq.n	80088ee <initialize+0x3a>
 80088ce:	2909      	cmp	r1, #9
 80088d0:	d00d      	beq.n	80088ee <initialize+0x3a>
 80088d2:	4b63      	ldr	r3, [pc, #396]	; (8008a60 <initialize+0x1ac>)
 80088d4:	4a63      	ldr	r2, [pc, #396]	; (8008a64 <initialize+0x1b0>)
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	4963      	ldr	r1, [pc, #396]	; (8008a68 <initialize+0x1b4>)
 80088da:	2000      	movs	r0, #0
 80088dc:	4798      	blx	r3
 80088de:	f04f 0a00 	mov.w	sl, #0
 80088e2:	4650      	mov	r0, sl
 80088e4:	b015      	add	sp, #84	; 0x54
 80088e6:	ecbd 8b06 	vpop	{d8-d10}
 80088ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ee:	4620      	mov	r0, r4
 80088f0:	f8d7 b014 	ldr.w	fp, [r7, #20]
 80088f4:	f7ff fb32 	bl	8007f5c <acc_base_configuration_use_point_range_get>
 80088f8:	b1d8      	cbz	r0, 8008932 <initialize+0x7e>
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7ff fa64 	bl	8007dc8 <acc_base_configuration_point_start_get>
 8008900:	4606      	mov	r6, r0
 8008902:	4620      	mov	r0, r4
 8008904:	f7ff fa6c 	bl	8007de0 <acc_base_configuration_point_length_get>
 8008908:	4430      	add	r0, r6
 800890a:	b205      	sxth	r5, r0
 800890c:	b236      	sxth	r6, r6
 800890e:	4620      	mov	r0, r4
 8008910:	f7ff fb8e 	bl	8008030 <acc_base_configuration_downsampling_factor_get>
 8008914:	eba5 0a06 	sub.w	sl, r5, r6
 8008918:	fb9a f3f0 	sdiv	r3, sl, r0
 800891c:	fb03 aa10 	mls	sl, r3, r0, sl
 8008920:	f1ba 0f00 	cmp.w	sl, #0
 8008924:	f300 808d 	bgt.w	8008a42 <initialize+0x18e>
 8008928:	42b5      	cmp	r5, r6
 800892a:	da41      	bge.n	80089b0 <initialize+0xfc>
 800892c:	4b4c      	ldr	r3, [pc, #304]	; (8008a60 <initialize+0x1ac>)
 800892e:	4a4f      	ldr	r2, [pc, #316]	; (8008a6c <initialize+0x1b8>)
 8008930:	e7d1      	b.n	80088d6 <initialize+0x22>
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff f98e 	bl	8007c54 <acc_base_configuration_requested_start_get>
 8008938:	4620      	mov	r0, r4
 800893a:	eeb0 8a40 	vmov.f32	s16, s0
 800893e:	f7ff f9ab 	bl	8007c98 <acc_base_configuration_requested_length_get>
 8008942:	ee78 8a00 	vadd.f32	s17, s16, s0
 8008946:	f7ff ffa3 	bl	8008890 <get_dt>
 800894a:	eddf 9a49 	vldr	s19, [pc, #292]	; 8008a70 <initialize+0x1bc>
 800894e:	ee78 7a08 	vadd.f32	s15, s16, s16
 8008952:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008956:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800895a:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800895e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008962:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8008966:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800896a:	bf54      	ite	pl
 800896c:	eef0 7a49 	vmovpl.f32	s15, s18
 8008970:	eef0 7a48 	vmovmi.f32	s15, s16
 8008974:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008978:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800897c:	ee17 3a10 	vmov	r3, s14
 8008980:	b21e      	sxth	r6, r3
 8008982:	f7ff ff85 	bl	8008890 <get_dt>
 8008986:	ee38 7aa8 	vadd.f32	s14, s17, s17
 800898a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800898e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008992:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899a:	bf58      	it	pl
 800899c:	eeb0 8a49 	vmovpl.f32	s16, s18
 80089a0:	ee77 7a88 	vadd.f32	s15, s15, s16
 80089a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089a8:	ee17 3a90 	vmov	r3, s15
 80089ac:	b21d      	sxth	r5, r3
 80089ae:	e7ae      	b.n	800890e <initialize+0x5a>
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7ff faf7 	bl	8007fa4 <acc_base_configuration_ignore_range_limits_get>
 80089b6:	4682      	mov	sl, r0
 80089b8:	b9f0      	cbnz	r0, 80089f8 <initialize+0x144>
 80089ba:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 818f 	beq.w	8008ce2 <initialize+0x42e>
 80089c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80089c6:	b21a      	sxth	r2, r3
 80089c8:	015b      	lsls	r3, r3, #5
 80089ca:	3b1a      	subs	r3, #26
 80089cc:	b21b      	sxth	r3, r3
 80089ce:	3a01      	subs	r2, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80089d6:	b292      	uxth	r2, r2
 80089d8:	bfb8      	it	lt
 80089da:	3307      	addlt	r3, #7
 80089dc:	f1a2 010f 	sub.w	r1, r2, #15
 80089e0:	f023 0307 	bic.w	r3, r3, #7
 80089e4:	1acb      	subs	r3, r1, r3
 80089e6:	b219      	sxth	r1, r3
 80089e8:	3a30      	subs	r2, #48	; 0x30
 80089ea:	42b1      	cmp	r1, r6
 80089ec:	b212      	sxth	r2, r2
 80089ee:	f300 83e7 	bgt.w	80091c0 <initialize+0x90c>
 80089f2:	42aa      	cmp	r2, r5
 80089f4:	f2c0 8186 	blt.w	8008d04 <initialize+0x450>
 80089f8:	4620      	mov	r0, r4
 80089fa:	f7ff fb19 	bl	8008030 <acc_base_configuration_downsampling_factor_get>
 80089fe:	1bab      	subs	r3, r5, r6
 8008a00:	4602      	mov	r2, r0
 8008a02:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a06:	3301      	adds	r3, #1
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	9008      	str	r0, [sp, #32]
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	9306      	str	r3, [sp, #24]
 8008a10:	f7ff fae0 	bl	8007fd4 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8008a14:	9b06      	ldr	r3, [sp, #24]
 8008a16:	fb13 f300 	smulbb	r3, r3, r0
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	aa11      	add	r2, sp, #68	; 0x44
 8008a1e:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 8008a22:	4620      	mov	r0, r4
 8008a24:	9307      	str	r3, [sp, #28]
 8008a26:	f7ff fb7b 	bl	8008120 <acc_base_configuration_cca_get>
 8008a2a:	bb48      	cbnz	r0, 8008a80 <initialize+0x1cc>
 8008a2c:	9a07      	ldr	r2, [sp, #28]
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4410      	add	r0, r2
 8008a32:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008a36:	f8ab 30b8 	strh.w	r3, [fp, #184]	; 0xb8
 8008a3a:	dd2b      	ble.n	8008a94 <initialize+0x1e0>
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <initialize+0x1ac>)
 8008a3e:	4a0d      	ldr	r2, [pc, #52]	; (8008a74 <initialize+0x1c0>)
 8008a40:	e749      	b.n	80088d6 <initialize+0x22>
 8008a42:	f7ff f869 	bl	8007b18 <acc_rss_integration_log_level>
 8008a46:	2801      	cmp	r0, #1
 8008a48:	d905      	bls.n	8008a56 <initialize+0x1a2>
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <initialize+0x1ac>)
 8008a4c:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <initialize+0x1c4>)
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a50:	4905      	ldr	r1, [pc, #20]	; (8008a68 <initialize+0x1b4>)
 8008a52:	2002      	movs	r0, #2
 8008a54:	4798      	blx	r3
 8008a56:	eba5 050a 	sub.w	r5, r5, sl
 8008a5a:	b22d      	sxth	r5, r5
 8008a5c:	e764      	b.n	8008928 <initialize+0x74>
 8008a5e:	bf00      	nop
 8008a60:	200007ec 	.word	0x200007ec
 8008a64:	08011c78 	.word	0x08011c78
 8008a68:	08011a38 	.word	0x08011a38
 8008a6c:	08011b08 	.word	0x08011b08
 8008a70:	4d8ef3c2 	.word	0x4d8ef3c2
 8008a74:	08011bb8 	.word	0x08011bb8
 8008a78:	08011ad4 	.word	0x08011ad4
 8008a7c:	3d000000 	.word	0x3d000000
 8008a80:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008a84:	9a07      	ldr	r2, [sp, #28]
 8008a86:	f8ab 30b8 	strh.w	r3, [fp, #184]	; 0xb8
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	4410      	add	r0, r2
 8008a8e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008a92:	dcd3      	bgt.n	8008a3c <initialize+0x188>
 8008a94:	4620      	mov	r0, r4
 8008a96:	f7ff f973 	bl	8007d80 <acc_base_configuration_hw_accelerated_average_samples_get>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa0:	f7ff fb72 	bl	8008188 <acc_base_configuration_mur_get>
 8008aa4:	4682      	mov	sl, r0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff fa28 	bl	8007efc <acc_base_configuration_sampling_mode_get>
 8008aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f040 811a 	bne.w	8008ce8 <initialize+0x434>
 8008ab4:	9906      	ldr	r1, [sp, #24]
 8008ab6:	2007      	movs	r0, #7
 8008ab8:	f04f 0c0d 	mov.w	ip, #13
 8008abc:	fb0a fa01 	mul.w	sl, sl, r1
 8008ac0:	fb10 c003 	smlabb	r0, r0, r3, ip
 8008ac4:	fb00 f00a 	mul.w	r0, r0, sl
 8008ac8:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
 8008acc:	eb00 030a 	add.w	r3, r0, sl
 8008ad0:	ee08 3a10 	vmov	s16, r3
 8008ad4:	f7fe ff6e 	bl	80079b4 <acc_rss_integration_get_sensor_reference_frequency>
 8008ad8:	eef0 8a40 	vmov.f32	s17, s0
 8008adc:	f001 fe44 	bl	800a768 <acc_cpd_pll_divisors_ref_divisor>
 8008ae0:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8008a7c <initialize+0x1c8>
 8008ae4:	ee28 0a80 	vmul.f32	s0, s17, s0
 8008ae8:	4620      	mov	r0, r4
 8008aea:	ee60 8a27 	vmul.f32	s17, s0, s15
 8008aee:	f7ff fa8f 	bl	8008010 <acc_base_configuration_sparse_sweep_rate_get>
 8008af2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afa:	f340 8358 	ble.w	80091ae <initialize+0x8fa>
 8008afe:	eec8 6a80 	vdiv.f32	s13, s17, s0
 8008b02:	eef8 7a48 	vcvt.f32.u32	s15, s16
 8008b06:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008b0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008b0e:	ee07 aa90 	vmov	s15, sl
 8008b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b22:	ee17 3a90 	vmov	r3, s15
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f2c0 845e 	blt.w	80093e8 <initialize+0xb34>
 8008b2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b30:	4293      	cmp	r3, r2
 8008b32:	f300 8202 	bgt.w	8008f3a <initialize+0x686>
 8008b36:	ee18 2a10 	vmov	r2, s16
 8008b3a:	fb0a 2203 	mla	r2, sl, r3, r2
 8008b3e:	ee08 2a10 	vmov	s16, r2
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	f8ab 30b6 	strh.w	r3, [fp, #182]	; 0xb6
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7ff f8e9 	bl	8007d20 <acc_base_configuration_tx_disable_get>
 8008b4e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8008b52:	9a07      	ldr	r2, [sp, #28]
 8008b54:	f88b 00ba 	strb.w	r0, [fp, #186]	; 0xba
 8008b58:	f8ab 20b4 	strh.w	r2, [fp, #180]	; 0xb4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 832c 	beq.w	80091ba <initialize+0x906>
 8008b62:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8008b66:	9808      	ldr	r0, [sp, #32]
 8008b68:	9906      	ldr	r1, [sp, #24]
 8008b6a:	f8a7 c004 	strh.w	ip, [r7, #4]
 8008b6e:	1e42      	subs	r2, r0, #1
 8008b70:	b292      	uxth	r2, r2
 8008b72:	2301      	movs	r3, #1
 8008b74:	2a07      	cmp	r2, #7
 8008b76:	81bb      	strh	r3, [r7, #12]
 8008b78:	813e      	strh	r6, [r7, #8]
 8008b7a:	8179      	strh	r1, [r7, #10]
 8008b7c:	4633      	mov	r3, r6
 8008b7e:	f200 8318 	bhi.w	80091b2 <initialize+0x8fe>
 8008b82:	2208      	movs	r2, #8
 8008b84:	fbb2 f2f0 	udiv	r2, r2, r0
 8008b88:	fb00 f202 	mul.w	r2, r0, r2
 8008b8c:	2a08      	cmp	r2, #8
 8008b8e:	f040 8310 	bne.w	80091b2 <initialize+0x8fe>
 8008b92:	fa0f f18c 	sxth.w	r1, ip
 8008b96:	3901      	subs	r1, #1
 8008b98:	0149      	lsls	r1, r1, #5
 8008b9a:	b28a      	uxth	r2, r1
 8008b9c:	f1a2 0e0f 	sub.w	lr, r2, #15
 8008ba0:	fa1f fe8e 	uxth.w	lr, lr
 8008ba4:	eba3 030e 	sub.w	r3, r3, lr
 8008ba8:	b21b      	sxth	r3, r3
 8008baa:	920b      	str	r2, [sp, #44]	; 0x2c
 8008bac:	10da      	asrs	r2, r3, #3
 8008bae:	4611      	mov	r1, r2
 8008bb0:	920c      	str	r2, [sp, #48]	; 0x30
 8008bb2:	425a      	negs	r2, r3
 8008bb4:	f002 0207 	and.w	r2, r2, #7
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	9808      	ldr	r0, [sp, #32]
 8008bbe:	bf58      	it	pl
 8008bc0:	4253      	negpl	r3, r2
 8008bc2:	eba5 0e0e 	sub.w	lr, r5, lr
 8008bc6:	2208      	movs	r2, #8
 8008bc8:	fbb2 f2f0 	udiv	r2, r2, r0
 8008bcc:	9808      	ldr	r0, [sp, #32]
 8008bce:	fa0f fe8e 	sxth.w	lr, lr
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f102 32ff 	add.w	r2, r2, #4294967295
 8008bd8:	bfb8      	it	lt
 8008bda:	3308      	addlt	r3, #8
 8008bdc:	920d      	str	r2, [sp, #52]	; 0x34
 8008bde:	f1de 0a00 	rsbs	sl, lr, #0
 8008be2:	fb12 f200 	smulbb	r2, r2, r0
 8008be6:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8008bea:	f00a 0a07 	and.w	sl, sl, #7
 8008bee:	f00e 0e07 	and.w	lr, lr, #7
 8008bf2:	f1c1 0101 	rsb	r1, r1, #1
 8008bf6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf8:	4461      	add	r1, ip
 8008bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bfc:	fbb3 fcf0 	udiv	ip, r3, r0
 8008c00:	fb00 3c1c 	mls	ip, r0, ip, r3
 8008c04:	4670      	mov	r0, lr
 8008c06:	bf58      	it	pl
 8008c08:	f1ca 0000 	rsbpl	r0, sl, #0
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	b289      	uxth	r1, r1
 8008c10:	4462      	add	r2, ip
 8008c12:	bfb8      	it	lt
 8008c14:	3008      	addlt	r0, #8
 8008c16:	2901      	cmp	r1, #1
 8008c18:	fa1f fa82 	uxth.w	sl, r2
 8008c1c:	fa0f fe8c 	sxth.w	lr, ip
 8008c20:	b212      	sxth	r2, r2
 8008c22:	f000 83f5 	beq.w	8009410 <initialize+0xb5c>
 8008c26:	1a12      	subs	r2, r2, r0
 8008c28:	bf18      	it	ne
 8008c2a:	2201      	movne	r2, #1
 8008c2c:	4573      	cmp	r3, lr
 8008c2e:	bf14      	ite	ne
 8008c30:	f04f 0e01 	movne.w	lr, #1
 8008c34:	f04f 0e00 	moveq.w	lr, #0
 8008c38:	eba1 010e 	sub.w	r1, r1, lr
 8008c3c:	eba1 0102 	sub.w	r1, r1, r2
 8008c40:	b209      	sxth	r1, r1
 8008c42:	9109      	str	r1, [sp, #36]	; 0x24
 8008c44:	f040 83f7 	bne.w	8009436 <initialize+0xb82>
 8008c48:	f04f 0a00 	mov.w	sl, #0
 8008c4c:	4551      	cmp	r1, sl
 8008c4e:	e9cd a20e 	strd	sl, r2, [sp, #56]	; 0x38
 8008c52:	bfd4      	ite	le
 8008c54:	2200      	movle	r2, #0
 8008c56:	2201      	movgt	r2, #1
 8008c58:	920a      	str	r2, [sp, #40]	; 0x28
 8008c5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c5c:	f1a2 0132 	sub.w	r1, r2, #50	; 0x32
 8008c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c62:	b209      	sxth	r1, r1
 8008c64:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	440b      	add	r3, r1
 8008c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008c70:	4461      	add	r1, ip
 8008c72:	9b08      	ldr	r3, [sp, #32]
 8008c74:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8008c78:	eba0 0c0c 	sub.w	ip, r0, ip
 8008c7c:	fb9c f3f3 	sdiv	r3, ip, r3
 8008c80:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8008c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8008c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c92:	e9c2 3a28 	strd	r3, sl, [r2, #160]	; 0xa0
 8008c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c98:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8008c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfcc      	ite	gt
 8008ca2:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8008ca6:	2300      	movle	r3, #0
 8008ca8:	f1ce 0e05 	rsb	lr, lr, #5
 8008cac:	f8c2 e08c 	str.w	lr, [r2, #140]	; 0x8c
 8008cb0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f7ff f921 	bl	8007efc <acc_base_configuration_sampling_mode_get>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f040 8398 	bne.w	80093f0 <initialize+0xb3c>
 8008cc0:	232e      	movs	r3, #46	; 0x2e
 8008cc2:	f88b 0070 	strb.w	r0, [fp, #112]	; 0x70
 8008cc6:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f7ff f894 	bl	8007df8 <acc_base_configuration_repetition_mode_get>
 8008cd0:	2803      	cmp	r0, #3
 8008cd2:	f200 8256 	bhi.w	8009182 <initialize+0x8ce>
 8008cd6:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008cda:	024f      	.short	0x024f
 8008cdc:	02300244 	.word	0x02300244
 8008ce0:	0133      	.short	0x0133
 8008ce2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8008ce6:	e66e      	b.n	80089c6 <initialize+0x112>
 8008ce8:	9a06      	ldr	r2, [sp, #24]
 8008cea:	fb03 f302 	mul.w	r3, r3, r2
 8008cee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008cf2:	f103 000f 	add.w	r0, r3, #15
 8008cf6:	fb0a fa00 	mul.w	sl, sl, r0
 8008cfa:	f10a 00d4 	add.w	r0, sl, #212	; 0xd4
 8008cfe:	f04f 0a03 	mov.w	sl, #3
 8008d02:	e6e3      	b.n	8008acc <initialize+0x218>
 8008d04:	ee07 5a90 	vmov	s15, r5
 8008d08:	4b9b      	ldr	r3, [pc, #620]	; (8008f78 <initialize+0x6c4>)
 8008d0a:	9206      	str	r2, [sp, #24]
 8008d0c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8008d10:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8008d12:	eddf 9aa1 	vldr	s19, [pc, #644]	; 8008f98 <initialize+0x6e4>
 8008d16:	ed9f aaa0 	vldr	s20, [pc, #640]	; 8008f98 <initialize+0x6e4>
 8008d1a:	f7ff fdb9 	bl	8008890 <get_dt>
 8008d1e:	ee29 7a00 	vmul.f32	s14, s18, s0
 8008d22:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8008d26:	ee27 7a29 	vmul.f32	s14, s14, s19
 8008d2a:	4994      	ldr	r1, [pc, #592]	; (8008f7c <initialize+0x6c8>)
 8008d2c:	4b94      	ldr	r3, [pc, #592]	; (8008f80 <initialize+0x6cc>)
 8008d2e:	ee27 7a28 	vmul.f32	s14, s14, s17
 8008d32:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	bf4c      	ite	mi
 8008d3c:	4688      	movmi	r8, r1
 8008d3e:	4698      	movpl	r8, r3
 8008d40:	f7ff fda6 	bl	8008890 <get_dt>
 8008d44:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008d48:	f7ff fda2 	bl	8008890 <get_dt>
 8008d4c:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008d50:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008d54:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008d58:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008d5c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008d60:	9a06      	ldr	r2, [sp, #24]
 8008d62:	9206      	str	r2, [sp, #24]
 8008d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6c:	eddf 7a85 	vldr	s15, [pc, #532]	; 8008f84 <initialize+0x6d0>
 8008d70:	eddf 9a89 	vldr	s19, [pc, #548]	; 8008f98 <initialize+0x6e4>
 8008d74:	bf48      	it	mi
 8008d76:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008d7a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008d7e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8008d82:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8008d86:	ee17 6a90 	vmov	r6, s15
 8008d8a:	f7ff fd81 	bl	8008890 <get_dt>
 8008d8e:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008d92:	f7ff fd7d 	bl	8008890 <get_dt>
 8008d96:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008d9a:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008d9e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008da2:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008da6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008daa:	9a06      	ldr	r2, [sp, #24]
 8008dac:	9206      	str	r2, [sp, #24]
 8008dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db6:	bf48      	it	mi
 8008db8:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008dbc:	f7ff fd68 	bl	8008890 <get_dt>
 8008dc0:	eddf 8a70 	vldr	s17, [pc, #448]	; 8008f84 <initialize+0x6d0>
 8008dc4:	ee78 8a28 	vadd.f32	s17, s16, s17
 8008dc8:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008dcc:	f7ff fd60 	bl	8008890 <get_dt>
 8008dd0:	ee69 7a00 	vmul.f32	s15, s18, s0
 8008dd4:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008dd8:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8008ddc:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8008de0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008de4:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df0:	eddf 7a64 	vldr	s15, [pc, #400]	; 8008f84 <initialize+0x6d0>
 8008df4:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8008f88 <initialize+0x6d4>
 8008df8:	9a06      	ldr	r2, [sp, #24]
 8008dfa:	ed9f 9a67 	vldr	s18, [pc, #412]	; 8008f98 <initialize+0x6e4>
 8008dfe:	ed9f aa66 	vldr	s20, [pc, #408]	; 8008f98 <initialize+0x6e4>
 8008e02:	bf48      	it	mi
 8008e04:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008e08:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008e0c:	ee06 2a90 	vmov	s13, r2
 8008e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e14:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 8008e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1c:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008e20:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8008e24:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008e28:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8008e2c:	ee17 4a90 	vmov	r4, s15
 8008e30:	f7ff fd2e 	bl	8008890 <get_dt>
 8008e34:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008e38:	4b50      	ldr	r3, [pc, #320]	; (8008f7c <initialize+0x6c8>)
 8008e3a:	4a51      	ldr	r2, [pc, #324]	; (8008f80 <initialize+0x6cc>)
 8008e3c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008e40:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4c:	bf4c      	ite	mi
 8008e4e:	4699      	movmi	r9, r3
 8008e50:	4691      	movpl	r9, r2
 8008e52:	f7ff fd1d 	bl	8008890 <get_dt>
 8008e56:	ee68 8a00 	vmul.f32	s17, s16, s0
 8008e5a:	f7ff fd19 	bl	8008890 <get_dt>
 8008e5e:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008e62:	ee68 8a89 	vmul.f32	s17, s17, s18
 8008e66:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008e6a:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8008e6e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008e72:	eddf 9a49 	vldr	s19, [pc, #292]	; 8008f98 <initialize+0x6e4>
 8008e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8008f84 <initialize+0x6d0>
 8008e82:	bf48      	it	mi
 8008e84:	eef1 8a68 	vnegmi.f32	s17, s17
 8008e88:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8008e8c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008e90:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8008e94:	ee17 5a90 	vmov	r5, s15
 8008e98:	f7ff fcfa 	bl	8008890 <get_dt>
 8008e9c:	ee68 8a00 	vmul.f32	s17, s16, s0
 8008ea0:	f7ff fcf6 	bl	8008890 <get_dt>
 8008ea4:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008ea8:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8008eac:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008eb0:	ee68 8a89 	vmul.f32	s17, s17, s18
 8008eb4:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008eb8:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8008ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec4:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8008f84 <initialize+0x6d0>
 8008ec8:	bf48      	it	mi
 8008eca:	eef1 8a68 	vnegmi.f32	s17, s17
 8008ece:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8008ed2:	f7ff fcdd 	bl	8008890 <get_dt>
 8008ed6:	ee28 9a00 	vmul.f32	s18, s16, s0
 8008eda:	f7ff fcd9 	bl	8008890 <get_dt>
 8008ede:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008ee2:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008ee6:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8008eea:	ee29 9a29 	vmul.f32	s18, s18, s19
 8008eee:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008ef2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008f88 <initialize+0x6d4>
 8008ef6:	4a25      	ldr	r2, [pc, #148]	; (8008f8c <initialize+0x6d8>)
 8008ef8:	9503      	str	r5, [sp, #12]
 8008efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f02:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008f84 <initialize+0x6d0>
 8008f06:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f0a:	bf48      	it	mi
 8008f0c:	eeb1 9a49 	vnegmi.f32	s18, s18
 8008f10:	ee79 7a27 	vadd.f32	s15, s18, s15
 8008f14:	9401      	str	r4, [sp, #4]
 8008f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1a:	9600      	str	r6, [sp, #0]
 8008f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f20:	4643      	mov	r3, r8
 8008f22:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8008f26:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008f2a:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 8008f2e:	4918      	ldr	r1, [pc, #96]	; (8008f90 <initialize+0x6dc>)
 8008f30:	edcd 8a04 	vstr	s17, [sp, #16]
 8008f34:	2000      	movs	r0, #0
 8008f36:	47b8      	blx	r7
 8008f38:	e4d3      	b.n	80088e2 <initialize+0x2e>
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <initialize+0x6c4>)
 8008f3c:	4a15      	ldr	r2, [pc, #84]	; (8008f94 <initialize+0x6e0>)
 8008f3e:	e4ca      	b.n	80088d6 <initialize+0x22>
 8008f40:	ab13      	add	r3, sp, #76	; 0x4c
 8008f42:	4620      	mov	r0, r4
 8008f44:	9309      	str	r3, [sp, #36]	; 0x24
 8008f46:	f7fe ff61 	bl	8007e0c <acc_base_configuration_update_rate_get>
 8008f4a:	a912      	add	r1, sp, #72	; 0x48
 8008f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f4e:	f000 fae7 	bl	8009520 <acc_radar_engine_common_frequency_to_main_clk>
 8008f52:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8008f56:	2301      	movs	r3, #1
 8008f58:	e9cb 3309 	strd	r3, r3, [fp, #36]	; 0x24
 8008f5c:	e9cb 120b 	strd	r1, r2, [fp, #44]	; 0x2c
 8008f60:	4620      	mov	r0, r4
 8008f62:	f7fe fec7 	bl	8007cf4 <acc_base_configuration_power_save_mode_get>
 8008f66:	2804      	cmp	r0, #4
 8008f68:	d81e      	bhi.n	8008fa8 <initialize+0x6f4>
 8008f6a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008f6e:	0017      	.short	0x0017
 8008f70:	01190017 	.word	0x01190017
 8008f74:	010d0113 	.word	0x010d0113
 8008f78:	200007ec 	.word	0x200007ec
 8008f7c:	08011ad0 	.word	0x08011ad0
 8008f80:	08012bb0 	.word	0x08012bb0
 8008f84:	350637bd 	.word	0x350637bd
 8008f88:	49742400 	.word	0x49742400
 8008f8c:	08011b78 	.word	0x08011b78
 8008f90:	08011a38 	.word	0x08011a38
 8008f94:	08011c3c 	.word	0x08011c3c
 8008f98:	4d8ef3c2 	.word	0x4d8ef3c2
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
 8008fa8:	f10d 0246 	add.w	r2, sp, #70	; 0x46
 8008fac:	f10d 0143 	add.w	r1, sp, #67	; 0x43
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f7ff f8b5 	bl	8008120 <acc_base_configuration_cca_get>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f000 8221 	beq.w	80093fe <initialize+0xb4a>
 8008fbc:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	e9cb 2321 	strd	r2, r3, [fp, #132]	; 0x84
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f7fe fea9 	bl	8007d20 <acc_base_configuration_tx_disable_get>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f000 8239 	beq.w	8009446 <initialize+0xb92>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f7fe feb8 	bl	8007d50 <acc_base_configuration_decrease_tx_emission_get>
 8008fe0:	f080 0001 	eor.w	r0, r0, #1
 8008fe4:	f04f 0a01 	mov.w	sl, #1
 8008fe8:	b2c0      	uxtb	r0, r0
 8008fea:	e9cb 0a11 	strd	r0, sl, [fp, #68]	; 0x44
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f7fe fec6 	bl	8007d80 <acc_base_configuration_hw_accelerated_average_samples_get>
 8008ff4:	4550      	cmp	r0, sl
 8008ff6:	bf8b      	itete	hi
 8008ff8:	3802      	subhi	r0, #2
 8008ffa:	2300      	movls	r3, #0
 8008ffc:	e9cb a013 	strdhi	sl, r0, [fp, #76]	; 0x4c
 8009000:	e9cb 3313 	strdls	r3, r3, [fp, #76]	; 0x4c
 8009004:	4620      	mov	r0, r4
 8009006:	f7fe ff1b 	bl	8007e40 <acc_base_configuration_gain_get>
 800900a:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 800900e:	4620      	mov	r0, r4
 8009010:	f7fe ff2c 	bl	8007e6c <acc_base_configuration_integrator_get>
 8009014:	f8cb 0058 	str.w	r0, [fp, #88]	; 0x58
 8009018:	4620      	mov	r0, r4
 800901a:	f7fe ff3f 	bl	8007e9c <acc_base_configuration_wg_duration_get>
 800901e:	f8cb 005c 	str.w	r0, [fp, #92]	; 0x5c
 8009022:	4620      	mov	r0, r4
 8009024:	f7fe ffd6 	bl	8007fd4 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8009028:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
 800902c:	4620      	mov	r0, r4
 800902e:	f7fe ffff 	bl	8008030 <acc_base_configuration_downsampling_factor_get>
 8009032:	f8cb 0078 	str.w	r0, [fp, #120]	; 0x78
 8009036:	4620      	mov	r0, r4
 8009038:	f7ff f836 	bl	80080a8 <acc_base_configuration_asynchronous_measurement_get>
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	897a      	ldrh	r2, [r7, #10]
 8009040:	f8b3 10b6 	ldrh.w	r1, [r3, #182]	; 0xb6
 8009044:	88bb      	ldrh	r3, [r7, #4]
 8009046:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 800904a:	f080 0001 	eor.w	r0, r0, #1
 800904e:	b2c0      	uxtb	r0, r0
 8009050:	3a01      	subs	r2, #1
 8009052:	f8cb 007c 	str.w	r0, [fp, #124]	; 0x7c
 8009056:	f8cb 206c 	str.w	r2, [fp, #108]	; 0x6c
 800905a:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
 800905e:	f7fe fca9 	bl	80079b4 <acc_rss_integration_get_sensor_reference_frequency>
 8009062:	ed8b 0a20 	vstr	s0, [fp, #128]	; 0x80
 8009066:	f7ff fc13 	bl	8008890 <get_dt>
 800906a:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800906e:	eddd 7a08 	vldr	s15, [sp, #32]
 8009072:	ed1f 9a37 	vldr	s18, [pc, #-220]	; 8008f98 <initialize+0x6e4>
 8009076:	ee88 7a88 	vdiv.f32	s14, s17, s16
 800907a:	2401      	movs	r4, #1
 800907c:	46a2      	mov	sl, r4
 800907e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009082:	ed89 7a04 	vstr	s14, [r9, #16]
 8009086:	ee27 0a80 	vmul.f32	s0, s15, s0
 800908a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800908e:	ed89 0a03 	vstr	s0, [r9, #12]
 8009092:	f7ff fbfd 	bl	8008890 <get_dt>
 8009096:	ee07 6a90 	vmov	s15, r6
 800909a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800909e:	ee27 7a00 	vmul.f32	s14, s14, s0
 80090a2:	ee27 7a09 	vmul.f32	s14, s14, s18
 80090a6:	ee27 7a08 	vmul.f32	s14, s14, s16
 80090aa:	ed89 7a00 	vstr	s14, [r9]
 80090ae:	f7ff fbef 	bl	8008890 <get_dt>
 80090b2:	ee07 5a90 	vmov	s15, r5
 80090b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090ba:	edd9 6a00 	vldr	s13, [r9]
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	9807      	ldr	r0, [sp, #28]
 80090c2:	f8a9 0016 	strh.w	r0, [r9, #22]
 80090c6:	ee27 0a00 	vmul.f32	s0, s14, s0
 80090ca:	2500      	movs	r5, #0
 80090cc:	ee60 7a09 	vmul.f32	s15, s0, s18
 80090d0:	f8a9 4018 	strh.w	r4, [r9, #24]
 80090d4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80090d8:	f8a9 5014 	strh.w	r5, [r9, #20]
 80090dc:	edc9 7a02 	vstr	s15, [r9, #8]
 80090e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090e4:	4623      	mov	r3, r4
 80090e6:	edc9 7a01 	vstr	s15, [r9, #4]
 80090ea:	f8a8 4006 	strh.w	r4, [r8, #6]
 80090ee:	f8a8 4010 	strh.w	r4, [r8, #16]
 80090f2:	9c06      	ldr	r4, [sp, #24]
 80090f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f6:	f8a8 000a 	strh.w	r0, [r8, #10]
 80090fa:	f8a8 0000 	strh.w	r0, [r8]
 80090fe:	f8a8 0004 	strh.w	r0, [r8, #4]
 8009102:	f8a8 5002 	strh.w	r5, [r8, #2]
 8009106:	2013      	movs	r0, #19
 8009108:	f8a8 5018 	strh.w	r5, [r8, #24]
 800910c:	f8a8 4008 	strh.w	r4, [r8, #8]
 8009110:	f8a8 4014 	strh.w	r4, [r8, #20]
 8009114:	f8a8 4016 	strh.w	r4, [r8, #22]
 8009118:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c
 800911c:	f7fe fd02 	bl	8007b24 <acc_probes_execute_uint16>
 8009120:	f000 fa6a 	bl	80095f8 <acc_sensor_r2_get_max_header_length>
 8009124:	f8bb 20b8 	ldrh.w	r2, [fp, #184]	; 0xb8
 8009128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800912c:	4410      	add	r0, r2
 800912e:	f8a8 000e 	strh.w	r0, [r8, #14]
 8009132:	f8a8 300c 	strh.w	r3, [r8, #12]
 8009136:	f7ff bbd4 	b.w	80088e2 <initialize+0x2e>
 800913a:	ab13      	add	r3, sp, #76	; 0x4c
 800913c:	4620      	mov	r0, r4
 800913e:	9309      	str	r3, [sp, #36]	; 0x24
 8009140:	f7fe fe64 	bl	8007e0c <acc_base_configuration_update_rate_get>
 8009144:	a912      	add	r1, sp, #72	; 0x48
 8009146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009148:	f000 f9ea 	bl	8009520 <acc_radar_engine_common_frequency_to_main_clk>
 800914c:	2301      	movs	r3, #1
 800914e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009150:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8009154:	2100      	movs	r1, #0
 8009156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009158:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 800915c:	e9cb 120a 	strd	r1, r2, [fp, #40]	; 0x28
 8009160:	e6fe      	b.n	8008f60 <initialize+0x6ac>
 8009162:	2300      	movs	r3, #0
 8009164:	e9cb 330b 	strd	r3, r3, [fp, #44]	; 0x2c
 8009168:	2201      	movs	r2, #1
 800916a:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800916e:	ab13      	add	r3, sp, #76	; 0x4c
 8009170:	f8cb 2028 	str.w	r2, [fp, #40]	; 0x28
 8009174:	9309      	str	r3, [sp, #36]	; 0x24
 8009176:	e6f3      	b.n	8008f60 <initialize+0x6ac>
 8009178:	2300      	movs	r3, #0
 800917a:	e9cb 3309 	strd	r3, r3, [fp, #36]	; 0x24
 800917e:	e9cb 330b 	strd	r3, r3, [fp, #44]	; 0x2c
 8009182:	ab13      	add	r3, sp, #76	; 0x4c
 8009184:	9309      	str	r3, [sp, #36]	; 0x24
 8009186:	e6eb      	b.n	8008f60 <initialize+0x6ac>
 8009188:	2301      	movs	r3, #1
 800918a:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 800918e:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8009192:	e709      	b.n	8008fa8 <initialize+0x6f4>
 8009194:	2300      	movs	r3, #0
 8009196:	e9cb 330d 	strd	r3, r3, [fp, #52]	; 0x34
 800919a:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800919e:	e703      	b.n	8008fa8 <initialize+0x6f4>
 80091a0:	2300      	movs	r3, #0
 80091a2:	2201      	movs	r2, #1
 80091a4:	e9cb 230d 	strd	r2, r3, [fp, #52]	; 0x34
 80091a8:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 80091ac:	e6fc      	b.n	8008fa8 <initialize+0x6f4>
 80091ae:	2300      	movs	r3, #0
 80091b0:	e4c8      	b.n	8008b44 <initialize+0x290>
 80091b2:	4bb1      	ldr	r3, [pc, #708]	; (8009478 <initialize+0xbc4>)
 80091b4:	4ab1      	ldr	r2, [pc, #708]	; (800947c <initialize+0xbc8>)
 80091b6:	f7ff bb8e 	b.w	80088d6 <initialize+0x22>
 80091ba:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 80091be:	e4d2      	b.n	8008b66 <initialize+0x2b2>
 80091c0:	ee07 6a90 	vmov	s15, r6
 80091c4:	4bac      	ldr	r3, [pc, #688]	; (8009478 <initialize+0xbc4>)
 80091c6:	9106      	str	r1, [sp, #24]
 80091c8:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 80091cc:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80091ce:	eddf 9aac 	vldr	s19, [pc, #688]	; 8009480 <initialize+0xbcc>
 80091d2:	ed9f aaab 	vldr	s20, [pc, #684]	; 8009480 <initialize+0xbcc>
 80091d6:	f7ff fb5b 	bl	8008890 <get_dt>
 80091da:	ee29 7a00 	vmul.f32	s14, s18, s0
 80091de:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80091e2:	ee27 7a29 	vmul.f32	s14, s14, s19
 80091e6:	4aa7      	ldr	r2, [pc, #668]	; (8009484 <initialize+0xbd0>)
 80091e8:	4ba7      	ldr	r3, [pc, #668]	; (8009488 <initialize+0xbd4>)
 80091ea:	ee27 7a28 	vmul.f32	s14, s14, s17
 80091ee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80091f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f6:	bf4c      	ite	mi
 80091f8:	4690      	movmi	r8, r2
 80091fa:	4698      	movpl	r8, r3
 80091fc:	f7ff fb48 	bl	8008890 <get_dt>
 8009200:	ee29 8a00 	vmul.f32	s16, s18, s0
 8009204:	f7ff fb44 	bl	8008890 <get_dt>
 8009208:	ee69 7a00 	vmul.f32	s15, s18, s0
 800920c:	ee28 8a29 	vmul.f32	s16, s16, s19
 8009210:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009214:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009218:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800921c:	9906      	ldr	r1, [sp, #24]
 800921e:	9106      	str	r1, [sp, #24]
 8009220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009228:	eddf 7a98 	vldr	s15, [pc, #608]	; 800948c <initialize+0xbd8>
 800922c:	eddf 9a94 	vldr	s19, [pc, #592]	; 8009480 <initialize+0xbcc>
 8009230:	bf48      	it	mi
 8009232:	eeb1 8a48 	vnegmi.f32	s16, s16
 8009236:	ee38 8a27 	vadd.f32	s16, s16, s15
 800923a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800923e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8009242:	ee17 6a90 	vmov	r6, s15
 8009246:	f7ff fb23 	bl	8008890 <get_dt>
 800924a:	ee29 8a00 	vmul.f32	s16, s18, s0
 800924e:	f7ff fb1f 	bl	8008890 <get_dt>
 8009252:	ee69 7a00 	vmul.f32	s15, s18, s0
 8009256:	ee28 8a29 	vmul.f32	s16, s16, s19
 800925a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800925e:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009262:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009266:	9906      	ldr	r1, [sp, #24]
 8009268:	9106      	str	r1, [sp, #24]
 800926a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800926e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009272:	bf48      	it	mi
 8009274:	eeb1 8a48 	vnegmi.f32	s16, s16
 8009278:	f7ff fb0a 	bl	8008890 <get_dt>
 800927c:	eddf 8a83 	vldr	s17, [pc, #524]	; 800948c <initialize+0xbd8>
 8009280:	ee78 8a28 	vadd.f32	s17, s16, s17
 8009284:	ee29 8a00 	vmul.f32	s16, s18, s0
 8009288:	f7ff fb02 	bl	8008890 <get_dt>
 800928c:	ee69 7a00 	vmul.f32	s15, s18, s0
 8009290:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8009294:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8009298:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800929c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80092a0:	ee28 8a29 	vmul.f32	s16, s16, s19
 80092a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ac:	eddf 7a77 	vldr	s15, [pc, #476]	; 800948c <initialize+0xbd8>
 80092b0:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8009490 <initialize+0xbdc>
 80092b4:	9906      	ldr	r1, [sp, #24]
 80092b6:	ed9f 9a72 	vldr	s18, [pc, #456]	; 8009480 <initialize+0xbcc>
 80092ba:	ed9f aa71 	vldr	s20, [pc, #452]	; 8009480 <initialize+0xbcc>
 80092be:	bf48      	it	mi
 80092c0:	eeb1 8a48 	vnegmi.f32	s16, s16
 80092c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80092c8:	ee06 1a90 	vmov	s13, r1
 80092cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d0:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 80092d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d8:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80092dc:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80092e0:	ee68 8a87 	vmul.f32	s17, s17, s14
 80092e4:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80092e8:	ee17 4a90 	vmov	r4, s15
 80092ec:	f7ff fad0 	bl	8008890 <get_dt>
 80092f0:	ee68 7a00 	vmul.f32	s15, s16, s0
 80092f4:	4b63      	ldr	r3, [pc, #396]	; (8009484 <initialize+0xbd0>)
 80092f6:	4a64      	ldr	r2, [pc, #400]	; (8009488 <initialize+0xbd4>)
 80092f8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80092fc:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009308:	bf4c      	ite	mi
 800930a:	4699      	movmi	r9, r3
 800930c:	4691      	movpl	r9, r2
 800930e:	f7ff fabf 	bl	8008890 <get_dt>
 8009312:	ee68 8a00 	vmul.f32	s17, s16, s0
 8009316:	f7ff fabb 	bl	8008890 <get_dt>
 800931a:	ee68 7a00 	vmul.f32	s15, s16, s0
 800931e:	ee68 8a89 	vmul.f32	s17, s17, s18
 8009322:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009326:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800932a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800932e:	eddf 9a54 	vldr	s19, [pc, #336]	; 8009480 <initialize+0xbcc>
 8009332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933a:	eddf 7a54 	vldr	s15, [pc, #336]	; 800948c <initialize+0xbd8>
 800933e:	bf48      	it	mi
 8009340:	eef1 8a68 	vnegmi.f32	s17, s17
 8009344:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8009348:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800934c:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8009350:	ee17 5a90 	vmov	r5, s15
 8009354:	f7ff fa9c 	bl	8008890 <get_dt>
 8009358:	ee68 8a00 	vmul.f32	s17, s16, s0
 800935c:	f7ff fa98 	bl	8008890 <get_dt>
 8009360:	ee68 7a00 	vmul.f32	s15, s16, s0
 8009364:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8009368:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800936c:	ee68 8a89 	vmul.f32	s17, s17, s18
 8009370:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009374:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8009378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800937c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009380:	eddf 7a42 	vldr	s15, [pc, #264]	; 800948c <initialize+0xbd8>
 8009384:	bf48      	it	mi
 8009386:	eef1 8a68 	vnegmi.f32	s17, s17
 800938a:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800938e:	f7ff fa7f 	bl	8008890 <get_dt>
 8009392:	ee28 9a00 	vmul.f32	s18, s16, s0
 8009396:	f7ff fa7b 	bl	8008890 <get_dt>
 800939a:	ee68 7a00 	vmul.f32	s15, s16, s0
 800939e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80093a2:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80093a6:	ee29 9a29 	vmul.f32	s18, s18, s19
 80093aa:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80093ae:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009490 <initialize+0xbdc>
 80093b2:	4a38      	ldr	r2, [pc, #224]	; (8009494 <initialize+0xbe0>)
 80093b4:	9503      	str	r5, [sp, #12]
 80093b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093be:	eddf 7a33 	vldr	s15, [pc, #204]	; 800948c <initialize+0xbd8>
 80093c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80093c6:	bf48      	it	mi
 80093c8:	eeb1 9a49 	vnegmi.f32	s18, s18
 80093cc:	ee79 7a27 	vadd.f32	s15, s18, s15
 80093d0:	9401      	str	r4, [sp, #4]
 80093d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093d6:	9600      	str	r6, [sp, #0]
 80093d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093dc:	4643      	mov	r3, r8
 80093de:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80093e2:	ee68 8a87 	vmul.f32	s17, s17, s14
 80093e6:	e5a0      	b.n	8008f2a <initialize+0x676>
 80093e8:	4b23      	ldr	r3, [pc, #140]	; (8009478 <initialize+0xbc4>)
 80093ea:	4a2b      	ldr	r2, [pc, #172]	; (8009498 <initialize+0xbe4>)
 80093ec:	f7ff ba73 	b.w	80088d6 <initialize+0x22>
 80093f0:	2201      	movs	r2, #1
 80093f2:	232e      	movs	r3, #46	; 0x2e
 80093f4:	f88b 2070 	strb.w	r2, [fp, #112]	; 0x70
 80093f8:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
 80093fc:	e465      	b.n	8008cca <initialize+0x416>
 80093fe:	f8cb 0084 	str.w	r0, [fp, #132]	; 0x84
 8009402:	4620      	mov	r0, r4
 8009404:	f7fe fc8c 	bl	8007d20 <acc_base_configuration_tx_disable_get>
 8009408:	f080 0001 	eor.w	r0, r0, #1
 800940c:	b2c3      	uxtb	r3, r0
 800940e:	e5e2      	b.n	8008fd6 <initialize+0x722>
 8009410:	4573      	cmp	r3, lr
 8009412:	d01d      	beq.n	8009450 <initialize+0xb9c>
 8009414:	2200      	movs	r2, #0
 8009416:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 800941a:	2200      	movs	r2, #0
 800941c:	fa1f fa80 	uxth.w	sl, r0
 8009420:	920f      	str	r2, [sp, #60]	; 0x3c
 8009422:	2101      	movs	r1, #1
 8009424:	ebaa 0203 	sub.w	r2, sl, r3
 8009428:	910e      	str	r1, [sp, #56]	; 0x38
 800942a:	9908      	ldr	r1, [sp, #32]
 800942c:	fb92 f2f1 	sdiv	r2, r2, r1
 8009430:	fa1f fa82 	uxth.w	sl, r2
 8009434:	e411      	b.n	8008c5a <initialize+0x3a6>
 8009436:	920f      	str	r2, [sp, #60]	; 0x3c
 8009438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943a:	2a00      	cmp	r2, #0
 800943c:	bfd4      	ite	le
 800943e:	2200      	movle	r2, #0
 8009440:	2201      	movgt	r2, #1
 8009442:	920a      	str	r2, [sp, #40]	; 0x28
 8009444:	e7ed      	b.n	8009422 <initialize+0xb6e>
 8009446:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800944a:	f083 0301 	eor.w	r3, r3, #1
 800944e:	e5c2      	b.n	8008fd6 <initialize+0x722>
 8009450:	4282      	cmp	r2, r0
 8009452:	bf0c      	ite	eq
 8009454:	2201      	moveq	r2, #1
 8009456:	2200      	movne	r2, #0
 8009458:	9209      	str	r2, [sp, #36]	; 0x24
 800945a:	d106      	bne.n	800946a <initialize+0xbb6>
 800945c:	f04f 0a00 	mov.w	sl, #0
 8009460:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
 8009464:	920a      	str	r2, [sp, #40]	; 0x28
 8009466:	f7ff bbf8 	b.w	8008c5a <initialize+0x3a6>
 800946a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800946c:	2a00      	cmp	r2, #0
 800946e:	bfd4      	ite	le
 8009470:	2200      	movle	r2, #0
 8009472:	2201      	movgt	r2, #1
 8009474:	920a      	str	r2, [sp, #40]	; 0x28
 8009476:	e7d0      	b.n	800941a <initialize+0xb66>
 8009478:	200007ec 	.word	0x200007ec
 800947c:	08011c5c 	.word	0x08011c5c
 8009480:	4d8ef3c2 	.word	0x4d8ef3c2
 8009484:	08011ad0 	.word	0x08011ad0
 8009488:	08012bb0 	.word	0x08012bb0
 800948c:	350637bd 	.word	0x350637bd
 8009490:	49742400 	.word	0x49742400
 8009494:	08011b38 	.word	0x08011b38
 8009498:	08011c18 	.word	0x08011c18

0800949c <acc_radar_engine_sparse_create>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4a11      	ldr	r2, [pc, #68]	; (80094e4 <acc_radar_engine_sparse_create+0x48>)
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80094a8:	21bc      	movs	r1, #188	; 0xbc
 80094aa:	2001      	movs	r0, #1
 80094ac:	f7fe fb02 	bl	8007ab4 <acc_rss_integration_mem_calloc_debug>
 80094b0:	6160      	str	r0, [r4, #20]
 80094b2:	b1a8      	cbz	r0, 80094e0 <acc_radar_engine_sparse_create+0x44>
 80094b4:	4628      	mov	r0, r5
 80094b6:	f7fe fbb7 	bl	8007c28 <acc_base_configuration_sensor_get>
 80094ba:	6020      	str	r0, [r4, #0]
 80094bc:	4628      	mov	r0, r5
 80094be:	f7fe fdf3 	bl	80080a8 <acc_base_configuration_asynchronous_measurement_get>
 80094c2:	73a0      	strb	r0, [r4, #14]
 80094c4:	4628      	mov	r0, r5
 80094c6:	f7fe fc15 	bl	8007cf4 <acc_base_configuration_power_save_mode_get>
 80094ca:	fab0 f080 	clz	r0, r0
 80094ce:	0940      	lsrs	r0, r0, #5
 80094d0:	73e0      	strb	r0, [r4, #15]
 80094d2:	4628      	mov	r0, r5
 80094d4:	f000 f80a 	bl	80094ec <acc_radar_engine_common_get_timeout_ms>
 80094d8:	4b03      	ldr	r3, [pc, #12]	; (80094e8 <acc_radar_engine_sparse_create+0x4c>)
 80094da:	6120      	str	r0, [r4, #16]
 80094dc:	61a3      	str	r3, [r4, #24]
 80094de:	2001      	movs	r0, #1
 80094e0:	bd38      	pop	{r3, r4, r5, pc}
 80094e2:	bf00      	nop
 80094e4:	08011a38 	.word	0x08011a38
 80094e8:	08011ca4 	.word	0x08011ca4

080094ec <acc_radar_engine_common_get_timeout_ms>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	4604      	mov	r4, r0
 80094f0:	f7fe fc82 	bl	8007df8 <acc_base_configuration_repetition_mode_get>
 80094f4:	2801      	cmp	r0, #1
 80094f6:	d00d      	beq.n	8009514 <acc_radar_engine_common_get_timeout_ms+0x28>
 80094f8:	4620      	mov	r0, r4
 80094fa:	f7fe fc87 	bl	8007e0c <acc_base_configuration_update_rate_get>
 80094fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800951c <acc_radar_engine_common_get_timeout_ms+0x30>
 8009502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800950a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950e:	ee17 0a90 	vmov	r0, s15
 8009512:	bd10      	pop	{r4, pc}
 8009514:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009518:	bd10      	pop	{r4, pc}
 800951a:	bf00      	nop
 800951c:	44fa0000 	.word	0x44fa0000

08009520 <acc_radar_engine_common_frequency_to_main_clk>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	ed2d 8b02 	vpush	{d8}
 8009526:	4604      	mov	r4, r0
 8009528:	eeb0 8a40 	vmov.f32	s16, s0
 800952c:	460d      	mov	r5, r1
 800952e:	f7fe fa41 	bl	80079b4 <acc_rss_integration_get_sensor_reference_frequency>
 8009532:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8009536:	ecbd 8b02 	vpop	{d8}
 800953a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800953e:	ee17 3a90 	vmov	r3, s15
 8009542:	0c1a      	lsrs	r2, r3, #16
 8009544:	b29b      	uxth	r3, r3
 8009546:	602a      	str	r2, [r5, #0]
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}

0800954c <internal_buffer_processed_read>:
 800954c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009550:	b085      	sub	sp, #20
 8009552:	461f      	mov	r7, r3
 8009554:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8009558:	9101      	str	r1, [sp, #4]
 800955a:	4682      	mov	sl, r0
 800955c:	4689      	mov	r9, r1
 800955e:	4615      	mov	r5, r2
 8009560:	f7fe fa2e 	bl	80079c0 <acc_rss_integration_get_max_spi_transfer_size>
 8009564:	2300      	movs	r3, #0
 8009566:	f8ad 300c 	strh.w	r3, [sp, #12]
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	2f00      	cmp	r7, #0
 800956e:	d03d      	beq.n	80095ec <internal_buffer_processed_read+0xa0>
 8009570:	429c      	cmp	r4, r3
 8009572:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009576:	bf14      	ite	ne
 8009578:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 800957c:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8009580:	f1a0 0803 	sub.w	r8, r0, #3
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	fa0f fb8b 	sxth.w	fp, fp
 800958a:	e024      	b.n	80095d6 <internal_buffer_processed_read+0x8a>
 800958c:	b2a6      	uxth	r6, r4
 800958e:	9900      	ldr	r1, [sp, #0]
 8009590:	f8a9 1004 	strh.w	r1, [r9, #4]
 8009594:	1e72      	subs	r2, r6, #1
 8009596:	ea4b 0305 	orr.w	r3, fp, r5
 800959a:	f8a9 2002 	strh.w	r2, [r9, #2]
 800959e:	f8a9 3000 	strh.w	r3, [r9]
 80095a2:	4649      	mov	r1, r9
 80095a4:	2301      	movs	r3, #1
 80095a6:	4650      	mov	r0, sl
 80095a8:	1ce2      	adds	r2, r4, #3
 80095aa:	f7fe fa39 	bl	8007a20 <acc_rss_integration_sensor_device_transfer>
 80095ae:	9802      	ldr	r0, [sp, #8]
 80095b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80095b4:	f8c9 0000 	str.w	r0, [r9]
 80095b8:	f8a9 3004 	strh.w	r3, [r9, #4]
 80095bc:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 80095c0:	442e      	add	r6, r5
 80095c2:	f8d9 0000 	ldr.w	r0, [r9]
 80095c6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80095ca:	9002      	str	r0, [sp, #8]
 80095cc:	1b3f      	subs	r7, r7, r4
 80095ce:	b2b5      	uxth	r5, r6
 80095d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80095d4:	d00a      	beq.n	80095ec <internal_buffer_processed_read+0xa0>
 80095d6:	45b8      	cmp	r8, r7
 80095d8:	4644      	mov	r4, r8
 80095da:	bf28      	it	cs
 80095dc:	463c      	movcs	r4, r7
 80095de:	45b8      	cmp	r8, r7
 80095e0:	d2d4      	bcs.n	800958c <internal_buffer_processed_read+0x40>
 80095e2:	e000      	b.n	80095e6 <internal_buffer_processed_read+0x9a>
 80095e4:	3c01      	subs	r4, #1
 80095e6:	07e3      	lsls	r3, r4, #31
 80095e8:	d4fc      	bmi.n	80095e4 <internal_buffer_processed_read+0x98>
 80095ea:	e7cf      	b.n	800958c <internal_buffer_processed_read+0x40>
 80095ec:	9801      	ldr	r0, [sp, #4]
 80095ee:	3006      	adds	r0, #6
 80095f0:	b005      	add	sp, #20
 80095f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f6:	bf00      	nop

080095f8 <acc_sensor_r2_get_max_header_length>:
 80095f8:	2003      	movs	r0, #3
 80095fa:	4770      	bx	lr

080095fc <acc_sensor_r2_conf_write_instr>:
 80095fc:	b510      	push	{r4, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 8009604:	4604      	mov	r4, r0
 8009606:	9201      	str	r2, [sp, #4]
 8009608:	f10d 010a 	add.w	r1, sp, #10
 800960c:	a801      	add	r0, sp, #4
 800960e:	2201      	movs	r2, #1
 8009610:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009614:	f7fe fad6 	bl	8007bc4 <acc_utils_uint32_to_transfer_buffer>
 8009618:	4620      	mov	r0, r4
 800961a:	a902      	add	r1, sp, #8
 800961c:	2300      	movs	r3, #0
 800961e:	2203      	movs	r2, #3
 8009620:	f7fe f9fe 	bl	8007a20 <acc_rss_integration_sensor_device_transfer>
 8009624:	b004      	add	sp, #16
 8009626:	bd10      	pop	{r4, pc}

08009628 <acc_sensor_r2_prepare_load_confmem>:
 8009628:	0849      	lsrs	r1, r1, #1
 800962a:	b538      	push	{r3, r4, r5, lr}
 800962c:	6010      	str	r0, [r2, #0]
 800962e:	461c      	mov	r4, r3
 8009630:	6019      	str	r1, [r3, #0]
 8009632:	4615      	mov	r5, r2
 8009634:	f7fe f9c4 	bl	80079c0 <acc_rss_integration_get_max_spi_transfer_size>
 8009638:	6821      	ldr	r1, [r4, #0]
 800963a:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800963e:	d807      	bhi.n	8009650 <acc_sensor_r2_prepare_load_confmem+0x28>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	3901      	subs	r1, #1
 8009644:	f021 0101 	bic.w	r1, r1, #1
 8009648:	3302      	adds	r3, #2
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	6021      	str	r1, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	f7fe f9b6 	bl	80079c0 <acc_rss_integration_get_max_spi_transfer_size>
 8009654:	0841      	lsrs	r1, r0, #1
 8009656:	e7f3      	b.n	8009640 <acc_sensor_r2_prepare_load_confmem+0x18>

08009658 <acc_sensor_r2_load_confmem>:
 8009658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800965c:	b083      	sub	sp, #12
 800965e:	1c5d      	adds	r5, r3, #1
 8009660:	4606      	mov	r6, r0
 8009662:	460c      	mov	r4, r1
 8009664:	4617      	mov	r7, r2
 8009666:	f7fe fa57 	bl	8007b18 <acc_rss_integration_log_level>
 800966a:	2803      	cmp	r0, #3
 800966c:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8009670:	d908      	bls.n	8009684 <acc_sensor_r2_load_confmem+0x2c>
 8009672:	4b11      	ldr	r3, [pc, #68]	; (80096b8 <acc_sensor_r2_load_confmem+0x60>)
 8009674:	9400      	str	r4, [sp, #0]
 8009676:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800967a:	4a10      	ldr	r2, [pc, #64]	; (80096bc <acc_sensor_r2_load_confmem+0x64>)
 800967c:	4910      	ldr	r1, [pc, #64]	; (80096c0 <acc_sensor_r2_load_confmem+0x68>)
 800967e:	4633      	mov	r3, r6
 8009680:	2004      	movs	r0, #4
 8009682:	47c8      	blx	r9
 8009684:	f7fe f99c 	bl	80079c0 <acc_rss_integration_get_max_spi_transfer_size>
 8009688:	4540      	cmp	r0, r8
 800968a:	d208      	bcs.n	800969e <acc_sensor_r2_load_confmem+0x46>
 800968c:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <acc_sensor_r2_load_confmem+0x60>)
 800968e:	4a0d      	ldr	r2, [pc, #52]	; (80096c4 <acc_sensor_r2_load_confmem+0x6c>)
 8009690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009692:	490b      	ldr	r1, [pc, #44]	; (80096c0 <acc_sensor_r2_load_confmem+0x68>)
 8009694:	2000      	movs	r0, #0
 8009696:	b003      	add	sp, #12
 8009698:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800969c:	4718      	bx	r3
 800969e:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 80096a2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80096a6:	4639      	mov	r1, r7
 80096a8:	4630      	mov	r0, r6
 80096aa:	2300      	movs	r3, #0
 80096ac:	803c      	strh	r4, [r7, #0]
 80096ae:	b003      	add	sp, #12
 80096b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096b4:	f7fe b9b4 	b.w	8007a20 <acc_rss_integration_sensor_device_transfer>
 80096b8:	200007ec 	.word	0x200007ec
 80096bc:	08011cd8 	.word	0x08011cd8
 80096c0:	08011cc8 	.word	0x08011cc8
 80096c4:	08011d00 	.word	0x08011d00

080096c8 <acc_sensor_r2_buffer_processed_verify_size>:
 80096c8:	3103      	adds	r1, #3
 80096ca:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 80096ce:	bf2c      	ite	cs
 80096d0:	2001      	movcs	r0, #1
 80096d2:	2000      	movcc	r0, #0
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop

080096d8 <acc_sensor_r2_buffer_processed_read>:
 80096d8:	b510      	push	{r4, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	2400      	movs	r4, #0
 80096de:	9400      	str	r4, [sp, #0]
 80096e0:	f7ff ff34 	bl	800954c <internal_buffer_processed_read>
 80096e4:	b002      	add	sp, #8
 80096e6:	bd10      	pop	{r4, pc}

080096e8 <acc_sensor_manager_power_on_and_start_sensor>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	6986      	ldr	r6, [r0, #24]
 80096ec:	4604      	mov	r4, r0
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7fe f96c 	bl	80079cc <acc_rss_integration_sensor_device_power_on>
 80096f4:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 80096f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	3b48      	subs	r3, #72	; 0x48
 8009702:	4419      	add	r1, r3
 8009704:	1d20      	adds	r0, r4, #4
 8009706:	f000 fe03 	bl	800a310 <acc_sweep_manager_start>
 800970a:	4605      	mov	r5, r0
 800970c:	b118      	cbz	r0, 8009716 <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 800970e:	2301      	movs	r3, #1
 8009710:	70e3      	strb	r3, [r4, #3]
 8009712:	4628      	mov	r0, r5
 8009714:	bd70      	pop	{r4, r5, r6, pc}
 8009716:	4630      	mov	r0, r6
 8009718:	f7fe f95e 	bl	80079d8 <acc_rss_integration_sensor_device_power_off>
 800971c:	4628      	mov	r0, r5
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	200007d4 	.word	0x200007d4

08009724 <calibrate_sensor>:
 8009724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80097f8 <calibrate_sensor+0xd4>
 800972c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80097fc <calibrate_sensor+0xd8>
 8009730:	f8d8 3000 	ldr.w	r3, [r8]
 8009734:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 8009738:	00e4      	lsls	r4, r4, #3
 800973a:	3c48      	subs	r4, #72	; 0x48
 800973c:	4423      	add	r3, r4
 800973e:	f04f 0900 	mov.w	r9, #0
 8009742:	b085      	sub	sp, #20
 8009744:	460e      	mov	r6, r1
 8009746:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 800974a:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 800974e:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8009752:	4607      	mov	r7, r0
 8009754:	4692      	mov	sl, r2
 8009756:	f7fe f939 	bl	80079cc <acc_rss_integration_sensor_device_power_on>
 800975a:	4630      	mov	r0, r6
 800975c:	f000 fdb4 	bl	800a2c8 <acc_sweep_manager_is_sensor_connected>
 8009760:	b968      	cbnz	r0, 800977e <calibrate_sensor+0x5a>
 8009762:	4b21      	ldr	r3, [pc, #132]	; (80097e8 <calibrate_sensor+0xc4>)
 8009764:	4a21      	ldr	r2, [pc, #132]	; (80097ec <calibrate_sensor+0xc8>)
 8009766:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009768:	4921      	ldr	r1, [pc, #132]	; (80097f0 <calibrate_sensor+0xcc>)
 800976a:	463b      	mov	r3, r7
 800976c:	4605      	mov	r5, r0
 800976e:	47a0      	blx	r4
 8009770:	4638      	mov	r0, r7
 8009772:	f7fe f931 	bl	80079d8 <acc_rss_integration_sensor_device_power_off>
 8009776:	4628      	mov	r0, r5
 8009778:	b005      	add	sp, #20
 800977a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977e:	4639      	mov	r1, r7
 8009780:	200b      	movs	r0, #11
 8009782:	f7fe f9ff 	bl	8007b84 <acc_probes_execute_primitive_probe>
 8009786:	f8d8 2000 	ldr.w	r2, [r8]
 800978a:	f8cd 9004 	str.w	r9, [sp, #4]
 800978e:	4651      	mov	r1, sl
 8009790:	4630      	mov	r0, r6
 8009792:	4422      	add	r2, r4
 8009794:	ab01      	add	r3, sp, #4
 8009796:	f8cd b008 	str.w	fp, [sp, #8]
 800979a:	f8cd 900c 	str.w	r9, [sp, #12]
 800979e:	f000 fd97 	bl	800a2d0 <acc_sweep_manager_calibrate>
 80097a2:	4605      	mov	r5, r0
 80097a4:	b9c8      	cbnz	r0, 80097da <calibrate_sensor+0xb6>
 80097a6:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <calibrate_sensor+0xc4>)
 80097a8:	4a12      	ldr	r2, [pc, #72]	; (80097f4 <calibrate_sensor+0xd0>)
 80097aa:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80097ac:	4910      	ldr	r1, [pc, #64]	; (80097f0 <calibrate_sensor+0xcc>)
 80097ae:	463b      	mov	r3, r7
 80097b0:	47b0      	blx	r6
 80097b2:	f8d8 3000 	ldr.w	r3, [r8]
 80097b6:	441c      	add	r4, r3
 80097b8:	9a02      	ldr	r2, [sp, #8]
 80097ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80097be:	6462      	str	r2, [r4, #68]	; 0x44
 80097c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097c4:	4639      	mov	r1, r7
 80097c6:	200c      	movs	r0, #12
 80097c8:	f7fe f9dc 	bl	8007b84 <acc_probes_execute_primitive_probe>
 80097cc:	4638      	mov	r0, r7
 80097ce:	f7fe f903 	bl	80079d8 <acc_rss_integration_sensor_device_power_off>
 80097d2:	4628      	mov	r0, r5
 80097d4:	b005      	add	sp, #20
 80097d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097da:	f8d8 3000 	ldr.w	r3, [r8]
 80097de:	441c      	add	r4, r3
 80097e0:	2301      	movs	r3, #1
 80097e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80097e6:	e7e7      	b.n	80097b8 <calibrate_sensor+0x94>
 80097e8:	200007ec 	.word	0x200007ec
 80097ec:	08011d20 	.word	0x08011d20
 80097f0:	08011d5c 	.word	0x08011d5c
 80097f4:	08011d6c 	.word	0x08011d6c
 80097f8:	200007d4 	.word	0x200007d4
 80097fc:	ff800000 	.word	0xff800000

08009800 <acc_sensor_manager_hibernate_enter>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4603      	mov	r3, r0
 8009804:	3004      	adds	r0, #4
 8009806:	699d      	ldr	r5, [r3, #24]
 8009808:	f000 fd9a 	bl	800a340 <acc_sweep_manager_wait_for_hibernate_ready>
 800980c:	4604      	mov	r4, r0
 800980e:	b930      	cbnz	r0, 800981e <acc_sensor_manager_hibernate_enter+0x1e>
 8009810:	4b05      	ldr	r3, [pc, #20]	; (8009828 <acc_sensor_manager_hibernate_enter+0x28>)
 8009812:	4a06      	ldr	r2, [pc, #24]	; (800982c <acc_sensor_manager_hibernate_enter+0x2c>)
 8009814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009816:	4906      	ldr	r1, [pc, #24]	; (8009830 <acc_sensor_manager_hibernate_enter+0x30>)
 8009818:	4798      	blx	r3
 800981a:	4620      	mov	r0, r4
 800981c:	bd38      	pop	{r3, r4, r5, pc}
 800981e:	4628      	mov	r0, r5
 8009820:	f7fe f8e0 	bl	80079e4 <acc_rss_integration_sensor_device_hibernate_enter>
 8009824:	4620      	mov	r0, r4
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	200007ec 	.word	0x200007ec
 800982c:	08011d90 	.word	0x08011d90
 8009830:	08011d5c 	.word	0x08011d5c

08009834 <acc_sensor_manager_activate>:
 8009834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009838:	4e18      	ldr	r6, [pc, #96]	; (800989c <acc_sensor_manager_activate+0x68>)
 800983a:	7834      	ldrb	r4, [r6, #0]
 800983c:	b114      	cbz	r4, 8009844 <acc_sensor_manager_activate+0x10>
 800983e:	4620      	mov	r0, r4
 8009840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009844:	f7fe f8b0 	bl	80079a8 <acc_rss_integration_get_sensor_count>
 8009848:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800984c:	4914      	ldr	r1, [pc, #80]	; (80098a0 <acc_sensor_manager_activate+0x6c>)
 800984e:	4f15      	ldr	r7, [pc, #84]	; (80098a4 <acc_sensor_manager_activate+0x70>)
 8009850:	00c0      	lsls	r0, r0, #3
 8009852:	f240 1253 	movw	r2, #339	; 0x153
 8009856:	f7fe f909 	bl	8007a6c <acc_rss_integration_mem_alloc_debug>
 800985a:	6038      	str	r0, [r7, #0]
 800985c:	2800      	cmp	r0, #0
 800985e:	d0ee      	beq.n	800983e <acc_sensor_manager_activate+0xa>
 8009860:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80098a8 <acc_sensor_manager_activate+0x74>
 8009864:	4625      	mov	r5, r4
 8009866:	e00e      	b.n	8009886 <acc_sensor_manager_activate+0x52>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800986e:	4618      	mov	r0, r3
 8009870:	2248      	movs	r2, #72	; 0x48
 8009872:	2100      	movs	r1, #0
 8009874:	f002 fdb0 	bl	800c3d8 <memset>
 8009878:	3401      	adds	r4, #1
 800987a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800987e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8009882:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 8009886:	f7fe f88f 	bl	80079a8 <acc_rss_integration_get_sensor_count>
 800988a:	42a0      	cmp	r0, r4
 800988c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8009890:	d8ea      	bhi.n	8009868 <acc_sensor_manager_activate+0x34>
 8009892:	2401      	movs	r4, #1
 8009894:	7034      	strb	r4, [r6, #0]
 8009896:	4620      	mov	r0, r4
 8009898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989c:	200007cc 	.word	0x200007cc
 80098a0:	08011d5c 	.word	0x08011d5c
 80098a4:	200007d4 	.word	0x200007d4
 80098a8:	ff800000 	.word	0xff800000

080098ac <acc_sensor_manager_deactivate>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	4c05      	ldr	r4, [pc, #20]	; (80098c4 <acc_sensor_manager_deactivate+0x18>)
 80098b0:	7823      	ldrb	r3, [r4, #0]
 80098b2:	b903      	cbnz	r3, 80098b6 <acc_sensor_manager_deactivate+0xa>
 80098b4:	bd10      	pop	{r4, pc}
 80098b6:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <acc_sensor_manager_deactivate+0x1c>)
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	f7fe f91b 	bl	8007af4 <acc_rss_integration_mem_free>
 80098be:	2300      	movs	r3, #0
 80098c0:	7023      	strb	r3, [r4, #0]
 80098c2:	bd10      	pop	{r4, pc}
 80098c4:	200007cc 	.word	0x200007cc
 80098c8:	200007d4 	.word	0x200007d4

080098cc <acc_sensor_manager_acquire_adc_data>:
 80098cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d0:	7846      	ldrb	r6, [r0, #1]
 80098d2:	461c      	mov	r4, r3
 80098d4:	b13e      	cbz	r6, 80098e6 <acc_sensor_manager_acquire_adc_data+0x1a>
 80098d6:	2300      	movs	r3, #0
 80098d8:	7023      	strb	r3, [r4, #0]
 80098da:	7063      	strb	r3, [r4, #1]
 80098dc:	70a3      	strb	r3, [r4, #2]
 80098de:	70e3      	strb	r3, [r4, #3]
 80098e0:	4630      	mov	r0, r6
 80098e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e6:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80099e4 <acc_sensor_manager_acquire_adc_data+0x118>
 80098ea:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80098ee:	f8dc c000 	ldr.w	ip, [ip]
 80098f2:	4605      	mov	r5, r0
 80098f4:	4688      	mov	r8, r1
 80098f6:	4617      	mov	r7, r2
 80098f8:	f1bc 0f00 	cmp.w	ip, #0
 80098fc:	d014      	beq.n	8009928 <acc_sensor_manager_acquire_adc_data+0x5c>
 80098fe:	f8dc a00c 	ldr.w	sl, [ip, #12]
 8009902:	f1ba 0f00 	cmp.w	sl, #0
 8009906:	d00f      	beq.n	8009928 <acc_sensor_manager_acquire_adc_data+0x5c>
 8009908:	47d0      	blx	sl
 800990a:	2800      	cmp	r0, #0
 800990c:	d0e8      	beq.n	80098e0 <acc_sensor_manager_acquire_adc_data+0x14>
 800990e:	786e      	ldrb	r6, [r5, #1]
 8009910:	2e00      	cmp	r6, #0
 8009912:	d1e5      	bne.n	80098e0 <acc_sensor_manager_acquire_adc_data+0x14>
 8009914:	463b      	mov	r3, r7
 8009916:	4642      	mov	r2, r8
 8009918:	4649      	mov	r1, r9
 800991a:	2002      	movs	r0, #2
 800991c:	2601      	movs	r6, #1
 800991e:	f7fe f901 	bl	8007b24 <acc_probes_execute_uint16>
 8009922:	4630      	mov	r0, r6
 8009924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009928:	2300      	movs	r3, #0
 800992a:	7023      	strb	r3, [r4, #0]
 800992c:	7063      	strb	r3, [r4, #1]
 800992e:	70a3      	strb	r3, [r4, #2]
 8009930:	70e3      	strb	r3, [r4, #3]
 8009932:	f895 a000 	ldrb.w	sl, [r5]
 8009936:	f1ba 0f02 	cmp.w	sl, #2
 800993a:	d031      	beq.n	80099a0 <acc_sensor_manager_acquire_adc_data+0xd4>
 800993c:	f1ba 0f01 	cmp.w	sl, #1
 8009940:	d034      	beq.n	80099ac <acc_sensor_manager_acquire_adc_data+0xe0>
 8009942:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8009944:	1d28      	adds	r0, r5, #4
 8009946:	f000 fd03 	bl	800a350 <acc_sweep_manager_acquire_adc_data>
 800994a:	6843      	ldr	r3, [r0, #4]
 800994c:	b30b      	cbz	r3, 8009992 <acc_sensor_manager_acquire_adc_data+0xc6>
 800994e:	4543      	cmp	r3, r8
 8009950:	d13b      	bne.n	80099ca <acc_sensor_manager_acquire_adc_data+0xfe>
 8009952:	8843      	ldrh	r3, [r0, #2]
 8009954:	42bb      	cmp	r3, r7
 8009956:	d133      	bne.n	80099c0 <acc_sensor_manager_acquire_adc_data+0xf4>
 8009958:	4b1e      	ldr	r3, [pc, #120]	; (80099d4 <acc_sensor_manager_acquire_adc_data+0x108>)
 800995a:	68c1      	ldr	r1, [r0, #12]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	7a06      	ldrb	r6, [r0, #8]
 8009960:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	3b48      	subs	r3, #72	; 0x48
 8009968:	4413      	add	r3, r2
 800996a:	7802      	ldrb	r2, [r0, #0]
 800996c:	7022      	strb	r2, [r4, #0]
 800996e:	7842      	ldrb	r2, [r0, #1]
 8009970:	7062      	strb	r2, [r4, #1]
 8009972:	f1ba 0f02 	cmp.w	sl, #2
 8009976:	7a42      	ldrb	r2, [r0, #9]
 8009978:	70e2      	strb	r2, [r4, #3]
 800997a:	70a6      	strb	r6, [r4, #2]
 800997c:	6459      	str	r1, [r3, #68]	; 0x44
 800997e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009982:	d017      	beq.n	80099b4 <acc_sensor_manager_acquire_adc_data+0xe8>
 8009984:	f1ba 0f01 	cmp.w	sl, #1
 8009988:	d1c1      	bne.n	800990e <acc_sensor_manager_acquire_adc_data+0x42>
 800998a:	4628      	mov	r0, r5
 800998c:	f7ff ff38 	bl	8009800 <acc_sensor_manager_hibernate_enter>
 8009990:	e7bd      	b.n	800990e <acc_sensor_manager_acquire_adc_data+0x42>
 8009992:	4911      	ldr	r1, [pc, #68]	; (80099d8 <acc_sensor_manager_acquire_adc_data+0x10c>)
 8009994:	4a11      	ldr	r2, [pc, #68]	; (80099dc <acc_sensor_manager_acquire_adc_data+0x110>)
 8009996:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009998:	4911      	ldr	r1, [pc, #68]	; (80099e0 <acc_sensor_manager_acquire_adc_data+0x114>)
 800999a:	4618      	mov	r0, r3
 800999c:	47a0      	blx	r4
 800999e:	e79f      	b.n	80098e0 <acc_sensor_manager_acquire_adc_data+0x14>
 80099a0:	4628      	mov	r0, r5
 80099a2:	f7ff fea1 	bl	80096e8 <acc_sensor_manager_power_on_and_start_sensor>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d1cb      	bne.n	8009942 <acc_sensor_manager_acquire_adc_data+0x76>
 80099aa:	e799      	b.n	80098e0 <acc_sensor_manager_acquire_adc_data+0x14>
 80099ac:	4648      	mov	r0, r9
 80099ae:	f7fe f821 	bl	80079f4 <acc_rss_integration_sensor_device_hibernate_exit>
 80099b2:	e7c6      	b.n	8009942 <acc_sensor_manager_acquire_adc_data+0x76>
 80099b4:	4648      	mov	r0, r9
 80099b6:	f7fe f80f 	bl	80079d8 <acc_rss_integration_sensor_device_power_off>
 80099ba:	2300      	movs	r3, #0
 80099bc:	70eb      	strb	r3, [r5, #3]
 80099be:	e7a6      	b.n	800990e <acc_sensor_manager_acquire_adc_data+0x42>
 80099c0:	4807      	ldr	r0, [pc, #28]	; (80099e0 <acc_sensor_manager_acquire_adc_data+0x114>)
 80099c2:	f240 11c9 	movw	r1, #457	; 0x1c9
 80099c6:	f7fd ff8f 	bl	80078e8 <acc_assert_fail>
 80099ca:	4805      	ldr	r0, [pc, #20]	; (80099e0 <acc_sensor_manager_acquire_adc_data+0x114>)
 80099cc:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80099d0:	f7fd ff8a 	bl	80078e8 <acc_assert_fail>
 80099d4:	200007d4 	.word	0x200007d4
 80099d8:	200007ec 	.word	0x200007ec
 80099dc:	08011db0 	.word	0x08011db0
 80099e0:	08011d5c 	.word	0x08011d5c
 80099e4:	200007d0 	.word	0x200007d0

080099e8 <acc_sensor_manager_prepare_radar_engine>:
 80099e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ec:	f100 0804 	add.w	r8, r0, #4
 80099f0:	4617      	mov	r7, r2
 80099f2:	4605      	mov	r5, r0
 80099f4:	2234      	movs	r2, #52	; 0x34
 80099f6:	460c      	mov	r4, r1
 80099f8:	4640      	mov	r0, r8
 80099fa:	2100      	movs	r1, #0
 80099fc:	461e      	mov	r6, r3
 80099fe:	f002 fceb 	bl	800c3d8 <memset>
 8009a02:	4b1e      	ldr	r3, [pc, #120]	; (8009a7c <acc_sensor_manager_prepare_radar_engine+0x94>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	463a      	mov	r2, r7
 8009a08:	4640      	mov	r0, r8
 8009a0a:	b33b      	cbz	r3, 8009a5c <acc_sensor_manager_prepare_radar_engine+0x74>
 8009a0c:	f8d3 9000 	ldr.w	r9, [r3]
 8009a10:	f1b9 0f00 	cmp.w	r9, #0
 8009a14:	d022      	beq.n	8009a5c <acc_sensor_manager_prepare_radar_engine+0x74>
 8009a16:	4633      	mov	r3, r6
 8009a18:	4621      	mov	r1, r4
 8009a1a:	47c8      	blx	r9
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7fe f968 	bl	8007cf4 <acc_base_configuration_power_save_mode_get>
 8009a24:	b320      	cbz	r0, 8009a70 <acc_sensor_manager_prepare_radar_engine+0x88>
 8009a26:	2804      	cmp	r0, #4
 8009a28:	d025      	beq.n	8009a76 <acc_sensor_manager_prepare_radar_engine+0x8e>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	702b      	strb	r3, [r5, #0]
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f7fe f9e2 	bl	8007df8 <acc_base_configuration_repetition_mode_get>
 8009a34:	fab0 f280 	clz	r2, r0
 8009a38:	0952      	lsrs	r2, r2, #5
 8009a3a:	706a      	strb	r2, [r5, #1]
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f7fe fb33 	bl	80080a8 <acc_base_configuration_asynchronous_measurement_get>
 8009a42:	70a8      	strb	r0, [r5, #2]
 8009a44:	4620      	mov	r0, r4
 8009a46:	f7fe f8ef 	bl	8007c28 <acc_base_configuration_sensor_get>
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	231a      	movs	r3, #26
 8009a50:	2005      	movs	r0, #5
 8009a52:	f7fe f87f 	bl	8007b54 <acc_probes_execute_struct>
 8009a56:	4638      	mov	r0, r7
 8009a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5c:	4633      	mov	r3, r6
 8009a5e:	4621      	mov	r1, r4
 8009a60:	f000 fb90 	bl	800a184 <acc_sweep_manager_prepare>
 8009a64:	4607      	mov	r7, r0
 8009a66:	4620      	mov	r0, r4
 8009a68:	f7fe f944 	bl	8007cf4 <acc_base_configuration_power_save_mode_get>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d1da      	bne.n	8009a26 <acc_sensor_manager_prepare_radar_engine+0x3e>
 8009a70:	2302      	movs	r3, #2
 8009a72:	702b      	strb	r3, [r5, #0]
 8009a74:	e7db      	b.n	8009a2e <acc_sensor_manager_prepare_radar_engine+0x46>
 8009a76:	2301      	movs	r3, #1
 8009a78:	702b      	strb	r3, [r5, #0]
 8009a7a:	e7d8      	b.n	8009a2e <acc_sensor_manager_prepare_radar_engine+0x46>
 8009a7c:	200007d0 	.word	0x200007d0

08009a80 <acc_sensor_manager_prepare_measurement>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	4680      	mov	r8, r0
 8009a86:	b083      	sub	sp, #12
 8009a88:	4608      	mov	r0, r1
 8009a8a:	460e      	mov	r6, r1
 8009a8c:	4617      	mov	r7, r2
 8009a8e:	469a      	mov	sl, r3
 8009a90:	f7fe f8ca 	bl	8007c28 <acc_base_configuration_sensor_get>
 8009a94:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009b7c <acc_sensor_manager_prepare_measurement+0xfc>
 8009a98:	4605      	mov	r5, r0
 8009a9a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7fe faf6 	bl	8008090 <acc_base_configuration_noise_deviation_override_get>
 8009aa4:	00e4      	lsls	r4, r4, #3
 8009aa6:	f8d9 1000 	ldr.w	r1, [r9]
 8009aaa:	4b32      	ldr	r3, [pc, #200]	; (8009b74 <acc_sensor_manager_prepare_measurement+0xf4>)
 8009aac:	4a32      	ldr	r2, [pc, #200]	; (8009b78 <acc_sensor_manager_prepare_measurement+0xf8>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3c48      	subs	r4, #72	; 0x48
 8009ab2:	440c      	add	r4, r1
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4683      	mov	fp, r0
 8009ab8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009abc:	6462      	str	r2, [r4, #68]	; 0x44
 8009abe:	b163      	cbz	r3, 8009ada <acc_sensor_manager_prepare_measurement+0x5a>
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	b153      	cbz	r3, 8009ada <acc_sensor_manager_prepare_measurement+0x5a>
 8009ac4:	4652      	mov	r2, sl
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	4639      	mov	r1, r7
 8009aca:	4798      	blx	r3
 8009acc:	4604      	mov	r4, r0
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d14b      	bne.n	8009b6a <acc_sensor_manager_prepare_measurement+0xea>
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	b003      	add	sp, #12
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ada:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009ade:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 8009ae2:	b17b      	cbz	r3, 8009b04 <acc_sensor_manager_prepare_measurement+0x84>
 8009ae4:	f1bb 0f00 	cmp.w	fp, #0
 8009ae8:	d01b      	beq.n	8009b22 <acc_sensor_manager_prepare_measurement+0xa2>
 8009aea:	f8a7 b014 	strh.w	fp, [r7, #20]
 8009aee:	463a      	mov	r2, r7
 8009af0:	4629      	mov	r1, r5
 8009af2:	2320      	movs	r3, #32
 8009af4:	200e      	movs	r0, #14
 8009af6:	f7fe f82d 	bl	8007b54 <acc_probes_execute_struct>
 8009afa:	2401      	movs	r4, #1
 8009afc:	4620      	mov	r0, r4
 8009afe:	b003      	add	sp, #12
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	f108 0104 	add.w	r1, r8, #4
 8009b08:	4652      	mov	r2, sl
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	9101      	str	r1, [sp, #4]
 8009b0e:	f7ff fe09 	bl	8009724 <calibrate_sensor>
 8009b12:	9901      	ldr	r1, [sp, #4]
 8009b14:	4604      	mov	r4, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d1e4      	bne.n	8009ae4 <acc_sensor_manager_prepare_measurement+0x64>
 8009b1a:	4608      	mov	r0, r1
 8009b1c:	f000 fbcc 	bl	800a2b8 <acc_sweep_manager_release>
 8009b20:	e7d7      	b.n	8009ad2 <acc_sensor_manager_prepare_measurement+0x52>
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7fe fa9c 	bl	8008060 <acc_base_configuration_noise_level_normalization_get>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d0e0      	beq.n	8009aee <acc_sensor_manager_prepare_measurement+0x6e>
 8009b2c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7fd ff4b 	bl	80079cc <acc_rss_integration_sensor_device_power_on>
 8009b36:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8009b3a:	f8d9 1000 	ldr.w	r1, [r9]
 8009b3e:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	3b48      	subs	r3, #72	; 0x48
 8009b46:	f108 0804 	add.w	r8, r8, #4
 8009b4a:	4419      	add	r1, r3
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	f107 0314 	add.w	r3, r7, #20
 8009b52:	f000 fbc7 	bl	800a2e4 <acc_sweep_manager_measure_noise>
 8009b56:	4604      	mov	r4, r0
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f7fd ff3d 	bl	80079d8 <acc_rss_integration_sensor_device_power_off>
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d1c5      	bne.n	8009aee <acc_sensor_manager_prepare_measurement+0x6e>
 8009b62:	4640      	mov	r0, r8
 8009b64:	f000 fba8 	bl	800a2b8 <acc_sweep_manager_release>
 8009b68:	e7b3      	b.n	8009ad2 <acc_sensor_manager_prepare_measurement+0x52>
 8009b6a:	f1bb 0f00 	cmp.w	fp, #0
 8009b6e:	d0be      	beq.n	8009aee <acc_sensor_manager_prepare_measurement+0x6e>
 8009b70:	e7bb      	b.n	8009aea <acc_sensor_manager_prepare_measurement+0x6a>
 8009b72:	bf00      	nop
 8009b74:	200007d0 	.word	0x200007d0
 8009b78:	ff800000 	.word	0xff800000
 8009b7c:	200007d4 	.word	0x200007d4

08009b80 <acc_sensor_manager_start_measurement>:
 8009b80:	4b1b      	ldr	r3, [pc, #108]	; (8009bf0 <acc_sensor_manager_start_measurement+0x70>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	4604      	mov	r4, r0
 8009b88:	b123      	cbz	r3, 8009b94 <acc_sensor_manager_start_measurement+0x14>
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	b113      	cbz	r3, 8009b94 <acc_sensor_manager_start_measurement+0x14>
 8009b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b92:	4718      	bx	r3
 8009b94:	7823      	ldrb	r3, [r4, #0]
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d008      	beq.n	8009bac <acc_sensor_manager_start_measurement+0x2c>
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7ff fda4 	bl	80096e8 <acc_sensor_manager_power_on_and_start_sensor>
 8009ba0:	b160      	cbz	r0, 8009bbc <acc_sensor_manager_start_measurement+0x3c>
 8009ba2:	78a3      	ldrb	r3, [r4, #2]
 8009ba4:	b12b      	cbz	r3, 8009bb2 <acc_sensor_manager_start_measurement+0x32>
 8009ba6:	7823      	ldrb	r3, [r4, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d010      	beq.n	8009bce <acc_sensor_manager_start_measurement+0x4e>
 8009bac:	2501      	movs	r5, #1
 8009bae:	4628      	mov	r0, r5
 8009bb0:	bd70      	pop	{r4, r5, r6, pc}
 8009bb2:	1d25      	adds	r5, r4, #4
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 fbc7 	bl	800a348 <acc_sweep_manager_measure>
 8009bba:	b910      	cbnz	r0, 8009bc2 <acc_sensor_manager_start_measurement+0x42>
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	bd70      	pop	{r4, r5, r6, pc}
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 fbb6 	bl	800a334 <acc_sweep_manager_wait_for_data>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d1ec      	bne.n	8009ba6 <acc_sensor_manager_start_measurement+0x26>
 8009bcc:	e7f6      	b.n	8009bbc <acc_sensor_manager_start_measurement+0x3c>
 8009bce:	1d25      	adds	r5, r4, #4
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f000 fbaf 	bl	800a334 <acc_sweep_manager_wait_for_data>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d0f0      	beq.n	8009bbc <acc_sensor_manager_start_measurement+0x3c>
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f000 fbb4 	bl	800a348 <acc_sweep_manager_measure>
 8009be0:	4605      	mov	r5, r0
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d0ea      	beq.n	8009bbc <acc_sensor_manager_start_measurement+0x3c>
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7ff fe0a 	bl	8009800 <acc_sensor_manager_hibernate_enter>
 8009bec:	e7df      	b.n	8009bae <acc_sensor_manager_start_measurement+0x2e>
 8009bee:	bf00      	nop
 8009bf0:	200007d0 	.word	0x200007d0

08009bf4 <acc_sensor_manager_stop_measurement>:
 8009bf4:	78c3      	ldrb	r3, [r0, #3]
 8009bf6:	b903      	cbnz	r3, 8009bfa <acc_sensor_manager_stop_measurement+0x6>
 8009bf8:	4770      	bx	lr
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	6980      	ldr	r0, [r0, #24]
 8009c00:	f7fd feea 	bl	80079d8 <acc_rss_integration_sensor_device_power_off>
 8009c04:	2300      	movs	r3, #0
 8009c06:	70e3      	strb	r3, [r4, #3]
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	bf00      	nop

08009c0c <acc_sensor_manager_release_measurement>:
 8009c0c:	6983      	ldr	r3, [r0, #24]
 8009c0e:	b173      	cbz	r3, 8009c2e <acc_sensor_manager_release_measurement+0x22>
 8009c10:	4a07      	ldr	r2, [pc, #28]	; (8009c30 <acc_sensor_manager_release_measurement+0x24>)
 8009c12:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	00db      	lsls	r3, r3, #3
 8009c1a:	3b48      	subs	r3, #72	; 0x48
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009c22:	b90a      	cbnz	r2, 8009c28 <acc_sensor_manager_release_measurement+0x1c>
 8009c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c28:	3004      	adds	r0, #4
 8009c2a:	f000 bb45 	b.w	800a2b8 <acc_sweep_manager_release>
 8009c2e:	4770      	bx	lr
 8009c30:	200007d4 	.word	0x200007d4

08009c34 <acc_sensor_manager_get_sensor_id>:
 8009c34:	6980      	ldr	r0, [r0, #24]
 8009c36:	4770      	bx	lr

08009c38 <acc_sensor_protocol_r2_prepare_load>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	4608      	mov	r0, r1
 8009c40:	4611      	mov	r1, r2
 8009c42:	461a      	mov	r2, r3
 8009c44:	9b08      	ldr	r3, [sp, #32]
 8009c46:	f7ff fcef 	bl	8009628 <acc_sensor_r2_prepare_load_confmem>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f10d 020e 	add.w	r2, sp, #14
 8009c52:	212a      	movs	r1, #42	; 0x2a
 8009c54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009c58:	f000 fc88 	bl	800a56c <acc_sensor_reg_read>
 8009c5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009c60:	065b      	lsls	r3, r3, #25
 8009c62:	d436      	bmi.n	8009cd2 <acc_sensor_protocol_r2_prepare_load+0x9a>
 8009c64:	f10d 020e 	add.w	r2, sp, #14
 8009c68:	2500      	movs	r5, #0
 8009c6a:	2111      	movs	r1, #17
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f8ad 500e 	strh.w	r5, [sp, #14]
 8009c72:	f000 fc7b 	bl	800a56c <acc_sensor_reg_read>
 8009c76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009c7a:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 8009c7e:	d00c      	beq.n	8009c9a <acc_sensor_protocol_r2_prepare_load+0x62>
 8009c80:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8009c82:	4a1c      	ldr	r2, [pc, #112]	; (8009cf4 <acc_sensor_protocol_r2_prepare_load+0xbc>)
 8009c84:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009c86:	491c      	ldr	r1, [pc, #112]	; (8009cf8 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8009c88:	4623      	mov	r3, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b0      	blx	r6
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f001 fcaa 	bl	800b5e8 <acc_sensor_diagnostics_r2_sensor_status>
 8009c94:	4628      	mov	r0, r5
 8009c96:	b004      	add	sp, #16
 8009c98:	bd70      	pop	{r4, r5, r6, pc}
 8009c9a:	2501      	movs	r5, #1
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	9500      	str	r5, [sp, #0]
 8009ca2:	2380      	movs	r3, #128	; 0x80
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	f000 fc87 	bl	800a5b8 <acc_sensor_reg_field_write>
 8009caa:	2380      	movs	r3, #128	; 0x80
 8009cac:	461a      	mov	r2, r3
 8009cae:	4620      	mov	r0, r4
 8009cb0:	9600      	str	r6, [sp, #0]
 8009cb2:	2107      	movs	r1, #7
 8009cb4:	f000 fc80 	bl	800a5b8 <acc_sensor_reg_field_write>
 8009cb8:	462a      	mov	r2, r5
 8009cba:	4620      	mov	r0, r4
 8009cbc:	2105      	movs	r1, #5
 8009cbe:	f000 fc6b 	bl	800a598 <acc_sensor_reg_write>
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	2203      	movs	r2, #3
 8009cc6:	217a      	movs	r1, #122	; 0x7a
 8009cc8:	f000 fc66 	bl	800a598 <acc_sensor_reg_write>
 8009ccc:	4628      	mov	r0, r5
 8009cce:	b004      	add	sp, #16
 8009cd0:	bd70      	pop	{r4, r5, r6, pc}
 8009cd2:	f7fd ff21 	bl	8007b18 <acc_rss_integration_log_level>
 8009cd6:	b130      	cbz	r0, 8009ce6 <acc_sensor_protocol_r2_prepare_load+0xae>
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8009cda:	4a08      	ldr	r2, [pc, #32]	; (8009cfc <acc_sensor_protocol_r2_prepare_load+0xc4>)
 8009cdc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009cde:	4906      	ldr	r1, [pc, #24]	; (8009cf8 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8009ce0:	4623      	mov	r3, r4
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	47a8      	blx	r5
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f001 fc7e 	bl	800b5e8 <acc_sensor_diagnostics_r2_sensor_status>
 8009cec:	e7ba      	b.n	8009c64 <acc_sensor_protocol_r2_prepare_load+0x2c>
 8009cee:	bf00      	nop
 8009cf0:	200007ec 	.word	0x200007ec
 8009cf4:	08011e08 	.word	0x08011e08
 8009cf8:	08011df4 	.word	0x08011df4
 8009cfc:	08011dc8 	.word	0x08011dc8

08009d00 <acc_sensor_protocol_r2_run_program>:
 8009d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d02:	b085      	sub	sp, #20
 8009d04:	4604      	mov	r4, r0
 8009d06:	460e      	mov	r6, r1
 8009d08:	f7fd ff06 	bl	8007b18 <acc_rss_integration_log_level>
 8009d0c:	2803      	cmp	r0, #3
 8009d0e:	d907      	bls.n	8009d20 <acc_sensor_protocol_r2_run_program+0x20>
 8009d10:	4b1e      	ldr	r3, [pc, #120]	; (8009d8c <acc_sensor_protocol_r2_run_program+0x8c>)
 8009d12:	9600      	str	r6, [sp, #0]
 8009d14:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009d16:	4a1e      	ldr	r2, [pc, #120]	; (8009d90 <acc_sensor_protocol_r2_run_program+0x90>)
 8009d18:	491e      	ldr	r1, [pc, #120]	; (8009d94 <acc_sensor_protocol_r2_run_program+0x94>)
 8009d1a:	4623      	mov	r3, r4
 8009d1c:	2004      	movs	r0, #4
 8009d1e:	47a8      	blx	r5
 8009d20:	f10d 020e 	add.w	r2, sp, #14
 8009d24:	2700      	movs	r7, #0
 8009d26:	2111      	movs	r1, #17
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f8ad 700e 	strh.w	r7, [sp, #14]
 8009d2e:	f000 fc1d 	bl	800a56c <acc_sensor_reg_read>
 8009d32:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009d36:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 8009d3a:	d11a      	bne.n	8009d72 <acc_sensor_protocol_r2_run_program+0x72>
 8009d3c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009d40:	d309      	bcc.n	8009d56 <acc_sensor_protocol_r2_run_program+0x56>
 8009d42:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <acc_sensor_protocol_r2_run_program+0x8c>)
 8009d44:	4a14      	ldr	r2, [pc, #80]	; (8009d98 <acc_sensor_protocol_r2_run_program+0x98>)
 8009d46:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009d48:	4912      	ldr	r1, [pc, #72]	; (8009d94 <acc_sensor_protocol_r2_run_program+0x94>)
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	4633      	mov	r3, r6
 8009d4e:	47a0      	blx	r4
 8009d50:	4628      	mov	r0, r5
 8009d52:	b005      	add	sp, #20
 8009d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d56:	462a      	mov	r2, r5
 8009d58:	4620      	mov	r0, r4
 8009d5a:	2110      	movs	r1, #16
 8009d5c:	f000 fc1c 	bl	800a598 <acc_sensor_reg_write>
 8009d60:	4620      	mov	r0, r4
 8009d62:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 8009d66:	2110      	movs	r1, #16
 8009d68:	f000 fc16 	bl	800a598 <acc_sensor_reg_write>
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	b005      	add	sp, #20
 8009d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d72:	4b06      	ldr	r3, [pc, #24]	; (8009d8c <acc_sensor_protocol_r2_run_program+0x8c>)
 8009d74:	4a09      	ldr	r2, [pc, #36]	; (8009d9c <acc_sensor_protocol_r2_run_program+0x9c>)
 8009d76:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009d78:	4906      	ldr	r1, [pc, #24]	; (8009d94 <acc_sensor_protocol_r2_run_program+0x94>)
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	47a8      	blx	r5
 8009d80:	4620      	mov	r0, r4
 8009d82:	f001 fc31 	bl	800b5e8 <acc_sensor_diagnostics_r2_sensor_status>
 8009d86:	4638      	mov	r0, r7
 8009d88:	b005      	add	sp, #20
 8009d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d8c:	200007ec 	.word	0x200007ec
 8009d90:	08011e38 	.word	0x08011e38
 8009d94:	08011df4 	.word	0x08011df4
 8009d98:	08011e8c 	.word	0x08011e8c
 8009d9c:	08011e5c 	.word	0x08011e5c

08009da0 <acc_sensor_protocol_r2_is_sensor_running>:
 8009da0:	b500      	push	{lr}
 8009da2:	b083      	sub	sp, #12
 8009da4:	2300      	movs	r3, #0
 8009da6:	f10d 0206 	add.w	r2, sp, #6
 8009daa:	2111      	movs	r1, #17
 8009dac:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009db0:	f000 fbdc 	bl	800a56c <acc_sensor_reg_read>
 8009db4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8009db8:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8009dbc:	b003      	add	sp, #12
 8009dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dc2:	bf00      	nop

08009dc4 <acc_sensor_protocol_r2_ack_event>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f10d 0206 	add.w	r2, sp, #6
 8009dce:	2138      	movs	r1, #56	; 0x38
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009dd6:	f000 fbc9 	bl	800a56c <acc_sensor_reg_read>
 8009dda:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8009dde:	b114      	cbz	r4, 8009de6 <acc_sensor_protocol_r2_ack_event+0x22>
 8009de0:	2001      	movs	r0, #1
 8009de2:	b002      	add	sp, #8
 8009de4:	bd70      	pop	{r4, r5, r6, pc}
 8009de6:	4b06      	ldr	r3, [pc, #24]	; (8009e00 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8009de8:	4a06      	ldr	r2, [pc, #24]	; (8009e04 <acc_sensor_protocol_r2_ack_event+0x40>)
 8009dea:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009dec:	4906      	ldr	r1, [pc, #24]	; (8009e08 <acc_sensor_protocol_r2_ack_event+0x44>)
 8009dee:	462b      	mov	r3, r5
 8009df0:	4620      	mov	r0, r4
 8009df2:	47b0      	blx	r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	f001 fbf7 	bl	800b5e8 <acc_sensor_diagnostics_r2_sensor_status>
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	b002      	add	sp, #8
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}
 8009e00:	200007ec 	.word	0x200007ec
 8009e04:	08011ea8 	.word	0x08011ea8
 8009e08:	08011df4 	.word	0x08011df4

08009e0c <acc_sensor_protocol_r2_get_event>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	460c      	mov	r4, r1
 8009e10:	b084      	sub	sp, #16
 8009e12:	b301      	cbz	r1, 8009e56 <acc_sensor_protocol_r2_get_event+0x4a>
 8009e14:	f10d 020e 	add.w	r2, sp, #14
 8009e18:	2128      	movs	r1, #40	; 0x28
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	f000 fba6 	bl	800a56c <acc_sensor_reg_read>
 8009e20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009e24:	8062      	strh	r2, [r4, #2]
 8009e26:	b2d3      	uxtb	r3, r2
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	7023      	strb	r3, [r4, #0]
 8009e2c:	d026      	beq.n	8009e7c <acc_sensor_protocol_r2_get_event+0x70>
 8009e2e:	d80c      	bhi.n	8009e4a <acc_sensor_protocol_r2_get_event+0x3e>
 8009e30:	4b22      	ldr	r3, [pc, #136]	; (8009ebc <acc_sensor_protocol_r2_get_event+0xb0>)
 8009e32:	4a23      	ldr	r2, [pc, #140]	; (8009ec0 <acc_sensor_protocol_r2_get_event+0xb4>)
 8009e34:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009e36:	4923      	ldr	r1, [pc, #140]	; (8009ec4 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009e38:	462b      	mov	r3, r5
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	47a0      	blx	r4
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f001 fbd2 	bl	800b5e8 <acc_sensor_diagnostics_r2_sensor_status>
 8009e44:	2000      	movs	r0, #0
 8009e46:	b004      	add	sp, #16
 8009e48:	bd70      	pop	{r4, r5, r6, pc}
 8009e4a:	1e9a      	subs	r2, r3, #2
 8009e4c:	2a09      	cmp	r2, #9
 8009e4e:	d80b      	bhi.n	8009e68 <acc_sensor_protocol_r2_get_event+0x5c>
 8009e50:	2001      	movs	r0, #1
 8009e52:	b004      	add	sp, #16
 8009e54:	bd70      	pop	{r4, r5, r6, pc}
 8009e56:	4b19      	ldr	r3, [pc, #100]	; (8009ebc <acc_sensor_protocol_r2_get_event+0xb0>)
 8009e58:	4a1b      	ldr	r2, [pc, #108]	; (8009ec8 <acc_sensor_protocol_r2_get_event+0xbc>)
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	4919      	ldr	r1, [pc, #100]	; (8009ec4 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4798      	blx	r3
 8009e62:	4620      	mov	r0, r4
 8009e64:	b004      	add	sp, #16
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	4a14      	ldr	r2, [pc, #80]	; (8009ebc <acc_sensor_protocol_r2_get_event+0xb0>)
 8009e6a:	9500      	str	r5, [sp, #0]
 8009e6c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009e6e:	4915      	ldr	r1, [pc, #84]	; (8009ec4 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009e70:	4a16      	ldr	r2, [pc, #88]	; (8009ecc <acc_sensor_protocol_r2_get_event+0xc0>)
 8009e72:	2000      	movs	r0, #0
 8009e74:	47b0      	blx	r6
 8009e76:	2300      	movs	r3, #0
 8009e78:	7023      	strb	r3, [r4, #0]
 8009e7a:	e7e0      	b.n	8009e3e <acc_sensor_protocol_r2_get_event+0x32>
 8009e7c:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 8009e80:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8009e84:	d203      	bcs.n	8009e8e <acc_sensor_protocol_r2_get_event+0x82>
 8009e86:	4a12      	ldr	r2, [pc, #72]	; (8009ed0 <acc_sensor_protocol_r2_get_event+0xc4>)
 8009e88:	408b      	lsls	r3, r1
 8009e8a:	401a      	ands	r2, r3
 8009e8c:	b96a      	cbnz	r2, 8009eaa <acc_sensor_protocol_r2_get_event+0x9e>
 8009e8e:	4a0b      	ldr	r2, [pc, #44]	; (8009ebc <acc_sensor_protocol_r2_get_event+0xb0>)
 8009e90:	f242 1301 	movw	r3, #8449	; 0x2101
 8009e94:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009e96:	8063      	strh	r3, [r4, #2]
 8009e98:	2320      	movs	r3, #32
 8009e9a:	4a0e      	ldr	r2, [pc, #56]	; (8009ed4 <acc_sensor_protocol_r2_get_event+0xc8>)
 8009e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea0:	4a0d      	ldr	r2, [pc, #52]	; (8009ed8 <acc_sensor_protocol_r2_get_event+0xcc>)
 8009ea2:	4908      	ldr	r1, [pc, #32]	; (8009ec4 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	47b0      	blx	r6
 8009ea8:	e7c9      	b.n	8009e3e <acc_sensor_protocol_r2_get_event+0x32>
 8009eaa:	1e4b      	subs	r3, r1, #1
 8009eac:	4a03      	ldr	r2, [pc, #12]	; (8009ebc <acc_sensor_protocol_r2_get_event+0xb0>)
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009eb4:	d9f1      	bls.n	8009e9a <acc_sensor_protocol_r2_get_event+0x8e>
 8009eb6:	4b09      	ldr	r3, [pc, #36]	; (8009edc <acc_sensor_protocol_r2_get_event+0xd0>)
 8009eb8:	e7f2      	b.n	8009ea0 <acc_sensor_protocol_r2_get_event+0x94>
 8009eba:	bf00      	nop
 8009ebc:	200007ec 	.word	0x200007ec
 8009ec0:	08011f00 	.word	0x08011f00
 8009ec4:	08011df4 	.word	0x08011df4
 8009ec8:	08011eec 	.word	0x08011eec
 8009ecc:	08011f44 	.word	0x08011f44
 8009ed0:	00010016 	.word	0x00010016
 8009ed4:	08012200 	.word	0x08012200
 8009ed8:	08011f24 	.word	0x08011f24
 8009edc:	08011edc 	.word	0x08011edc

08009ee0 <acc_sensor_protocol_r2_wait_for_event>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	b087      	sub	sp, #28
 8009ee6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8009f9c <acc_sensor_protocol_r2_wait_for_event+0xbc>
 8009eea:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009fb0 <acc_sensor_protocol_r2_wait_for_event+0xd0>
 8009eee:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009fa4 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 8009ef2:	9303      	str	r3, [sp, #12]
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460e      	mov	r6, r1
 8009ef8:	4690      	mov	r8, r2
 8009efa:	2500      	movs	r5, #0
 8009efc:	e018      	b.n	8009f30 <acc_sensor_protocol_r2_wait_for_event+0x50>
 8009efe:	4620      	mov	r0, r4
 8009f00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f04:	f000 fb32 	bl	800a56c <acc_sensor_reg_read>
 8009f08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8009f0c:	065b      	lsls	r3, r3, #25
 8009f0e:	d434      	bmi.n	8009f7a <acc_sensor_protocol_r2_wait_for_event+0x9a>
 8009f10:	f7fd fe02 	bl	8007b18 <acc_rss_integration_log_level>
 8009f14:	4607      	mov	r7, r0
 8009f16:	4623      	mov	r3, r4
 8009f18:	4652      	mov	r2, sl
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	b117      	cbz	r7, 8009f26 <acc_sensor_protocol_r2_wait_for_event+0x46>
 8009f20:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 8009f24:	47b8      	blx	r7
 8009f26:	4545      	cmp	r5, r8
 8009f28:	f105 0301 	add.w	r3, r5, #1
 8009f2c:	d018      	beq.n	8009f60 <acc_sensor_protocol_r2_wait_for_event+0x80>
 8009f2e:	461d      	mov	r5, r3
 8009f30:	4631      	mov	r1, r6
 8009f32:	4620      	mov	r0, r4
 8009f34:	f7fd fd6e 	bl	8007a14 <acc_rss_integration_wait_for_sensor_interrupt>
 8009f38:	f10d 0216 	add.w	r2, sp, #22
 8009f3c:	212a      	movs	r1, #42	; 0x2a
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4607      	mov	r7, r0
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d1db      	bne.n	8009efe <acc_sensor_protocol_r2_wait_for_event+0x1e>
 8009f46:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009f48:	4a15      	ldr	r2, [pc, #84]	; (8009fa0 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 8009f4a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009f4c:	4915      	ldr	r1, [pc, #84]	; (8009fa4 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009f4e:	4623      	mov	r3, r4
 8009f50:	47a8      	blx	r5
 8009f52:	4620      	mov	r0, r4
 8009f54:	f001 fb48 	bl	800b5e8 <acc_sensor_diagnostics_r2_sensor_status>
 8009f58:	4638      	mov	r0, r7
 8009f5a:	b007      	add	sp, #28
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	4a0e      	ldr	r2, [pc, #56]	; (8009f9c <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009f62:	9400      	str	r4, [sp, #0]
 8009f64:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009f66:	490f      	ldr	r1, [pc, #60]	; (8009fa4 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009f68:	4a0f      	ldr	r2, [pc, #60]	; (8009fa8 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 8009f6a:	462b      	mov	r3, r5
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	47a0      	blx	r4
 8009f70:	2700      	movs	r7, #0
 8009f72:	4638      	mov	r0, r7
 8009f74:	b007      	add	sp, #28
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	9903      	ldr	r1, [sp, #12]
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f7ff ff45 	bl	8009e0c <acc_sensor_protocol_r2_get_event>
 8009f82:	4607      	mov	r7, r0
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d1e7      	bne.n	8009f58 <acc_sensor_protocol_r2_wait_for_event+0x78>
 8009f88:	4b04      	ldr	r3, [pc, #16]	; (8009f9c <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8009f8a:	4a08      	ldr	r2, [pc, #32]	; (8009fac <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 8009f8c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009f8e:	4905      	ldr	r1, [pc, #20]	; (8009fa4 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009f90:	4623      	mov	r3, r4
 8009f92:	47a8      	blx	r5
 8009f94:	4638      	mov	r0, r7
 8009f96:	b007      	add	sp, #28
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	200007ec 	.word	0x200007ec
 8009fa0:	08011f74 	.word	0x08011f74
 8009fa4:	08011df4 	.word	0x08011df4
 8009fa8:	08011fc0 	.word	0x08011fc0
 8009fac:	08011ffc 	.word	0x08011ffc
 8009fb0:	08011f9c 	.word	0x08011f9c

08009fb4 <acc_sensor_protocol_r2_wait_for_specific_event>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	4616      	mov	r6, r2
 8009fba:	461c      	mov	r4, r3
 8009fbc:	2264      	movs	r2, #100	; 0x64
 8009fbe:	ab03      	add	r3, sp, #12
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	f7ff ff8d 	bl	8009ee0 <acc_sensor_protocol_r2_wait_for_event>
 8009fc6:	b168      	cbz	r0, 8009fe4 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8009fc8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009fcc:	42b3      	cmp	r3, r6
 8009fce:	d00b      	beq.n	8009fe8 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 8009fd0:	e9cd 3600 	strd	r3, r6, [sp]
 8009fd4:	4a08      	ldr	r2, [pc, #32]	; (8009ff8 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8009fd6:	4b09      	ldr	r3, [pc, #36]	; (8009ffc <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8009fd8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009fda:	4909      	ldr	r1, [pc, #36]	; (800a000 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8009fdc:	4a09      	ldr	r2, [pc, #36]	; (800a004 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8009fde:	2000      	movs	r0, #0
 8009fe0:	47a0      	blx	r4
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	b004      	add	sp, #16
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}
 8009fe8:	2c00      	cmp	r4, #0
 8009fea:	d0fb      	beq.n	8009fe4 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8009fec:	4628      	mov	r0, r5
 8009fee:	f7ff fee9 	bl	8009dc4 <acc_sensor_protocol_r2_ack_event>
 8009ff2:	b004      	add	sp, #16
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
 8009ff6:	bf00      	nop
 8009ff8:	200007ec 	.word	0x200007ec
 8009ffc:	08012284 	.word	0x08012284
 800a000:	08011df4 	.word	0x08011df4
 800a004:	08012024 	.word	0x08012024

0800a008 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 800a008:	2301      	movs	r3, #1
 800a00a:	220b      	movs	r2, #11
 800a00c:	f7ff bfd2 	b.w	8009fb4 <acc_sensor_protocol_r2_wait_for_specific_event>

0800a010 <acc_sensor_protocol_r2_wait_for_radar_data>:
 800a010:	b570      	push	{r4, r5, r6, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	4616      	mov	r6, r2
 800a016:	ab03      	add	r3, sp, #12
 800a018:	2264      	movs	r2, #100	; 0x64
 800a01a:	4605      	mov	r5, r0
 800a01c:	f7ff ff60 	bl	8009ee0 <acc_sensor_protocol_r2_wait_for_event>
 800a020:	4604      	mov	r4, r0
 800a022:	b180      	cbz	r0, 800a046 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800a024:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a028:	2b06      	cmp	r3, #6
 800a02a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a02e:	d10d      	bne.n	800a04c <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 800a030:	0519      	lsls	r1, r3, #20
 800a032:	d50b      	bpl.n	800a04c <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 800a034:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 800a038:	d114      	bne.n	800a064 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 800a03a:	b106      	cbz	r6, 800a03e <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 800a03c:	7032      	strb	r2, [r6, #0]
 800a03e:	05da      	lsls	r2, r3, #23
 800a040:	d425      	bmi.n	800a08e <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 800a042:	059b      	lsls	r3, r3, #22
 800a044:	d418      	bmi.n	800a078 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 800a046:	4620      	mov	r0, r4
 800a048:	b004      	add	sp, #16
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	4a16      	ldr	r2, [pc, #88]	; (800a0a8 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a052:	4916      	ldr	r1, [pc, #88]	; (800a0ac <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800a054:	4a16      	ldr	r2, [pc, #88]	; (800a0b0 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 800a056:	462b      	mov	r3, r5
 800a058:	2000      	movs	r0, #0
 800a05a:	47a0      	blx	r4
 800a05c:	2400      	movs	r4, #0
 800a05e:	4620      	mov	r0, r4
 800a060:	b004      	add	sp, #16
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	4629      	mov	r1, r5
 800a066:	200f      	movs	r0, #15
 800a068:	f7fd fd8c 	bl	8007b84 <acc_probes_execute_primitive_probe>
 800a06c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a070:	4622      	mov	r2, r4
 800a072:	2e00      	cmp	r6, #0
 800a074:	d1e2      	bne.n	800a03c <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 800a076:	e7e2      	b.n	800a03e <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 800a078:	f7fd fd4e 	bl	8007b18 <acc_rss_integration_log_level>
 800a07c:	2803      	cmp	r0, #3
 800a07e:	d9e2      	bls.n	800a046 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800a080:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800a082:	4a0c      	ldr	r2, [pc, #48]	; (800a0b4 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 800a084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a086:	4909      	ldr	r1, [pc, #36]	; (800a0ac <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800a088:	2004      	movs	r0, #4
 800a08a:	4798      	blx	r3
 800a08c:	e7db      	b.n	800a046 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800a08e:	f7fd fd43 	bl	8007b18 <acc_rss_integration_log_level>
 800a092:	2803      	cmp	r0, #3
 800a094:	d905      	bls.n	800a0a2 <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 800a096:	4b04      	ldr	r3, [pc, #16]	; (800a0a8 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800a098:	4a07      	ldr	r2, [pc, #28]	; (800a0b8 <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 800a09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09c:	4903      	ldr	r1, [pc, #12]	; (800a0ac <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800a09e:	2004      	movs	r0, #4
 800a0a0:	4798      	blx	r3
 800a0a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a0a6:	e7cc      	b.n	800a042 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 800a0a8:	200007ec 	.word	0x200007ec
 800a0ac:	08011df4 	.word	0x08011df4
 800a0b0:	08012050 	.word	0x08012050
 800a0b4:	0801209c 	.word	0x0801209c
 800a0b8:	08012080 	.word	0x08012080

0800a0bc <acc_sensor_protocol_r2_wait_for_sync_start>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	ab03      	add	r3, sp, #12
 800a0c2:	2264      	movs	r2, #100	; 0x64
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	f7ff ff0b 	bl	8009ee0 <acc_sensor_protocol_r2_wait_for_event>
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	b178      	cbz	r0, 800a0ee <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 800a0ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a0d2:	2b06      	cmp	r3, #6
 800a0d4:	d008      	beq.n	800a0e8 <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 800a0d6:	4a0a      	ldr	r2, [pc, #40]	; (800a100 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a0dc:	4909      	ldr	r1, [pc, #36]	; (800a104 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800a0de:	4a0a      	ldr	r2, [pc, #40]	; (800a108 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 800a0e0:	462b      	mov	r3, r5
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	47a0      	blx	r4
 800a0e6:	2400      	movs	r4, #0
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	b004      	add	sp, #16
 800a0ec:	bd70      	pop	{r4, r5, r6, pc}
 800a0ee:	4b04      	ldr	r3, [pc, #16]	; (800a100 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800a0f0:	4a06      	ldr	r2, [pc, #24]	; (800a10c <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 800a0f2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a0f4:	4903      	ldr	r1, [pc, #12]	; (800a104 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	47b0      	blx	r6
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	b004      	add	sp, #16
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}
 800a100:	200007ec 	.word	0x200007ec
 800a104:	08011df4 	.word	0x08011df4
 800a108:	080120e8 	.word	0x080120e8
 800a10c:	080120b4 	.word	0x080120b4

0800a110 <acc_sensor_protocol_r2_transfer_data>:
 800a110:	b530      	push	{r4, r5, lr}
 800a112:	b083      	sub	sp, #12
 800a114:	4613      	mov	r3, r2
 800a116:	9201      	str	r2, [sp, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	4605      	mov	r5, r0
 800a11c:	f7ff fadc 	bl	80096d8 <acc_sensor_r2_buffer_processed_read>
 800a120:	9b01      	ldr	r3, [sp, #4]
 800a122:	4604      	mov	r4, r0
 800a124:	4602      	mov	r2, r0
 800a126:	4629      	mov	r1, r5
 800a128:	2000      	movs	r0, #0
 800a12a:	f7fd fcfb 	bl	8007b24 <acc_probes_execute_uint16>
 800a12e:	4620      	mov	r0, r4
 800a130:	b003      	add	sp, #12
 800a132:	bd30      	pop	{r4, r5, pc}

0800a134 <acc_sensor_protocol_r2_check_asic_id>:
 800a134:	b530      	push	{r4, r5, lr}
 800a136:	2400      	movs	r4, #0
 800a138:	b085      	sub	sp, #20
 800a13a:	f10d 020e 	add.w	r2, sp, #14
 800a13e:	460d      	mov	r5, r1
 800a140:	4621      	mov	r1, r4
 800a142:	f8ad 400e 	strh.w	r4, [sp, #14]
 800a146:	f000 fa11 	bl	800a56c <acc_sensor_reg_read>
 800a14a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a14e:	f241 1312 	movw	r3, #4370	; 0x1112
 800a152:	429a      	cmp	r2, r3
 800a154:	d00a      	beq.n	800a16c <acc_sensor_protocol_r2_check_asic_id+0x38>
 800a156:	b965      	cbnz	r5, 800a172 <acc_sensor_protocol_r2_check_asic_id+0x3e>
 800a158:	4907      	ldr	r1, [pc, #28]	; (800a178 <acc_sensor_protocol_r2_check_asic_id+0x44>)
 800a15a:	9200      	str	r2, [sp, #0]
 800a15c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800a15e:	4a07      	ldr	r2, [pc, #28]	; (800a17c <acc_sensor_protocol_r2_check_asic_id+0x48>)
 800a160:	4907      	ldr	r1, [pc, #28]	; (800a180 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 800a162:	4628      	mov	r0, r5
 800a164:	47a0      	blx	r4
 800a166:	4628      	mov	r0, r5
 800a168:	b005      	add	sp, #20
 800a16a:	bd30      	pop	{r4, r5, pc}
 800a16c:	2001      	movs	r0, #1
 800a16e:	b005      	add	sp, #20
 800a170:	bd30      	pop	{r4, r5, pc}
 800a172:	4620      	mov	r0, r4
 800a174:	b005      	add	sp, #20
 800a176:	bd30      	pop	{r4, r5, pc}
 800a178:	200007ec 	.word	0x200007ec
 800a17c:	08012124 	.word	0x08012124
 800a180:	08011df4 	.word	0x08011df4

0800a184 <acc_sweep_manager_prepare>:
 800a184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a188:	4680      	mov	r8, r0
 800a18a:	b095      	sub	sp, #84	; 0x54
 800a18c:	4608      	mov	r0, r1
 800a18e:	460c      	mov	r4, r1
 800a190:	4617      	mov	r7, r2
 800a192:	4699      	mov	r9, r3
 800a194:	f7fd fd48 	bl	8007c28 <acc_base_configuration_sensor_get>
 800a198:	4601      	mov	r1, r0
 800a19a:	4620      	mov	r0, r4
 800a19c:	9101      	str	r1, [sp, #4]
 800a19e:	f7fd fe7d 	bl	8007e9c <acc_base_configuration_wg_duration_get>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a1aa:	f7fd fe5f 	bl	8007e6c <acc_base_configuration_integrator_get>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a1b6:	f7fd fe89 	bl	8007ecc <acc_base_configuration_integrator_ramp_up_get>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f8ad 3010 	strh.w	r3, [sp, #16]
 800a1c2:	f7fd fdc5 	bl	8007d50 <acc_base_configuration_decrease_tx_emission_get>
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	2304      	movs	r3, #4
 800a1ca:	9901      	ldr	r1, [sp, #4]
 800a1cc:	f8ad 5012 	strh.w	r5, [sp, #18]
 800a1d0:	aa03      	add	r2, sp, #12
 800a1d2:	2012      	movs	r0, #18
 800a1d4:	f108 0514 	add.w	r5, r8, #20
 800a1d8:	f7fd fca4 	bl	8007b24 <acc_probes_execute_uint16>
 800a1dc:	2220      	movs	r2, #32
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f002 f8f9 	bl	800c3d8 <memset>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	4798      	blx	r3
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d04e      	beq.n	800a292 <acc_sweep_manager_prepare+0x10e>
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	a80c      	add	r0, sp, #48	; 0x30
 800a1fa:	f002 f8ed 	bl	800c3d8 <memset>
 800a1fe:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 800a202:	2100      	movs	r1, #0
 800a204:	6806      	ldr	r6, [r0, #0]
 800a206:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800a20a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800a20e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800a212:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 800a216:	aa0c      	add	r2, sp, #48	; 0x30
 800a218:	ab05      	add	r3, sp, #20
 800a21a:	4621      	mov	r1, r4
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b0      	blx	r6
 800a220:	4606      	mov	r6, r0
 800a222:	2800      	cmp	r0, #0
 800a224:	d039      	beq.n	800a29a <acc_sweep_manager_prepare+0x116>
 800a226:	b137      	cbz	r7, 800a236 <acc_sweep_manager_prepare+0xb2>
 800a228:	ad0c      	add	r5, sp, #48	; 0x30
 800a22a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a22c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a22e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a232:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800a236:	f1b9 0f00 	cmp.w	r9, #0
 800a23a:	d011      	beq.n	800a260 <acc_sweep_manager_prepare+0xdc>
 800a23c:	ad05      	add	r5, sp, #20
 800a23e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a240:	f8c9 0000 	str.w	r0, [r9]
 800a244:	f8c9 1004 	str.w	r1, [r9, #4]
 800a248:	cd03      	ldmia	r5!, {r0, r1}
 800a24a:	882d      	ldrh	r5, [r5, #0]
 800a24c:	f8c9 2008 	str.w	r2, [r9, #8]
 800a250:	f8c9 300c 	str.w	r3, [r9, #12]
 800a254:	f8a9 5018 	strh.w	r5, [r9, #24]
 800a258:	f8c9 0010 	str.w	r0, [r9, #16]
 800a25c:	f8c9 1014 	str.w	r1, [r9, #20]
 800a260:	4620      	mov	r0, r4
 800a262:	f7fd fdc9 	bl	8007df8 <acc_base_configuration_repetition_mode_get>
 800a266:	2801      	cmp	r0, #1
 800a268:	d020      	beq.n	800a2ac <acc_sweep_manager_prepare+0x128>
 800a26a:	4620      	mov	r0, r4
 800a26c:	f7fd fdce 	bl	8007e0c <acc_base_configuration_update_rate_get>
 800a270:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a2b4 <acc_sweep_manager_prepare+0x130>
 800a274:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a27c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a280:	ee17 3a90 	vmov	r3, s15
 800a284:	2200      	movs	r2, #0
 800a286:	f8c8 3000 	str.w	r3, [r8]
 800a28a:	f8c8 2008 	str.w	r2, [r8, #8]
 800a28e:	f8a8 2006 	strh.w	r2, [r8, #6]
 800a292:	4630      	mov	r0, r6
 800a294:	b015      	add	sp, #84	; 0x54
 800a296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a29a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800a29e:	4628      	mov	r0, r5
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	4798      	blx	r3
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	b015      	add	sp, #84	; 0x54
 800a2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a2b0:	e7e8      	b.n	800a284 <acc_sweep_manager_prepare+0x100>
 800a2b2:	bf00      	nop
 800a2b4:	44fa0000 	.word	0x44fa0000

0800a2b8 <acc_sweep_manager_release>:
 800a2b8:	b120      	cbz	r0, 800a2c4 <acc_sweep_manager_release+0xc>
 800a2ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a2bc:	b113      	cbz	r3, 800a2c4 <acc_sweep_manager_release+0xc>
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	3014      	adds	r0, #20
 800a2c2:	4718      	bx	r3
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop

0800a2c8 <acc_sweep_manager_is_sensor_connected>:
 800a2c8:	3014      	adds	r0, #20
 800a2ca:	f001 b8e7 	b.w	800b49c <acc_radar_engine_check_asic_id>
 800a2ce:	bf00      	nop

0800a2d0 <acc_sweep_manager_calibrate>:
 800a2d0:	b410      	push	{r4}
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	3014      	adds	r0, #20
 800a2d6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800a2d8:	68a4      	ldr	r4, [r4, #8]
 800a2da:	46a4      	mov	ip, r4
 800a2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e0:	4760      	bx	ip
 800a2e2:	bf00      	nop

0800a2e4 <acc_sweep_manager_measure_noise>:
 800a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 800a2ee:	686f      	ldr	r7, [r5, #4]
 800a2f0:	461e      	mov	r6, r3
 800a2f2:	4615      	mov	r5, r2
 800a2f4:	47b8      	blx	r7
 800a2f6:	b140      	cbz	r0, 800a30a <acc_sweep_manager_measure_noise+0x26>
 800a2f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2fa:	4632      	mov	r2, r6
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f104 0014 	add.w	r0, r4, #20
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a308:	4718      	bx	r3
 800a30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a30e:	bf00      	nop

0800a310 <acc_sweep_manager_start>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	4604      	mov	r4, r0
 800a314:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	4615      	mov	r5, r2
 800a31c:	4798      	blx	r3
 800a31e:	b138      	cbz	r0, 800a330 <acc_sweep_manager_start+0x20>
 800a320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a322:	4629      	mov	r1, r5
 800a324:	f104 0014 	add.w	r0, r4, #20
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a32e:	4718      	bx	r3
 800a330:	bd70      	pop	{r4, r5, r6, pc}
 800a332:	bf00      	nop

0800a334 <acc_sweep_manager_wait_for_data>:
 800a334:	f850 1b14 	ldr.w	r1, [r0], #20
 800a338:	2200      	movs	r2, #0
 800a33a:	f001 b8b3 	b.w	800b4a4 <acc_radar_engine_wait_for_radar_data>
 800a33e:	bf00      	nop

0800a340 <acc_sweep_manager_wait_for_hibernate_ready>:
 800a340:	f850 1b14 	ldr.w	r1, [r0], #20
 800a344:	f001 b8b6 	b.w	800b4b4 <acc_radar_engine_wait_for_hibernate_ready>

0800a348 <acc_sweep_manager_measure>:
 800a348:	3014      	adds	r0, #20
 800a34a:	f001 b8af 	b.w	800b4ac <acc_radar_engine_measure>
 800a34e:	bf00      	nop

0800a350 <acc_sweep_manager_acquire_adc_data>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	2300      	movs	r3, #0
 800a354:	b084      	sub	sp, #16
 800a356:	4604      	mov	r4, r0
 800a358:	6043      	str	r3, [r0, #4]
 800a35a:	6083      	str	r3, [r0, #8]
 800a35c:	60c3      	str	r3, [r0, #12]
 800a35e:	6103      	str	r3, [r0, #16]
 800a360:	466a      	mov	r2, sp
 800a362:	3014      	adds	r0, #20
 800a364:	f001 f8aa 	bl	800b4bc <acc_radar_engine_acquire_adc_data>
 800a368:	9b02      	ldr	r3, [sp, #8]
 800a36a:	f8bd 6000 	ldrh.w	r6, [sp]
 800a36e:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800a372:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800a376:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a37a:	60a0      	str	r0, [r4, #8]
 800a37c:	1d20      	adds	r0, r4, #4
 800a37e:	80e6      	strh	r6, [r4, #6]
 800a380:	80a5      	strh	r5, [r4, #4]
 800a382:	7321      	strb	r1, [r4, #12]
 800a384:	7362      	strb	r2, [r4, #13]
 800a386:	6123      	str	r3, [r4, #16]
 800a388:	b004      	add	sp, #16
 800a38a:	bd70      	pop	{r4, r5, r6, pc}

0800a38c <acc_alg_cca_calculate>:
 800a38c:	2901      	cmp	r1, #1
 800a38e:	b538      	push	{r3, r4, r5, lr}
 800a390:	d922      	bls.n	800a3d8 <acc_alg_cca_calculate+0x4c>
 800a392:	1e8d      	subs	r5, r1, #2
 800a394:	1c83      	adds	r3, r0, #2
 800a396:	b2ad      	uxth	r5, r5
 800a398:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800a39c:	2400      	movs	r4, #0
 800a39e:	4602      	mov	r2, r0
 800a3a0:	3002      	adds	r0, #2
 800a3a2:	8853      	ldrh	r3, [r2, #2]
 800a3a4:	8812      	ldrh	r2, [r2, #0]
 800a3a6:	1a9b      	subs	r3, r3, r2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bfb8      	it	lt
 800a3ac:	425b      	neglt	r3, r3
 800a3ae:	4285      	cmp	r5, r0
 800a3b0:	441c      	add	r4, r3
 800a3b2:	d1f4      	bne.n	800a39e <acc_alg_cca_calculate+0x12>
 800a3b4:	ee07 4a90 	vmov	s15, r4
 800a3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3bc:	3901      	subs	r1, #1
 800a3be:	ee07 1a10 	vmov	s14, r1
 800a3c2:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800a3c6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a3ca:	f004 fe79 	bl	800f0c0 <log10f>
 800a3ce:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800a3d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	eddf 7a01 	vldr	s15, [pc, #4]	; 800a3e0 <acc_alg_cca_calculate+0x54>
 800a3dc:	e7ee      	b.n	800a3bc <acc_alg_cca_calculate+0x30>
 800a3de:	bf00      	nop
 800a3e0:	00000000 	.word	0x00000000

0800a3e4 <acc_element_connect>:
 800a3e4:	6001      	str	r1, [r0, #0]
 800a3e6:	4770      	bx	lr

0800a3e8 <event>:
 800a3e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a3ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a3ec:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 800a3f0:	6811      	ldr	r1, [r2, #0]
 800a3f2:	b570      	push	{r4, r5, r6, lr}
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 800a3fa:	4798      	blx	r3
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	7028      	strb	r0, [r5, #0]
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a406:	4618      	mov	r0, r3
 800a408:	4710      	bx	r2
 800a40a:	bf00      	nop

0800a40c <reset>:
 800a40c:	6800      	ldr	r0, [r0, #0]
 800a40e:	68c3      	ldr	r3, [r0, #12]
 800a410:	4718      	bx	r3
 800a412:	bf00      	nop

0800a414 <validate>:
 800a414:	6983      	ldr	r3, [r0, #24]
 800a416:	b510      	push	{r4, lr}
 800a418:	4604      	mov	r4, r0
 800a41a:	b113      	cbz	r3, 800a422 <validate+0xe>
 800a41c:	f7fd fb7c 	bl	8007b18 <acc_rss_integration_log_level>
 800a420:	b978      	cbnz	r0, 800a442 <validate+0x2e>
 800a422:	69e3      	ldr	r3, [r4, #28]
 800a424:	b143      	cbz	r3, 800a438 <validate+0x24>
 800a426:	f7fd fb77 	bl	8007b18 <acc_rss_integration_log_level>
 800a42a:	b128      	cbz	r0, 800a438 <validate+0x24>
 800a42c:	4b08      	ldr	r3, [pc, #32]	; (800a450 <validate+0x3c>)
 800a42e:	4a09      	ldr	r2, [pc, #36]	; (800a454 <validate+0x40>)
 800a430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a432:	4909      	ldr	r1, [pc, #36]	; (800a458 <validate+0x44>)
 800a434:	2001      	movs	r0, #1
 800a436:	4798      	blx	r3
 800a438:	6820      	ldr	r0, [r4, #0]
 800a43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43e:	6883      	ldr	r3, [r0, #8]
 800a440:	4718      	bx	r3
 800a442:	4b03      	ldr	r3, [pc, #12]	; (800a450 <validate+0x3c>)
 800a444:	4a05      	ldr	r2, [pc, #20]	; (800a45c <validate+0x48>)
 800a446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a448:	4903      	ldr	r1, [pc, #12]	; (800a458 <validate+0x44>)
 800a44a:	2001      	movs	r0, #1
 800a44c:	4798      	blx	r3
 800a44e:	e7e8      	b.n	800a422 <validate+0xe>
 800a450:	200007ec 	.word	0x200007ec
 800a454:	080122e4 	.word	0x080122e4
 800a458:	080122c8 	.word	0x080122c8
 800a45c:	080122b4 	.word	0x080122b4

0800a460 <saturation_check_i16>:
 800a460:	f001 bb32 	b.w	800bac8 <acc_alg_basic_saturation_check_i16>

0800a464 <saturation_check_u16>:
 800a464:	f001 bafc 	b.w	800ba60 <acc_alg_basic_saturation_check_u16>

0800a468 <acc_element_saturation_check_init>:
 800a468:	2903      	cmp	r1, #3
 800a46a:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 800a46e:	d00e      	beq.n	800a48e <acc_element_saturation_check_init+0x26>
 800a470:	2905      	cmp	r1, #5
 800a472:	d016      	beq.n	800a4a2 <acc_element_saturation_check_init+0x3a>
 800a474:	2902      	cmp	r1, #2
 800a476:	d014      	beq.n	800a4a2 <acc_element_saturation_check_init+0x3a>
 800a478:	b510      	push	{r4, lr}
 800a47a:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <acc_element_saturation_check_init+0x40>)
 800a47c:	4a0b      	ldr	r2, [pc, #44]	; (800a4ac <acc_element_saturation_check_init+0x44>)
 800a47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a480:	490b      	ldr	r1, [pc, #44]	; (800a4b0 <acc_element_saturation_check_init+0x48>)
 800a482:	2400      	movs	r4, #0
 800a484:	63c4      	str	r4, [r0, #60]	; 0x3c
 800a486:	4620      	mov	r0, r4
 800a488:	4798      	blx	r3
 800a48a:	4620      	mov	r0, r4
 800a48c:	bd10      	pop	{r4, pc}
 800a48e:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <acc_element_saturation_check_init+0x4c>)
 800a490:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a492:	4909      	ldr	r1, [pc, #36]	; (800a4b8 <acc_element_saturation_check_init+0x50>)
 800a494:	4a09      	ldr	r2, [pc, #36]	; (800a4bc <acc_element_saturation_check_init+0x54>)
 800a496:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <acc_element_saturation_check_init+0x58>)
 800a498:	60c3      	str	r3, [r0, #12]
 800a49a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a49e:	2001      	movs	r0, #1
 800a4a0:	4770      	bx	lr
 800a4a2:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <acc_element_saturation_check_init+0x5c>)
 800a4a4:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a4a6:	e7f4      	b.n	800a492 <acc_element_saturation_check_init+0x2a>
 800a4a8:	200007ec 	.word	0x200007ec
 800a4ac:	080122f4 	.word	0x080122f4
 800a4b0:	080122c8 	.word	0x080122c8
 800a4b4:	0800a461 	.word	0x0800a461
 800a4b8:	0800a3e9 	.word	0x0800a3e9
 800a4bc:	0800a415 	.word	0x0800a415
 800a4c0:	0800a40d 	.word	0x0800a40d
 800a4c4:	0800a465 	.word	0x0800a465

0800a4c8 <consume>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 800a4d0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a4d2:	6900      	ldr	r0, [r0, #16]
 800a4d4:	4798      	blx	r3
 800a4d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4d8:	2200      	movs	r2, #0
 800a4da:	611a      	str	r2, [r3, #16]
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	bf00      	nop

0800a4e0 <reset>:
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop

0800a4e4 <validate>:
 800a4e4:	6983      	ldr	r3, [r0, #24]
 800a4e6:	b510      	push	{r4, lr}
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	b113      	cbz	r3, 800a4f2 <validate+0xe>
 800a4ec:	f7fd fb14 	bl	8007b18 <acc_rss_integration_log_level>
 800a4f0:	b9c8      	cbnz	r0, 800a526 <validate+0x42>
 800a4f2:	69e3      	ldr	r3, [r4, #28]
 800a4f4:	b113      	cbz	r3, 800a4fc <validate+0x18>
 800a4f6:	f7fd fb0f 	bl	8007b18 <acc_rss_integration_log_level>
 800a4fa:	b948      	cbnz	r0, 800a510 <validate+0x2c>
 800a4fc:	6963      	ldr	r3, [r4, #20]
 800a4fe:	b183      	cbz	r3, 800a522 <validate+0x3e>
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <validate+0x50>)
 800a502:	4a0d      	ldr	r2, [pc, #52]	; (800a538 <validate+0x54>)
 800a504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a506:	490d      	ldr	r1, [pc, #52]	; (800a53c <validate+0x58>)
 800a508:	2000      	movs	r0, #0
 800a50a:	4798      	blx	r3
 800a50c:	2000      	movs	r0, #0
 800a50e:	bd10      	pop	{r4, pc}
 800a510:	4b08      	ldr	r3, [pc, #32]	; (800a534 <validate+0x50>)
 800a512:	4a0b      	ldr	r2, [pc, #44]	; (800a540 <validate+0x5c>)
 800a514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a516:	4909      	ldr	r1, [pc, #36]	; (800a53c <validate+0x58>)
 800a518:	2001      	movs	r0, #1
 800a51a:	4798      	blx	r3
 800a51c:	6963      	ldr	r3, [r4, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1ee      	bne.n	800a500 <validate+0x1c>
 800a522:	2001      	movs	r0, #1
 800a524:	bd10      	pop	{r4, pc}
 800a526:	4b03      	ldr	r3, [pc, #12]	; (800a534 <validate+0x50>)
 800a528:	4a06      	ldr	r2, [pc, #24]	; (800a544 <validate+0x60>)
 800a52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52c:	4903      	ldr	r1, [pc, #12]	; (800a53c <validate+0x58>)
 800a52e:	2001      	movs	r0, #1
 800a530:	4798      	blx	r3
 800a532:	e7de      	b.n	800a4f2 <validate+0xe>
 800a534:	200007ec 	.word	0x200007ec
 800a538:	08012320 	.word	0x08012320
 800a53c:	08012308 	.word	0x08012308
 800a540:	080122e4 	.word	0x080122e4
 800a544:	080122b4 	.word	0x080122b4

0800a548 <acc_element_sink_callback_init>:
 800a548:	b410      	push	{r4}
 800a54a:	4a05      	ldr	r2, [pc, #20]	; (800a560 <acc_element_sink_callback_init+0x18>)
 800a54c:	4c05      	ldr	r4, [pc, #20]	; (800a564 <acc_element_sink_callback_init+0x1c>)
 800a54e:	4b06      	ldr	r3, [pc, #24]	; (800a568 <acc_element_sink_callback_init+0x20>)
 800a550:	6401      	str	r1, [r0, #64]	; 0x40
 800a552:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800a556:	60c3      	str	r3, [r0, #12]
 800a558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	0800a4e5 	.word	0x0800a4e5
 800a564:	0800a4c9 	.word	0x0800a4c9
 800a568:	0800a4e1 	.word	0x0800a4e1

0800a56c <acc_sensor_reg_read>:
 800a56c:	b530      	push	{r4, r5, lr}
 800a56e:	b083      	sub	sp, #12
 800a570:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 800a574:	4614      	mov	r4, r2
 800a576:	2500      	movs	r5, #0
 800a578:	f8ad 1000 	strh.w	r1, [sp]
 800a57c:	2301      	movs	r3, #1
 800a57e:	2203      	movs	r2, #3
 800a580:	4669      	mov	r1, sp
 800a582:	f8ad 5002 	strh.w	r5, [sp, #2]
 800a586:	f8ad 5004 	strh.w	r5, [sp, #4]
 800a58a:	f7fd fa49 	bl	8007a20 <acc_rss_integration_sensor_device_transfer>
 800a58e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a592:	8023      	strh	r3, [r4, #0]
 800a594:	b003      	add	sp, #12
 800a596:	bd30      	pop	{r4, r5, pc}

0800a598 <acc_sensor_reg_write>:
 800a598:	b530      	push	{r4, r5, lr}
 800a59a:	b083      	sub	sp, #12
 800a59c:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 800a5a0:	4615      	mov	r5, r2
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	a901      	add	r1, sp, #4
 800a5a8:	f8ad 4004 	strh.w	r4, [sp, #4]
 800a5ac:	f8ad 5006 	strh.w	r5, [sp, #6]
 800a5b0:	f7fd fa36 	bl	8007a20 <acc_rss_integration_sensor_device_transfer>
 800a5b4:	b003      	add	sp, #12
 800a5b6:	bd30      	pop	{r4, r5, pc}

0800a5b8 <acc_sensor_reg_field_write>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	461d      	mov	r5, r3
 800a5c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a5c4:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 800a5c8:	f8ad 3000 	strh.w	r3, [sp]
 800a5cc:	2700      	movs	r7, #0
 800a5ce:	468a      	mov	sl, r1
 800a5d0:	4691      	mov	r9, r2
 800a5d2:	4669      	mov	r1, sp
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	4680      	mov	r8, r0
 800a5da:	f8ad 7002 	strh.w	r7, [sp, #2]
 800a5de:	f8ad 7004 	strh.w	r7, [sp, #4]
 800a5e2:	f7fd fa1d 	bl	8007a20 <acc_rss_integration_sensor_device_transfer>
 800a5e6:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800a5ea:	fa04 f10a 	lsl.w	r1, r4, sl
 800a5ee:	4071      	eors	r1, r6
 800a5f0:	ea01 0409 	and.w	r4, r1, r9
 800a5f4:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	4669      	mov	r1, sp
 800a5fe:	4074      	eors	r4, r6
 800a600:	2202      	movs	r2, #2
 800a602:	f8ad 5000 	strh.w	r5, [sp]
 800a606:	f8ad 4002 	strh.w	r4, [sp, #2]
 800a60a:	f7fd fa09 	bl	8007a20 <acc_rss_integration_sensor_device_transfer>
 800a60e:	b002      	add	sp, #8
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a614 <acc_sensor_conf_read_instr>:
 800a614:	b530      	push	{r4, r5, lr}
 800a616:	b085      	sub	sp, #20
 800a618:	2401      	movs	r4, #1
 800a61a:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 800a61e:	4623      	mov	r3, r4
 800a620:	2500      	movs	r5, #0
 800a622:	f8ad 1004 	strh.w	r1, [sp, #4]
 800a626:	2205      	movs	r2, #5
 800a628:	a901      	add	r1, sp, #4
 800a62a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800a62e:	f8ad 5008 	strh.w	r5, [sp, #8]
 800a632:	f8cd 500a 	str.w	r5, [sp, #10]
 800a636:	f7fd f9f3 	bl	8007a20 <acc_rss_integration_sensor_device_transfer>
 800a63a:	f10d 000a 	add.w	r0, sp, #10
 800a63e:	4622      	mov	r2, r4
 800a640:	4669      	mov	r1, sp
 800a642:	f7fd facd 	bl	8007be0 <acc_utils_transfer_buffer_to_uint32>
 800a646:	9800      	ldr	r0, [sp, #0]
 800a648:	b005      	add	sp, #20
 800a64a:	bd30      	pop	{r4, r5, pc}

0800a64c <acc_cpd_pll_divisors_calculate>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	edd0 7a00 	vldr	s15, [r0]
 800a652:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a738 <acc_cpd_pll_divisors_calculate+0xec>
 800a656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65e:	b082      	sub	sp, #8
 800a660:	dc3c      	bgt.n	800a6dc <acc_cpd_pll_divisors_calculate+0x90>
 800a662:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a73c <acc_cpd_pll_divisors_calculate+0xf0>
 800a666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66e:	d435      	bmi.n	800a6dc <acc_cpd_pll_divisors_calculate+0x90>
 800a670:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800a740 <acc_cpd_pll_divisors_calculate+0xf4>
 800a674:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a744 <acc_cpd_pll_divisors_calculate+0xf8>
 800a678:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800a748 <acc_cpd_pll_divisors_calculate+0xfc>
 800a67c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a680:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800a684:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a688:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a68c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a690:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a694:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a698:	ee16 3a90 	vmov	r3, s13
 800a69c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	f1a3 0210 	sub.w	r2, r3, #16
 800a6a6:	ee17 0a10 	vmov	r0, s14
 800a6aa:	b292      	uxth	r2, r2
 800a6ac:	2aef      	cmp	r2, #239	; 0xef
 800a6ae:	8108      	strh	r0, [r1, #8]
 800a6b0:	d814      	bhi.n	800a6dc <acc_cpd_pll_divisors_calculate+0x90>
 800a6b2:	2b3f      	cmp	r3, #63	; 0x3f
 800a6b4:	d938      	bls.n	800a728 <acc_cpd_pll_divisors_calculate+0xdc>
 800a6b6:	2bbf      	cmp	r3, #191	; 0xbf
 800a6b8:	f04f 0201 	mov.w	r2, #1
 800a6bc:	bf98      	it	ls
 800a6be:	f1a3 0040 	subls.w	r0, r3, #64	; 0x40
 800a6c2:	804a      	strh	r2, [r1, #2]
 800a6c4:	bf8c      	ite	hi
 800a6c6:	08d8      	lsrhi	r0, r3, #3
 800a6c8:	f3c0 00cf 	ubfxls	r0, r0, #3, #16
 800a6cc:	f003 0207 	and.w	r2, r3, #7
 800a6d0:	8088      	strh	r0, [r1, #4]
 800a6d2:	80ca      	strh	r2, [r1, #6]
 800a6d4:	2001      	movs	r0, #1
 800a6d6:	800b      	strh	r3, [r1, #0]
 800a6d8:	b002      	add	sp, #8
 800a6da:	bd10      	pop	{r4, pc}
 800a6dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a74c <acc_cpd_pll_divisors_calculate+0x100>
 800a6e8:	eddf 6a19 	vldr	s13, [pc, #100]	; 800a750 <acc_cpd_pll_divisors_calculate+0x104>
 800a6ec:	4b19      	ldr	r3, [pc, #100]	; (800a754 <acc_cpd_pll_divisors_calculate+0x108>)
 800a6ee:	4a1a      	ldr	r2, [pc, #104]	; (800a758 <acc_cpd_pll_divisors_calculate+0x10c>)
 800a6f0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a6f2:	491a      	ldr	r1, [pc, #104]	; (800a75c <acc_cpd_pll_divisors_calculate+0x110>)
 800a6f4:	bf4a      	itet	mi
 800a6f6:	4b1a      	ldrmi	r3, [pc, #104]	; (800a760 <acc_cpd_pll_divisors_calculate+0x114>)
 800a6f8:	4b1a      	ldrpl	r3, [pc, #104]	; (800a764 <acc_cpd_pll_divisors_calculate+0x118>)
 800a6fa:	eef1 7a67 	vnegmi.f32	s15, s15
 800a6fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a702:	2000      	movs	r0, #0
 800a704:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a708:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a70c:	ed8d 7a00 	vstr	s14, [sp]
 800a710:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a714:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71c:	edcd 7a01 	vstr	s15, [sp, #4]
 800a720:	47a0      	blx	r4
 800a722:	2000      	movs	r0, #0
 800a724:	b002      	add	sp, #8
 800a726:	bd10      	pop	{r4, pc}
 800a728:	2000      	movs	r0, #0
 800a72a:	2b2f      	cmp	r3, #47	; 0x2f
 800a72c:	bf88      	it	hi
 800a72e:	461a      	movhi	r2, r3
 800a730:	808a      	strh	r2, [r1, #4]
 800a732:	8048      	strh	r0, [r1, #2]
 800a734:	80c8      	strh	r0, [r1, #6]
 800a736:	e7cd      	b.n	800a6d4 <acc_cpd_pll_divisors_calculate+0x88>
 800a738:	4c989680 	.word	0x4c989680
 800a73c:	4b989680 	.word	0x4b989680
 800a740:	4f1502f9 	.word	0x4f1502f9
 800a744:	b55b38e8 	.word	0xb55b38e8
 800a748:	427c0000 	.word	0x427c0000
 800a74c:	350637bd 	.word	0x350637bd
 800a750:	49742400 	.word	0x49742400
 800a754:	200007ec 	.word	0x200007ec
 800a758:	08012348 	.word	0x08012348
 800a75c:	08012374 	.word	0x08012374
 800a760:	08011ad0 	.word	0x08011ad0
 800a764:	08012bb0 	.word	0x08012bb0

0800a768 <acc_cpd_pll_divisors_ref_divisor>:
 800a768:	eddf 7a02 	vldr	s15, [pc, #8]	; 800a774 <acc_cpd_pll_divisors_ref_divisor+0xc>
 800a76c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a770:	f004 bc4c 	b.w	800f00c <roundf>
 800a774:	4f1502f9 	.word	0x4f1502f9

0800a778 <acc_element_source_adc_init_radar_engine>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	9d04      	ldr	r5, [sp, #16]
 800a77c:	4604      	mov	r4, r0
 800a77e:	4608      	mov	r0, r1
 800a780:	63e1      	str	r1, [r4, #60]	; 0x3c
 800a782:	4611      	mov	r1, r2
 800a784:	461a      	mov	r2, r3
 800a786:	462b      	mov	r3, r5
 800a788:	f7ff f92e 	bl	80099e8 <acc_sensor_manager_prepare_radar_engine>
 800a78c:	896b      	ldrh	r3, [r5, #10]
 800a78e:	8723      	strh	r3, [r4, #56]	; 0x38
 800a790:	bd38      	pop	{r3, r4, r5, pc}
 800a792:	bf00      	nop

0800a794 <acc_element_source_adc_init>:
 800a794:	b510      	push	{r4, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	4604      	mov	r4, r0
 800a79a:	4608      	mov	r0, r1
 800a79c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a7a0:	9101      	str	r1, [sp, #4]
 800a7a2:	f7fd fcfd 	bl	80081a0 <acc_base_configuration_print>
 800a7a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a7aa:	9901      	ldr	r1, [sp, #4]
 800a7ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a7ae:	b004      	add	sp, #16
 800a7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7b4:	f7ff b964 	b.w	8009a80 <acc_sensor_manager_prepare_measurement>

0800a7b8 <acc_element_source_adc_release>:
 800a7b8:	b110      	cbz	r0, 800a7c0 <acc_element_source_adc_release+0x8>
 800a7ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a7bc:	f7ff ba26 	b.w	8009c0c <acc_sensor_manager_release_measurement>
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop

0800a7c4 <acc_element_source_adc_reset>:
 800a7c4:	6800      	ldr	r0, [r0, #0]
 800a7c6:	68c3      	ldr	r3, [r0, #12]
 800a7c8:	4718      	bx	r3
 800a7ca:	bf00      	nop

0800a7cc <acc_element_source_adc_validate>:
 800a7cc:	6800      	ldr	r0, [r0, #0]
 800a7ce:	6883      	ldr	r3, [r0, #8]
 800a7d0:	4718      	bx	r3
 800a7d2:	bf00      	nop

0800a7d4 <acc_element_source_adc_produce>:
 800a7d4:	b530      	push	{r4, r5, lr}
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a7da:	b083      	sub	sp, #12
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d02f      	beq.n	800a840 <acc_element_source_adc_produce+0x6c>
 800a7e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a7e2:	4a19      	ldr	r2, [pc, #100]	; (800a848 <acc_element_source_adc_produce+0x74>)
 800a7e4:	6a25      	ldr	r5, [r4, #32]
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	f7ff fa24 	bl	8009c34 <acc_sensor_manager_get_sensor_id>
 800a7ec:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800a7ee:	6028      	str	r0, [r5, #0]
 800a7f0:	6961      	ldr	r1, [r4, #20]
 800a7f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a7f4:	ab01      	add	r3, sp, #4
 800a7f6:	f7ff f869 	bl	80098cc <acc_sensor_manager_acquire_adc_data>
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	b1c0      	cbz	r0, 800a830 <acc_element_source_adc_produce+0x5c>
 800a7fe:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800a802:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800a804:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	6003      	str	r3, [r0, #0]
 800a80c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a80e:	7011      	strb	r1, [r2, #0]
 800a810:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a814:	701a      	strb	r2, [r3, #0]
 800a816:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a81a:	b90b      	cbnz	r3, 800a820 <acc_element_source_adc_produce+0x4c>
 800a81c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a820:	6820      	ldr	r0, [r4, #0]
 800a822:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a824:	7013      	strb	r3, [r2, #0]
 800a826:	6843      	ldr	r3, [r0, #4]
 800a828:	4798      	blx	r3
 800a82a:	4628      	mov	r0, r5
 800a82c:	b003      	add	sp, #12
 800a82e:	bd30      	pop	{r4, r5, pc}
 800a830:	4b06      	ldr	r3, [pc, #24]	; (800a84c <acc_element_source_adc_produce+0x78>)
 800a832:	4a07      	ldr	r2, [pc, #28]	; (800a850 <acc_element_source_adc_produce+0x7c>)
 800a834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a836:	4907      	ldr	r1, [pc, #28]	; (800a854 <acc_element_source_adc_produce+0x80>)
 800a838:	4798      	blx	r3
 800a83a:	4628      	mov	r0, r5
 800a83c:	b003      	add	sp, #12
 800a83e:	bd30      	pop	{r4, r5, pc}
 800a840:	4605      	mov	r5, r0
 800a842:	4628      	mov	r0, r5
 800a844:	b003      	add	sp, #12
 800a846:	bd30      	pop	{r4, r5, pc}
 800a848:	51645c3c 	.word	0x51645c3c
 800a84c:	200007ec 	.word	0x200007ec
 800a850:	08012388 	.word	0x08012388
 800a854:	080123a8 	.word	0x080123a8

0800a858 <acc_element_source_adc_inject_data>:
 800a858:	b570      	push	{r4, r5, r6, lr}
 800a85a:	4604      	mov	r4, r0
 800a85c:	6940      	ldr	r0, [r0, #20]
 800a85e:	4e08      	ldr	r6, [pc, #32]	; (800a880 <acc_element_source_adc_inject_data+0x28>)
 800a860:	4615      	mov	r5, r2
 800a862:	f001 fd91 	bl	800c388 <memcpy>
 800a866:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a868:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a86a:	6820      	ldr	r0, [r4, #0]
 800a86c:	6a22      	ldr	r2, [r4, #32]
 800a86e:	600d      	str	r5, [r1, #0]
 800a870:	2100      	movs	r1, #0
 800a872:	601e      	str	r6, [r3, #0]
 800a874:	6843      	ldr	r3, [r0, #4]
 800a876:	6011      	str	r1, [r2, #0]
 800a878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a87c:	4718      	bx	r3
 800a87e:	bf00      	nop
 800a880:	51645c3c 	.word	0x51645c3c

0800a884 <acc_cpd_cbank_and_vana_calibration>:
 800a884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a888:	ed2d 8b02 	vpush	{d8}
 800a88c:	4615      	mov	r5, r2
 800a88e:	b08b      	sub	sp, #44	; 0x2c
 800a890:	461e      	mov	r6, r3
 800a892:	ab09      	add	r3, sp, #36	; 0x24
 800a894:	2400      	movs	r4, #0
 800a896:	ee08 1a10 	vmov	s16, r1
 800a89a:	4683      	mov	fp, r0
 800a89c:	460a      	mov	r2, r1
 800a89e:	4601      	mov	r1, r0
 800a8a0:	6828      	ldr	r0, [r5, #0]
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	ab08      	add	r3, sp, #32
 800a8a6:	e9cd 6407 	strd	r6, r4, [sp, #28]
 800a8aa:	9409      	str	r4, [sp, #36]	; 0x24
 800a8ac:	f7ff f9c4 	bl	8009c38 <acc_sensor_protocol_r2_prepare_load>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d067      	beq.n	800a984 <acc_cpd_cbank_and_vana_calibration+0x100>
 800a8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b6:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800abd4 <acc_cpd_cbank_and_vana_calibration+0x350>
 800a8ba:	461e      	mov	r6, r3
 800a8bc:	f5c4 63ae 	rsb	r3, r4, #1392	; 0x570
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	429e      	cmp	r6, r3
 800a8c4:	bf28      	it	cs
 800a8c6:	461e      	movcs	r6, r3
 800a8c8:	9f08      	ldr	r7, [sp, #32]
 800a8ca:	4bb6      	ldr	r3, [pc, #728]	; (800aba4 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800a8cc:	ea4f 0954 	mov.w	r9, r4, lsr #1
 800a8d0:	0872      	lsrs	r2, r6, #1
 800a8d2:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	f001 fb10 	bl	800befc <acc_confprogram_copy>
 800a8dc:	686b      	ldr	r3, [r5, #4]
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	201b      	movs	r0, #27
 800a8e2:	b2b2      	uxth	r2, r6
 800a8e4:	b2a1      	uxth	r1, r4
 800a8e6:	9000      	str	r0, [sp, #0]
 800a8e8:	4643      	mov	r3, r8
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	9206      	str	r2, [sp, #24]
 800a8ee:	9105      	str	r1, [sp, #20]
 800a8f0:	f04f 0a19 	mov.w	sl, #25
 800a8f4:	f001 fa0a 	bl	800bd0c <acc_confprogram_patch_offset>
 800a8f8:	68ab      	ldr	r3, [r5, #8]
 800a8fa:	9301      	str	r3, [sp, #4]
 800a8fc:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a900:	4638      	mov	r0, r7
 800a902:	4643      	mov	r3, r8
 800a904:	f8cd a000 	str.w	sl, [sp]
 800a908:	f001 fa00 	bl	800bd0c <acc_confprogram_patch_offset>
 800a90c:	68eb      	ldr	r3, [r5, #12]
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	231a      	movs	r3, #26
 800a912:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a916:	4638      	mov	r0, r7
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	4643      	mov	r3, r8
 800a91c:	f001 f9f6 	bl	800bd0c <acc_confprogram_patch_offset>
 800a920:	8a2b      	ldrh	r3, [r5, #16]
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	2317      	movs	r3, #23
 800a926:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a92a:	4638      	mov	r0, r7
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	4643      	mov	r3, r8
 800a930:	f001 f9ec 	bl	800bd0c <acc_confprogram_patch_offset>
 800a934:	2310      	movs	r3, #16
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	2300      	movs	r3, #0
 800a93a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800a93e:	4638      	mov	r0, r7
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	4643      	mov	r3, r8
 800a944:	f001 f9e2 	bl	800bd0c <acc_confprogram_patch_offset>
 800a948:	4633      	mov	r3, r6
 800a94a:	6828      	ldr	r0, [r5, #0]
 800a94c:	465a      	mov	r2, fp
 800a94e:	fa1f f189 	uxth.w	r1, r9
 800a952:	f7fe fe81 	bl	8009658 <acc_sensor_r2_load_confmem>
 800a956:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a958:	f240 5373 	movw	r3, #1395	; 0x573
 800a95c:	4434      	add	r4, r6
 800a95e:	429c      	cmp	r4, r3
 800a960:	d9ac      	bls.n	800a8bc <acc_cpd_cbank_and_vana_calibration+0x38>
 800a962:	6828      	ldr	r0, [r5, #0]
 800a964:	4651      	mov	r1, sl
 800a966:	f7ff f9cb 	bl	8009d00 <acc_sensor_protocol_r2_run_program>
 800a96a:	4606      	mov	r6, r0
 800a96c:	b9b0      	cbnz	r0, 800a99c <acc_cpd_cbank_and_vana_calibration+0x118>
 800a96e:	4b8e      	ldr	r3, [pc, #568]	; (800aba8 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a970:	4a8e      	ldr	r2, [pc, #568]	; (800abac <acc_cpd_cbank_and_vana_calibration+0x328>)
 800a972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a974:	498e      	ldr	r1, [pc, #568]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a976:	4798      	blx	r3
 800a978:	4630      	mov	r0, r6
 800a97a:	b00b      	add	sp, #44	; 0x2c
 800a97c:	ecbd 8b02 	vpop	{d8}
 800a980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a984:	4b88      	ldr	r3, [pc, #544]	; (800aba8 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a986:	4a8b      	ldr	r2, [pc, #556]	; (800abb4 <acc_cpd_cbank_and_vana_calibration+0x330>)
 800a988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98a:	4989      	ldr	r1, [pc, #548]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a98c:	4606      	mov	r6, r0
 800a98e:	4798      	blx	r3
 800a990:	4630      	mov	r0, r6
 800a992:	b00b      	add	sp, #44	; 0x2c
 800a994:	ecbd 8b02 	vpop	{d8}
 800a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99c:	4886      	ldr	r0, [pc, #536]	; (800abb8 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800a99e:	f001 fabb 	bl	800bf18 <acc_diagnostic_log_set_scope>
 800a9a2:	6829      	ldr	r1, [r5, #0]
 800a9a4:	4885      	ldr	r0, [pc, #532]	; (800abbc <acc_cpd_cbank_and_vana_calibration+0x338>)
 800a9a6:	f001 fad7 	bl	800bf58 <acc_diagnostic_log_scalar>
 800a9aa:	4885      	ldr	r0, [pc, #532]	; (800abc0 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800a9ac:	2203      	movs	r2, #3
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	f001 faba 	bl	800bf28 <acc_diagnostic_log_declare_parameter>
 800a9b4:	682c      	ldr	r4, [r5, #0]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	2203      	movs	r2, #3
 800a9bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a9c0:	f7ff faf8 	bl	8009fb4 <acc_sensor_protocol_r2_wait_for_specific_event>
 800a9c4:	b960      	cbnz	r0, 800a9e0 <acc_cpd_cbank_and_vana_calibration+0x15c>
 800a9c6:	4b78      	ldr	r3, [pc, #480]	; (800aba8 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800a9c8:	4a7e      	ldr	r2, [pc, #504]	; (800abc4 <acc_cpd_cbank_and_vana_calibration+0x340>)
 800a9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9cc:	4978      	ldr	r1, [pc, #480]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	4798      	blx	r3
 800a9d2:	2600      	movs	r6, #0
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	b00b      	add	sp, #44	; 0x2c
 800a9d8:	ecbd 8b02 	vpop	{d8}
 800a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e0:	aa09      	add	r2, sp, #36	; 0x24
 800a9e2:	219d      	movs	r1, #157	; 0x9d
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7ff fdc1 	bl	800a56c <acc_sensor_reg_read>
 800a9ea:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800a9ee:	2006      	movs	r0, #6
 800a9f0:	aa09      	add	r2, sp, #36	; 0x24
 800a9f2:	f006 0607 	and.w	r6, r6, #7
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800a9fe:	f7fd f891 	bl	8007b24 <acc_probes_execute_uint16>
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff f9de 	bl	8009dc4 <acc_sensor_protocol_r2_ack_event>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d0dc      	beq.n	800a9c6 <acc_cpd_cbank_and_vana_calibration+0x142>
 800aa0c:	682c      	ldr	r4, [r5, #0]
 800aa0e:	9b07      	ldr	r3, [sp, #28]
 800aa10:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800aa14:	601e      	str	r6, [r3, #0]
 800aa16:	4620      	mov	r0, r4
 800aa18:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800aa20:	f7ff f9be 	bl	8009da0 <acc_sensor_protocol_r2_is_sensor_running>
 800aa24:	4605      	mov	r5, r0
 800aa26:	b168      	cbz	r0, 800aa44 <acc_cpd_cbank_and_vana_calibration+0x1c0>
 800aa28:	4e5f      	ldr	r6, [pc, #380]	; (800aba8 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800aa2a:	4a67      	ldr	r2, [pc, #412]	; (800abc8 <acc_cpd_cbank_and_vana_calibration+0x344>)
 800aa2c:	6b75      	ldr	r5, [r6, #52]	; 0x34
 800aa2e:	4960      	ldr	r1, [pc, #384]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800aa30:	4623      	mov	r3, r4
 800aa32:	2000      	movs	r0, #0
 800aa34:	47a8      	blx	r5
 800aa36:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800aa38:	4a64      	ldr	r2, [pc, #400]	; (800abcc <acc_cpd_cbank_and_vana_calibration+0x348>)
 800aa3a:	495d      	ldr	r1, [pc, #372]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	4798      	blx	r3
 800aa40:	2600      	movs	r6, #0
 800aa42:	e7a5      	b.n	800a990 <acc_cpd_cbank_and_vana_calibration+0x10c>
 800aa44:	9601      	str	r6, [sp, #4]
 800aa46:	2311      	movs	r3, #17
 800aa48:	4e61      	ldr	r6, [pc, #388]	; (800abd0 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800aa4a:	4956      	ldr	r1, [pc, #344]	; (800aba4 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800aa4c:	9602      	str	r6, [sp, #8]
 800aa4e:	4602      	mov	r2, r0
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	4620      	mov	r0, r4
 800aa54:	4b5f      	ldr	r3, [pc, #380]	; (800abd4 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800aa56:	f001 f9e1 	bl	800be1c <acc_confprogram_live_patch>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	4950      	ldr	r1, [pc, #320]	; (800aba4 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800aa64:	4b5b      	ldr	r3, [pc, #364]	; (800abd4 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800aa66:	462a      	mov	r2, r5
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f001 f9d7 	bl	800be1c <acc_confprogram_live_patch>
 800aa6e:	462e      	mov	r6, r5
 800aa70:	4853      	ldr	r0, [pc, #332]	; (800abc0 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800aa72:	4629      	mov	r1, r5
 800aa74:	f001 fa60 	bl	800bf38 <acc_diagnostic_log_set_parameter>
 800aa78:	4a55      	ldr	r2, [pc, #340]	; (800abd0 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800aa7a:	494a      	ldr	r1, [pc, #296]	; (800aba4 <acc_cpd_cbank_and_vana_calibration+0x320>)
 800aa7c:	231f      	movs	r3, #31
 800aa7e:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	4620      	mov	r0, r4
 800aa86:	4b53      	ldr	r3, [pc, #332]	; (800abd4 <acc_cpd_cbank_and_vana_calibration+0x350>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f001 f9c7 	bl	800be1c <acc_confprogram_live_patch>
 800aa8e:	f240 11d1 	movw	r1, #465	; 0x1d1
 800aa92:	4620      	mov	r0, r4
 800aa94:	f7ff f934 	bl	8009d00 <acc_sensor_protocol_r2_run_program>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	f000 80bf 	beq.w	800ac1c <acc_cpd_cbank_and_vana_calibration+0x398>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2209      	movs	r2, #9
 800aaa2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f7ff fa84 	bl	8009fb4 <acc_sensor_protocol_r2_wait_for_specific_event>
 800aaac:	b938      	cbnz	r0, 800aabe <acc_cpd_cbank_and_vana_calibration+0x23a>
 800aaae:	4e3e      	ldr	r6, [pc, #248]	; (800aba8 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800aab0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800aab2:	4a49      	ldr	r2, [pc, #292]	; (800abd8 <acc_cpd_cbank_and_vana_calibration+0x354>)
 800aab4:	493e      	ldr	r1, [pc, #248]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800aab6:	462b      	mov	r3, r5
 800aab8:	2000      	movs	r0, #0
 800aaba:	47a0      	blx	r4
 800aabc:	e7bb      	b.n	800aa36 <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800aabe:	ee18 0a10 	vmov	r0, s16
 800aac2:	2110      	movs	r1, #16
 800aac4:	f7fe fe00 	bl	80096c8 <acc_sensor_r2_buffer_processed_verify_size>
 800aac8:	b928      	cbnz	r0, 800aad6 <acc_cpd_cbank_and_vana_calibration+0x252>
 800aaca:	4e37      	ldr	r6, [pc, #220]	; (800aba8 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800aacc:	4a43      	ldr	r2, [pc, #268]	; (800abdc <acc_cpd_cbank_and_vana_calibration+0x358>)
 800aace:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800aad0:	4937      	ldr	r1, [pc, #220]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800aad2:	4798      	blx	r3
 800aad4:	e7ec      	b.n	800aab0 <acc_cpd_cbank_and_vana_calibration+0x22c>
 800aad6:	2310      	movs	r3, #16
 800aad8:	2200      	movs	r2, #0
 800aada:	4659      	mov	r1, fp
 800aadc:	4620      	mov	r0, r4
 800aade:	f7fe fdfb 	bl	80096d8 <acc_sensor_r2_buffer_processed_read>
 800aae2:	2310      	movs	r3, #16
 800aae4:	4602      	mov	r2, r0
 800aae6:	4621      	mov	r1, r4
 800aae8:	4682      	mov	sl, r0
 800aaea:	2000      	movs	r0, #0
 800aaec:	f7fd f81a 	bl	8007b24 <acc_probes_execute_uint16>
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f7ff f967 	bl	8009dc4 <acc_sensor_protocol_r2_ack_event>
 800aaf6:	4680      	mov	r8, r0
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d0d8      	beq.n	800aaae <acc_cpd_cbank_and_vana_calibration+0x22a>
 800aafc:	2700      	movs	r7, #0
 800aafe:	46b9      	mov	r9, r7
 800ab00:	4651      	mov	r1, sl
 800ab02:	f10a 0c1e 	add.w	ip, sl, #30
 800ab06:	884b      	ldrh	r3, [r1, #2]
 800ab08:	f831 2b02 	ldrh.w	r2, [r1], #2
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	4499      	add	r9, r3
 800ab10:	bf34      	ite	cc
 800ab12:	1ad3      	subcc	r3, r2, r3
 800ab14:	1a9b      	subcs	r3, r3, r2
 800ab16:	429f      	cmp	r7, r3
 800ab18:	bf38      	it	cc
 800ab1a:	461f      	movcc	r7, r3
 800ab1c:	458c      	cmp	ip, r1
 800ab1e:	d1f2      	bne.n	800ab06 <acc_cpd_cbank_and_vana_calibration+0x282>
 800ab20:	4927      	ldr	r1, [pc, #156]	; (800abc0 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800ab22:	482f      	ldr	r0, [pc, #188]	; (800abe0 <acc_cpd_cbank_and_vana_calibration+0x35c>)
 800ab24:	f001 fa10 	bl	800bf48 <acc_diagnostic_log_array>
 800ab28:	2110      	movs	r1, #16
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	f001 fa1c 	bl	800bf68 <acc_diagnostic_log_data_u16>
 800ab30:	f8ba 3000 	ldrh.w	r3, [sl]
 800ab34:	4499      	add	r9, r3
 800ab36:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800ab3a:	f5a9 43f2 	sub.w	r3, r9, #30976	; 0x7900
 800ab3e:	3b18      	subs	r3, #24
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800ab46:	428b      	cmp	r3, r1
 800ab48:	d852      	bhi.n	800abf0 <acc_cpd_cbank_and_vana_calibration+0x36c>
 800ab4a:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 800ab4e:	d84f      	bhi.n	800abf0 <acc_cpd_cbank_and_vana_calibration+0x36c>
 800ab50:	f7fc ffe2 	bl	8007b18 <acc_rss_integration_log_level>
 800ab54:	2803      	cmp	r0, #3
 800ab56:	4646      	mov	r6, r8
 800ab58:	d90a      	bls.n	800ab70 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800ab5a:	4a13      	ldr	r2, [pc, #76]	; (800aba8 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800ab5c:	9701      	str	r7, [sp, #4]
 800ab5e:	fa1f f389 	uxth.w	r3, r9
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	4912      	ldr	r1, [pc, #72]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800ab66:	4623      	mov	r3, r4
 800ab68:	2004      	movs	r0, #4
 800ab6a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ab6c:	4a1d      	ldr	r2, [pc, #116]	; (800abe4 <acc_cpd_cbank_and_vana_calibration+0x360>)
 800ab6e:	47a0      	blx	r4
 800ab70:	9b07      	ldr	r3, [sp, #28]
 800ab72:	711d      	strb	r5, [r3, #4]
 800ab74:	f7fc ffd0 	bl	8007b18 <acc_rss_integration_log_level>
 800ab78:	2801      	cmp	r0, #1
 800ab7a:	d909      	bls.n	800ab90 <acc_cpd_cbank_and_vana_calibration+0x30c>
 800ab7c:	9907      	ldr	r1, [sp, #28]
 800ab7e:	4a0a      	ldr	r2, [pc, #40]	; (800aba8 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800ab80:	790b      	ldrb	r3, [r1, #4]
 800ab82:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	680b      	ldr	r3, [r1, #0]
 800ab88:	4a17      	ldr	r2, [pc, #92]	; (800abe8 <acc_cpd_cbank_and_vana_calibration+0x364>)
 800ab8a:	4909      	ldr	r1, [pc, #36]	; (800abb0 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800ab8c:	2002      	movs	r0, #2
 800ab8e:	47a0      	blx	r4
 800ab90:	9c07      	ldr	r4, [sp, #28]
 800ab92:	4816      	ldr	r0, [pc, #88]	; (800abec <acc_cpd_cbank_and_vana_calibration+0x368>)
 800ab94:	6821      	ldr	r1, [r4, #0]
 800ab96:	f001 f9df 	bl	800bf58 <acc_diagnostic_log_scalar>
 800ab9a:	7921      	ldrb	r1, [r4, #4]
 800ab9c:	4808      	ldr	r0, [pc, #32]	; (800abc0 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 800ab9e:	f001 f9db 	bl	800bf58 <acc_diagnostic_log_scalar>
 800aba2:	e6f5      	b.n	800a990 <acc_cpd_cbank_and_vana_calibration+0x10c>
 800aba4:	0800f6f0 	.word	0x0800f6f0
 800aba8:	200007ec 	.word	0x200007ec
 800abac:	08012420 	.word	0x08012420
 800abb0:	08012400 	.word	0x08012400
 800abb4:	080123bc 	.word	0x080123bc
 800abb8:	08012404 	.word	0x08012404
 800abbc:	08012454 	.word	0x08012454
 800abc0:	08012460 	.word	0x08012460
 800abc4:	0801246c 	.word	0x0801246c
 800abc8:	08012484 	.word	0x08012484
 800abcc:	0801254c 	.word	0x0801254c
 800abd0:	080095fd 	.word	0x080095fd
 800abd4:	08012d98 	.word	0x08012d98
 800abd8:	08012520 	.word	0x08012520
 800abdc:	080124f8 	.word	0x080124f8
 800abe0:	08012510 	.word	0x08012510
 800abe4:	08012584 	.word	0x08012584
 800abe8:	08012564 	.word	0x08012564
 800abec:	08012578 	.word	0x08012578
 800abf0:	f7fc ff92 	bl	8007b18 <acc_rss_integration_log_level>
 800abf4:	2803      	cmp	r0, #3
 800abf6:	d90a      	bls.n	800ac0e <acc_cpd_cbank_and_vana_calibration+0x38a>
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800abfa:	9701      	str	r7, [sp, #4]
 800abfc:	fa1f f289 	uxth.w	r2, r9
 800ac00:	9200      	str	r2, [sp, #0]
 800ac02:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800ac04:	4a0a      	ldr	r2, [pc, #40]	; (800ac30 <acc_cpd_cbank_and_vana_calibration+0x3ac>)
 800ac06:	490b      	ldr	r1, [pc, #44]	; (800ac34 <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 800ac08:	4623      	mov	r3, r4
 800ac0a:	2004      	movs	r0, #4
 800ac0c:	47a8      	blx	r5
 800ac0e:	b10e      	cbz	r6, 800ac14 <acc_cpd_cbank_and_vana_calibration+0x390>
 800ac10:	4e06      	ldr	r6, [pc, #24]	; (800ac2c <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800ac12:	e710      	b.n	800aa36 <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800ac14:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800ac18:	2601      	movs	r6, #1
 800ac1a:	e729      	b.n	800aa70 <acc_cpd_cbank_and_vana_calibration+0x1ec>
 800ac1c:	4e03      	ldr	r6, [pc, #12]	; (800ac2c <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 800ac1e:	4a06      	ldr	r2, [pc, #24]	; (800ac38 <acc_cpd_cbank_and_vana_calibration+0x3b4>)
 800ac20:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800ac22:	4904      	ldr	r1, [pc, #16]	; (800ac34 <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 800ac24:	462b      	mov	r3, r5
 800ac26:	47a0      	blx	r4
 800ac28:	e705      	b.n	800aa36 <acc_cpd_cbank_and_vana_calibration+0x1b2>
 800ac2a:	bf00      	nop
 800ac2c:	200007ec 	.word	0x200007ec
 800ac30:	08012584 	.word	0x08012584
 800ac34:	08012400 	.word	0x08012400
 800ac38:	080124b8 	.word	0x080124b8

0800ac3c <acc_cpd_sparse_sweep_load_program>:
 800ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac40:	ed2d 8b04 	vpush	{d8-d9}
 800ac44:	4614      	mov	r4, r2
 800ac46:	b08f      	sub	sp, #60	; 0x3c
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	460d      	mov	r5, r1
 800ac4e:	ee08 0a90 	vmov	s17, r0
 800ac52:	4601      	mov	r1, r0
 800ac54:	4698      	mov	r8, r3
 800ac56:	2015      	movs	r0, #21
 800ac58:	23b4      	movs	r3, #180	; 0xb4
 800ac5a:	f7fc ff7b 	bl	8007b54 <acc_probes_execute_struct>
 800ac5e:	ab0d      	add	r3, sp, #52	; 0x34
 800ac60:	4622      	mov	r2, r4
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	4629      	mov	r1, r5
 800ac66:	4630      	mov	r0, r6
 800ac68:	2400      	movs	r4, #0
 800ac6a:	ab0c      	add	r3, sp, #48	; 0x30
 800ac6c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800ac70:	f7fe ffe2 	bl	8009c38 <acc_sensor_protocol_r2_prepare_load>
 800ac74:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f000 83e6 	beq.w	800b448 <acc_cpd_sparse_sweep_load_program+0x80c>
 800ac7c:	ee09 5a10 	vmov	s18, r5
 800ac80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac82:	f8df b010 	ldr.w	fp, [pc, #16]	; 800ac94 <acc_cpd_sparse_sweep_load_program+0x58>
 800ac86:	ed9f 8a02 	vldr	s16, [pc, #8]	; 800ac90 <acc_cpd_sparse_sweep_load_program+0x54>
 800ac8a:	9403      	str	r4, [sp, #12]
 800ac8c:	e130      	b.n	800aef0 <acc_cpd_sparse_sweep_load_program+0x2b4>
 800ac8e:	bf00      	nop
 800ac90:	3751b717 	.word	0x3751b717
 800ac94:	08013914 	.word	0x08013914
 800ac98:	1f9f      	subs	r7, r3, #6
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	4699      	mov	r9, r3
 800ac9e:	2274      	movs	r2, #116	; 0x74
 800aca0:	e9cd 2300 	strd	r2, r3, [sp]
 800aca4:	4629      	mov	r1, r5
 800aca6:	465b      	mov	r3, fp
 800aca8:	4632      	mov	r2, r6
 800acaa:	4620      	mov	r0, r4
 800acac:	f001 f82e 	bl	800bd0c <acc_confprogram_patch_offset>
 800acb0:	2375      	movs	r3, #117	; 0x75
 800acb2:	e9cd 3900 	strd	r3, r9, [sp]
 800acb6:	4632      	mov	r2, r6
 800acb8:	465b      	mov	r3, fp
 800acba:	4629      	mov	r1, r5
 800acbc:	4620      	mov	r0, r4
 800acbe:	f001 f825 	bl	800bd0c <acc_confprogram_patch_offset>
 800acc2:	2376      	movs	r3, #118	; 0x76
 800acc4:	e9cd 3700 	strd	r3, r7, [sp]
 800acc8:	4632      	mov	r2, r6
 800acca:	465b      	mov	r3, fp
 800accc:	4629      	mov	r1, r5
 800acce:	4620      	mov	r0, r4
 800acd0:	f001 f81c 	bl	800bd0c <acc_confprogram_patch_offset>
 800acd4:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	2305      	movs	r3, #5
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	4632      	mov	r2, r6
 800ace0:	465b      	mov	r3, fp
 800ace2:	4629      	mov	r1, r5
 800ace4:	4620      	mov	r0, r4
 800ace6:	f001 f811 	bl	800bd0c <acc_confprogram_patch_offset>
 800acea:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800acee:	015b      	lsls	r3, r3, #5
 800acf0:	3b03      	subs	r3, #3
 800acf2:	2263      	movs	r2, #99	; 0x63
 800acf4:	e9cd 2300 	strd	r2, r3, [sp]
 800acf8:	4629      	mov	r1, r5
 800acfa:	465b      	mov	r3, fp
 800acfc:	4632      	mov	r2, r6
 800acfe:	4620      	mov	r0, r4
 800ad00:	f001 f804 	bl	800bd0c <acc_confprogram_patch_offset>
 800ad04:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800ad08:	015b      	lsls	r3, r3, #5
 800ad0a:	085b      	lsrs	r3, r3, #1
 800ad0c:	3b03      	subs	r3, #3
 800ad0e:	2264      	movs	r2, #100	; 0x64
 800ad10:	e9cd 2300 	strd	r2, r3, [sp]
 800ad14:	4629      	mov	r1, r5
 800ad16:	465b      	mov	r3, fp
 800ad18:	4632      	mov	r2, r6
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fff6 	bl	800bd0c <acc_confprogram_patch_offset>
 800ad20:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	23e1      	movs	r3, #225	; 0xe1
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	4632      	mov	r2, r6
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	4629      	mov	r1, r5
 800ad30:	4620      	mov	r0, r4
 800ad32:	f000 ffeb 	bl	800bd0c <acc_confprogram_patch_offset>
 800ad36:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 800ad3a:	9301      	str	r3, [sp, #4]
 800ad3c:	23f1      	movs	r3, #241	; 0xf1
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	4632      	mov	r2, r6
 800ad42:	465b      	mov	r3, fp
 800ad44:	4629      	mov	r1, r5
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 ffe0 	bl	800bd0c <acc_confprogram_patch_offset>
 800ad4c:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	2381      	movs	r3, #129	; 0x81
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	4632      	mov	r2, r6
 800ad58:	465b      	mov	r3, fp
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 ffd5 	bl	800bd0c <acc_confprogram_patch_offset>
 800ad62:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	23e7      	movs	r3, #231	; 0xe7
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	4632      	mov	r2, r6
 800ad6e:	465b      	mov	r3, fp
 800ad70:	4629      	mov	r1, r5
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 ffca 	bl	800bd0c <acc_confprogram_patch_offset>
 800ad78:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	237f      	movs	r3, #127	; 0x7f
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	4632      	mov	r2, r6
 800ad84:	465b      	mov	r3, fp
 800ad86:	4629      	mov	r1, r5
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 ffbf 	bl	800bd0c <acc_confprogram_patch_offset>
 800ad8e:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
 800ad92:	9301      	str	r3, [sp, #4]
 800ad94:	23cc      	movs	r3, #204	; 0xcc
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	4632      	mov	r2, r6
 800ad9a:	465b      	mov	r3, fp
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 ffb4 	bl	800bd0c <acc_confprogram_patch_offset>
 800ada4:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
 800ada8:	9301      	str	r3, [sp, #4]
 800adaa:	2387      	movs	r3, #135	; 0x87
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	4632      	mov	r2, r6
 800adb0:	465b      	mov	r3, fp
 800adb2:	4629      	mov	r1, r5
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 ffa9 	bl	800bd0c <acc_confprogram_patch_offset>
 800adba:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	237e      	movs	r3, #126	; 0x7e
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	4632      	mov	r2, r6
 800adc6:	465b      	mov	r3, fp
 800adc8:	4629      	mov	r1, r5
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 ff9e 	bl	800bd0c <acc_confprogram_patch_offset>
 800add0:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	23ca      	movs	r3, #202	; 0xca
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	4632      	mov	r2, r6
 800addc:	465b      	mov	r3, fp
 800adde:	4629      	mov	r1, r5
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 ff93 	bl	800bd0c <acc_confprogram_patch_offset>
 800ade6:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	2386      	movs	r3, #134	; 0x86
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	4632      	mov	r2, r6
 800adf2:	465b      	mov	r3, fp
 800adf4:	4629      	mov	r1, r5
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 ff88 	bl	800bd0c <acc_confprogram_patch_offset>
 800adfc:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	23cb      	movs	r3, #203	; 0xcb
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	4632      	mov	r2, r6
 800ae08:	465b      	mov	r3, fp
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 ff7d 	bl	800bd0c <acc_confprogram_patch_offset>
 800ae12:	f898 7070 	ldrb.w	r7, [r8, #112]	; 0x70
 800ae16:	2f00      	cmp	r7, #0
 800ae18:	f040 8237 	bne.w	800b28a <acc_cpd_sparse_sweep_load_program+0x64e>
 800ae1c:	23da      	movs	r3, #218	; 0xda
 800ae1e:	2201      	movs	r2, #1
 800ae20:	e9cd 3200 	strd	r3, r2, [sp]
 800ae24:	4629      	mov	r1, r5
 800ae26:	465b      	mov	r3, fp
 800ae28:	4632      	mov	r2, r6
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 ff6e 	bl	800bd0c <acc_confprogram_patch_offset>
 800ae30:	23db      	movs	r3, #219	; 0xdb
 800ae32:	e9cd 3700 	strd	r3, r7, [sp]
 800ae36:	4632      	mov	r2, r6
 800ae38:	465b      	mov	r3, fp
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f000 ff65 	bl	800bd0c <acc_confprogram_patch_offset>
 800ae42:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 800ae46:	22e6      	movs	r2, #230	; 0xe6
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	e9cd 2300 	strd	r2, r3, [sp]
 800ae4e:	4629      	mov	r1, r5
 800ae50:	465b      	mov	r3, fp
 800ae52:	4632      	mov	r2, r6
 800ae54:	4620      	mov	r0, r4
 800ae56:	f000 ff59 	bl	800bd0c <acc_confprogram_patch_offset>
 800ae5a:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 800ae5e:	9301      	str	r3, [sp, #4]
 800ae60:	23d7      	movs	r3, #215	; 0xd7
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	4632      	mov	r2, r6
 800ae66:	465b      	mov	r3, fp
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 ff4e 	bl	800bd0c <acc_confprogram_patch_offset>
 800ae70:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	2378      	movs	r3, #120	; 0x78
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	465b      	mov	r3, fp
 800ae7e:	4629      	mov	r1, r5
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 ff43 	bl	800bd0c <acc_confprogram_patch_offset>
 800ae86:	edd8 7a20 	vldr	s15, [r8, #128]	; 0x80
 800ae8a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ae8e:	22e8      	movs	r2, #232	; 0xe8
 800ae90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae94:	9200      	str	r2, [sp, #0]
 800ae96:	ee17 3a90 	vmov	r3, s15
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	4632      	mov	r2, r6
 800aea2:	465b      	mov	r3, fp
 800aea4:	4629      	mov	r1, r5
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 ff30 	bl	800bd0c <acc_confprogram_patch_offset>
 800aeac:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800aeb0:	9301      	str	r3, [sp, #4]
 800aeb2:	23d8      	movs	r3, #216	; 0xd8
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	4632      	mov	r2, r6
 800aeb8:	465b      	mov	r3, fp
 800aeba:	4629      	mov	r1, r5
 800aebc:	4620      	mov	r0, r4
 800aebe:	f000 ff25 	bl	800bd0c <acc_confprogram_patch_offset>
 800aec2:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f040 82af 	bne.w	800b42a <acc_cpd_sparse_sweep_load_program+0x7ee>
 800aecc:	9b04      	ldr	r3, [sp, #16]
 800aece:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800aed2:	ee19 2a10 	vmov	r2, s18
 800aed6:	ee18 0a90 	vmov	r0, s17
 800aeda:	f7fe fbbd 	bl	8009658 <acc_sensor_r2_load_confmem>
 800aede:	9903      	ldr	r1, [sp, #12]
 800aee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aee2:	f240 726d 	movw	r2, #1901	; 0x76d
 800aee6:	4419      	add	r1, r3
 800aee8:	4291      	cmp	r1, r2
 800aeea:	9103      	str	r1, [sp, #12]
 800aeec:	f200 82ac 	bhi.w	800b448 <acc_cpd_sparse_sweep_load_program+0x80c>
 800aef0:	9d03      	ldr	r5, [sp, #12]
 800aef2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800aef4:	4868      	ldr	r0, [pc, #416]	; (800b098 <acc_cpd_sparse_sweep_load_program+0x45c>)
 800aef6:	f5c5 62ed 	rsb	r2, r5, #1896	; 0x768
 800aefa:	3206      	adds	r2, #6
 800aefc:	429a      	cmp	r2, r3
 800aefe:	4616      	mov	r6, r2
 800af00:	bf28      	it	cs
 800af02:	461e      	movcs	r6, r3
 800af04:	086b      	lsrs	r3, r5, #1
 800af06:	0872      	lsrs	r2, r6, #1
 800af08:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800af0c:	4621      	mov	r1, r4
 800af0e:	9604      	str	r6, [sp, #16]
 800af10:	9305      	str	r3, [sp, #20]
 800af12:	f000 fff3 	bl	800befc <acc_confprogram_copy>
 800af16:	f8d8 3000 	ldr.w	r3, [r8]
 800af1a:	9301      	str	r3, [sp, #4]
 800af1c:	b2b6      	uxth	r6, r6
 800af1e:	b2ad      	uxth	r5, r5
 800af20:	23d5      	movs	r3, #213	; 0xd5
 800af22:	4632      	mov	r2, r6
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	465b      	mov	r3, fp
 800af2c:	f000 feee 	bl	800bd0c <acc_confprogram_patch_offset>
 800af30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	23d3      	movs	r3, #211	; 0xd3
 800af38:	4632      	mov	r2, r6
 800af3a:	4629      	mov	r1, r5
 800af3c:	4620      	mov	r0, r4
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	465b      	mov	r3, fp
 800af42:	f000 fee3 	bl	800bd0c <acc_confprogram_patch_offset>
 800af46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af4a:	9301      	str	r3, [sp, #4]
 800af4c:	23d4      	movs	r3, #212	; 0xd4
 800af4e:	4632      	mov	r2, r6
 800af50:	4629      	mov	r1, r5
 800af52:	4620      	mov	r0, r4
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	465b      	mov	r3, fp
 800af58:	f000 fed8 	bl	800bd0c <acc_confprogram_patch_offset>
 800af5c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800af60:	9301      	str	r3, [sp, #4]
 800af62:	23d1      	movs	r3, #209	; 0xd1
 800af64:	4632      	mov	r2, r6
 800af66:	4629      	mov	r1, r5
 800af68:	4620      	mov	r0, r4
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	465b      	mov	r3, fp
 800af6e:	f000 fecd 	bl	800bd0c <acc_confprogram_patch_offset>
 800af72:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	2365      	movs	r3, #101	; 0x65
 800af7a:	4632      	mov	r2, r6
 800af7c:	4629      	mov	r1, r5
 800af7e:	4620      	mov	r0, r4
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	465b      	mov	r3, fp
 800af84:	f000 fec2 	bl	800bd0c <acc_confprogram_patch_offset>
 800af88:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	23f3      	movs	r3, #243	; 0xf3
 800af90:	4632      	mov	r2, r6
 800af92:	4629      	mov	r1, r5
 800af94:	4620      	mov	r0, r4
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	465b      	mov	r3, fp
 800af9a:	f000 feb7 	bl	800bd0c <acc_confprogram_patch_offset>
 800af9e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	23eb      	movs	r3, #235	; 0xeb
 800afa6:	4632      	mov	r2, r6
 800afa8:	4629      	mov	r1, r5
 800afaa:	4620      	mov	r0, r4
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	465b      	mov	r3, fp
 800afb0:	f000 feac 	bl	800bd0c <acc_confprogram_patch_offset>
 800afb4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800afb8:	9301      	str	r3, [sp, #4]
 800afba:	23ff      	movs	r3, #255	; 0xff
 800afbc:	4632      	mov	r2, r6
 800afbe:	4629      	mov	r1, r5
 800afc0:	4620      	mov	r0, r4
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	465b      	mov	r3, fp
 800afc6:	f000 fea1 	bl	800bd0c <acc_confprogram_patch_offset>
 800afca:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	23e3      	movs	r3, #227	; 0xe3
 800afd2:	4632      	mov	r2, r6
 800afd4:	4629      	mov	r1, r5
 800afd6:	4620      	mov	r0, r4
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	465b      	mov	r3, fp
 800afdc:	f000 fe96 	bl	800bd0c <acc_confprogram_patch_offset>
 800afe0:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	23e4      	movs	r3, #228	; 0xe4
 800afe8:	4632      	mov	r2, r6
 800afea:	4629      	mov	r1, r5
 800afec:	4620      	mov	r0, r4
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	465b      	mov	r3, fp
 800aff2:	f000 fe8b 	bl	800bd0c <acc_confprogram_patch_offset>
 800aff6:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800affa:	9301      	str	r3, [sp, #4]
 800affc:	2383      	movs	r3, #131	; 0x83
 800affe:	4632      	mov	r2, r6
 800b000:	4629      	mov	r1, r5
 800b002:	4620      	mov	r0, r4
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	465b      	mov	r3, fp
 800b008:	f000 fe80 	bl	800bd0c <acc_confprogram_patch_offset>
 800b00c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	2384      	movs	r3, #132	; 0x84
 800b014:	4632      	mov	r2, r6
 800b016:	4629      	mov	r1, r5
 800b018:	4620      	mov	r0, r4
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	465b      	mov	r3, fp
 800b01e:	f000 fe75 	bl	800bd0c <acc_confprogram_patch_offset>
 800b022:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	2382      	movs	r3, #130	; 0x82
 800b02a:	4632      	mov	r2, r6
 800b02c:	4629      	mov	r1, r5
 800b02e:	4620      	mov	r0, r4
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	2700      	movs	r7, #0
 800b034:	465b      	mov	r3, fp
 800b036:	f000 fe69 	bl	800bd0c <acc_confprogram_patch_offset>
 800b03a:	4632      	mov	r2, r6
 800b03c:	4629      	mov	r1, r5
 800b03e:	4620      	mov	r0, r4
 800b040:	465b      	mov	r3, fp
 800b042:	e9cd 7700 	strd	r7, r7, [sp]
 800b046:	f000 fe61 	bl	800bd0c <acc_confprogram_patch_offset>
 800b04a:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	23f2      	movs	r3, #242	; 0xf2
 800b052:	4632      	mov	r2, r6
 800b054:	4629      	mov	r1, r5
 800b056:	4620      	mov	r0, r4
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	465b      	mov	r3, fp
 800b05c:	f000 fe56 	bl	800bd0c <acc_confprogram_patch_offset>
 800b060:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	23d9      	movs	r3, #217	; 0xd9
 800b068:	4632      	mov	r2, r6
 800b06a:	4629      	mov	r1, r5
 800b06c:	4620      	mov	r0, r4
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	465b      	mov	r3, fp
 800b072:	f000 fe4b 	bl	800bd0c <acc_confprogram_patch_offset>
 800b076:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800b07a:	9301      	str	r3, [sp, #4]
 800b07c:	237b      	movs	r3, #123	; 0x7b
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	4632      	mov	r2, r6
 800b082:	465b      	mov	r3, fp
 800b084:	4629      	mov	r1, r5
 800b086:	4620      	mov	r0, r4
 800b088:	f000 fe40 	bl	800bd0c <acc_confprogram_patch_offset>
 800b08c:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800b090:	2b00      	cmp	r3, #0
 800b092:	f040 815b 	bne.w	800b34c <acc_cpd_sparse_sweep_load_program+0x710>
 800b096:	e001      	b.n	800b09c <acc_cpd_sparse_sweep_load_program+0x460>
 800b098:	080101d8 	.word	0x080101d8
 800b09c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	2389      	movs	r3, #137	; 0x89
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	4632      	mov	r2, r6
 800b0a8:	465b      	mov	r3, fp
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fe2d 	bl	800bd0c <acc_confprogram_patch_offset>
 800b0b2:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 800b0b6:	9301      	str	r3, [sp, #4]
 800b0b8:	23d6      	movs	r3, #214	; 0xd6
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	4632      	mov	r2, r6
 800b0be:	465b      	mov	r3, fp
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fe22 	bl	800bd0c <acc_confprogram_patch_offset>
 800b0c8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	23f6      	movs	r3, #246	; 0xf6
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fe17 	bl	800bd0c <acc_confprogram_patch_offset>
 800b0de:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800b0e2:	9301      	str	r3, [sp, #4]
 800b0e4:	2385      	movs	r3, #133	; 0x85
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	465b      	mov	r3, fp
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 fe0c 	bl	800bd0c <acc_confprogram_patch_offset>
 800b0f4:	f8d8 705c 	ldr.w	r7, [r8, #92]	; 0x5c
 800b0f8:	b2bb      	uxth	r3, r7
 800b0fa:	2b08      	cmp	r3, #8
 800b0fc:	f200 8110 	bhi.w	800b320 <acc_cpd_sparse_sweep_load_program+0x6e4>
 800b100:	4699      	mov	r9, r3
 800b102:	2700      	movs	r7, #0
 800b104:	23ec      	movs	r3, #236	; 0xec
 800b106:	e9cd 3900 	strd	r3, r9, [sp]
 800b10a:	4632      	mov	r2, r6
 800b10c:	465b      	mov	r3, fp
 800b10e:	4629      	mov	r1, r5
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fdfb 	bl	800bd0c <acc_confprogram_patch_offset>
 800b116:	23dc      	movs	r3, #220	; 0xdc
 800b118:	4632      	mov	r2, r6
 800b11a:	e9cd 3900 	strd	r3, r9, [sp]
 800b11e:	4629      	mov	r1, r5
 800b120:	465b      	mov	r3, fp
 800b122:	4620      	mov	r0, r4
 800b124:	f000 fdf2 	bl	800bd0c <acc_confprogram_patch_offset>
 800b128:	21ee      	movs	r1, #238	; 0xee
 800b12a:	4658      	mov	r0, fp
 800b12c:	f000 fee2 	bl	800bef4 <acc_confprogram_get_default_value>
 800b130:	21f0      	movs	r1, #240	; 0xf0
 800b132:	4603      	mov	r3, r0
 800b134:	4658      	mov	r0, fp
 800b136:	930a      	str	r3, [sp, #40]	; 0x28
 800b138:	f000 fedc 	bl	800bef4 <acc_confprogram_get_default_value>
 800b13c:	21ef      	movs	r1, #239	; 0xef
 800b13e:	4682      	mov	sl, r0
 800b140:	4658      	mov	r0, fp
 800b142:	f000 fed7 	bl	800bef4 <acc_confprogram_get_default_value>
 800b146:	21de      	movs	r1, #222	; 0xde
 800b148:	4681      	mov	r9, r0
 800b14a:	4658      	mov	r0, fp
 800b14c:	f000 fed2 	bl	800bef4 <acc_confprogram_get_default_value>
 800b150:	21e0      	movs	r1, #224	; 0xe0
 800b152:	4602      	mov	r2, r0
 800b154:	4658      	mov	r0, fp
 800b156:	9202      	str	r2, [sp, #8]
 800b158:	f000 fecc 	bl	800bef4 <acc_confprogram_get_default_value>
 800b15c:	21df      	movs	r1, #223	; 0xdf
 800b15e:	4602      	mov	r2, r0
 800b160:	4658      	mov	r0, fp
 800b162:	9206      	str	r2, [sp, #24]
 800b164:	f000 fec6 	bl	800bef4 <acc_confprogram_get_default_value>
 800b168:	21d0      	movs	r1, #208	; 0xd0
 800b16a:	4602      	mov	r2, r0
 800b16c:	4658      	mov	r0, fp
 800b16e:	9207      	str	r2, [sp, #28]
 800b170:	f000 fec0 	bl	800bef4 <acc_confprogram_get_default_value>
 800b174:	2188      	movs	r1, #136	; 0x88
 800b176:	4602      	mov	r2, r0
 800b178:	4658      	mov	r0, fp
 800b17a:	9208      	str	r2, [sp, #32]
 800b17c:	f000 feba 	bl	800bef4 <acc_confprogram_get_default_value>
 800b180:	2121      	movs	r1, #33	; 0x21
 800b182:	4602      	mov	r2, r0
 800b184:	4658      	mov	r0, fp
 800b186:	9209      	str	r2, [sp, #36]	; 0x24
 800b188:	f000 feb4 	bl	800bef4 <acc_confprogram_get_default_value>
 800b18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18e:	21ee      	movs	r1, #238	; 0xee
 800b190:	433b      	orrs	r3, r7
 800b192:	4684      	mov	ip, r0
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	9100      	str	r1, [sp, #0]
 800b198:	465b      	mov	r3, fp
 800b19a:	4632      	mov	r2, r6
 800b19c:	4629      	mov	r1, r5
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800b1a4:	f000 fdb2 	bl	800bd0c <acc_confprogram_patch_offset>
 800b1a8:	ea47 030a 	orr.w	r3, r7, sl
 800b1ac:	21f0      	movs	r1, #240	; 0xf0
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	9100      	str	r1, [sp, #0]
 800b1b2:	465b      	mov	r3, fp
 800b1b4:	4632      	mov	r2, r6
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f000 fda7 	bl	800bd0c <acc_confprogram_patch_offset>
 800b1be:	ea47 0309 	orr.w	r3, r7, r9
 800b1c2:	22ef      	movs	r2, #239	; 0xef
 800b1c4:	e9cd 2300 	strd	r2, r3, [sp]
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	465b      	mov	r3, fp
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 fd9c 	bl	800bd0c <acc_confprogram_patch_offset>
 800b1d4:	9b02      	ldr	r3, [sp, #8]
 800b1d6:	22de      	movs	r2, #222	; 0xde
 800b1d8:	433b      	orrs	r3, r7
 800b1da:	e9cd 2300 	strd	r2, r3, [sp]
 800b1de:	4629      	mov	r1, r5
 800b1e0:	465b      	mov	r3, fp
 800b1e2:	4632      	mov	r2, r6
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f000 fd91 	bl	800bd0c <acc_confprogram_patch_offset>
 800b1ea:	9b06      	ldr	r3, [sp, #24]
 800b1ec:	22e0      	movs	r2, #224	; 0xe0
 800b1ee:	433b      	orrs	r3, r7
 800b1f0:	e9cd 2300 	strd	r2, r3, [sp]
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	465b      	mov	r3, fp
 800b1f8:	4632      	mov	r2, r6
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fd86 	bl	800bd0c <acc_confprogram_patch_offset>
 800b200:	9b07      	ldr	r3, [sp, #28]
 800b202:	22df      	movs	r2, #223	; 0xdf
 800b204:	433b      	orrs	r3, r7
 800b206:	e9cd 2300 	strd	r2, r3, [sp]
 800b20a:	4629      	mov	r1, r5
 800b20c:	465b      	mov	r3, fp
 800b20e:	4632      	mov	r2, r6
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fd7b 	bl	800bd0c <acc_confprogram_patch_offset>
 800b216:	9b08      	ldr	r3, [sp, #32]
 800b218:	22d0      	movs	r2, #208	; 0xd0
 800b21a:	433b      	orrs	r3, r7
 800b21c:	e9cd 2300 	strd	r2, r3, [sp]
 800b220:	4629      	mov	r1, r5
 800b222:	465b      	mov	r3, fp
 800b224:	4632      	mov	r2, r6
 800b226:	4620      	mov	r0, r4
 800b228:	f000 fd70 	bl	800bd0c <acc_confprogram_patch_offset>
 800b22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22e:	2288      	movs	r2, #136	; 0x88
 800b230:	433b      	orrs	r3, r7
 800b232:	e9cd 2300 	strd	r2, r3, [sp]
 800b236:	4629      	mov	r1, r5
 800b238:	465b      	mov	r3, fp
 800b23a:	4632      	mov	r2, r6
 800b23c:	4620      	mov	r0, r4
 800b23e:	f000 fd65 	bl	800bd0c <acc_confprogram_patch_offset>
 800b242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b244:	431f      	orrs	r7, r3
 800b246:	2321      	movs	r3, #33	; 0x21
 800b248:	e9cd 3700 	strd	r3, r7, [sp]
 800b24c:	4632      	mov	r2, r6
 800b24e:	465b      	mov	r3, fp
 800b250:	4629      	mov	r1, r5
 800b252:	4620      	mov	r0, r4
 800b254:	f000 fd5a 	bl	800bd0c <acc_confprogram_patch_offset>
 800b258:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800b25c:	2277      	movs	r2, #119	; 0x77
 800b25e:	3b01      	subs	r3, #1
 800b260:	e9cd 2300 	strd	r2, r3, [sp]
 800b264:	4629      	mov	r1, r5
 800b266:	465b      	mov	r3, fp
 800b268:	4632      	mov	r2, r6
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 fd4e 	bl	800bd0c <acc_confprogram_patch_offset>
 800b270:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800b274:	2b06      	cmp	r3, #6
 800b276:	f63f ad0f 	bhi.w	800ac98 <acc_cpd_sparse_sweep_load_program+0x5c>
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	f240 80e1 	bls.w	800b442 <acc_cpd_sparse_sweep_load_program+0x806>
 800b280:	f1a3 0903 	sub.w	r9, r3, #3
 800b284:	2700      	movs	r7, #0
 800b286:	2303      	movs	r3, #3
 800b288:	e509      	b.n	800ac9e <acc_cpd_sparse_sweep_load_program+0x62>
 800b28a:	2700      	movs	r7, #0
 800b28c:	23da      	movs	r3, #218	; 0xda
 800b28e:	e9cd 3700 	strd	r3, r7, [sp]
 800b292:	4632      	mov	r2, r6
 800b294:	465b      	mov	r3, fp
 800b296:	4629      	mov	r1, r5
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 fd37 	bl	800bd0c <acc_confprogram_patch_offset>
 800b29e:	23db      	movs	r3, #219	; 0xdb
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	e9cd 3200 	strd	r3, r2, [sp]
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	465b      	mov	r3, fp
 800b2aa:	4632      	mov	r2, r6
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f000 fd2d 	bl	800bd0c <acc_confprogram_patch_offset>
 800b2b2:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b2b6:	4a67      	ldr	r2, [pc, #412]	; (800b454 <acc_cpd_sparse_sweep_load_program+0x818>)
 800b2b8:	46b9      	mov	r9, r7
 800b2ba:	46ba      	mov	sl, r7
 800b2bc:	3301      	adds	r3, #1
 800b2be:	278a      	movs	r7, #138	; 0x8a
 800b2c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2c4:	9306      	str	r3, [sp, #24]
 800b2c6:	46bc      	mov	ip, r7
 800b2c8:	4691      	mov	r9, r2
 800b2ca:	e01b      	b.n	800b304 <acc_cpd_sparse_sweep_load_program+0x6c8>
 800b2cc:	e9cd ce00 	strd	ip, lr, [sp]
 800b2d0:	f000 fd1c 	bl	800bd0c <acc_confprogram_patch_offset>
 800b2d4:	4b60      	ldr	r3, [pc, #384]	; (800b458 <acc_cpd_sparse_sweep_load_program+0x81c>)
 800b2d6:	9a02      	ldr	r2, [sp, #8]
 800b2d8:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800b2dc:	e9cd 3200 	strd	r3, r2, [sp]
 800b2e0:	465b      	mov	r3, fp
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f000 fd10 	bl	800bd0c <acc_confprogram_patch_offset>
 800b2ec:	9a02      	ldr	r2, [sp, #8]
 800b2ee:	9b06      	ldr	r3, [sp, #24]
 800b2f0:	f10a 0a01 	add.w	sl, sl, #1
 800b2f4:	441a      	add	r2, r3
 800b2f6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800b2fa:	9202      	str	r2, [sp, #8]
 800b2fc:	f43f adad 	beq.w	800ae5a <acc_cpd_sparse_sweep_load_program+0x21e>
 800b300:	f839 cf02 	ldrh.w	ip, [r9, #2]!
 800b304:	f8d8 7060 	ldr.w	r7, [r8, #96]	; 0x60
 800b308:	4557      	cmp	r7, sl
 800b30a:	f04f 0e01 	mov.w	lr, #1
 800b30e:	465b      	mov	r3, fp
 800b310:	4632      	mov	r2, r6
 800b312:	4629      	mov	r1, r5
 800b314:	4620      	mov	r0, r4
 800b316:	d8d9      	bhi.n	800b2cc <acc_cpd_sparse_sweep_load_program+0x690>
 800b318:	2300      	movs	r3, #0
 800b31a:	e9cd c300 	strd	ip, r3, [sp]
 800b31e:	e7df      	b.n	800b2e0 <acc_cpd_sparse_sweep_load_program+0x6a4>
 800b320:	fa1f f987 	uxth.w	r9, r7
 800b324:	23e5      	movs	r3, #229	; 0xe5
 800b326:	2202      	movs	r2, #2
 800b328:	f1a9 0908 	sub.w	r9, r9, #8
 800b32c:	27ff      	movs	r7, #255	; 0xff
 800b32e:	e9cd 3200 	strd	r3, r2, [sp]
 800b332:	fa07 f709 	lsl.w	r7, r7, r9
 800b336:	465b      	mov	r3, fp
 800b338:	4632      	mov	r2, r6
 800b33a:	4629      	mov	r1, r5
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 fce5 	bl	800bd0c <acc_confprogram_patch_offset>
 800b342:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800b346:	f04f 0908 	mov.w	r9, #8
 800b34a:	e6db      	b.n	800b104 <acc_cpd_sparse_sweep_load_program+0x4c8>
 800b34c:	230f      	movs	r3, #15
 800b34e:	2201      	movs	r2, #1
 800b350:	e9cd 3200 	strd	r3, r2, [sp]
 800b354:	4629      	mov	r1, r5
 800b356:	465b      	mov	r3, fp
 800b358:	4632      	mov	r2, r6
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fcd6 	bl	800bd0c <acc_confprogram_patch_offset>
 800b360:	f64f 7a80 	movw	sl, #65408	; 0xff80
 800b364:	2311      	movs	r3, #17
 800b366:	e9cd 3a00 	strd	r3, sl, [sp]
 800b36a:	4632      	mov	r2, r6
 800b36c:	465b      	mov	r3, fp
 800b36e:	4629      	mov	r1, r5
 800b370:	4620      	mov	r0, r4
 800b372:	f000 fccb 	bl	800bd0c <acc_confprogram_patch_offset>
 800b376:	f04f 0907 	mov.w	r9, #7
 800b37a:	2313      	movs	r3, #19
 800b37c:	e9cd 3900 	strd	r3, r9, [sp]
 800b380:	4632      	mov	r2, r6
 800b382:	465b      	mov	r3, fp
 800b384:	4629      	mov	r1, r5
 800b386:	4620      	mov	r0, r4
 800b388:	f000 fcc0 	bl	800bd0c <acc_confprogram_patch_offset>
 800b38c:	2310      	movs	r3, #16
 800b38e:	e9cd 3a00 	strd	r3, sl, [sp]
 800b392:	4632      	mov	r2, r6
 800b394:	465b      	mov	r3, fp
 800b396:	4629      	mov	r1, r5
 800b398:	4620      	mov	r0, r4
 800b39a:	f000 fcb7 	bl	800bd0c <acc_confprogram_patch_offset>
 800b39e:	2312      	movs	r3, #18
 800b3a0:	e9cd 3700 	strd	r3, r7, [sp]
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	465b      	mov	r3, fp
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 fcae 	bl	800bd0c <acc_confprogram_patch_offset>
 800b3b0:	2314      	movs	r3, #20
 800b3b2:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 800b3b6:	e9cd 3200 	strd	r3, r2, [sp]
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	465b      	mov	r3, fp
 800b3be:	4632      	mov	r2, r6
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fca3 	bl	800bd0c <acc_confprogram_patch_offset>
 800b3c6:	2315      	movs	r3, #21
 800b3c8:	e9cd 3900 	strd	r3, r9, [sp]
 800b3cc:	4632      	mov	r2, r6
 800b3ce:	465b      	mov	r3, fp
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 fc9a 	bl	800bd0c <acc_confprogram_patch_offset>
 800b3d8:	230d      	movs	r3, #13
 800b3da:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800b3de:	e9cd 3200 	strd	r3, r2, [sp]
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	465b      	mov	r3, fp
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f000 fc8f 	bl	800bd0c <acc_confprogram_patch_offset>
 800b3ee:	230e      	movs	r3, #14
 800b3f0:	e9cd 3900 	strd	r3, r9, [sp]
 800b3f4:	4632      	mov	r2, r6
 800b3f6:	465b      	mov	r3, fp
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fc86 	bl	800bd0c <acc_confprogram_patch_offset>
 800b400:	2316      	movs	r3, #22
 800b402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b406:	e9cd 3200 	strd	r3, r2, [sp]
 800b40a:	4629      	mov	r1, r5
 800b40c:	465b      	mov	r3, fp
 800b40e:	4632      	mov	r2, r6
 800b410:	4620      	mov	r0, r4
 800b412:	f000 fc7b 	bl	800bd0c <acc_confprogram_patch_offset>
 800b416:	2317      	movs	r3, #23
 800b418:	e9cd 3900 	strd	r3, r9, [sp]
 800b41c:	4632      	mov	r2, r6
 800b41e:	465b      	mov	r3, fp
 800b420:	4629      	mov	r1, r5
 800b422:	4620      	mov	r0, r4
 800b424:	f000 fc72 	bl	800bd0c <acc_confprogram_patch_offset>
 800b428:	e638      	b.n	800b09c <acc_cpd_sparse_sweep_load_program+0x460>
 800b42a:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 800b42e:	9301      	str	r3, [sp, #4]
 800b430:	2371      	movs	r3, #113	; 0x71
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	4632      	mov	r2, r6
 800b436:	4629      	mov	r1, r5
 800b438:	4620      	mov	r0, r4
 800b43a:	465b      	mov	r3, fp
 800b43c:	f000 fc66 	bl	800bd0c <acc_confprogram_patch_offset>
 800b440:	e544      	b.n	800aecc <acc_cpd_sparse_sweep_load_program+0x290>
 800b442:	2700      	movs	r7, #0
 800b444:	46b9      	mov	r9, r7
 800b446:	e42a      	b.n	800ac9e <acc_cpd_sparse_sweep_load_program+0x62>
 800b448:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b44a:	b00f      	add	sp, #60	; 0x3c
 800b44c:	ecbd 8b04 	vpop	{d8-d9}
 800b450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b454:	08012624 	.word	0x08012624
 800b458:	080125a4 	.word	0x080125a4

0800b45c <acc_cpd_sparse_sweep_run_program>:
 800b45c:	f240 11e9 	movw	r1, #489	; 0x1e9
 800b460:	f7fe bc4e 	b.w	8009d00 <acc_sensor_protocol_r2_run_program>

0800b464 <acc_cpd_sparse_sweep_update_program>:
 800b464:	780b      	ldrb	r3, [r1, #0]
 800b466:	b90b      	cbnz	r3, 800b46c <acc_cpd_sparse_sweep_update_program+0x8>
 800b468:	2001      	movs	r0, #1
 800b46a:	4770      	bx	lr
 800b46c:	b500      	push	{lr}
 800b46e:	b085      	sub	sp, #20
 800b470:	684b      	ldr	r3, [r1, #4]
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	4a06      	ldr	r2, [pc, #24]	; (800b490 <acc_cpd_sparse_sweep_update_program+0x2c>)
 800b476:	9202      	str	r2, [sp, #8]
 800b478:	23f2      	movs	r3, #242	; 0xf2
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	4905      	ldr	r1, [pc, #20]	; (800b494 <acc_cpd_sparse_sweep_update_program+0x30>)
 800b47e:	4b06      	ldr	r3, [pc, #24]	; (800b498 <acc_cpd_sparse_sweep_update_program+0x34>)
 800b480:	2200      	movs	r2, #0
 800b482:	f000 fccb 	bl	800be1c <acc_confprogram_live_patch>
 800b486:	2001      	movs	r0, #1
 800b488:	b005      	add	sp, #20
 800b48a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b48e:	bf00      	nop
 800b490:	080095fd 	.word	0x080095fd
 800b494:	080101d8 	.word	0x080101d8
 800b498:	08013914 	.word	0x08013914

0800b49c <acc_radar_engine_check_asic_id>:
 800b49c:	6800      	ldr	r0, [r0, #0]
 800b49e:	2100      	movs	r1, #0
 800b4a0:	f7fe be48 	b.w	800a134 <acc_sensor_protocol_r2_check_asic_id>

0800b4a4 <acc_radar_engine_wait_for_radar_data>:
 800b4a4:	6800      	ldr	r0, [r0, #0]
 800b4a6:	f7fe bdb3 	b.w	800a010 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b4aa:	bf00      	nop

0800b4ac <acc_radar_engine_measure>:
 800b4ac:	6800      	ldr	r0, [r0, #0]
 800b4ae:	f7fe bc89 	b.w	8009dc4 <acc_sensor_protocol_r2_ack_event>
 800b4b2:	bf00      	nop

0800b4b4 <acc_radar_engine_wait_for_hibernate_ready>:
 800b4b4:	6800      	ldr	r0, [r0, #0]
 800b4b6:	f7fe bda7 	b.w	800a008 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800b4ba:	bf00      	nop

0800b4bc <acc_radar_engine_acquire_adc_data>:
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c0:	ed2d 8b02 	vpush	{d8}
 800b4c4:	2600      	movs	r6, #0
 800b4c6:	6016      	str	r6, [r2, #0]
 800b4c8:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800b4cc:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800b5e4 <acc_radar_engine_acquire_adc_data+0x128>
 800b4d0:	7bc3      	ldrb	r3, [r0, #15]
 800b4d2:	f890 800e 	ldrb.w	r8, [r0, #14]
 800b4d6:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800b4da:	7316      	strb	r6, [r2, #12]
 800b4dc:	b089      	sub	sp, #36	; 0x24
 800b4de:	460f      	mov	r7, r1
 800b4e0:	7116      	strb	r6, [r2, #4]
 800b4e2:	f88d 600e 	strb.w	r6, [sp, #14]
 800b4e6:	f88d 600f 	strb.w	r6, [sp, #15]
 800b4ea:	9301      	str	r3, [sp, #4]
 800b4ec:	ed82 8a02 	vstr	s16, [r2, #8]
 800b4f0:	f1ba 0f00 	cmp.w	sl, #0
 800b4f4:	d05b      	beq.n	800b5ae <acc_radar_engine_acquire_adc_data+0xf2>
 800b4f6:	4647      	mov	r7, r8
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	4688      	mov	r8, r1
 800b4fe:	b927      	cbnz	r7, 800b50a <acc_radar_engine_acquire_adc_data+0x4e>
 800b500:	6828      	ldr	r0, [r5, #0]
 800b502:	f7fe fc5f 	bl	8009dc4 <acc_sensor_protocol_r2_ack_event>
 800b506:	2800      	cmp	r0, #0
 800b508:	d05e      	beq.n	800b5c8 <acc_radar_engine_acquire_adc_data+0x10c>
 800b50a:	6828      	ldr	r0, [r5, #0]
 800b50c:	f10d 020e 	add.w	r2, sp, #14
 800b510:	4659      	mov	r1, fp
 800b512:	f7fe fd7d 	bl	800a010 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b516:	2800      	cmp	r0, #0
 800b518:	d056      	beq.n	800b5c8 <acc_radar_engine_acquire_adc_data+0x10c>
 800b51a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b51e:	b903      	cbnz	r3, 800b522 <acc_radar_engine_acquire_adc_data+0x66>
 800b520:	78a3      	ldrb	r3, [r4, #2]
 800b522:	69aa      	ldr	r2, [r5, #24]
 800b524:	70a3      	strb	r3, [r4, #2]
 800b526:	4641      	mov	r1, r8
 800b528:	6953      	ldr	r3, [r2, #20]
 800b52a:	4628      	mov	r0, r5
 800b52c:	f10d 020f 	add.w	r2, sp, #15
 800b530:	4798      	blx	r3
 800b532:	69aa      	ldr	r2, [r5, #24]
 800b534:	9004      	str	r0, [sp, #16]
 800b536:	2300      	movs	r3, #0
 800b538:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b53c:	f88d 3014 	strb.w	r3, [sp, #20]
 800b540:	f88d 301c 	strb.w	r3, [sp, #28]
 800b544:	ed8d 8a06 	vstr	s16, [sp, #24]
 800b548:	ab05      	add	r3, sp, #20
 800b54a:	aa04      	add	r2, sp, #16
 800b54c:	4641      	mov	r1, r8
 800b54e:	4628      	mov	r0, r5
 800b550:	47c8      	blx	r9
 800b552:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b556:	b903      	cbnz	r3, 800b55a <acc_radar_engine_acquire_adc_data+0x9e>
 800b558:	7b23      	ldrb	r3, [r4, #12]
 800b55a:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800b55e:	7323      	strb	r3, [r4, #12]
 800b560:	f1b9 0f00 	cmp.w	r9, #0
 800b564:	d129      	bne.n	800b5ba <acc_radar_engine_acquire_adc_data+0xfe>
 800b566:	7923      	ldrb	r3, [r4, #4]
 800b568:	edd4 0a02 	vldr	s1, [r4, #8]
 800b56c:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b570:	7123      	strb	r3, [r4, #4]
 800b572:	f003 fcf9 	bl	800ef68 <fmaxf>
 800b576:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b57a:	ed84 0a02 	vstr	s0, [r4, #8]
 800b57e:	b902      	cbnz	r2, 800b582 <acc_radar_engine_acquire_adc_data+0xc6>
 800b580:	78e2      	ldrb	r2, [r4, #3]
 800b582:	8821      	ldrh	r1, [r4, #0]
 800b584:	9b04      	ldr	r3, [sp, #16]
 800b586:	70e2      	strb	r2, [r4, #3]
 800b588:	69aa      	ldr	r2, [r5, #24]
 800b58a:	440b      	add	r3, r1
 800b58c:	8023      	strh	r3, [r4, #0]
 800b58e:	4649      	mov	r1, r9
 800b590:	69d3      	ldr	r3, [r2, #28]
 800b592:	4628      	mov	r0, r5
 800b594:	4798      	blx	r3
 800b596:	9b01      	ldr	r3, [sp, #4]
 800b598:	b11b      	cbz	r3, 800b5a2 <acc_radar_engine_acquire_adc_data+0xe6>
 800b59a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b59e:	42b3      	cmp	r3, r6
 800b5a0:	d018      	beq.n	800b5d4 <acc_radar_engine_acquire_adc_data+0x118>
 800b5a2:	b967      	cbnz	r7, 800b5be <acc_radar_engine_acquire_adc_data+0x102>
 800b5a4:	3601      	adds	r6, #1
 800b5a6:	b2b3      	uxth	r3, r6
 800b5a8:	4553      	cmp	r3, sl
 800b5aa:	d3a8      	bcc.n	800b4fe <acc_radar_engine_acquire_adc_data+0x42>
 800b5ac:	4647      	mov	r7, r8
 800b5ae:	6838      	ldr	r0, [r7, #0]
 800b5b0:	b009      	add	sp, #36	; 0x24
 800b5b2:	ecbd 8b02 	vpop	{d8}
 800b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ba:	464b      	mov	r3, r9
 800b5bc:	e7d4      	b.n	800b568 <acc_radar_engine_acquire_adc_data+0xac>
 800b5be:	6828      	ldr	r0, [r5, #0]
 800b5c0:	f7fe fc00 	bl	8009dc4 <acc_sensor_protocol_r2_ack_event>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d1ed      	bne.n	800b5a4 <acc_radar_engine_acquire_adc_data+0xe8>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	b009      	add	sp, #36	; 0x24
 800b5cc:	ecbd 8b02 	vpop	{d8}
 800b5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d4:	f8d8 0000 	ldr.w	r0, [r8]
 800b5d8:	b009      	add	sp, #36	; 0x24
 800b5da:	ecbd 8b02 	vpop	{d8}
 800b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e2:	bf00      	nop
 800b5e4:	ff800000 	.word	0xff800000

0800b5e8 <acc_sensor_diagnostics_r2_sensor_status>:
 800b5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ec:	b094      	sub	sp, #80	; 0x50
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	f7fc fa92 	bl	8007b18 <acc_rss_integration_log_level>
 800b5f4:	2801      	cmp	r0, #1
 800b5f6:	d905      	bls.n	800b604 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800b5f8:	4b9c      	ldr	r3, [pc, #624]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b5fa:	4a9d      	ldr	r2, [pc, #628]	; (800b870 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800b5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fe:	499d      	ldr	r1, [pc, #628]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b600:	2002      	movs	r0, #2
 800b602:	4798      	blx	r3
 800b604:	2201      	movs	r2, #1
 800b606:	21b2      	movs	r1, #178	; 0xb2
 800b608:	4620      	mov	r0, r4
 800b60a:	f7fe ffc5 	bl	800a598 <acc_sensor_reg_write>
 800b60e:	2300      	movs	r3, #0
 800b610:	f8df a258 	ldr.w	sl, [pc, #600]	; 800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800b614:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800b8a0 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800b618:	4f96      	ldr	r7, [pc, #600]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b61a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800b61e:	2564      	movs	r5, #100	; 0x64
 800b620:	e013      	b.n	800b64a <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800b622:	f7fc fa79 	bl	8007b18 <acc_rss_integration_log_level>
 800b626:	2801      	cmp	r0, #1
 800b628:	4623      	mov	r3, r4
 800b62a:	464a      	mov	r2, r9
 800b62c:	4639      	mov	r1, r7
 800b62e:	f04f 0002 	mov.w	r0, #2
 800b632:	d907      	bls.n	800b644 <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800b634:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800b638:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b63c:	9600      	str	r6, [sp, #0]
 800b63e:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800b642:	47b0      	blx	r6
 800b644:	3d01      	subs	r5, #1
 800b646:	b2ad      	uxth	r5, r5
 800b648:	b1c5      	cbz	r5, 800b67c <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b64a:	aa0c      	add	r2, sp, #48	; 0x30
 800b64c:	2111      	movs	r1, #17
 800b64e:	4620      	mov	r0, r4
 800b650:	f7fe ff8c 	bl	800a56c <acc_sensor_reg_read>
 800b654:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b658:	055b      	lsls	r3, r3, #21
 800b65a:	d4e2      	bmi.n	800b622 <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800b65c:	f7fc fa5c 	bl	8007b18 <acc_rss_integration_log_level>
 800b660:	2801      	cmp	r0, #1
 800b662:	d90b      	bls.n	800b67c <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b664:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b668:	4980      	ldr	r1, [pc, #512]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b66a:	4a83      	ldr	r2, [pc, #524]	; (800b878 <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800b66c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b66e:	4981      	ldr	r1, [pc, #516]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	2002      	movs	r0, #2
 800b678:	4623      	mov	r3, r4
 800b67a:	47a8      	blx	r5
 800b67c:	2600      	movs	r6, #0
 800b67e:	4631      	mov	r1, r6
 800b680:	aa09      	add	r2, sp, #36	; 0x24
 800b682:	4620      	mov	r0, r4
 800b684:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800b688:	4d7c      	ldr	r5, [pc, #496]	; (800b87c <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800b68a:	f7fe ff6f 	bl	800a56c <acc_sensor_reg_read>
 800b68e:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b692:	212a      	movs	r1, #42	; 0x2a
 800b694:	4620      	mov	r0, r4
 800b696:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800b69a:	f7fe ff67 	bl	800a56c <acc_sensor_reg_read>
 800b69e:	2128      	movs	r1, #40	; 0x28
 800b6a0:	aa0a      	add	r2, sp, #40	; 0x28
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800b6a8:	f105 071e 	add.w	r7, r5, #30
 800b6ac:	f7fe ff5e 	bl	800a56c <acc_sensor_reg_read>
 800b6b0:	ae0c      	add	r6, sp, #48	; 0x30
 800b6b2:	2163      	movs	r1, #99	; 0x63
 800b6b4:	e001      	b.n	800b6ba <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800b6b6:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b6ba:	4632      	mov	r2, r6
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f7fe ff55 	bl	800a56c <acc_sensor_reg_read>
 800b6c2:	42af      	cmp	r7, r5
 800b6c4:	f106 0602 	add.w	r6, r6, #2
 800b6c8:	d1f5      	bne.n	800b6b6 <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800b6ca:	f7fc fa25 	bl	8007b18 <acc_rss_integration_log_level>
 800b6ce:	2801      	cmp	r0, #1
 800b6d0:	d91e      	bls.n	800b710 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800b6d2:	4d66      	ldr	r5, [pc, #408]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6d4:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800b6d8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800b6dc:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b6de:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800b6e2:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b6e6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800b6ea:	9107      	str	r1, [sp, #28]
 800b6ec:	9206      	str	r2, [sp, #24]
 800b6ee:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b6f2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b6f6:	9305      	str	r3, [sp, #20]
 800b6f8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b702:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b706:	4a5e      	ldr	r2, [pc, #376]	; (800b880 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800b708:	495a      	ldr	r1, [pc, #360]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b70a:	4623      	mov	r3, r4
 800b70c:	2002      	movs	r0, #2
 800b70e:	47a8      	blx	r5
 800b710:	f7fc fa02 	bl	8007b18 <acc_rss_integration_log_level>
 800b714:	2801      	cmp	r0, #1
 800b716:	d91e      	bls.n	800b756 <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800b718:	4d54      	ldr	r5, [pc, #336]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b71a:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800b71e:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800b722:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b724:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800b728:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800b72c:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800b730:	9107      	str	r1, [sp, #28]
 800b732:	9206      	str	r2, [sp, #24]
 800b734:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800b738:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800b73c:	9305      	str	r3, [sp, #20]
 800b73e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b748:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b74c:	4a4d      	ldr	r2, [pc, #308]	; (800b884 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800b74e:	4949      	ldr	r1, [pc, #292]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b750:	4623      	mov	r3, r4
 800b752:	2002      	movs	r0, #2
 800b754:	47a8      	blx	r5
 800b756:	aa0c      	add	r2, sp, #48	; 0x30
 800b758:	2168      	movs	r1, #104	; 0x68
 800b75a:	4620      	mov	r0, r4
 800b75c:	f7fe ff06 	bl	800a56c <acc_sensor_reg_read>
 800b760:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800b764:	2167      	movs	r1, #103	; 0x67
 800b766:	4620      	mov	r0, r4
 800b768:	f7fe ff00 	bl	800a56c <acc_sensor_reg_read>
 800b76c:	aa0d      	add	r2, sp, #52	; 0x34
 800b76e:	2166      	movs	r1, #102	; 0x66
 800b770:	4620      	mov	r0, r4
 800b772:	f7fe fefb 	bl	800a56c <acc_sensor_reg_read>
 800b776:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800b77a:	2165      	movs	r1, #101	; 0x65
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7fe fef5 	bl	800a56c <acc_sensor_reg_read>
 800b782:	f7fc f9c9 	bl	8007b18 <acc_rss_integration_log_level>
 800b786:	2801      	cmp	r0, #1
 800b788:	d912      	bls.n	800b7b0 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800b78a:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b78e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b792:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b796:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b79a:	4d34      	ldr	r5, [pc, #208]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b79c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b79e:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800b7a2:	e9cd 3200 	strd	r3, r2, [sp]
 800b7a6:	4933      	ldr	r1, [pc, #204]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b7a8:	4a37      	ldr	r2, [pc, #220]	; (800b888 <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	2002      	movs	r0, #2
 800b7ae:	47a8      	blx	r5
 800b7b0:	2500      	movs	r5, #0
 800b7b2:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800b7b6:	2153      	movs	r1, #83	; 0x53
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800b7be:	f7fe fed5 	bl	800a56c <acc_sensor_reg_read>
 800b7c2:	aa0c      	add	r2, sp, #48	; 0x30
 800b7c4:	2140      	movs	r1, #64	; 0x40
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b7cc:	f7fe fece 	bl	800a56c <acc_sensor_reg_read>
 800b7d0:	f7fc f9a2 	bl	8007b18 <acc_rss_integration_log_level>
 800b7d4:	2801      	cmp	r0, #1
 800b7d6:	d909      	bls.n	800b7ec <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800b7d8:	4a24      	ldr	r2, [pc, #144]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b7da:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b7de:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b7e0:	4924      	ldr	r1, [pc, #144]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	4a29      	ldr	r2, [pc, #164]	; (800b88c <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800b7e6:	4623      	mov	r3, r4
 800b7e8:	2002      	movs	r0, #2
 800b7ea:	47a8      	blx	r5
 800b7ec:	f7fc f994 	bl	8007b18 <acc_rss_integration_log_level>
 800b7f0:	2801      	cmp	r0, #1
 800b7f2:	d90e      	bls.n	800b812 <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800b7f4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b7f8:	491c      	ldr	r1, [pc, #112]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b7fa:	4a25      	ldr	r2, [pc, #148]	; (800b890 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800b7fc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b7fe:	491d      	ldr	r1, [pc, #116]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b800:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800b804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b808:	e9cd 3000 	strd	r3, r0, [sp]
 800b80c:	4623      	mov	r3, r4
 800b80e:	2002      	movs	r0, #2
 800b810:	47a8      	blx	r5
 800b812:	f7fc f981 	bl	8007b18 <acc_rss_integration_log_level>
 800b816:	2801      	cmp	r0, #1
 800b818:	d90e      	bls.n	800b838 <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800b81a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b81e:	4913      	ldr	r1, [pc, #76]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b820:	4a1c      	ldr	r2, [pc, #112]	; (800b894 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800b822:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b824:	4913      	ldr	r1, [pc, #76]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b826:	f003 0010 	and.w	r0, r3, #16
 800b82a:	f003 0320 	and.w	r3, r3, #32
 800b82e:	e9cd 3000 	strd	r3, r0, [sp]
 800b832:	4623      	mov	r3, r4
 800b834:	2002      	movs	r0, #2
 800b836:	47a8      	blx	r5
 800b838:	f7fc f96e 	bl	8007b18 <acc_rss_integration_log_level>
 800b83c:	2801      	cmp	r0, #1
 800b83e:	d90e      	bls.n	800b85e <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800b840:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b844:	4909      	ldr	r1, [pc, #36]	; (800b86c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b846:	4a14      	ldr	r2, [pc, #80]	; (800b898 <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800b848:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b84a:	490a      	ldr	r1, [pc, #40]	; (800b874 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b84c:	f003 0004 	and.w	r0, r3, #4
 800b850:	f003 0308 	and.w	r3, r3, #8
 800b854:	e9cd 3000 	strd	r3, r0, [sp]
 800b858:	4623      	mov	r3, r4
 800b85a:	2002      	movs	r0, #2
 800b85c:	47a8      	blx	r5
 800b85e:	4d0f      	ldr	r5, [pc, #60]	; (800b89c <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800b860:	ae0c      	add	r6, sp, #48	; 0x30
 800b862:	f105 071e 	add.w	r7, r5, #30
 800b866:	21f0      	movs	r1, #240	; 0xf0
 800b868:	e01e      	b.n	800b8a8 <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800b86a:	bf00      	nop
 800b86c:	200007ec 	.word	0x200007ec
 800b870:	080126a4 	.word	0x080126a4
 800b874:	080126e4 	.word	0x080126e4
 800b878:	0801271c 	.word	0x0801271c
 800b87c:	08012a2c 	.word	0x08012a2c
 800b880:	0801273c 	.word	0x0801273c
 800b884:	08012784 	.word	0x08012784
 800b888:	080127d0 	.word	0x080127d0
 800b88c:	08012804 	.word	0x08012804
 800b890:	08012824 	.word	0x08012824
 800b894:	08012850 	.word	0x08012850
 800b898:	08012884 	.word	0x08012884
 800b89c:	08012a4c 	.word	0x08012a4c
 800b8a0:	080126fc 	.word	0x080126fc
 800b8a4:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b8a8:	4632      	mov	r2, r6
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7fe fe5e 	bl	800a56c <acc_sensor_reg_read>
 800b8b0:	42bd      	cmp	r5, r7
 800b8b2:	f106 0602 	add.w	r6, r6, #2
 800b8b6:	d1f5      	bne.n	800b8a4 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800b8b8:	f7fc f92e 	bl	8007b18 <acc_rss_integration_log_level>
 800b8bc:	2801      	cmp	r0, #1
 800b8be:	f240 80b6 	bls.w	800ba2e <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800b8c2:	4a5c      	ldr	r2, [pc, #368]	; (800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8c4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b8c8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b8ca:	495b      	ldr	r1, [pc, #364]	; (800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	4a5b      	ldr	r2, [pc, #364]	; (800ba3c <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800b8d0:	4623      	mov	r3, r4
 800b8d2:	2002      	movs	r0, #2
 800b8d4:	47a8      	blx	r5
 800b8d6:	2501      	movs	r5, #1
 800b8d8:	f7fc f91e 	bl	8007b18 <acc_rss_integration_log_level>
 800b8dc:	2801      	cmp	r0, #1
 800b8de:	d90e      	bls.n	800b8fe <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800b8e0:	ab14      	add	r3, sp, #80	; 0x50
 800b8e2:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800b8e6:	4b53      	ldr	r3, [pc, #332]	; (800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8e8:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800b8ec:	9200      	str	r2, [sp, #0]
 800b8ee:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b8f0:	4a53      	ldr	r2, [pc, #332]	; (800ba40 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800b8f2:	4951      	ldr	r1, [pc, #324]	; (800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8f4:	3501      	adds	r5, #1
 800b8f6:	4623      	mov	r3, r4
 800b8f8:	2002      	movs	r0, #2
 800b8fa:	b2ed      	uxtb	r5, r5
 800b8fc:	47b0      	blx	r6
 800b8fe:	f8df a134 	ldr.w	sl, [pc, #308]	; 800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800b902:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800ba5c <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800b906:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800b90a:	2601      	movs	r6, #1
 800b90c:	f7fc f904 	bl	8007b18 <acc_rss_integration_log_level>
 800b910:	ab14      	add	r3, sp, #80	; 0x50
 800b912:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800b916:	2801      	cmp	r0, #1
 800b918:	4667      	mov	r7, ip
 800b91a:	4623      	mov	r3, r4
 800b91c:	464a      	mov	r2, r9
 800b91e:	4641      	mov	r1, r8
 800b920:	f04f 0002 	mov.w	r0, #2
 800b924:	d909      	bls.n	800b93a <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800b926:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800b92a:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800b92e:	9600      	str	r6, [sp, #0]
 800b930:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800b934:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800b938:	47b8      	blx	r7
 800b93a:	3601      	adds	r6, #1
 800b93c:	3502      	adds	r5, #2
 800b93e:	2e08      	cmp	r6, #8
 800b940:	b2ed      	uxtb	r5, r5
 800b942:	d1e3      	bne.n	800b90c <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800b944:	2500      	movs	r5, #0
 800b946:	aa0b      	add	r2, sp, #44	; 0x2c
 800b948:	219d      	movs	r1, #157	; 0x9d
 800b94a:	4620      	mov	r0, r4
 800b94c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800b950:	f7fe fe0c 	bl	800a56c <acc_sensor_reg_read>
 800b954:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800b958:	2199      	movs	r1, #153	; 0x99
 800b95a:	4620      	mov	r0, r4
 800b95c:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800b960:	f7fe fe04 	bl	800a56c <acc_sensor_reg_read>
 800b964:	aa0c      	add	r2, sp, #48	; 0x30
 800b966:	2196      	movs	r1, #150	; 0x96
 800b968:	4620      	mov	r0, r4
 800b96a:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b96e:	f7fe fdfd 	bl	800a56c <acc_sensor_reg_read>
 800b972:	462a      	mov	r2, r5
 800b974:	21b2      	movs	r1, #178	; 0xb2
 800b976:	4620      	mov	r0, r4
 800b978:	f7fe fe0e 	bl	800a598 <acc_sensor_reg_write>
 800b97c:	f7fc f8cc 	bl	8007b18 <acc_rss_integration_log_level>
 800b980:	2801      	cmp	r0, #1
 800b982:	d90f      	bls.n	800b9a4 <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800b984:	482b      	ldr	r0, [pc, #172]	; (800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b986:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800b98a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b98e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b992:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b99a:	4623      	mov	r3, r4
 800b99c:	4a29      	ldr	r2, [pc, #164]	; (800ba44 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800b99e:	4926      	ldr	r1, [pc, #152]	; (800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b9a0:	2002      	movs	r0, #2
 800b9a2:	47a8      	blx	r5
 800b9a4:	f7fc f8b8 	bl	8007b18 <acc_rss_integration_log_level>
 800b9a8:	2801      	cmp	r0, #1
 800b9aa:	d909      	bls.n	800b9c0 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800b9ac:	4a21      	ldr	r2, [pc, #132]	; (800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b9ae:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800b9b2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b9b4:	4920      	ldr	r1, [pc, #128]	; (800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	4a23      	ldr	r2, [pc, #140]	; (800ba48 <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800b9ba:	4623      	mov	r3, r4
 800b9bc:	2002      	movs	r0, #2
 800b9be:	47a8      	blx	r5
 800b9c0:	f7fc f8aa 	bl	8007b18 <acc_rss_integration_log_level>
 800b9c4:	2801      	cmp	r0, #1
 800b9c6:	d909      	bls.n	800b9dc <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800b9c8:	4a1a      	ldr	r2, [pc, #104]	; (800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b9ca:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b9ce:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b9d0:	4919      	ldr	r1, [pc, #100]	; (800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	4a1d      	ldr	r2, [pc, #116]	; (800ba4c <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800b9d6:	4623      	mov	r3, r4
 800b9d8:	2002      	movs	r0, #2
 800b9da:	47a8      	blx	r5
 800b9dc:	f7fc f89c 	bl	8007b18 <acc_rss_integration_log_level>
 800b9e0:	2801      	cmp	r0, #1
 800b9e2:	d909      	bls.n	800b9f8 <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800b9e4:	4a13      	ldr	r2, [pc, #76]	; (800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b9e6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800b9ea:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b9ec:	4912      	ldr	r1, [pc, #72]	; (800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	4a17      	ldr	r2, [pc, #92]	; (800ba50 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800b9f2:	4623      	mov	r3, r4
 800b9f4:	2002      	movs	r0, #2
 800b9f6:	47a8      	blx	r5
 800b9f8:	f7fc f88e 	bl	8007b18 <acc_rss_integration_log_level>
 800b9fc:	2801      	cmp	r0, #1
 800b9fe:	d909      	bls.n	800ba14 <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800ba00:	4a0c      	ldr	r2, [pc, #48]	; (800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800ba02:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800ba06:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ba08:	490b      	ldr	r1, [pc, #44]	; (800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	4a11      	ldr	r2, [pc, #68]	; (800ba54 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800ba0e:	4623      	mov	r3, r4
 800ba10:	2002      	movs	r0, #2
 800ba12:	47a8      	blx	r5
 800ba14:	f7fc f880 	bl	8007b18 <acc_rss_integration_log_level>
 800ba18:	2801      	cmp	r0, #1
 800ba1a:	d905      	bls.n	800ba28 <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800ba1e:	4a0e      	ldr	r2, [pc, #56]	; (800ba58 <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800ba20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba22:	4905      	ldr	r1, [pc, #20]	; (800ba38 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800ba24:	2002      	movs	r0, #2
 800ba26:	4798      	blx	r3
 800ba28:	b014      	add	sp, #80	; 0x50
 800ba2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba2e:	2500      	movs	r5, #0
 800ba30:	e752      	b.n	800b8d8 <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800ba32:	bf00      	nop
 800ba34:	200007ec 	.word	0x200007ec
 800ba38:	080126e4 	.word	0x080126e4
 800ba3c:	080128b4 	.word	0x080128b4
 800ba40:	080128dc 	.word	0x080128dc
 800ba44:	08012924 	.word	0x08012924
 800ba48:	08012978 	.word	0x08012978
 800ba4c:	0801299c 	.word	0x0801299c
 800ba50:	080129b8 	.word	0x080129b8
 800ba54:	080129d0 	.word	0x080129d0
 800ba58:	080129ec 	.word	0x080129ec
 800ba5c:	080128fc 	.word	0x080128fc

0800ba60 <acc_alg_basic_saturation_check_u16>:
 800ba60:	eddf 6a17 	vldr	s13, [pc, #92]	; 800bac0 <acc_alg_basic_saturation_check_u16+0x60>
 800ba64:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800bac4 <acc_alg_basic_saturation_check_u16+0x64>
 800ba68:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ba6c:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800ba70:	0849      	lsrs	r1, r1, #1
 800ba72:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800ba76:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ba7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ba7e:	d01c      	beq.n	800baba <acc_alg_basic_saturation_check_u16+0x5a>
 800ba80:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ba84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba88:	ee17 3a10 	vmov	r3, s14
 800ba8c:	b430      	push	{r4, r5}
 800ba8e:	b29d      	uxth	r5, r3
 800ba90:	ee17 3a90 	vmov	r3, s15
 800ba94:	b29c      	uxth	r4, r3
 800ba96:	1e83      	subs	r3, r0, #2
 800ba98:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800ba9c:	e003      	b.n	800baa6 <acc_alg_basic_saturation_check_u16+0x46>
 800ba9e:	42aa      	cmp	r2, r5
 800baa0:	d905      	bls.n	800baae <acc_alg_basic_saturation_check_u16+0x4e>
 800baa2:	428b      	cmp	r3, r1
 800baa4:	d006      	beq.n	800bab4 <acc_alg_basic_saturation_check_u16+0x54>
 800baa6:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800baaa:	42a2      	cmp	r2, r4
 800baac:	d3f7      	bcc.n	800ba9e <acc_alg_basic_saturation_check_u16+0x3e>
 800baae:	2001      	movs	r0, #1
 800bab0:	bc30      	pop	{r4, r5}
 800bab2:	4770      	bx	lr
 800bab4:	2000      	movs	r0, #0
 800bab6:	bc30      	pop	{r4, r5}
 800bab8:	4770      	bx	lr
 800baba:	4608      	mov	r0, r1
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	42c80000 	.word	0x42c80000
 800bac4:	477fff00 	.word	0x477fff00

0800bac8 <acc_alg_basic_saturation_check_i16>:
 800bac8:	eddf 6a17 	vldr	s13, [pc, #92]	; 800bb28 <acc_alg_basic_saturation_check_i16+0x60>
 800bacc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800bb2c <acc_alg_basic_saturation_check_i16+0x64>
 800bad0:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800bb30 <acc_alg_basic_saturation_check_i16+0x68>
 800bad4:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800bad8:	0849      	lsrs	r1, r1, #1
 800bada:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800bade:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bae2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bae6:	d01c      	beq.n	800bb22 <acc_alg_basic_saturation_check_i16+0x5a>
 800bae8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800baec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800baf0:	ee17 3a10 	vmov	r3, s14
 800baf4:	b430      	push	{r4, r5}
 800baf6:	b21d      	sxth	r5, r3
 800baf8:	ee17 3a90 	vmov	r3, s15
 800bafc:	b21c      	sxth	r4, r3
 800bafe:	1e83      	subs	r3, r0, #2
 800bb00:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800bb04:	e003      	b.n	800bb0e <acc_alg_basic_saturation_check_i16+0x46>
 800bb06:	42aa      	cmp	r2, r5
 800bb08:	dd05      	ble.n	800bb16 <acc_alg_basic_saturation_check_i16+0x4e>
 800bb0a:	428b      	cmp	r3, r1
 800bb0c:	d006      	beq.n	800bb1c <acc_alg_basic_saturation_check_i16+0x54>
 800bb0e:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800bb12:	42a2      	cmp	r2, r4
 800bb14:	dbf7      	blt.n	800bb06 <acc_alg_basic_saturation_check_i16+0x3e>
 800bb16:	2001      	movs	r0, #1
 800bb18:	bc30      	pop	{r4, r5}
 800bb1a:	4770      	bx	lr
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	bc30      	pop	{r4, r5}
 800bb20:	4770      	bx	lr
 800bb22:	4608      	mov	r0, r1
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	42c80000 	.word	0x42c80000
 800bb2c:	c7000000 	.word	0xc7000000
 800bb30:	46fffe00 	.word	0x46fffe00

0800bb34 <acc_confprogram_modify_bin_sensor>:
 800bb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bb3e:	2501      	movs	r5, #1
 800bb40:	409d      	lsls	r5, r3
 800bb42:	42b5      	cmp	r5, r6
 800bb44:	4688      	mov	r8, r1
 800bb46:	d917      	bls.n	800bb78 <acc_confprogram_modify_bin_sensor+0x44>
 800bb48:	461c      	mov	r4, r3
 800bb4a:	4692      	mov	sl, r2
 800bb4c:	4681      	mov	r9, r0
 800bb4e:	f1c4 0420 	rsb	r4, r4, #32
 800bb52:	f7fe fd5f 	bl	800a614 <acc_sensor_conf_read_instr>
 800bb56:	f04f 35ff 	mov.w	r5, #4294967295
 800bb5a:	40e5      	lsrs	r5, r4
 800bb5c:	fa05 f40a 	lsl.w	r4, r5, sl
 800bb60:	ea20 0404 	bic.w	r4, r0, r4
 800bb64:	fa06 f20a 	lsl.w	r2, r6, sl
 800bb68:	4641      	mov	r1, r8
 800bb6a:	4648      	mov	r0, r9
 800bb6c:	4322      	orrs	r2, r4
 800bb6e:	463b      	mov	r3, r7
 800bb70:	b002      	add	sp, #8
 800bb72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb76:	4718      	bx	r3
 800bb78:	4a06      	ldr	r2, [pc, #24]	; (800bb94 <acc_confprogram_modify_bin_sensor+0x60>)
 800bb7a:	9600      	str	r6, [sp, #0]
 800bb7c:	3d01      	subs	r5, #1
 800bb7e:	9501      	str	r5, [sp, #4]
 800bb80:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bb82:	4a05      	ldr	r2, [pc, #20]	; (800bb98 <acc_confprogram_modify_bin_sensor+0x64>)
 800bb84:	460b      	mov	r3, r1
 800bb86:	2000      	movs	r0, #0
 800bb88:	4904      	ldr	r1, [pc, #16]	; (800bb9c <acc_confprogram_modify_bin_sensor+0x68>)
 800bb8a:	47a0      	blx	r4
 800bb8c:	4803      	ldr	r0, [pc, #12]	; (800bb9c <acc_confprogram_modify_bin_sensor+0x68>)
 800bb8e:	2128      	movs	r1, #40	; 0x28
 800bb90:	f7fb feaa 	bl	80078e8 <acc_assert_fail>
 800bb94:	200007ec 	.word	0x200007ec
 800bb98:	08012a6c 	.word	0x08012a6c
 800bb9c:	08012aa4 	.word	0x08012aa4

0800bba0 <acc_confprogram_modify_bin>:
 800bba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	b084      	sub	sp, #16
 800bba6:	2701      	movs	r7, #1
 800bba8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bbaa:	fa07 f503 	lsl.w	r5, r7, r3
 800bbae:	42b5      	cmp	r5, r6
 800bbb0:	d91e      	bls.n	800bbf0 <acc_confprogram_modify_bin+0x50>
 800bbb2:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 800bbb6:	4690      	mov	r8, r2
 800bbb8:	461c      	mov	r4, r3
 800bbba:	4628      	mov	r0, r5
 800bbbc:	463a      	mov	r2, r7
 800bbbe:	a902      	add	r1, sp, #8
 800bbc0:	f7fc f80e 	bl	8007be0 <acc_utils_transfer_buffer_to_uint32>
 800bbc4:	f1c4 0420 	rsb	r4, r4, #32
 800bbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbcc:	9902      	ldr	r1, [sp, #8]
 800bbce:	40e3      	lsrs	r3, r4
 800bbd0:	fa03 f308 	lsl.w	r3, r3, r8
 800bbd4:	fa06 f608 	lsl.w	r6, r6, r8
 800bbd8:	ea21 0303 	bic.w	r3, r1, r3
 800bbdc:	4333      	orrs	r3, r6
 800bbde:	4629      	mov	r1, r5
 800bbe0:	463a      	mov	r2, r7
 800bbe2:	a803      	add	r0, sp, #12
 800bbe4:	9303      	str	r3, [sp, #12]
 800bbe6:	f7fb ffed 	bl	8007bc4 <acc_utils_uint32_to_transfer_buffer>
 800bbea:	b004      	add	sp, #16
 800bbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf0:	4a06      	ldr	r2, [pc, #24]	; (800bc0c <acc_confprogram_modify_bin+0x6c>)
 800bbf2:	9600      	str	r6, [sp, #0]
 800bbf4:	3d01      	subs	r5, #1
 800bbf6:	9501      	str	r5, [sp, #4]
 800bbf8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bbfa:	4a05      	ldr	r2, [pc, #20]	; (800bc10 <acc_confprogram_modify_bin+0x70>)
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	2000      	movs	r0, #0
 800bc00:	4904      	ldr	r1, [pc, #16]	; (800bc14 <acc_confprogram_modify_bin+0x74>)
 800bc02:	47a0      	blx	r4
 800bc04:	4803      	ldr	r0, [pc, #12]	; (800bc14 <acc_confprogram_modify_bin+0x74>)
 800bc06:	2138      	movs	r1, #56	; 0x38
 800bc08:	f7fb fe6e 	bl	80078e8 <acc_assert_fail>
 800bc0c:	200007ec 	.word	0x200007ec
 800bc10:	08012ab0 	.word	0x08012ab0
 800bc14:	08012aa4 	.word	0x08012aa4

0800bc18 <acc_confprogram_modify_runif_sensor>:
 800bc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	b082      	sub	sp, #8
 800bc20:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800bc24:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800bc28:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800bc2c:	f025 050f 	bic.w	r5, r5, #15
 800bc30:	4606      	mov	r6, r0
 800bc32:	b1b2      	cbz	r2, 800bc62 <acc_confprogram_modify_runif_sensor+0x4a>
 800bc34:	461f      	mov	r7, r3
 800bc36:	f7fb ff6f 	bl	8007b18 <acc_rss_integration_log_level>
 800bc3a:	2803      	cmp	r0, #3
 800bc3c:	ea45 0507 	orr.w	r5, r5, r7
 800bc40:	d907      	bls.n	800bc52 <acc_confprogram_modify_runif_sensor+0x3a>
 800bc42:	4b0e      	ldr	r3, [pc, #56]	; (800bc7c <acc_confprogram_modify_runif_sensor+0x64>)
 800bc44:	9700      	str	r7, [sp, #0]
 800bc46:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bc48:	4a0d      	ldr	r2, [pc, #52]	; (800bc80 <acc_confprogram_modify_runif_sensor+0x68>)
 800bc4a:	490e      	ldr	r1, [pc, #56]	; (800bc84 <acc_confprogram_modify_runif_sensor+0x6c>)
 800bc4c:	4623      	mov	r3, r4
 800bc4e:	2004      	movs	r0, #4
 800bc50:	47b8      	blx	r7
 800bc52:	462a      	mov	r2, r5
 800bc54:	4621      	mov	r1, r4
 800bc56:	4630      	mov	r0, r6
 800bc58:	4643      	mov	r3, r8
 800bc5a:	b002      	add	sp, #8
 800bc5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc60:	4718      	bx	r3
 800bc62:	f7fb ff59 	bl	8007b18 <acc_rss_integration_log_level>
 800bc66:	2803      	cmp	r0, #3
 800bc68:	d9f3      	bls.n	800bc52 <acc_confprogram_modify_runif_sensor+0x3a>
 800bc6a:	4b04      	ldr	r3, [pc, #16]	; (800bc7c <acc_confprogram_modify_runif_sensor+0x64>)
 800bc6c:	4a06      	ldr	r2, [pc, #24]	; (800bc88 <acc_confprogram_modify_runif_sensor+0x70>)
 800bc6e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bc70:	4904      	ldr	r1, [pc, #16]	; (800bc84 <acc_confprogram_modify_runif_sensor+0x6c>)
 800bc72:	4623      	mov	r3, r4
 800bc74:	2004      	movs	r0, #4
 800bc76:	47b8      	blx	r7
 800bc78:	e7eb      	b.n	800bc52 <acc_confprogram_modify_runif_sensor+0x3a>
 800bc7a:	bf00      	nop
 800bc7c:	200007ec 	.word	0x200007ec
 800bc80:	08012ae8 	.word	0x08012ae8
 800bc84:	08012aa4 	.word	0x08012aa4
 800bc88:	08012b20 	.word	0x08012b20

0800bc8c <acc_confprogram_modify_runif>:
 800bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc90:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800bc94:	b084      	sub	sp, #16
 800bc96:	4616      	mov	r6, r2
 800bc98:	460f      	mov	r7, r1
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	a902      	add	r1, sp, #8
 800bca0:	4698      	mov	r8, r3
 800bca2:	f7fb ff9d 	bl	8007be0 <acc_utils_transfer_buffer_to_uint32>
 800bca6:	9c02      	ldr	r4, [sp, #8]
 800bca8:	f024 040f 	bic.w	r4, r4, #15
 800bcac:	9403      	str	r4, [sp, #12]
 800bcae:	f1b8 0f00 	cmp.w	r8, #0
 800bcb2:	d015      	beq.n	800bce0 <acc_confprogram_modify_runif+0x54>
 800bcb4:	433c      	orrs	r4, r7
 800bcb6:	9403      	str	r4, [sp, #12]
 800bcb8:	f7fb ff2e 	bl	8007b18 <acc_rss_integration_log_level>
 800bcbc:	2803      	cmp	r0, #3
 800bcbe:	d907      	bls.n	800bcd0 <acc_confprogram_modify_runif+0x44>
 800bcc0:	4a0e      	ldr	r2, [pc, #56]	; (800bcfc <acc_confprogram_modify_runif+0x70>)
 800bcc2:	9700      	str	r7, [sp, #0]
 800bcc4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bcc6:	490e      	ldr	r1, [pc, #56]	; (800bd00 <acc_confprogram_modify_runif+0x74>)
 800bcc8:	4a0e      	ldr	r2, [pc, #56]	; (800bd04 <acc_confprogram_modify_runif+0x78>)
 800bcca:	0873      	lsrs	r3, r6, #1
 800bccc:	2004      	movs	r0, #4
 800bcce:	47a0      	blx	r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	a803      	add	r0, sp, #12
 800bcd6:	f7fb ff75 	bl	8007bc4 <acc_utils_uint32_to_transfer_buffer>
 800bcda:	b004      	add	sp, #16
 800bcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce0:	f7fb ff1a 	bl	8007b18 <acc_rss_integration_log_level>
 800bce4:	2803      	cmp	r0, #3
 800bce6:	d9f3      	bls.n	800bcd0 <acc_confprogram_modify_runif+0x44>
 800bce8:	4a04      	ldr	r2, [pc, #16]	; (800bcfc <acc_confprogram_modify_runif+0x70>)
 800bcea:	9700      	str	r7, [sp, #0]
 800bcec:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bcee:	4904      	ldr	r1, [pc, #16]	; (800bd00 <acc_confprogram_modify_runif+0x74>)
 800bcf0:	4a05      	ldr	r2, [pc, #20]	; (800bd08 <acc_confprogram_modify_runif+0x7c>)
 800bcf2:	0873      	lsrs	r3, r6, #1
 800bcf4:	2004      	movs	r0, #4
 800bcf6:	47a0      	blx	r4
 800bcf8:	e7ea      	b.n	800bcd0 <acc_confprogram_modify_runif+0x44>
 800bcfa:	bf00      	nop
 800bcfc:	200007ec 	.word	0x200007ec
 800bd00:	08012aa4 	.word	0x08012aa4
 800bd04:	08012ae8 	.word	0x08012ae8
 800bd08:	08012b50 	.word	0x08012b50

0800bd0c <acc_confprogram_patch_offset>:
 800bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd10:	b083      	sub	sp, #12
 800bd12:	4680      	mov	r8, r0
 800bd14:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800bd18:	460e      	mov	r6, r1
 800bd1a:	4617      	mov	r7, r2
 800bd1c:	461d      	mov	r5, r3
 800bd1e:	f7fb fefb 	bl	8007b18 <acc_rss_integration_log_level>
 800bd22:	2803      	cmp	r0, #3
 800bd24:	d909      	bls.n	800bd3a <acc_confprogram_patch_offset+0x2e>
 800bd26:	4b39      	ldr	r3, [pc, #228]	; (800be0c <acc_confprogram_patch_offset+0x100>)
 800bd28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd2a:	9200      	str	r2, [sp, #0]
 800bd2c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800bd30:	4a37      	ldr	r2, [pc, #220]	; (800be10 <acc_confprogram_patch_offset+0x104>)
 800bd32:	4938      	ldr	r1, [pc, #224]	; (800be14 <acc_confprogram_patch_offset+0x108>)
 800bd34:	4623      	mov	r3, r4
 800bd36:	2004      	movs	r0, #4
 800bd38:	47c8      	blx	r9
 800bd3a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bd3e:	8869      	ldrh	r1, [r5, #2]
 800bd40:	2900      	cmp	r1, #0
 800bd42:	d03a      	beq.n	800bdba <acc_confprogram_patch_offset+0xae>
 800bd44:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 800be0c <acc_confprogram_patch_offset+0x100>
 800bd48:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800be18 <acc_confprogram_patch_offset+0x10c>
 800bd4c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800be14 <acc_confprogram_patch_offset+0x108>
 800bd50:	2400      	movs	r4, #0
 800bd52:	e01c      	b.n	800bd8e <acc_confprogram_patch_offset+0x82>
 800bd54:	f10c 33ff 	add.w	r3, ip, #4294967295
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d824      	bhi.n	800bda6 <acc_confprogram_patch_offset+0x9a>
 800bd5c:	8882      	ldrh	r2, [r0, #4]
 800bd5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d010      	beq.n	800bd88 <acc_confprogram_patch_offset+0x7c>
 800bd66:	0052      	lsls	r2, r2, #1
 800bd68:	fa1f fe82 	uxth.w	lr, r2
 800bd6c:	45b6      	cmp	lr, r6
 800bd6e:	d30b      	bcc.n	800bd88 <acc_confprogram_patch_offset+0x7c>
 800bd70:	19f3      	adds	r3, r6, r7
 800bd72:	459e      	cmp	lr, r3
 800bd74:	da08      	bge.n	800bd88 <acc_confprogram_patch_offset+0x7c>
 800bd76:	f1bc 0f01 	cmp.w	ip, #1
 800bd7a:	d021      	beq.n	800bdc0 <acc_confprogram_patch_offset+0xb4>
 800bd7c:	f1bc 0f02 	cmp.w	ip, #2
 800bd80:	d037      	beq.n	800bdf2 <acc_confprogram_patch_offset+0xe6>
 800bd82:	f1bc 0f00 	cmp.w	ip, #0
 800bd86:	d028      	beq.n	800bdda <acc_confprogram_patch_offset+0xce>
 800bd88:	3401      	adds	r4, #1
 800bd8a:	42a1      	cmp	r1, r4
 800bd8c:	d915      	bls.n	800bdba <acc_confprogram_patch_offset+0xae>
 800bd8e:	6868      	ldr	r0, [r5, #4]
 800bd90:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800bd94:	f810 c013 	ldrb.w	ip, [r0, r3, lsl #1]
 800bd98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800bd9c:	f1bc 0f00 	cmp.w	ip, #0
 800bda0:	d1d8      	bne.n	800bd54 <acc_confprogram_patch_offset+0x48>
 800bda2:	8842      	ldrh	r2, [r0, #2]
 800bda4:	e7db      	b.n	800bd5e <acc_confprogram_patch_offset+0x52>
 800bda6:	4649      	mov	r1, r9
 800bda8:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800bdac:	4652      	mov	r2, sl
 800bdae:	2000      	movs	r0, #0
 800bdb0:	4798      	blx	r3
 800bdb2:	8869      	ldrh	r1, [r5, #2]
 800bdb4:	3401      	adds	r4, #1
 800bdb6:	42a1      	cmp	r1, r4
 800bdb8:	d8e9      	bhi.n	800bd8e <acc_confprogram_patch_offset+0x82>
 800bdba:	b003      	add	sp, #12
 800bdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdc2:	8841      	ldrh	r1, [r0, #2]
 800bdc4:	ebae 0206 	sub.w	r2, lr, r6
 800bdc8:	3b00      	subs	r3, #0
 800bdca:	b292      	uxth	r2, r2
 800bdcc:	bf18      	it	ne
 800bdce:	2301      	movne	r3, #1
 800bdd0:	4640      	mov	r0, r8
 800bdd2:	f7ff ff5b 	bl	800bc8c <acc_confprogram_modify_runif>
 800bdd6:	8869      	ldrh	r1, [r5, #2]
 800bdd8:	e7d6      	b.n	800bd88 <acc_confprogram_patch_offset+0x7c>
 800bdda:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bddc:	7943      	ldrb	r3, [r0, #5]
 800bdde:	7902      	ldrb	r2, [r0, #4]
 800bde0:	9100      	str	r1, [sp, #0]
 800bde2:	ebae 0106 	sub.w	r1, lr, r6
 800bde6:	b289      	uxth	r1, r1
 800bde8:	4640      	mov	r0, r8
 800bdea:	f7ff fed9 	bl	800bba0 <acc_confprogram_modify_bin>
 800bdee:	8869      	ldrh	r1, [r5, #2]
 800bdf0:	e7ca      	b.n	800bd88 <acc_confprogram_patch_offset+0x7c>
 800bdf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdf4:	8841      	ldrh	r1, [r0, #2]
 800bdf6:	ebae 0206 	sub.w	r2, lr, r6
 800bdfa:	fab3 f383 	clz	r3, r3
 800bdfe:	b292      	uxth	r2, r2
 800be00:	095b      	lsrs	r3, r3, #5
 800be02:	4640      	mov	r0, r8
 800be04:	f7ff ff42 	bl	800bc8c <acc_confprogram_modify_runif>
 800be08:	8869      	ldrh	r1, [r5, #2]
 800be0a:	e7bd      	b.n	800bd88 <acc_confprogram_patch_offset+0x7c>
 800be0c:	200007ec 	.word	0x200007ec
 800be10:	08012bb8 	.word	0x08012bb8
 800be14:	08012aa4 	.word	0x08012aa4
 800be18:	08012b84 	.word	0x08012b84

0800be1c <acc_confprogram_live_patch>:
 800be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	b083      	sub	sp, #12
 800be22:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
 800be26:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800be2a:	4607      	mov	r7, r0
 800be2c:	468b      	mov	fp, r1
 800be2e:	4690      	mov	r8, r2
 800be30:	461e      	mov	r6, r3
 800be32:	f7fb fe71 	bl	8007b18 <acc_rss_integration_log_level>
 800be36:	2803      	cmp	r0, #3
 800be38:	d908      	bls.n	800be4c <acc_confprogram_live_patch+0x30>
 800be3a:	4b2a      	ldr	r3, [pc, #168]	; (800bee4 <acc_confprogram_live_patch+0xc8>)
 800be3c:	f8cd 9000 	str.w	r9, [sp]
 800be40:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800be42:	4a29      	ldr	r2, [pc, #164]	; (800bee8 <acc_confprogram_live_patch+0xcc>)
 800be44:	4929      	ldr	r1, [pc, #164]	; (800beec <acc_confprogram_live_patch+0xd0>)
 800be46:	4623      	mov	r3, r4
 800be48:	2004      	movs	r0, #4
 800be4a:	47a8      	blx	r5
 800be4c:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800be50:	8873      	ldrh	r3, [r6, #2]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d043      	beq.n	800bede <acc_confprogram_live_patch+0xc2>
 800be56:	2500      	movs	r5, #0
 800be58:	e011      	b.n	800be7e <acc_confprogram_live_patch+0x62>
 800be5a:	88a2      	ldrh	r2, [r4, #4]
 800be5c:	8863      	ldrh	r3, [r4, #2]
 800be5e:	f8cd a004 	str.w	sl, [sp, #4]
 800be62:	fab9 f189 	clz	r1, r9
 800be66:	4442      	add	r2, r8
 800be68:	0949      	lsrs	r1, r1, #5
 800be6a:	9100      	str	r1, [sp, #0]
 800be6c:	b292      	uxth	r2, r2
 800be6e:	4659      	mov	r1, fp
 800be70:	4638      	mov	r0, r7
 800be72:	f7ff fed1 	bl	800bc18 <acc_confprogram_modify_runif_sensor>
 800be76:	8873      	ldrh	r3, [r6, #2]
 800be78:	3501      	adds	r5, #1
 800be7a:	42ab      	cmp	r3, r5
 800be7c:	d92f      	bls.n	800bede <acc_confprogram_live_patch+0xc2>
 800be7e:	6873      	ldr	r3, [r6, #4]
 800be80:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800be84:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
 800be88:	2a01      	cmp	r2, #1
 800be8a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800be8e:	d00c      	beq.n	800beaa <acc_confprogram_live_patch+0x8e>
 800be90:	2a02      	cmp	r2, #2
 800be92:	d0e2      	beq.n	800be5a <acc_confprogram_live_patch+0x3e>
 800be94:	b19a      	cbz	r2, 800bebe <acc_confprogram_live_patch+0xa2>
 800be96:	4b13      	ldr	r3, [pc, #76]	; (800bee4 <acc_confprogram_live_patch+0xc8>)
 800be98:	4914      	ldr	r1, [pc, #80]	; (800beec <acc_confprogram_live_patch+0xd0>)
 800be9a:	4a15      	ldr	r2, [pc, #84]	; (800bef0 <acc_confprogram_live_patch+0xd4>)
 800be9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9e:	2000      	movs	r0, #0
 800bea0:	4798      	blx	r3
 800bea2:	4812      	ldr	r0, [pc, #72]	; (800beec <acc_confprogram_live_patch+0xd0>)
 800bea4:	21e6      	movs	r1, #230	; 0xe6
 800bea6:	f7fb fd1f 	bl	80078e8 <acc_assert_fail>
 800beaa:	88a2      	ldrh	r2, [r4, #4]
 800beac:	8863      	ldrh	r3, [r4, #2]
 800beae:	f8cd a004 	str.w	sl, [sp, #4]
 800beb2:	f1b9 0100 	subs.w	r1, r9, #0
 800beb6:	4442      	add	r2, r8
 800beb8:	bf18      	it	ne
 800beba:	2101      	movne	r1, #1
 800bebc:	e7d5      	b.n	800be6a <acc_confprogram_live_patch+0x4e>
 800bebe:	8861      	ldrh	r1, [r4, #2]
 800bec0:	7963      	ldrb	r3, [r4, #5]
 800bec2:	7922      	ldrb	r2, [r4, #4]
 800bec4:	f8cd a004 	str.w	sl, [sp, #4]
 800bec8:	4441      	add	r1, r8
 800beca:	b289      	uxth	r1, r1
 800becc:	f8cd 9000 	str.w	r9, [sp]
 800bed0:	4638      	mov	r0, r7
 800bed2:	f7ff fe2f 	bl	800bb34 <acc_confprogram_modify_bin_sensor>
 800bed6:	8873      	ldrh	r3, [r6, #2]
 800bed8:	3501      	adds	r5, #1
 800beda:	42ab      	cmp	r3, r5
 800bedc:	d8cf      	bhi.n	800be7e <acc_confprogram_live_patch+0x62>
 800bede:	b003      	add	sp, #12
 800bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee4:	200007ec 	.word	0x200007ec
 800bee8:	08012bb4 	.word	0x08012bb4
 800beec:	08012aa4 	.word	0x08012aa4
 800bef0:	08012bd8 	.word	0x08012bd8

0800bef4 <acc_confprogram_get_default_value>:
 800bef4:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop

0800befc <acc_confprogram_copy>:
 800befc:	b152      	cbz	r2, 800bf14 <acc_confprogram_copy+0x18>
 800befe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bf02:	3804      	subs	r0, #4
 800bf04:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800bf08:	804b      	strh	r3, [r1, #2]
 800bf0a:	0c1b      	lsrs	r3, r3, #16
 800bf0c:	800b      	strh	r3, [r1, #0]
 800bf0e:	3104      	adds	r1, #4
 800bf10:	4291      	cmp	r1, r2
 800bf12:	d1f7      	bne.n	800bf04 <acc_confprogram_copy+0x8>
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop

0800bf18 <acc_diagnostic_log_set_scope>:
 800bf18:	4b02      	ldr	r3, [pc, #8]	; (800bf24 <acc_diagnostic_log_set_scope+0xc>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	b10b      	cbz	r3, 800bf22 <acc_diagnostic_log_set_scope+0xa>
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4718      	bx	r3
 800bf22:	4770      	bx	lr
 800bf24:	200007d8 	.word	0x200007d8

0800bf28 <acc_diagnostic_log_declare_parameter>:
 800bf28:	4b02      	ldr	r3, [pc, #8]	; (800bf34 <acc_diagnostic_log_declare_parameter+0xc>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	b10b      	cbz	r3, 800bf32 <acc_diagnostic_log_declare_parameter+0xa>
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	4718      	bx	r3
 800bf32:	4770      	bx	lr
 800bf34:	200007d8 	.word	0x200007d8

0800bf38 <acc_diagnostic_log_set_parameter>:
 800bf38:	4b02      	ldr	r3, [pc, #8]	; (800bf44 <acc_diagnostic_log_set_parameter+0xc>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	b10b      	cbz	r3, 800bf42 <acc_diagnostic_log_set_parameter+0xa>
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	4718      	bx	r3
 800bf42:	4770      	bx	lr
 800bf44:	200007d8 	.word	0x200007d8

0800bf48 <acc_diagnostic_log_array>:
 800bf48:	4b02      	ldr	r3, [pc, #8]	; (800bf54 <acc_diagnostic_log_array+0xc>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	b10b      	cbz	r3, 800bf52 <acc_diagnostic_log_array+0xa>
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	4718      	bx	r3
 800bf52:	4770      	bx	lr
 800bf54:	200007d8 	.word	0x200007d8

0800bf58 <acc_diagnostic_log_scalar>:
 800bf58:	4b02      	ldr	r3, [pc, #8]	; (800bf64 <acc_diagnostic_log_scalar+0xc>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	b10b      	cbz	r3, 800bf62 <acc_diagnostic_log_scalar+0xa>
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	4718      	bx	r3
 800bf62:	4770      	bx	lr
 800bf64:	200007d8 	.word	0x200007d8

0800bf68 <acc_diagnostic_log_data_u16>:
 800bf68:	4b02      	ldr	r3, [pc, #8]	; (800bf74 <acc_diagnostic_log_data_u16+0xc>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	b10b      	cbz	r3, 800bf72 <acc_diagnostic_log_data_u16+0xa>
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	4718      	bx	r3
 800bf72:	4770      	bx	lr
 800bf74:	200007d8 	.word	0x200007d8

0800bf78 <__errno>:
 800bf78:	4b01      	ldr	r3, [pc, #4]	; (800bf80 <__errno+0x8>)
 800bf7a:	6818      	ldr	r0, [r3, #0]
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	20000134 	.word	0x20000134

0800bf84 <__sflush_r>:
 800bf84:	898a      	ldrh	r2, [r1, #12]
 800bf86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	0710      	lsls	r0, r2, #28
 800bf8e:	460c      	mov	r4, r1
 800bf90:	d458      	bmi.n	800c044 <__sflush_r+0xc0>
 800bf92:	684b      	ldr	r3, [r1, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dc05      	bgt.n	800bfa4 <__sflush_r+0x20>
 800bf98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	dc02      	bgt.n	800bfa4 <__sflush_r+0x20>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfa6:	2e00      	cmp	r6, #0
 800bfa8:	d0f9      	beq.n	800bf9e <__sflush_r+0x1a>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfb0:	682f      	ldr	r7, [r5, #0]
 800bfb2:	602b      	str	r3, [r5, #0]
 800bfb4:	d032      	beq.n	800c01c <__sflush_r+0x98>
 800bfb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	075a      	lsls	r2, r3, #29
 800bfbc:	d505      	bpl.n	800bfca <__sflush_r+0x46>
 800bfbe:	6863      	ldr	r3, [r4, #4]
 800bfc0:	1ac0      	subs	r0, r0, r3
 800bfc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfc4:	b10b      	cbz	r3, 800bfca <__sflush_r+0x46>
 800bfc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfc8:	1ac0      	subs	r0, r0, r3
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4602      	mov	r2, r0
 800bfce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfd0:	6a21      	ldr	r1, [r4, #32]
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	47b0      	blx	r6
 800bfd6:	1c43      	adds	r3, r0, #1
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	d106      	bne.n	800bfea <__sflush_r+0x66>
 800bfdc:	6829      	ldr	r1, [r5, #0]
 800bfde:	291d      	cmp	r1, #29
 800bfe0:	d82c      	bhi.n	800c03c <__sflush_r+0xb8>
 800bfe2:	4a2a      	ldr	r2, [pc, #168]	; (800c08c <__sflush_r+0x108>)
 800bfe4:	40ca      	lsrs	r2, r1
 800bfe6:	07d6      	lsls	r6, r2, #31
 800bfe8:	d528      	bpl.n	800c03c <__sflush_r+0xb8>
 800bfea:	2200      	movs	r2, #0
 800bfec:	6062      	str	r2, [r4, #4]
 800bfee:	04d9      	lsls	r1, r3, #19
 800bff0:	6922      	ldr	r2, [r4, #16]
 800bff2:	6022      	str	r2, [r4, #0]
 800bff4:	d504      	bpl.n	800c000 <__sflush_r+0x7c>
 800bff6:	1c42      	adds	r2, r0, #1
 800bff8:	d101      	bne.n	800bffe <__sflush_r+0x7a>
 800bffa:	682b      	ldr	r3, [r5, #0]
 800bffc:	b903      	cbnz	r3, 800c000 <__sflush_r+0x7c>
 800bffe:	6560      	str	r0, [r4, #84]	; 0x54
 800c000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c002:	602f      	str	r7, [r5, #0]
 800c004:	2900      	cmp	r1, #0
 800c006:	d0ca      	beq.n	800bf9e <__sflush_r+0x1a>
 800c008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c00c:	4299      	cmp	r1, r3
 800c00e:	d002      	beq.n	800c016 <__sflush_r+0x92>
 800c010:	4628      	mov	r0, r5
 800c012:	f000 f9e9 	bl	800c3e8 <_free_r>
 800c016:	2000      	movs	r0, #0
 800c018:	6360      	str	r0, [r4, #52]	; 0x34
 800c01a:	e7c1      	b.n	800bfa0 <__sflush_r+0x1c>
 800c01c:	6a21      	ldr	r1, [r4, #32]
 800c01e:	2301      	movs	r3, #1
 800c020:	4628      	mov	r0, r5
 800c022:	47b0      	blx	r6
 800c024:	1c41      	adds	r1, r0, #1
 800c026:	d1c7      	bne.n	800bfb8 <__sflush_r+0x34>
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0c4      	beq.n	800bfb8 <__sflush_r+0x34>
 800c02e:	2b1d      	cmp	r3, #29
 800c030:	d001      	beq.n	800c036 <__sflush_r+0xb2>
 800c032:	2b16      	cmp	r3, #22
 800c034:	d101      	bne.n	800c03a <__sflush_r+0xb6>
 800c036:	602f      	str	r7, [r5, #0]
 800c038:	e7b1      	b.n	800bf9e <__sflush_r+0x1a>
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	e7ad      	b.n	800bfa0 <__sflush_r+0x1c>
 800c044:	690f      	ldr	r7, [r1, #16]
 800c046:	2f00      	cmp	r7, #0
 800c048:	d0a9      	beq.n	800bf9e <__sflush_r+0x1a>
 800c04a:	0793      	lsls	r3, r2, #30
 800c04c:	680e      	ldr	r6, [r1, #0]
 800c04e:	bf08      	it	eq
 800c050:	694b      	ldreq	r3, [r1, #20]
 800c052:	600f      	str	r7, [r1, #0]
 800c054:	bf18      	it	ne
 800c056:	2300      	movne	r3, #0
 800c058:	eba6 0807 	sub.w	r8, r6, r7
 800c05c:	608b      	str	r3, [r1, #8]
 800c05e:	f1b8 0f00 	cmp.w	r8, #0
 800c062:	dd9c      	ble.n	800bf9e <__sflush_r+0x1a>
 800c064:	6a21      	ldr	r1, [r4, #32]
 800c066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c068:	4643      	mov	r3, r8
 800c06a:	463a      	mov	r2, r7
 800c06c:	4628      	mov	r0, r5
 800c06e:	47b0      	blx	r6
 800c070:	2800      	cmp	r0, #0
 800c072:	dc06      	bgt.n	800c082 <__sflush_r+0xfe>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295
 800c080:	e78e      	b.n	800bfa0 <__sflush_r+0x1c>
 800c082:	4407      	add	r7, r0
 800c084:	eba8 0800 	sub.w	r8, r8, r0
 800c088:	e7e9      	b.n	800c05e <__sflush_r+0xda>
 800c08a:	bf00      	nop
 800c08c:	20400001 	.word	0x20400001

0800c090 <_fflush_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	690b      	ldr	r3, [r1, #16]
 800c094:	4605      	mov	r5, r0
 800c096:	460c      	mov	r4, r1
 800c098:	b913      	cbnz	r3, 800c0a0 <_fflush_r+0x10>
 800c09a:	2500      	movs	r5, #0
 800c09c:	4628      	mov	r0, r5
 800c09e:	bd38      	pop	{r3, r4, r5, pc}
 800c0a0:	b118      	cbz	r0, 800c0aa <_fflush_r+0x1a>
 800c0a2:	6983      	ldr	r3, [r0, #24]
 800c0a4:	b90b      	cbnz	r3, 800c0aa <_fflush_r+0x1a>
 800c0a6:	f000 f899 	bl	800c1dc <__sinit>
 800c0aa:	4b14      	ldr	r3, [pc, #80]	; (800c0fc <_fflush_r+0x6c>)
 800c0ac:	429c      	cmp	r4, r3
 800c0ae:	d11b      	bne.n	800c0e8 <_fflush_r+0x58>
 800c0b0:	686c      	ldr	r4, [r5, #4]
 800c0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d0ef      	beq.n	800c09a <_fflush_r+0xa>
 800c0ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0bc:	07d0      	lsls	r0, r2, #31
 800c0be:	d404      	bmi.n	800c0ca <_fflush_r+0x3a>
 800c0c0:	0599      	lsls	r1, r3, #22
 800c0c2:	d402      	bmi.n	800c0ca <_fflush_r+0x3a>
 800c0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0c6:	f000 f94c 	bl	800c362 <__retarget_lock_acquire_recursive>
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	f7ff ff59 	bl	800bf84 <__sflush_r>
 800c0d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0d4:	07da      	lsls	r2, r3, #31
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	d4e0      	bmi.n	800c09c <_fflush_r+0xc>
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	059b      	lsls	r3, r3, #22
 800c0de:	d4dd      	bmi.n	800c09c <_fflush_r+0xc>
 800c0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0e2:	f000 f93f 	bl	800c364 <__retarget_lock_release_recursive>
 800c0e6:	e7d9      	b.n	800c09c <_fflush_r+0xc>
 800c0e8:	4b05      	ldr	r3, [pc, #20]	; (800c100 <_fflush_r+0x70>)
 800c0ea:	429c      	cmp	r4, r3
 800c0ec:	d101      	bne.n	800c0f2 <_fflush_r+0x62>
 800c0ee:	68ac      	ldr	r4, [r5, #8]
 800c0f0:	e7df      	b.n	800c0b2 <_fflush_r+0x22>
 800c0f2:	4b04      	ldr	r3, [pc, #16]	; (800c104 <_fflush_r+0x74>)
 800c0f4:	429c      	cmp	r4, r3
 800c0f6:	bf08      	it	eq
 800c0f8:	68ec      	ldreq	r4, [r5, #12]
 800c0fa:	e7da      	b.n	800c0b2 <_fflush_r+0x22>
 800c0fc:	08014134 	.word	0x08014134
 800c100:	08014154 	.word	0x08014154
 800c104:	08014114 	.word	0x08014114

0800c108 <fflush>:
 800c108:	4601      	mov	r1, r0
 800c10a:	b920      	cbnz	r0, 800c116 <fflush+0xe>
 800c10c:	4b04      	ldr	r3, [pc, #16]	; (800c120 <fflush+0x18>)
 800c10e:	4905      	ldr	r1, [pc, #20]	; (800c124 <fflush+0x1c>)
 800c110:	6818      	ldr	r0, [r3, #0]
 800c112:	f000 b8e1 	b.w	800c2d8 <_fwalk_reent>
 800c116:	4b04      	ldr	r3, [pc, #16]	; (800c128 <fflush+0x20>)
 800c118:	6818      	ldr	r0, [r3, #0]
 800c11a:	f7ff bfb9 	b.w	800c090 <_fflush_r>
 800c11e:	bf00      	nop
 800c120:	08014174 	.word	0x08014174
 800c124:	0800c091 	.word	0x0800c091
 800c128:	20000134 	.word	0x20000134

0800c12c <std>:
 800c12c:	2300      	movs	r3, #0
 800c12e:	b510      	push	{r4, lr}
 800c130:	4604      	mov	r4, r0
 800c132:	e9c0 3300 	strd	r3, r3, [r0]
 800c136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c13a:	6083      	str	r3, [r0, #8]
 800c13c:	8181      	strh	r1, [r0, #12]
 800c13e:	6643      	str	r3, [r0, #100]	; 0x64
 800c140:	81c2      	strh	r2, [r0, #14]
 800c142:	6183      	str	r3, [r0, #24]
 800c144:	4619      	mov	r1, r3
 800c146:	2208      	movs	r2, #8
 800c148:	305c      	adds	r0, #92	; 0x5c
 800c14a:	f000 f945 	bl	800c3d8 <memset>
 800c14e:	4b05      	ldr	r3, [pc, #20]	; (800c164 <std+0x38>)
 800c150:	6263      	str	r3, [r4, #36]	; 0x24
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <std+0x3c>)
 800c154:	62a3      	str	r3, [r4, #40]	; 0x28
 800c156:	4b05      	ldr	r3, [pc, #20]	; (800c16c <std+0x40>)
 800c158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <std+0x44>)
 800c15c:	6224      	str	r4, [r4, #32]
 800c15e:	6323      	str	r3, [r4, #48]	; 0x30
 800c160:	bd10      	pop	{r4, pc}
 800c162:	bf00      	nop
 800c164:	0800cff9 	.word	0x0800cff9
 800c168:	0800d01b 	.word	0x0800d01b
 800c16c:	0800d053 	.word	0x0800d053
 800c170:	0800d077 	.word	0x0800d077

0800c174 <_cleanup_r>:
 800c174:	4901      	ldr	r1, [pc, #4]	; (800c17c <_cleanup_r+0x8>)
 800c176:	f000 b8af 	b.w	800c2d8 <_fwalk_reent>
 800c17a:	bf00      	nop
 800c17c:	0800c091 	.word	0x0800c091

0800c180 <__sfmoreglue>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	2268      	movs	r2, #104	; 0x68
 800c184:	1e4d      	subs	r5, r1, #1
 800c186:	4355      	muls	r5, r2
 800c188:	460e      	mov	r6, r1
 800c18a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c18e:	f000 f997 	bl	800c4c0 <_malloc_r>
 800c192:	4604      	mov	r4, r0
 800c194:	b140      	cbz	r0, 800c1a8 <__sfmoreglue+0x28>
 800c196:	2100      	movs	r1, #0
 800c198:	e9c0 1600 	strd	r1, r6, [r0]
 800c19c:	300c      	adds	r0, #12
 800c19e:	60a0      	str	r0, [r4, #8]
 800c1a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1a4:	f000 f918 	bl	800c3d8 <memset>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}

0800c1ac <__sfp_lock_acquire>:
 800c1ac:	4801      	ldr	r0, [pc, #4]	; (800c1b4 <__sfp_lock_acquire+0x8>)
 800c1ae:	f000 b8d8 	b.w	800c362 <__retarget_lock_acquire_recursive>
 800c1b2:	bf00      	nop
 800c1b4:	200007dd 	.word	0x200007dd

0800c1b8 <__sfp_lock_release>:
 800c1b8:	4801      	ldr	r0, [pc, #4]	; (800c1c0 <__sfp_lock_release+0x8>)
 800c1ba:	f000 b8d3 	b.w	800c364 <__retarget_lock_release_recursive>
 800c1be:	bf00      	nop
 800c1c0:	200007dd 	.word	0x200007dd

0800c1c4 <__sinit_lock_acquire>:
 800c1c4:	4801      	ldr	r0, [pc, #4]	; (800c1cc <__sinit_lock_acquire+0x8>)
 800c1c6:	f000 b8cc 	b.w	800c362 <__retarget_lock_acquire_recursive>
 800c1ca:	bf00      	nop
 800c1cc:	200007de 	.word	0x200007de

0800c1d0 <__sinit_lock_release>:
 800c1d0:	4801      	ldr	r0, [pc, #4]	; (800c1d8 <__sinit_lock_release+0x8>)
 800c1d2:	f000 b8c7 	b.w	800c364 <__retarget_lock_release_recursive>
 800c1d6:	bf00      	nop
 800c1d8:	200007de 	.word	0x200007de

0800c1dc <__sinit>:
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	4604      	mov	r4, r0
 800c1e0:	f7ff fff0 	bl	800c1c4 <__sinit_lock_acquire>
 800c1e4:	69a3      	ldr	r3, [r4, #24]
 800c1e6:	b11b      	cbz	r3, 800c1f0 <__sinit+0x14>
 800c1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ec:	f7ff bff0 	b.w	800c1d0 <__sinit_lock_release>
 800c1f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1f4:	6523      	str	r3, [r4, #80]	; 0x50
 800c1f6:	4b13      	ldr	r3, [pc, #76]	; (800c244 <__sinit+0x68>)
 800c1f8:	4a13      	ldr	r2, [pc, #76]	; (800c248 <__sinit+0x6c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1fe:	42a3      	cmp	r3, r4
 800c200:	bf04      	itt	eq
 800c202:	2301      	moveq	r3, #1
 800c204:	61a3      	streq	r3, [r4, #24]
 800c206:	4620      	mov	r0, r4
 800c208:	f000 f820 	bl	800c24c <__sfp>
 800c20c:	6060      	str	r0, [r4, #4]
 800c20e:	4620      	mov	r0, r4
 800c210:	f000 f81c 	bl	800c24c <__sfp>
 800c214:	60a0      	str	r0, [r4, #8]
 800c216:	4620      	mov	r0, r4
 800c218:	f000 f818 	bl	800c24c <__sfp>
 800c21c:	2200      	movs	r2, #0
 800c21e:	60e0      	str	r0, [r4, #12]
 800c220:	2104      	movs	r1, #4
 800c222:	6860      	ldr	r0, [r4, #4]
 800c224:	f7ff ff82 	bl	800c12c <std>
 800c228:	68a0      	ldr	r0, [r4, #8]
 800c22a:	2201      	movs	r2, #1
 800c22c:	2109      	movs	r1, #9
 800c22e:	f7ff ff7d 	bl	800c12c <std>
 800c232:	68e0      	ldr	r0, [r4, #12]
 800c234:	2202      	movs	r2, #2
 800c236:	2112      	movs	r1, #18
 800c238:	f7ff ff78 	bl	800c12c <std>
 800c23c:	2301      	movs	r3, #1
 800c23e:	61a3      	str	r3, [r4, #24]
 800c240:	e7d2      	b.n	800c1e8 <__sinit+0xc>
 800c242:	bf00      	nop
 800c244:	08014174 	.word	0x08014174
 800c248:	0800c175 	.word	0x0800c175

0800c24c <__sfp>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	4607      	mov	r7, r0
 800c250:	f7ff ffac 	bl	800c1ac <__sfp_lock_acquire>
 800c254:	4b1e      	ldr	r3, [pc, #120]	; (800c2d0 <__sfp+0x84>)
 800c256:	681e      	ldr	r6, [r3, #0]
 800c258:	69b3      	ldr	r3, [r6, #24]
 800c25a:	b913      	cbnz	r3, 800c262 <__sfp+0x16>
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff ffbd 	bl	800c1dc <__sinit>
 800c262:	3648      	adds	r6, #72	; 0x48
 800c264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c268:	3b01      	subs	r3, #1
 800c26a:	d503      	bpl.n	800c274 <__sfp+0x28>
 800c26c:	6833      	ldr	r3, [r6, #0]
 800c26e:	b30b      	cbz	r3, 800c2b4 <__sfp+0x68>
 800c270:	6836      	ldr	r6, [r6, #0]
 800c272:	e7f7      	b.n	800c264 <__sfp+0x18>
 800c274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c278:	b9d5      	cbnz	r5, 800c2b0 <__sfp+0x64>
 800c27a:	4b16      	ldr	r3, [pc, #88]	; (800c2d4 <__sfp+0x88>)
 800c27c:	60e3      	str	r3, [r4, #12]
 800c27e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c282:	6665      	str	r5, [r4, #100]	; 0x64
 800c284:	f000 f86c 	bl	800c360 <__retarget_lock_init_recursive>
 800c288:	f7ff ff96 	bl	800c1b8 <__sfp_lock_release>
 800c28c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c294:	6025      	str	r5, [r4, #0]
 800c296:	61a5      	str	r5, [r4, #24]
 800c298:	2208      	movs	r2, #8
 800c29a:	4629      	mov	r1, r5
 800c29c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2a0:	f000 f89a 	bl	800c3d8 <memset>
 800c2a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b0:	3468      	adds	r4, #104	; 0x68
 800c2b2:	e7d9      	b.n	800c268 <__sfp+0x1c>
 800c2b4:	2104      	movs	r1, #4
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f7ff ff62 	bl	800c180 <__sfmoreglue>
 800c2bc:	4604      	mov	r4, r0
 800c2be:	6030      	str	r0, [r6, #0]
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d1d5      	bne.n	800c270 <__sfp+0x24>
 800c2c4:	f7ff ff78 	bl	800c1b8 <__sfp_lock_release>
 800c2c8:	230c      	movs	r3, #12
 800c2ca:	603b      	str	r3, [r7, #0]
 800c2cc:	e7ee      	b.n	800c2ac <__sfp+0x60>
 800c2ce:	bf00      	nop
 800c2d0:	08014174 	.word	0x08014174
 800c2d4:	ffff0001 	.word	0xffff0001

0800c2d8 <_fwalk_reent>:
 800c2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2dc:	4606      	mov	r6, r0
 800c2de:	4688      	mov	r8, r1
 800c2e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2e4:	2700      	movs	r7, #0
 800c2e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2ea:	f1b9 0901 	subs.w	r9, r9, #1
 800c2ee:	d505      	bpl.n	800c2fc <_fwalk_reent+0x24>
 800c2f0:	6824      	ldr	r4, [r4, #0]
 800c2f2:	2c00      	cmp	r4, #0
 800c2f4:	d1f7      	bne.n	800c2e6 <_fwalk_reent+0xe>
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fc:	89ab      	ldrh	r3, [r5, #12]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d907      	bls.n	800c312 <_fwalk_reent+0x3a>
 800c302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c306:	3301      	adds	r3, #1
 800c308:	d003      	beq.n	800c312 <_fwalk_reent+0x3a>
 800c30a:	4629      	mov	r1, r5
 800c30c:	4630      	mov	r0, r6
 800c30e:	47c0      	blx	r8
 800c310:	4307      	orrs	r7, r0
 800c312:	3568      	adds	r5, #104	; 0x68
 800c314:	e7e9      	b.n	800c2ea <_fwalk_reent+0x12>
	...

0800c318 <__libc_init_array>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	4d0d      	ldr	r5, [pc, #52]	; (800c350 <__libc_init_array+0x38>)
 800c31c:	4c0d      	ldr	r4, [pc, #52]	; (800c354 <__libc_init_array+0x3c>)
 800c31e:	1b64      	subs	r4, r4, r5
 800c320:	10a4      	asrs	r4, r4, #2
 800c322:	2600      	movs	r6, #0
 800c324:	42a6      	cmp	r6, r4
 800c326:	d109      	bne.n	800c33c <__libc_init_array+0x24>
 800c328:	4d0b      	ldr	r5, [pc, #44]	; (800c358 <__libc_init_array+0x40>)
 800c32a:	4c0c      	ldr	r4, [pc, #48]	; (800c35c <__libc_init_array+0x44>)
 800c32c:	f003 f942 	bl	800f5b4 <_init>
 800c330:	1b64      	subs	r4, r4, r5
 800c332:	10a4      	asrs	r4, r4, #2
 800c334:	2600      	movs	r6, #0
 800c336:	42a6      	cmp	r6, r4
 800c338:	d105      	bne.n	800c346 <__libc_init_array+0x2e>
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c340:	4798      	blx	r3
 800c342:	3601      	adds	r6, #1
 800c344:	e7ee      	b.n	800c324 <__libc_init_array+0xc>
 800c346:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34a:	4798      	blx	r3
 800c34c:	3601      	adds	r6, #1
 800c34e:	e7f2      	b.n	800c336 <__libc_init_array+0x1e>
 800c350:	0801450c 	.word	0x0801450c
 800c354:	0801450c 	.word	0x0801450c
 800c358:	0801450c 	.word	0x0801450c
 800c35c:	08014510 	.word	0x08014510

0800c360 <__retarget_lock_init_recursive>:
 800c360:	4770      	bx	lr

0800c362 <__retarget_lock_acquire_recursive>:
 800c362:	4770      	bx	lr

0800c364 <__retarget_lock_release_recursive>:
 800c364:	4770      	bx	lr
	...

0800c368 <malloc>:
 800c368:	4b02      	ldr	r3, [pc, #8]	; (800c374 <malloc+0xc>)
 800c36a:	4601      	mov	r1, r0
 800c36c:	6818      	ldr	r0, [r3, #0]
 800c36e:	f000 b8a7 	b.w	800c4c0 <_malloc_r>
 800c372:	bf00      	nop
 800c374:	20000134 	.word	0x20000134

0800c378 <free>:
 800c378:	4b02      	ldr	r3, [pc, #8]	; (800c384 <free+0xc>)
 800c37a:	4601      	mov	r1, r0
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	f000 b833 	b.w	800c3e8 <_free_r>
 800c382:	bf00      	nop
 800c384:	20000134 	.word	0x20000134

0800c388 <memcpy>:
 800c388:	440a      	add	r2, r1
 800c38a:	4291      	cmp	r1, r2
 800c38c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c390:	d100      	bne.n	800c394 <memcpy+0xc>
 800c392:	4770      	bx	lr
 800c394:	b510      	push	{r4, lr}
 800c396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c39a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c39e:	4291      	cmp	r1, r2
 800c3a0:	d1f9      	bne.n	800c396 <memcpy+0xe>
 800c3a2:	bd10      	pop	{r4, pc}

0800c3a4 <memmove>:
 800c3a4:	4288      	cmp	r0, r1
 800c3a6:	b510      	push	{r4, lr}
 800c3a8:	eb01 0402 	add.w	r4, r1, r2
 800c3ac:	d902      	bls.n	800c3b4 <memmove+0x10>
 800c3ae:	4284      	cmp	r4, r0
 800c3b0:	4623      	mov	r3, r4
 800c3b2:	d807      	bhi.n	800c3c4 <memmove+0x20>
 800c3b4:	1e43      	subs	r3, r0, #1
 800c3b6:	42a1      	cmp	r1, r4
 800c3b8:	d008      	beq.n	800c3cc <memmove+0x28>
 800c3ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3c2:	e7f8      	b.n	800c3b6 <memmove+0x12>
 800c3c4:	4402      	add	r2, r0
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	428a      	cmp	r2, r1
 800c3ca:	d100      	bne.n	800c3ce <memmove+0x2a>
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3d6:	e7f7      	b.n	800c3c8 <memmove+0x24>

0800c3d8 <memset>:
 800c3d8:	4402      	add	r2, r0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d100      	bne.n	800c3e2 <memset+0xa>
 800c3e0:	4770      	bx	lr
 800c3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c3e6:	e7f9      	b.n	800c3dc <memset+0x4>

0800c3e8 <_free_r>:
 800c3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ea:	2900      	cmp	r1, #0
 800c3ec:	d044      	beq.n	800c478 <_free_r+0x90>
 800c3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3f2:	9001      	str	r0, [sp, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800c3fa:	bfb8      	it	lt
 800c3fc:	18e4      	addlt	r4, r4, r3
 800c3fe:	f001 fe51 	bl	800e0a4 <__malloc_lock>
 800c402:	4a1e      	ldr	r2, [pc, #120]	; (800c47c <_free_r+0x94>)
 800c404:	9801      	ldr	r0, [sp, #4]
 800c406:	6813      	ldr	r3, [r2, #0]
 800c408:	b933      	cbnz	r3, 800c418 <_free_r+0x30>
 800c40a:	6063      	str	r3, [r4, #4]
 800c40c:	6014      	str	r4, [r2, #0]
 800c40e:	b003      	add	sp, #12
 800c410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c414:	f001 be4c 	b.w	800e0b0 <__malloc_unlock>
 800c418:	42a3      	cmp	r3, r4
 800c41a:	d908      	bls.n	800c42e <_free_r+0x46>
 800c41c:	6825      	ldr	r5, [r4, #0]
 800c41e:	1961      	adds	r1, r4, r5
 800c420:	428b      	cmp	r3, r1
 800c422:	bf01      	itttt	eq
 800c424:	6819      	ldreq	r1, [r3, #0]
 800c426:	685b      	ldreq	r3, [r3, #4]
 800c428:	1949      	addeq	r1, r1, r5
 800c42a:	6021      	streq	r1, [r4, #0]
 800c42c:	e7ed      	b.n	800c40a <_free_r+0x22>
 800c42e:	461a      	mov	r2, r3
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	b10b      	cbz	r3, 800c438 <_free_r+0x50>
 800c434:	42a3      	cmp	r3, r4
 800c436:	d9fa      	bls.n	800c42e <_free_r+0x46>
 800c438:	6811      	ldr	r1, [r2, #0]
 800c43a:	1855      	adds	r5, r2, r1
 800c43c:	42a5      	cmp	r5, r4
 800c43e:	d10b      	bne.n	800c458 <_free_r+0x70>
 800c440:	6824      	ldr	r4, [r4, #0]
 800c442:	4421      	add	r1, r4
 800c444:	1854      	adds	r4, r2, r1
 800c446:	42a3      	cmp	r3, r4
 800c448:	6011      	str	r1, [r2, #0]
 800c44a:	d1e0      	bne.n	800c40e <_free_r+0x26>
 800c44c:	681c      	ldr	r4, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	6053      	str	r3, [r2, #4]
 800c452:	4421      	add	r1, r4
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	e7da      	b.n	800c40e <_free_r+0x26>
 800c458:	d902      	bls.n	800c460 <_free_r+0x78>
 800c45a:	230c      	movs	r3, #12
 800c45c:	6003      	str	r3, [r0, #0]
 800c45e:	e7d6      	b.n	800c40e <_free_r+0x26>
 800c460:	6825      	ldr	r5, [r4, #0]
 800c462:	1961      	adds	r1, r4, r5
 800c464:	428b      	cmp	r3, r1
 800c466:	bf04      	itt	eq
 800c468:	6819      	ldreq	r1, [r3, #0]
 800c46a:	685b      	ldreq	r3, [r3, #4]
 800c46c:	6063      	str	r3, [r4, #4]
 800c46e:	bf04      	itt	eq
 800c470:	1949      	addeq	r1, r1, r5
 800c472:	6021      	streq	r1, [r4, #0]
 800c474:	6054      	str	r4, [r2, #4]
 800c476:	e7ca      	b.n	800c40e <_free_r+0x26>
 800c478:	b003      	add	sp, #12
 800c47a:	bd30      	pop	{r4, r5, pc}
 800c47c:	200007e0 	.word	0x200007e0

0800c480 <sbrk_aligned>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	4e0e      	ldr	r6, [pc, #56]	; (800c4bc <sbrk_aligned+0x3c>)
 800c484:	460c      	mov	r4, r1
 800c486:	6831      	ldr	r1, [r6, #0]
 800c488:	4605      	mov	r5, r0
 800c48a:	b911      	cbnz	r1, 800c492 <sbrk_aligned+0x12>
 800c48c:	f000 fd84 	bl	800cf98 <_sbrk_r>
 800c490:	6030      	str	r0, [r6, #0]
 800c492:	4621      	mov	r1, r4
 800c494:	4628      	mov	r0, r5
 800c496:	f000 fd7f 	bl	800cf98 <_sbrk_r>
 800c49a:	1c43      	adds	r3, r0, #1
 800c49c:	d00a      	beq.n	800c4b4 <sbrk_aligned+0x34>
 800c49e:	1cc4      	adds	r4, r0, #3
 800c4a0:	f024 0403 	bic.w	r4, r4, #3
 800c4a4:	42a0      	cmp	r0, r4
 800c4a6:	d007      	beq.n	800c4b8 <sbrk_aligned+0x38>
 800c4a8:	1a21      	subs	r1, r4, r0
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f000 fd74 	bl	800cf98 <_sbrk_r>
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d101      	bne.n	800c4b8 <sbrk_aligned+0x38>
 800c4b4:	f04f 34ff 	mov.w	r4, #4294967295
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}
 800c4bc:	200007e4 	.word	0x200007e4

0800c4c0 <_malloc_r>:
 800c4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c4:	1ccd      	adds	r5, r1, #3
 800c4c6:	f025 0503 	bic.w	r5, r5, #3
 800c4ca:	3508      	adds	r5, #8
 800c4cc:	2d0c      	cmp	r5, #12
 800c4ce:	bf38      	it	cc
 800c4d0:	250c      	movcc	r5, #12
 800c4d2:	2d00      	cmp	r5, #0
 800c4d4:	4607      	mov	r7, r0
 800c4d6:	db01      	blt.n	800c4dc <_malloc_r+0x1c>
 800c4d8:	42a9      	cmp	r1, r5
 800c4da:	d905      	bls.n	800c4e8 <_malloc_r+0x28>
 800c4dc:	230c      	movs	r3, #12
 800c4de:	603b      	str	r3, [r7, #0]
 800c4e0:	2600      	movs	r6, #0
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e8:	4e2e      	ldr	r6, [pc, #184]	; (800c5a4 <_malloc_r+0xe4>)
 800c4ea:	f001 fddb 	bl	800e0a4 <__malloc_lock>
 800c4ee:	6833      	ldr	r3, [r6, #0]
 800c4f0:	461c      	mov	r4, r3
 800c4f2:	bb34      	cbnz	r4, 800c542 <_malloc_r+0x82>
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	f7ff ffc2 	bl	800c480 <sbrk_aligned>
 800c4fc:	1c43      	adds	r3, r0, #1
 800c4fe:	4604      	mov	r4, r0
 800c500:	d14d      	bne.n	800c59e <_malloc_r+0xde>
 800c502:	6834      	ldr	r4, [r6, #0]
 800c504:	4626      	mov	r6, r4
 800c506:	2e00      	cmp	r6, #0
 800c508:	d140      	bne.n	800c58c <_malloc_r+0xcc>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	4631      	mov	r1, r6
 800c50e:	4638      	mov	r0, r7
 800c510:	eb04 0803 	add.w	r8, r4, r3
 800c514:	f000 fd40 	bl	800cf98 <_sbrk_r>
 800c518:	4580      	cmp	r8, r0
 800c51a:	d13a      	bne.n	800c592 <_malloc_r+0xd2>
 800c51c:	6821      	ldr	r1, [r4, #0]
 800c51e:	3503      	adds	r5, #3
 800c520:	1a6d      	subs	r5, r5, r1
 800c522:	f025 0503 	bic.w	r5, r5, #3
 800c526:	3508      	adds	r5, #8
 800c528:	2d0c      	cmp	r5, #12
 800c52a:	bf38      	it	cc
 800c52c:	250c      	movcc	r5, #12
 800c52e:	4629      	mov	r1, r5
 800c530:	4638      	mov	r0, r7
 800c532:	f7ff ffa5 	bl	800c480 <sbrk_aligned>
 800c536:	3001      	adds	r0, #1
 800c538:	d02b      	beq.n	800c592 <_malloc_r+0xd2>
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	442b      	add	r3, r5
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	e00e      	b.n	800c560 <_malloc_r+0xa0>
 800c542:	6822      	ldr	r2, [r4, #0]
 800c544:	1b52      	subs	r2, r2, r5
 800c546:	d41e      	bmi.n	800c586 <_malloc_r+0xc6>
 800c548:	2a0b      	cmp	r2, #11
 800c54a:	d916      	bls.n	800c57a <_malloc_r+0xba>
 800c54c:	1961      	adds	r1, r4, r5
 800c54e:	42a3      	cmp	r3, r4
 800c550:	6025      	str	r5, [r4, #0]
 800c552:	bf18      	it	ne
 800c554:	6059      	strne	r1, [r3, #4]
 800c556:	6863      	ldr	r3, [r4, #4]
 800c558:	bf08      	it	eq
 800c55a:	6031      	streq	r1, [r6, #0]
 800c55c:	5162      	str	r2, [r4, r5]
 800c55e:	604b      	str	r3, [r1, #4]
 800c560:	4638      	mov	r0, r7
 800c562:	f104 060b 	add.w	r6, r4, #11
 800c566:	f001 fda3 	bl	800e0b0 <__malloc_unlock>
 800c56a:	f026 0607 	bic.w	r6, r6, #7
 800c56e:	1d23      	adds	r3, r4, #4
 800c570:	1af2      	subs	r2, r6, r3
 800c572:	d0b6      	beq.n	800c4e2 <_malloc_r+0x22>
 800c574:	1b9b      	subs	r3, r3, r6
 800c576:	50a3      	str	r3, [r4, r2]
 800c578:	e7b3      	b.n	800c4e2 <_malloc_r+0x22>
 800c57a:	6862      	ldr	r2, [r4, #4]
 800c57c:	42a3      	cmp	r3, r4
 800c57e:	bf0c      	ite	eq
 800c580:	6032      	streq	r2, [r6, #0]
 800c582:	605a      	strne	r2, [r3, #4]
 800c584:	e7ec      	b.n	800c560 <_malloc_r+0xa0>
 800c586:	4623      	mov	r3, r4
 800c588:	6864      	ldr	r4, [r4, #4]
 800c58a:	e7b2      	b.n	800c4f2 <_malloc_r+0x32>
 800c58c:	4634      	mov	r4, r6
 800c58e:	6876      	ldr	r6, [r6, #4]
 800c590:	e7b9      	b.n	800c506 <_malloc_r+0x46>
 800c592:	230c      	movs	r3, #12
 800c594:	603b      	str	r3, [r7, #0]
 800c596:	4638      	mov	r0, r7
 800c598:	f001 fd8a 	bl	800e0b0 <__malloc_unlock>
 800c59c:	e7a1      	b.n	800c4e2 <_malloc_r+0x22>
 800c59e:	6025      	str	r5, [r4, #0]
 800c5a0:	e7de      	b.n	800c560 <_malloc_r+0xa0>
 800c5a2:	bf00      	nop
 800c5a4:	200007e0 	.word	0x200007e0

0800c5a8 <__cvt>:
 800c5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	ec55 4b10 	vmov	r4, r5, d0
 800c5b0:	2d00      	cmp	r5, #0
 800c5b2:	460e      	mov	r6, r1
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	bfbb      	ittet	lt
 800c5ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c5be:	461d      	movlt	r5, r3
 800c5c0:	2300      	movge	r3, #0
 800c5c2:	232d      	movlt	r3, #45	; 0x2d
 800c5c4:	700b      	strb	r3, [r1, #0]
 800c5c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c5cc:	4691      	mov	r9, r2
 800c5ce:	f023 0820 	bic.w	r8, r3, #32
 800c5d2:	bfbc      	itt	lt
 800c5d4:	4622      	movlt	r2, r4
 800c5d6:	4614      	movlt	r4, r2
 800c5d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c5dc:	d005      	beq.n	800c5ea <__cvt+0x42>
 800c5de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c5e2:	d100      	bne.n	800c5e6 <__cvt+0x3e>
 800c5e4:	3601      	adds	r6, #1
 800c5e6:	2102      	movs	r1, #2
 800c5e8:	e000      	b.n	800c5ec <__cvt+0x44>
 800c5ea:	2103      	movs	r1, #3
 800c5ec:	ab03      	add	r3, sp, #12
 800c5ee:	9301      	str	r3, [sp, #4]
 800c5f0:	ab02      	add	r3, sp, #8
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	ec45 4b10 	vmov	d0, r4, r5
 800c5f8:	4653      	mov	r3, sl
 800c5fa:	4632      	mov	r2, r6
 800c5fc:	f000 fee8 	bl	800d3d0 <_dtoa_r>
 800c600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c604:	4607      	mov	r7, r0
 800c606:	d102      	bne.n	800c60e <__cvt+0x66>
 800c608:	f019 0f01 	tst.w	r9, #1
 800c60c:	d022      	beq.n	800c654 <__cvt+0xac>
 800c60e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c612:	eb07 0906 	add.w	r9, r7, r6
 800c616:	d110      	bne.n	800c63a <__cvt+0x92>
 800c618:	783b      	ldrb	r3, [r7, #0]
 800c61a:	2b30      	cmp	r3, #48	; 0x30
 800c61c:	d10a      	bne.n	800c634 <__cvt+0x8c>
 800c61e:	2200      	movs	r2, #0
 800c620:	2300      	movs	r3, #0
 800c622:	4620      	mov	r0, r4
 800c624:	4629      	mov	r1, r5
 800c626:	f7f4 fa27 	bl	8000a78 <__aeabi_dcmpeq>
 800c62a:	b918      	cbnz	r0, 800c634 <__cvt+0x8c>
 800c62c:	f1c6 0601 	rsb	r6, r6, #1
 800c630:	f8ca 6000 	str.w	r6, [sl]
 800c634:	f8da 3000 	ldr.w	r3, [sl]
 800c638:	4499      	add	r9, r3
 800c63a:	2200      	movs	r2, #0
 800c63c:	2300      	movs	r3, #0
 800c63e:	4620      	mov	r0, r4
 800c640:	4629      	mov	r1, r5
 800c642:	f7f4 fa19 	bl	8000a78 <__aeabi_dcmpeq>
 800c646:	b108      	cbz	r0, 800c64c <__cvt+0xa4>
 800c648:	f8cd 900c 	str.w	r9, [sp, #12]
 800c64c:	2230      	movs	r2, #48	; 0x30
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	454b      	cmp	r3, r9
 800c652:	d307      	bcc.n	800c664 <__cvt+0xbc>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c658:	1bdb      	subs	r3, r3, r7
 800c65a:	4638      	mov	r0, r7
 800c65c:	6013      	str	r3, [r2, #0]
 800c65e:	b004      	add	sp, #16
 800c660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c664:	1c59      	adds	r1, r3, #1
 800c666:	9103      	str	r1, [sp, #12]
 800c668:	701a      	strb	r2, [r3, #0]
 800c66a:	e7f0      	b.n	800c64e <__cvt+0xa6>

0800c66c <__exponent>:
 800c66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c66e:	4603      	mov	r3, r0
 800c670:	2900      	cmp	r1, #0
 800c672:	bfb8      	it	lt
 800c674:	4249      	neglt	r1, r1
 800c676:	f803 2b02 	strb.w	r2, [r3], #2
 800c67a:	bfb4      	ite	lt
 800c67c:	222d      	movlt	r2, #45	; 0x2d
 800c67e:	222b      	movge	r2, #43	; 0x2b
 800c680:	2909      	cmp	r1, #9
 800c682:	7042      	strb	r2, [r0, #1]
 800c684:	dd2a      	ble.n	800c6dc <__exponent+0x70>
 800c686:	f10d 0407 	add.w	r4, sp, #7
 800c68a:	46a4      	mov	ip, r4
 800c68c:	270a      	movs	r7, #10
 800c68e:	46a6      	mov	lr, r4
 800c690:	460a      	mov	r2, r1
 800c692:	fb91 f6f7 	sdiv	r6, r1, r7
 800c696:	fb07 1516 	mls	r5, r7, r6, r1
 800c69a:	3530      	adds	r5, #48	; 0x30
 800c69c:	2a63      	cmp	r2, #99	; 0x63
 800c69e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c6a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	dcf1      	bgt.n	800c68e <__exponent+0x22>
 800c6aa:	3130      	adds	r1, #48	; 0x30
 800c6ac:	f1ae 0502 	sub.w	r5, lr, #2
 800c6b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c6b4:	1c44      	adds	r4, r0, #1
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	4561      	cmp	r1, ip
 800c6ba:	d30a      	bcc.n	800c6d2 <__exponent+0x66>
 800c6bc:	f10d 0209 	add.w	r2, sp, #9
 800c6c0:	eba2 020e 	sub.w	r2, r2, lr
 800c6c4:	4565      	cmp	r5, ip
 800c6c6:	bf88      	it	hi
 800c6c8:	2200      	movhi	r2, #0
 800c6ca:	4413      	add	r3, r2
 800c6cc:	1a18      	subs	r0, r3, r0
 800c6ce:	b003      	add	sp, #12
 800c6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c6da:	e7ed      	b.n	800c6b8 <__exponent+0x4c>
 800c6dc:	2330      	movs	r3, #48	; 0x30
 800c6de:	3130      	adds	r1, #48	; 0x30
 800c6e0:	7083      	strb	r3, [r0, #2]
 800c6e2:	70c1      	strb	r1, [r0, #3]
 800c6e4:	1d03      	adds	r3, r0, #4
 800c6e6:	e7f1      	b.n	800c6cc <__exponent+0x60>

0800c6e8 <_printf_float>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	ed2d 8b02 	vpush	{d8}
 800c6f0:	b08d      	sub	sp, #52	; 0x34
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	461f      	mov	r7, r3
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	f001 fc55 	bl	800dfac <_localeconv_r>
 800c702:	f8d0 a000 	ldr.w	sl, [r0]
 800c706:	4650      	mov	r0, sl
 800c708:	f7f3 fd3a 	bl	8000180 <strlen>
 800c70c:	2300      	movs	r3, #0
 800c70e:	930a      	str	r3, [sp, #40]	; 0x28
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	9305      	str	r3, [sp, #20]
 800c714:	f8d8 3000 	ldr.w	r3, [r8]
 800c718:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c71c:	3307      	adds	r3, #7
 800c71e:	f023 0307 	bic.w	r3, r3, #7
 800c722:	f103 0208 	add.w	r2, r3, #8
 800c726:	f8c8 2000 	str.w	r2, [r8]
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c732:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c736:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c73a:	9307      	str	r3, [sp, #28]
 800c73c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c740:	ee08 0a10 	vmov	s16, r0
 800c744:	4b9f      	ldr	r3, [pc, #636]	; (800c9c4 <_printf_float+0x2dc>)
 800c746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c74a:	f04f 32ff 	mov.w	r2, #4294967295
 800c74e:	f7f4 f9c5 	bl	8000adc <__aeabi_dcmpun>
 800c752:	bb88      	cbnz	r0, 800c7b8 <_printf_float+0xd0>
 800c754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c758:	4b9a      	ldr	r3, [pc, #616]	; (800c9c4 <_printf_float+0x2dc>)
 800c75a:	f04f 32ff 	mov.w	r2, #4294967295
 800c75e:	f7f4 f99f 	bl	8000aa0 <__aeabi_dcmple>
 800c762:	bb48      	cbnz	r0, 800c7b8 <_printf_float+0xd0>
 800c764:	2200      	movs	r2, #0
 800c766:	2300      	movs	r3, #0
 800c768:	4640      	mov	r0, r8
 800c76a:	4649      	mov	r1, r9
 800c76c:	f7f4 f98e 	bl	8000a8c <__aeabi_dcmplt>
 800c770:	b110      	cbz	r0, 800c778 <_printf_float+0x90>
 800c772:	232d      	movs	r3, #45	; 0x2d
 800c774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c778:	4b93      	ldr	r3, [pc, #588]	; (800c9c8 <_printf_float+0x2e0>)
 800c77a:	4894      	ldr	r0, [pc, #592]	; (800c9cc <_printf_float+0x2e4>)
 800c77c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c780:	bf94      	ite	ls
 800c782:	4698      	movls	r8, r3
 800c784:	4680      	movhi	r8, r0
 800c786:	2303      	movs	r3, #3
 800c788:	6123      	str	r3, [r4, #16]
 800c78a:	9b05      	ldr	r3, [sp, #20]
 800c78c:	f023 0204 	bic.w	r2, r3, #4
 800c790:	6022      	str	r2, [r4, #0]
 800c792:	f04f 0900 	mov.w	r9, #0
 800c796:	9700      	str	r7, [sp, #0]
 800c798:	4633      	mov	r3, r6
 800c79a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c79c:	4621      	mov	r1, r4
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f000 f9d8 	bl	800cb54 <_printf_common>
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	f040 8090 	bne.w	800c8ca <_printf_float+0x1e2>
 800c7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ae:	b00d      	add	sp, #52	; 0x34
 800c7b0:	ecbd 8b02 	vpop	{d8}
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b8:	4642      	mov	r2, r8
 800c7ba:	464b      	mov	r3, r9
 800c7bc:	4640      	mov	r0, r8
 800c7be:	4649      	mov	r1, r9
 800c7c0:	f7f4 f98c 	bl	8000adc <__aeabi_dcmpun>
 800c7c4:	b140      	cbz	r0, 800c7d8 <_printf_float+0xf0>
 800c7c6:	464b      	mov	r3, r9
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	bfbc      	itt	lt
 800c7cc:	232d      	movlt	r3, #45	; 0x2d
 800c7ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c7d2:	487f      	ldr	r0, [pc, #508]	; (800c9d0 <_printf_float+0x2e8>)
 800c7d4:	4b7f      	ldr	r3, [pc, #508]	; (800c9d4 <_printf_float+0x2ec>)
 800c7d6:	e7d1      	b.n	800c77c <_printf_float+0x94>
 800c7d8:	6863      	ldr	r3, [r4, #4]
 800c7da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c7de:	9206      	str	r2, [sp, #24]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	d13f      	bne.n	800c864 <_printf_float+0x17c>
 800c7e4:	2306      	movs	r3, #6
 800c7e6:	6063      	str	r3, [r4, #4]
 800c7e8:	9b05      	ldr	r3, [sp, #20]
 800c7ea:	6861      	ldr	r1, [r4, #4]
 800c7ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9303      	str	r3, [sp, #12]
 800c7f4:	ab0a      	add	r3, sp, #40	; 0x28
 800c7f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c7fa:	ab09      	add	r3, sp, #36	; 0x24
 800c7fc:	ec49 8b10 	vmov	d0, r8, r9
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	6022      	str	r2, [r4, #0]
 800c804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c808:	4628      	mov	r0, r5
 800c80a:	f7ff fecd 	bl	800c5a8 <__cvt>
 800c80e:	9b06      	ldr	r3, [sp, #24]
 800c810:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c812:	2b47      	cmp	r3, #71	; 0x47
 800c814:	4680      	mov	r8, r0
 800c816:	d108      	bne.n	800c82a <_printf_float+0x142>
 800c818:	1cc8      	adds	r0, r1, #3
 800c81a:	db02      	blt.n	800c822 <_printf_float+0x13a>
 800c81c:	6863      	ldr	r3, [r4, #4]
 800c81e:	4299      	cmp	r1, r3
 800c820:	dd41      	ble.n	800c8a6 <_printf_float+0x1be>
 800c822:	f1ab 0b02 	sub.w	fp, fp, #2
 800c826:	fa5f fb8b 	uxtb.w	fp, fp
 800c82a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c82e:	d820      	bhi.n	800c872 <_printf_float+0x18a>
 800c830:	3901      	subs	r1, #1
 800c832:	465a      	mov	r2, fp
 800c834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c838:	9109      	str	r1, [sp, #36]	; 0x24
 800c83a:	f7ff ff17 	bl	800c66c <__exponent>
 800c83e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c840:	1813      	adds	r3, r2, r0
 800c842:	2a01      	cmp	r2, #1
 800c844:	4681      	mov	r9, r0
 800c846:	6123      	str	r3, [r4, #16]
 800c848:	dc02      	bgt.n	800c850 <_printf_float+0x168>
 800c84a:	6822      	ldr	r2, [r4, #0]
 800c84c:	07d2      	lsls	r2, r2, #31
 800c84e:	d501      	bpl.n	800c854 <_printf_float+0x16c>
 800c850:	3301      	adds	r3, #1
 800c852:	6123      	str	r3, [r4, #16]
 800c854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d09c      	beq.n	800c796 <_printf_float+0xae>
 800c85c:	232d      	movs	r3, #45	; 0x2d
 800c85e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c862:	e798      	b.n	800c796 <_printf_float+0xae>
 800c864:	9a06      	ldr	r2, [sp, #24]
 800c866:	2a47      	cmp	r2, #71	; 0x47
 800c868:	d1be      	bne.n	800c7e8 <_printf_float+0x100>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1bc      	bne.n	800c7e8 <_printf_float+0x100>
 800c86e:	2301      	movs	r3, #1
 800c870:	e7b9      	b.n	800c7e6 <_printf_float+0xfe>
 800c872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c876:	d118      	bne.n	800c8aa <_printf_float+0x1c2>
 800c878:	2900      	cmp	r1, #0
 800c87a:	6863      	ldr	r3, [r4, #4]
 800c87c:	dd0b      	ble.n	800c896 <_printf_float+0x1ae>
 800c87e:	6121      	str	r1, [r4, #16]
 800c880:	b913      	cbnz	r3, 800c888 <_printf_float+0x1a0>
 800c882:	6822      	ldr	r2, [r4, #0]
 800c884:	07d0      	lsls	r0, r2, #31
 800c886:	d502      	bpl.n	800c88e <_printf_float+0x1a6>
 800c888:	3301      	adds	r3, #1
 800c88a:	440b      	add	r3, r1
 800c88c:	6123      	str	r3, [r4, #16]
 800c88e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c890:	f04f 0900 	mov.w	r9, #0
 800c894:	e7de      	b.n	800c854 <_printf_float+0x16c>
 800c896:	b913      	cbnz	r3, 800c89e <_printf_float+0x1b6>
 800c898:	6822      	ldr	r2, [r4, #0]
 800c89a:	07d2      	lsls	r2, r2, #31
 800c89c:	d501      	bpl.n	800c8a2 <_printf_float+0x1ba>
 800c89e:	3302      	adds	r3, #2
 800c8a0:	e7f4      	b.n	800c88c <_printf_float+0x1a4>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e7f2      	b.n	800c88c <_printf_float+0x1a4>
 800c8a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ac:	4299      	cmp	r1, r3
 800c8ae:	db05      	blt.n	800c8bc <_printf_float+0x1d4>
 800c8b0:	6823      	ldr	r3, [r4, #0]
 800c8b2:	6121      	str	r1, [r4, #16]
 800c8b4:	07d8      	lsls	r0, r3, #31
 800c8b6:	d5ea      	bpl.n	800c88e <_printf_float+0x1a6>
 800c8b8:	1c4b      	adds	r3, r1, #1
 800c8ba:	e7e7      	b.n	800c88c <_printf_float+0x1a4>
 800c8bc:	2900      	cmp	r1, #0
 800c8be:	bfd4      	ite	le
 800c8c0:	f1c1 0202 	rsble	r2, r1, #2
 800c8c4:	2201      	movgt	r2, #1
 800c8c6:	4413      	add	r3, r2
 800c8c8:	e7e0      	b.n	800c88c <_printf_float+0x1a4>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	055a      	lsls	r2, r3, #21
 800c8ce:	d407      	bmi.n	800c8e0 <_printf_float+0x1f8>
 800c8d0:	6923      	ldr	r3, [r4, #16]
 800c8d2:	4642      	mov	r2, r8
 800c8d4:	4631      	mov	r1, r6
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	47b8      	blx	r7
 800c8da:	3001      	adds	r0, #1
 800c8dc:	d12c      	bne.n	800c938 <_printf_float+0x250>
 800c8de:	e764      	b.n	800c7aa <_printf_float+0xc2>
 800c8e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c8e4:	f240 80e0 	bls.w	800caa8 <_printf_float+0x3c0>
 800c8e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f7f4 f8c2 	bl	8000a78 <__aeabi_dcmpeq>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d034      	beq.n	800c962 <_printf_float+0x27a>
 800c8f8:	4a37      	ldr	r2, [pc, #220]	; (800c9d8 <_printf_float+0x2f0>)
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	4628      	mov	r0, r5
 800c900:	47b8      	blx	r7
 800c902:	3001      	adds	r0, #1
 800c904:	f43f af51 	beq.w	800c7aa <_printf_float+0xc2>
 800c908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c90c:	429a      	cmp	r2, r3
 800c90e:	db02      	blt.n	800c916 <_printf_float+0x22e>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	07d8      	lsls	r0, r3, #31
 800c914:	d510      	bpl.n	800c938 <_printf_float+0x250>
 800c916:	ee18 3a10 	vmov	r3, s16
 800c91a:	4652      	mov	r2, sl
 800c91c:	4631      	mov	r1, r6
 800c91e:	4628      	mov	r0, r5
 800c920:	47b8      	blx	r7
 800c922:	3001      	adds	r0, #1
 800c924:	f43f af41 	beq.w	800c7aa <_printf_float+0xc2>
 800c928:	f04f 0800 	mov.w	r8, #0
 800c92c:	f104 091a 	add.w	r9, r4, #26
 800c930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c932:	3b01      	subs	r3, #1
 800c934:	4543      	cmp	r3, r8
 800c936:	dc09      	bgt.n	800c94c <_printf_float+0x264>
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	079b      	lsls	r3, r3, #30
 800c93c:	f100 8105 	bmi.w	800cb4a <_printf_float+0x462>
 800c940:	68e0      	ldr	r0, [r4, #12]
 800c942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c944:	4298      	cmp	r0, r3
 800c946:	bfb8      	it	lt
 800c948:	4618      	movlt	r0, r3
 800c94a:	e730      	b.n	800c7ae <_printf_float+0xc6>
 800c94c:	2301      	movs	r3, #1
 800c94e:	464a      	mov	r2, r9
 800c950:	4631      	mov	r1, r6
 800c952:	4628      	mov	r0, r5
 800c954:	47b8      	blx	r7
 800c956:	3001      	adds	r0, #1
 800c958:	f43f af27 	beq.w	800c7aa <_printf_float+0xc2>
 800c95c:	f108 0801 	add.w	r8, r8, #1
 800c960:	e7e6      	b.n	800c930 <_printf_float+0x248>
 800c962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c964:	2b00      	cmp	r3, #0
 800c966:	dc39      	bgt.n	800c9dc <_printf_float+0x2f4>
 800c968:	4a1b      	ldr	r2, [pc, #108]	; (800c9d8 <_printf_float+0x2f0>)
 800c96a:	2301      	movs	r3, #1
 800c96c:	4631      	mov	r1, r6
 800c96e:	4628      	mov	r0, r5
 800c970:	47b8      	blx	r7
 800c972:	3001      	adds	r0, #1
 800c974:	f43f af19 	beq.w	800c7aa <_printf_float+0xc2>
 800c978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c97c:	4313      	orrs	r3, r2
 800c97e:	d102      	bne.n	800c986 <_printf_float+0x29e>
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	07d9      	lsls	r1, r3, #31
 800c984:	d5d8      	bpl.n	800c938 <_printf_float+0x250>
 800c986:	ee18 3a10 	vmov	r3, s16
 800c98a:	4652      	mov	r2, sl
 800c98c:	4631      	mov	r1, r6
 800c98e:	4628      	mov	r0, r5
 800c990:	47b8      	blx	r7
 800c992:	3001      	adds	r0, #1
 800c994:	f43f af09 	beq.w	800c7aa <_printf_float+0xc2>
 800c998:	f04f 0900 	mov.w	r9, #0
 800c99c:	f104 0a1a 	add.w	sl, r4, #26
 800c9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a2:	425b      	negs	r3, r3
 800c9a4:	454b      	cmp	r3, r9
 800c9a6:	dc01      	bgt.n	800c9ac <_printf_float+0x2c4>
 800c9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9aa:	e792      	b.n	800c8d2 <_printf_float+0x1ea>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	4652      	mov	r2, sl
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	47b8      	blx	r7
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	f43f aef7 	beq.w	800c7aa <_printf_float+0xc2>
 800c9bc:	f109 0901 	add.w	r9, r9, #1
 800c9c0:	e7ee      	b.n	800c9a0 <_printf_float+0x2b8>
 800c9c2:	bf00      	nop
 800c9c4:	7fefffff 	.word	0x7fefffff
 800c9c8:	08014178 	.word	0x08014178
 800c9cc:	0801417c 	.word	0x0801417c
 800c9d0:	08014184 	.word	0x08014184
 800c9d4:	08014180 	.word	0x08014180
 800c9d8:	08014188 	.word	0x08014188
 800c9dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	bfa8      	it	ge
 800c9e4:	461a      	movge	r2, r3
 800c9e6:	2a00      	cmp	r2, #0
 800c9e8:	4691      	mov	r9, r2
 800c9ea:	dc37      	bgt.n	800ca5c <_printf_float+0x374>
 800c9ec:	f04f 0b00 	mov.w	fp, #0
 800c9f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9f4:	f104 021a 	add.w	r2, r4, #26
 800c9f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9fa:	9305      	str	r3, [sp, #20]
 800c9fc:	eba3 0309 	sub.w	r3, r3, r9
 800ca00:	455b      	cmp	r3, fp
 800ca02:	dc33      	bgt.n	800ca6c <_printf_float+0x384>
 800ca04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	db3b      	blt.n	800ca84 <_printf_float+0x39c>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	07da      	lsls	r2, r3, #31
 800ca10:	d438      	bmi.n	800ca84 <_printf_float+0x39c>
 800ca12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca14:	9a05      	ldr	r2, [sp, #20]
 800ca16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca18:	1a9a      	subs	r2, r3, r2
 800ca1a:	eba3 0901 	sub.w	r9, r3, r1
 800ca1e:	4591      	cmp	r9, r2
 800ca20:	bfa8      	it	ge
 800ca22:	4691      	movge	r9, r2
 800ca24:	f1b9 0f00 	cmp.w	r9, #0
 800ca28:	dc35      	bgt.n	800ca96 <_printf_float+0x3ae>
 800ca2a:	f04f 0800 	mov.w	r8, #0
 800ca2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca32:	f104 0a1a 	add.w	sl, r4, #26
 800ca36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	eba3 0309 	sub.w	r3, r3, r9
 800ca40:	4543      	cmp	r3, r8
 800ca42:	f77f af79 	ble.w	800c938 <_printf_float+0x250>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4652      	mov	r2, sl
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	47b8      	blx	r7
 800ca50:	3001      	adds	r0, #1
 800ca52:	f43f aeaa 	beq.w	800c7aa <_printf_float+0xc2>
 800ca56:	f108 0801 	add.w	r8, r8, #1
 800ca5a:	e7ec      	b.n	800ca36 <_printf_float+0x34e>
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	4631      	mov	r1, r6
 800ca60:	4642      	mov	r2, r8
 800ca62:	4628      	mov	r0, r5
 800ca64:	47b8      	blx	r7
 800ca66:	3001      	adds	r0, #1
 800ca68:	d1c0      	bne.n	800c9ec <_printf_float+0x304>
 800ca6a:	e69e      	b.n	800c7aa <_printf_float+0xc2>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4631      	mov	r1, r6
 800ca70:	4628      	mov	r0, r5
 800ca72:	9205      	str	r2, [sp, #20]
 800ca74:	47b8      	blx	r7
 800ca76:	3001      	adds	r0, #1
 800ca78:	f43f ae97 	beq.w	800c7aa <_printf_float+0xc2>
 800ca7c:	9a05      	ldr	r2, [sp, #20]
 800ca7e:	f10b 0b01 	add.w	fp, fp, #1
 800ca82:	e7b9      	b.n	800c9f8 <_printf_float+0x310>
 800ca84:	ee18 3a10 	vmov	r3, s16
 800ca88:	4652      	mov	r2, sl
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	47b8      	blx	r7
 800ca90:	3001      	adds	r0, #1
 800ca92:	d1be      	bne.n	800ca12 <_printf_float+0x32a>
 800ca94:	e689      	b.n	800c7aa <_printf_float+0xc2>
 800ca96:	9a05      	ldr	r2, [sp, #20]
 800ca98:	464b      	mov	r3, r9
 800ca9a:	4442      	add	r2, r8
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	4628      	mov	r0, r5
 800caa0:	47b8      	blx	r7
 800caa2:	3001      	adds	r0, #1
 800caa4:	d1c1      	bne.n	800ca2a <_printf_float+0x342>
 800caa6:	e680      	b.n	800c7aa <_printf_float+0xc2>
 800caa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caaa:	2a01      	cmp	r2, #1
 800caac:	dc01      	bgt.n	800cab2 <_printf_float+0x3ca>
 800caae:	07db      	lsls	r3, r3, #31
 800cab0:	d538      	bpl.n	800cb24 <_printf_float+0x43c>
 800cab2:	2301      	movs	r3, #1
 800cab4:	4642      	mov	r2, r8
 800cab6:	4631      	mov	r1, r6
 800cab8:	4628      	mov	r0, r5
 800caba:	47b8      	blx	r7
 800cabc:	3001      	adds	r0, #1
 800cabe:	f43f ae74 	beq.w	800c7aa <_printf_float+0xc2>
 800cac2:	ee18 3a10 	vmov	r3, s16
 800cac6:	4652      	mov	r2, sl
 800cac8:	4631      	mov	r1, r6
 800caca:	4628      	mov	r0, r5
 800cacc:	47b8      	blx	r7
 800cace:	3001      	adds	r0, #1
 800cad0:	f43f ae6b 	beq.w	800c7aa <_printf_float+0xc2>
 800cad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cad8:	2200      	movs	r2, #0
 800cada:	2300      	movs	r3, #0
 800cadc:	f7f3 ffcc 	bl	8000a78 <__aeabi_dcmpeq>
 800cae0:	b9d8      	cbnz	r0, 800cb1a <_printf_float+0x432>
 800cae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae4:	f108 0201 	add.w	r2, r8, #1
 800cae8:	3b01      	subs	r3, #1
 800caea:	4631      	mov	r1, r6
 800caec:	4628      	mov	r0, r5
 800caee:	47b8      	blx	r7
 800caf0:	3001      	adds	r0, #1
 800caf2:	d10e      	bne.n	800cb12 <_printf_float+0x42a>
 800caf4:	e659      	b.n	800c7aa <_printf_float+0xc2>
 800caf6:	2301      	movs	r3, #1
 800caf8:	4652      	mov	r2, sl
 800cafa:	4631      	mov	r1, r6
 800cafc:	4628      	mov	r0, r5
 800cafe:	47b8      	blx	r7
 800cb00:	3001      	adds	r0, #1
 800cb02:	f43f ae52 	beq.w	800c7aa <_printf_float+0xc2>
 800cb06:	f108 0801 	add.w	r8, r8, #1
 800cb0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	4543      	cmp	r3, r8
 800cb10:	dcf1      	bgt.n	800caf6 <_printf_float+0x40e>
 800cb12:	464b      	mov	r3, r9
 800cb14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb18:	e6dc      	b.n	800c8d4 <_printf_float+0x1ec>
 800cb1a:	f04f 0800 	mov.w	r8, #0
 800cb1e:	f104 0a1a 	add.w	sl, r4, #26
 800cb22:	e7f2      	b.n	800cb0a <_printf_float+0x422>
 800cb24:	2301      	movs	r3, #1
 800cb26:	4642      	mov	r2, r8
 800cb28:	e7df      	b.n	800caea <_printf_float+0x402>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	464a      	mov	r2, r9
 800cb2e:	4631      	mov	r1, r6
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b8      	blx	r7
 800cb34:	3001      	adds	r0, #1
 800cb36:	f43f ae38 	beq.w	800c7aa <_printf_float+0xc2>
 800cb3a:	f108 0801 	add.w	r8, r8, #1
 800cb3e:	68e3      	ldr	r3, [r4, #12]
 800cb40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb42:	1a5b      	subs	r3, r3, r1
 800cb44:	4543      	cmp	r3, r8
 800cb46:	dcf0      	bgt.n	800cb2a <_printf_float+0x442>
 800cb48:	e6fa      	b.n	800c940 <_printf_float+0x258>
 800cb4a:	f04f 0800 	mov.w	r8, #0
 800cb4e:	f104 0919 	add.w	r9, r4, #25
 800cb52:	e7f4      	b.n	800cb3e <_printf_float+0x456>

0800cb54 <_printf_common>:
 800cb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb58:	4616      	mov	r6, r2
 800cb5a:	4699      	mov	r9, r3
 800cb5c:	688a      	ldr	r2, [r1, #8]
 800cb5e:	690b      	ldr	r3, [r1, #16]
 800cb60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb64:	4293      	cmp	r3, r2
 800cb66:	bfb8      	it	lt
 800cb68:	4613      	movlt	r3, r2
 800cb6a:	6033      	str	r3, [r6, #0]
 800cb6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb70:	4607      	mov	r7, r0
 800cb72:	460c      	mov	r4, r1
 800cb74:	b10a      	cbz	r2, 800cb7a <_printf_common+0x26>
 800cb76:	3301      	adds	r3, #1
 800cb78:	6033      	str	r3, [r6, #0]
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	0699      	lsls	r1, r3, #26
 800cb7e:	bf42      	ittt	mi
 800cb80:	6833      	ldrmi	r3, [r6, #0]
 800cb82:	3302      	addmi	r3, #2
 800cb84:	6033      	strmi	r3, [r6, #0]
 800cb86:	6825      	ldr	r5, [r4, #0]
 800cb88:	f015 0506 	ands.w	r5, r5, #6
 800cb8c:	d106      	bne.n	800cb9c <_printf_common+0x48>
 800cb8e:	f104 0a19 	add.w	sl, r4, #25
 800cb92:	68e3      	ldr	r3, [r4, #12]
 800cb94:	6832      	ldr	r2, [r6, #0]
 800cb96:	1a9b      	subs	r3, r3, r2
 800cb98:	42ab      	cmp	r3, r5
 800cb9a:	dc26      	bgt.n	800cbea <_printf_common+0x96>
 800cb9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cba0:	1e13      	subs	r3, r2, #0
 800cba2:	6822      	ldr	r2, [r4, #0]
 800cba4:	bf18      	it	ne
 800cba6:	2301      	movne	r3, #1
 800cba8:	0692      	lsls	r2, r2, #26
 800cbaa:	d42b      	bmi.n	800cc04 <_printf_common+0xb0>
 800cbac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	47c0      	blx	r8
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	d01e      	beq.n	800cbf8 <_printf_common+0xa4>
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	68e5      	ldr	r5, [r4, #12]
 800cbbe:	6832      	ldr	r2, [r6, #0]
 800cbc0:	f003 0306 	and.w	r3, r3, #6
 800cbc4:	2b04      	cmp	r3, #4
 800cbc6:	bf08      	it	eq
 800cbc8:	1aad      	subeq	r5, r5, r2
 800cbca:	68a3      	ldr	r3, [r4, #8]
 800cbcc:	6922      	ldr	r2, [r4, #16]
 800cbce:	bf0c      	ite	eq
 800cbd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbd4:	2500      	movne	r5, #0
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	bfc4      	itt	gt
 800cbda:	1a9b      	subgt	r3, r3, r2
 800cbdc:	18ed      	addgt	r5, r5, r3
 800cbde:	2600      	movs	r6, #0
 800cbe0:	341a      	adds	r4, #26
 800cbe2:	42b5      	cmp	r5, r6
 800cbe4:	d11a      	bne.n	800cc1c <_printf_common+0xc8>
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	e008      	b.n	800cbfc <_printf_common+0xa8>
 800cbea:	2301      	movs	r3, #1
 800cbec:	4652      	mov	r2, sl
 800cbee:	4649      	mov	r1, r9
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	47c0      	blx	r8
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d103      	bne.n	800cc00 <_printf_common+0xac>
 800cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc00:	3501      	adds	r5, #1
 800cc02:	e7c6      	b.n	800cb92 <_printf_common+0x3e>
 800cc04:	18e1      	adds	r1, r4, r3
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	2030      	movs	r0, #48	; 0x30
 800cc0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc0e:	4422      	add	r2, r4
 800cc10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc18:	3302      	adds	r3, #2
 800cc1a:	e7c7      	b.n	800cbac <_printf_common+0x58>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	4622      	mov	r2, r4
 800cc20:	4649      	mov	r1, r9
 800cc22:	4638      	mov	r0, r7
 800cc24:	47c0      	blx	r8
 800cc26:	3001      	adds	r0, #1
 800cc28:	d0e6      	beq.n	800cbf8 <_printf_common+0xa4>
 800cc2a:	3601      	adds	r6, #1
 800cc2c:	e7d9      	b.n	800cbe2 <_printf_common+0x8e>
	...

0800cc30 <_printf_i>:
 800cc30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc34:	7e0f      	ldrb	r7, [r1, #24]
 800cc36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc38:	2f78      	cmp	r7, #120	; 0x78
 800cc3a:	4691      	mov	r9, r2
 800cc3c:	4680      	mov	r8, r0
 800cc3e:	460c      	mov	r4, r1
 800cc40:	469a      	mov	sl, r3
 800cc42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc46:	d807      	bhi.n	800cc58 <_printf_i+0x28>
 800cc48:	2f62      	cmp	r7, #98	; 0x62
 800cc4a:	d80a      	bhi.n	800cc62 <_printf_i+0x32>
 800cc4c:	2f00      	cmp	r7, #0
 800cc4e:	f000 80d8 	beq.w	800ce02 <_printf_i+0x1d2>
 800cc52:	2f58      	cmp	r7, #88	; 0x58
 800cc54:	f000 80a3 	beq.w	800cd9e <_printf_i+0x16e>
 800cc58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc60:	e03a      	b.n	800ccd8 <_printf_i+0xa8>
 800cc62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc66:	2b15      	cmp	r3, #21
 800cc68:	d8f6      	bhi.n	800cc58 <_printf_i+0x28>
 800cc6a:	a101      	add	r1, pc, #4	; (adr r1, 800cc70 <_printf_i+0x40>)
 800cc6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc70:	0800ccc9 	.word	0x0800ccc9
 800cc74:	0800ccdd 	.word	0x0800ccdd
 800cc78:	0800cc59 	.word	0x0800cc59
 800cc7c:	0800cc59 	.word	0x0800cc59
 800cc80:	0800cc59 	.word	0x0800cc59
 800cc84:	0800cc59 	.word	0x0800cc59
 800cc88:	0800ccdd 	.word	0x0800ccdd
 800cc8c:	0800cc59 	.word	0x0800cc59
 800cc90:	0800cc59 	.word	0x0800cc59
 800cc94:	0800cc59 	.word	0x0800cc59
 800cc98:	0800cc59 	.word	0x0800cc59
 800cc9c:	0800cde9 	.word	0x0800cde9
 800cca0:	0800cd0d 	.word	0x0800cd0d
 800cca4:	0800cdcb 	.word	0x0800cdcb
 800cca8:	0800cc59 	.word	0x0800cc59
 800ccac:	0800cc59 	.word	0x0800cc59
 800ccb0:	0800ce0b 	.word	0x0800ce0b
 800ccb4:	0800cc59 	.word	0x0800cc59
 800ccb8:	0800cd0d 	.word	0x0800cd0d
 800ccbc:	0800cc59 	.word	0x0800cc59
 800ccc0:	0800cc59 	.word	0x0800cc59
 800ccc4:	0800cdd3 	.word	0x0800cdd3
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	1d1a      	adds	r2, r3, #4
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	602a      	str	r2, [r5, #0]
 800ccd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e0a3      	b.n	800ce24 <_printf_i+0x1f4>
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	6829      	ldr	r1, [r5, #0]
 800cce0:	0606      	lsls	r6, r0, #24
 800cce2:	f101 0304 	add.w	r3, r1, #4
 800cce6:	d50a      	bpl.n	800ccfe <_printf_i+0xce>
 800cce8:	680e      	ldr	r6, [r1, #0]
 800ccea:	602b      	str	r3, [r5, #0]
 800ccec:	2e00      	cmp	r6, #0
 800ccee:	da03      	bge.n	800ccf8 <_printf_i+0xc8>
 800ccf0:	232d      	movs	r3, #45	; 0x2d
 800ccf2:	4276      	negs	r6, r6
 800ccf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf8:	485e      	ldr	r0, [pc, #376]	; (800ce74 <_printf_i+0x244>)
 800ccfa:	230a      	movs	r3, #10
 800ccfc:	e019      	b.n	800cd32 <_printf_i+0x102>
 800ccfe:	680e      	ldr	r6, [r1, #0]
 800cd00:	602b      	str	r3, [r5, #0]
 800cd02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd06:	bf18      	it	ne
 800cd08:	b236      	sxthne	r6, r6
 800cd0a:	e7ef      	b.n	800ccec <_printf_i+0xbc>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	6820      	ldr	r0, [r4, #0]
 800cd10:	1d19      	adds	r1, r3, #4
 800cd12:	6029      	str	r1, [r5, #0]
 800cd14:	0601      	lsls	r1, r0, #24
 800cd16:	d501      	bpl.n	800cd1c <_printf_i+0xec>
 800cd18:	681e      	ldr	r6, [r3, #0]
 800cd1a:	e002      	b.n	800cd22 <_printf_i+0xf2>
 800cd1c:	0646      	lsls	r6, r0, #25
 800cd1e:	d5fb      	bpl.n	800cd18 <_printf_i+0xe8>
 800cd20:	881e      	ldrh	r6, [r3, #0]
 800cd22:	4854      	ldr	r0, [pc, #336]	; (800ce74 <_printf_i+0x244>)
 800cd24:	2f6f      	cmp	r7, #111	; 0x6f
 800cd26:	bf0c      	ite	eq
 800cd28:	2308      	moveq	r3, #8
 800cd2a:	230a      	movne	r3, #10
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd32:	6865      	ldr	r5, [r4, #4]
 800cd34:	60a5      	str	r5, [r4, #8]
 800cd36:	2d00      	cmp	r5, #0
 800cd38:	bfa2      	ittt	ge
 800cd3a:	6821      	ldrge	r1, [r4, #0]
 800cd3c:	f021 0104 	bicge.w	r1, r1, #4
 800cd40:	6021      	strge	r1, [r4, #0]
 800cd42:	b90e      	cbnz	r6, 800cd48 <_printf_i+0x118>
 800cd44:	2d00      	cmp	r5, #0
 800cd46:	d04d      	beq.n	800cde4 <_printf_i+0x1b4>
 800cd48:	4615      	mov	r5, r2
 800cd4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd4e:	fb03 6711 	mls	r7, r3, r1, r6
 800cd52:	5dc7      	ldrb	r7, [r0, r7]
 800cd54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd58:	4637      	mov	r7, r6
 800cd5a:	42bb      	cmp	r3, r7
 800cd5c:	460e      	mov	r6, r1
 800cd5e:	d9f4      	bls.n	800cd4a <_printf_i+0x11a>
 800cd60:	2b08      	cmp	r3, #8
 800cd62:	d10b      	bne.n	800cd7c <_printf_i+0x14c>
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	07de      	lsls	r6, r3, #31
 800cd68:	d508      	bpl.n	800cd7c <_printf_i+0x14c>
 800cd6a:	6923      	ldr	r3, [r4, #16]
 800cd6c:	6861      	ldr	r1, [r4, #4]
 800cd6e:	4299      	cmp	r1, r3
 800cd70:	bfde      	ittt	le
 800cd72:	2330      	movle	r3, #48	; 0x30
 800cd74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd7c:	1b52      	subs	r2, r2, r5
 800cd7e:	6122      	str	r2, [r4, #16]
 800cd80:	f8cd a000 	str.w	sl, [sp]
 800cd84:	464b      	mov	r3, r9
 800cd86:	aa03      	add	r2, sp, #12
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	f7ff fee2 	bl	800cb54 <_printf_common>
 800cd90:	3001      	adds	r0, #1
 800cd92:	d14c      	bne.n	800ce2e <_printf_i+0x1fe>
 800cd94:	f04f 30ff 	mov.w	r0, #4294967295
 800cd98:	b004      	add	sp, #16
 800cd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9e:	4835      	ldr	r0, [pc, #212]	; (800ce74 <_printf_i+0x244>)
 800cda0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cda4:	6829      	ldr	r1, [r5, #0]
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cdac:	6029      	str	r1, [r5, #0]
 800cdae:	061d      	lsls	r5, r3, #24
 800cdb0:	d514      	bpl.n	800cddc <_printf_i+0x1ac>
 800cdb2:	07df      	lsls	r7, r3, #31
 800cdb4:	bf44      	itt	mi
 800cdb6:	f043 0320 	orrmi.w	r3, r3, #32
 800cdba:	6023      	strmi	r3, [r4, #0]
 800cdbc:	b91e      	cbnz	r6, 800cdc6 <_printf_i+0x196>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	f023 0320 	bic.w	r3, r3, #32
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	2310      	movs	r3, #16
 800cdc8:	e7b0      	b.n	800cd2c <_printf_i+0xfc>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	f043 0320 	orr.w	r3, r3, #32
 800cdd0:	6023      	str	r3, [r4, #0]
 800cdd2:	2378      	movs	r3, #120	; 0x78
 800cdd4:	4828      	ldr	r0, [pc, #160]	; (800ce78 <_printf_i+0x248>)
 800cdd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cdda:	e7e3      	b.n	800cda4 <_printf_i+0x174>
 800cddc:	0659      	lsls	r1, r3, #25
 800cdde:	bf48      	it	mi
 800cde0:	b2b6      	uxthmi	r6, r6
 800cde2:	e7e6      	b.n	800cdb2 <_printf_i+0x182>
 800cde4:	4615      	mov	r5, r2
 800cde6:	e7bb      	b.n	800cd60 <_printf_i+0x130>
 800cde8:	682b      	ldr	r3, [r5, #0]
 800cdea:	6826      	ldr	r6, [r4, #0]
 800cdec:	6961      	ldr	r1, [r4, #20]
 800cdee:	1d18      	adds	r0, r3, #4
 800cdf0:	6028      	str	r0, [r5, #0]
 800cdf2:	0635      	lsls	r5, r6, #24
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	d501      	bpl.n	800cdfc <_printf_i+0x1cc>
 800cdf8:	6019      	str	r1, [r3, #0]
 800cdfa:	e002      	b.n	800ce02 <_printf_i+0x1d2>
 800cdfc:	0670      	lsls	r0, r6, #25
 800cdfe:	d5fb      	bpl.n	800cdf8 <_printf_i+0x1c8>
 800ce00:	8019      	strh	r1, [r3, #0]
 800ce02:	2300      	movs	r3, #0
 800ce04:	6123      	str	r3, [r4, #16]
 800ce06:	4615      	mov	r5, r2
 800ce08:	e7ba      	b.n	800cd80 <_printf_i+0x150>
 800ce0a:	682b      	ldr	r3, [r5, #0]
 800ce0c:	1d1a      	adds	r2, r3, #4
 800ce0e:	602a      	str	r2, [r5, #0]
 800ce10:	681d      	ldr	r5, [r3, #0]
 800ce12:	6862      	ldr	r2, [r4, #4]
 800ce14:	2100      	movs	r1, #0
 800ce16:	4628      	mov	r0, r5
 800ce18:	f7f3 f9ba 	bl	8000190 <memchr>
 800ce1c:	b108      	cbz	r0, 800ce22 <_printf_i+0x1f2>
 800ce1e:	1b40      	subs	r0, r0, r5
 800ce20:	6060      	str	r0, [r4, #4]
 800ce22:	6863      	ldr	r3, [r4, #4]
 800ce24:	6123      	str	r3, [r4, #16]
 800ce26:	2300      	movs	r3, #0
 800ce28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce2c:	e7a8      	b.n	800cd80 <_printf_i+0x150>
 800ce2e:	6923      	ldr	r3, [r4, #16]
 800ce30:	462a      	mov	r2, r5
 800ce32:	4649      	mov	r1, r9
 800ce34:	4640      	mov	r0, r8
 800ce36:	47d0      	blx	sl
 800ce38:	3001      	adds	r0, #1
 800ce3a:	d0ab      	beq.n	800cd94 <_printf_i+0x164>
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	079b      	lsls	r3, r3, #30
 800ce40:	d413      	bmi.n	800ce6a <_printf_i+0x23a>
 800ce42:	68e0      	ldr	r0, [r4, #12]
 800ce44:	9b03      	ldr	r3, [sp, #12]
 800ce46:	4298      	cmp	r0, r3
 800ce48:	bfb8      	it	lt
 800ce4a:	4618      	movlt	r0, r3
 800ce4c:	e7a4      	b.n	800cd98 <_printf_i+0x168>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	4632      	mov	r2, r6
 800ce52:	4649      	mov	r1, r9
 800ce54:	4640      	mov	r0, r8
 800ce56:	47d0      	blx	sl
 800ce58:	3001      	adds	r0, #1
 800ce5a:	d09b      	beq.n	800cd94 <_printf_i+0x164>
 800ce5c:	3501      	adds	r5, #1
 800ce5e:	68e3      	ldr	r3, [r4, #12]
 800ce60:	9903      	ldr	r1, [sp, #12]
 800ce62:	1a5b      	subs	r3, r3, r1
 800ce64:	42ab      	cmp	r3, r5
 800ce66:	dcf2      	bgt.n	800ce4e <_printf_i+0x21e>
 800ce68:	e7eb      	b.n	800ce42 <_printf_i+0x212>
 800ce6a:	2500      	movs	r5, #0
 800ce6c:	f104 0619 	add.w	r6, r4, #25
 800ce70:	e7f5      	b.n	800ce5e <_printf_i+0x22e>
 800ce72:	bf00      	nop
 800ce74:	0801418a 	.word	0x0801418a
 800ce78:	0801419b 	.word	0x0801419b

0800ce7c <iprintf>:
 800ce7c:	b40f      	push	{r0, r1, r2, r3}
 800ce7e:	4b0a      	ldr	r3, [pc, #40]	; (800cea8 <iprintf+0x2c>)
 800ce80:	b513      	push	{r0, r1, r4, lr}
 800ce82:	681c      	ldr	r4, [r3, #0]
 800ce84:	b124      	cbz	r4, 800ce90 <iprintf+0x14>
 800ce86:	69a3      	ldr	r3, [r4, #24]
 800ce88:	b913      	cbnz	r3, 800ce90 <iprintf+0x14>
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f7ff f9a6 	bl	800c1dc <__sinit>
 800ce90:	ab05      	add	r3, sp, #20
 800ce92:	9a04      	ldr	r2, [sp, #16]
 800ce94:	68a1      	ldr	r1, [r4, #8]
 800ce96:	9301      	str	r3, [sp, #4]
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f001 fe2f 	bl	800eafc <_vfiprintf_r>
 800ce9e:	b002      	add	sp, #8
 800cea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cea4:	b004      	add	sp, #16
 800cea6:	4770      	bx	lr
 800cea8:	20000134 	.word	0x20000134

0800ceac <_puts_r>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	460e      	mov	r6, r1
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	b118      	cbz	r0, 800cebc <_puts_r+0x10>
 800ceb4:	6983      	ldr	r3, [r0, #24]
 800ceb6:	b90b      	cbnz	r3, 800cebc <_puts_r+0x10>
 800ceb8:	f7ff f990 	bl	800c1dc <__sinit>
 800cebc:	69ab      	ldr	r3, [r5, #24]
 800cebe:	68ac      	ldr	r4, [r5, #8]
 800cec0:	b913      	cbnz	r3, 800cec8 <_puts_r+0x1c>
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7ff f98a 	bl	800c1dc <__sinit>
 800cec8:	4b2c      	ldr	r3, [pc, #176]	; (800cf7c <_puts_r+0xd0>)
 800ceca:	429c      	cmp	r4, r3
 800cecc:	d120      	bne.n	800cf10 <_puts_r+0x64>
 800cece:	686c      	ldr	r4, [r5, #4]
 800ced0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ced2:	07db      	lsls	r3, r3, #31
 800ced4:	d405      	bmi.n	800cee2 <_puts_r+0x36>
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	0598      	lsls	r0, r3, #22
 800ceda:	d402      	bmi.n	800cee2 <_puts_r+0x36>
 800cedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cede:	f7ff fa40 	bl	800c362 <__retarget_lock_acquire_recursive>
 800cee2:	89a3      	ldrh	r3, [r4, #12]
 800cee4:	0719      	lsls	r1, r3, #28
 800cee6:	d51d      	bpl.n	800cf24 <_puts_r+0x78>
 800cee8:	6923      	ldr	r3, [r4, #16]
 800ceea:	b1db      	cbz	r3, 800cf24 <_puts_r+0x78>
 800ceec:	3e01      	subs	r6, #1
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cef4:	3b01      	subs	r3, #1
 800cef6:	60a3      	str	r3, [r4, #8]
 800cef8:	bb39      	cbnz	r1, 800cf4a <_puts_r+0x9e>
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	da38      	bge.n	800cf70 <_puts_r+0xc4>
 800cefe:	4622      	mov	r2, r4
 800cf00:	210a      	movs	r1, #10
 800cf02:	4628      	mov	r0, r5
 800cf04:	f000 f8f4 	bl	800d0f0 <__swbuf_r>
 800cf08:	3001      	adds	r0, #1
 800cf0a:	d011      	beq.n	800cf30 <_puts_r+0x84>
 800cf0c:	250a      	movs	r5, #10
 800cf0e:	e011      	b.n	800cf34 <_puts_r+0x88>
 800cf10:	4b1b      	ldr	r3, [pc, #108]	; (800cf80 <_puts_r+0xd4>)
 800cf12:	429c      	cmp	r4, r3
 800cf14:	d101      	bne.n	800cf1a <_puts_r+0x6e>
 800cf16:	68ac      	ldr	r4, [r5, #8]
 800cf18:	e7da      	b.n	800ced0 <_puts_r+0x24>
 800cf1a:	4b1a      	ldr	r3, [pc, #104]	; (800cf84 <_puts_r+0xd8>)
 800cf1c:	429c      	cmp	r4, r3
 800cf1e:	bf08      	it	eq
 800cf20:	68ec      	ldreq	r4, [r5, #12]
 800cf22:	e7d5      	b.n	800ced0 <_puts_r+0x24>
 800cf24:	4621      	mov	r1, r4
 800cf26:	4628      	mov	r0, r5
 800cf28:	f000 f946 	bl	800d1b8 <__swsetup_r>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d0dd      	beq.n	800ceec <_puts_r+0x40>
 800cf30:	f04f 35ff 	mov.w	r5, #4294967295
 800cf34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf36:	07da      	lsls	r2, r3, #31
 800cf38:	d405      	bmi.n	800cf46 <_puts_r+0x9a>
 800cf3a:	89a3      	ldrh	r3, [r4, #12]
 800cf3c:	059b      	lsls	r3, r3, #22
 800cf3e:	d402      	bmi.n	800cf46 <_puts_r+0x9a>
 800cf40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf42:	f7ff fa0f 	bl	800c364 <__retarget_lock_release_recursive>
 800cf46:	4628      	mov	r0, r5
 800cf48:	bd70      	pop	{r4, r5, r6, pc}
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da04      	bge.n	800cf58 <_puts_r+0xac>
 800cf4e:	69a2      	ldr	r2, [r4, #24]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	dc06      	bgt.n	800cf62 <_puts_r+0xb6>
 800cf54:	290a      	cmp	r1, #10
 800cf56:	d004      	beq.n	800cf62 <_puts_r+0xb6>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	6022      	str	r2, [r4, #0]
 800cf5e:	7019      	strb	r1, [r3, #0]
 800cf60:	e7c5      	b.n	800ceee <_puts_r+0x42>
 800cf62:	4622      	mov	r2, r4
 800cf64:	4628      	mov	r0, r5
 800cf66:	f000 f8c3 	bl	800d0f0 <__swbuf_r>
 800cf6a:	3001      	adds	r0, #1
 800cf6c:	d1bf      	bne.n	800ceee <_puts_r+0x42>
 800cf6e:	e7df      	b.n	800cf30 <_puts_r+0x84>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	250a      	movs	r5, #10
 800cf74:	1c5a      	adds	r2, r3, #1
 800cf76:	6022      	str	r2, [r4, #0]
 800cf78:	701d      	strb	r5, [r3, #0]
 800cf7a:	e7db      	b.n	800cf34 <_puts_r+0x88>
 800cf7c:	08014134 	.word	0x08014134
 800cf80:	08014154 	.word	0x08014154
 800cf84:	08014114 	.word	0x08014114

0800cf88 <puts>:
 800cf88:	4b02      	ldr	r3, [pc, #8]	; (800cf94 <puts+0xc>)
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	6818      	ldr	r0, [r3, #0]
 800cf8e:	f7ff bf8d 	b.w	800ceac <_puts_r>
 800cf92:	bf00      	nop
 800cf94:	20000134 	.word	0x20000134

0800cf98 <_sbrk_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4d06      	ldr	r5, [pc, #24]	; (800cfb4 <_sbrk_r+0x1c>)
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	602b      	str	r3, [r5, #0]
 800cfa4:	f7f4 fe6e 	bl	8001c84 <_sbrk>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	d102      	bne.n	800cfb2 <_sbrk_r+0x1a>
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	b103      	cbz	r3, 800cfb2 <_sbrk_r+0x1a>
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	bd38      	pop	{r3, r4, r5, pc}
 800cfb4:	200007e8 	.word	0x200007e8

0800cfb8 <siprintf>:
 800cfb8:	b40e      	push	{r1, r2, r3}
 800cfba:	b500      	push	{lr}
 800cfbc:	b09c      	sub	sp, #112	; 0x70
 800cfbe:	ab1d      	add	r3, sp, #116	; 0x74
 800cfc0:	9002      	str	r0, [sp, #8]
 800cfc2:	9006      	str	r0, [sp, #24]
 800cfc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfc8:	4809      	ldr	r0, [pc, #36]	; (800cff0 <siprintf+0x38>)
 800cfca:	9107      	str	r1, [sp, #28]
 800cfcc:	9104      	str	r1, [sp, #16]
 800cfce:	4909      	ldr	r1, [pc, #36]	; (800cff4 <siprintf+0x3c>)
 800cfd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd4:	9105      	str	r1, [sp, #20]
 800cfd6:	6800      	ldr	r0, [r0, #0]
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	a902      	add	r1, sp, #8
 800cfdc:	f001 fc64 	bl	800e8a8 <_svfiprintf_r>
 800cfe0:	9b02      	ldr	r3, [sp, #8]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	701a      	strb	r2, [r3, #0]
 800cfe6:	b01c      	add	sp, #112	; 0x70
 800cfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfec:	b003      	add	sp, #12
 800cfee:	4770      	bx	lr
 800cff0:	20000134 	.word	0x20000134
 800cff4:	ffff0208 	.word	0xffff0208

0800cff8 <__sread>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	460c      	mov	r4, r1
 800cffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d000:	f001 feac 	bl	800ed5c <_read_r>
 800d004:	2800      	cmp	r0, #0
 800d006:	bfab      	itete	ge
 800d008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d00a:	89a3      	ldrhlt	r3, [r4, #12]
 800d00c:	181b      	addge	r3, r3, r0
 800d00e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d012:	bfac      	ite	ge
 800d014:	6563      	strge	r3, [r4, #84]	; 0x54
 800d016:	81a3      	strhlt	r3, [r4, #12]
 800d018:	bd10      	pop	{r4, pc}

0800d01a <__swrite>:
 800d01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01e:	461f      	mov	r7, r3
 800d020:	898b      	ldrh	r3, [r1, #12]
 800d022:	05db      	lsls	r3, r3, #23
 800d024:	4605      	mov	r5, r0
 800d026:	460c      	mov	r4, r1
 800d028:	4616      	mov	r6, r2
 800d02a:	d505      	bpl.n	800d038 <__swrite+0x1e>
 800d02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d030:	2302      	movs	r3, #2
 800d032:	2200      	movs	r2, #0
 800d034:	f000 ffbe 	bl	800dfb4 <_lseek_r>
 800d038:	89a3      	ldrh	r3, [r4, #12]
 800d03a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d03e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d042:	81a3      	strh	r3, [r4, #12]
 800d044:	4632      	mov	r2, r6
 800d046:	463b      	mov	r3, r7
 800d048:	4628      	mov	r0, r5
 800d04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d04e:	f000 b8a1 	b.w	800d194 <_write_r>

0800d052 <__sseek>:
 800d052:	b510      	push	{r4, lr}
 800d054:	460c      	mov	r4, r1
 800d056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d05a:	f000 ffab 	bl	800dfb4 <_lseek_r>
 800d05e:	1c43      	adds	r3, r0, #1
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	bf15      	itete	ne
 800d064:	6560      	strne	r0, [r4, #84]	; 0x54
 800d066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d06a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d06e:	81a3      	strheq	r3, [r4, #12]
 800d070:	bf18      	it	ne
 800d072:	81a3      	strhne	r3, [r4, #12]
 800d074:	bd10      	pop	{r4, pc}

0800d076 <__sclose>:
 800d076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d07a:	f000 b90b 	b.w	800d294 <_close_r>

0800d07e <_vsniprintf_r>:
 800d07e:	b530      	push	{r4, r5, lr}
 800d080:	4614      	mov	r4, r2
 800d082:	2c00      	cmp	r4, #0
 800d084:	b09b      	sub	sp, #108	; 0x6c
 800d086:	4605      	mov	r5, r0
 800d088:	461a      	mov	r2, r3
 800d08a:	da05      	bge.n	800d098 <_vsniprintf_r+0x1a>
 800d08c:	238b      	movs	r3, #139	; 0x8b
 800d08e:	6003      	str	r3, [r0, #0]
 800d090:	f04f 30ff 	mov.w	r0, #4294967295
 800d094:	b01b      	add	sp, #108	; 0x6c
 800d096:	bd30      	pop	{r4, r5, pc}
 800d098:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d09c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d0a0:	bf14      	ite	ne
 800d0a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d0a6:	4623      	moveq	r3, r4
 800d0a8:	9302      	str	r3, [sp, #8]
 800d0aa:	9305      	str	r3, [sp, #20]
 800d0ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0b0:	9100      	str	r1, [sp, #0]
 800d0b2:	9104      	str	r1, [sp, #16]
 800d0b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d0b8:	4669      	mov	r1, sp
 800d0ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d0bc:	f001 fbf4 	bl	800e8a8 <_svfiprintf_r>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	bfbc      	itt	lt
 800d0c4:	238b      	movlt	r3, #139	; 0x8b
 800d0c6:	602b      	strlt	r3, [r5, #0]
 800d0c8:	2c00      	cmp	r4, #0
 800d0ca:	d0e3      	beq.n	800d094 <_vsniprintf_r+0x16>
 800d0cc:	9b00      	ldr	r3, [sp, #0]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	701a      	strb	r2, [r3, #0]
 800d0d2:	e7df      	b.n	800d094 <_vsniprintf_r+0x16>

0800d0d4 <vsniprintf>:
 800d0d4:	b507      	push	{r0, r1, r2, lr}
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	460a      	mov	r2, r1
 800d0dc:	4601      	mov	r1, r0
 800d0de:	4803      	ldr	r0, [pc, #12]	; (800d0ec <vsniprintf+0x18>)
 800d0e0:	6800      	ldr	r0, [r0, #0]
 800d0e2:	f7ff ffcc 	bl	800d07e <_vsniprintf_r>
 800d0e6:	b003      	add	sp, #12
 800d0e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0ec:	20000134 	.word	0x20000134

0800d0f0 <__swbuf_r>:
 800d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f2:	460e      	mov	r6, r1
 800d0f4:	4614      	mov	r4, r2
 800d0f6:	4605      	mov	r5, r0
 800d0f8:	b118      	cbz	r0, 800d102 <__swbuf_r+0x12>
 800d0fa:	6983      	ldr	r3, [r0, #24]
 800d0fc:	b90b      	cbnz	r3, 800d102 <__swbuf_r+0x12>
 800d0fe:	f7ff f86d 	bl	800c1dc <__sinit>
 800d102:	4b21      	ldr	r3, [pc, #132]	; (800d188 <__swbuf_r+0x98>)
 800d104:	429c      	cmp	r4, r3
 800d106:	d12b      	bne.n	800d160 <__swbuf_r+0x70>
 800d108:	686c      	ldr	r4, [r5, #4]
 800d10a:	69a3      	ldr	r3, [r4, #24]
 800d10c:	60a3      	str	r3, [r4, #8]
 800d10e:	89a3      	ldrh	r3, [r4, #12]
 800d110:	071a      	lsls	r2, r3, #28
 800d112:	d52f      	bpl.n	800d174 <__swbuf_r+0x84>
 800d114:	6923      	ldr	r3, [r4, #16]
 800d116:	b36b      	cbz	r3, 800d174 <__swbuf_r+0x84>
 800d118:	6923      	ldr	r3, [r4, #16]
 800d11a:	6820      	ldr	r0, [r4, #0]
 800d11c:	1ac0      	subs	r0, r0, r3
 800d11e:	6963      	ldr	r3, [r4, #20]
 800d120:	b2f6      	uxtb	r6, r6
 800d122:	4283      	cmp	r3, r0
 800d124:	4637      	mov	r7, r6
 800d126:	dc04      	bgt.n	800d132 <__swbuf_r+0x42>
 800d128:	4621      	mov	r1, r4
 800d12a:	4628      	mov	r0, r5
 800d12c:	f7fe ffb0 	bl	800c090 <_fflush_r>
 800d130:	bb30      	cbnz	r0, 800d180 <__swbuf_r+0x90>
 800d132:	68a3      	ldr	r3, [r4, #8]
 800d134:	3b01      	subs	r3, #1
 800d136:	60a3      	str	r3, [r4, #8]
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	6022      	str	r2, [r4, #0]
 800d13e:	701e      	strb	r6, [r3, #0]
 800d140:	6963      	ldr	r3, [r4, #20]
 800d142:	3001      	adds	r0, #1
 800d144:	4283      	cmp	r3, r0
 800d146:	d004      	beq.n	800d152 <__swbuf_r+0x62>
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	07db      	lsls	r3, r3, #31
 800d14c:	d506      	bpl.n	800d15c <__swbuf_r+0x6c>
 800d14e:	2e0a      	cmp	r6, #10
 800d150:	d104      	bne.n	800d15c <__swbuf_r+0x6c>
 800d152:	4621      	mov	r1, r4
 800d154:	4628      	mov	r0, r5
 800d156:	f7fe ff9b 	bl	800c090 <_fflush_r>
 800d15a:	b988      	cbnz	r0, 800d180 <__swbuf_r+0x90>
 800d15c:	4638      	mov	r0, r7
 800d15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d160:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <__swbuf_r+0x9c>)
 800d162:	429c      	cmp	r4, r3
 800d164:	d101      	bne.n	800d16a <__swbuf_r+0x7a>
 800d166:	68ac      	ldr	r4, [r5, #8]
 800d168:	e7cf      	b.n	800d10a <__swbuf_r+0x1a>
 800d16a:	4b09      	ldr	r3, [pc, #36]	; (800d190 <__swbuf_r+0xa0>)
 800d16c:	429c      	cmp	r4, r3
 800d16e:	bf08      	it	eq
 800d170:	68ec      	ldreq	r4, [r5, #12]
 800d172:	e7ca      	b.n	800d10a <__swbuf_r+0x1a>
 800d174:	4621      	mov	r1, r4
 800d176:	4628      	mov	r0, r5
 800d178:	f000 f81e 	bl	800d1b8 <__swsetup_r>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d0cb      	beq.n	800d118 <__swbuf_r+0x28>
 800d180:	f04f 37ff 	mov.w	r7, #4294967295
 800d184:	e7ea      	b.n	800d15c <__swbuf_r+0x6c>
 800d186:	bf00      	nop
 800d188:	08014134 	.word	0x08014134
 800d18c:	08014154 	.word	0x08014154
 800d190:	08014114 	.word	0x08014114

0800d194 <_write_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4d07      	ldr	r5, [pc, #28]	; (800d1b4 <_write_r+0x20>)
 800d198:	4604      	mov	r4, r0
 800d19a:	4608      	mov	r0, r1
 800d19c:	4611      	mov	r1, r2
 800d19e:	2200      	movs	r2, #0
 800d1a0:	602a      	str	r2, [r5, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f7f4 fd1d 	bl	8001be2 <_write>
 800d1a8:	1c43      	adds	r3, r0, #1
 800d1aa:	d102      	bne.n	800d1b2 <_write_r+0x1e>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	b103      	cbz	r3, 800d1b2 <_write_r+0x1e>
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	200007e8 	.word	0x200007e8

0800d1b8 <__swsetup_r>:
 800d1b8:	4b32      	ldr	r3, [pc, #200]	; (800d284 <__swsetup_r+0xcc>)
 800d1ba:	b570      	push	{r4, r5, r6, lr}
 800d1bc:	681d      	ldr	r5, [r3, #0]
 800d1be:	4606      	mov	r6, r0
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	b125      	cbz	r5, 800d1ce <__swsetup_r+0x16>
 800d1c4:	69ab      	ldr	r3, [r5, #24]
 800d1c6:	b913      	cbnz	r3, 800d1ce <__swsetup_r+0x16>
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f7ff f807 	bl	800c1dc <__sinit>
 800d1ce:	4b2e      	ldr	r3, [pc, #184]	; (800d288 <__swsetup_r+0xd0>)
 800d1d0:	429c      	cmp	r4, r3
 800d1d2:	d10f      	bne.n	800d1f4 <__swsetup_r+0x3c>
 800d1d4:	686c      	ldr	r4, [r5, #4]
 800d1d6:	89a3      	ldrh	r3, [r4, #12]
 800d1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1dc:	0719      	lsls	r1, r3, #28
 800d1de:	d42c      	bmi.n	800d23a <__swsetup_r+0x82>
 800d1e0:	06dd      	lsls	r5, r3, #27
 800d1e2:	d411      	bmi.n	800d208 <__swsetup_r+0x50>
 800d1e4:	2309      	movs	r3, #9
 800d1e6:	6033      	str	r3, [r6, #0]
 800d1e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1ec:	81a3      	strh	r3, [r4, #12]
 800d1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f2:	e03e      	b.n	800d272 <__swsetup_r+0xba>
 800d1f4:	4b25      	ldr	r3, [pc, #148]	; (800d28c <__swsetup_r+0xd4>)
 800d1f6:	429c      	cmp	r4, r3
 800d1f8:	d101      	bne.n	800d1fe <__swsetup_r+0x46>
 800d1fa:	68ac      	ldr	r4, [r5, #8]
 800d1fc:	e7eb      	b.n	800d1d6 <__swsetup_r+0x1e>
 800d1fe:	4b24      	ldr	r3, [pc, #144]	; (800d290 <__swsetup_r+0xd8>)
 800d200:	429c      	cmp	r4, r3
 800d202:	bf08      	it	eq
 800d204:	68ec      	ldreq	r4, [r5, #12]
 800d206:	e7e6      	b.n	800d1d6 <__swsetup_r+0x1e>
 800d208:	0758      	lsls	r0, r3, #29
 800d20a:	d512      	bpl.n	800d232 <__swsetup_r+0x7a>
 800d20c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d20e:	b141      	cbz	r1, 800d222 <__swsetup_r+0x6a>
 800d210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d214:	4299      	cmp	r1, r3
 800d216:	d002      	beq.n	800d21e <__swsetup_r+0x66>
 800d218:	4630      	mov	r0, r6
 800d21a:	f7ff f8e5 	bl	800c3e8 <_free_r>
 800d21e:	2300      	movs	r3, #0
 800d220:	6363      	str	r3, [r4, #52]	; 0x34
 800d222:	89a3      	ldrh	r3, [r4, #12]
 800d224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	2300      	movs	r3, #0
 800d22c:	6063      	str	r3, [r4, #4]
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	f043 0308 	orr.w	r3, r3, #8
 800d238:	81a3      	strh	r3, [r4, #12]
 800d23a:	6923      	ldr	r3, [r4, #16]
 800d23c:	b94b      	cbnz	r3, 800d252 <__swsetup_r+0x9a>
 800d23e:	89a3      	ldrh	r3, [r4, #12]
 800d240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d248:	d003      	beq.n	800d252 <__swsetup_r+0x9a>
 800d24a:	4621      	mov	r1, r4
 800d24c:	4630      	mov	r0, r6
 800d24e:	f000 fee9 	bl	800e024 <__smakebuf_r>
 800d252:	89a0      	ldrh	r0, [r4, #12]
 800d254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d258:	f010 0301 	ands.w	r3, r0, #1
 800d25c:	d00a      	beq.n	800d274 <__swsetup_r+0xbc>
 800d25e:	2300      	movs	r3, #0
 800d260:	60a3      	str	r3, [r4, #8]
 800d262:	6963      	ldr	r3, [r4, #20]
 800d264:	425b      	negs	r3, r3
 800d266:	61a3      	str	r3, [r4, #24]
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	b943      	cbnz	r3, 800d27e <__swsetup_r+0xc6>
 800d26c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d270:	d1ba      	bne.n	800d1e8 <__swsetup_r+0x30>
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	0781      	lsls	r1, r0, #30
 800d276:	bf58      	it	pl
 800d278:	6963      	ldrpl	r3, [r4, #20]
 800d27a:	60a3      	str	r3, [r4, #8]
 800d27c:	e7f4      	b.n	800d268 <__swsetup_r+0xb0>
 800d27e:	2000      	movs	r0, #0
 800d280:	e7f7      	b.n	800d272 <__swsetup_r+0xba>
 800d282:	bf00      	nop
 800d284:	20000134 	.word	0x20000134
 800d288:	08014134 	.word	0x08014134
 800d28c:	08014154 	.word	0x08014154
 800d290:	08014114 	.word	0x08014114

0800d294 <_close_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d06      	ldr	r5, [pc, #24]	; (800d2b0 <_close_r+0x1c>)
 800d298:	2300      	movs	r3, #0
 800d29a:	4604      	mov	r4, r0
 800d29c:	4608      	mov	r0, r1
 800d29e:	602b      	str	r3, [r5, #0]
 800d2a0:	f7f4 fcbb 	bl	8001c1a <_close>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_close_r+0x1a>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_close_r+0x1a>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	200007e8 	.word	0x200007e8

0800d2b4 <quorem>:
 800d2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b8:	6903      	ldr	r3, [r0, #16]
 800d2ba:	690c      	ldr	r4, [r1, #16]
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	4607      	mov	r7, r0
 800d2c0:	f2c0 8081 	blt.w	800d3c6 <quorem+0x112>
 800d2c4:	3c01      	subs	r4, #1
 800d2c6:	f101 0814 	add.w	r8, r1, #20
 800d2ca:	f100 0514 	add.w	r5, r0, #20
 800d2ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2d2:	9301      	str	r3, [sp, #4]
 800d2d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2ec:	d331      	bcc.n	800d352 <quorem+0x9e>
 800d2ee:	f04f 0e00 	mov.w	lr, #0
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	46ac      	mov	ip, r5
 800d2f6:	46f2      	mov	sl, lr
 800d2f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2fc:	b293      	uxth	r3, r2
 800d2fe:	fb06 e303 	mla	r3, r6, r3, lr
 800d302:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d306:	b29b      	uxth	r3, r3
 800d308:	ebaa 0303 	sub.w	r3, sl, r3
 800d30c:	f8dc a000 	ldr.w	sl, [ip]
 800d310:	0c12      	lsrs	r2, r2, #16
 800d312:	fa13 f38a 	uxtah	r3, r3, sl
 800d316:	fb06 e202 	mla	r2, r6, r2, lr
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	9b00      	ldr	r3, [sp, #0]
 800d31e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d322:	b292      	uxth	r2, r2
 800d324:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d32c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d330:	4581      	cmp	r9, r0
 800d332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d336:	f84c 3b04 	str.w	r3, [ip], #4
 800d33a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d33e:	d2db      	bcs.n	800d2f8 <quorem+0x44>
 800d340:	f855 300b 	ldr.w	r3, [r5, fp]
 800d344:	b92b      	cbnz	r3, 800d352 <quorem+0x9e>
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	3b04      	subs	r3, #4
 800d34a:	429d      	cmp	r5, r3
 800d34c:	461a      	mov	r2, r3
 800d34e:	d32e      	bcc.n	800d3ae <quorem+0xfa>
 800d350:	613c      	str	r4, [r7, #16]
 800d352:	4638      	mov	r0, r7
 800d354:	f001 f934 	bl	800e5c0 <__mcmp>
 800d358:	2800      	cmp	r0, #0
 800d35a:	db24      	blt.n	800d3a6 <quorem+0xf2>
 800d35c:	3601      	adds	r6, #1
 800d35e:	4628      	mov	r0, r5
 800d360:	f04f 0c00 	mov.w	ip, #0
 800d364:	f858 2b04 	ldr.w	r2, [r8], #4
 800d368:	f8d0 e000 	ldr.w	lr, [r0]
 800d36c:	b293      	uxth	r3, r2
 800d36e:	ebac 0303 	sub.w	r3, ip, r3
 800d372:	0c12      	lsrs	r2, r2, #16
 800d374:	fa13 f38e 	uxtah	r3, r3, lr
 800d378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d37c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d380:	b29b      	uxth	r3, r3
 800d382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d386:	45c1      	cmp	r9, r8
 800d388:	f840 3b04 	str.w	r3, [r0], #4
 800d38c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d390:	d2e8      	bcs.n	800d364 <quorem+0xb0>
 800d392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d39a:	b922      	cbnz	r2, 800d3a6 <quorem+0xf2>
 800d39c:	3b04      	subs	r3, #4
 800d39e:	429d      	cmp	r5, r3
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	d30a      	bcc.n	800d3ba <quorem+0x106>
 800d3a4:	613c      	str	r4, [r7, #16]
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	b003      	add	sp, #12
 800d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ae:	6812      	ldr	r2, [r2, #0]
 800d3b0:	3b04      	subs	r3, #4
 800d3b2:	2a00      	cmp	r2, #0
 800d3b4:	d1cc      	bne.n	800d350 <quorem+0x9c>
 800d3b6:	3c01      	subs	r4, #1
 800d3b8:	e7c7      	b.n	800d34a <quorem+0x96>
 800d3ba:	6812      	ldr	r2, [r2, #0]
 800d3bc:	3b04      	subs	r3, #4
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	d1f0      	bne.n	800d3a4 <quorem+0xf0>
 800d3c2:	3c01      	subs	r4, #1
 800d3c4:	e7eb      	b.n	800d39e <quorem+0xea>
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	e7ee      	b.n	800d3a8 <quorem+0xf4>
 800d3ca:	0000      	movs	r0, r0
 800d3cc:	0000      	movs	r0, r0
	...

0800d3d0 <_dtoa_r>:
 800d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d4:	ed2d 8b04 	vpush	{d8-d9}
 800d3d8:	ec57 6b10 	vmov	r6, r7, d0
 800d3dc:	b093      	sub	sp, #76	; 0x4c
 800d3de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3e4:	9106      	str	r1, [sp, #24]
 800d3e6:	ee10 aa10 	vmov	sl, s0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d3f0:	46bb      	mov	fp, r7
 800d3f2:	b975      	cbnz	r5, 800d412 <_dtoa_r+0x42>
 800d3f4:	2010      	movs	r0, #16
 800d3f6:	f7fe ffb7 	bl	800c368 <malloc>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	6260      	str	r0, [r4, #36]	; 0x24
 800d3fe:	b920      	cbnz	r0, 800d40a <_dtoa_r+0x3a>
 800d400:	4ba7      	ldr	r3, [pc, #668]	; (800d6a0 <_dtoa_r+0x2d0>)
 800d402:	21ea      	movs	r1, #234	; 0xea
 800d404:	48a7      	ldr	r0, [pc, #668]	; (800d6a4 <_dtoa_r+0x2d4>)
 800d406:	f001 fcbb 	bl	800ed80 <__assert_func>
 800d40a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d40e:	6005      	str	r5, [r0, #0]
 800d410:	60c5      	str	r5, [r0, #12]
 800d412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d414:	6819      	ldr	r1, [r3, #0]
 800d416:	b151      	cbz	r1, 800d42e <_dtoa_r+0x5e>
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	604a      	str	r2, [r1, #4]
 800d41c:	2301      	movs	r3, #1
 800d41e:	4093      	lsls	r3, r2
 800d420:	608b      	str	r3, [r1, #8]
 800d422:	4620      	mov	r0, r4
 800d424:	f000 fe8a 	bl	800e13c <_Bfree>
 800d428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d42a:	2200      	movs	r2, #0
 800d42c:	601a      	str	r2, [r3, #0]
 800d42e:	1e3b      	subs	r3, r7, #0
 800d430:	bfaa      	itet	ge
 800d432:	2300      	movge	r3, #0
 800d434:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d438:	f8c8 3000 	strge.w	r3, [r8]
 800d43c:	4b9a      	ldr	r3, [pc, #616]	; (800d6a8 <_dtoa_r+0x2d8>)
 800d43e:	bfbc      	itt	lt
 800d440:	2201      	movlt	r2, #1
 800d442:	f8c8 2000 	strlt.w	r2, [r8]
 800d446:	ea33 030b 	bics.w	r3, r3, fp
 800d44a:	d11b      	bne.n	800d484 <_dtoa_r+0xb4>
 800d44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d44e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d452:	6013      	str	r3, [r2, #0]
 800d454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d458:	4333      	orrs	r3, r6
 800d45a:	f000 8592 	beq.w	800df82 <_dtoa_r+0xbb2>
 800d45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d460:	b963      	cbnz	r3, 800d47c <_dtoa_r+0xac>
 800d462:	4b92      	ldr	r3, [pc, #584]	; (800d6ac <_dtoa_r+0x2dc>)
 800d464:	e022      	b.n	800d4ac <_dtoa_r+0xdc>
 800d466:	4b92      	ldr	r3, [pc, #584]	; (800d6b0 <_dtoa_r+0x2e0>)
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	3308      	adds	r3, #8
 800d46c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	9801      	ldr	r0, [sp, #4]
 800d472:	b013      	add	sp, #76	; 0x4c
 800d474:	ecbd 8b04 	vpop	{d8-d9}
 800d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	4b8b      	ldr	r3, [pc, #556]	; (800d6ac <_dtoa_r+0x2dc>)
 800d47e:	9301      	str	r3, [sp, #4]
 800d480:	3303      	adds	r3, #3
 800d482:	e7f3      	b.n	800d46c <_dtoa_r+0x9c>
 800d484:	2200      	movs	r2, #0
 800d486:	2300      	movs	r3, #0
 800d488:	4650      	mov	r0, sl
 800d48a:	4659      	mov	r1, fp
 800d48c:	f7f3 faf4 	bl	8000a78 <__aeabi_dcmpeq>
 800d490:	ec4b ab19 	vmov	d9, sl, fp
 800d494:	4680      	mov	r8, r0
 800d496:	b158      	cbz	r0, 800d4b0 <_dtoa_r+0xe0>
 800d498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d49a:	2301      	movs	r3, #1
 800d49c:	6013      	str	r3, [r2, #0]
 800d49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f000 856b 	beq.w	800df7c <_dtoa_r+0xbac>
 800d4a6:	4883      	ldr	r0, [pc, #524]	; (800d6b4 <_dtoa_r+0x2e4>)
 800d4a8:	6018      	str	r0, [r3, #0]
 800d4aa:	1e43      	subs	r3, r0, #1
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	e7df      	b.n	800d470 <_dtoa_r+0xa0>
 800d4b0:	ec4b ab10 	vmov	d0, sl, fp
 800d4b4:	aa10      	add	r2, sp, #64	; 0x40
 800d4b6:	a911      	add	r1, sp, #68	; 0x44
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f001 f927 	bl	800e70c <__d2b>
 800d4be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d4c2:	ee08 0a10 	vmov	s16, r0
 800d4c6:	2d00      	cmp	r5, #0
 800d4c8:	f000 8084 	beq.w	800d5d4 <_dtoa_r+0x204>
 800d4cc:	ee19 3a90 	vmov	r3, s19
 800d4d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d4d8:	4656      	mov	r6, sl
 800d4da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d4de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d4e6:	4b74      	ldr	r3, [pc, #464]	; (800d6b8 <_dtoa_r+0x2e8>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	f7f2 fea3 	bl	8000238 <__aeabi_dsub>
 800d4f2:	a365      	add	r3, pc, #404	; (adr r3, 800d688 <_dtoa_r+0x2b8>)
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	f7f3 f856 	bl	80005a8 <__aeabi_dmul>
 800d4fc:	a364      	add	r3, pc, #400	; (adr r3, 800d690 <_dtoa_r+0x2c0>)
 800d4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d502:	f7f2 fe9b 	bl	800023c <__adddf3>
 800d506:	4606      	mov	r6, r0
 800d508:	4628      	mov	r0, r5
 800d50a:	460f      	mov	r7, r1
 800d50c:	f7f2 ffe2 	bl	80004d4 <__aeabi_i2d>
 800d510:	a361      	add	r3, pc, #388	; (adr r3, 800d698 <_dtoa_r+0x2c8>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f7f3 f847 	bl	80005a8 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4630      	mov	r0, r6
 800d520:	4639      	mov	r1, r7
 800d522:	f7f2 fe8b 	bl	800023c <__adddf3>
 800d526:	4606      	mov	r6, r0
 800d528:	460f      	mov	r7, r1
 800d52a:	f7f3 faed 	bl	8000b08 <__aeabi_d2iz>
 800d52e:	2200      	movs	r2, #0
 800d530:	9000      	str	r0, [sp, #0]
 800d532:	2300      	movs	r3, #0
 800d534:	4630      	mov	r0, r6
 800d536:	4639      	mov	r1, r7
 800d538:	f7f3 faa8 	bl	8000a8c <__aeabi_dcmplt>
 800d53c:	b150      	cbz	r0, 800d554 <_dtoa_r+0x184>
 800d53e:	9800      	ldr	r0, [sp, #0]
 800d540:	f7f2 ffc8 	bl	80004d4 <__aeabi_i2d>
 800d544:	4632      	mov	r2, r6
 800d546:	463b      	mov	r3, r7
 800d548:	f7f3 fa96 	bl	8000a78 <__aeabi_dcmpeq>
 800d54c:	b910      	cbnz	r0, 800d554 <_dtoa_r+0x184>
 800d54e:	9b00      	ldr	r3, [sp, #0]
 800d550:	3b01      	subs	r3, #1
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	9b00      	ldr	r3, [sp, #0]
 800d556:	2b16      	cmp	r3, #22
 800d558:	d85a      	bhi.n	800d610 <_dtoa_r+0x240>
 800d55a:	9a00      	ldr	r2, [sp, #0]
 800d55c:	4b57      	ldr	r3, [pc, #348]	; (800d6bc <_dtoa_r+0x2ec>)
 800d55e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	ec51 0b19 	vmov	r0, r1, d9
 800d56a:	f7f3 fa8f 	bl	8000a8c <__aeabi_dcmplt>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d050      	beq.n	800d614 <_dtoa_r+0x244>
 800d572:	9b00      	ldr	r3, [sp, #0]
 800d574:	3b01      	subs	r3, #1
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	2300      	movs	r3, #0
 800d57a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d57e:	1b5d      	subs	r5, r3, r5
 800d580:	1e6b      	subs	r3, r5, #1
 800d582:	9305      	str	r3, [sp, #20]
 800d584:	bf45      	ittet	mi
 800d586:	f1c5 0301 	rsbmi	r3, r5, #1
 800d58a:	9304      	strmi	r3, [sp, #16]
 800d58c:	2300      	movpl	r3, #0
 800d58e:	2300      	movmi	r3, #0
 800d590:	bf4c      	ite	mi
 800d592:	9305      	strmi	r3, [sp, #20]
 800d594:	9304      	strpl	r3, [sp, #16]
 800d596:	9b00      	ldr	r3, [sp, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	db3d      	blt.n	800d618 <_dtoa_r+0x248>
 800d59c:	9b05      	ldr	r3, [sp, #20]
 800d59e:	9a00      	ldr	r2, [sp, #0]
 800d5a0:	920a      	str	r2, [sp, #40]	; 0x28
 800d5a2:	4413      	add	r3, r2
 800d5a4:	9305      	str	r3, [sp, #20]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9307      	str	r3, [sp, #28]
 800d5aa:	9b06      	ldr	r3, [sp, #24]
 800d5ac:	2b09      	cmp	r3, #9
 800d5ae:	f200 8089 	bhi.w	800d6c4 <_dtoa_r+0x2f4>
 800d5b2:	2b05      	cmp	r3, #5
 800d5b4:	bfc4      	itt	gt
 800d5b6:	3b04      	subgt	r3, #4
 800d5b8:	9306      	strgt	r3, [sp, #24]
 800d5ba:	9b06      	ldr	r3, [sp, #24]
 800d5bc:	f1a3 0302 	sub.w	r3, r3, #2
 800d5c0:	bfcc      	ite	gt
 800d5c2:	2500      	movgt	r5, #0
 800d5c4:	2501      	movle	r5, #1
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	f200 8087 	bhi.w	800d6da <_dtoa_r+0x30a>
 800d5cc:	e8df f003 	tbb	[pc, r3]
 800d5d0:	59383a2d 	.word	0x59383a2d
 800d5d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d5d8:	441d      	add	r5, r3
 800d5da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d5de:	2b20      	cmp	r3, #32
 800d5e0:	bfc1      	itttt	gt
 800d5e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d5ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800d5ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d5f2:	bfda      	itte	le
 800d5f4:	f1c3 0320 	rsble	r3, r3, #32
 800d5f8:	fa06 f003 	lslle.w	r0, r6, r3
 800d5fc:	4318      	orrgt	r0, r3
 800d5fe:	f7f2 ff59 	bl	80004b4 <__aeabi_ui2d>
 800d602:	2301      	movs	r3, #1
 800d604:	4606      	mov	r6, r0
 800d606:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d60a:	3d01      	subs	r5, #1
 800d60c:	930e      	str	r3, [sp, #56]	; 0x38
 800d60e:	e76a      	b.n	800d4e6 <_dtoa_r+0x116>
 800d610:	2301      	movs	r3, #1
 800d612:	e7b2      	b.n	800d57a <_dtoa_r+0x1aa>
 800d614:	900b      	str	r0, [sp, #44]	; 0x2c
 800d616:	e7b1      	b.n	800d57c <_dtoa_r+0x1ac>
 800d618:	9b04      	ldr	r3, [sp, #16]
 800d61a:	9a00      	ldr	r2, [sp, #0]
 800d61c:	1a9b      	subs	r3, r3, r2
 800d61e:	9304      	str	r3, [sp, #16]
 800d620:	4253      	negs	r3, r2
 800d622:	9307      	str	r3, [sp, #28]
 800d624:	2300      	movs	r3, #0
 800d626:	930a      	str	r3, [sp, #40]	; 0x28
 800d628:	e7bf      	b.n	800d5aa <_dtoa_r+0x1da>
 800d62a:	2300      	movs	r3, #0
 800d62c:	9308      	str	r3, [sp, #32]
 800d62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d630:	2b00      	cmp	r3, #0
 800d632:	dc55      	bgt.n	800d6e0 <_dtoa_r+0x310>
 800d634:	2301      	movs	r3, #1
 800d636:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d63a:	461a      	mov	r2, r3
 800d63c:	9209      	str	r2, [sp, #36]	; 0x24
 800d63e:	e00c      	b.n	800d65a <_dtoa_r+0x28a>
 800d640:	2301      	movs	r3, #1
 800d642:	e7f3      	b.n	800d62c <_dtoa_r+0x25c>
 800d644:	2300      	movs	r3, #0
 800d646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d648:	9308      	str	r3, [sp, #32]
 800d64a:	9b00      	ldr	r3, [sp, #0]
 800d64c:	4413      	add	r3, r2
 800d64e:	9302      	str	r3, [sp, #8]
 800d650:	3301      	adds	r3, #1
 800d652:	2b01      	cmp	r3, #1
 800d654:	9303      	str	r3, [sp, #12]
 800d656:	bfb8      	it	lt
 800d658:	2301      	movlt	r3, #1
 800d65a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d65c:	2200      	movs	r2, #0
 800d65e:	6042      	str	r2, [r0, #4]
 800d660:	2204      	movs	r2, #4
 800d662:	f102 0614 	add.w	r6, r2, #20
 800d666:	429e      	cmp	r6, r3
 800d668:	6841      	ldr	r1, [r0, #4]
 800d66a:	d93d      	bls.n	800d6e8 <_dtoa_r+0x318>
 800d66c:	4620      	mov	r0, r4
 800d66e:	f000 fd25 	bl	800e0bc <_Balloc>
 800d672:	9001      	str	r0, [sp, #4]
 800d674:	2800      	cmp	r0, #0
 800d676:	d13b      	bne.n	800d6f0 <_dtoa_r+0x320>
 800d678:	4b11      	ldr	r3, [pc, #68]	; (800d6c0 <_dtoa_r+0x2f0>)
 800d67a:	4602      	mov	r2, r0
 800d67c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d680:	e6c0      	b.n	800d404 <_dtoa_r+0x34>
 800d682:	2301      	movs	r3, #1
 800d684:	e7df      	b.n	800d646 <_dtoa_r+0x276>
 800d686:	bf00      	nop
 800d688:	636f4361 	.word	0x636f4361
 800d68c:	3fd287a7 	.word	0x3fd287a7
 800d690:	8b60c8b3 	.word	0x8b60c8b3
 800d694:	3fc68a28 	.word	0x3fc68a28
 800d698:	509f79fb 	.word	0x509f79fb
 800d69c:	3fd34413 	.word	0x3fd34413
 800d6a0:	080141b9 	.word	0x080141b9
 800d6a4:	080141d0 	.word	0x080141d0
 800d6a8:	7ff00000 	.word	0x7ff00000
 800d6ac:	080141b5 	.word	0x080141b5
 800d6b0:	080141ac 	.word	0x080141ac
 800d6b4:	08014189 	.word	0x08014189
 800d6b8:	3ff80000 	.word	0x3ff80000
 800d6bc:	080142c0 	.word	0x080142c0
 800d6c0:	0801422b 	.word	0x0801422b
 800d6c4:	2501      	movs	r5, #1
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	9306      	str	r3, [sp, #24]
 800d6ca:	9508      	str	r5, [sp, #32]
 800d6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	2312      	movs	r3, #18
 800d6d8:	e7b0      	b.n	800d63c <_dtoa_r+0x26c>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	9308      	str	r3, [sp, #32]
 800d6de:	e7f5      	b.n	800d6cc <_dtoa_r+0x2fc>
 800d6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6e6:	e7b8      	b.n	800d65a <_dtoa_r+0x28a>
 800d6e8:	3101      	adds	r1, #1
 800d6ea:	6041      	str	r1, [r0, #4]
 800d6ec:	0052      	lsls	r2, r2, #1
 800d6ee:	e7b8      	b.n	800d662 <_dtoa_r+0x292>
 800d6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6f2:	9a01      	ldr	r2, [sp, #4]
 800d6f4:	601a      	str	r2, [r3, #0]
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	2b0e      	cmp	r3, #14
 800d6fa:	f200 809d 	bhi.w	800d838 <_dtoa_r+0x468>
 800d6fe:	2d00      	cmp	r5, #0
 800d700:	f000 809a 	beq.w	800d838 <_dtoa_r+0x468>
 800d704:	9b00      	ldr	r3, [sp, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	dd32      	ble.n	800d770 <_dtoa_r+0x3a0>
 800d70a:	4ab7      	ldr	r2, [pc, #732]	; (800d9e8 <_dtoa_r+0x618>)
 800d70c:	f003 030f 	and.w	r3, r3, #15
 800d710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d714:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d718:	9b00      	ldr	r3, [sp, #0]
 800d71a:	05d8      	lsls	r0, r3, #23
 800d71c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d720:	d516      	bpl.n	800d750 <_dtoa_r+0x380>
 800d722:	4bb2      	ldr	r3, [pc, #712]	; (800d9ec <_dtoa_r+0x61c>)
 800d724:	ec51 0b19 	vmov	r0, r1, d9
 800d728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d72c:	f7f3 f866 	bl	80007fc <__aeabi_ddiv>
 800d730:	f007 070f 	and.w	r7, r7, #15
 800d734:	4682      	mov	sl, r0
 800d736:	468b      	mov	fp, r1
 800d738:	2503      	movs	r5, #3
 800d73a:	4eac      	ldr	r6, [pc, #688]	; (800d9ec <_dtoa_r+0x61c>)
 800d73c:	b957      	cbnz	r7, 800d754 <_dtoa_r+0x384>
 800d73e:	4642      	mov	r2, r8
 800d740:	464b      	mov	r3, r9
 800d742:	4650      	mov	r0, sl
 800d744:	4659      	mov	r1, fp
 800d746:	f7f3 f859 	bl	80007fc <__aeabi_ddiv>
 800d74a:	4682      	mov	sl, r0
 800d74c:	468b      	mov	fp, r1
 800d74e:	e028      	b.n	800d7a2 <_dtoa_r+0x3d2>
 800d750:	2502      	movs	r5, #2
 800d752:	e7f2      	b.n	800d73a <_dtoa_r+0x36a>
 800d754:	07f9      	lsls	r1, r7, #31
 800d756:	d508      	bpl.n	800d76a <_dtoa_r+0x39a>
 800d758:	4640      	mov	r0, r8
 800d75a:	4649      	mov	r1, r9
 800d75c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d760:	f7f2 ff22 	bl	80005a8 <__aeabi_dmul>
 800d764:	3501      	adds	r5, #1
 800d766:	4680      	mov	r8, r0
 800d768:	4689      	mov	r9, r1
 800d76a:	107f      	asrs	r7, r7, #1
 800d76c:	3608      	adds	r6, #8
 800d76e:	e7e5      	b.n	800d73c <_dtoa_r+0x36c>
 800d770:	f000 809b 	beq.w	800d8aa <_dtoa_r+0x4da>
 800d774:	9b00      	ldr	r3, [sp, #0]
 800d776:	4f9d      	ldr	r7, [pc, #628]	; (800d9ec <_dtoa_r+0x61c>)
 800d778:	425e      	negs	r6, r3
 800d77a:	4b9b      	ldr	r3, [pc, #620]	; (800d9e8 <_dtoa_r+0x618>)
 800d77c:	f006 020f 	and.w	r2, r6, #15
 800d780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	ec51 0b19 	vmov	r0, r1, d9
 800d78c:	f7f2 ff0c 	bl	80005a8 <__aeabi_dmul>
 800d790:	1136      	asrs	r6, r6, #4
 800d792:	4682      	mov	sl, r0
 800d794:	468b      	mov	fp, r1
 800d796:	2300      	movs	r3, #0
 800d798:	2502      	movs	r5, #2
 800d79a:	2e00      	cmp	r6, #0
 800d79c:	d17a      	bne.n	800d894 <_dtoa_r+0x4c4>
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1d3      	bne.n	800d74a <_dtoa_r+0x37a>
 800d7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f000 8082 	beq.w	800d8ae <_dtoa_r+0x4de>
 800d7aa:	4b91      	ldr	r3, [pc, #580]	; (800d9f0 <_dtoa_r+0x620>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	4650      	mov	r0, sl
 800d7b0:	4659      	mov	r1, fp
 800d7b2:	f7f3 f96b 	bl	8000a8c <__aeabi_dcmplt>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d079      	beq.n	800d8ae <_dtoa_r+0x4de>
 800d7ba:	9b03      	ldr	r3, [sp, #12]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d076      	beq.n	800d8ae <_dtoa_r+0x4de>
 800d7c0:	9b02      	ldr	r3, [sp, #8]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	dd36      	ble.n	800d834 <_dtoa_r+0x464>
 800d7c6:	9b00      	ldr	r3, [sp, #0]
 800d7c8:	4650      	mov	r0, sl
 800d7ca:	4659      	mov	r1, fp
 800d7cc:	1e5f      	subs	r7, r3, #1
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	4b88      	ldr	r3, [pc, #544]	; (800d9f4 <_dtoa_r+0x624>)
 800d7d2:	f7f2 fee9 	bl	80005a8 <__aeabi_dmul>
 800d7d6:	9e02      	ldr	r6, [sp, #8]
 800d7d8:	4682      	mov	sl, r0
 800d7da:	468b      	mov	fp, r1
 800d7dc:	3501      	adds	r5, #1
 800d7de:	4628      	mov	r0, r5
 800d7e0:	f7f2 fe78 	bl	80004d4 <__aeabi_i2d>
 800d7e4:	4652      	mov	r2, sl
 800d7e6:	465b      	mov	r3, fp
 800d7e8:	f7f2 fede 	bl	80005a8 <__aeabi_dmul>
 800d7ec:	4b82      	ldr	r3, [pc, #520]	; (800d9f8 <_dtoa_r+0x628>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f7f2 fd24 	bl	800023c <__adddf3>
 800d7f4:	46d0      	mov	r8, sl
 800d7f6:	46d9      	mov	r9, fp
 800d7f8:	4682      	mov	sl, r0
 800d7fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d7fe:	2e00      	cmp	r6, #0
 800d800:	d158      	bne.n	800d8b4 <_dtoa_r+0x4e4>
 800d802:	4b7e      	ldr	r3, [pc, #504]	; (800d9fc <_dtoa_r+0x62c>)
 800d804:	2200      	movs	r2, #0
 800d806:	4640      	mov	r0, r8
 800d808:	4649      	mov	r1, r9
 800d80a:	f7f2 fd15 	bl	8000238 <__aeabi_dsub>
 800d80e:	4652      	mov	r2, sl
 800d810:	465b      	mov	r3, fp
 800d812:	4680      	mov	r8, r0
 800d814:	4689      	mov	r9, r1
 800d816:	f7f3 f957 	bl	8000ac8 <__aeabi_dcmpgt>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	f040 8295 	bne.w	800dd4a <_dtoa_r+0x97a>
 800d820:	4652      	mov	r2, sl
 800d822:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d826:	4640      	mov	r0, r8
 800d828:	4649      	mov	r1, r9
 800d82a:	f7f3 f92f 	bl	8000a8c <__aeabi_dcmplt>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f040 8289 	bne.w	800dd46 <_dtoa_r+0x976>
 800d834:	ec5b ab19 	vmov	sl, fp, d9
 800d838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f2c0 8148 	blt.w	800dad0 <_dtoa_r+0x700>
 800d840:	9a00      	ldr	r2, [sp, #0]
 800d842:	2a0e      	cmp	r2, #14
 800d844:	f300 8144 	bgt.w	800dad0 <_dtoa_r+0x700>
 800d848:	4b67      	ldr	r3, [pc, #412]	; (800d9e8 <_dtoa_r+0x618>)
 800d84a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d84e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d854:	2b00      	cmp	r3, #0
 800d856:	f280 80d5 	bge.w	800da04 <_dtoa_r+0x634>
 800d85a:	9b03      	ldr	r3, [sp, #12]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f300 80d1 	bgt.w	800da04 <_dtoa_r+0x634>
 800d862:	f040 826f 	bne.w	800dd44 <_dtoa_r+0x974>
 800d866:	4b65      	ldr	r3, [pc, #404]	; (800d9fc <_dtoa_r+0x62c>)
 800d868:	2200      	movs	r2, #0
 800d86a:	4640      	mov	r0, r8
 800d86c:	4649      	mov	r1, r9
 800d86e:	f7f2 fe9b 	bl	80005a8 <__aeabi_dmul>
 800d872:	4652      	mov	r2, sl
 800d874:	465b      	mov	r3, fp
 800d876:	f7f3 f91d 	bl	8000ab4 <__aeabi_dcmpge>
 800d87a:	9e03      	ldr	r6, [sp, #12]
 800d87c:	4637      	mov	r7, r6
 800d87e:	2800      	cmp	r0, #0
 800d880:	f040 8245 	bne.w	800dd0e <_dtoa_r+0x93e>
 800d884:	9d01      	ldr	r5, [sp, #4]
 800d886:	2331      	movs	r3, #49	; 0x31
 800d888:	f805 3b01 	strb.w	r3, [r5], #1
 800d88c:	9b00      	ldr	r3, [sp, #0]
 800d88e:	3301      	adds	r3, #1
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	e240      	b.n	800dd16 <_dtoa_r+0x946>
 800d894:	07f2      	lsls	r2, r6, #31
 800d896:	d505      	bpl.n	800d8a4 <_dtoa_r+0x4d4>
 800d898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d89c:	f7f2 fe84 	bl	80005a8 <__aeabi_dmul>
 800d8a0:	3501      	adds	r5, #1
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	1076      	asrs	r6, r6, #1
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	e777      	b.n	800d79a <_dtoa_r+0x3ca>
 800d8aa:	2502      	movs	r5, #2
 800d8ac:	e779      	b.n	800d7a2 <_dtoa_r+0x3d2>
 800d8ae:	9f00      	ldr	r7, [sp, #0]
 800d8b0:	9e03      	ldr	r6, [sp, #12]
 800d8b2:	e794      	b.n	800d7de <_dtoa_r+0x40e>
 800d8b4:	9901      	ldr	r1, [sp, #4]
 800d8b6:	4b4c      	ldr	r3, [pc, #304]	; (800d9e8 <_dtoa_r+0x618>)
 800d8b8:	4431      	add	r1, r6
 800d8ba:	910d      	str	r1, [sp, #52]	; 0x34
 800d8bc:	9908      	ldr	r1, [sp, #32]
 800d8be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d8c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8c6:	2900      	cmp	r1, #0
 800d8c8:	d043      	beq.n	800d952 <_dtoa_r+0x582>
 800d8ca:	494d      	ldr	r1, [pc, #308]	; (800da00 <_dtoa_r+0x630>)
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	f7f2 ff95 	bl	80007fc <__aeabi_ddiv>
 800d8d2:	4652      	mov	r2, sl
 800d8d4:	465b      	mov	r3, fp
 800d8d6:	f7f2 fcaf 	bl	8000238 <__aeabi_dsub>
 800d8da:	9d01      	ldr	r5, [sp, #4]
 800d8dc:	4682      	mov	sl, r0
 800d8de:	468b      	mov	fp, r1
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	4640      	mov	r0, r8
 800d8e4:	f7f3 f910 	bl	8000b08 <__aeabi_d2iz>
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	f7f2 fdf3 	bl	80004d4 <__aeabi_i2d>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	4649      	mov	r1, r9
 800d8f6:	f7f2 fc9f 	bl	8000238 <__aeabi_dsub>
 800d8fa:	3630      	adds	r6, #48	; 0x30
 800d8fc:	f805 6b01 	strb.w	r6, [r5], #1
 800d900:	4652      	mov	r2, sl
 800d902:	465b      	mov	r3, fp
 800d904:	4680      	mov	r8, r0
 800d906:	4689      	mov	r9, r1
 800d908:	f7f3 f8c0 	bl	8000a8c <__aeabi_dcmplt>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d163      	bne.n	800d9d8 <_dtoa_r+0x608>
 800d910:	4642      	mov	r2, r8
 800d912:	464b      	mov	r3, r9
 800d914:	4936      	ldr	r1, [pc, #216]	; (800d9f0 <_dtoa_r+0x620>)
 800d916:	2000      	movs	r0, #0
 800d918:	f7f2 fc8e 	bl	8000238 <__aeabi_dsub>
 800d91c:	4652      	mov	r2, sl
 800d91e:	465b      	mov	r3, fp
 800d920:	f7f3 f8b4 	bl	8000a8c <__aeabi_dcmplt>
 800d924:	2800      	cmp	r0, #0
 800d926:	f040 80b5 	bne.w	800da94 <_dtoa_r+0x6c4>
 800d92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d92c:	429d      	cmp	r5, r3
 800d92e:	d081      	beq.n	800d834 <_dtoa_r+0x464>
 800d930:	4b30      	ldr	r3, [pc, #192]	; (800d9f4 <_dtoa_r+0x624>)
 800d932:	2200      	movs	r2, #0
 800d934:	4650      	mov	r0, sl
 800d936:	4659      	mov	r1, fp
 800d938:	f7f2 fe36 	bl	80005a8 <__aeabi_dmul>
 800d93c:	4b2d      	ldr	r3, [pc, #180]	; (800d9f4 <_dtoa_r+0x624>)
 800d93e:	4682      	mov	sl, r0
 800d940:	468b      	mov	fp, r1
 800d942:	4640      	mov	r0, r8
 800d944:	4649      	mov	r1, r9
 800d946:	2200      	movs	r2, #0
 800d948:	f7f2 fe2e 	bl	80005a8 <__aeabi_dmul>
 800d94c:	4680      	mov	r8, r0
 800d94e:	4689      	mov	r9, r1
 800d950:	e7c6      	b.n	800d8e0 <_dtoa_r+0x510>
 800d952:	4650      	mov	r0, sl
 800d954:	4659      	mov	r1, fp
 800d956:	f7f2 fe27 	bl	80005a8 <__aeabi_dmul>
 800d95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d95c:	9d01      	ldr	r5, [sp, #4]
 800d95e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d960:	4682      	mov	sl, r0
 800d962:	468b      	mov	fp, r1
 800d964:	4649      	mov	r1, r9
 800d966:	4640      	mov	r0, r8
 800d968:	f7f3 f8ce 	bl	8000b08 <__aeabi_d2iz>
 800d96c:	4606      	mov	r6, r0
 800d96e:	f7f2 fdb1 	bl	80004d4 <__aeabi_i2d>
 800d972:	3630      	adds	r6, #48	; 0x30
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4640      	mov	r0, r8
 800d97a:	4649      	mov	r1, r9
 800d97c:	f7f2 fc5c 	bl	8000238 <__aeabi_dsub>
 800d980:	f805 6b01 	strb.w	r6, [r5], #1
 800d984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d986:	429d      	cmp	r5, r3
 800d988:	4680      	mov	r8, r0
 800d98a:	4689      	mov	r9, r1
 800d98c:	f04f 0200 	mov.w	r2, #0
 800d990:	d124      	bne.n	800d9dc <_dtoa_r+0x60c>
 800d992:	4b1b      	ldr	r3, [pc, #108]	; (800da00 <_dtoa_r+0x630>)
 800d994:	4650      	mov	r0, sl
 800d996:	4659      	mov	r1, fp
 800d998:	f7f2 fc50 	bl	800023c <__adddf3>
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4640      	mov	r0, r8
 800d9a2:	4649      	mov	r1, r9
 800d9a4:	f7f3 f890 	bl	8000ac8 <__aeabi_dcmpgt>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d173      	bne.n	800da94 <_dtoa_r+0x6c4>
 800d9ac:	4652      	mov	r2, sl
 800d9ae:	465b      	mov	r3, fp
 800d9b0:	4913      	ldr	r1, [pc, #76]	; (800da00 <_dtoa_r+0x630>)
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	f7f2 fc40 	bl	8000238 <__aeabi_dsub>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	4640      	mov	r0, r8
 800d9be:	4649      	mov	r1, r9
 800d9c0:	f7f3 f864 	bl	8000a8c <__aeabi_dcmplt>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	f43f af35 	beq.w	800d834 <_dtoa_r+0x464>
 800d9ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d9cc:	1e6b      	subs	r3, r5, #1
 800d9ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9d4:	2b30      	cmp	r3, #48	; 0x30
 800d9d6:	d0f8      	beq.n	800d9ca <_dtoa_r+0x5fa>
 800d9d8:	9700      	str	r7, [sp, #0]
 800d9da:	e049      	b.n	800da70 <_dtoa_r+0x6a0>
 800d9dc:	4b05      	ldr	r3, [pc, #20]	; (800d9f4 <_dtoa_r+0x624>)
 800d9de:	f7f2 fde3 	bl	80005a8 <__aeabi_dmul>
 800d9e2:	4680      	mov	r8, r0
 800d9e4:	4689      	mov	r9, r1
 800d9e6:	e7bd      	b.n	800d964 <_dtoa_r+0x594>
 800d9e8:	080142c0 	.word	0x080142c0
 800d9ec:	08014298 	.word	0x08014298
 800d9f0:	3ff00000 	.word	0x3ff00000
 800d9f4:	40240000 	.word	0x40240000
 800d9f8:	401c0000 	.word	0x401c0000
 800d9fc:	40140000 	.word	0x40140000
 800da00:	3fe00000 	.word	0x3fe00000
 800da04:	9d01      	ldr	r5, [sp, #4]
 800da06:	4656      	mov	r6, sl
 800da08:	465f      	mov	r7, fp
 800da0a:	4642      	mov	r2, r8
 800da0c:	464b      	mov	r3, r9
 800da0e:	4630      	mov	r0, r6
 800da10:	4639      	mov	r1, r7
 800da12:	f7f2 fef3 	bl	80007fc <__aeabi_ddiv>
 800da16:	f7f3 f877 	bl	8000b08 <__aeabi_d2iz>
 800da1a:	4682      	mov	sl, r0
 800da1c:	f7f2 fd5a 	bl	80004d4 <__aeabi_i2d>
 800da20:	4642      	mov	r2, r8
 800da22:	464b      	mov	r3, r9
 800da24:	f7f2 fdc0 	bl	80005a8 <__aeabi_dmul>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4630      	mov	r0, r6
 800da2e:	4639      	mov	r1, r7
 800da30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800da34:	f7f2 fc00 	bl	8000238 <__aeabi_dsub>
 800da38:	f805 6b01 	strb.w	r6, [r5], #1
 800da3c:	9e01      	ldr	r6, [sp, #4]
 800da3e:	9f03      	ldr	r7, [sp, #12]
 800da40:	1bae      	subs	r6, r5, r6
 800da42:	42b7      	cmp	r7, r6
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	d135      	bne.n	800dab6 <_dtoa_r+0x6e6>
 800da4a:	f7f2 fbf7 	bl	800023c <__adddf3>
 800da4e:	4642      	mov	r2, r8
 800da50:	464b      	mov	r3, r9
 800da52:	4606      	mov	r6, r0
 800da54:	460f      	mov	r7, r1
 800da56:	f7f3 f837 	bl	8000ac8 <__aeabi_dcmpgt>
 800da5a:	b9d0      	cbnz	r0, 800da92 <_dtoa_r+0x6c2>
 800da5c:	4642      	mov	r2, r8
 800da5e:	464b      	mov	r3, r9
 800da60:	4630      	mov	r0, r6
 800da62:	4639      	mov	r1, r7
 800da64:	f7f3 f808 	bl	8000a78 <__aeabi_dcmpeq>
 800da68:	b110      	cbz	r0, 800da70 <_dtoa_r+0x6a0>
 800da6a:	f01a 0f01 	tst.w	sl, #1
 800da6e:	d110      	bne.n	800da92 <_dtoa_r+0x6c2>
 800da70:	4620      	mov	r0, r4
 800da72:	ee18 1a10 	vmov	r1, s16
 800da76:	f000 fb61 	bl	800e13c <_Bfree>
 800da7a:	2300      	movs	r3, #0
 800da7c:	9800      	ldr	r0, [sp, #0]
 800da7e:	702b      	strb	r3, [r5, #0]
 800da80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da82:	3001      	adds	r0, #1
 800da84:	6018      	str	r0, [r3, #0]
 800da86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f43f acf1 	beq.w	800d470 <_dtoa_r+0xa0>
 800da8e:	601d      	str	r5, [r3, #0]
 800da90:	e4ee      	b.n	800d470 <_dtoa_r+0xa0>
 800da92:	9f00      	ldr	r7, [sp, #0]
 800da94:	462b      	mov	r3, r5
 800da96:	461d      	mov	r5, r3
 800da98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da9c:	2a39      	cmp	r2, #57	; 0x39
 800da9e:	d106      	bne.n	800daae <_dtoa_r+0x6de>
 800daa0:	9a01      	ldr	r2, [sp, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d1f7      	bne.n	800da96 <_dtoa_r+0x6c6>
 800daa6:	9901      	ldr	r1, [sp, #4]
 800daa8:	2230      	movs	r2, #48	; 0x30
 800daaa:	3701      	adds	r7, #1
 800daac:	700a      	strb	r2, [r1, #0]
 800daae:	781a      	ldrb	r2, [r3, #0]
 800dab0:	3201      	adds	r2, #1
 800dab2:	701a      	strb	r2, [r3, #0]
 800dab4:	e790      	b.n	800d9d8 <_dtoa_r+0x608>
 800dab6:	4ba6      	ldr	r3, [pc, #664]	; (800dd50 <_dtoa_r+0x980>)
 800dab8:	2200      	movs	r2, #0
 800daba:	f7f2 fd75 	bl	80005a8 <__aeabi_dmul>
 800dabe:	2200      	movs	r2, #0
 800dac0:	2300      	movs	r3, #0
 800dac2:	4606      	mov	r6, r0
 800dac4:	460f      	mov	r7, r1
 800dac6:	f7f2 ffd7 	bl	8000a78 <__aeabi_dcmpeq>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d09d      	beq.n	800da0a <_dtoa_r+0x63a>
 800dace:	e7cf      	b.n	800da70 <_dtoa_r+0x6a0>
 800dad0:	9a08      	ldr	r2, [sp, #32]
 800dad2:	2a00      	cmp	r2, #0
 800dad4:	f000 80d7 	beq.w	800dc86 <_dtoa_r+0x8b6>
 800dad8:	9a06      	ldr	r2, [sp, #24]
 800dada:	2a01      	cmp	r2, #1
 800dadc:	f300 80ba 	bgt.w	800dc54 <_dtoa_r+0x884>
 800dae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dae2:	2a00      	cmp	r2, #0
 800dae4:	f000 80b2 	beq.w	800dc4c <_dtoa_r+0x87c>
 800dae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800daec:	9e07      	ldr	r6, [sp, #28]
 800daee:	9d04      	ldr	r5, [sp, #16]
 800daf0:	9a04      	ldr	r2, [sp, #16]
 800daf2:	441a      	add	r2, r3
 800daf4:	9204      	str	r2, [sp, #16]
 800daf6:	9a05      	ldr	r2, [sp, #20]
 800daf8:	2101      	movs	r1, #1
 800dafa:	441a      	add	r2, r3
 800dafc:	4620      	mov	r0, r4
 800dafe:	9205      	str	r2, [sp, #20]
 800db00:	f000 fbd4 	bl	800e2ac <__i2b>
 800db04:	4607      	mov	r7, r0
 800db06:	2d00      	cmp	r5, #0
 800db08:	dd0c      	ble.n	800db24 <_dtoa_r+0x754>
 800db0a:	9b05      	ldr	r3, [sp, #20]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	dd09      	ble.n	800db24 <_dtoa_r+0x754>
 800db10:	42ab      	cmp	r3, r5
 800db12:	9a04      	ldr	r2, [sp, #16]
 800db14:	bfa8      	it	ge
 800db16:	462b      	movge	r3, r5
 800db18:	1ad2      	subs	r2, r2, r3
 800db1a:	9204      	str	r2, [sp, #16]
 800db1c:	9a05      	ldr	r2, [sp, #20]
 800db1e:	1aed      	subs	r5, r5, r3
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	9305      	str	r3, [sp, #20]
 800db24:	9b07      	ldr	r3, [sp, #28]
 800db26:	b31b      	cbz	r3, 800db70 <_dtoa_r+0x7a0>
 800db28:	9b08      	ldr	r3, [sp, #32]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 80af 	beq.w	800dc8e <_dtoa_r+0x8be>
 800db30:	2e00      	cmp	r6, #0
 800db32:	dd13      	ble.n	800db5c <_dtoa_r+0x78c>
 800db34:	4639      	mov	r1, r7
 800db36:	4632      	mov	r2, r6
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 fc77 	bl	800e42c <__pow5mult>
 800db3e:	ee18 2a10 	vmov	r2, s16
 800db42:	4601      	mov	r1, r0
 800db44:	4607      	mov	r7, r0
 800db46:	4620      	mov	r0, r4
 800db48:	f000 fbc6 	bl	800e2d8 <__multiply>
 800db4c:	ee18 1a10 	vmov	r1, s16
 800db50:	4680      	mov	r8, r0
 800db52:	4620      	mov	r0, r4
 800db54:	f000 faf2 	bl	800e13c <_Bfree>
 800db58:	ee08 8a10 	vmov	s16, r8
 800db5c:	9b07      	ldr	r3, [sp, #28]
 800db5e:	1b9a      	subs	r2, r3, r6
 800db60:	d006      	beq.n	800db70 <_dtoa_r+0x7a0>
 800db62:	ee18 1a10 	vmov	r1, s16
 800db66:	4620      	mov	r0, r4
 800db68:	f000 fc60 	bl	800e42c <__pow5mult>
 800db6c:	ee08 0a10 	vmov	s16, r0
 800db70:	2101      	movs	r1, #1
 800db72:	4620      	mov	r0, r4
 800db74:	f000 fb9a 	bl	800e2ac <__i2b>
 800db78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	4606      	mov	r6, r0
 800db7e:	f340 8088 	ble.w	800dc92 <_dtoa_r+0x8c2>
 800db82:	461a      	mov	r2, r3
 800db84:	4601      	mov	r1, r0
 800db86:	4620      	mov	r0, r4
 800db88:	f000 fc50 	bl	800e42c <__pow5mult>
 800db8c:	9b06      	ldr	r3, [sp, #24]
 800db8e:	2b01      	cmp	r3, #1
 800db90:	4606      	mov	r6, r0
 800db92:	f340 8081 	ble.w	800dc98 <_dtoa_r+0x8c8>
 800db96:	f04f 0800 	mov.w	r8, #0
 800db9a:	6933      	ldr	r3, [r6, #16]
 800db9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dba0:	6918      	ldr	r0, [r3, #16]
 800dba2:	f000 fb33 	bl	800e20c <__hi0bits>
 800dba6:	f1c0 0020 	rsb	r0, r0, #32
 800dbaa:	9b05      	ldr	r3, [sp, #20]
 800dbac:	4418      	add	r0, r3
 800dbae:	f010 001f 	ands.w	r0, r0, #31
 800dbb2:	f000 8092 	beq.w	800dcda <_dtoa_r+0x90a>
 800dbb6:	f1c0 0320 	rsb	r3, r0, #32
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	f340 808a 	ble.w	800dcd4 <_dtoa_r+0x904>
 800dbc0:	f1c0 001c 	rsb	r0, r0, #28
 800dbc4:	9b04      	ldr	r3, [sp, #16]
 800dbc6:	4403      	add	r3, r0
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	9b05      	ldr	r3, [sp, #20]
 800dbcc:	4403      	add	r3, r0
 800dbce:	4405      	add	r5, r0
 800dbd0:	9305      	str	r3, [sp, #20]
 800dbd2:	9b04      	ldr	r3, [sp, #16]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd07      	ble.n	800dbe8 <_dtoa_r+0x818>
 800dbd8:	ee18 1a10 	vmov	r1, s16
 800dbdc:	461a      	mov	r2, r3
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f000 fc7e 	bl	800e4e0 <__lshift>
 800dbe4:	ee08 0a10 	vmov	s16, r0
 800dbe8:	9b05      	ldr	r3, [sp, #20]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	dd05      	ble.n	800dbfa <_dtoa_r+0x82a>
 800dbee:	4631      	mov	r1, r6
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 fc74 	bl	800e4e0 <__lshift>
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d06e      	beq.n	800dcde <_dtoa_r+0x90e>
 800dc00:	ee18 0a10 	vmov	r0, s16
 800dc04:	4631      	mov	r1, r6
 800dc06:	f000 fcdb 	bl	800e5c0 <__mcmp>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	da67      	bge.n	800dcde <_dtoa_r+0x90e>
 800dc0e:	9b00      	ldr	r3, [sp, #0]
 800dc10:	3b01      	subs	r3, #1
 800dc12:	ee18 1a10 	vmov	r1, s16
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	220a      	movs	r2, #10
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f000 faaf 	bl	800e180 <__multadd>
 800dc22:	9b08      	ldr	r3, [sp, #32]
 800dc24:	ee08 0a10 	vmov	s16, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f000 81b1 	beq.w	800df90 <_dtoa_r+0xbc0>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	4639      	mov	r1, r7
 800dc32:	220a      	movs	r2, #10
 800dc34:	4620      	mov	r0, r4
 800dc36:	f000 faa3 	bl	800e180 <__multadd>
 800dc3a:	9b02      	ldr	r3, [sp, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	4607      	mov	r7, r0
 800dc40:	f300 808e 	bgt.w	800dd60 <_dtoa_r+0x990>
 800dc44:	9b06      	ldr	r3, [sp, #24]
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	dc51      	bgt.n	800dcee <_dtoa_r+0x91e>
 800dc4a:	e089      	b.n	800dd60 <_dtoa_r+0x990>
 800dc4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc52:	e74b      	b.n	800daec <_dtoa_r+0x71c>
 800dc54:	9b03      	ldr	r3, [sp, #12]
 800dc56:	1e5e      	subs	r6, r3, #1
 800dc58:	9b07      	ldr	r3, [sp, #28]
 800dc5a:	42b3      	cmp	r3, r6
 800dc5c:	bfbf      	itttt	lt
 800dc5e:	9b07      	ldrlt	r3, [sp, #28]
 800dc60:	9607      	strlt	r6, [sp, #28]
 800dc62:	1af2      	sublt	r2, r6, r3
 800dc64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dc66:	bfb6      	itet	lt
 800dc68:	189b      	addlt	r3, r3, r2
 800dc6a:	1b9e      	subge	r6, r3, r6
 800dc6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dc6e:	9b03      	ldr	r3, [sp, #12]
 800dc70:	bfb8      	it	lt
 800dc72:	2600      	movlt	r6, #0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	bfb7      	itett	lt
 800dc78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dc7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dc80:	1a9d      	sublt	r5, r3, r2
 800dc82:	2300      	movlt	r3, #0
 800dc84:	e734      	b.n	800daf0 <_dtoa_r+0x720>
 800dc86:	9e07      	ldr	r6, [sp, #28]
 800dc88:	9d04      	ldr	r5, [sp, #16]
 800dc8a:	9f08      	ldr	r7, [sp, #32]
 800dc8c:	e73b      	b.n	800db06 <_dtoa_r+0x736>
 800dc8e:	9a07      	ldr	r2, [sp, #28]
 800dc90:	e767      	b.n	800db62 <_dtoa_r+0x792>
 800dc92:	9b06      	ldr	r3, [sp, #24]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	dc18      	bgt.n	800dcca <_dtoa_r+0x8fa>
 800dc98:	f1ba 0f00 	cmp.w	sl, #0
 800dc9c:	d115      	bne.n	800dcca <_dtoa_r+0x8fa>
 800dc9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dca2:	b993      	cbnz	r3, 800dcca <_dtoa_r+0x8fa>
 800dca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dca8:	0d1b      	lsrs	r3, r3, #20
 800dcaa:	051b      	lsls	r3, r3, #20
 800dcac:	b183      	cbz	r3, 800dcd0 <_dtoa_r+0x900>
 800dcae:	9b04      	ldr	r3, [sp, #16]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	9304      	str	r3, [sp, #16]
 800dcb4:	9b05      	ldr	r3, [sp, #20]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	9305      	str	r3, [sp, #20]
 800dcba:	f04f 0801 	mov.w	r8, #1
 800dcbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f47f af6a 	bne.w	800db9a <_dtoa_r+0x7ca>
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	e76f      	b.n	800dbaa <_dtoa_r+0x7da>
 800dcca:	f04f 0800 	mov.w	r8, #0
 800dcce:	e7f6      	b.n	800dcbe <_dtoa_r+0x8ee>
 800dcd0:	4698      	mov	r8, r3
 800dcd2:	e7f4      	b.n	800dcbe <_dtoa_r+0x8ee>
 800dcd4:	f43f af7d 	beq.w	800dbd2 <_dtoa_r+0x802>
 800dcd8:	4618      	mov	r0, r3
 800dcda:	301c      	adds	r0, #28
 800dcdc:	e772      	b.n	800dbc4 <_dtoa_r+0x7f4>
 800dcde:	9b03      	ldr	r3, [sp, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	dc37      	bgt.n	800dd54 <_dtoa_r+0x984>
 800dce4:	9b06      	ldr	r3, [sp, #24]
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	dd34      	ble.n	800dd54 <_dtoa_r+0x984>
 800dcea:	9b03      	ldr	r3, [sp, #12]
 800dcec:	9302      	str	r3, [sp, #8]
 800dcee:	9b02      	ldr	r3, [sp, #8]
 800dcf0:	b96b      	cbnz	r3, 800dd0e <_dtoa_r+0x93e>
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	2205      	movs	r2, #5
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f000 fa42 	bl	800e180 <__multadd>
 800dcfc:	4601      	mov	r1, r0
 800dcfe:	4606      	mov	r6, r0
 800dd00:	ee18 0a10 	vmov	r0, s16
 800dd04:	f000 fc5c 	bl	800e5c0 <__mcmp>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	f73f adbb 	bgt.w	800d884 <_dtoa_r+0x4b4>
 800dd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd10:	9d01      	ldr	r5, [sp, #4]
 800dd12:	43db      	mvns	r3, r3
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	f04f 0800 	mov.w	r8, #0
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f000 fa0d 	bl	800e13c <_Bfree>
 800dd22:	2f00      	cmp	r7, #0
 800dd24:	f43f aea4 	beq.w	800da70 <_dtoa_r+0x6a0>
 800dd28:	f1b8 0f00 	cmp.w	r8, #0
 800dd2c:	d005      	beq.n	800dd3a <_dtoa_r+0x96a>
 800dd2e:	45b8      	cmp	r8, r7
 800dd30:	d003      	beq.n	800dd3a <_dtoa_r+0x96a>
 800dd32:	4641      	mov	r1, r8
 800dd34:	4620      	mov	r0, r4
 800dd36:	f000 fa01 	bl	800e13c <_Bfree>
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f000 f9fd 	bl	800e13c <_Bfree>
 800dd42:	e695      	b.n	800da70 <_dtoa_r+0x6a0>
 800dd44:	2600      	movs	r6, #0
 800dd46:	4637      	mov	r7, r6
 800dd48:	e7e1      	b.n	800dd0e <_dtoa_r+0x93e>
 800dd4a:	9700      	str	r7, [sp, #0]
 800dd4c:	4637      	mov	r7, r6
 800dd4e:	e599      	b.n	800d884 <_dtoa_r+0x4b4>
 800dd50:	40240000 	.word	0x40240000
 800dd54:	9b08      	ldr	r3, [sp, #32]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 80ca 	beq.w	800def0 <_dtoa_r+0xb20>
 800dd5c:	9b03      	ldr	r3, [sp, #12]
 800dd5e:	9302      	str	r3, [sp, #8]
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	dd05      	ble.n	800dd70 <_dtoa_r+0x9a0>
 800dd64:	4639      	mov	r1, r7
 800dd66:	462a      	mov	r2, r5
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f000 fbb9 	bl	800e4e0 <__lshift>
 800dd6e:	4607      	mov	r7, r0
 800dd70:	f1b8 0f00 	cmp.w	r8, #0
 800dd74:	d05b      	beq.n	800de2e <_dtoa_r+0xa5e>
 800dd76:	6879      	ldr	r1, [r7, #4]
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f000 f99f 	bl	800e0bc <_Balloc>
 800dd7e:	4605      	mov	r5, r0
 800dd80:	b928      	cbnz	r0, 800dd8e <_dtoa_r+0x9be>
 800dd82:	4b87      	ldr	r3, [pc, #540]	; (800dfa0 <_dtoa_r+0xbd0>)
 800dd84:	4602      	mov	r2, r0
 800dd86:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd8a:	f7ff bb3b 	b.w	800d404 <_dtoa_r+0x34>
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	3202      	adds	r2, #2
 800dd92:	0092      	lsls	r2, r2, #2
 800dd94:	f107 010c 	add.w	r1, r7, #12
 800dd98:	300c      	adds	r0, #12
 800dd9a:	f7fe faf5 	bl	800c388 <memcpy>
 800dd9e:	2201      	movs	r2, #1
 800dda0:	4629      	mov	r1, r5
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 fb9c 	bl	800e4e0 <__lshift>
 800dda8:	9b01      	ldr	r3, [sp, #4]
 800ddaa:	f103 0901 	add.w	r9, r3, #1
 800ddae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	9305      	str	r3, [sp, #20]
 800ddb6:	f00a 0301 	and.w	r3, sl, #1
 800ddba:	46b8      	mov	r8, r7
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	4607      	mov	r7, r0
 800ddc0:	4631      	mov	r1, r6
 800ddc2:	ee18 0a10 	vmov	r0, s16
 800ddc6:	f7ff fa75 	bl	800d2b4 <quorem>
 800ddca:	4641      	mov	r1, r8
 800ddcc:	9002      	str	r0, [sp, #8]
 800ddce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ddd2:	ee18 0a10 	vmov	r0, s16
 800ddd6:	f000 fbf3 	bl	800e5c0 <__mcmp>
 800ddda:	463a      	mov	r2, r7
 800dddc:	9003      	str	r0, [sp, #12]
 800ddde:	4631      	mov	r1, r6
 800dde0:	4620      	mov	r0, r4
 800dde2:	f000 fc09 	bl	800e5f8 <__mdiff>
 800dde6:	68c2      	ldr	r2, [r0, #12]
 800dde8:	f109 3bff 	add.w	fp, r9, #4294967295
 800ddec:	4605      	mov	r5, r0
 800ddee:	bb02      	cbnz	r2, 800de32 <_dtoa_r+0xa62>
 800ddf0:	4601      	mov	r1, r0
 800ddf2:	ee18 0a10 	vmov	r0, s16
 800ddf6:	f000 fbe3 	bl	800e5c0 <__mcmp>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	4620      	mov	r0, r4
 800de00:	9207      	str	r2, [sp, #28]
 800de02:	f000 f99b 	bl	800e13c <_Bfree>
 800de06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800de0a:	ea43 0102 	orr.w	r1, r3, r2
 800de0e:	9b04      	ldr	r3, [sp, #16]
 800de10:	430b      	orrs	r3, r1
 800de12:	464d      	mov	r5, r9
 800de14:	d10f      	bne.n	800de36 <_dtoa_r+0xa66>
 800de16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de1a:	d02a      	beq.n	800de72 <_dtoa_r+0xaa2>
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	dd02      	ble.n	800de28 <_dtoa_r+0xa58>
 800de22:	9b02      	ldr	r3, [sp, #8]
 800de24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800de28:	f88b a000 	strb.w	sl, [fp]
 800de2c:	e775      	b.n	800dd1a <_dtoa_r+0x94a>
 800de2e:	4638      	mov	r0, r7
 800de30:	e7ba      	b.n	800dda8 <_dtoa_r+0x9d8>
 800de32:	2201      	movs	r2, #1
 800de34:	e7e2      	b.n	800ddfc <_dtoa_r+0xa2c>
 800de36:	9b03      	ldr	r3, [sp, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	db04      	blt.n	800de46 <_dtoa_r+0xa76>
 800de3c:	9906      	ldr	r1, [sp, #24]
 800de3e:	430b      	orrs	r3, r1
 800de40:	9904      	ldr	r1, [sp, #16]
 800de42:	430b      	orrs	r3, r1
 800de44:	d122      	bne.n	800de8c <_dtoa_r+0xabc>
 800de46:	2a00      	cmp	r2, #0
 800de48:	ddee      	ble.n	800de28 <_dtoa_r+0xa58>
 800de4a:	ee18 1a10 	vmov	r1, s16
 800de4e:	2201      	movs	r2, #1
 800de50:	4620      	mov	r0, r4
 800de52:	f000 fb45 	bl	800e4e0 <__lshift>
 800de56:	4631      	mov	r1, r6
 800de58:	ee08 0a10 	vmov	s16, r0
 800de5c:	f000 fbb0 	bl	800e5c0 <__mcmp>
 800de60:	2800      	cmp	r0, #0
 800de62:	dc03      	bgt.n	800de6c <_dtoa_r+0xa9c>
 800de64:	d1e0      	bne.n	800de28 <_dtoa_r+0xa58>
 800de66:	f01a 0f01 	tst.w	sl, #1
 800de6a:	d0dd      	beq.n	800de28 <_dtoa_r+0xa58>
 800de6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de70:	d1d7      	bne.n	800de22 <_dtoa_r+0xa52>
 800de72:	2339      	movs	r3, #57	; 0x39
 800de74:	f88b 3000 	strb.w	r3, [fp]
 800de78:	462b      	mov	r3, r5
 800de7a:	461d      	mov	r5, r3
 800de7c:	3b01      	subs	r3, #1
 800de7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de82:	2a39      	cmp	r2, #57	; 0x39
 800de84:	d071      	beq.n	800df6a <_dtoa_r+0xb9a>
 800de86:	3201      	adds	r2, #1
 800de88:	701a      	strb	r2, [r3, #0]
 800de8a:	e746      	b.n	800dd1a <_dtoa_r+0x94a>
 800de8c:	2a00      	cmp	r2, #0
 800de8e:	dd07      	ble.n	800dea0 <_dtoa_r+0xad0>
 800de90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de94:	d0ed      	beq.n	800de72 <_dtoa_r+0xaa2>
 800de96:	f10a 0301 	add.w	r3, sl, #1
 800de9a:	f88b 3000 	strb.w	r3, [fp]
 800de9e:	e73c      	b.n	800dd1a <_dtoa_r+0x94a>
 800dea0:	9b05      	ldr	r3, [sp, #20]
 800dea2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dea6:	4599      	cmp	r9, r3
 800dea8:	d047      	beq.n	800df3a <_dtoa_r+0xb6a>
 800deaa:	ee18 1a10 	vmov	r1, s16
 800deae:	2300      	movs	r3, #0
 800deb0:	220a      	movs	r2, #10
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 f964 	bl	800e180 <__multadd>
 800deb8:	45b8      	cmp	r8, r7
 800deba:	ee08 0a10 	vmov	s16, r0
 800debe:	f04f 0300 	mov.w	r3, #0
 800dec2:	f04f 020a 	mov.w	r2, #10
 800dec6:	4641      	mov	r1, r8
 800dec8:	4620      	mov	r0, r4
 800deca:	d106      	bne.n	800deda <_dtoa_r+0xb0a>
 800decc:	f000 f958 	bl	800e180 <__multadd>
 800ded0:	4680      	mov	r8, r0
 800ded2:	4607      	mov	r7, r0
 800ded4:	f109 0901 	add.w	r9, r9, #1
 800ded8:	e772      	b.n	800ddc0 <_dtoa_r+0x9f0>
 800deda:	f000 f951 	bl	800e180 <__multadd>
 800dede:	4639      	mov	r1, r7
 800dee0:	4680      	mov	r8, r0
 800dee2:	2300      	movs	r3, #0
 800dee4:	220a      	movs	r2, #10
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 f94a 	bl	800e180 <__multadd>
 800deec:	4607      	mov	r7, r0
 800deee:	e7f1      	b.n	800ded4 <_dtoa_r+0xb04>
 800def0:	9b03      	ldr	r3, [sp, #12]
 800def2:	9302      	str	r3, [sp, #8]
 800def4:	9d01      	ldr	r5, [sp, #4]
 800def6:	ee18 0a10 	vmov	r0, s16
 800defa:	4631      	mov	r1, r6
 800defc:	f7ff f9da 	bl	800d2b4 <quorem>
 800df00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df04:	9b01      	ldr	r3, [sp, #4]
 800df06:	f805 ab01 	strb.w	sl, [r5], #1
 800df0a:	1aea      	subs	r2, r5, r3
 800df0c:	9b02      	ldr	r3, [sp, #8]
 800df0e:	4293      	cmp	r3, r2
 800df10:	dd09      	ble.n	800df26 <_dtoa_r+0xb56>
 800df12:	ee18 1a10 	vmov	r1, s16
 800df16:	2300      	movs	r3, #0
 800df18:	220a      	movs	r2, #10
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 f930 	bl	800e180 <__multadd>
 800df20:	ee08 0a10 	vmov	s16, r0
 800df24:	e7e7      	b.n	800def6 <_dtoa_r+0xb26>
 800df26:	9b02      	ldr	r3, [sp, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	bfc8      	it	gt
 800df2c:	461d      	movgt	r5, r3
 800df2e:	9b01      	ldr	r3, [sp, #4]
 800df30:	bfd8      	it	le
 800df32:	2501      	movle	r5, #1
 800df34:	441d      	add	r5, r3
 800df36:	f04f 0800 	mov.w	r8, #0
 800df3a:	ee18 1a10 	vmov	r1, s16
 800df3e:	2201      	movs	r2, #1
 800df40:	4620      	mov	r0, r4
 800df42:	f000 facd 	bl	800e4e0 <__lshift>
 800df46:	4631      	mov	r1, r6
 800df48:	ee08 0a10 	vmov	s16, r0
 800df4c:	f000 fb38 	bl	800e5c0 <__mcmp>
 800df50:	2800      	cmp	r0, #0
 800df52:	dc91      	bgt.n	800de78 <_dtoa_r+0xaa8>
 800df54:	d102      	bne.n	800df5c <_dtoa_r+0xb8c>
 800df56:	f01a 0f01 	tst.w	sl, #1
 800df5a:	d18d      	bne.n	800de78 <_dtoa_r+0xaa8>
 800df5c:	462b      	mov	r3, r5
 800df5e:	461d      	mov	r5, r3
 800df60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df64:	2a30      	cmp	r2, #48	; 0x30
 800df66:	d0fa      	beq.n	800df5e <_dtoa_r+0xb8e>
 800df68:	e6d7      	b.n	800dd1a <_dtoa_r+0x94a>
 800df6a:	9a01      	ldr	r2, [sp, #4]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d184      	bne.n	800de7a <_dtoa_r+0xaaa>
 800df70:	9b00      	ldr	r3, [sp, #0]
 800df72:	3301      	adds	r3, #1
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	2331      	movs	r3, #49	; 0x31
 800df78:	7013      	strb	r3, [r2, #0]
 800df7a:	e6ce      	b.n	800dd1a <_dtoa_r+0x94a>
 800df7c:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <_dtoa_r+0xbd4>)
 800df7e:	f7ff ba95 	b.w	800d4ac <_dtoa_r+0xdc>
 800df82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df84:	2b00      	cmp	r3, #0
 800df86:	f47f aa6e 	bne.w	800d466 <_dtoa_r+0x96>
 800df8a:	4b07      	ldr	r3, [pc, #28]	; (800dfa8 <_dtoa_r+0xbd8>)
 800df8c:	f7ff ba8e 	b.w	800d4ac <_dtoa_r+0xdc>
 800df90:	9b02      	ldr	r3, [sp, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	dcae      	bgt.n	800def4 <_dtoa_r+0xb24>
 800df96:	9b06      	ldr	r3, [sp, #24]
 800df98:	2b02      	cmp	r3, #2
 800df9a:	f73f aea8 	bgt.w	800dcee <_dtoa_r+0x91e>
 800df9e:	e7a9      	b.n	800def4 <_dtoa_r+0xb24>
 800dfa0:	0801422b 	.word	0x0801422b
 800dfa4:	08014188 	.word	0x08014188
 800dfa8:	080141ac 	.word	0x080141ac

0800dfac <_localeconv_r>:
 800dfac:	4800      	ldr	r0, [pc, #0]	; (800dfb0 <_localeconv_r+0x4>)
 800dfae:	4770      	bx	lr
 800dfb0:	20000288 	.word	0x20000288

0800dfb4 <_lseek_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4d07      	ldr	r5, [pc, #28]	; (800dfd4 <_lseek_r+0x20>)
 800dfb8:	4604      	mov	r4, r0
 800dfba:	4608      	mov	r0, r1
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	602a      	str	r2, [r5, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	f7f3 fe50 	bl	8001c68 <_lseek>
 800dfc8:	1c43      	adds	r3, r0, #1
 800dfca:	d102      	bne.n	800dfd2 <_lseek_r+0x1e>
 800dfcc:	682b      	ldr	r3, [r5, #0]
 800dfce:	b103      	cbz	r3, 800dfd2 <_lseek_r+0x1e>
 800dfd0:	6023      	str	r3, [r4, #0]
 800dfd2:	bd38      	pop	{r3, r4, r5, pc}
 800dfd4:	200007e8 	.word	0x200007e8

0800dfd8 <__swhatbuf_r>:
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	460e      	mov	r6, r1
 800dfdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe0:	2900      	cmp	r1, #0
 800dfe2:	b096      	sub	sp, #88	; 0x58
 800dfe4:	4614      	mov	r4, r2
 800dfe6:	461d      	mov	r5, r3
 800dfe8:	da08      	bge.n	800dffc <__swhatbuf_r+0x24>
 800dfea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dfee:	2200      	movs	r2, #0
 800dff0:	602a      	str	r2, [r5, #0]
 800dff2:	061a      	lsls	r2, r3, #24
 800dff4:	d410      	bmi.n	800e018 <__swhatbuf_r+0x40>
 800dff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dffa:	e00e      	b.n	800e01a <__swhatbuf_r+0x42>
 800dffc:	466a      	mov	r2, sp
 800dffe:	f000 feef 	bl	800ede0 <_fstat_r>
 800e002:	2800      	cmp	r0, #0
 800e004:	dbf1      	blt.n	800dfea <__swhatbuf_r+0x12>
 800e006:	9a01      	ldr	r2, [sp, #4]
 800e008:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e00c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e010:	425a      	negs	r2, r3
 800e012:	415a      	adcs	r2, r3
 800e014:	602a      	str	r2, [r5, #0]
 800e016:	e7ee      	b.n	800dff6 <__swhatbuf_r+0x1e>
 800e018:	2340      	movs	r3, #64	; 0x40
 800e01a:	2000      	movs	r0, #0
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	b016      	add	sp, #88	; 0x58
 800e020:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e024 <__smakebuf_r>:
 800e024:	898b      	ldrh	r3, [r1, #12]
 800e026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e028:	079d      	lsls	r5, r3, #30
 800e02a:	4606      	mov	r6, r0
 800e02c:	460c      	mov	r4, r1
 800e02e:	d507      	bpl.n	800e040 <__smakebuf_r+0x1c>
 800e030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	6123      	str	r3, [r4, #16]
 800e038:	2301      	movs	r3, #1
 800e03a:	6163      	str	r3, [r4, #20]
 800e03c:	b002      	add	sp, #8
 800e03e:	bd70      	pop	{r4, r5, r6, pc}
 800e040:	ab01      	add	r3, sp, #4
 800e042:	466a      	mov	r2, sp
 800e044:	f7ff ffc8 	bl	800dfd8 <__swhatbuf_r>
 800e048:	9900      	ldr	r1, [sp, #0]
 800e04a:	4605      	mov	r5, r0
 800e04c:	4630      	mov	r0, r6
 800e04e:	f7fe fa37 	bl	800c4c0 <_malloc_r>
 800e052:	b948      	cbnz	r0, 800e068 <__smakebuf_r+0x44>
 800e054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e058:	059a      	lsls	r2, r3, #22
 800e05a:	d4ef      	bmi.n	800e03c <__smakebuf_r+0x18>
 800e05c:	f023 0303 	bic.w	r3, r3, #3
 800e060:	f043 0302 	orr.w	r3, r3, #2
 800e064:	81a3      	strh	r3, [r4, #12]
 800e066:	e7e3      	b.n	800e030 <__smakebuf_r+0xc>
 800e068:	4b0d      	ldr	r3, [pc, #52]	; (800e0a0 <__smakebuf_r+0x7c>)
 800e06a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	6020      	str	r0, [r4, #0]
 800e070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e074:	81a3      	strh	r3, [r4, #12]
 800e076:	9b00      	ldr	r3, [sp, #0]
 800e078:	6163      	str	r3, [r4, #20]
 800e07a:	9b01      	ldr	r3, [sp, #4]
 800e07c:	6120      	str	r0, [r4, #16]
 800e07e:	b15b      	cbz	r3, 800e098 <__smakebuf_r+0x74>
 800e080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e084:	4630      	mov	r0, r6
 800e086:	f000 febd 	bl	800ee04 <_isatty_r>
 800e08a:	b128      	cbz	r0, 800e098 <__smakebuf_r+0x74>
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	f023 0303 	bic.w	r3, r3, #3
 800e092:	f043 0301 	orr.w	r3, r3, #1
 800e096:	81a3      	strh	r3, [r4, #12]
 800e098:	89a0      	ldrh	r0, [r4, #12]
 800e09a:	4305      	orrs	r5, r0
 800e09c:	81a5      	strh	r5, [r4, #12]
 800e09e:	e7cd      	b.n	800e03c <__smakebuf_r+0x18>
 800e0a0:	0800c175 	.word	0x0800c175

0800e0a4 <__malloc_lock>:
 800e0a4:	4801      	ldr	r0, [pc, #4]	; (800e0ac <__malloc_lock+0x8>)
 800e0a6:	f7fe b95c 	b.w	800c362 <__retarget_lock_acquire_recursive>
 800e0aa:	bf00      	nop
 800e0ac:	200007dc 	.word	0x200007dc

0800e0b0 <__malloc_unlock>:
 800e0b0:	4801      	ldr	r0, [pc, #4]	; (800e0b8 <__malloc_unlock+0x8>)
 800e0b2:	f7fe b957 	b.w	800c364 <__retarget_lock_release_recursive>
 800e0b6:	bf00      	nop
 800e0b8:	200007dc 	.word	0x200007dc

0800e0bc <_Balloc>:
 800e0bc:	b570      	push	{r4, r5, r6, lr}
 800e0be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	460d      	mov	r5, r1
 800e0c4:	b976      	cbnz	r6, 800e0e4 <_Balloc+0x28>
 800e0c6:	2010      	movs	r0, #16
 800e0c8:	f7fe f94e 	bl	800c368 <malloc>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	6260      	str	r0, [r4, #36]	; 0x24
 800e0d0:	b920      	cbnz	r0, 800e0dc <_Balloc+0x20>
 800e0d2:	4b18      	ldr	r3, [pc, #96]	; (800e134 <_Balloc+0x78>)
 800e0d4:	4818      	ldr	r0, [pc, #96]	; (800e138 <_Balloc+0x7c>)
 800e0d6:	2166      	movs	r1, #102	; 0x66
 800e0d8:	f000 fe52 	bl	800ed80 <__assert_func>
 800e0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0e0:	6006      	str	r6, [r0, #0]
 800e0e2:	60c6      	str	r6, [r0, #12]
 800e0e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0e6:	68f3      	ldr	r3, [r6, #12]
 800e0e8:	b183      	cbz	r3, 800e10c <_Balloc+0x50>
 800e0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0f2:	b9b8      	cbnz	r0, 800e124 <_Balloc+0x68>
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	fa01 f605 	lsl.w	r6, r1, r5
 800e0fa:	1d72      	adds	r2, r6, #5
 800e0fc:	0092      	lsls	r2, r2, #2
 800e0fe:	4620      	mov	r0, r4
 800e100:	f000 fb60 	bl	800e7c4 <_calloc_r>
 800e104:	b160      	cbz	r0, 800e120 <_Balloc+0x64>
 800e106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e10a:	e00e      	b.n	800e12a <_Balloc+0x6e>
 800e10c:	2221      	movs	r2, #33	; 0x21
 800e10e:	2104      	movs	r1, #4
 800e110:	4620      	mov	r0, r4
 800e112:	f000 fb57 	bl	800e7c4 <_calloc_r>
 800e116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e118:	60f0      	str	r0, [r6, #12]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1e4      	bne.n	800e0ea <_Balloc+0x2e>
 800e120:	2000      	movs	r0, #0
 800e122:	bd70      	pop	{r4, r5, r6, pc}
 800e124:	6802      	ldr	r2, [r0, #0]
 800e126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e12a:	2300      	movs	r3, #0
 800e12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e130:	e7f7      	b.n	800e122 <_Balloc+0x66>
 800e132:	bf00      	nop
 800e134:	080141b9 	.word	0x080141b9
 800e138:	0801423c 	.word	0x0801423c

0800e13c <_Bfree>:
 800e13c:	b570      	push	{r4, r5, r6, lr}
 800e13e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e140:	4605      	mov	r5, r0
 800e142:	460c      	mov	r4, r1
 800e144:	b976      	cbnz	r6, 800e164 <_Bfree+0x28>
 800e146:	2010      	movs	r0, #16
 800e148:	f7fe f90e 	bl	800c368 <malloc>
 800e14c:	4602      	mov	r2, r0
 800e14e:	6268      	str	r0, [r5, #36]	; 0x24
 800e150:	b920      	cbnz	r0, 800e15c <_Bfree+0x20>
 800e152:	4b09      	ldr	r3, [pc, #36]	; (800e178 <_Bfree+0x3c>)
 800e154:	4809      	ldr	r0, [pc, #36]	; (800e17c <_Bfree+0x40>)
 800e156:	218a      	movs	r1, #138	; 0x8a
 800e158:	f000 fe12 	bl	800ed80 <__assert_func>
 800e15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e160:	6006      	str	r6, [r0, #0]
 800e162:	60c6      	str	r6, [r0, #12]
 800e164:	b13c      	cbz	r4, 800e176 <_Bfree+0x3a>
 800e166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e168:	6862      	ldr	r2, [r4, #4]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e170:	6021      	str	r1, [r4, #0]
 800e172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e176:	bd70      	pop	{r4, r5, r6, pc}
 800e178:	080141b9 	.word	0x080141b9
 800e17c:	0801423c 	.word	0x0801423c

0800e180 <__multadd>:
 800e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e184:	690d      	ldr	r5, [r1, #16]
 800e186:	4607      	mov	r7, r0
 800e188:	460c      	mov	r4, r1
 800e18a:	461e      	mov	r6, r3
 800e18c:	f101 0c14 	add.w	ip, r1, #20
 800e190:	2000      	movs	r0, #0
 800e192:	f8dc 3000 	ldr.w	r3, [ip]
 800e196:	b299      	uxth	r1, r3
 800e198:	fb02 6101 	mla	r1, r2, r1, r6
 800e19c:	0c1e      	lsrs	r6, r3, #16
 800e19e:	0c0b      	lsrs	r3, r1, #16
 800e1a0:	fb02 3306 	mla	r3, r2, r6, r3
 800e1a4:	b289      	uxth	r1, r1
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1ac:	4285      	cmp	r5, r0
 800e1ae:	f84c 1b04 	str.w	r1, [ip], #4
 800e1b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1b6:	dcec      	bgt.n	800e192 <__multadd+0x12>
 800e1b8:	b30e      	cbz	r6, 800e1fe <__multadd+0x7e>
 800e1ba:	68a3      	ldr	r3, [r4, #8]
 800e1bc:	42ab      	cmp	r3, r5
 800e1be:	dc19      	bgt.n	800e1f4 <__multadd+0x74>
 800e1c0:	6861      	ldr	r1, [r4, #4]
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	3101      	adds	r1, #1
 800e1c6:	f7ff ff79 	bl	800e0bc <_Balloc>
 800e1ca:	4680      	mov	r8, r0
 800e1cc:	b928      	cbnz	r0, 800e1da <__multadd+0x5a>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	4b0c      	ldr	r3, [pc, #48]	; (800e204 <__multadd+0x84>)
 800e1d2:	480d      	ldr	r0, [pc, #52]	; (800e208 <__multadd+0x88>)
 800e1d4:	21b5      	movs	r1, #181	; 0xb5
 800e1d6:	f000 fdd3 	bl	800ed80 <__assert_func>
 800e1da:	6922      	ldr	r2, [r4, #16]
 800e1dc:	3202      	adds	r2, #2
 800e1de:	f104 010c 	add.w	r1, r4, #12
 800e1e2:	0092      	lsls	r2, r2, #2
 800e1e4:	300c      	adds	r0, #12
 800e1e6:	f7fe f8cf 	bl	800c388 <memcpy>
 800e1ea:	4621      	mov	r1, r4
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	f7ff ffa5 	bl	800e13c <_Bfree>
 800e1f2:	4644      	mov	r4, r8
 800e1f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1f8:	3501      	adds	r5, #1
 800e1fa:	615e      	str	r6, [r3, #20]
 800e1fc:	6125      	str	r5, [r4, #16]
 800e1fe:	4620      	mov	r0, r4
 800e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e204:	0801422b 	.word	0x0801422b
 800e208:	0801423c 	.word	0x0801423c

0800e20c <__hi0bits>:
 800e20c:	0c03      	lsrs	r3, r0, #16
 800e20e:	041b      	lsls	r3, r3, #16
 800e210:	b9d3      	cbnz	r3, 800e248 <__hi0bits+0x3c>
 800e212:	0400      	lsls	r0, r0, #16
 800e214:	2310      	movs	r3, #16
 800e216:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e21a:	bf04      	itt	eq
 800e21c:	0200      	lsleq	r0, r0, #8
 800e21e:	3308      	addeq	r3, #8
 800e220:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e224:	bf04      	itt	eq
 800e226:	0100      	lsleq	r0, r0, #4
 800e228:	3304      	addeq	r3, #4
 800e22a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e22e:	bf04      	itt	eq
 800e230:	0080      	lsleq	r0, r0, #2
 800e232:	3302      	addeq	r3, #2
 800e234:	2800      	cmp	r0, #0
 800e236:	db05      	blt.n	800e244 <__hi0bits+0x38>
 800e238:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e23c:	f103 0301 	add.w	r3, r3, #1
 800e240:	bf08      	it	eq
 800e242:	2320      	moveq	r3, #32
 800e244:	4618      	mov	r0, r3
 800e246:	4770      	bx	lr
 800e248:	2300      	movs	r3, #0
 800e24a:	e7e4      	b.n	800e216 <__hi0bits+0xa>

0800e24c <__lo0bits>:
 800e24c:	6803      	ldr	r3, [r0, #0]
 800e24e:	f013 0207 	ands.w	r2, r3, #7
 800e252:	4601      	mov	r1, r0
 800e254:	d00b      	beq.n	800e26e <__lo0bits+0x22>
 800e256:	07da      	lsls	r2, r3, #31
 800e258:	d423      	bmi.n	800e2a2 <__lo0bits+0x56>
 800e25a:	0798      	lsls	r0, r3, #30
 800e25c:	bf49      	itett	mi
 800e25e:	085b      	lsrmi	r3, r3, #1
 800e260:	089b      	lsrpl	r3, r3, #2
 800e262:	2001      	movmi	r0, #1
 800e264:	600b      	strmi	r3, [r1, #0]
 800e266:	bf5c      	itt	pl
 800e268:	600b      	strpl	r3, [r1, #0]
 800e26a:	2002      	movpl	r0, #2
 800e26c:	4770      	bx	lr
 800e26e:	b298      	uxth	r0, r3
 800e270:	b9a8      	cbnz	r0, 800e29e <__lo0bits+0x52>
 800e272:	0c1b      	lsrs	r3, r3, #16
 800e274:	2010      	movs	r0, #16
 800e276:	b2da      	uxtb	r2, r3
 800e278:	b90a      	cbnz	r2, 800e27e <__lo0bits+0x32>
 800e27a:	3008      	adds	r0, #8
 800e27c:	0a1b      	lsrs	r3, r3, #8
 800e27e:	071a      	lsls	r2, r3, #28
 800e280:	bf04      	itt	eq
 800e282:	091b      	lsreq	r3, r3, #4
 800e284:	3004      	addeq	r0, #4
 800e286:	079a      	lsls	r2, r3, #30
 800e288:	bf04      	itt	eq
 800e28a:	089b      	lsreq	r3, r3, #2
 800e28c:	3002      	addeq	r0, #2
 800e28e:	07da      	lsls	r2, r3, #31
 800e290:	d403      	bmi.n	800e29a <__lo0bits+0x4e>
 800e292:	085b      	lsrs	r3, r3, #1
 800e294:	f100 0001 	add.w	r0, r0, #1
 800e298:	d005      	beq.n	800e2a6 <__lo0bits+0x5a>
 800e29a:	600b      	str	r3, [r1, #0]
 800e29c:	4770      	bx	lr
 800e29e:	4610      	mov	r0, r2
 800e2a0:	e7e9      	b.n	800e276 <__lo0bits+0x2a>
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	4770      	bx	lr
 800e2a6:	2020      	movs	r0, #32
 800e2a8:	4770      	bx	lr
	...

0800e2ac <__i2b>:
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	460c      	mov	r4, r1
 800e2b0:	2101      	movs	r1, #1
 800e2b2:	f7ff ff03 	bl	800e0bc <_Balloc>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	b928      	cbnz	r0, 800e2c6 <__i2b+0x1a>
 800e2ba:	4b05      	ldr	r3, [pc, #20]	; (800e2d0 <__i2b+0x24>)
 800e2bc:	4805      	ldr	r0, [pc, #20]	; (800e2d4 <__i2b+0x28>)
 800e2be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2c2:	f000 fd5d 	bl	800ed80 <__assert_func>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	6144      	str	r4, [r0, #20]
 800e2ca:	6103      	str	r3, [r0, #16]
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	bf00      	nop
 800e2d0:	0801422b 	.word	0x0801422b
 800e2d4:	0801423c 	.word	0x0801423c

0800e2d8 <__multiply>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	4691      	mov	r9, r2
 800e2de:	690a      	ldr	r2, [r1, #16]
 800e2e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	bfb8      	it	lt
 800e2e8:	460b      	movlt	r3, r1
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	bfbc      	itt	lt
 800e2ee:	464c      	movlt	r4, r9
 800e2f0:	4699      	movlt	r9, r3
 800e2f2:	6927      	ldr	r7, [r4, #16]
 800e2f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2f8:	68a3      	ldr	r3, [r4, #8]
 800e2fa:	6861      	ldr	r1, [r4, #4]
 800e2fc:	eb07 060a 	add.w	r6, r7, sl
 800e300:	42b3      	cmp	r3, r6
 800e302:	b085      	sub	sp, #20
 800e304:	bfb8      	it	lt
 800e306:	3101      	addlt	r1, #1
 800e308:	f7ff fed8 	bl	800e0bc <_Balloc>
 800e30c:	b930      	cbnz	r0, 800e31c <__multiply+0x44>
 800e30e:	4602      	mov	r2, r0
 800e310:	4b44      	ldr	r3, [pc, #272]	; (800e424 <__multiply+0x14c>)
 800e312:	4845      	ldr	r0, [pc, #276]	; (800e428 <__multiply+0x150>)
 800e314:	f240 115d 	movw	r1, #349	; 0x15d
 800e318:	f000 fd32 	bl	800ed80 <__assert_func>
 800e31c:	f100 0514 	add.w	r5, r0, #20
 800e320:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e324:	462b      	mov	r3, r5
 800e326:	2200      	movs	r2, #0
 800e328:	4543      	cmp	r3, r8
 800e32a:	d321      	bcc.n	800e370 <__multiply+0x98>
 800e32c:	f104 0314 	add.w	r3, r4, #20
 800e330:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e334:	f109 0314 	add.w	r3, r9, #20
 800e338:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e33c:	9202      	str	r2, [sp, #8]
 800e33e:	1b3a      	subs	r2, r7, r4
 800e340:	3a15      	subs	r2, #21
 800e342:	f022 0203 	bic.w	r2, r2, #3
 800e346:	3204      	adds	r2, #4
 800e348:	f104 0115 	add.w	r1, r4, #21
 800e34c:	428f      	cmp	r7, r1
 800e34e:	bf38      	it	cc
 800e350:	2204      	movcc	r2, #4
 800e352:	9201      	str	r2, [sp, #4]
 800e354:	9a02      	ldr	r2, [sp, #8]
 800e356:	9303      	str	r3, [sp, #12]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d80c      	bhi.n	800e376 <__multiply+0x9e>
 800e35c:	2e00      	cmp	r6, #0
 800e35e:	dd03      	ble.n	800e368 <__multiply+0x90>
 800e360:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e364:	2b00      	cmp	r3, #0
 800e366:	d05a      	beq.n	800e41e <__multiply+0x146>
 800e368:	6106      	str	r6, [r0, #16]
 800e36a:	b005      	add	sp, #20
 800e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e370:	f843 2b04 	str.w	r2, [r3], #4
 800e374:	e7d8      	b.n	800e328 <__multiply+0x50>
 800e376:	f8b3 a000 	ldrh.w	sl, [r3]
 800e37a:	f1ba 0f00 	cmp.w	sl, #0
 800e37e:	d024      	beq.n	800e3ca <__multiply+0xf2>
 800e380:	f104 0e14 	add.w	lr, r4, #20
 800e384:	46a9      	mov	r9, r5
 800e386:	f04f 0c00 	mov.w	ip, #0
 800e38a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e38e:	f8d9 1000 	ldr.w	r1, [r9]
 800e392:	fa1f fb82 	uxth.w	fp, r2
 800e396:	b289      	uxth	r1, r1
 800e398:	fb0a 110b 	mla	r1, sl, fp, r1
 800e39c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e3a0:	f8d9 2000 	ldr.w	r2, [r9]
 800e3a4:	4461      	add	r1, ip
 800e3a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3b2:	b289      	uxth	r1, r1
 800e3b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3b8:	4577      	cmp	r7, lr
 800e3ba:	f849 1b04 	str.w	r1, [r9], #4
 800e3be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3c2:	d8e2      	bhi.n	800e38a <__multiply+0xb2>
 800e3c4:	9a01      	ldr	r2, [sp, #4]
 800e3c6:	f845 c002 	str.w	ip, [r5, r2]
 800e3ca:	9a03      	ldr	r2, [sp, #12]
 800e3cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	f1b9 0f00 	cmp.w	r9, #0
 800e3d6:	d020      	beq.n	800e41a <__multiply+0x142>
 800e3d8:	6829      	ldr	r1, [r5, #0]
 800e3da:	f104 0c14 	add.w	ip, r4, #20
 800e3de:	46ae      	mov	lr, r5
 800e3e0:	f04f 0a00 	mov.w	sl, #0
 800e3e4:	f8bc b000 	ldrh.w	fp, [ip]
 800e3e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3ec:	fb09 220b 	mla	r2, r9, fp, r2
 800e3f0:	4492      	add	sl, r2
 800e3f2:	b289      	uxth	r1, r1
 800e3f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e3f8:	f84e 1b04 	str.w	r1, [lr], #4
 800e3fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e400:	f8be 1000 	ldrh.w	r1, [lr]
 800e404:	0c12      	lsrs	r2, r2, #16
 800e406:	fb09 1102 	mla	r1, r9, r2, r1
 800e40a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e40e:	4567      	cmp	r7, ip
 800e410:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e414:	d8e6      	bhi.n	800e3e4 <__multiply+0x10c>
 800e416:	9a01      	ldr	r2, [sp, #4]
 800e418:	50a9      	str	r1, [r5, r2]
 800e41a:	3504      	adds	r5, #4
 800e41c:	e79a      	b.n	800e354 <__multiply+0x7c>
 800e41e:	3e01      	subs	r6, #1
 800e420:	e79c      	b.n	800e35c <__multiply+0x84>
 800e422:	bf00      	nop
 800e424:	0801422b 	.word	0x0801422b
 800e428:	0801423c 	.word	0x0801423c

0800e42c <__pow5mult>:
 800e42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e430:	4615      	mov	r5, r2
 800e432:	f012 0203 	ands.w	r2, r2, #3
 800e436:	4606      	mov	r6, r0
 800e438:	460f      	mov	r7, r1
 800e43a:	d007      	beq.n	800e44c <__pow5mult+0x20>
 800e43c:	4c25      	ldr	r4, [pc, #148]	; (800e4d4 <__pow5mult+0xa8>)
 800e43e:	3a01      	subs	r2, #1
 800e440:	2300      	movs	r3, #0
 800e442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e446:	f7ff fe9b 	bl	800e180 <__multadd>
 800e44a:	4607      	mov	r7, r0
 800e44c:	10ad      	asrs	r5, r5, #2
 800e44e:	d03d      	beq.n	800e4cc <__pow5mult+0xa0>
 800e450:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e452:	b97c      	cbnz	r4, 800e474 <__pow5mult+0x48>
 800e454:	2010      	movs	r0, #16
 800e456:	f7fd ff87 	bl	800c368 <malloc>
 800e45a:	4602      	mov	r2, r0
 800e45c:	6270      	str	r0, [r6, #36]	; 0x24
 800e45e:	b928      	cbnz	r0, 800e46c <__pow5mult+0x40>
 800e460:	4b1d      	ldr	r3, [pc, #116]	; (800e4d8 <__pow5mult+0xac>)
 800e462:	481e      	ldr	r0, [pc, #120]	; (800e4dc <__pow5mult+0xb0>)
 800e464:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e468:	f000 fc8a 	bl	800ed80 <__assert_func>
 800e46c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e470:	6004      	str	r4, [r0, #0]
 800e472:	60c4      	str	r4, [r0, #12]
 800e474:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e47c:	b94c      	cbnz	r4, 800e492 <__pow5mult+0x66>
 800e47e:	f240 2171 	movw	r1, #625	; 0x271
 800e482:	4630      	mov	r0, r6
 800e484:	f7ff ff12 	bl	800e2ac <__i2b>
 800e488:	2300      	movs	r3, #0
 800e48a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e48e:	4604      	mov	r4, r0
 800e490:	6003      	str	r3, [r0, #0]
 800e492:	f04f 0900 	mov.w	r9, #0
 800e496:	07eb      	lsls	r3, r5, #31
 800e498:	d50a      	bpl.n	800e4b0 <__pow5mult+0x84>
 800e49a:	4639      	mov	r1, r7
 800e49c:	4622      	mov	r2, r4
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f7ff ff1a 	bl	800e2d8 <__multiply>
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	4680      	mov	r8, r0
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f7ff fe47 	bl	800e13c <_Bfree>
 800e4ae:	4647      	mov	r7, r8
 800e4b0:	106d      	asrs	r5, r5, #1
 800e4b2:	d00b      	beq.n	800e4cc <__pow5mult+0xa0>
 800e4b4:	6820      	ldr	r0, [r4, #0]
 800e4b6:	b938      	cbnz	r0, 800e4c8 <__pow5mult+0x9c>
 800e4b8:	4622      	mov	r2, r4
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7ff ff0b 	bl	800e2d8 <__multiply>
 800e4c2:	6020      	str	r0, [r4, #0]
 800e4c4:	f8c0 9000 	str.w	r9, [r0]
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	e7e4      	b.n	800e496 <__pow5mult+0x6a>
 800e4cc:	4638      	mov	r0, r7
 800e4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4d2:	bf00      	nop
 800e4d4:	08014388 	.word	0x08014388
 800e4d8:	080141b9 	.word	0x080141b9
 800e4dc:	0801423c 	.word	0x0801423c

0800e4e0 <__lshift>:
 800e4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	6849      	ldr	r1, [r1, #4]
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4ee:	68a3      	ldr	r3, [r4, #8]
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	4691      	mov	r9, r2
 800e4f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4f8:	f108 0601 	add.w	r6, r8, #1
 800e4fc:	42b3      	cmp	r3, r6
 800e4fe:	db0b      	blt.n	800e518 <__lshift+0x38>
 800e500:	4638      	mov	r0, r7
 800e502:	f7ff fddb 	bl	800e0bc <_Balloc>
 800e506:	4605      	mov	r5, r0
 800e508:	b948      	cbnz	r0, 800e51e <__lshift+0x3e>
 800e50a:	4602      	mov	r2, r0
 800e50c:	4b2a      	ldr	r3, [pc, #168]	; (800e5b8 <__lshift+0xd8>)
 800e50e:	482b      	ldr	r0, [pc, #172]	; (800e5bc <__lshift+0xdc>)
 800e510:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e514:	f000 fc34 	bl	800ed80 <__assert_func>
 800e518:	3101      	adds	r1, #1
 800e51a:	005b      	lsls	r3, r3, #1
 800e51c:	e7ee      	b.n	800e4fc <__lshift+0x1c>
 800e51e:	2300      	movs	r3, #0
 800e520:	f100 0114 	add.w	r1, r0, #20
 800e524:	f100 0210 	add.w	r2, r0, #16
 800e528:	4618      	mov	r0, r3
 800e52a:	4553      	cmp	r3, sl
 800e52c:	db37      	blt.n	800e59e <__lshift+0xbe>
 800e52e:	6920      	ldr	r0, [r4, #16]
 800e530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e534:	f104 0314 	add.w	r3, r4, #20
 800e538:	f019 091f 	ands.w	r9, r9, #31
 800e53c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e540:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e544:	d02f      	beq.n	800e5a6 <__lshift+0xc6>
 800e546:	f1c9 0e20 	rsb	lr, r9, #32
 800e54a:	468a      	mov	sl, r1
 800e54c:	f04f 0c00 	mov.w	ip, #0
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	fa02 f209 	lsl.w	r2, r2, r9
 800e556:	ea42 020c 	orr.w	r2, r2, ip
 800e55a:	f84a 2b04 	str.w	r2, [sl], #4
 800e55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e562:	4298      	cmp	r0, r3
 800e564:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e568:	d8f2      	bhi.n	800e550 <__lshift+0x70>
 800e56a:	1b03      	subs	r3, r0, r4
 800e56c:	3b15      	subs	r3, #21
 800e56e:	f023 0303 	bic.w	r3, r3, #3
 800e572:	3304      	adds	r3, #4
 800e574:	f104 0215 	add.w	r2, r4, #21
 800e578:	4290      	cmp	r0, r2
 800e57a:	bf38      	it	cc
 800e57c:	2304      	movcc	r3, #4
 800e57e:	f841 c003 	str.w	ip, [r1, r3]
 800e582:	f1bc 0f00 	cmp.w	ip, #0
 800e586:	d001      	beq.n	800e58c <__lshift+0xac>
 800e588:	f108 0602 	add.w	r6, r8, #2
 800e58c:	3e01      	subs	r6, #1
 800e58e:	4638      	mov	r0, r7
 800e590:	612e      	str	r6, [r5, #16]
 800e592:	4621      	mov	r1, r4
 800e594:	f7ff fdd2 	bl	800e13c <_Bfree>
 800e598:	4628      	mov	r0, r5
 800e59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e59e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	e7c1      	b.n	800e52a <__lshift+0x4a>
 800e5a6:	3904      	subs	r1, #4
 800e5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5b0:	4298      	cmp	r0, r3
 800e5b2:	d8f9      	bhi.n	800e5a8 <__lshift+0xc8>
 800e5b4:	e7ea      	b.n	800e58c <__lshift+0xac>
 800e5b6:	bf00      	nop
 800e5b8:	0801422b 	.word	0x0801422b
 800e5bc:	0801423c 	.word	0x0801423c

0800e5c0 <__mcmp>:
 800e5c0:	b530      	push	{r4, r5, lr}
 800e5c2:	6902      	ldr	r2, [r0, #16]
 800e5c4:	690c      	ldr	r4, [r1, #16]
 800e5c6:	1b12      	subs	r2, r2, r4
 800e5c8:	d10e      	bne.n	800e5e8 <__mcmp+0x28>
 800e5ca:	f100 0314 	add.w	r3, r0, #20
 800e5ce:	3114      	adds	r1, #20
 800e5d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5e0:	42a5      	cmp	r5, r4
 800e5e2:	d003      	beq.n	800e5ec <__mcmp+0x2c>
 800e5e4:	d305      	bcc.n	800e5f2 <__mcmp+0x32>
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	bd30      	pop	{r4, r5, pc}
 800e5ec:	4283      	cmp	r3, r0
 800e5ee:	d3f3      	bcc.n	800e5d8 <__mcmp+0x18>
 800e5f0:	e7fa      	b.n	800e5e8 <__mcmp+0x28>
 800e5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f6:	e7f7      	b.n	800e5e8 <__mcmp+0x28>

0800e5f8 <__mdiff>:
 800e5f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5fc:	460c      	mov	r4, r1
 800e5fe:	4606      	mov	r6, r0
 800e600:	4611      	mov	r1, r2
 800e602:	4620      	mov	r0, r4
 800e604:	4690      	mov	r8, r2
 800e606:	f7ff ffdb 	bl	800e5c0 <__mcmp>
 800e60a:	1e05      	subs	r5, r0, #0
 800e60c:	d110      	bne.n	800e630 <__mdiff+0x38>
 800e60e:	4629      	mov	r1, r5
 800e610:	4630      	mov	r0, r6
 800e612:	f7ff fd53 	bl	800e0bc <_Balloc>
 800e616:	b930      	cbnz	r0, 800e626 <__mdiff+0x2e>
 800e618:	4b3a      	ldr	r3, [pc, #232]	; (800e704 <__mdiff+0x10c>)
 800e61a:	4602      	mov	r2, r0
 800e61c:	f240 2132 	movw	r1, #562	; 0x232
 800e620:	4839      	ldr	r0, [pc, #228]	; (800e708 <__mdiff+0x110>)
 800e622:	f000 fbad 	bl	800ed80 <__assert_func>
 800e626:	2301      	movs	r3, #1
 800e628:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e62c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e630:	bfa4      	itt	ge
 800e632:	4643      	movge	r3, r8
 800e634:	46a0      	movge	r8, r4
 800e636:	4630      	mov	r0, r6
 800e638:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e63c:	bfa6      	itte	ge
 800e63e:	461c      	movge	r4, r3
 800e640:	2500      	movge	r5, #0
 800e642:	2501      	movlt	r5, #1
 800e644:	f7ff fd3a 	bl	800e0bc <_Balloc>
 800e648:	b920      	cbnz	r0, 800e654 <__mdiff+0x5c>
 800e64a:	4b2e      	ldr	r3, [pc, #184]	; (800e704 <__mdiff+0x10c>)
 800e64c:	4602      	mov	r2, r0
 800e64e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e652:	e7e5      	b.n	800e620 <__mdiff+0x28>
 800e654:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e658:	6926      	ldr	r6, [r4, #16]
 800e65a:	60c5      	str	r5, [r0, #12]
 800e65c:	f104 0914 	add.w	r9, r4, #20
 800e660:	f108 0514 	add.w	r5, r8, #20
 800e664:	f100 0e14 	add.w	lr, r0, #20
 800e668:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e66c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e670:	f108 0210 	add.w	r2, r8, #16
 800e674:	46f2      	mov	sl, lr
 800e676:	2100      	movs	r1, #0
 800e678:	f859 3b04 	ldr.w	r3, [r9], #4
 800e67c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e680:	fa1f f883 	uxth.w	r8, r3
 800e684:	fa11 f18b 	uxtah	r1, r1, fp
 800e688:	0c1b      	lsrs	r3, r3, #16
 800e68a:	eba1 0808 	sub.w	r8, r1, r8
 800e68e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e692:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e696:	fa1f f888 	uxth.w	r8, r8
 800e69a:	1419      	asrs	r1, r3, #16
 800e69c:	454e      	cmp	r6, r9
 800e69e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e6a2:	f84a 3b04 	str.w	r3, [sl], #4
 800e6a6:	d8e7      	bhi.n	800e678 <__mdiff+0x80>
 800e6a8:	1b33      	subs	r3, r6, r4
 800e6aa:	3b15      	subs	r3, #21
 800e6ac:	f023 0303 	bic.w	r3, r3, #3
 800e6b0:	3304      	adds	r3, #4
 800e6b2:	3415      	adds	r4, #21
 800e6b4:	42a6      	cmp	r6, r4
 800e6b6:	bf38      	it	cc
 800e6b8:	2304      	movcc	r3, #4
 800e6ba:	441d      	add	r5, r3
 800e6bc:	4473      	add	r3, lr
 800e6be:	469e      	mov	lr, r3
 800e6c0:	462e      	mov	r6, r5
 800e6c2:	4566      	cmp	r6, ip
 800e6c4:	d30e      	bcc.n	800e6e4 <__mdiff+0xec>
 800e6c6:	f10c 0203 	add.w	r2, ip, #3
 800e6ca:	1b52      	subs	r2, r2, r5
 800e6cc:	f022 0203 	bic.w	r2, r2, #3
 800e6d0:	3d03      	subs	r5, #3
 800e6d2:	45ac      	cmp	ip, r5
 800e6d4:	bf38      	it	cc
 800e6d6:	2200      	movcc	r2, #0
 800e6d8:	441a      	add	r2, r3
 800e6da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6de:	b17b      	cbz	r3, 800e700 <__mdiff+0x108>
 800e6e0:	6107      	str	r7, [r0, #16]
 800e6e2:	e7a3      	b.n	800e62c <__mdiff+0x34>
 800e6e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6e8:	fa11 f288 	uxtah	r2, r1, r8
 800e6ec:	1414      	asrs	r4, r2, #16
 800e6ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6f2:	b292      	uxth	r2, r2
 800e6f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6f8:	f84e 2b04 	str.w	r2, [lr], #4
 800e6fc:	1421      	asrs	r1, r4, #16
 800e6fe:	e7e0      	b.n	800e6c2 <__mdiff+0xca>
 800e700:	3f01      	subs	r7, #1
 800e702:	e7ea      	b.n	800e6da <__mdiff+0xe2>
 800e704:	0801422b 	.word	0x0801422b
 800e708:	0801423c 	.word	0x0801423c

0800e70c <__d2b>:
 800e70c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e710:	4689      	mov	r9, r1
 800e712:	2101      	movs	r1, #1
 800e714:	ec57 6b10 	vmov	r6, r7, d0
 800e718:	4690      	mov	r8, r2
 800e71a:	f7ff fccf 	bl	800e0bc <_Balloc>
 800e71e:	4604      	mov	r4, r0
 800e720:	b930      	cbnz	r0, 800e730 <__d2b+0x24>
 800e722:	4602      	mov	r2, r0
 800e724:	4b25      	ldr	r3, [pc, #148]	; (800e7bc <__d2b+0xb0>)
 800e726:	4826      	ldr	r0, [pc, #152]	; (800e7c0 <__d2b+0xb4>)
 800e728:	f240 310a 	movw	r1, #778	; 0x30a
 800e72c:	f000 fb28 	bl	800ed80 <__assert_func>
 800e730:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e734:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e738:	bb35      	cbnz	r5, 800e788 <__d2b+0x7c>
 800e73a:	2e00      	cmp	r6, #0
 800e73c:	9301      	str	r3, [sp, #4]
 800e73e:	d028      	beq.n	800e792 <__d2b+0x86>
 800e740:	4668      	mov	r0, sp
 800e742:	9600      	str	r6, [sp, #0]
 800e744:	f7ff fd82 	bl	800e24c <__lo0bits>
 800e748:	9900      	ldr	r1, [sp, #0]
 800e74a:	b300      	cbz	r0, 800e78e <__d2b+0x82>
 800e74c:	9a01      	ldr	r2, [sp, #4]
 800e74e:	f1c0 0320 	rsb	r3, r0, #32
 800e752:	fa02 f303 	lsl.w	r3, r2, r3
 800e756:	430b      	orrs	r3, r1
 800e758:	40c2      	lsrs	r2, r0
 800e75a:	6163      	str	r3, [r4, #20]
 800e75c:	9201      	str	r2, [sp, #4]
 800e75e:	9b01      	ldr	r3, [sp, #4]
 800e760:	61a3      	str	r3, [r4, #24]
 800e762:	2b00      	cmp	r3, #0
 800e764:	bf14      	ite	ne
 800e766:	2202      	movne	r2, #2
 800e768:	2201      	moveq	r2, #1
 800e76a:	6122      	str	r2, [r4, #16]
 800e76c:	b1d5      	cbz	r5, 800e7a4 <__d2b+0x98>
 800e76e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e772:	4405      	add	r5, r0
 800e774:	f8c9 5000 	str.w	r5, [r9]
 800e778:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e77c:	f8c8 0000 	str.w	r0, [r8]
 800e780:	4620      	mov	r0, r4
 800e782:	b003      	add	sp, #12
 800e784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e78c:	e7d5      	b.n	800e73a <__d2b+0x2e>
 800e78e:	6161      	str	r1, [r4, #20]
 800e790:	e7e5      	b.n	800e75e <__d2b+0x52>
 800e792:	a801      	add	r0, sp, #4
 800e794:	f7ff fd5a 	bl	800e24c <__lo0bits>
 800e798:	9b01      	ldr	r3, [sp, #4]
 800e79a:	6163      	str	r3, [r4, #20]
 800e79c:	2201      	movs	r2, #1
 800e79e:	6122      	str	r2, [r4, #16]
 800e7a0:	3020      	adds	r0, #32
 800e7a2:	e7e3      	b.n	800e76c <__d2b+0x60>
 800e7a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7ac:	f8c9 0000 	str.w	r0, [r9]
 800e7b0:	6918      	ldr	r0, [r3, #16]
 800e7b2:	f7ff fd2b 	bl	800e20c <__hi0bits>
 800e7b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7ba:	e7df      	b.n	800e77c <__d2b+0x70>
 800e7bc:	0801422b 	.word	0x0801422b
 800e7c0:	0801423c 	.word	0x0801423c

0800e7c4 <_calloc_r>:
 800e7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7c6:	fba1 2402 	umull	r2, r4, r1, r2
 800e7ca:	b94c      	cbnz	r4, 800e7e0 <_calloc_r+0x1c>
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	9201      	str	r2, [sp, #4]
 800e7d0:	f7fd fe76 	bl	800c4c0 <_malloc_r>
 800e7d4:	9a01      	ldr	r2, [sp, #4]
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	b930      	cbnz	r0, 800e7e8 <_calloc_r+0x24>
 800e7da:	4628      	mov	r0, r5
 800e7dc:	b003      	add	sp, #12
 800e7de:	bd30      	pop	{r4, r5, pc}
 800e7e0:	220c      	movs	r2, #12
 800e7e2:	6002      	str	r2, [r0, #0]
 800e7e4:	2500      	movs	r5, #0
 800e7e6:	e7f8      	b.n	800e7da <_calloc_r+0x16>
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	f7fd fdf5 	bl	800c3d8 <memset>
 800e7ee:	e7f4      	b.n	800e7da <_calloc_r+0x16>

0800e7f0 <__ssputs_r>:
 800e7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f4:	688e      	ldr	r6, [r1, #8]
 800e7f6:	429e      	cmp	r6, r3
 800e7f8:	4682      	mov	sl, r0
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	4690      	mov	r8, r2
 800e7fe:	461f      	mov	r7, r3
 800e800:	d838      	bhi.n	800e874 <__ssputs_r+0x84>
 800e802:	898a      	ldrh	r2, [r1, #12]
 800e804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e808:	d032      	beq.n	800e870 <__ssputs_r+0x80>
 800e80a:	6825      	ldr	r5, [r4, #0]
 800e80c:	6909      	ldr	r1, [r1, #16]
 800e80e:	eba5 0901 	sub.w	r9, r5, r1
 800e812:	6965      	ldr	r5, [r4, #20]
 800e814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e81c:	3301      	adds	r3, #1
 800e81e:	444b      	add	r3, r9
 800e820:	106d      	asrs	r5, r5, #1
 800e822:	429d      	cmp	r5, r3
 800e824:	bf38      	it	cc
 800e826:	461d      	movcc	r5, r3
 800e828:	0553      	lsls	r3, r2, #21
 800e82a:	d531      	bpl.n	800e890 <__ssputs_r+0xa0>
 800e82c:	4629      	mov	r1, r5
 800e82e:	f7fd fe47 	bl	800c4c0 <_malloc_r>
 800e832:	4606      	mov	r6, r0
 800e834:	b950      	cbnz	r0, 800e84c <__ssputs_r+0x5c>
 800e836:	230c      	movs	r3, #12
 800e838:	f8ca 3000 	str.w	r3, [sl]
 800e83c:	89a3      	ldrh	r3, [r4, #12]
 800e83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e842:	81a3      	strh	r3, [r4, #12]
 800e844:	f04f 30ff 	mov.w	r0, #4294967295
 800e848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e84c:	6921      	ldr	r1, [r4, #16]
 800e84e:	464a      	mov	r2, r9
 800e850:	f7fd fd9a 	bl	800c388 <memcpy>
 800e854:	89a3      	ldrh	r3, [r4, #12]
 800e856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e85a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e85e:	81a3      	strh	r3, [r4, #12]
 800e860:	6126      	str	r6, [r4, #16]
 800e862:	6165      	str	r5, [r4, #20]
 800e864:	444e      	add	r6, r9
 800e866:	eba5 0509 	sub.w	r5, r5, r9
 800e86a:	6026      	str	r6, [r4, #0]
 800e86c:	60a5      	str	r5, [r4, #8]
 800e86e:	463e      	mov	r6, r7
 800e870:	42be      	cmp	r6, r7
 800e872:	d900      	bls.n	800e876 <__ssputs_r+0x86>
 800e874:	463e      	mov	r6, r7
 800e876:	6820      	ldr	r0, [r4, #0]
 800e878:	4632      	mov	r2, r6
 800e87a:	4641      	mov	r1, r8
 800e87c:	f7fd fd92 	bl	800c3a4 <memmove>
 800e880:	68a3      	ldr	r3, [r4, #8]
 800e882:	1b9b      	subs	r3, r3, r6
 800e884:	60a3      	str	r3, [r4, #8]
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	4433      	add	r3, r6
 800e88a:	6023      	str	r3, [r4, #0]
 800e88c:	2000      	movs	r0, #0
 800e88e:	e7db      	b.n	800e848 <__ssputs_r+0x58>
 800e890:	462a      	mov	r2, r5
 800e892:	f000 fad9 	bl	800ee48 <_realloc_r>
 800e896:	4606      	mov	r6, r0
 800e898:	2800      	cmp	r0, #0
 800e89a:	d1e1      	bne.n	800e860 <__ssputs_r+0x70>
 800e89c:	6921      	ldr	r1, [r4, #16]
 800e89e:	4650      	mov	r0, sl
 800e8a0:	f7fd fda2 	bl	800c3e8 <_free_r>
 800e8a4:	e7c7      	b.n	800e836 <__ssputs_r+0x46>
	...

0800e8a8 <_svfiprintf_r>:
 800e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	4698      	mov	r8, r3
 800e8ae:	898b      	ldrh	r3, [r1, #12]
 800e8b0:	061b      	lsls	r3, r3, #24
 800e8b2:	b09d      	sub	sp, #116	; 0x74
 800e8b4:	4607      	mov	r7, r0
 800e8b6:	460d      	mov	r5, r1
 800e8b8:	4614      	mov	r4, r2
 800e8ba:	d50e      	bpl.n	800e8da <_svfiprintf_r+0x32>
 800e8bc:	690b      	ldr	r3, [r1, #16]
 800e8be:	b963      	cbnz	r3, 800e8da <_svfiprintf_r+0x32>
 800e8c0:	2140      	movs	r1, #64	; 0x40
 800e8c2:	f7fd fdfd 	bl	800c4c0 <_malloc_r>
 800e8c6:	6028      	str	r0, [r5, #0]
 800e8c8:	6128      	str	r0, [r5, #16]
 800e8ca:	b920      	cbnz	r0, 800e8d6 <_svfiprintf_r+0x2e>
 800e8cc:	230c      	movs	r3, #12
 800e8ce:	603b      	str	r3, [r7, #0]
 800e8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d4:	e0d1      	b.n	800ea7a <_svfiprintf_r+0x1d2>
 800e8d6:	2340      	movs	r3, #64	; 0x40
 800e8d8:	616b      	str	r3, [r5, #20]
 800e8da:	2300      	movs	r3, #0
 800e8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e8de:	2320      	movs	r3, #32
 800e8e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8e8:	2330      	movs	r3, #48	; 0x30
 800e8ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ea94 <_svfiprintf_r+0x1ec>
 800e8ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8f2:	f04f 0901 	mov.w	r9, #1
 800e8f6:	4623      	mov	r3, r4
 800e8f8:	469a      	mov	sl, r3
 800e8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8fe:	b10a      	cbz	r2, 800e904 <_svfiprintf_r+0x5c>
 800e900:	2a25      	cmp	r2, #37	; 0x25
 800e902:	d1f9      	bne.n	800e8f8 <_svfiprintf_r+0x50>
 800e904:	ebba 0b04 	subs.w	fp, sl, r4
 800e908:	d00b      	beq.n	800e922 <_svfiprintf_r+0x7a>
 800e90a:	465b      	mov	r3, fp
 800e90c:	4622      	mov	r2, r4
 800e90e:	4629      	mov	r1, r5
 800e910:	4638      	mov	r0, r7
 800e912:	f7ff ff6d 	bl	800e7f0 <__ssputs_r>
 800e916:	3001      	adds	r0, #1
 800e918:	f000 80aa 	beq.w	800ea70 <_svfiprintf_r+0x1c8>
 800e91c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e91e:	445a      	add	r2, fp
 800e920:	9209      	str	r2, [sp, #36]	; 0x24
 800e922:	f89a 3000 	ldrb.w	r3, [sl]
 800e926:	2b00      	cmp	r3, #0
 800e928:	f000 80a2 	beq.w	800ea70 <_svfiprintf_r+0x1c8>
 800e92c:	2300      	movs	r3, #0
 800e92e:	f04f 32ff 	mov.w	r2, #4294967295
 800e932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e936:	f10a 0a01 	add.w	sl, sl, #1
 800e93a:	9304      	str	r3, [sp, #16]
 800e93c:	9307      	str	r3, [sp, #28]
 800e93e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e942:	931a      	str	r3, [sp, #104]	; 0x68
 800e944:	4654      	mov	r4, sl
 800e946:	2205      	movs	r2, #5
 800e948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e94c:	4851      	ldr	r0, [pc, #324]	; (800ea94 <_svfiprintf_r+0x1ec>)
 800e94e:	f7f1 fc1f 	bl	8000190 <memchr>
 800e952:	9a04      	ldr	r2, [sp, #16]
 800e954:	b9d8      	cbnz	r0, 800e98e <_svfiprintf_r+0xe6>
 800e956:	06d0      	lsls	r0, r2, #27
 800e958:	bf44      	itt	mi
 800e95a:	2320      	movmi	r3, #32
 800e95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e960:	0711      	lsls	r1, r2, #28
 800e962:	bf44      	itt	mi
 800e964:	232b      	movmi	r3, #43	; 0x2b
 800e966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e96a:	f89a 3000 	ldrb.w	r3, [sl]
 800e96e:	2b2a      	cmp	r3, #42	; 0x2a
 800e970:	d015      	beq.n	800e99e <_svfiprintf_r+0xf6>
 800e972:	9a07      	ldr	r2, [sp, #28]
 800e974:	4654      	mov	r4, sl
 800e976:	2000      	movs	r0, #0
 800e978:	f04f 0c0a 	mov.w	ip, #10
 800e97c:	4621      	mov	r1, r4
 800e97e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e982:	3b30      	subs	r3, #48	; 0x30
 800e984:	2b09      	cmp	r3, #9
 800e986:	d94e      	bls.n	800ea26 <_svfiprintf_r+0x17e>
 800e988:	b1b0      	cbz	r0, 800e9b8 <_svfiprintf_r+0x110>
 800e98a:	9207      	str	r2, [sp, #28]
 800e98c:	e014      	b.n	800e9b8 <_svfiprintf_r+0x110>
 800e98e:	eba0 0308 	sub.w	r3, r0, r8
 800e992:	fa09 f303 	lsl.w	r3, r9, r3
 800e996:	4313      	orrs	r3, r2
 800e998:	9304      	str	r3, [sp, #16]
 800e99a:	46a2      	mov	sl, r4
 800e99c:	e7d2      	b.n	800e944 <_svfiprintf_r+0x9c>
 800e99e:	9b03      	ldr	r3, [sp, #12]
 800e9a0:	1d19      	adds	r1, r3, #4
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	9103      	str	r1, [sp, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	bfbb      	ittet	lt
 800e9aa:	425b      	neglt	r3, r3
 800e9ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e9b0:	9307      	strge	r3, [sp, #28]
 800e9b2:	9307      	strlt	r3, [sp, #28]
 800e9b4:	bfb8      	it	lt
 800e9b6:	9204      	strlt	r2, [sp, #16]
 800e9b8:	7823      	ldrb	r3, [r4, #0]
 800e9ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e9bc:	d10c      	bne.n	800e9d8 <_svfiprintf_r+0x130>
 800e9be:	7863      	ldrb	r3, [r4, #1]
 800e9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e9c2:	d135      	bne.n	800ea30 <_svfiprintf_r+0x188>
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	1d1a      	adds	r2, r3, #4
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	9203      	str	r2, [sp, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	bfb8      	it	lt
 800e9d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9d4:	3402      	adds	r4, #2
 800e9d6:	9305      	str	r3, [sp, #20]
 800e9d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eaa4 <_svfiprintf_r+0x1fc>
 800e9dc:	7821      	ldrb	r1, [r4, #0]
 800e9de:	2203      	movs	r2, #3
 800e9e0:	4650      	mov	r0, sl
 800e9e2:	f7f1 fbd5 	bl	8000190 <memchr>
 800e9e6:	b140      	cbz	r0, 800e9fa <_svfiprintf_r+0x152>
 800e9e8:	2340      	movs	r3, #64	; 0x40
 800e9ea:	eba0 000a 	sub.w	r0, r0, sl
 800e9ee:	fa03 f000 	lsl.w	r0, r3, r0
 800e9f2:	9b04      	ldr	r3, [sp, #16]
 800e9f4:	4303      	orrs	r3, r0
 800e9f6:	3401      	adds	r4, #1
 800e9f8:	9304      	str	r3, [sp, #16]
 800e9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9fe:	4826      	ldr	r0, [pc, #152]	; (800ea98 <_svfiprintf_r+0x1f0>)
 800ea00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea04:	2206      	movs	r2, #6
 800ea06:	f7f1 fbc3 	bl	8000190 <memchr>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	d038      	beq.n	800ea80 <_svfiprintf_r+0x1d8>
 800ea0e:	4b23      	ldr	r3, [pc, #140]	; (800ea9c <_svfiprintf_r+0x1f4>)
 800ea10:	bb1b      	cbnz	r3, 800ea5a <_svfiprintf_r+0x1b2>
 800ea12:	9b03      	ldr	r3, [sp, #12]
 800ea14:	3307      	adds	r3, #7
 800ea16:	f023 0307 	bic.w	r3, r3, #7
 800ea1a:	3308      	adds	r3, #8
 800ea1c:	9303      	str	r3, [sp, #12]
 800ea1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea20:	4433      	add	r3, r6
 800ea22:	9309      	str	r3, [sp, #36]	; 0x24
 800ea24:	e767      	b.n	800e8f6 <_svfiprintf_r+0x4e>
 800ea26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea2a:	460c      	mov	r4, r1
 800ea2c:	2001      	movs	r0, #1
 800ea2e:	e7a5      	b.n	800e97c <_svfiprintf_r+0xd4>
 800ea30:	2300      	movs	r3, #0
 800ea32:	3401      	adds	r4, #1
 800ea34:	9305      	str	r3, [sp, #20]
 800ea36:	4619      	mov	r1, r3
 800ea38:	f04f 0c0a 	mov.w	ip, #10
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea42:	3a30      	subs	r2, #48	; 0x30
 800ea44:	2a09      	cmp	r2, #9
 800ea46:	d903      	bls.n	800ea50 <_svfiprintf_r+0x1a8>
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d0c5      	beq.n	800e9d8 <_svfiprintf_r+0x130>
 800ea4c:	9105      	str	r1, [sp, #20]
 800ea4e:	e7c3      	b.n	800e9d8 <_svfiprintf_r+0x130>
 800ea50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea54:	4604      	mov	r4, r0
 800ea56:	2301      	movs	r3, #1
 800ea58:	e7f0      	b.n	800ea3c <_svfiprintf_r+0x194>
 800ea5a:	ab03      	add	r3, sp, #12
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	462a      	mov	r2, r5
 800ea60:	4b0f      	ldr	r3, [pc, #60]	; (800eaa0 <_svfiprintf_r+0x1f8>)
 800ea62:	a904      	add	r1, sp, #16
 800ea64:	4638      	mov	r0, r7
 800ea66:	f7fd fe3f 	bl	800c6e8 <_printf_float>
 800ea6a:	1c42      	adds	r2, r0, #1
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	d1d6      	bne.n	800ea1e <_svfiprintf_r+0x176>
 800ea70:	89ab      	ldrh	r3, [r5, #12]
 800ea72:	065b      	lsls	r3, r3, #25
 800ea74:	f53f af2c 	bmi.w	800e8d0 <_svfiprintf_r+0x28>
 800ea78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea7a:	b01d      	add	sp, #116	; 0x74
 800ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea80:	ab03      	add	r3, sp, #12
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	462a      	mov	r2, r5
 800ea86:	4b06      	ldr	r3, [pc, #24]	; (800eaa0 <_svfiprintf_r+0x1f8>)
 800ea88:	a904      	add	r1, sp, #16
 800ea8a:	4638      	mov	r0, r7
 800ea8c:	f7fe f8d0 	bl	800cc30 <_printf_i>
 800ea90:	e7eb      	b.n	800ea6a <_svfiprintf_r+0x1c2>
 800ea92:	bf00      	nop
 800ea94:	08014394 	.word	0x08014394
 800ea98:	0801439e 	.word	0x0801439e
 800ea9c:	0800c6e9 	.word	0x0800c6e9
 800eaa0:	0800e7f1 	.word	0x0800e7f1
 800eaa4:	0801439a 	.word	0x0801439a

0800eaa8 <__sfputc_r>:
 800eaa8:	6893      	ldr	r3, [r2, #8]
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	b410      	push	{r4}
 800eab0:	6093      	str	r3, [r2, #8]
 800eab2:	da08      	bge.n	800eac6 <__sfputc_r+0x1e>
 800eab4:	6994      	ldr	r4, [r2, #24]
 800eab6:	42a3      	cmp	r3, r4
 800eab8:	db01      	blt.n	800eabe <__sfputc_r+0x16>
 800eaba:	290a      	cmp	r1, #10
 800eabc:	d103      	bne.n	800eac6 <__sfputc_r+0x1e>
 800eabe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eac2:	f7fe bb15 	b.w	800d0f0 <__swbuf_r>
 800eac6:	6813      	ldr	r3, [r2, #0]
 800eac8:	1c58      	adds	r0, r3, #1
 800eaca:	6010      	str	r0, [r2, #0]
 800eacc:	7019      	strb	r1, [r3, #0]
 800eace:	4608      	mov	r0, r1
 800ead0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <__sfputs_r>:
 800ead6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead8:	4606      	mov	r6, r0
 800eada:	460f      	mov	r7, r1
 800eadc:	4614      	mov	r4, r2
 800eade:	18d5      	adds	r5, r2, r3
 800eae0:	42ac      	cmp	r4, r5
 800eae2:	d101      	bne.n	800eae8 <__sfputs_r+0x12>
 800eae4:	2000      	movs	r0, #0
 800eae6:	e007      	b.n	800eaf8 <__sfputs_r+0x22>
 800eae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaec:	463a      	mov	r2, r7
 800eaee:	4630      	mov	r0, r6
 800eaf0:	f7ff ffda 	bl	800eaa8 <__sfputc_r>
 800eaf4:	1c43      	adds	r3, r0, #1
 800eaf6:	d1f3      	bne.n	800eae0 <__sfputs_r+0xa>
 800eaf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eafc <_vfiprintf_r>:
 800eafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb00:	460d      	mov	r5, r1
 800eb02:	b09d      	sub	sp, #116	; 0x74
 800eb04:	4614      	mov	r4, r2
 800eb06:	4698      	mov	r8, r3
 800eb08:	4606      	mov	r6, r0
 800eb0a:	b118      	cbz	r0, 800eb14 <_vfiprintf_r+0x18>
 800eb0c:	6983      	ldr	r3, [r0, #24]
 800eb0e:	b90b      	cbnz	r3, 800eb14 <_vfiprintf_r+0x18>
 800eb10:	f7fd fb64 	bl	800c1dc <__sinit>
 800eb14:	4b89      	ldr	r3, [pc, #548]	; (800ed3c <_vfiprintf_r+0x240>)
 800eb16:	429d      	cmp	r5, r3
 800eb18:	d11b      	bne.n	800eb52 <_vfiprintf_r+0x56>
 800eb1a:	6875      	ldr	r5, [r6, #4]
 800eb1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb1e:	07d9      	lsls	r1, r3, #31
 800eb20:	d405      	bmi.n	800eb2e <_vfiprintf_r+0x32>
 800eb22:	89ab      	ldrh	r3, [r5, #12]
 800eb24:	059a      	lsls	r2, r3, #22
 800eb26:	d402      	bmi.n	800eb2e <_vfiprintf_r+0x32>
 800eb28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb2a:	f7fd fc1a 	bl	800c362 <__retarget_lock_acquire_recursive>
 800eb2e:	89ab      	ldrh	r3, [r5, #12]
 800eb30:	071b      	lsls	r3, r3, #28
 800eb32:	d501      	bpl.n	800eb38 <_vfiprintf_r+0x3c>
 800eb34:	692b      	ldr	r3, [r5, #16]
 800eb36:	b9eb      	cbnz	r3, 800eb74 <_vfiprintf_r+0x78>
 800eb38:	4629      	mov	r1, r5
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	f7fe fb3c 	bl	800d1b8 <__swsetup_r>
 800eb40:	b1c0      	cbz	r0, 800eb74 <_vfiprintf_r+0x78>
 800eb42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb44:	07dc      	lsls	r4, r3, #31
 800eb46:	d50e      	bpl.n	800eb66 <_vfiprintf_r+0x6a>
 800eb48:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4c:	b01d      	add	sp, #116	; 0x74
 800eb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb52:	4b7b      	ldr	r3, [pc, #492]	; (800ed40 <_vfiprintf_r+0x244>)
 800eb54:	429d      	cmp	r5, r3
 800eb56:	d101      	bne.n	800eb5c <_vfiprintf_r+0x60>
 800eb58:	68b5      	ldr	r5, [r6, #8]
 800eb5a:	e7df      	b.n	800eb1c <_vfiprintf_r+0x20>
 800eb5c:	4b79      	ldr	r3, [pc, #484]	; (800ed44 <_vfiprintf_r+0x248>)
 800eb5e:	429d      	cmp	r5, r3
 800eb60:	bf08      	it	eq
 800eb62:	68f5      	ldreq	r5, [r6, #12]
 800eb64:	e7da      	b.n	800eb1c <_vfiprintf_r+0x20>
 800eb66:	89ab      	ldrh	r3, [r5, #12]
 800eb68:	0598      	lsls	r0, r3, #22
 800eb6a:	d4ed      	bmi.n	800eb48 <_vfiprintf_r+0x4c>
 800eb6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb6e:	f7fd fbf9 	bl	800c364 <__retarget_lock_release_recursive>
 800eb72:	e7e9      	b.n	800eb48 <_vfiprintf_r+0x4c>
 800eb74:	2300      	movs	r3, #0
 800eb76:	9309      	str	r3, [sp, #36]	; 0x24
 800eb78:	2320      	movs	r3, #32
 800eb7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb82:	2330      	movs	r3, #48	; 0x30
 800eb84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed48 <_vfiprintf_r+0x24c>
 800eb88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb8c:	f04f 0901 	mov.w	r9, #1
 800eb90:	4623      	mov	r3, r4
 800eb92:	469a      	mov	sl, r3
 800eb94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb98:	b10a      	cbz	r2, 800eb9e <_vfiprintf_r+0xa2>
 800eb9a:	2a25      	cmp	r2, #37	; 0x25
 800eb9c:	d1f9      	bne.n	800eb92 <_vfiprintf_r+0x96>
 800eb9e:	ebba 0b04 	subs.w	fp, sl, r4
 800eba2:	d00b      	beq.n	800ebbc <_vfiprintf_r+0xc0>
 800eba4:	465b      	mov	r3, fp
 800eba6:	4622      	mov	r2, r4
 800eba8:	4629      	mov	r1, r5
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f7ff ff93 	bl	800ead6 <__sfputs_r>
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	f000 80aa 	beq.w	800ed0a <_vfiprintf_r+0x20e>
 800ebb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebb8:	445a      	add	r2, fp
 800ebba:	9209      	str	r2, [sp, #36]	; 0x24
 800ebbc:	f89a 3000 	ldrb.w	r3, [sl]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f000 80a2 	beq.w	800ed0a <_vfiprintf_r+0x20e>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebd0:	f10a 0a01 	add.w	sl, sl, #1
 800ebd4:	9304      	str	r3, [sp, #16]
 800ebd6:	9307      	str	r3, [sp, #28]
 800ebd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebdc:	931a      	str	r3, [sp, #104]	; 0x68
 800ebde:	4654      	mov	r4, sl
 800ebe0:	2205      	movs	r2, #5
 800ebe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe6:	4858      	ldr	r0, [pc, #352]	; (800ed48 <_vfiprintf_r+0x24c>)
 800ebe8:	f7f1 fad2 	bl	8000190 <memchr>
 800ebec:	9a04      	ldr	r2, [sp, #16]
 800ebee:	b9d8      	cbnz	r0, 800ec28 <_vfiprintf_r+0x12c>
 800ebf0:	06d1      	lsls	r1, r2, #27
 800ebf2:	bf44      	itt	mi
 800ebf4:	2320      	movmi	r3, #32
 800ebf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebfa:	0713      	lsls	r3, r2, #28
 800ebfc:	bf44      	itt	mi
 800ebfe:	232b      	movmi	r3, #43	; 0x2b
 800ec00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec04:	f89a 3000 	ldrb.w	r3, [sl]
 800ec08:	2b2a      	cmp	r3, #42	; 0x2a
 800ec0a:	d015      	beq.n	800ec38 <_vfiprintf_r+0x13c>
 800ec0c:	9a07      	ldr	r2, [sp, #28]
 800ec0e:	4654      	mov	r4, sl
 800ec10:	2000      	movs	r0, #0
 800ec12:	f04f 0c0a 	mov.w	ip, #10
 800ec16:	4621      	mov	r1, r4
 800ec18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec1c:	3b30      	subs	r3, #48	; 0x30
 800ec1e:	2b09      	cmp	r3, #9
 800ec20:	d94e      	bls.n	800ecc0 <_vfiprintf_r+0x1c4>
 800ec22:	b1b0      	cbz	r0, 800ec52 <_vfiprintf_r+0x156>
 800ec24:	9207      	str	r2, [sp, #28]
 800ec26:	e014      	b.n	800ec52 <_vfiprintf_r+0x156>
 800ec28:	eba0 0308 	sub.w	r3, r0, r8
 800ec2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ec30:	4313      	orrs	r3, r2
 800ec32:	9304      	str	r3, [sp, #16]
 800ec34:	46a2      	mov	sl, r4
 800ec36:	e7d2      	b.n	800ebde <_vfiprintf_r+0xe2>
 800ec38:	9b03      	ldr	r3, [sp, #12]
 800ec3a:	1d19      	adds	r1, r3, #4
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	9103      	str	r1, [sp, #12]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	bfbb      	ittet	lt
 800ec44:	425b      	neglt	r3, r3
 800ec46:	f042 0202 	orrlt.w	r2, r2, #2
 800ec4a:	9307      	strge	r3, [sp, #28]
 800ec4c:	9307      	strlt	r3, [sp, #28]
 800ec4e:	bfb8      	it	lt
 800ec50:	9204      	strlt	r2, [sp, #16]
 800ec52:	7823      	ldrb	r3, [r4, #0]
 800ec54:	2b2e      	cmp	r3, #46	; 0x2e
 800ec56:	d10c      	bne.n	800ec72 <_vfiprintf_r+0x176>
 800ec58:	7863      	ldrb	r3, [r4, #1]
 800ec5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ec5c:	d135      	bne.n	800ecca <_vfiprintf_r+0x1ce>
 800ec5e:	9b03      	ldr	r3, [sp, #12]
 800ec60:	1d1a      	adds	r2, r3, #4
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	9203      	str	r2, [sp, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	bfb8      	it	lt
 800ec6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec6e:	3402      	adds	r4, #2
 800ec70:	9305      	str	r3, [sp, #20]
 800ec72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed58 <_vfiprintf_r+0x25c>
 800ec76:	7821      	ldrb	r1, [r4, #0]
 800ec78:	2203      	movs	r2, #3
 800ec7a:	4650      	mov	r0, sl
 800ec7c:	f7f1 fa88 	bl	8000190 <memchr>
 800ec80:	b140      	cbz	r0, 800ec94 <_vfiprintf_r+0x198>
 800ec82:	2340      	movs	r3, #64	; 0x40
 800ec84:	eba0 000a 	sub.w	r0, r0, sl
 800ec88:	fa03 f000 	lsl.w	r0, r3, r0
 800ec8c:	9b04      	ldr	r3, [sp, #16]
 800ec8e:	4303      	orrs	r3, r0
 800ec90:	3401      	adds	r4, #1
 800ec92:	9304      	str	r3, [sp, #16]
 800ec94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec98:	482c      	ldr	r0, [pc, #176]	; (800ed4c <_vfiprintf_r+0x250>)
 800ec9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec9e:	2206      	movs	r2, #6
 800eca0:	f7f1 fa76 	bl	8000190 <memchr>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d03f      	beq.n	800ed28 <_vfiprintf_r+0x22c>
 800eca8:	4b29      	ldr	r3, [pc, #164]	; (800ed50 <_vfiprintf_r+0x254>)
 800ecaa:	bb1b      	cbnz	r3, 800ecf4 <_vfiprintf_r+0x1f8>
 800ecac:	9b03      	ldr	r3, [sp, #12]
 800ecae:	3307      	adds	r3, #7
 800ecb0:	f023 0307 	bic.w	r3, r3, #7
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	9303      	str	r3, [sp, #12]
 800ecb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecba:	443b      	add	r3, r7
 800ecbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ecbe:	e767      	b.n	800eb90 <_vfiprintf_r+0x94>
 800ecc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecc4:	460c      	mov	r4, r1
 800ecc6:	2001      	movs	r0, #1
 800ecc8:	e7a5      	b.n	800ec16 <_vfiprintf_r+0x11a>
 800ecca:	2300      	movs	r3, #0
 800eccc:	3401      	adds	r4, #1
 800ecce:	9305      	str	r3, [sp, #20]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	f04f 0c0a 	mov.w	ip, #10
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecdc:	3a30      	subs	r2, #48	; 0x30
 800ecde:	2a09      	cmp	r2, #9
 800ece0:	d903      	bls.n	800ecea <_vfiprintf_r+0x1ee>
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d0c5      	beq.n	800ec72 <_vfiprintf_r+0x176>
 800ece6:	9105      	str	r1, [sp, #20]
 800ece8:	e7c3      	b.n	800ec72 <_vfiprintf_r+0x176>
 800ecea:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecee:	4604      	mov	r4, r0
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	e7f0      	b.n	800ecd6 <_vfiprintf_r+0x1da>
 800ecf4:	ab03      	add	r3, sp, #12
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	462a      	mov	r2, r5
 800ecfa:	4b16      	ldr	r3, [pc, #88]	; (800ed54 <_vfiprintf_r+0x258>)
 800ecfc:	a904      	add	r1, sp, #16
 800ecfe:	4630      	mov	r0, r6
 800ed00:	f7fd fcf2 	bl	800c6e8 <_printf_float>
 800ed04:	4607      	mov	r7, r0
 800ed06:	1c78      	adds	r0, r7, #1
 800ed08:	d1d6      	bne.n	800ecb8 <_vfiprintf_r+0x1bc>
 800ed0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed0c:	07d9      	lsls	r1, r3, #31
 800ed0e:	d405      	bmi.n	800ed1c <_vfiprintf_r+0x220>
 800ed10:	89ab      	ldrh	r3, [r5, #12]
 800ed12:	059a      	lsls	r2, r3, #22
 800ed14:	d402      	bmi.n	800ed1c <_vfiprintf_r+0x220>
 800ed16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed18:	f7fd fb24 	bl	800c364 <__retarget_lock_release_recursive>
 800ed1c:	89ab      	ldrh	r3, [r5, #12]
 800ed1e:	065b      	lsls	r3, r3, #25
 800ed20:	f53f af12 	bmi.w	800eb48 <_vfiprintf_r+0x4c>
 800ed24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed26:	e711      	b.n	800eb4c <_vfiprintf_r+0x50>
 800ed28:	ab03      	add	r3, sp, #12
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	462a      	mov	r2, r5
 800ed2e:	4b09      	ldr	r3, [pc, #36]	; (800ed54 <_vfiprintf_r+0x258>)
 800ed30:	a904      	add	r1, sp, #16
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7fd ff7c 	bl	800cc30 <_printf_i>
 800ed38:	e7e4      	b.n	800ed04 <_vfiprintf_r+0x208>
 800ed3a:	bf00      	nop
 800ed3c:	08014134 	.word	0x08014134
 800ed40:	08014154 	.word	0x08014154
 800ed44:	08014114 	.word	0x08014114
 800ed48:	08014394 	.word	0x08014394
 800ed4c:	0801439e 	.word	0x0801439e
 800ed50:	0800c6e9 	.word	0x0800c6e9
 800ed54:	0800ead7 	.word	0x0800ead7
 800ed58:	0801439a 	.word	0x0801439a

0800ed5c <_read_r>:
 800ed5c:	b538      	push	{r3, r4, r5, lr}
 800ed5e:	4d07      	ldr	r5, [pc, #28]	; (800ed7c <_read_r+0x20>)
 800ed60:	4604      	mov	r4, r0
 800ed62:	4608      	mov	r0, r1
 800ed64:	4611      	mov	r1, r2
 800ed66:	2200      	movs	r2, #0
 800ed68:	602a      	str	r2, [r5, #0]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	f7f2 ff1c 	bl	8001ba8 <_read>
 800ed70:	1c43      	adds	r3, r0, #1
 800ed72:	d102      	bne.n	800ed7a <_read_r+0x1e>
 800ed74:	682b      	ldr	r3, [r5, #0]
 800ed76:	b103      	cbz	r3, 800ed7a <_read_r+0x1e>
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	bd38      	pop	{r3, r4, r5, pc}
 800ed7c:	200007e8 	.word	0x200007e8

0800ed80 <__assert_func>:
 800ed80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed82:	4614      	mov	r4, r2
 800ed84:	461a      	mov	r2, r3
 800ed86:	4b09      	ldr	r3, [pc, #36]	; (800edac <__assert_func+0x2c>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4605      	mov	r5, r0
 800ed8c:	68d8      	ldr	r0, [r3, #12]
 800ed8e:	b14c      	cbz	r4, 800eda4 <__assert_func+0x24>
 800ed90:	4b07      	ldr	r3, [pc, #28]	; (800edb0 <__assert_func+0x30>)
 800ed92:	9100      	str	r1, [sp, #0]
 800ed94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed98:	4906      	ldr	r1, [pc, #24]	; (800edb4 <__assert_func+0x34>)
 800ed9a:	462b      	mov	r3, r5
 800ed9c:	f000 f80e 	bl	800edbc <fiprintf>
 800eda0:	f000 f88e 	bl	800eec0 <abort>
 800eda4:	4b04      	ldr	r3, [pc, #16]	; (800edb8 <__assert_func+0x38>)
 800eda6:	461c      	mov	r4, r3
 800eda8:	e7f3      	b.n	800ed92 <__assert_func+0x12>
 800edaa:	bf00      	nop
 800edac:	20000134 	.word	0x20000134
 800edb0:	080143a5 	.word	0x080143a5
 800edb4:	080143b2 	.word	0x080143b2
 800edb8:	080143e0 	.word	0x080143e0

0800edbc <fiprintf>:
 800edbc:	b40e      	push	{r1, r2, r3}
 800edbe:	b503      	push	{r0, r1, lr}
 800edc0:	4601      	mov	r1, r0
 800edc2:	ab03      	add	r3, sp, #12
 800edc4:	4805      	ldr	r0, [pc, #20]	; (800eddc <fiprintf+0x20>)
 800edc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800edca:	6800      	ldr	r0, [r0, #0]
 800edcc:	9301      	str	r3, [sp, #4]
 800edce:	f7ff fe95 	bl	800eafc <_vfiprintf_r>
 800edd2:	b002      	add	sp, #8
 800edd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800edd8:	b003      	add	sp, #12
 800edda:	4770      	bx	lr
 800eddc:	20000134 	.word	0x20000134

0800ede0 <_fstat_r>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	4d07      	ldr	r5, [pc, #28]	; (800ee00 <_fstat_r+0x20>)
 800ede4:	2300      	movs	r3, #0
 800ede6:	4604      	mov	r4, r0
 800ede8:	4608      	mov	r0, r1
 800edea:	4611      	mov	r1, r2
 800edec:	602b      	str	r3, [r5, #0]
 800edee:	f7f2 ff20 	bl	8001c32 <_fstat>
 800edf2:	1c43      	adds	r3, r0, #1
 800edf4:	d102      	bne.n	800edfc <_fstat_r+0x1c>
 800edf6:	682b      	ldr	r3, [r5, #0]
 800edf8:	b103      	cbz	r3, 800edfc <_fstat_r+0x1c>
 800edfa:	6023      	str	r3, [r4, #0]
 800edfc:	bd38      	pop	{r3, r4, r5, pc}
 800edfe:	bf00      	nop
 800ee00:	200007e8 	.word	0x200007e8

0800ee04 <_isatty_r>:
 800ee04:	b538      	push	{r3, r4, r5, lr}
 800ee06:	4d06      	ldr	r5, [pc, #24]	; (800ee20 <_isatty_r+0x1c>)
 800ee08:	2300      	movs	r3, #0
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	4608      	mov	r0, r1
 800ee0e:	602b      	str	r3, [r5, #0]
 800ee10:	f7f2 ff1f 	bl	8001c52 <_isatty>
 800ee14:	1c43      	adds	r3, r0, #1
 800ee16:	d102      	bne.n	800ee1e <_isatty_r+0x1a>
 800ee18:	682b      	ldr	r3, [r5, #0]
 800ee1a:	b103      	cbz	r3, 800ee1e <_isatty_r+0x1a>
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	bd38      	pop	{r3, r4, r5, pc}
 800ee20:	200007e8 	.word	0x200007e8

0800ee24 <__ascii_mbtowc>:
 800ee24:	b082      	sub	sp, #8
 800ee26:	b901      	cbnz	r1, 800ee2a <__ascii_mbtowc+0x6>
 800ee28:	a901      	add	r1, sp, #4
 800ee2a:	b142      	cbz	r2, 800ee3e <__ascii_mbtowc+0x1a>
 800ee2c:	b14b      	cbz	r3, 800ee42 <__ascii_mbtowc+0x1e>
 800ee2e:	7813      	ldrb	r3, [r2, #0]
 800ee30:	600b      	str	r3, [r1, #0]
 800ee32:	7812      	ldrb	r2, [r2, #0]
 800ee34:	1e10      	subs	r0, r2, #0
 800ee36:	bf18      	it	ne
 800ee38:	2001      	movne	r0, #1
 800ee3a:	b002      	add	sp, #8
 800ee3c:	4770      	bx	lr
 800ee3e:	4610      	mov	r0, r2
 800ee40:	e7fb      	b.n	800ee3a <__ascii_mbtowc+0x16>
 800ee42:	f06f 0001 	mvn.w	r0, #1
 800ee46:	e7f8      	b.n	800ee3a <__ascii_mbtowc+0x16>

0800ee48 <_realloc_r>:
 800ee48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4c:	4680      	mov	r8, r0
 800ee4e:	4614      	mov	r4, r2
 800ee50:	460e      	mov	r6, r1
 800ee52:	b921      	cbnz	r1, 800ee5e <_realloc_r+0x16>
 800ee54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee58:	4611      	mov	r1, r2
 800ee5a:	f7fd bb31 	b.w	800c4c0 <_malloc_r>
 800ee5e:	b92a      	cbnz	r2, 800ee6c <_realloc_r+0x24>
 800ee60:	f7fd fac2 	bl	800c3e8 <_free_r>
 800ee64:	4625      	mov	r5, r4
 800ee66:	4628      	mov	r0, r5
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	f000 f82f 	bl	800eece <_malloc_usable_size_r>
 800ee70:	4284      	cmp	r4, r0
 800ee72:	4607      	mov	r7, r0
 800ee74:	d802      	bhi.n	800ee7c <_realloc_r+0x34>
 800ee76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee7a:	d812      	bhi.n	800eea2 <_realloc_r+0x5a>
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	4640      	mov	r0, r8
 800ee80:	f7fd fb1e 	bl	800c4c0 <_malloc_r>
 800ee84:	4605      	mov	r5, r0
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d0ed      	beq.n	800ee66 <_realloc_r+0x1e>
 800ee8a:	42bc      	cmp	r4, r7
 800ee8c:	4622      	mov	r2, r4
 800ee8e:	4631      	mov	r1, r6
 800ee90:	bf28      	it	cs
 800ee92:	463a      	movcs	r2, r7
 800ee94:	f7fd fa78 	bl	800c388 <memcpy>
 800ee98:	4631      	mov	r1, r6
 800ee9a:	4640      	mov	r0, r8
 800ee9c:	f7fd faa4 	bl	800c3e8 <_free_r>
 800eea0:	e7e1      	b.n	800ee66 <_realloc_r+0x1e>
 800eea2:	4635      	mov	r5, r6
 800eea4:	e7df      	b.n	800ee66 <_realloc_r+0x1e>

0800eea6 <__ascii_wctomb>:
 800eea6:	b149      	cbz	r1, 800eebc <__ascii_wctomb+0x16>
 800eea8:	2aff      	cmp	r2, #255	; 0xff
 800eeaa:	bf85      	ittet	hi
 800eeac:	238a      	movhi	r3, #138	; 0x8a
 800eeae:	6003      	strhi	r3, [r0, #0]
 800eeb0:	700a      	strbls	r2, [r1, #0]
 800eeb2:	f04f 30ff 	movhi.w	r0, #4294967295
 800eeb6:	bf98      	it	ls
 800eeb8:	2001      	movls	r0, #1
 800eeba:	4770      	bx	lr
 800eebc:	4608      	mov	r0, r1
 800eebe:	4770      	bx	lr

0800eec0 <abort>:
 800eec0:	b508      	push	{r3, lr}
 800eec2:	2006      	movs	r0, #6
 800eec4:	f000 f834 	bl	800ef30 <raise>
 800eec8:	2001      	movs	r0, #1
 800eeca:	f7f2 fe63 	bl	8001b94 <_exit>

0800eece <_malloc_usable_size_r>:
 800eece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eed2:	1f18      	subs	r0, r3, #4
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	bfbc      	itt	lt
 800eed8:	580b      	ldrlt	r3, [r1, r0]
 800eeda:	18c0      	addlt	r0, r0, r3
 800eedc:	4770      	bx	lr

0800eede <_raise_r>:
 800eede:	291f      	cmp	r1, #31
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4604      	mov	r4, r0
 800eee4:	460d      	mov	r5, r1
 800eee6:	d904      	bls.n	800eef2 <_raise_r+0x14>
 800eee8:	2316      	movs	r3, #22
 800eeea:	6003      	str	r3, [r0, #0]
 800eeec:	f04f 30ff 	mov.w	r0, #4294967295
 800eef0:	bd38      	pop	{r3, r4, r5, pc}
 800eef2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eef4:	b112      	cbz	r2, 800eefc <_raise_r+0x1e>
 800eef6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eefa:	b94b      	cbnz	r3, 800ef10 <_raise_r+0x32>
 800eefc:	4620      	mov	r0, r4
 800eefe:	f000 f831 	bl	800ef64 <_getpid_r>
 800ef02:	462a      	mov	r2, r5
 800ef04:	4601      	mov	r1, r0
 800ef06:	4620      	mov	r0, r4
 800ef08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef0c:	f000 b818 	b.w	800ef40 <_kill_r>
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d00a      	beq.n	800ef2a <_raise_r+0x4c>
 800ef14:	1c59      	adds	r1, r3, #1
 800ef16:	d103      	bne.n	800ef20 <_raise_r+0x42>
 800ef18:	2316      	movs	r3, #22
 800ef1a:	6003      	str	r3, [r0, #0]
 800ef1c:	2001      	movs	r0, #1
 800ef1e:	e7e7      	b.n	800eef0 <_raise_r+0x12>
 800ef20:	2400      	movs	r4, #0
 800ef22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef26:	4628      	mov	r0, r5
 800ef28:	4798      	blx	r3
 800ef2a:	2000      	movs	r0, #0
 800ef2c:	e7e0      	b.n	800eef0 <_raise_r+0x12>
	...

0800ef30 <raise>:
 800ef30:	4b02      	ldr	r3, [pc, #8]	; (800ef3c <raise+0xc>)
 800ef32:	4601      	mov	r1, r0
 800ef34:	6818      	ldr	r0, [r3, #0]
 800ef36:	f7ff bfd2 	b.w	800eede <_raise_r>
 800ef3a:	bf00      	nop
 800ef3c:	20000134 	.word	0x20000134

0800ef40 <_kill_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4d07      	ldr	r5, [pc, #28]	; (800ef60 <_kill_r+0x20>)
 800ef44:	2300      	movs	r3, #0
 800ef46:	4604      	mov	r4, r0
 800ef48:	4608      	mov	r0, r1
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	602b      	str	r3, [r5, #0]
 800ef4e:	f7f2 fe11 	bl	8001b74 <_kill>
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	d102      	bne.n	800ef5c <_kill_r+0x1c>
 800ef56:	682b      	ldr	r3, [r5, #0]
 800ef58:	b103      	cbz	r3, 800ef5c <_kill_r+0x1c>
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	bd38      	pop	{r3, r4, r5, pc}
 800ef5e:	bf00      	nop
 800ef60:	200007e8 	.word	0x200007e8

0800ef64 <_getpid_r>:
 800ef64:	f7f2 bdfe 	b.w	8001b64 <_getpid>

0800ef68 <fmaxf>:
 800ef68:	b508      	push	{r3, lr}
 800ef6a:	ed2d 8b02 	vpush	{d8}
 800ef6e:	eeb0 8a40 	vmov.f32	s16, s0
 800ef72:	eef0 8a60 	vmov.f32	s17, s1
 800ef76:	f000 f82d 	bl	800efd4 <__fpclassifyf>
 800ef7a:	b148      	cbz	r0, 800ef90 <fmaxf+0x28>
 800ef7c:	eeb0 0a68 	vmov.f32	s0, s17
 800ef80:	f000 f828 	bl	800efd4 <__fpclassifyf>
 800ef84:	b130      	cbz	r0, 800ef94 <fmaxf+0x2c>
 800ef86:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ef8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8e:	dc01      	bgt.n	800ef94 <fmaxf+0x2c>
 800ef90:	eeb0 8a68 	vmov.f32	s16, s17
 800ef94:	eeb0 0a48 	vmov.f32	s0, s16
 800ef98:	ecbd 8b02 	vpop	{d8}
 800ef9c:	bd08      	pop	{r3, pc}

0800ef9e <fminf>:
 800ef9e:	b508      	push	{r3, lr}
 800efa0:	ed2d 8b02 	vpush	{d8}
 800efa4:	eeb0 8a40 	vmov.f32	s16, s0
 800efa8:	eef0 8a60 	vmov.f32	s17, s1
 800efac:	f000 f812 	bl	800efd4 <__fpclassifyf>
 800efb0:	b148      	cbz	r0, 800efc6 <fminf+0x28>
 800efb2:	eeb0 0a68 	vmov.f32	s0, s17
 800efb6:	f000 f80d 	bl	800efd4 <__fpclassifyf>
 800efba:	b130      	cbz	r0, 800efca <fminf+0x2c>
 800efbc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800efc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc4:	d401      	bmi.n	800efca <fminf+0x2c>
 800efc6:	eeb0 8a68 	vmov.f32	s16, s17
 800efca:	eeb0 0a48 	vmov.f32	s0, s16
 800efce:	ecbd 8b02 	vpop	{d8}
 800efd2:	bd08      	pop	{r3, pc}

0800efd4 <__fpclassifyf>:
 800efd4:	ee10 3a10 	vmov	r3, s0
 800efd8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800efdc:	d00d      	beq.n	800effa <__fpclassifyf+0x26>
 800efde:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800efe2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800efe6:	d30a      	bcc.n	800effe <__fpclassifyf+0x2a>
 800efe8:	4b07      	ldr	r3, [pc, #28]	; (800f008 <__fpclassifyf+0x34>)
 800efea:	1e42      	subs	r2, r0, #1
 800efec:	429a      	cmp	r2, r3
 800efee:	d908      	bls.n	800f002 <__fpclassifyf+0x2e>
 800eff0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800eff4:	4258      	negs	r0, r3
 800eff6:	4158      	adcs	r0, r3
 800eff8:	4770      	bx	lr
 800effa:	2002      	movs	r0, #2
 800effc:	4770      	bx	lr
 800effe:	2004      	movs	r0, #4
 800f000:	4770      	bx	lr
 800f002:	2003      	movs	r0, #3
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	007ffffe 	.word	0x007ffffe

0800f00c <roundf>:
 800f00c:	ee10 0a10 	vmov	r0, s0
 800f010:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f014:	3a7f      	subs	r2, #127	; 0x7f
 800f016:	2a16      	cmp	r2, #22
 800f018:	dc15      	bgt.n	800f046 <roundf+0x3a>
 800f01a:	2a00      	cmp	r2, #0
 800f01c:	da08      	bge.n	800f030 <roundf+0x24>
 800f01e:	3201      	adds	r2, #1
 800f020:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800f024:	d101      	bne.n	800f02a <roundf+0x1e>
 800f026:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800f02a:	ee00 3a10 	vmov	s0, r3
 800f02e:	4770      	bx	lr
 800f030:	4907      	ldr	r1, [pc, #28]	; (800f050 <roundf+0x44>)
 800f032:	4111      	asrs	r1, r2
 800f034:	4208      	tst	r0, r1
 800f036:	d0fa      	beq.n	800f02e <roundf+0x22>
 800f038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f03c:	4113      	asrs	r3, r2
 800f03e:	4403      	add	r3, r0
 800f040:	ea23 0301 	bic.w	r3, r3, r1
 800f044:	e7f1      	b.n	800f02a <roundf+0x1e>
 800f046:	2a80      	cmp	r2, #128	; 0x80
 800f048:	d1f1      	bne.n	800f02e <roundf+0x22>
 800f04a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f04e:	4770      	bx	lr
 800f050:	007fffff 	.word	0x007fffff

0800f054 <expf>:
 800f054:	b508      	push	{r3, lr}
 800f056:	ed2d 8b02 	vpush	{d8}
 800f05a:	eef0 8a40 	vmov.f32	s17, s0
 800f05e:	f000 f85d 	bl	800f11c <__ieee754_expf>
 800f062:	eeb0 8a40 	vmov.f32	s16, s0
 800f066:	eeb0 0a68 	vmov.f32	s0, s17
 800f06a:	f000 f99f 	bl	800f3ac <finitef>
 800f06e:	b160      	cbz	r0, 800f08a <expf+0x36>
 800f070:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f0b0 <expf+0x5c>
 800f074:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f07c:	dd0a      	ble.n	800f094 <expf+0x40>
 800f07e:	f7fc ff7b 	bl	800bf78 <__errno>
 800f082:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800f0b4 <expf+0x60>
 800f086:	2322      	movs	r3, #34	; 0x22
 800f088:	6003      	str	r3, [r0, #0]
 800f08a:	eeb0 0a48 	vmov.f32	s0, s16
 800f08e:	ecbd 8b02 	vpop	{d8}
 800f092:	bd08      	pop	{r3, pc}
 800f094:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f0b8 <expf+0x64>
 800f098:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a0:	d5f3      	bpl.n	800f08a <expf+0x36>
 800f0a2:	f7fc ff69 	bl	800bf78 <__errno>
 800f0a6:	2322      	movs	r3, #34	; 0x22
 800f0a8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f0bc <expf+0x68>
 800f0ac:	6003      	str	r3, [r0, #0]
 800f0ae:	e7ec      	b.n	800f08a <expf+0x36>
 800f0b0:	42b17180 	.word	0x42b17180
 800f0b4:	7f800000 	.word	0x7f800000
 800f0b8:	c2cff1b5 	.word	0xc2cff1b5
 800f0bc:	00000000 	.word	0x00000000

0800f0c0 <log10f>:
 800f0c0:	b508      	push	{r3, lr}
 800f0c2:	ed2d 8b02 	vpush	{d8}
 800f0c6:	eeb0 8a40 	vmov.f32	s16, s0
 800f0ca:	f000 f8f5 	bl	800f2b8 <__ieee754_log10f>
 800f0ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800f0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d6:	d60f      	bvs.n	800f0f8 <log10f+0x38>
 800f0d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e0:	d80a      	bhi.n	800f0f8 <log10f+0x38>
 800f0e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ea:	d108      	bne.n	800f0fe <log10f+0x3e>
 800f0ec:	f7fc ff44 	bl	800bf78 <__errno>
 800f0f0:	2322      	movs	r3, #34	; 0x22
 800f0f2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800f114 <log10f+0x54>
 800f0f6:	6003      	str	r3, [r0, #0]
 800f0f8:	ecbd 8b02 	vpop	{d8}
 800f0fc:	bd08      	pop	{r3, pc}
 800f0fe:	f7fc ff3b 	bl	800bf78 <__errno>
 800f102:	ecbd 8b02 	vpop	{d8}
 800f106:	2321      	movs	r3, #33	; 0x21
 800f108:	6003      	str	r3, [r0, #0]
 800f10a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f10e:	4802      	ldr	r0, [pc, #8]	; (800f118 <log10f+0x58>)
 800f110:	f000 b95a 	b.w	800f3c8 <nanf>
 800f114:	ff800000 	.word	0xff800000
 800f118:	080143e0 	.word	0x080143e0

0800f11c <__ieee754_expf>:
 800f11c:	ee10 2a10 	vmov	r2, s0
 800f120:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f124:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f128:	d902      	bls.n	800f130 <__ieee754_expf+0x14>
 800f12a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f12e:	4770      	bx	lr
 800f130:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800f134:	d106      	bne.n	800f144 <__ieee754_expf+0x28>
 800f136:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800f270 <__ieee754_expf+0x154>
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	bf18      	it	ne
 800f13e:	eeb0 0a67 	vmovne.f32	s0, s15
 800f142:	4770      	bx	lr
 800f144:	484b      	ldr	r0, [pc, #300]	; (800f274 <__ieee754_expf+0x158>)
 800f146:	4282      	cmp	r2, r0
 800f148:	dd02      	ble.n	800f150 <__ieee754_expf+0x34>
 800f14a:	2000      	movs	r0, #0
 800f14c:	f000 b928 	b.w	800f3a0 <__math_oflowf>
 800f150:	2a00      	cmp	r2, #0
 800f152:	da05      	bge.n	800f160 <__ieee754_expf+0x44>
 800f154:	4a48      	ldr	r2, [pc, #288]	; (800f278 <__ieee754_expf+0x15c>)
 800f156:	4291      	cmp	r1, r2
 800f158:	d902      	bls.n	800f160 <__ieee754_expf+0x44>
 800f15a:	2000      	movs	r0, #0
 800f15c:	f000 b91a 	b.w	800f394 <__math_uflowf>
 800f160:	4a46      	ldr	r2, [pc, #280]	; (800f27c <__ieee754_expf+0x160>)
 800f162:	4291      	cmp	r1, r2
 800f164:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f168:	d952      	bls.n	800f210 <__ieee754_expf+0xf4>
 800f16a:	4a45      	ldr	r2, [pc, #276]	; (800f280 <__ieee754_expf+0x164>)
 800f16c:	4291      	cmp	r1, r2
 800f16e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f172:	d834      	bhi.n	800f1de <__ieee754_expf+0xc2>
 800f174:	4943      	ldr	r1, [pc, #268]	; (800f284 <__ieee754_expf+0x168>)
 800f176:	4411      	add	r1, r2
 800f178:	ed91 7a00 	vldr	s14, [r1]
 800f17c:	4942      	ldr	r1, [pc, #264]	; (800f288 <__ieee754_expf+0x16c>)
 800f17e:	440a      	add	r2, r1
 800f180:	edd2 7a00 	vldr	s15, [r2]
 800f184:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f188:	f1c3 0201 	rsb	r2, r3, #1
 800f18c:	1ad2      	subs	r2, r2, r3
 800f18e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f192:	ee20 6a00 	vmul.f32	s12, s0, s0
 800f196:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800f28c <__ieee754_expf+0x170>
 800f19a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f290 <__ieee754_expf+0x174>
 800f19e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800f1a2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800f294 <__ieee754_expf+0x178>
 800f1a6:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f1aa:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f298 <__ieee754_expf+0x17c>
 800f1ae:	eee5 6a06 	vfma.f32	s13, s10, s12
 800f1b2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f29c <__ieee754_expf+0x180>
 800f1b6:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f1ba:	eef0 6a40 	vmov.f32	s13, s0
 800f1be:	eee5 6a46 	vfms.f32	s13, s10, s12
 800f1c2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800f1c6:	ee20 5a26 	vmul.f32	s10, s0, s13
 800f1ca:	bb92      	cbnz	r2, 800f232 <__ieee754_expf+0x116>
 800f1cc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f1d0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800f1d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f1d8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800f1dc:	4770      	bx	lr
 800f1de:	4b30      	ldr	r3, [pc, #192]	; (800f2a0 <__ieee754_expf+0x184>)
 800f1e0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800f2a4 <__ieee754_expf+0x188>
 800f1e4:	eddf 6a30 	vldr	s13, [pc, #192]	; 800f2a8 <__ieee754_expf+0x18c>
 800f1e8:	4413      	add	r3, r2
 800f1ea:	edd3 7a00 	vldr	s15, [r3]
 800f1ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f1f2:	eeb0 7a40 	vmov.f32	s14, s0
 800f1f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1fa:	ee17 2a90 	vmov	r2, s15
 800f1fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f202:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f206:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f2ac <__ieee754_expf+0x190>
 800f20a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f20e:	e7be      	b.n	800f18e <__ieee754_expf+0x72>
 800f210:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800f214:	d20b      	bcs.n	800f22e <__ieee754_expf+0x112>
 800f216:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f2b0 <__ieee754_expf+0x194>
 800f21a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800f21e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800f222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f226:	dd02      	ble.n	800f22e <__ieee754_expf+0x112>
 800f228:	ee30 0a25 	vadd.f32	s0, s0, s11
 800f22c:	4770      	bx	lr
 800f22e:	2200      	movs	r2, #0
 800f230:	e7af      	b.n	800f192 <__ieee754_expf+0x76>
 800f232:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f236:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800f23a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800f23e:	bfb8      	it	lt
 800f240:	3264      	addlt	r2, #100	; 0x64
 800f242:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f246:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f24a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800f24e:	ee17 3a90 	vmov	r3, s15
 800f252:	bfab      	itete	ge
 800f254:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f258:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f25c:	ee00 3a10 	vmovge	s0, r3
 800f260:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800f2b4 <__ieee754_expf+0x198>
 800f264:	bfbc      	itt	lt
 800f266:	ee00 3a10 	vmovlt	s0, r3
 800f26a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f26e:	4770      	bx	lr
 800f270:	00000000 	.word	0x00000000
 800f274:	42b17217 	.word	0x42b17217
 800f278:	42cff1b5 	.word	0x42cff1b5
 800f27c:	3eb17218 	.word	0x3eb17218
 800f280:	3f851591 	.word	0x3f851591
 800f284:	080144f4 	.word	0x080144f4
 800f288:	080144fc 	.word	0x080144fc
 800f28c:	3331bb4c 	.word	0x3331bb4c
 800f290:	b5ddea0e 	.word	0xb5ddea0e
 800f294:	388ab355 	.word	0x388ab355
 800f298:	bb360b61 	.word	0xbb360b61
 800f29c:	3e2aaaab 	.word	0x3e2aaaab
 800f2a0:	080144ec 	.word	0x080144ec
 800f2a4:	3fb8aa3b 	.word	0x3fb8aa3b
 800f2a8:	3f317180 	.word	0x3f317180
 800f2ac:	3717f7d1 	.word	0x3717f7d1
 800f2b0:	7149f2ca 	.word	0x7149f2ca
 800f2b4:	0d800000 	.word	0x0d800000

0800f2b8 <__ieee754_log10f>:
 800f2b8:	b508      	push	{r3, lr}
 800f2ba:	ee10 2a10 	vmov	r2, s0
 800f2be:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f2c2:	ed2d 8b02 	vpush	{d8}
 800f2c6:	d108      	bne.n	800f2da <__ieee754_log10f+0x22>
 800f2c8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800f350 <__ieee754_log10f+0x98>
 800f2cc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f354 <__ieee754_log10f+0x9c>
 800f2d0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f2d4:	ecbd 8b02 	vpop	{d8}
 800f2d8:	bd08      	pop	{r3, pc}
 800f2da:	2a00      	cmp	r2, #0
 800f2dc:	da02      	bge.n	800f2e4 <__ieee754_log10f+0x2c>
 800f2de:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f2e2:	e7f3      	b.n	800f2cc <__ieee754_log10f+0x14>
 800f2e4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f2e8:	db02      	blt.n	800f2f0 <__ieee754_log10f+0x38>
 800f2ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f2ee:	e7f1      	b.n	800f2d4 <__ieee754_log10f+0x1c>
 800f2f0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f2f4:	bfbf      	itttt	lt
 800f2f6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800f358 <__ieee754_log10f+0xa0>
 800f2fa:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f2fe:	f06f 0118 	mvnlt.w	r1, #24
 800f302:	ee17 2a90 	vmovlt	r2, s15
 800f306:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800f30a:	bfa8      	it	ge
 800f30c:	2100      	movge	r1, #0
 800f30e:	3b7f      	subs	r3, #127	; 0x7f
 800f310:	440b      	add	r3, r1
 800f312:	0fd9      	lsrs	r1, r3, #31
 800f314:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f318:	ee07 3a90 	vmov	s15, r3
 800f31c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f320:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800f324:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f328:	ee00 3a10 	vmov	s0, r3
 800f32c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f330:	f000 f850 	bl	800f3d4 <__ieee754_logf>
 800f334:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f35c <__ieee754_log10f+0xa4>
 800f338:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f33c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f360 <__ieee754_log10f+0xa8>
 800f340:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f344:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f364 <__ieee754_log10f+0xac>
 800f348:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f34c:	e7c2      	b.n	800f2d4 <__ieee754_log10f+0x1c>
 800f34e:	bf00      	nop
 800f350:	cc000000 	.word	0xcc000000
 800f354:	00000000 	.word	0x00000000
 800f358:	4c000000 	.word	0x4c000000
 800f35c:	3ede5bd9 	.word	0x3ede5bd9
 800f360:	355427db 	.word	0x355427db
 800f364:	3e9a2080 	.word	0x3e9a2080

0800f368 <with_errnof>:
 800f368:	b513      	push	{r0, r1, r4, lr}
 800f36a:	4604      	mov	r4, r0
 800f36c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f370:	f7fc fe02 	bl	800bf78 <__errno>
 800f374:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f378:	6004      	str	r4, [r0, #0]
 800f37a:	b002      	add	sp, #8
 800f37c:	bd10      	pop	{r4, pc}

0800f37e <xflowf>:
 800f37e:	b130      	cbz	r0, 800f38e <xflowf+0x10>
 800f380:	eef1 7a40 	vneg.f32	s15, s0
 800f384:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f388:	2022      	movs	r0, #34	; 0x22
 800f38a:	f7ff bfed 	b.w	800f368 <with_errnof>
 800f38e:	eef0 7a40 	vmov.f32	s15, s0
 800f392:	e7f7      	b.n	800f384 <xflowf+0x6>

0800f394 <__math_uflowf>:
 800f394:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f39c <__math_uflowf+0x8>
 800f398:	f7ff bff1 	b.w	800f37e <xflowf>
 800f39c:	10000000 	.word	0x10000000

0800f3a0 <__math_oflowf>:
 800f3a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f3a8 <__math_oflowf+0x8>
 800f3a4:	f7ff bfeb 	b.w	800f37e <xflowf>
 800f3a8:	70000000 	.word	0x70000000

0800f3ac <finitef>:
 800f3ac:	b082      	sub	sp, #8
 800f3ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f3b2:	9801      	ldr	r0, [sp, #4]
 800f3b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f3b8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f3bc:	bfac      	ite	ge
 800f3be:	2000      	movge	r0, #0
 800f3c0:	2001      	movlt	r0, #1
 800f3c2:	b002      	add	sp, #8
 800f3c4:	4770      	bx	lr
	...

0800f3c8 <nanf>:
 800f3c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f3d0 <nanf+0x8>
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	7fc00000 	.word	0x7fc00000

0800f3d4 <__ieee754_logf>:
 800f3d4:	ee10 3a10 	vmov	r3, s0
 800f3d8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f3dc:	d106      	bne.n	800f3ec <__ieee754_logf+0x18>
 800f3de:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f574 <__ieee754_logf+0x1a0>
 800f3e2:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f578 <__ieee754_logf+0x1a4>
 800f3e6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f3ea:	4770      	bx	lr
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	da02      	bge.n	800f3f6 <__ieee754_logf+0x22>
 800f3f0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f3f4:	e7f5      	b.n	800f3e2 <__ieee754_logf+0xe>
 800f3f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f3fa:	db02      	blt.n	800f402 <__ieee754_logf+0x2e>
 800f3fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f400:	4770      	bx	lr
 800f402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f406:	bfb8      	it	lt
 800f408:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800f57c <__ieee754_logf+0x1a8>
 800f40c:	485c      	ldr	r0, [pc, #368]	; (800f580 <__ieee754_logf+0x1ac>)
 800f40e:	bfbe      	ittt	lt
 800f410:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f414:	f06f 0118 	mvnlt.w	r1, #24
 800f418:	ee17 3a90 	vmovlt	r3, s15
 800f41c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f420:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f424:	4418      	add	r0, r3
 800f426:	bfa8      	it	ge
 800f428:	2100      	movge	r1, #0
 800f42a:	3a7f      	subs	r2, #127	; 0x7f
 800f42c:	440a      	add	r2, r1
 800f42e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f432:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f436:	4319      	orrs	r1, r3
 800f438:	ee00 1a10 	vmov	s0, r1
 800f43c:	4951      	ldr	r1, [pc, #324]	; (800f584 <__ieee754_logf+0x1b0>)
 800f43e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f442:	f103 000f 	add.w	r0, r3, #15
 800f446:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f44a:	4001      	ands	r1, r0
 800f44c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f450:	bb89      	cbnz	r1, 800f4b6 <__ieee754_logf+0xe2>
 800f452:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45a:	d10f      	bne.n	800f47c <__ieee754_logf+0xa8>
 800f45c:	2a00      	cmp	r2, #0
 800f45e:	f000 8085 	beq.w	800f56c <__ieee754_logf+0x198>
 800f462:	ee07 2a90 	vmov	s15, r2
 800f466:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f588 <__ieee754_logf+0x1b4>
 800f46a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f58c <__ieee754_logf+0x1b8>
 800f46e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f472:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f476:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f47a:	4770      	bx	lr
 800f47c:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f590 <__ieee754_logf+0x1bc>
 800f480:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f484:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f488:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f490:	b912      	cbnz	r2, 800f498 <__ieee754_logf+0xc4>
 800f492:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f496:	4770      	bx	lr
 800f498:	ee07 2a90 	vmov	s15, r2
 800f49c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f588 <__ieee754_logf+0x1b4>
 800f4a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4a4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f4a8:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f4ac:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f58c <__ieee754_logf+0x1b8>
 800f4b0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f4b4:	4770      	bx	lr
 800f4b6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f4ba:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f4be:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f594 <__ieee754_logf+0x1c0>
 800f4c2:	eddf 4a35 	vldr	s9, [pc, #212]	; 800f598 <__ieee754_logf+0x1c4>
 800f4c6:	4935      	ldr	r1, [pc, #212]	; (800f59c <__ieee754_logf+0x1c8>)
 800f4c8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f4cc:	4419      	add	r1, r3
 800f4ce:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f4d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f4d6:	430b      	orrs	r3, r1
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	ee07 2a90 	vmov	s15, r2
 800f4de:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f4e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f4e6:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f4ea:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f5a0 <__ieee754_logf+0x1cc>
 800f4ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f4f2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f5a4 <__ieee754_logf+0x1d0>
 800f4f6:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f4fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f5a8 <__ieee754_logf+0x1d4>
 800f4fe:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f502:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800f5ac <__ieee754_logf+0x1d8>
 800f506:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f50a:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f5b0 <__ieee754_logf+0x1dc>
 800f50e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f512:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f516:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f51a:	dd1c      	ble.n	800f556 <__ieee754_logf+0x182>
 800f51c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f520:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f524:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f52c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f530:	b922      	cbnz	r2, 800f53c <__ieee754_logf+0x168>
 800f532:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f536:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f53a:	4770      	bx	lr
 800f53c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800f588 <__ieee754_logf+0x1b4>
 800f540:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f544:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f548:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f54c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f58c <__ieee754_logf+0x1b8>
 800f550:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f554:	4770      	bx	lr
 800f556:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f55a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f55e:	2a00      	cmp	r2, #0
 800f560:	d0e9      	beq.n	800f536 <__ieee754_logf+0x162>
 800f562:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f588 <__ieee754_logf+0x1b4>
 800f566:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f56a:	e7ed      	b.n	800f548 <__ieee754_logf+0x174>
 800f56c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f578 <__ieee754_logf+0x1a4>
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	cc000000 	.word	0xcc000000
 800f578:	00000000 	.word	0x00000000
 800f57c:	4c000000 	.word	0x4c000000
 800f580:	004afb20 	.word	0x004afb20
 800f584:	007ffff0 	.word	0x007ffff0
 800f588:	3717f7d1 	.word	0x3717f7d1
 800f58c:	3f317180 	.word	0x3f317180
 800f590:	3eaaaaab 	.word	0x3eaaaaab
 800f594:	3e1cd04f 	.word	0x3e1cd04f
 800f598:	3e178897 	.word	0x3e178897
 800f59c:	ffcf5c30 	.word	0xffcf5c30
 800f5a0:	3e638e29 	.word	0x3e638e29
 800f5a4:	3ecccccd 	.word	0x3ecccccd
 800f5a8:	3e3a3325 	.word	0x3e3a3325
 800f5ac:	3e924925 	.word	0x3e924925
 800f5b0:	3f2aaaab 	.word	0x3f2aaaab

0800f5b4 <_init>:
 800f5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b6:	bf00      	nop
 800f5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ba:	bc08      	pop	{r3}
 800f5bc:	469e      	mov	lr, r3
 800f5be:	4770      	bx	lr

0800f5c0 <_fini>:
 800f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c2:	bf00      	nop
 800f5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5c6:	bc08      	pop	{r3}
 800f5c8:	469e      	mov	lr, r3
 800f5ca:	4770      	bx	lr
