
STM_infrared.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000577c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  080059bc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004ec  20000010  080059c8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200004fc  080059c8  000204fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b241  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003218  00000000  00000000  0003b281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c98  00000000  00000000  0003e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b70  00000000  00000000  00040138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00024618  00000000  00000000  00041ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b0c9  00000000  00000000  000662c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f0e9c  00000000  00000000  00081389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00172225  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007ab0  00000000  00000000  00172278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080058a0 	.word	0x080058a0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080058a0 	.word	0x080058a0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <Average>:

static uint32_t buffor[NUMBER_OF_SAMPLES] = {0};


static uint32_t Average(uint32_t *tab, int N)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	uint32_t avg = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < N; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	e00a      	b.n	800049e <Average+0x2a>
    {
        avg += tab[i];
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	4413      	add	r3, r2
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	4413      	add	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < N; i++)
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	3301      	adds	r3, #1
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68ba      	ldr	r2, [r7, #8]
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	dbf0      	blt.n	8000488 <Average+0x14>
    }

    return (avg/(uint32_t)N);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <Average_Distance>:


uint32_t Average_Distance(const uint32_t distance)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if (sample_counter < NUMBER_OF_SAMPLES)
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <Average_Distance+0x4c>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b09      	cmp	r3, #9
 80004ca:	d80d      	bhi.n	80004e8 <Average_Distance+0x2c>
	{
		buffor[sample_counter] = distance;
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <Average_Distance+0x4c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <Average_Distance+0x50>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		sample_counter++;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <Average_Distance+0x4c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <Average_Distance+0x4c>)
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e009      	b.n	80004fc <Average_Distance+0x40>
	}
	else
	{
		avg_distance = Average(buffor, NUMBER_OF_SAMPLES);
 80004e8:	210a      	movs	r1, #10
 80004ea:	4808      	ldr	r0, [pc, #32]	; (800050c <Average_Distance+0x50>)
 80004ec:	f7ff ffc2 	bl	8000474 <Average>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <Average_Distance+0x54>)
 80004f4:	6013      	str	r3, [r2, #0]
		sample_counter = 0;
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <Average_Distance+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
	}
	return avg_distance;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <Average_Distance+0x54>)
 80004fe:	681b      	ldr	r3, [r3, #0]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000034 	.word	0x20000034
 8000510:	20000030 	.word	0x20000030

08000514 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000524:	f023 0218 	bic.w	r2, r3, #24
 8000528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800054e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4013      	ands	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000564:	68fb      	ldr	r3, [r7, #12]
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800057a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800057e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4313      	orrs	r3, r2
 8000588:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fc4a 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f81c 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fa00 	bl	80009b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b4:	f000 f9ec 	bl	8000990 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f974 	bl	80008a4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005bc:	f000 f9c0 	bl	8000940 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80005c0:	f000 f8bc 	bl	800073c <MX_ADC1_Init>
  MX_TIM2_Init();
 80005c4:	f000 f920 	bl	8000808 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &adc_measurement, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	4904      	ldr	r1, [pc, #16]	; (80005dc <main+0x38>)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <main+0x3c>)
 80005ce:	f000 ffd1 	bl	8001574 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <main+0x40>)
 80005d4:	f004 f9aa 	bl	800492c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x34>
 80005da:	bf00      	nop
 80005dc:	2000005c 	.word	0x2000005c
 80005e0:	20000064 	.word	0x20000064
 80005e4:	200001b8 	.word	0x200001b8

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0ae      	sub	sp, #184	; 0xb8
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005f2:	2248      	movs	r2, #72	; 0x48
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 f94a 	bl	8005890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2250      	movs	r2, #80	; 0x50
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 f93a 	bl	8005890 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800061c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800062a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800062c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	f023 0303 	bic.w	r3, r3, #3
 8000636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f002 fb20 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ff65 	bl	8000514 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064a:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <SystemClock_Config+0x150>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000652:	4a39      	ldr	r2, [pc, #228]	; (8000738 <SystemClock_Config+0x150>)
 8000654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	4b37      	ldr	r3, [pc, #220]	; (8000738 <SystemClock_Config+0x150>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000666:	2327      	movs	r3, #39	; 0x27
 8000668:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000678:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800067a:	2301      	movs	r3, #1
 800067c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800068c:	2360      	movs	r3, #96	; 0x60
 800068e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fe85 	bl	80033ac <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a8:	f000 f9ea 	bl	8000a80 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006ac:	236f      	movs	r3, #111	; 0x6f
 80006ae:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006b0:	2302      	movs	r3, #2
 80006b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 f9f8 	bl	8003ac4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006da:	f000 f9d1 	bl	8000a80 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80006de:	f242 5301 	movw	r3, #9473	; 0x2501
 80006e2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80006e4:	2318      	movs	r3, #24
 80006e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80006e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80006ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006f2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80006f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80006fa:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80006fe:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000704:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800070a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000714:	2300      	movs	r3, #0
 8000716:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fe22 	bl	8004364 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x142>
  {
    Error_Handler();
 8000726:	f000 f9ab 	bl	8000a80 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800072a:	f003 ff91 	bl	8004650 <HAL_RCCEx_EnableMSIPLLMode>
}
 800072e:	bf00      	nop
 8000730:	37b8      	adds	r7, #184	; 0xb8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	58000400 	.word	0x58000400

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_ADC1_Init+0xc0>)
 8000754:	4a2a      	ldr	r2, [pc, #168]	; (8000800 <MX_ADC1_Init+0xc4>)
 8000756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <MX_ADC1_Init+0xc0>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_ADC1_Init+0xc0>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <MX_ADC1_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_ADC1_Init+0xc0>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_ADC1_Init+0xc0>)
 8000772:	2204      	movs	r2, #4
 8000774:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC1_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC1_Init+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ADC1_Init+0xc0>)
 8000784:	2201      	movs	r2, #1
 8000786:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC1_Init+0xc0>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC1_Init+0xc0>)
 8000792:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_ADC1_Init+0xc0>)
 800079a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_ADC1_Init+0xc0>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC1_Init+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_ADC1_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <MX_ADC1_Init+0xc0>)
 80007b8:	f000 fd90 	bl	80012dc <HAL_ADC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007c2:	f000 f95d 	bl	8000a80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC1_Init+0xc8>)
 80007c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ca:	2306      	movs	r3, #6
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007ce:	2307      	movs	r3, #7
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d2:	237f      	movs	r3, #127	; 0x7f
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d6:	2304      	movs	r3, #4
 80007d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_ADC1_Init+0xc0>)
 80007e4:	f000 ff5e 	bl	80016a4 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80007ee:	f000 f947 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000064 	.word	0x20000064
 8000800:	50040000 	.word	0x50040000
 8000804:	14f00020 	.word	0x14f00020

08000808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000830:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM2_Init+0x98>)
 800083e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_TIM2_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000852:	f004 f814 	bl	800487e <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 f910 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_TIM2_Init+0x98>)
 800086e:	f004 f8a3 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000878:	f000 f902 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800087c:	2320      	movs	r3, #32
 800087e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_TIM2_Init+0x98>)
 800088a:	f004 fa5b 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000894:	f000 f8f4 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001b8 	.word	0x200001b8

080008a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008aa:	4a24      	ldr	r2, [pc, #144]	; (800093c <MX_USART1_UART_Init+0x98>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008bc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008cc:	220c      	movs	r2, #12
 80008ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4812      	ldr	r0, [pc, #72]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008f0:	f004 faa8 	bl	8004e44 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80008fa:	f000 f8c1 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_USART1_UART_Init+0x94>)
 8000902:	f004 fe9b 	bl	800563c <HAL_UARTEx_SetTxFifoThreshold>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800090c:	f000 f8b8 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_USART1_UART_Init+0x94>)
 8000914:	f004 fed0 	bl	80056b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800091e:	f000 f8af 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART1_UART_Init+0x94>)
 8000924:	f004 fe51 	bl	80055ca <HAL_UARTEx_DisableFifoMode>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800092e:	f000 f8a7 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000c8 	.word	0x200000c8
 800093c:	40013800 	.word	0x40013800

08000940 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <MX_USB_PCD_Init+0x4c>)
 8000948:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USB_PCD_Init+0x48>)
 800094c:	2208      	movs	r2, #8
 800094e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000952:	2202      	movs	r2, #2
 8000954:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000958:	2202      	movs	r2, #2
 800095a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_USB_PCD_Init+0x48>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_USB_PCD_Init+0x48>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_USB_PCD_Init+0x48>)
 8000976:	f002 f875 	bl	8002a64 <HAL_PCD_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000980:	f000 f87e 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000204 	.word	0x20000204
 800098c:	40006800 	.word	0x40006800

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000994:	2004      	movs	r0, #4
 8000996:	f7ff fdd3 	bl	8000540 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff fdd0 	bl	8000540 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	200b      	movs	r0, #11
 80009a6:	f001 fc2c 	bl	8002202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009aa:	200b      	movs	r0, #11
 80009ac:	f001 fc43 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	2004      	movs	r0, #4
 80009ca:	f7ff fdd2 	bl	8000572 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fdcf 	bl	8000572 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	2002      	movs	r0, #2
 80009d6:	f7ff fdcc 	bl	8000572 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2008      	movs	r0, #8
 80009dc:	f7ff fdc9 	bl	8000572 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2123      	movs	r1, #35	; 0x23
 80009e4:	4814      	ldr	r0, [pc, #80]	; (8000a38 <MX_GPIO_Init+0x84>)
 80009e6:	f002 f825 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ea:	2310      	movs	r3, #16
 80009ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4810      	ldr	r0, [pc, #64]	; (8000a3c <MX_GPIO_Init+0x88>)
 80009fc:	f001 feaa 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a00:	2323      	movs	r3, #35	; 0x23
 8000a02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <MX_GPIO_Init+0x84>)
 8000a16:	f001 fe9d 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_GPIO_Init+0x8c>)
 8000a2c:	f001 fe92 	bl	8002754 <HAL_GPIO_Init>

}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	48000400 	.word	0x48000400
 8000a3c:	48000800 	.word	0x48000800
 8000a40:	48000c00 	.word	0x48000c00

08000a44 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	if(adc_measurement == 0)
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_ADC_ConvCpltCallback+0x34>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00d      	beq.n	8000a70 <HAL_ADC_ConvCpltCallback+0x2c>
		return;

	distance_cm = Average_Distance(CONVERT_ADC_TO_DISTANCE(adc_measurement));
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_ADC_ConvCpltCallback+0x34>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f44f 4212 	mov.w	r2, #37376	; 0x9200
 8000a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a60:	3b04      	subs	r3, #4
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fd2a 	bl	80004bc <Average_Distance>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_ADC_ConvCpltCallback+0x38>)
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e000      	b.n	8000a72 <HAL_ADC_ConvCpltCallback+0x2e>
		return;
 8000a70:	bf00      	nop
}
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000005c 	.word	0x2000005c
 8000a7c:	20000060 	.word	0x20000060

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>

08000a8a <LL_AHB2_GRP1_EnableClock>:
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b085      	sub	sp, #20
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <HAL_ADC_MspInit+0xa8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d13e      	bne.n	8000bd0 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b52:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b56:	f7ff ff98 	bl	8000a8a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff ff95 	bl	8000a8a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b60:	2301      	movs	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b64:	2303      	movs	r3, #3
 8000b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f001 fded 	bl	8002754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_ADC_MspInit+0xb0>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000b82:	2205      	movs	r2, #5
 8000b84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000bb6:	f001 fb59 	bl	800226c <HAL_DMA_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8000bc0:	f7ff ff5e 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000bc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_ADC_MspInit+0xac>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	50040000 	.word	0x50040000
 8000bdc:	20000158 	.word	0x20000158
 8000be0:	40020008 	.word	0x40020008

08000be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d102      	bne.n	8000bfc <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff ff60 	bl	8000abc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x58>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d116      	bne.n	8000c54 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c2a:	f7ff ff60 	bl	8000aee <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f7ff ff2b 	bl	8000a8a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c34:	23c0      	movs	r3, #192	; 0xc0
 8000c36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c44:	2307      	movs	r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <HAL_UART_MspInit+0x5c>)
 8000c50:	f001 fd80 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40013800 	.word	0x40013800
 8000c60:	48000400 	.word	0x48000400

08000c64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_PCD_MspInit+0x5c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d118      	bne.n	8000cb8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff feff 	bl	8000a8a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f001 fd52 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cb0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000cb4:	f7ff ff02 	bl	8000abc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40006800 	.word	0x40006800

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 f8f0 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <DMA1_Channel1_IRQHandler+0x10>)
 8000d1e:	f001 fbc8 	bl	80024b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000158 	.word	0x20000158

08000d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <SystemInit+0x98>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <SystemInit+0x98>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d54:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d58:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <SystemInit+0x9c>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d76:	f023 0305 	bic.w	r3, r3, #5
 8000d7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d96:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <SystemInit+0xa0>)
 8000d98:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <SystemInit+0xa0>)
 8000da0:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	faf6fefb 	.word	0xfaf6fefb
 8000dcc:	22041000 	.word	0x22041000

08000dd0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000dd0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd4:	3304      	adds	r3, #4

08000dd6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000dda:	d3f9      	bcc.n	8000dd0 <CopyDataInit>
  bx lr
 8000ddc:	4770      	bx	lr

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000dde:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000de0:	3004      	adds	r0, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000de2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>
  bx lr
 8000de6:	4770      	bx	lr

08000de8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000dea:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dec:	f7ff ff9e 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <LoopForever+0x8>)
 8000df2:	490c      	ldr	r1, [pc, #48]	; (8000e24 <LoopForever+0xc>)
 8000df4:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <LoopForever+0x10>)
 8000df6:	2300      	movs	r3, #0
 8000df8:	f7ff ffed 	bl	8000dd6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <LoopForever+0x14>)
 8000dfe:	490c      	ldr	r1, [pc, #48]	; (8000e30 <LoopForever+0x18>)
 8000e00:	2300      	movs	r3, #0
 8000e02:	f7ff ffee 	bl	8000de2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <LoopForever+0x1c>)
 8000e08:	490b      	ldr	r1, [pc, #44]	; (8000e38 <LoopForever+0x20>)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f7ff ffe9 	bl	8000de2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e10:	f004 fd1a 	bl	8005848 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000e14:	f7ff fbc6 	bl	80005a4 <main>

08000e18 <LoopForever>:

LoopForever:
  b LoopForever
 8000e18:	e7fe      	b.n	8000e18 <LoopForever>
 8000e1a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000e1c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e20:	20000004 	.word	0x20000004
 8000e24:	20000010 	.word	0x20000010
 8000e28:	080059bc 	.word	0x080059bc
  INIT_BSS _sbss, _ebss
 8000e2c:	20000010 	.word	0x20000010
 8000e30:	200004fc 	.word	0x200004fc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e34:	20030000 	.word	0x20030000
 8000e38:	20030000 	.word	0x20030000

08000e3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_Init+0x3c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_Init+0x3c>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f001 f9c8 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f80f 	bl	8000e80 <HAL_InitTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	e001      	b.n	8000e72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6e:	f7ff fe57 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	58004000 	.word	0x58004000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_InitTick+0x6c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d024      	beq.n	8000ede <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e94:	f002 ffc2 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_InitTick+0x6c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 f9d0 	bl	8002252 <HAL_SYSTICK_Config>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10f      	bne.n	8000ed8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	d809      	bhi.n	8000ed2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec6:	f001 f99c 	bl	8002202 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <HAL_InitTick+0x70>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e007      	b.n	8000ee2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e004      	b.n	8000ee2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e001      	b.n	8000ee2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000000c 	.word	0x2000000c
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	200004f8 	.word	0x200004f8

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200004f8 	.word	0x200004f8

08000f34 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTickPrio+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008

08000f4c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]
#endif
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3360      	adds	r3, #96	; 0x60
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <LL_ADC_SetOffset+0x44>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	03fff000 	.word	0x03fff000

08000ffc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3360      	adds	r3, #96	; 0x60
 800100a:	461a      	mov	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3360      	adds	r3, #96	; 0x60
 8001038:	461a      	mov	r2, r3
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001076:	2300      	movs	r3, #0
#endif
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3330      	adds	r3, #48	; 0x30
 8001094:	461a      	mov	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	4413      	add	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	211f      	movs	r1, #31
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	401a      	ands	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	0e9b      	lsrs	r3, r3, #26
 80010bc:	f003 011f 	and.w	r1, r3, #31
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	431a      	orrs	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 80010d0:	bf00      	nop
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3314      	adds	r3, #20
 80010ec:	461a      	mov	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	0e5b      	lsrs	r3, r3, #25
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	4413      	add	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	0d1b      	lsrs	r3, r3, #20
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2107      	movs	r1, #7
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	401a      	ands	r2, r3
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	0d1b      	lsrs	r3, r3, #20
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	431a      	orrs	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8001126:	bf00      	nop
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800114c:	43db      	mvns	r3, r3
 800114e:	401a      	ands	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0318 	and.w	r3, r3, #24
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001158:	40d9      	lsrs	r1, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	400b      	ands	r3, r1
 800115e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001162:	431a      	orrs	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	0007ffff 	.word	0x0007ffff

0800117c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800118c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6093      	str	r3, [r2, #8]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b4:	d101      	bne.n	80011ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001204:	d101      	bne.n	800120a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <LL_ADC_IsEnabled+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_IsEnabled+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001276:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800127a:	f043 0204 	orr.w	r2, r3, #4
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d101      	bne.n	80012a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d101      	bne.n	80012cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e12e      	b.n	8001558 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc11 	bl	8000b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff3d 	bl	80011a0 <LL_ADC_IsDeepPowerDownEnabled>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff23 	bl	800117c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff58 	bl	80011f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d115      	bne.n	8001372 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff3c 	bl	80011c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001350:	4b83      	ldr	r3, [pc, #524]	; (8001560 <HAL_ADC_Init+0x284>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_ADC_Init+0x288>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	099b      	lsrs	r3, r3, #6
 800135e:	3301      	adds	r3, #1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001364:	e002      	b.n	800136c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3b01      	subs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff3a 	bl	80011f0 <LL_ADC_IsInternalRegulatorEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10d      	bne.n	800139e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001386:	f043 0210 	orr.w	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff73 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 80013a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 80c7 	bne.w	8001546 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 80c3 	bne.w	8001546 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013c8:	f043 0202 	orr.w	r2, r3, #2
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff33 	bl	8001240 <LL_ADC_IsEnabled>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10b      	bne.n	80013f8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013e0:	4861      	ldr	r0, [pc, #388]	; (8001568 <HAL_ADC_Init+0x28c>)
 80013e2:	f7ff ff2d 	bl	8001240 <LL_ADC_IsEnabled>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d105      	bne.n	80013f8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4619      	mov	r1, r3
 80013f2:	485e      	ldr	r0, [pc, #376]	; (800156c <HAL_ADC_Init+0x290>)
 80013f4:	f7ff fdaa 	bl	8000f4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7e5b      	ldrb	r3, [r3, #25]
 80013fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001402:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001408:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800140e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001416:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001418:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d106      	bne.n	8001438 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	3b01      	subs	r3, #1
 8001430:	045b      	lsls	r3, r3, #17
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_ADC_Init+0x294>)
 800145c:	4013      	ands	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	430b      	orrs	r3, r1
 8001466:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff0e 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 8001472:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff1b 	bl	80012b4 <LL_ADC_INJ_IsConversionOngoing>
 800147e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d13d      	bne.n	8001502 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d13a      	bne.n	8001502 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001490:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001498:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014a8:	f023 0302 	bic.w	r3, r3, #2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	69b9      	ldr	r1, [r7, #24]
 80014b2:	430b      	orrs	r3, r1
 80014b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d118      	bne.n	80014f2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014dc:	4311      	orrs	r1, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014e2:	430a      	orrs	r2, r1
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	e007      	b.n	8001502 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d10c      	bne.n	8001524 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	f023 010f 	bic.w	r1, r3, #15
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	1e5a      	subs	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
 8001522:	e007      	b.n	8001534 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 020f 	bic.w	r2, r2, #15
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	f023 0303 	bic.w	r3, r3, #3
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
 8001544:	e007      	b.n	8001556 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154a:	f043 0210 	orr.w	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001556:	7ffb      	ldrb	r3, [r7, #31]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000004 	.word	0x20000004
 8001564:	053e2d63 	.word	0x053e2d63
 8001568:	50040000 	.word	0x50040000
 800156c:	50040300 	.word	0x50040300
 8001570:	fff0c007 	.word	0xfff0c007

08001574 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fe82 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d167      	bne.n	8001660 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_ADC_Start_DMA+0x2a>
 800159a:	2302      	movs	r3, #2
 800159c:	e063      	b.n	8001666 <HAL_ADC_Start_DMA+0xf2>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 fc42 	bl	8001e30 <ADC_Enable>
 80015ac:	4603      	mov	r3, r0
 80015ae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d14f      	bne.n	8001656 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f023 0206 	bic.w	r2, r3, #6
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	659a      	str	r2, [r3, #88]	; 0x58
 80015e2:	e002      	b.n	80015ea <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <HAL_ADC_Start_DMA+0xfc>)
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_ADC_Start_DMA+0x100>)
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_ADC_Start_DMA+0x104>)
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	221c      	movs	r2, #28
 8001608:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0210 	orr.w	r2, r2, #16
 8001620:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3340      	adds	r3, #64	; 0x40
 800163c:	4619      	mov	r1, r3
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f000 febb 	bl	80023bc <HAL_DMA_Start_IT>
 8001646:	4603      	mov	r3, r0
 8001648:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fe09 	bl	8001266 <LL_ADC_REG_StartConversion>
 8001654:	e006      	b.n	8001664 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800165e:	e001      	b.n	8001664 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001660:	2302      	movs	r3, #2
 8001662:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001664:	7dfb      	ldrb	r3, [r7, #23]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	08001f25 	.word	0x08001f25
 8001674:	08001ffd 	.word	0x08001ffd
 8001678:	08002019 	.word	0x08002019

0800167c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0b6      	sub	sp, #216	; 0xd8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x22>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e39f      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x762>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fddb 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 8384 	bne.w	8001de8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	f7ff fcc9 	bl	8001084 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fdc9 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 80016fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fdd5 	bl	80012b4 <LL_ADC_INJ_IsConversionOngoing>
 800170a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800170e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 81a6 	bne.w	8001a64 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 81a1 	bne.w	8001a64 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	461a      	mov	r2, r3
 8001730:	f7ff fcd4 	bl	80010dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d00a      	beq.n	800176c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6919      	ldr	r1, [r3, #16]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001766:	f7ff fc25 	bl	8000fb4 <LL_ADC_SetOffset>
 800176a:	e17b      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fc42 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10a      	bne.n	8001798 <HAL_ADC_ConfigChannel+0xf4>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fc37 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	0e9b      	lsrs	r3, r3, #26
 8001792:	f003 021f 	and.w	r2, r3, #31
 8001796:	e01e      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x132>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fc2c 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80017c6:	2320      	movs	r3, #32
 80017c8:	e004      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80017ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x14a>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0e9b      	lsrs	r3, r3, #26
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	e018      	b.n	8001820 <HAL_ADC_ConfigChannel+0x17c>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017fa:	fa93 f3a3 	rbit	r3, r3
 80017fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001806:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800180a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001812:	2320      	movs	r3, #32
 8001814:	e004      	b.n	8001820 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	429a      	cmp	r2, r3
 8001822:	d106      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fbfb 	bl	8001028 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2101      	movs	r1, #1
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fbdf 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <HAL_ADC_ConfigChannel+0x1ba>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fbd4 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	e01e      	b.n	800189c <HAL_ADC_ConfigChannel+0x1f8>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2101      	movs	r1, #1
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fbc9 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800187c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001880:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800188c:	2320      	movs	r3, #32
 800188e:	e004      	b.n	800189a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x210>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0e9b      	lsrs	r3, r3, #26
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	e018      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x242>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80018d8:	2320      	movs	r3, #32
 80018da:	e004      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80018dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d106      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	2101      	movs	r1, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb98 	bl	8001028 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2102      	movs	r1, #2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fb7c 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x280>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2102      	movs	r1, #2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fb71 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	0e9b      	lsrs	r3, r3, #26
 800191e:	f003 021f 	and.w	r2, r3, #31
 8001922:	e01e      	b.n	8001962 <HAL_ADC_ConfigChannel+0x2be>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2102      	movs	r1, #2
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fb66 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001942:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800194a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8001952:	2320      	movs	r3, #32
 8001954:	e004      	b.n	8001960 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <HAL_ADC_ConfigChannel+0x2d6>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0e9b      	lsrs	r3, r3, #26
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	e016      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x304>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800198c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800198e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800199a:	2320      	movs	r3, #32
 800199c:	e004      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800199e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d106      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	2102      	movs	r1, #2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fb37 	bl	8001028 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2103      	movs	r1, #3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb1b 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10a      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x342>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2103      	movs	r1, #3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb10 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	0e9b      	lsrs	r3, r3, #26
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	e017      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x372>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2103      	movs	r1, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb05 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a00:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e003      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x38a>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0e9b      	lsrs	r3, r3, #26
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	e011      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x3ae>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e003      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8001a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d106      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fae2 	bl	8001028 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fbe9 	bl	8001240 <LL_ADC_IsEnabled>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 81c2 	bne.w	8001dfa <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f7ff fb56 	bl	8001134 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a8e      	ldr	r2, [pc, #568]	; (8001cc8 <HAL_ADC_ConfigChannel+0x624>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	f040 8130 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10b      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x418>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0e9b      	lsrs	r3, r3, #26
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	bf94      	ite	ls
 8001ab4:	2301      	movls	r3, #1
 8001ab6:	2300      	movhi	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	e019      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x44c>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001acc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	e003      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	2b09      	cmp	r3, #9
 8001ae8:	bf94      	ite	ls
 8001aea:	2301      	movls	r3, #1
 8001aec:	2300      	movhi	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d079      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d107      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x46c>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	3301      	adds	r3, #1
 8001b08:	069b      	lsls	r3, r3, #26
 8001b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b0e:	e015      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x498>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	069b      	lsls	r3, r3, #26
 8001b38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x4b8>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	e017      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4e8>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001b74:	2320      	movs	r3, #32
 8001b76:	e003      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3301      	adds	r3, #1
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	ea42 0103 	orr.w	r1, r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x50e>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	051b      	lsls	r3, r3, #20
 8001bb0:	e018      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x540>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001bca:	2320      	movs	r3, #32
 8001bcc:	e003      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be4:	430b      	orrs	r3, r1
 8001be6:	e080      	b.n	8001cea <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x560>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	069b      	lsls	r3, r3, #26
 8001bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c02:	e015      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x58c>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	e003      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	069b      	lsls	r3, r3, #26
 8001c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	3301      	adds	r3, #1
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	e017      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x5dc>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	61fb      	str	r3, [r7, #28]
  return result;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	e003      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	ea42 0103 	orr.w	r1, r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10d      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x608>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b1e      	subs	r3, #30
 8001ca4:	051b      	lsls	r3, r3, #20
 8001ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001caa:	e01d      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x644>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	613b      	str	r3, [r7, #16]
  return result;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e005      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x630>
 8001cc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f003 021f 	and.w	r2, r3, #31
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b1e      	subs	r3, #30
 8001ce2:	051b      	lsls	r3, r3, #20
 8001ce4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	6892      	ldr	r2, [r2, #8]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7ff f9f4 	bl	80010dc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b45      	ldr	r3, [pc, #276]	; (8001e10 <HAL_ADC_ConfigChannel+0x76c>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d07c      	beq.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d00:	4844      	ldr	r0, [pc, #272]	; (8001e14 <HAL_ADC_ConfigChannel+0x770>)
 8001d02:	f7ff f949 	bl	8000f98 <LL_ADC_GetCommonPathInternalCh>
 8001d06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d0a:	4843      	ldr	r0, [pc, #268]	; (8001e18 <HAL_ADC_ConfigChannel+0x774>)
 8001d0c:	f7ff fa98 	bl	8001240 <LL_ADC_IsEnabled>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d15e      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a40      	ldr	r2, [pc, #256]	; (8001e1c <HAL_ADC_ConfigChannel+0x778>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d127      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x6cc>
 8001d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d121      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a39      	ldr	r2, [pc, #228]	; (8001e18 <HAL_ADC_ConfigChannel+0x774>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d161      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4834      	ldr	r0, [pc, #208]	; (8001e14 <HAL_ADC_ConfigChannel+0x770>)
 8001d42:	f7ff f916 	bl	8000f72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <HAL_ADC_ConfigChannel+0x77c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	4a35      	ldr	r2, [pc, #212]	; (8001e24 <HAL_ADC_ConfigChannel+0x780>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d6e:	e044      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <HAL_ADC_ConfigChannel+0x784>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d113      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x6fe>
 8001d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_ADC_ConfigChannel+0x774>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d134      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481e      	ldr	r0, [pc, #120]	; (8001e14 <HAL_ADC_ConfigChannel+0x770>)
 8001d9c:	f7ff f8e9 	bl	8000f72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da0:	e02b      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_ADC_ConfigChannel+0x788>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d126      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
 8001dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d120      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_ADC_ConfigChannel+0x774>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11b      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4811      	ldr	r0, [pc, #68]	; (8001e14 <HAL_ADC_ConfigChannel+0x770>)
 8001dce:	f7ff f8d0 	bl	8000f72 <LL_ADC_SetCommonPathInternalCh>
 8001dd2:	e012      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001de6:	e008      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8001e02:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	37d8      	adds	r7, #216	; 0xd8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	80080000 	.word	0x80080000
 8001e14:	50040300 	.word	0x50040300
 8001e18:	50040000 	.word	0x50040000
 8001e1c:	c7520000 	.word	0xc7520000
 8001e20:	20000004 	.word	0x20000004
 8001e24:	053e2d63 	.word	0x053e2d63
 8001e28:	cb840000 	.word	0xcb840000
 8001e2c:	80000001 	.word	0x80000001

08001e30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f9fd 	bl	8001240 <LL_ADC_IsEnabled>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d15e      	bne.n	8001f0a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <ADC_Enable+0xe4>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e04a      	b.n	8001f0c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f9cc 	bl	8001218 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e80:	4825      	ldr	r0, [pc, #148]	; (8001f18 <ADC_Enable+0xe8>)
 8001e82:	f7ff f889 	bl	8000f98 <LL_ADC_GetCommonPathInternalCh>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00f      	beq.n	8001eb0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e90:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <ADC_Enable+0xec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <ADC_Enable+0xf0>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001ea2:	e002      	b.n	8001eaa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f834 	bl	8000f1c <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eb6:	e021      	b.n	8001efc <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f9bf 	bl	8001240 <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f9a3 	bl	8001218 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ed2:	f7ff f823 	bl	8000f1c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d90d      	bls.n	8001efc <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	f043 0210 	orr.w	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e007      	b.n	8001f0c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d1d6      	bne.n	8001eb8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	8000003f 	.word	0x8000003f
 8001f18:	50040300 	.word	0x50040300
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	053e2d63 	.word	0x053e2d63

08001f24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d14b      	bne.n	8001fd6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d021      	beq.n	8001f9c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f87e 	bl	800105e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d032      	beq.n	8001fce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d12b      	bne.n	8001fce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d11f      	bne.n	8001fce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
 8001f9a:	e018      	b.n	8001fce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d111      	bne.n	8001fce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7fe fd38 	bl	8000a44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fd4:	e00e      	b.n	8001ff4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7ff fb54 	bl	8001690 <HAL_ADC_ErrorCallback>
}
 8001fe8:	e004      	b.n	8001ff4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fb36 	bl	800167c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	f043 0204 	orr.w	r2, r3, #4
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff fb26 	bl	8001690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <__NVIC_EnableIRQ+0x38>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	; (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	; (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b8:	d301      	bcc.n	80021be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <SysTick_Config+0x40>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c6:	210f      	movs	r1, #15
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f7ff ff8e 	bl	80020ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <SysTick_Config+0x40>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <SysTick_Config+0x40>)
 80021d8:	2207      	movs	r2, #7
 80021da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	e000e010 	.word	0xe000e010

080021ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff29 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff40 	bl	8002094 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff90 	bl	8002140 <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5f 	bl	80020ec <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff33 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa4 	bl	80021a8 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e08e      	b.n	800239c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_DMA_Init+0x138>)
 8002286:	429a      	cmp	r2, r3
 8002288:	d80f      	bhi.n	80022aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	4b45      	ldr	r3, [pc, #276]	; (80023a8 <HAL_DMA_Init+0x13c>)
 8002292:	4413      	add	r3, r2
 8002294:	4a45      	ldr	r2, [pc, #276]	; (80023ac <HAL_DMA_Init+0x140>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	009a      	lsls	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a42      	ldr	r2, [pc, #264]	; (80023b0 <HAL_DMA_Init+0x144>)
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
 80022a8:	e00e      	b.n	80022c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_DMA_Init+0x148>)
 80022b2:	4413      	add	r3, r2
 80022b4:	4a3d      	ldr	r2, [pc, #244]	; (80023ac <HAL_DMA_Init+0x140>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	009a      	lsls	r2, r3, #2
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a3c      	ldr	r2, [pc, #240]	; (80023b8 <HAL_DMA_Init+0x14c>)
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f9b6 	bl	800268c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002328:	d102      	bne.n	8002330 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002338:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800233c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002346:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_DMA_Init+0x106>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d80c      	bhi.n	8002372 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f9d5 	bl	8002708 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	e008      	b.n	8002384 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40020407 	.word	0x40020407
 80023a8:	bffdfff8 	.word	0xbffdfff8
 80023ac:	cccccccd 	.word	0xcccccccd
 80023b0:	40020000 	.word	0x40020000
 80023b4:	bffdfbf8 	.word	0xbffdfbf8
 80023b8:	40020400 	.word	0x40020400

080023bc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_DMA_Start_IT+0x20>
 80023d8:	2302      	movs	r3, #2
 80023da:	e066      	b.n	80024aa <HAL_DMA_Start_IT+0xee>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d155      	bne.n	800249c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f8fb 	bl	8002610 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 020e 	orr.w	r2, r2, #14
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e00f      	b.n	8002454 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0204 	bic.w	r2, r2, #4
 8002442:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 020a 	orr.w	r2, r2, #10
 8002452:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002470:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002488:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e005      	b.n	80024a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
 80024a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f003 031c 	and.w	r3, r3, #28
 80024d2:	2204      	movs	r2, #4
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d026      	beq.n	800252c <HAL_DMA_IRQHandler+0x7a>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d021      	beq.n	800252c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0204 	bic.w	r2, r2, #4
 8002504:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f003 021c 	and.w	r2, r3, #28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2104      	movs	r1, #4
 8002514:	fa01 f202 	lsl.w	r2, r1, r2
 8002518:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	2b00      	cmp	r3, #0
 8002520:	d071      	beq.n	8002606 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800252a:	e06c      	b.n	8002606 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	f003 031c 	and.w	r3, r3, #28
 8002534:	2202      	movs	r2, #2
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d02e      	beq.n	800259e <HAL_DMA_IRQHandler+0xec>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d029      	beq.n	800259e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 020a 	bic.w	r2, r2, #10
 8002566:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f003 021c 	and.w	r2, r3, #28
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2102      	movs	r1, #2
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d038      	beq.n	8002606 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800259c:	e033      	b.n	8002606 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f003 031c 	and.w	r3, r3, #28
 80025a6:	2208      	movs	r2, #8
 80025a8:	409a      	lsls	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d02a      	beq.n	8002608 <HAL_DMA_IRQHandler+0x156>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d025      	beq.n	8002608 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 020e 	bic.w	r2, r2, #14
 80025ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f003 021c 	and.w	r2, r3, #28
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002606:	bf00      	nop
 8002608:	bf00      	nop
}
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002626:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002638:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f003 021c 	and.w	r2, r3, #28
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b10      	cmp	r3, #16
 800265c:	d108      	bne.n	8002670 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800266e:	e007      	b.n	8002680 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	60da      	str	r2, [r3, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800269c:	429a      	cmp	r2, r3
 800269e:	d80a      	bhi.n	80026b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026ac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6493      	str	r3, [r2, #72]	; 0x48
 80026b4:	e007      	b.n	80026c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	009a      	lsls	r2, r3, #2
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80026c0:	4413      	add	r3, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3b08      	subs	r3, #8
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80026dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2201      	movs	r2, #1
 80026e6:	409a      	lsls	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40020407 	.word	0x40020407
 80026fc:	4002081c 	.word	0x4002081c
 8002700:	cccccccd 	.word	0xcccccccd
 8002704:	40020880 	.word	0x40020880

08002708 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002718:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800272c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b01      	subs	r3, #1
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2201      	movs	r2, #1
 8002738:	409a      	lsls	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	1000823f 	.word	0x1000823f
 8002750:	40020940 	.word	0x40020940

08002754 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002762:	e14c      	b.n	80029fe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	4013      	ands	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 813e 	beq.w	80029f8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d00b      	beq.n	800279c <HAL_GPIO_Init+0x48>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d007      	beq.n	800279c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002790:	2b11      	cmp	r3, #17
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b12      	cmp	r3, #18
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0201 	and.w	r2, r3, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0xea>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b12      	cmp	r3, #18
 800283c:	d123      	bne.n	8002886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3208      	adds	r2, #8
 8002846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	6939      	ldr	r1, [r7, #16]
 8002882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0203 	and.w	r2, r3, #3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8098 	beq.w	80029f8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <HAL_GPIO_Init+0x2c8>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028f2:	d019      	beq.n	8002928 <HAL_GPIO_Init+0x1d4>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a4a      	ldr	r2, [pc, #296]	; (8002a20 <HAL_GPIO_Init+0x2cc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_GPIO_Init+0x1d0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a49      	ldr	r2, [pc, #292]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00d      	beq.n	8002920 <HAL_GPIO_Init+0x1cc>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a48      	ldr	r2, [pc, #288]	; (8002a28 <HAL_GPIO_Init+0x2d4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <HAL_GPIO_Init+0x1c8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <HAL_GPIO_Init+0x2d8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_GPIO_Init+0x1c4>
 8002914:	2304      	movs	r3, #4
 8002916:	e008      	b.n	800292a <HAL_GPIO_Init+0x1d6>
 8002918:	2307      	movs	r3, #7
 800291a:	e006      	b.n	800292a <HAL_GPIO_Init+0x1d6>
 800291c:	2303      	movs	r3, #3
 800291e:	e004      	b.n	800292a <HAL_GPIO_Init+0x1d6>
 8002920:	2302      	movs	r3, #2
 8002922:	e002      	b.n	800292a <HAL_GPIO_Init+0x1d6>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_GPIO_Init+0x1d6>
 8002928:	2300      	movs	r3, #0
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	f002 0203 	and.w	r2, r2, #3
 8002930:	0092      	lsls	r2, r2, #2
 8002932:	4093      	lsls	r3, r2
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800293a:	4938      	ldr	r1, [pc, #224]	; (8002a1c <HAL_GPIO_Init+0x2c8>)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002948:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 800294a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800296e:	4a30      	ldr	r2, [pc, #192]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002976:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 8002978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800299c:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3301      	adds	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f47f aeab 	bne.w	8002764 <HAL_GPIO_Init+0x10>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	48000400 	.word	0x48000400
 8002a24:	48000800 	.word	0x48000800
 8002a28:	48000c00 	.word	0x48000c00
 8002a2c:	48001000 	.word	0x48001000
 8002a30:	58000800 	.word	0x58000800

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a66:	b08b      	sub	sp, #44	; 0x2c
 8002a68:	af06      	add	r7, sp, #24
 8002a6a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0d7      	b.n	8002c26 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe f8ea 	bl	8000c64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2203      	movs	r2, #3
 8002a94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 fe97 	bl	80057d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	e04c      	b.n	8002b42 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3301      	adds	r3, #1
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	b298      	uxth	r0, r3
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3336      	adds	r3, #54	; 0x36
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3303      	adds	r3, #3
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3338      	adds	r3, #56	; 0x38
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	333c      	adds	r3, #60	; 0x3c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3340      	adds	r3, #64	; 0x40
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3ad      	bcc.n	8002aa8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e044      	b.n	8002bdc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3b5      	bcc.n	8002b52 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	687e      	ldr	r6, [r7, #4]
 8002bee:	466d      	mov	r5, sp
 8002bf0:	f106 0410 	add.w	r4, r6, #16
 8002bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	602b      	str	r3, [r5, #0]
 8002bfc:	1d33      	adds	r3, r6, #4
 8002bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c00:	6838      	ldr	r0, [r7, #0]
 8002c02:	f002 fe00 	bl	8005806 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d102      	bne.n	8002c24 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f805 	bl	8002c2e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c2e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	58000400 	.word	0x58000400

08002ca4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	58000400 	.word	0x58000400

08002cc0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd2:	d101      	bne.n	8002cd8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_HSE_Enable>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_HSE_Disable>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_HSE_IsReady>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d32:	d101      	bne.n	8002d38 <LL_RCC_HSE_IsReady+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_RCC_HSE_IsReady+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_HSI_Enable>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_RCC_HSI_Disable>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d74:	6013      	str	r3, [r2, #0]
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_HSI_IsReady>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d101      	bne.n	8002d98 <LL_RCC_HSI_IsReady+0x18>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <LL_RCC_HSI_IsReady+0x1a>
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_RCC_HSI48_Enable>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_RCC_HSI48_Disable>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_HSI48_IsReady>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d101      	bne.n	8002e2a <LL_RCC_HSI48_IsReady+0x18>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_RCC_HSI48_IsReady+0x1a>
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_LSE_Enable>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_LSE_Disable>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_RCC_LSE_EnableBypass>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_LSE_DisableBypass>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d101      	bne.n	8002ed6 <LL_RCC_LSE_IsReady+0x18>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_RCC_LSE_IsReady+0x1a>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d101      	bne.n	8002f3e <LL_RCC_LSI1_IsReady+0x18>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <LL_RCC_LSI1_IsReady+0x1a>
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d101      	bne.n	8002fa6 <LL_RCC_LSI2_IsReady+0x18>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_RCC_LSI2_IsReady+0x1a>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6013      	str	r3, [r2, #0]
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d101      	bne.n	8003032 <LL_RCC_MSI_IsReady+0x16>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <LL_RCC_MSI_IsReady+0x18>
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003076:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2bb0      	cmp	r3, #176	; 0xb0
 800307c:	d901      	bls.n	8003082 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800307e:	23b0      	movs	r3, #176	; 0xb0
 8003080:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003082:	687b      	ldr	r3, [r7, #4]
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 0203 	bic.w	r2, r3, #3
 80030cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800315e:	f023 020f 	bic.w	r2, r3, #15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003260:	6013      	str	r3, [r2, #0]
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800327e:	d101      	bne.n	8003284 <LL_RCC_PLL_IsReady+0x18>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_RCC_PLL_IsReady+0x1a>
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80032ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0303 	and.w	r3, r3, #3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d101      	bne.n	800330a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800331a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800332a:	d101      	bne.n	8003330 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003344:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d101      	bne.n	8003356 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003374:	d101      	bne.n	800337a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003398:	d101      	bne.n	800339e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b08d      	sub	sp, #52	; 0x34
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e37e      	b.n	8003abc <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8092 	beq.w	80034f0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033cc:	f7ff fe89 	bl	80030e2 <LL_RCC_GetSysClkSource>
 80033d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d2:	f7ff ff82 	bl	80032da <LL_RCC_PLL_GetMainSource>
 80033d6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_RCC_OscConfig+0x3e>
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d14c      	bne.n	800347e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d149      	bne.n	800347e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ea:	f7ff fe17 	bl	800301c <LL_RCC_MSI_IsReady>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_OscConfig+0x54>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e35d      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003404:	f7ff fe2f 	bl	8003066 <LL_RCC_MSI_GetRange>
 8003408:	4603      	mov	r3, r0
 800340a:	429c      	cmp	r4, r3
 800340c:	d914      	bls.n	8003438 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fd42 	bl	8003e9c <RCC_SetFlashLatencyFromMSIRange>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e34c      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fe09 	bl	800303e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fe2d 	bl	8003090 <LL_RCC_MSI_SetCalibTrimming>
 8003436:	e013      	b.n	8003460 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fdfe 	bl	800303e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fe22 	bl	8003090 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fd23 	bl	8003e9c <RCC_SetFlashLatencyFromMSIRange>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e32d      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003460:	f000 fcdc 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003464:	4603      	mov	r3, r0
 8003466:	4ab3      	ldr	r2, [pc, #716]	; (8003734 <HAL_RCC_OscConfig+0x388>)
 8003468:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800346a:	4bb3      	ldr	r3, [pc, #716]	; (8003738 <HAL_RCC_OscConfig+0x38c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fd06 	bl	8000e80 <HAL_InitTick>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d039      	beq.n	80034ee <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e31e      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01e      	beq.n	80034c4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003486:	f7ff fdab 	bl	8002fe0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800348a:	f7fd fd47 	bl	8000f1c <HAL_GetTick>
 800348e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003492:	f7fd fd43 	bl	8000f1c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e30b      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80034a4:	f7ff fdba 	bl	800301c <LL_RCC_MSI_IsReady>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f1      	beq.n	8003492 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fdc3 	bl	800303e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fde7 	bl	8003090 <LL_RCC_MSI_SetCalibTrimming>
 80034c2:	e015      	b.n	80034f0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034c4:	f7ff fd9b 	bl	8002ffe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c8:	f7fd fd28 	bl	8000f1c <HAL_GetTick>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d0:	f7fd fd24 	bl	8000f1c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e2ec      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80034e2:	f7ff fd9b 	bl	800301c <LL_RCC_MSI_IsReady>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f1      	bne.n	80034d0 <HAL_RCC_OscConfig+0x124>
 80034ec:	e000      	b.n	80034f0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d04e      	beq.n	800359a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fc:	f7ff fdf1 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003500:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003502:	f7ff feea 	bl	80032da <LL_RCC_PLL_GetMainSource>
 8003506:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2b08      	cmp	r3, #8
 800350c:	d005      	beq.n	800351a <HAL_RCC_OscConfig+0x16e>
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d10d      	bne.n	8003530 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d10a      	bne.n	8003530 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351a:	f7ff fc01 	bl	8002d20 <LL_RCC_HSE_IsReady>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d039      	beq.n	8003598 <HAL_RCC_OscConfig+0x1ec>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d135      	bne.n	8003598 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e2c5      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0x194>
 800353a:	f7ff fbd3 	bl	8002ce4 <LL_RCC_HSE_Enable>
 800353e:	e001      	b.n	8003544 <HAL_RCC_OscConfig+0x198>
 8003540:	f7ff fbdf 	bl	8002d02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd fce6 	bl	8000f1c <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003554:	f7fd fce2 	bl	8000f1c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e2aa      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003566:	f7ff fbdb 	bl	8002d20 <LL_RCC_HSE_IsReady>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f1      	beq.n	8003554 <HAL_RCC_OscConfig+0x1a8>
 8003570:	e013      	b.n	800359a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f7fd fcd3 	bl	8000f1c <HAL_GetTick>
 8003576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357a:	f7fd fccf 	bl	8000f1c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e297      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800358c:	f7ff fbc8 	bl	8002d20 <LL_RCC_HSE_IsReady>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f1      	bne.n	800357a <HAL_RCC_OscConfig+0x1ce>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d051      	beq.n	800364a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a6:	f7ff fd9c 	bl	80030e2 <LL_RCC_GetSysClkSource>
 80035aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ac:	f7ff fe95 	bl	80032da <LL_RCC_PLL_GetMainSource>
 80035b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_OscConfig+0x218>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d113      	bne.n	80035e6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d110      	bne.n	80035e6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c4:	f7ff fbdc 	bl	8002d80 <LL_RCC_HSI_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x22e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e270      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fbe0 	bl	8002da4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e4:	e031      	b.n	800364a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ee:	f7ff fba9 	bl	8002d44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f2:	f7fd fc93 	bl	8000f1c <HAL_GetTick>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fa:	f7fd fc8f 	bl	8000f1c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e257      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800360c:	f7ff fbb8 	bl	8002d80 <LL_RCC_HSI_IsReady>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f1      	beq.n	80035fa <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fbc2 	bl	8002da4 <LL_RCC_HSI_SetCalibTrimming>
 8003620:	e013      	b.n	800364a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	f7ff fb9e 	bl	8002d62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fd fc79 	bl	8000f1c <HAL_GetTick>
 800362a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362e:	f7fd fc75 	bl	8000f1c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e23d      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003640:	f7ff fb9e 	bl	8002d80 <LL_RCC_HSI_IsReady>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f1      	bne.n	800362e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80a3 	beq.w	80037aa <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d076      	beq.n	800375a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d046      	beq.n	8003706 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003678:	f7ff fc55 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d113      	bne.n	80036aa <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003682:	f7ff fc2e 	bl	8002ee2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003686:	f7fd fc49 	bl	8000f1c <HAL_GetTick>
 800368a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800368e:	f7fd fc45 	bl	8000f1c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e20d      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80036a0:	f7ff fc41 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f1      	beq.n	800368e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80036aa:	f7ff fc4e 	bl	8002f4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd fc35 	bl	8000f1c <HAL_GetTick>
 80036b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036b6:	f7fd fc31 	bl	8000f1c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1f9      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80036c8:	f7ff fc61 	bl	8002f8e <LL_RCC_LSI2_IsReady>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f1      	beq.n	80036b6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fc6b 	bl	8002fb2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80036dc:	f7ff fc12 	bl	8002f04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fd fc1c 	bl	8000f1c <HAL_GetTick>
 80036e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036e8:	f7fd fc18 	bl	8000f1c <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1e0      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036fa:	f7ff fc14 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f1      	bne.n	80036e8 <HAL_RCC_OscConfig+0x33c>
 8003704:	e051      	b.n	80037aa <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003706:	f7ff fbec 	bl	8002ee2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fd fc07 	bl	8000f1c <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003712:	f7fd fc03 	bl	8000f1c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1cb      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003724:	f7ff fbff 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f1      	beq.n	8003712 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800372e:	f7ff fc1d 	bl	8002f6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003732:	e00c      	b.n	800374e <HAL_RCC_OscConfig+0x3a2>
 8003734:	20000004 	.word	0x20000004
 8003738:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800373c:	f7fd fbee 	bl	8000f1c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b03      	cmp	r3, #3
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1b6      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800374e:	f7ff fc1e 	bl	8002f8e <LL_RCC_LSI2_IsReady>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f1      	bne.n	800373c <HAL_RCC_OscConfig+0x390>
 8003758:	e027      	b.n	80037aa <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800375a:	f7ff fc07 	bl	8002f6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fd fbdd 	bl	8000f1c <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003766:	f7fd fbd9 	bl	8000f1c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b03      	cmp	r3, #3
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1a1      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003778:	f7ff fc09 	bl	8002f8e <LL_RCC_LSI2_IsReady>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f1      	bne.n	8003766 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003782:	f7ff fbbf 	bl	8002f04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fd fbc9 	bl	8000f1c <HAL_GetTick>
 800378a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800378e:	f7fd fbc5 	bl	8000f1c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e18d      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80037a0:	f7ff fbc1 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f1      	bne.n	800378e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d05b      	beq.n	800386e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b6:	4bb5      	ldr	r3, [pc, #724]	; (8003a8c <HAL_RCC_OscConfig+0x6e0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d114      	bne.n	80037ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80037c2:	f7ff fa5f 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fd fba9 	bl	8000f1c <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fd fba5 	bl	8000f1c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e16d      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e0:	4baa      	ldr	r3, [pc, #680]	; (8003a8c <HAL_RCC_OscConfig+0x6e0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_OscConfig+0x44e>
 80037f4:	f7ff fb1f 	bl	8002e36 <LL_RCC_LSE_Enable>
 80037f8:	e00c      	b.n	8003814 <HAL_RCC_OscConfig+0x468>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d104      	bne.n	800380c <HAL_RCC_OscConfig+0x460>
 8003802:	f7ff fb3a 	bl	8002e7a <LL_RCC_LSE_EnableBypass>
 8003806:	f7ff fb16 	bl	8002e36 <LL_RCC_LSE_Enable>
 800380a:	e003      	b.n	8003814 <HAL_RCC_OscConfig+0x468>
 800380c:	f7ff fb24 	bl	8002e58 <LL_RCC_LSE_Disable>
 8003810:	f7ff fb44 	bl	8002e9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d014      	beq.n	8003846 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fd fb7e 	bl	8000f1c <HAL_GetTick>
 8003820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003822:	e00a      	b.n	800383a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fd fb7a 	bl	8000f1c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e140      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800383a:	f7ff fb40 	bl	8002ebe <LL_RCC_LSE_IsReady>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ef      	beq.n	8003824 <HAL_RCC_OscConfig+0x478>
 8003844:	e013      	b.n	800386e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fd fb69 	bl	8000f1c <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fd fb65 	bl	8000f1c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	; 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e12b      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003864:	f7ff fb2b 	bl	8002ebe <LL_RCC_LSE_IsReady>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ef      	bne.n	800384e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d02c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	2b00      	cmp	r3, #0
 8003880:	d014      	beq.n	80038ac <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003882:	f7ff faa4 	bl	8002dce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fd fb49 	bl	8000f1c <HAL_GetTick>
 800388a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800388e:	f7fd fb45 	bl	8000f1c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e10d      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80038a0:	f7ff fab7 	bl	8002e12 <LL_RCC_HSI48_IsReady>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f1      	beq.n	800388e <HAL_RCC_OscConfig+0x4e2>
 80038aa:	e013      	b.n	80038d4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ac:	f7ff faa0 	bl	8002df0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fb34 	bl	8000f1c <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038b8:	f7fd fb30 	bl	8000f1c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0f8      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80038ca:	f7ff faa2 	bl	8002e12 <LL_RCC_HSI48_IsReady>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f1      	bne.n	80038b8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80ee 	beq.w	8003aba <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038de:	f7ff fc00 	bl	80030e2 <LL_RCC_GetSysClkSource>
 80038e2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80038e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	f040 80af 	bne.w	8003a54 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0203 	and.w	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	429a      	cmp	r2, r3
 8003902:	d123      	bne.n	800394c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d11c      	bne.n	800394c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	0a1b      	lsrs	r3, r3, #8
 8003916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d114      	bne.n	800394c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d10d      	bne.n	800394c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d106      	bne.n	800394c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d05d      	beq.n	8003a08 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d058      	beq.n	8003a04 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0ab      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003964:	f7ff fc73 	bl	800324e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003968:	f7fd fad8 	bl	8000f1c <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003970:	f7fd fad4 	bl	8000f1c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e09c      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ef      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <HAL_RCC_OscConfig+0x6e4>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039a8:	0212      	lsls	r2, r2, #8
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039b0:	4311      	orrs	r1, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039bc:	430a      	orrs	r2, r1
 80039be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039c6:	f7ff fc33 	bl	8003230 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039da:	f7fd fa9f 	bl	8000f1c <HAL_GetTick>
 80039de:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fd fa9b 	bl	8000f1c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e063      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0ef      	beq.n	80039e2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a02:	e05a      	b.n	8003aba <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e059      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d151      	bne.n	8003aba <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a16:	f7ff fc0b 	bl	8003230 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a2a:	f7fd fa77 	bl	8000f1c <HAL_GetTick>
 8003a2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fd fa73 	bl	8000f1c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e03b      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ef      	beq.n	8003a32 <HAL_RCC_OscConfig+0x686>
 8003a52:	e032      	b.n	8003aba <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d02d      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	f7ff fbf8 	bl	800324e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a68:	f023 0303 	bic.w	r3, r3, #3
 8003a6c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a78:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fd fa4b 	bl	8000f1c <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a88:	e00d      	b.n	8003aa6 <HAL_RCC_OscConfig+0x6fa>
 8003a8a:	bf00      	nop
 8003a8c:	58000400 	.word	0x58000400
 8003a90:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fd fa42 	bl	8000f1c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ef      	bne.n	8003a94 <HAL_RCC_OscConfig+0x6e8>
 8003ab4:	e001      	b.n	8003aba <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3734      	adds	r7, #52	; 0x34
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}

08003ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e12d      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b98      	ldr	r3, [pc, #608]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d91b      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b95      	ldr	r3, [pc, #596]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4993      	ldr	r1, [pc, #588]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af6:	f7fd fa11 	bl	8000f1c <HAL_GetTick>
 8003afa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003afe:	f7fd fa0d 	bl	8000f1c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e111      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b10:	4b8a      	ldr	r3, [pc, #552]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d1ef      	bne.n	8003afe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fae3 	bl	80030fa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b34:	f7fd f9f2 	bl	8000f1c <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b3c:	f7fd f9ee 	bl	8000f1c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0f2      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b4e:	f7ff fbd0 	bl	80032f2 <LL_RCC_IsActiveFlag_HPRE>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f1      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d016      	beq.n	8003b92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fada 	bl	8003122 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b6e:	f7fd f9d5 	bl	8000f1c <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b76:	f7fd f9d1 	bl	8000f1c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0d5      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b88:	f7ff fbc5 	bl	8003316 <LL_RCC_IsActiveFlag_C2HPRE>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f1      	beq.n	8003b76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fad3 	bl	800314e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ba8:	f7fd f9b8 	bl	8000f1c <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bb0:	f7fd f9b4 	bl	8000f1c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0b8      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bc2:	f7ff fbbb 	bl	800333c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f1      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d016      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff facd 	bl	800317c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003be2:	f7fd f99b 	bl	8000f1c <HAL_GetTick>
 8003be6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bea:	f7fd f997 	bl	8000f1c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e09b      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bfc:	f7ff fbb1 	bl	8003362 <LL_RCC_IsActiveFlag_PPRE1>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f1      	beq.n	8003bea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d017      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fac3 	bl	80031a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c1e:	f7fd f97d 	bl	8000f1c <HAL_GetTick>
 8003c22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c26:	f7fd f979 	bl	8000f1c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e07d      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c38:	f7ff fba5 	bl	8003386 <LL_RCC_IsActiveFlag_PPRE2>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f1      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d043      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d106      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003c56:	f7ff f863 	bl	8002d20 <LL_RCC_HSE_IsReady>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d11e      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e067      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c6c:	f7ff fafe 	bl	800326c <LL_RCC_PLL_IsReady>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d113      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e05c      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c82:	f7ff f9cb 	bl	800301c <LL_RCC_MSI_IsReady>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d108      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e051      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c90:	f7ff f876 	bl	8002d80 <LL_RCC_HSI_IsReady>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e04a      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fa09 	bl	80030ba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd f938 	bl	8000f1c <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fd f934 	bl	8000f1c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e036      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	f7ff fa0c 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d1ec      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d21b      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce4:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 0207 	bic.w	r2, r3, #7
 8003cec:	4913      	ldr	r1, [pc, #76]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf4:	f7fd f912 	bl	8000f1c <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cfc:	f7fd f90e 	bl	8000f1c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e012      	b.n	8003d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x278>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1ef      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d1c:	f000 f87e 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003d20:	4603      	mov	r3, r0
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_RCC_ClockConfig+0x27c>)
 8003d24:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003d26:	f7fd f905 	bl	8000f34 <HAL_GetTickPrio>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd f8a7 	bl	8000e80 <HAL_InitTick>
 8003d32:	4603      	mov	r3, r0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58004000 	.word	0x58004000
 8003d40:	20000004 	.word	0x20000004

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	f7ff f9ca 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003d4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d56:	f7ff f986 	bl	8003066 <LL_RCC_MSI_GetRange>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	e04b      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d102      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e045      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d10a      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d7e:	f7fe ff9f 	bl	8002cc0 <LL_RCC_HSE_IsEnabledDiv2>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e03a      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d8e:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e037      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d94:	f7ff faa1 	bl	80032da <LL_RCC_PLL_GetMainSource>
 8003d98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d003      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x64>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x6a>
 8003da6:	e00d      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003daa:	60bb      	str	r3, [r7, #8]
        break;
 8003dac:	e015      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dae:	f7fe ff87 	bl	8002cc0 <LL_RCC_HSE_IsEnabledDiv2>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003dbc:	e00d      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003dc0:	60bb      	str	r3, [r7, #8]
        break;
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003dc4:	f7ff f94f 	bl	8003066 <LL_RCC_MSI_GetRange>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	60bb      	str	r3, [r7, #8]
        break;
 8003dd8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003dda:	f7ff fa59 	bl	8003290 <LL_RCC_PLL_GetN>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	fb03 f402 	mul.w	r4, r3, r2
 8003de6:	f7ff fa6c 	bl	80032c2 <LL_RCC_PLL_GetDivider>
 8003dea:	4603      	mov	r3, r0
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	3301      	adds	r3, #1
 8003df0:	fbb4 f4f3 	udiv	r4, r4, r3
 8003df4:	f7ff fa59 	bl	80032aa <LL_RCC_PLL_GetR>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	0f5b      	lsrs	r3, r3, #29
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e02:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003e04:	68fb      	ldr	r3, [r7, #12]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	08005944 	.word	0x08005944
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	01e84800 	.word	0x01e84800

08003e1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b598      	push	{r3, r4, r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e20:	f7ff ff90 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003e24:	4604      	mov	r4, r0
 8003e26:	f7ff f9d1 	bl	80031cc <LL_RCC_GetAHBPrescaler>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	4a03      	ldr	r2, [pc, #12]	; (8003e40 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd98      	pop	{r3, r4, r7, pc}
 8003e40:	080058e4 	.word	0x080058e4

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b598      	push	{r3, r4, r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e48:	f7ff ffe8 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	f7ff f9d7 	bl	8003200 <LL_RCC_GetAPB1Prescaler>
 8003e52:	4603      	mov	r3, r0
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd98      	pop	{r3, r4, r7, pc}
 8003e6c:	08005924 	.word	0x08005924

08003e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e70:	b598      	push	{r3, r4, r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003e74:	f7ff ffd2 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	f7ff f9cd 	bl	8003218 <LL_RCC_GetAPB2Prescaler>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	0adb      	lsrs	r3, r3, #11
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd98      	pop	{r3, r4, r7, pc}
 8003e98:	08005924 	.word	0x08005924

08003e9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2bb0      	cmp	r3, #176	; 0xb0
 8003ea8:	d903      	bls.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e007      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003ec2:	f7ff f98f 	bl	80031e4 <LL_RCC_GetAHB4Prescaler>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0c9c      	lsrs	r4, r3, #18
 8003ee6:	f7fe fedd 	bl	8002ca4 <HAL_PWREx_GetVoltageRange>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4619      	mov	r1, r3
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 f80c 	bl	8003f0c <RCC_SetFlashLatency>
 8003ef4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	bf00      	nop
 8003f00:	08005944 	.word	0x08005944
 8003f04:	080058e4 	.word	0x080058e4
 8003f08:	431bde83 	.word	0x431bde83

08003f0c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b093      	sub	sp, #76	; 0x4c
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003f16:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <RCC_SetFlashLatency+0xf0>)
 8003f18:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003f1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003f22:	4a37      	ldr	r2, [pc, #220]	; (8004000 <RCC_SetFlashLatency+0xf4>)
 8003f24:	f107 031c 	add.w	r3, r7, #28
 8003f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003f2e:	4b35      	ldr	r3, [pc, #212]	; (8004004 <RCC_SetFlashLatency+0xf8>)
 8003f30:	f107 040c 	add.w	r4, r7, #12
 8003f34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f44:	d11c      	bne.n	8003f80 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4a:	e015      	b.n	8003f78 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f54:	4413      	add	r3, r2
 8003f56:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d808      	bhi.n	8003f72 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f68:	4413      	add	r3, r2
 8003f6a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f6e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003f70:	e022      	b.n	8003fb8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f74:	3301      	adds	r3, #1
 8003f76:	643b      	str	r3, [r7, #64]	; 0x40
 8003f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d9e6      	bls.n	8003f4c <RCC_SetFlashLatency+0x40>
 8003f7e:	e01b      	b.n	8003fb8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f84:	e015      	b.n	8003fb2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f8e:	4413      	add	r3, r2
 8003f90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d808      	bhi.n	8003fac <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003faa:	e005      	b.n	8003fb8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	3301      	adds	r3, #1
 8003fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d9e6      	bls.n	8003f86 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003fb8:	4b13      	ldr	r3, [pc, #76]	; (8004008 <RCC_SetFlashLatency+0xfc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 0207 	bic.w	r2, r3, #7
 8003fc0:	4911      	ldr	r1, [pc, #68]	; (8004008 <RCC_SetFlashLatency+0xfc>)
 8003fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fc8:	f7fc ffa8 	bl	8000f1c <HAL_GetTick>
 8003fcc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003fce:	e008      	b.n	8003fe2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fd0:	f7fc ffa4 	bl	8000f1c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e007      	b.n	8003ff2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <RCC_SetFlashLatency+0xfc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d1ef      	bne.n	8003fd0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	374c      	adds	r7, #76	; 0x4c
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd90      	pop	{r4, r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	080058b8 	.word	0x080058b8
 8004000:	080058c8 	.word	0x080058c8
 8004004:	080058d4 	.word	0x080058d4
 8004008:	58004000 	.word	0x58004000

0800400c <LL_RCC_LSE_IsEnabled>:
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <LL_RCC_LSE_IsEnabled+0x18>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <LL_RCC_LSE_IsEnabled+0x1a>
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_RCC_LSE_IsReady>:
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b02      	cmp	r3, #2
 8004042:	d101      	bne.n	8004048 <LL_RCC_LSE_IsReady+0x18>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <LL_RCC_LSE_IsReady+0x1a>
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_RCC_MSI_EnablePLLMode>:
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_SetRFWKPClockSource>:
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004082:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_RCC_SetSMPSClockSource>:
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80040a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f023 0203 	bic.w	r2, r3, #3
 80040b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <LL_RCC_SetSMPSPrescaler>:
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4313      	orrs	r3, r2
 80040e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_SetUSARTClockSource>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 0203 	bic.w	r2, r3, #3
 8004102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_RCC_SetLPUARTClockSource>:
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800412e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_RCC_SetI2CClockSource>:
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800414e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004152:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800415e:	43db      	mvns	r3, r3
 8004160:	401a      	ands	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800416a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_RCC_SetLPTIMClockSource>:
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0c1b      	lsrs	r3, r3, #16
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	43db      	mvns	r3, r3
 8004198:	401a      	ands	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_SetSAIClockSource>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_RCC_SetRNGClockSource>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_RCC_SetCLK48ClockSource>:
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_RCC_SetUSBClockSource>:
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffe3 	bl	800420c <LL_RCC_SetCLK48ClockSource>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <LL_RCC_SetADCClockSource>:
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_RCC_SetRTCClockSource>:
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800428e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_RCC_GetRTCClockSource>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_RCC_ForceBackupDomainReset>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80042c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042fa:	bf00      	nop
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_RCC_PLLSAI1_Enable>:
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004312:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004316:	6013      	str	r3, [r2, #0]
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_RCC_PLLSAI1_Disable>:
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004330:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004334:	6013      	str	r3, [r2, #0]
}
 8004336:	bf00      	nop
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_RCC_PLLSAI1_IsReady>:
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004352:	d101      	bne.n	8004358 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800436c:	2300      	movs	r3, #0
 800436e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004370:	2300      	movs	r3, #0
 8004372:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d034      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004388:	d021      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800438a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800438e:	d81b      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004390:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004394:	d01d      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800439a:	d815      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a4:	d110      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80043a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80043b6:	e00d      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f94d 	bl	800465c <RCCEx_PLLSAI1_ConfigNP>
 80043c2:	4603      	mov	r3, r0
 80043c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043c6:	e005      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	77fb      	strb	r3, [r7, #31]
        break;
 80043cc:	e002      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80043d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fee8 	bl	80041b4 <LL_RCC_SetSAIClockSource>
 80043e4:	e001      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e6:	7ffb      	ldrb	r3, [r7, #31]
 80043e8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d046      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80043f6:	f7ff ff56 	bl	80042a6 <LL_RCC_GetRTCClockSource>
 80043fa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	429a      	cmp	r2, r3
 8004404:	d03c      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004406:	f7fe fc3d 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff30 	bl	800427a <LL_RCC_SetRTCClockSource>
 800441a:	e02e      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800441c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004426:	f7ff ff4b 	bl	80042c0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800442a:	f7ff ff5a 	bl	80042e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800443c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004446:	f7ff fde1 	bl	800400c <LL_RCC_LSE_IsEnabled>
 800444a:	4603      	mov	r3, r0
 800444c:	2b01      	cmp	r3, #1
 800444e:	d114      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004450:	f7fc fd64 	bl	8000f1c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004456:	e00b      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fc fd60 	bl	8000f1c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d902      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	77fb      	strb	r3, [r7, #31]
              break;
 800446e:	e004      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004470:	f7ff fdde 	bl	8004030 <LL_RCC_LSE_IsReady>
 8004474:	4603      	mov	r3, r0
 8004476:	2b01      	cmp	r3, #1
 8004478:	d1ee      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	77bb      	strb	r3, [r7, #30]
 800447e:	e001      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	7ffb      	ldrb	r3, [r7, #31]
 8004482:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fe2a 	bl	80040ee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fe35 	bl	800411a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fe5d 	bl	8004180 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fe52 	bl	8004180 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fe2a 	bl	8004146 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fe1f 	bl	8004146 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d022      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fe8d 	bl	8004238 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004526:	d107      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004536:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004540:	d10b      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f8e3 	bl	8004712 <RCCEx_PLLSAI1_ConfigNQ>
 800454c:	4603      	mov	r3, r0
 800454e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004550:	7ffb      	ldrb	r3, [r7, #31]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004556:	7ffb      	ldrb	r3, [r7, #31]
 8004558:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004562:	2b00      	cmp	r3, #0
 8004564:	d02b      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d008      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004578:	d003      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fe2a 	bl	80041e0 <LL_RCC_SetRNGClockSource>
 800458c:	e00a      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	2000      	movs	r0, #0
 800459a:	f7ff fe21 	bl	80041e0 <LL_RCC_SetRNGClockSource>
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff fe34 	bl	800420c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80045ac:	d107      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d022      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fe3d 	bl	800424e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045dc:	d107      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f6:	d10b      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f8e3 	bl	80047c8 <RCCEx_PLLSAI1_ConfigNR>
 8004602:	4603      	mov	r3, r0
 8004604:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004606:	7ffb      	ldrb	r3, [r7, #31]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800460c:	7ffb      	ldrb	r3, [r7, #31]
 800460e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fd26 	bl	8004072 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fd45 	bl	80040c6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fd2c 	bl	800409e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004646:	7fbb      	ldrb	r3, [r7, #30]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004654:	f7ff fcfe 	bl	8004054 <LL_RCC_MSI_EnablePLLMode>
}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}

0800465c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004668:	f7ff fe5b 	bl	8004322 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800466c:	f7fc fc56 	bl	8000f1c <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004672:	e009      	b.n	8004688 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004674:	f7fc fc52 	bl	8000f1c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d902      	bls.n	8004688 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	73fb      	strb	r3, [r7, #15]
      break;
 8004686:	e004      	b.n	8004692 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004688:	f7ff fe5a 	bl	8004340 <LL_RCC_PLLSAI1_IsReady>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d137      	bne.n	8004708 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ac:	4313      	orrs	r3, r2
 80046ae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c2:	4313      	orrs	r3, r2
 80046c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80046c6:	f7ff fe1d 	bl	8004304 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ca:	f7fc fc27 	bl	8000f1c <HAL_GetTick>
 80046ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046d0:	e009      	b.n	80046e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d2:	f7fc fc23 	bl	8000f1c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d902      	bls.n	80046e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	73fb      	strb	r3, [r7, #15]
        break;
 80046e4:	e004      	b.n	80046f0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046e6:	f7ff fe2b 	bl	8004340 <LL_RCC_PLLSAI1_IsReady>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d1f0      	bne.n	80046d2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004704:	4313      	orrs	r3, r2
 8004706:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800471e:	f7ff fe00 	bl	8004322 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004722:	f7fc fbfb 	bl	8000f1c <HAL_GetTick>
 8004726:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004728:	e009      	b.n	800473e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800472a:	f7fc fbf7 	bl	8000f1c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d902      	bls.n	800473e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e004      	b.n	8004748 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800473e:	f7ff fdff 	bl	8004340 <LL_RCC_PLLSAI1_IsReady>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f0      	bne.n	800472a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d137      	bne.n	80047be <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004778:	4313      	orrs	r3, r2
 800477a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800477c:	f7ff fdc2 	bl	8004304 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fc fbcc 	bl	8000f1c <HAL_GetTick>
 8004784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004786:	e009      	b.n	800479c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004788:	f7fc fbc8 	bl	8000f1c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d902      	bls.n	800479c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	73fb      	strb	r3, [r7, #15]
        break;
 800479a:	e004      	b.n	80047a6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800479c:	f7ff fdd0 	bl	8004340 <LL_RCC_PLLSAI1_IsReady>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d1f0      	bne.n	8004788 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d108      	bne.n	80047be <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80047ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ba:	4313      	orrs	r3, r2
 80047bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80047be:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80047d4:	f7ff fda5 	bl	8004322 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047d8:	f7fc fba0 	bl	8000f1c <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e0:	f7fc fb9c 	bl	8000f1c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
      break;
 80047f2:	e004      	b.n	80047fe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80047f4:	f7ff fda4 	bl	8004340 <LL_RCC_PLLSAI1_IsReady>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d137      	bne.n	8004874 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004818:	4313      	orrs	r3, r2
 800481a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800482e:	4313      	orrs	r3, r2
 8004830:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004832:	f7ff fd67 	bl	8004304 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004836:	f7fc fb71 	bl	8000f1c <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800483c:	e009      	b.n	8004852 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800483e:	f7fc fb6d 	bl	8000f1c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d902      	bls.n	8004852 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	73fb      	strb	r3, [r7, #15]
        break;
 8004850:	e004      	b.n	800485c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004852:	f7ff fd75 	bl	8004340 <LL_RCC_PLLSAI1_IsReady>
 8004856:	4603      	mov	r3, r0
 8004858:	2b01      	cmp	r3, #1
 800485a:	d1f0      	bne.n	800483e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004870:	4313      	orrs	r3, r2
 8004872:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e049      	b.n	8004924 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fc f99d 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f000 f941 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d001      	beq.n	8004944 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e02e      	b.n	80049a2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <HAL_TIM_Base_Start+0x84>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_TIM_Base_Start+0x34>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495e:	d115      	bne.n	800498c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <HAL_TIM_Base_Start+0x88>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b06      	cmp	r3, #6
 8004970:	d015      	beq.n	800499e <HAL_TIM_Base_Start+0x72>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d011      	beq.n	800499e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	e008      	b.n	800499e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e000      	b.n	80049a0 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	00010007 	.word	0x00010007

080049b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_ConfigClockSource+0x18>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0b5      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x184>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80049ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d03e      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0xd4>
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	f200 8087 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	f000 8085 	beq.w	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a22:	d87f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b70      	cmp	r3, #112	; 0x70
 8004a26:	d01a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xa6>
 8004a28:	2b70      	cmp	r3, #112	; 0x70
 8004a2a:	d87b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b60      	cmp	r3, #96	; 0x60
 8004a2e:	d050      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8004a30:	2b60      	cmp	r3, #96	; 0x60
 8004a32:	d877      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b50      	cmp	r3, #80	; 0x50
 8004a36:	d03c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8004a38:	2b50      	cmp	r3, #80	; 0x50
 8004a3a:	d873      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d058      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x13a>
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d86f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d064      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d86b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d060      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d867      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15a>
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d05a      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a5c:	e062      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6899      	ldr	r1, [r3, #8]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f000 f949 	bl	8004d04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	609a      	str	r2, [r3, #8]
      break;
 8004a8a:	e04e      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f000 f932 	bl	8004d04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aae:	609a      	str	r2, [r3, #8]
      break;
 8004ab0:	e03b      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 f8a4 	bl	8004c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2150      	movs	r1, #80	; 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f8fd 	bl	8004cca <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e02b      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 f8c3 	bl	8004c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2160      	movs	r1, #96	; 0x60
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f8ed 	bl	8004cca <TIM_ITRx_SetConfig>
      break;
 8004af0:	e01b      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 f884 	bl	8004c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2140      	movs	r1, #64	; 0x40
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f8dd 	bl	8004cca <TIM_ITRx_SetConfig>
      break;
 8004b10:	e00b      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 f8d4 	bl	8004cca <TIM_ITRx_SetConfig>
        break;
 8004b22:	e002      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004b28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <TIM_Base_SetConfig+0xbc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_Base_SetConfig+0x20>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d108      	bne.n	8004b76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <TIM_Base_SetConfig+0xbc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <TIM_Base_SetConfig+0x52>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b84:	d007      	beq.n	8004b96 <TIM_Base_SetConfig+0x52>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <TIM_Base_SetConfig+0xc0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_Base_SetConfig+0x52>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <TIM_Base_SetConfig+0xc4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d108      	bne.n	8004ba8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <TIM_Base_SetConfig+0xbc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_Base_SetConfig+0xa0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <TIM_Base_SetConfig+0xc0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_Base_SetConfig+0xa0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <TIM_Base_SetConfig+0xc4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d103      	bne.n	8004bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	615a      	str	r2, [r3, #20]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800

08004c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f023 0201 	bic.w	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f023 030a 	bic.w	r3, r3, #10
 8004c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b087      	sub	sp, #28
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0210 	bic.w	r2, r3, #16
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	031b      	lsls	r3, r3, #12
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ca6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f043 0307 	orr.w	r3, r3, #7
 8004cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	609a      	str	r2, [r3, #8]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	021a      	lsls	r2, r3, #8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e04a      	b.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d108      	bne.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc4:	d10c      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40012c00 	.word	0x40012c00

08004e04 <LL_RCC_GetUSARTClockSource>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4013      	ands	r3, r2
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <LL_RCC_GetLPUARTClockSource>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4013      	ands	r3, r2
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e042      	b.n	8004edc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fb fecb 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2224      	movs	r2, #36	; 0x24
 8004e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f82c 	bl	8004ee4 <UART_SetConfig>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e022      	b.n	8004edc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa26 	bl	80052f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 faad 	bl	8005434 <UART_CheckIdleState>
 8004eda:	4603      	mov	r3, r0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee4:	b5b0      	push	{r4, r5, r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4ba3      	ldr	r3, [pc, #652]	; (800519c <UART_SetConfig+0x2b8>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	69f9      	ldr	r1, [r7, #28]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a98      	ldr	r2, [pc, #608]	; (80051a0 <UART_SetConfig+0x2bc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	f023 010f 	bic.w	r1, r3, #15
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a89      	ldr	r2, [pc, #548]	; (80051a4 <UART_SetConfig+0x2c0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d120      	bne.n	8004fc6 <UART_SetConfig+0xe2>
 8004f84:	2003      	movs	r0, #3
 8004f86:	f7ff ff3d 	bl	8004e04 <LL_RCC_GetUSARTClockSource>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d817      	bhi.n	8004fc0 <UART_SetConfig+0xdc>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0xb4>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fb5 	.word	0x08004fb5
 8004fa0:	08004faf 	.word	0x08004faf
 8004fa4:	08004fbb 	.word	0x08004fbb
 8004fa8:	2301      	movs	r3, #1
 8004faa:	76fb      	strb	r3, [r7, #27]
 8004fac:	e038      	b.n	8005020 <UART_SetConfig+0x13c>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	76fb      	strb	r3, [r7, #27]
 8004fb2:	e035      	b.n	8005020 <UART_SetConfig+0x13c>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e032      	b.n	8005020 <UART_SetConfig+0x13c>
 8004fba:	2308      	movs	r3, #8
 8004fbc:	76fb      	strb	r3, [r7, #27]
 8004fbe:	e02f      	b.n	8005020 <UART_SetConfig+0x13c>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e02c      	b.n	8005020 <UART_SetConfig+0x13c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a75      	ldr	r2, [pc, #468]	; (80051a0 <UART_SetConfig+0x2bc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d125      	bne.n	800501c <UART_SetConfig+0x138>
 8004fd0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004fd4:	f7ff ff26 	bl	8004e24 <LL_RCC_GetLPUARTClockSource>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fde:	d017      	beq.n	8005010 <UART_SetConfig+0x12c>
 8004fe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fe4:	d817      	bhi.n	8005016 <UART_SetConfig+0x132>
 8004fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fea:	d00b      	beq.n	8005004 <UART_SetConfig+0x120>
 8004fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff0:	d811      	bhi.n	8005016 <UART_SetConfig+0x132>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <UART_SetConfig+0x11a>
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffa:	d006      	beq.n	800500a <UART_SetConfig+0x126>
 8004ffc:	e00b      	b.n	8005016 <UART_SetConfig+0x132>
 8004ffe:	2300      	movs	r3, #0
 8005000:	76fb      	strb	r3, [r7, #27]
 8005002:	e00d      	b.n	8005020 <UART_SetConfig+0x13c>
 8005004:	2302      	movs	r3, #2
 8005006:	76fb      	strb	r3, [r7, #27]
 8005008:	e00a      	b.n	8005020 <UART_SetConfig+0x13c>
 800500a:	2304      	movs	r3, #4
 800500c:	76fb      	strb	r3, [r7, #27]
 800500e:	e007      	b.n	8005020 <UART_SetConfig+0x13c>
 8005010:	2308      	movs	r3, #8
 8005012:	76fb      	strb	r3, [r7, #27]
 8005014:	e004      	b.n	8005020 <UART_SetConfig+0x13c>
 8005016:	2310      	movs	r3, #16
 8005018:	76fb      	strb	r3, [r7, #27]
 800501a:	e001      	b.n	8005020 <UART_SetConfig+0x13c>
 800501c:	2310      	movs	r3, #16
 800501e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a5e      	ldr	r2, [pc, #376]	; (80051a0 <UART_SetConfig+0x2bc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	f040 808b 	bne.w	8005142 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800502c:	7efb      	ldrb	r3, [r7, #27]
 800502e:	2b08      	cmp	r3, #8
 8005030:	d823      	bhi.n	800507a <UART_SetConfig+0x196>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <UART_SetConfig+0x154>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	0800505d 	.word	0x0800505d
 800503c:	0800507b 	.word	0x0800507b
 8005040:	08005065 	.word	0x08005065
 8005044:	0800507b 	.word	0x0800507b
 8005048:	0800506b 	.word	0x0800506b
 800504c:	0800507b 	.word	0x0800507b
 8005050:	0800507b 	.word	0x0800507b
 8005054:	0800507b 	.word	0x0800507b
 8005058:	08005073 	.word	0x08005073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800505c:	f7fe fef2 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8005060:	6178      	str	r0, [r7, #20]
        break;
 8005062:	e00f      	b.n	8005084 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005064:	4b50      	ldr	r3, [pc, #320]	; (80051a8 <UART_SetConfig+0x2c4>)
 8005066:	617b      	str	r3, [r7, #20]
        break;
 8005068:	e00c      	b.n	8005084 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506a:	f7fe fe6b 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 800506e:	6178      	str	r0, [r7, #20]
        break;
 8005070:	e008      	b.n	8005084 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005076:	617b      	str	r3, [r7, #20]
        break;
 8005078:	e004      	b.n	8005084 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	76bb      	strb	r3, [r7, #26]
        break;
 8005082:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 811a 	beq.w	80052c0 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	4a46      	ldr	r2, [pc, #280]	; (80051ac <UART_SetConfig+0x2c8>)
 8005092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005096:	461a      	mov	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	fbb3 f3f2 	udiv	r3, r3, r2
 800509e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d305      	bcc.n	80050bc <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d902      	bls.n	80050c2 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	76bb      	strb	r3, [r7, #26]
 80050c0:	e0fe      	b.n	80052c0 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	4a37      	ldr	r2, [pc, #220]	; (80051ac <UART_SetConfig+0x2c8>)
 80050d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	f7fb f84f 	bl	800017c <__aeabi_uldivmod>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	020b      	lsls	r3, r1, #8
 80050f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050f4:	0202      	lsls	r2, r0, #8
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	6849      	ldr	r1, [r1, #4]
 80050fa:	0849      	lsrs	r1, r1, #1
 80050fc:	4608      	mov	r0, r1
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	1814      	adds	r4, r2, r0
 8005104:	eb43 0501 	adc.w	r5, r3, r1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	461a      	mov	r2, r3
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	4620      	mov	r0, r4
 8005114:	4629      	mov	r1, r5
 8005116:	f7fb f831 	bl	800017c <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4613      	mov	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005128:	d308      	bcc.n	800513c <UART_SetConfig+0x258>
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005130:	d204      	bcs.n	800513c <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	60da      	str	r2, [r3, #12]
 800513a:	e0c1      	b.n	80052c0 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	76bb      	strb	r3, [r7, #26]
 8005140:	e0be      	b.n	80052c0 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514a:	d16a      	bne.n	8005222 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800514c:	7efb      	ldrb	r3, [r7, #27]
 800514e:	3b01      	subs	r3, #1
 8005150:	2b07      	cmp	r3, #7
 8005152:	d82d      	bhi.n	80051b0 <UART_SetConfig+0x2cc>
 8005154:	a201      	add	r2, pc, #4	; (adr r2, 800515c <UART_SetConfig+0x278>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	0800517d 	.word	0x0800517d
 8005160:	08005185 	.word	0x08005185
 8005164:	080051b1 	.word	0x080051b1
 8005168:	0800518b 	.word	0x0800518b
 800516c:	080051b1 	.word	0x080051b1
 8005170:	080051b1 	.word	0x080051b1
 8005174:	080051b1 	.word	0x080051b1
 8005178:	08005193 	.word	0x08005193
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800517c:	f7fe fe78 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8005180:	6178      	str	r0, [r7, #20]
        break;
 8005182:	e01a      	b.n	80051ba <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005184:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <UART_SetConfig+0x2c4>)
 8005186:	617b      	str	r3, [r7, #20]
        break;
 8005188:	e017      	b.n	80051ba <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518a:	f7fe fddb 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 800518e:	6178      	str	r0, [r7, #20]
        break;
 8005190:	e013      	b.n	80051ba <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005196:	617b      	str	r3, [r7, #20]
        break;
 8005198:	e00f      	b.n	80051ba <UART_SetConfig+0x2d6>
 800519a:	bf00      	nop
 800519c:	cfff69f3 	.word	0xcfff69f3
 80051a0:	40008000 	.word	0x40008000
 80051a4:	40013800 	.word	0x40013800
 80051a8:	00f42400 	.word	0x00f42400
 80051ac:	08005984 	.word	0x08005984
      default:
        pclk = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	76bb      	strb	r3, [r7, #26]
        break;
 80051b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d07f      	beq.n	80052c0 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	4a48      	ldr	r2, [pc, #288]	; (80052e8 <UART_SetConfig+0x404>)
 80051c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ca:	461a      	mov	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80051d2:	005a      	lsls	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	441a      	add	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	d916      	bls.n	800521c <UART_SetConfig+0x338>
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f4:	d212      	bcs.n	800521c <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f023 030f 	bic.w	r3, r3, #15
 80051fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	b29a      	uxth	r2, r3
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	4313      	orrs	r3, r2
 8005210:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	89fa      	ldrh	r2, [r7, #14]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	e051      	b.n	80052c0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	76bb      	strb	r3, [r7, #26]
 8005220:	e04e      	b.n	80052c0 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005222:	7efb      	ldrb	r3, [r7, #27]
 8005224:	3b01      	subs	r3, #1
 8005226:	2b07      	cmp	r3, #7
 8005228:	d821      	bhi.n	800526e <UART_SetConfig+0x38a>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <UART_SetConfig+0x34c>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005251 	.word	0x08005251
 8005234:	08005259 	.word	0x08005259
 8005238:	0800526f 	.word	0x0800526f
 800523c:	0800525f 	.word	0x0800525f
 8005240:	0800526f 	.word	0x0800526f
 8005244:	0800526f 	.word	0x0800526f
 8005248:	0800526f 	.word	0x0800526f
 800524c:	08005267 	.word	0x08005267
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005250:	f7fe fe0e 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8005254:	6178      	str	r0, [r7, #20]
        break;
 8005256:	e00f      	b.n	8005278 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <UART_SetConfig+0x408>)
 800525a:	617b      	str	r3, [r7, #20]
        break;
 800525c:	e00c      	b.n	8005278 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800525e:	f7fe fd71 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8005262:	6178      	str	r0, [r7, #20]
        break;
 8005264:	e008      	b.n	8005278 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800526a:	617b      	str	r3, [r7, #20]
        break;
 800526c:	e004      	b.n	8005278 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	76bb      	strb	r3, [r7, #26]
        break;
 8005276:	bf00      	nop
    }

    if (pclk != 0U)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d020      	beq.n	80052c0 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <UART_SetConfig+0x404>)
 8005284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005288:	461a      	mov	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	441a      	add	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d908      	bls.n	80052bc <UART_SetConfig+0x3d8>
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b0:	d204      	bcs.n	80052bc <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	e001      	b.n	80052c0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80052dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bdb0      	pop	{r4, r5, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08005984 	.word	0x08005984
 80052ec:	00f42400 	.word	0x00f42400

080052f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01a      	beq.n	8005406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ee:	d10a      	bne.n	8005406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af02      	add	r7, sp, #8
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005444:	f7fb fd6a 	bl	8000f1c <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d10e      	bne.n	8005476 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f82f 	bl	80054ca <UART_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e025      	b.n	80054c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b04      	cmp	r3, #4
 8005482:	d10e      	bne.n	80054a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f819 	bl	80054ca <UART_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e00f      	b.n	80054c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054da:	e062      	b.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d05e      	beq.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e4:	f7fb fd1a 	bl	8000f1c <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <UART_WaitOnFlagUntilTimeout+0x30>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11d      	bne.n	8005536 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005508:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e045      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d02e      	beq.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005552:	d126      	bne.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800556c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e00f      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	bf0c      	ite	eq
 80055b2:	2301      	moveq	r3, #1
 80055b4:	2300      	movne	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d08d      	beq.n	80054dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80055dc:	2302      	movs	r3, #2
 80055de:	e027      	b.n	8005630 <HAL_UARTEx_DisableFifoMode+0x66>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800560e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e02d      	b.n	80056b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2224      	movs	r2, #36	; 0x24
 8005660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f84f 	bl	8005734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e02d      	b.n	800572c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	; 0x24
 80056dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f811 	bl	8005734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005740:	2b00      	cmp	r3, #0
 8005742:	d108      	bne.n	8005756 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005754:	e031      	b.n	80057ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005756:	2308      	movs	r3, #8
 8005758:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800575a:	2308      	movs	r3, #8
 800575c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	0e5b      	lsrs	r3, r3, #25
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	0f5b      	lsrs	r3, r3, #29
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800577e:	7bbb      	ldrb	r3, [r7, #14]
 8005780:	7b3a      	ldrb	r2, [r7, #12]
 8005782:	4911      	ldr	r1, [pc, #68]	; (80057c8 <UARTEx_SetNbDataToProcess+0x94>)
 8005784:	5c8a      	ldrb	r2, [r1, r2]
 8005786:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800578a:	7b3a      	ldrb	r2, [r7, #12]
 800578c:	490f      	ldr	r1, [pc, #60]	; (80057cc <UARTEx_SetNbDataToProcess+0x98>)
 800578e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005790:	fb93 f3f2 	sdiv	r3, r3, r2
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	7b7a      	ldrb	r2, [r7, #13]
 80057a0:	4909      	ldr	r1, [pc, #36]	; (80057c8 <UARTEx_SetNbDataToProcess+0x94>)
 80057a2:	5c8a      	ldrb	r2, [r1, r2]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057a8:	7b7a      	ldrb	r2, [r7, #13]
 80057aa:	4908      	ldr	r1, [pc, #32]	; (80057cc <UARTEx_SetNbDataToProcess+0x98>)
 80057ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	0800599c 	.word	0x0800599c
 80057cc:	080059a4 	.word	0x080059a4

080057d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057d8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	43db      	mvns	r3, r3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	4013      	ands	r3, r2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005806:	b084      	sub	sp, #16
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	f107 0014 	add.w	r0, r7, #20
 8005814:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	b004      	add	sp, #16
 8005846:	4770      	bx	lr

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	; (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	; (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	; (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	; (800588c <__libc_init_array+0x44>)
 800585c:	f000 f820 	bl	80058a0 <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	080059b4 	.word	0x080059b4
 8005884:	080059b4 	.word	0x080059b4
 8005888:	080059b4 	.word	0x080059b4
 800588c:	080059b8 	.word	0x080059b8

08005890 <memset>:
 8005890:	4402      	add	r2, r0
 8005892:	4603      	mov	r3, r0
 8005894:	4293      	cmp	r3, r2
 8005896:	d100      	bne.n	800589a <memset+0xa>
 8005898:	4770      	bx	lr
 800589a:	f803 1b01 	strb.w	r1, [r3], #1
 800589e:	e7f9      	b.n	8005894 <memset+0x4>

080058a0 <_init>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr

080058ac <_fini>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr
