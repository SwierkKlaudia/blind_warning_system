
STM_ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009270  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080093b0  080093b0  000193b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009894  08009894  00019894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800989c  0800989c  0001989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000004  080098a4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000424  200001e0  08009a80  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000604  08009a80  00020604  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017202  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000300c  00000000  00000000  00037412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001aa8  00000000  00000000  0003a420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001980  00000000  00000000  0003bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000240c6  00000000  00000000  0003d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016fe3  00000000  00000000  0006190e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e48e5  00000000  00000000  000788f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0015d1d6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008328  00000000  00000000  0015d228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08009398 	.word	0x08009398

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08009398 	.word	0x08009398

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <Average>:

static dist buffor[NUMBER_OF_SAMPLES] = {0};


static dist Average(dist *tab, int N)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    dist avg = 0;
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < N; i++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	e00e      	b.n	8000f30 <Average+0x34>
    {
        avg += tab[i];
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f26:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < N; i++)
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbec      	blt.n	8000f12 <Average+0x16>
    }

    return (avg/(dist)N);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f42:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8000f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <Average_Distance>:


dist Average_Distance(const dist distance)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	ed87 0a01 	vstr	s0, [r7, #4]
	if (sample_counter < NUMBER_OF_SAMPLES)
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <Average_Distance+0x58>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d80d      	bhi.n	8000f8a <Average_Distance+0x2e>
	{
		buffor[sample_counter] = distance;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <Average_Distance+0x58>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <Average_Distance+0x5c>)
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	601a      	str	r2, [r3, #0]
		sample_counter++;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <Average_Distance+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <Average_Distance+0x58>)
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e00b      	b.n	8000fa2 <Average_Distance+0x46>
	}
	else
	{
		avg_distance = Average(buffor, NUMBER_OF_SAMPLES);
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <Average_Distance+0x5c>)
 8000f8e:	f7ff ffb5 	bl	8000efc <Average>
 8000f92:	eef0 7a40 	vmov.f32	s15, s0
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <Average_Distance+0x60>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]
		sample_counter = 0;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <Average_Distance+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	}
	return avg_distance;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <Average_Distance+0x60>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
}
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200001fc 	.word	0x200001fc
 8000fb8:	20000204 	.word	0x20000204
 8000fbc:	20000200 	.word	0x20000200

08000fc0 <Reset_Counter>:


void Reset_Counter(Meas_distance_T *struct_counter)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	struct_counter->debounce_counter = 0;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	805a      	strh	r2, [r3, #2]
	struct_counter->invalid_msg = false;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff0:	f023 0218 	bic.w	r2, r3, #24
 8000ff4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4313      	orrs	r3, r2
 8001022:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001030:	68fb      	ldr	r3, [r7, #12]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f000 fd80 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f836 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f9fa 	bl	8001444 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001050:	f000 f982 	bl	8001358 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001054:	f000 f9ce 	bl	80013f4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8001058:	f000 f8d4 	bl	8001204 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Start Timer for HC-SR04 module */
  HAL_TIM_Base_Start(&htim2);
 800105c:	4814      	ldr	r0, [pc, #80]	; (80010b0 <main+0x70>)
 800105e:	f002 fff3 	bl	8004048 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, HCSR04_PWM_CHANNEL);
 8001062:	2108      	movs	r1, #8
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <main+0x70>)
 8001066:	f003 f897 	bl	8004198 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim2, HCSR04_START_CHANNEL);
 800106a:	2100      	movs	r1, #0
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <main+0x70>)
 800106e:	f003 f9cf 	bl	8004410 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, HCSR04_STOP_CHANNEL);
 8001072:	2104      	movs	r1, #4
 8001074:	480e      	ldr	r0, [pc, #56]	; (80010b0 <main+0x70>)
 8001076:	f003 faa5 	bl	80045c4 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((Meas_distance.debounce_counter < DEBOUNCE_CYCLES) && (Meas_distance.invalid_msg == false))
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <main+0x74>)
 800107c:	885b      	ldrh	r3, [r3, #2]
 800107e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <main+0x62>
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <main+0x74>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f083 0301 	eor.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <main+0x62>
	  {
		  Meas_distance.debounce_counter++;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <main+0x74>)
 8001096:	885b      	ldrh	r3, [r3, #2]
 8001098:	3301      	adds	r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <main+0x74>)
 800109e:	805a      	strh	r2, [r3, #2]
 80010a0:	e005      	b.n	80010ae <main+0x6e>
	  }
	  else
	  {
		  Meas_distance.invalid_msg = true;
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <main+0x74>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
		  Meas_distance.debounce_counter = 0;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <main+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	805a      	strh	r2, [r3, #2]
	  if ((Meas_distance.debounce_counter < DEBOUNCE_CYCLES) && (Meas_distance.invalid_msg == false))
 80010ae:	e7e4      	b.n	800107a <main+0x3a>
 80010b0:	20000210 	.word	0x20000210
 80010b4:	200005e0 	.word	0x200005e0

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ae      	sub	sp, #184	; 0xb8
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010c2:	2248      	movs	r2, #72	; 0x48
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 fa7a 	bl	80065c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	615a      	str	r2, [r3, #20]
 80010de:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2250      	movs	r2, #80	; 0x50
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 fa6a 	bl	80065c0 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010fa:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f023 0303 	bic.w	r3, r3, #3
 8001106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001110:	f001 f948 	bl	80023a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff63 	bl	8000fe0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111a:	4b39      	ldr	r3, [pc, #228]	; (8001200 <SystemClock_Config+0x148>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001122:	4a37      	ldr	r2, [pc, #220]	; (8001200 <SystemClock_Config+0x148>)
 8001124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <SystemClock_Config+0x148>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001136:	2327      	movs	r3, #39	; 0x27
 8001138:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800114a:	2301      	movs	r3, #1
 800114c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800115c:	2360      	movs	r3, #96	; 0x60
 800115e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fcad 	bl	8002acc <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001178:	f000 fa4e 	bl	8001618 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800117c:	236f      	movs	r3, #111	; 0x6f
 800117e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001180:	2302      	movs	r3, #2
 8001182:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001198:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119c:	2101      	movs	r1, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 f822 	bl	80031e8 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011aa:	f000 fa35 	bl	8001618 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80011ae:	f242 1301 	movw	r3, #8449	; 0x2101
 80011b2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80011b4:	2318      	movs	r3, #24
 80011b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80011b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80011be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011c2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80011c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011c8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80011ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80011da:	2300      	movs	r3, #0
 80011dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80011de:	2300      	movs	r3, #0
 80011e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fc4b 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80011f0:	f000 fa12 	bl	8001618 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011f4:	f002 fdba 	bl	8003d6c <HAL_RCCEx_EnableMSIPLLMode>
}
 80011f8:	bf00      	nop
 80011fa:	37b8      	adds	r7, #184	; 0xb8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58000400 	.word	0x58000400

08001204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b092      	sub	sp, #72	; 0x48
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001244:	4b43      	ldr	r3, [pc, #268]	; (8001354 <MX_TIM2_Init+0x150>)
 8001246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <MX_TIM2_Init+0x150>)
 800124e:	2220      	movs	r2, #32
 8001250:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b40      	ldr	r3, [pc, #256]	; (8001354 <MX_TIM2_Init+0x150>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8001258:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <MX_TIM2_Init+0x150>)
 800125a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800125e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <MX_TIM2_Init+0x150>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <MX_TIM2_Init+0x150>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126c:	4839      	ldr	r0, [pc, #228]	; (8001354 <MX_TIM2_Init+0x150>)
 800126e:	f002 fe94 	bl	8003f9a <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001278:	f000 f9ce 	bl	8001618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001286:	4619      	mov	r1, r3
 8001288:	4832      	ldr	r0, [pc, #200]	; (8001354 <MX_TIM2_Init+0x150>)
 800128a:	f003 fd7f 	bl	8004d8c <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001294:	f000 f9c0 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001298:	482e      	ldr	r0, [pc, #184]	; (8001354 <MX_TIM2_Init+0x150>)
 800129a:	f003 f857 	bl	800434c <HAL_TIM_IC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012a4:	f000 f9b8 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012a8:	482a      	ldr	r0, [pc, #168]	; (8001354 <MX_TIM2_Init+0x150>)
 80012aa:	f002 ff13 	bl	80040d4 <HAL_TIM_PWM_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012b4:	f000 f9b0 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c4:	4619      	mov	r1, r3
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <MX_TIM2_Init+0x150>)
 80012c8:	f004 faf8 	bl	80058bc <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80012d2:	f000 f9a1 	bl	8001618 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	4819      	ldr	r0, [pc, #100]	; (8001354 <MX_TIM2_Init+0x150>)
 80012f0:	f003 fba7 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80012fa:	f000 f98d 	bl	8001618 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012fe:	2302      	movs	r3, #2
 8001300:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001302:	2302      	movs	r3, #2
 8001304:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_TIM2_Init+0x150>)
 8001310:	f003 fb97 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800131a:	f000 f97d 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131e:	2360      	movs	r3, #96	; 0x60
 8001320:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 11;
 8001322:	230b      	movs	r3, #11
 8001324:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	2208      	movs	r2, #8
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM2_Init+0x150>)
 8001336:	f003 fc19 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x140>
  {
    Error_Handler();
 8001340:	f000 f96a 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM2_Init+0x150>)
 8001346:	f000 f9f2 	bl	800172e <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3748      	adds	r7, #72	; 0x48
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000210 	.word	0x20000210

08001358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800135e:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <MX_USART1_UART_Init+0x98>)
 8001360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800136c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001370:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001380:	220c      	movs	r2, #12
 8001382:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a2:	4812      	ldr	r0, [pc, #72]	; (80013ec <MX_USART1_UART_Init+0x94>)
 80013a4:	f004 fb28 	bl	80059f8 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80013ae:	f000 f933 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b2:	2100      	movs	r1, #0
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_USART1_UART_Init+0x94>)
 80013b6:	f004 ffd3 	bl	8006360 <HAL_UARTEx_SetTxFifoThreshold>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80013c0:	f000 f92a 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c4:	2100      	movs	r1, #0
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <MX_USART1_UART_Init+0x94>)
 80013c8:	f005 f808 	bl	80063dc <HAL_UARTEx_SetRxFifoThreshold>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80013d2:	f000 f921 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART1_UART_Init+0x94>)
 80013d8:	f004 ff89 	bl	80062ee <HAL_UARTEx_DisableFifoMode>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80013e2:	f000 f919 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000025c 	.word	0x2000025c
 80013f0:	40013800 	.word	0x40013800

080013f4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USB_PCD_Init+0x48>)
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <MX_USB_PCD_Init+0x4c>)
 80013fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_USB_PCD_Init+0x48>)
 8001400:	2208      	movs	r2, #8
 8001402:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <MX_USB_PCD_Init+0x48>)
 8001406:	2202      	movs	r2, #2
 8001408:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USB_PCD_Init+0x48>)
 800140c:	2202      	movs	r2, #2
 800140e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_USB_PCD_Init+0x48>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USB_PCD_Init+0x48>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_USB_PCD_Init+0x48>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USB_PCD_Init+0x48>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_USB_PCD_Init+0x48>)
 800142a:	f000 feab 	bl	8002184 <HAL_PCD_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001434:	f000 f8f0 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200002ec 	.word	0x200002ec
 8001440:	40006800 	.word	0x40006800

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	2004      	movs	r0, #4
 800145a:	f7ff fdd7 	bl	800100c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff fdd4 	bl	800100c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	2002      	movs	r0, #2
 8001466:	f7ff fdd1 	bl	800100c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	2008      	movs	r0, #8
 800146c:	f7ff fdce 	bl	800100c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|SPEAKER_VCC_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2133      	movs	r1, #51	; 0x33
 8001474:	4814      	ldr	r0, [pc, #80]	; (80014c8 <MX_GPIO_Init+0x84>)
 8001476:	f000 fe6d 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147a:	2310      	movs	r3, #16
 800147c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <MX_GPIO_Init+0x88>)
 800148c:	f000 fcf2 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin SPEAKER_VCC_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|SPEAKER_VCC_Pin|LD1_Pin;
 8001490:	2333      	movs	r3, #51	; 0x33
 8001492:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4808      	ldr	r0, [pc, #32]	; (80014c8 <MX_GPIO_Init+0x84>)
 80014a6:	f000 fce5 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80014aa:	2303      	movs	r3, #3
 80014ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_GPIO_Init+0x8c>)
 80014bc:	f000 fcda 	bl	8001e74 <HAL_GPIO_Init>

}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	00000000 	.word	0x00000000

080014d8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d13d      	bne.n	8001566 <HAL_TIM_IC_CaptureCallback+0x8e>
  {
    uint16_t time = (uint16_t)((uint16_t)__HAL_TIM_GetCompare(&htim2, HCSR04_STOP_CHANNEL) - (uint16_t)__HAL_TIM_GetCompare(&htim2, HCSR04_START_CHANNEL));
 80014ea:	4b23      	ldr	r3, [pc, #140]	; (8001578 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	81fb      	strh	r3, [r7, #14]
    Meas_distance.distance = Average_Distance((dist)time /(2.0 * SOUND_SPEED));
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001508:	ee17 0a90 	vmov	r0, s15
 800150c:	f7fe fff4 	bl	80004f8 <__aeabi_f2d>
 8001510:	a317      	add	r3, pc, #92	; (adr r3, 8001570 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f971 	bl	80007fc <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb19 	bl	8000b58 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	ee00 3a10 	vmov	s0, r3
 800152c:	f7ff fd16 	bl	8000f5c <Average_Distance>
 8001530:	eef0 7a40 	vmov.f32	s15, s0
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001536:	edc3 7a01 	vstr	s15, [r3, #4]
    Reset_Counter(&Meas_distance);
 800153a:	4810      	ldr	r0, [pc, #64]	; (800157c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800153c:	f7ff fd40 	bl	8000fc0 <Reset_Counter>
    HAL_TIM_IC_Start_IT(&htim2, HCSR04_STOP_CHANNEL);
 8001540:	2104      	movs	r1, #4
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001544:	f003 f83e 	bl	80045c4 <HAL_TIM_IC_Start_IT>
    counter++;
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001552:	701a      	strb	r2, [r3, #0]

	if (counter > 3)
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d904      	bls.n	8001566 <HAL_TIM_IC_CaptureCallback+0x8e>
	{
	  Send_Distance_UART();
 800155c:	f000 f820 	bl	80015a0 <Send_Distance_UART>
	  counter = 0;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	}
  }
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	d70a3d71 	.word	0xd70a3d71
 8001574:	405130a3 	.word	0x405130a3
 8001578:	20000210 	.word	0x20000210
 800157c:	200005e0 	.word	0x200005e0
 8001580:	200005e8 	.word	0x200005e8

08001584 <Get_Distance>:

dist Get_Distance(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	return (Meas_distance.distance);
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <Get_Distance+0x18>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	ee07 3a90 	vmov	s15, r3
}
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	200005e0 	.word	0x200005e0

080015a0 <Send_Distance_UART>:

static void Send_Distance_UART(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
	float distance = Get_Distance();
 80015a6:	f7ff ffed 	bl	8001584 <Get_Distance>
 80015aa:	ed87 0a07 	vstr	s0, [r7, #28]

	char uart_buf[23];
	sprintf(uart_buf, "Distance: %.1f [cm]\r\n", (distance));
 80015ae:	69f8      	ldr	r0, [r7, #28]
 80015b0:	f7fe ffa2 	bl	80004f8 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	1d38      	adds	r0, r7, #4
 80015ba:	4913      	ldr	r1, [pc, #76]	; (8001608 <Send_Distance_UART+0x68>)
 80015bc:	f005 fc72 	bl	8006ea4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fddc 	bl	8000180 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	1d39      	adds	r1, r7, #4
 80015ce:	2364      	movs	r3, #100	; 0x64
 80015d0:	480e      	ldr	r0, [pc, #56]	; (800160c <Send_Distance_UART+0x6c>)
 80015d2:	f004 fa61 	bl	8005a98 <HAL_UART_Transmit>

	if (distance < 60)
 80015d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80015da:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001610 <Send_Distance_UART+0x70>
 80015de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d505      	bpl.n	80015f4 <Send_Distance_UART+0x54>
	{
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2110      	movs	r1, #16
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <Send_Distance_UART+0x74>)
 80015ee:	f000 fdb1 	bl	8002154 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_RESET);
	}
}
 80015f2:	e004      	b.n	80015fe <Send_Distance_UART+0x5e>
		HAL_GPIO_WritePin(SPEAKER_VCC_GPIO_Port, SPEAKER_VCC_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2110      	movs	r1, #16
 80015f8:	4806      	ldr	r0, [pc, #24]	; (8001614 <Send_Distance_UART+0x74>)
 80015fa:	f000 fdab 	bl	8002154 <HAL_GPIO_WritePin>
}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	080093b0 	.word	0x080093b0
 800160c:	2000025c 	.word	0x2000025c
 8001610:	42700000 	.word	0x42700000
 8001614:	48000400 	.word	0x48000400

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>

08001622 <LL_AHB2_GRP1_EnableClock>:
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4313      	orrs	r3, r2
 8001638:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800163a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4013      	ands	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4313      	orrs	r3, r2
 800166a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001678:	68fb      	ldr	r3, [r7, #12]
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800168e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001692:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4313      	orrs	r3, r2
 800169c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4013      	ands	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e6:	d11e      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff ffb3 	bl	8001654 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff ff97 	bl	8001622 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80016f4:	2301      	movs	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001704:	2301      	movs	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f000 fbaf 	bl	8001e74 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	201c      	movs	r0, #28
 800171c:	f000 fb75 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001720:	201c      	movs	r0, #28
 8001722:	f000 fb8c 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b088      	sub	sp, #32
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174e:	d113      	bne.n	8001778 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	2001      	movs	r0, #1
 8001752:	f7ff ff66 	bl	8001622 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 8001756:	2304      	movs	r3, #4
 8001758:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001766:	2301      	movs	r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f000 fb7e 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_UART_MspInit+0x58>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d116      	bne.n	80017d0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017a6:	f7ff ff6e 	bl	8001686 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff ff39 	bl	8001622 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017b0:	23c0      	movs	r3, #192	; 0xc0
 80017b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c0:	2307      	movs	r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <HAL_UART_MspInit+0x5c>)
 80017cc:	f000 fb52 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40013800 	.word	0x40013800
 80017dc:	48000400 	.word	0x48000400

080017e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_PCD_MspInit+0x5c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d118      	bne.n	8001834 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2001      	movs	r0, #1
 8001804:	f7ff ff0d 	bl	8001622 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001808:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800180c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800181a:	230a      	movs	r3, #10
 800181c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f000 fb24 	bl	8001e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800182c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001830:	f7ff ff10 	bl	8001654 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40006800 	.word	0x40006800

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f9b6 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM2_IRQHandler+0x10>)
 800189a:	f002 ffb3 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000210 	.word	0x20000210

080018a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_kill>:

int _kill(int pid, int sig)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018c2:	f004 fe53 	bl	800656c <__errno>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2216      	movs	r2, #22
 80018ca:	601a      	str	r2, [r3, #0]
	return -1;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_exit>:

void _exit (int status)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ffe7 	bl	80018b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ea:	e7fe      	b.n	80018ea <_exit+0x12>

080018ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e00a      	b.n	8001914 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018fe:	f3af 8000 	nop.w
 8001902:	4601      	mov	r1, r0
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	b2ca      	uxtb	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf0      	blt.n	80018fe <_read+0x12>
	}

return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e009      	b.n	800194c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	60ba      	str	r2, [r7, #8]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf1      	blt.n	8001938 <_write+0x12>
	}
	return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_close>:

int _close(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001986:	605a      	str	r2, [r3, #4]
	return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_isatty>:

int _isatty(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return 1;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f004 fdb8 	bl	800656c <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20030000 	.word	0x20030000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	200005ec 	.word	0x200005ec
 8001a30:	20000608 	.word	0x20000608

08001a34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <SystemInit+0x98>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <SystemInit+0x98>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001a60:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <SystemInit+0x9c>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7e:	f023 0305 	bic.w	r3, r3, #5
 8001a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <SystemInit+0xa0>)
 8001aa0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <SystemInit+0xa0>)
 8001aa8:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	faf6fefb 	.word	0xfaf6fefb
 8001ad4:	22041000 	.word	0x22041000

08001ad8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ad8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ada:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001adc:	3304      	adds	r3, #4

08001ade <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ade:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ae2:	d3f9      	bcc.n	8001ad8 <CopyDataInit>
  bx lr
 8001ae4:	4770      	bx	lr

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ae6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ae8:	3004      	adds	r0, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001aea:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>
  bx lr
 8001aee:	4770      	bx	lr

08001af0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001af2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001af4:	f7ff ff9e 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001af8:	480b      	ldr	r0, [pc, #44]	; (8001b28 <LoopForever+0x8>)
 8001afa:	490c      	ldr	r1, [pc, #48]	; (8001b2c <LoopForever+0xc>)
 8001afc:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <LoopForever+0x10>)
 8001afe:	2300      	movs	r3, #0
 8001b00:	f7ff ffed 	bl	8001ade <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <LoopForever+0x14>)
 8001b06:	490c      	ldr	r1, [pc, #48]	; (8001b38 <LoopForever+0x18>)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f7ff ffee 	bl	8001aea <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b0e:	480b      	ldr	r0, [pc, #44]	; (8001b3c <LoopForever+0x1c>)
 8001b10:	490b      	ldr	r1, [pc, #44]	; (8001b40 <LoopForever+0x20>)
 8001b12:	2300      	movs	r3, #0
 8001b14:	f7ff ffe9 	bl	8001aea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b18:	f004 fd2e 	bl	8006578 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001b1c:	f7ff fa90 	bl	8001040 <main>

08001b20 <LoopForever>:

LoopForever:
  b LoopForever
 8001b20:	e7fe      	b.n	8001b20 <LoopForever>
 8001b22:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001b24:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b28:	20000004 	.word	0x20000004
 8001b2c:	200001e0 	.word	0x200001e0
 8001b30:	080098a4 	.word	0x080098a4
  INIT_BSS _sbss, _ebss
 8001b34:	200001e0 	.word	0x200001e0
 8001b38:	20000604 	.word	0x20000604
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b3c:	20030000 	.word	0x20030000
 8001b40:	20030000 	.word	0x20030000

08001b44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC1_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_Init+0x3c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <HAL_Init+0x3c>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5e:	2003      	movs	r0, #3
 8001b60:	f000 f948 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b64:	2000      	movs	r0, #0
 8001b66:	f000 f80f 	bl	8001b88 <HAL_InitTick>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	e001      	b.n	8001b7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b76:	f7ff fd9f 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	58004000 	.word	0x58004000

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_InitTick+0x6c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d024      	beq.n	8001be6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b9c:	f001 fcd0 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_InitTick+0x6c>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bac:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f950 	bl	8001e5a <HAL_SYSTICK_Config>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	d809      	bhi.n	8001bda <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295
 8001bce:	f000 f91c 	bl	8001e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd2:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <HAL_InitTick+0x70>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e004      	b.n	8001bea <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000000c 	.word	0x2000000c
 8001bf8:	20000008 	.word	0x20000008

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	200005f0 	.word	0x200005f0

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200005f0 	.word	0x200005f0

08001c3c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTickPrio+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff29 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff40 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff90 	bl	8001d48 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5f 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff33 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa4 	bl	8001db0 <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	e14c      	b.n	800211e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 813e 	beq.w	8002118 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d00b      	beq.n	8001ebc <HAL_GPIO_Init+0x48>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d007      	beq.n	8001ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb0:	2b11      	cmp	r3, #17
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b12      	cmp	r3, #18
 8001eba:	d130      	bne.n	8001f1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 0201 	and.w	r2, r3, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0xea>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d123      	bne.n	8001fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	6939      	ldr	r1, [r7, #16]
 8001fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0203 	and.w	r2, r3, #3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8098 	beq.w	8002118 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fe8:	4a54      	ldr	r2, [pc, #336]	; (800213c <HAL_GPIO_Init+0x2c8>)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002012:	d019      	beq.n	8002048 <HAL_GPIO_Init+0x1d4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x2cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_GPIO_Init+0x1d0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00d      	beq.n	8002040 <HAL_GPIO_Init+0x1cc>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_GPIO_Init+0x2d4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <HAL_GPIO_Init+0x1c8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a47      	ldr	r2, [pc, #284]	; (800214c <HAL_GPIO_Init+0x2d8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_GPIO_Init+0x1c4>
 8002034:	2304      	movs	r3, #4
 8002036:	e008      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002038:	2307      	movs	r3, #7
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 800203c:	2303      	movs	r3, #3
 800203e:	e004      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002040:	2302      	movs	r3, #2
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002048:	2300      	movs	r3, #0
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4093      	lsls	r3, r2
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800205a:	4938      	ldr	r1, [pc, #224]	; (800213c <HAL_GPIO_Init+0x2c8>)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002068:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800208e:	4a30      	ldr	r2, [pc, #192]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002096:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 8002098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	f47f aeab 	bne.w	8001e84 <HAL_GPIO_Init+0x10>
  }
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40010000 	.word	0x40010000
 8002140:	48000400 	.word	0x48000400
 8002144:	48000800 	.word	0x48000800
 8002148:	48000c00 	.word	0x48000c00
 800214c:	48001000 	.word	0x48001000
 8002150:	58000800 	.word	0x58000800

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002170:	e002      	b.n	8002178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	b08b      	sub	sp, #44	; 0x2c
 8002188:	af06      	add	r7, sp, #24
 800218a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0d7      	b.n	8002346 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fb18 	bl	80017e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2203      	movs	r2, #3
 80021b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 f999 	bl	80064f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e04c      	b.n	8002262 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3301      	adds	r3, #1
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	b298      	uxth	r0, r3
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3336      	adds	r3, #54	; 0x36
 8002206:	4602      	mov	r2, r0
 8002208:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	3303      	adds	r3, #3
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3338      	adds	r3, #56	; 0x38
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	333c      	adds	r3, #60	; 0x3c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	3340      	adds	r3, #64	; 0x40
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d3ad      	bcc.n	80021c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e044      	b.n	80022fc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3301      	adds	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3b5      	bcc.n	8002272 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	687e      	ldr	r6, [r7, #4]
 800230e:	466d      	mov	r5, sp
 8002310:	f106 0410 	add.w	r4, r6, #16
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	602b      	str	r3, [r5, #0]
 800231c:	1d33      	adds	r3, r6, #4
 800231e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	f004 f902 	bl	800652a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f805 	bl	800234e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800234e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002372:	b29b      	uxth	r3, r3
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002386:	b29b      	uxth	r3, r3
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	58000400 	.word	0x58000400

080023c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_PWREx_GetVoltageRange+0x18>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	58000400 	.word	0x58000400

080023e0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023f2:	d101      	bne.n	80023f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_RCC_HSE_Enable>:
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_RCC_HSE_Disable>:
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_RCC_HSE_IsReady>:
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002452:	d101      	bne.n	8002458 <LL_RCC_HSE_IsReady+0x18>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <LL_RCC_HSE_IsReady+0x1a>
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_RCC_HSI_Enable>:
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_RCC_HSI_Disable>:
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_RCC_HSI_IsReady>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b2:	d101      	bne.n	80024b8 <LL_RCC_HSI_IsReady+0x18>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <LL_RCC_HSI_IsReady+0x1a>
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_HSI48_Enable>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_RCC_HSI48_Disable>:
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_RCC_HSI48_IsReady>:
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d101      	bne.n	800254a <LL_RCC_HSI48_IsReady+0x18>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_RCC_HSI48_IsReady+0x1a>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_RCC_LSE_Enable>:
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_RCC_LSE_Disable>:
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_RCC_LSE_EnableBypass>:
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_RCC_LSE_DisableBypass>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d101      	bne.n	80025f6 <LL_RCC_LSE_IsReady+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_RCC_LSE_IsReady+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d101      	bne.n	800265e <LL_RCC_LSI1_IsReady+0x18>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <LL_RCC_LSI1_IsReady+0x1a>
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d101      	bne.n	80026c6 <LL_RCC_LSI2_IsReady+0x18>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <LL_RCC_LSI2_IsReady+0x1a>
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6013      	str	r3, [r2, #0]
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6013      	str	r3, [r2, #0]
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d101      	bne.n	8002752 <LL_RCC_MSI_IsReady+0x16>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_RCC_MSI_IsReady+0x18>
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002796:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2bb0      	cmp	r3, #176	; 0xb0
 800279c:	d901      	bls.n	80027a2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800279e:	23b0      	movs	r3, #176	; 0xb0
 80027a0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80027a2:	687b      	ldr	r3, [r7, #4]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80027e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 0203 	bic.w	r2, r3, #3
 80027ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 030c 	and.w	r3, r3, #12
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800287e:	f023 020f 	bic.w	r2, r3, #15
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80028f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800297c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002980:	6013      	str	r3, [r2, #0]
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800299e:	d101      	bne.n	80029a4 <LL_RCC_PLL_IsReady+0x18>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <LL_RCC_PLL_IsReady+0x1a>
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0303 	and.w	r3, r3, #3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d101      	bne.n	8002a2a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a4a:	d101      	bne.n	8002a50 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d101      	bne.n	8002a76 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a94:	d101      	bne.n	8002a9a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ab8:	d101      	bne.n	8002abe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b08d      	sub	sp, #52	; 0x34
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e37f      	b.n	80031de <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8092 	beq.w	8002c10 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aec:	f7ff fe89 	bl	8002802 <LL_RCC_GetSysClkSource>
 8002af0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af2:	f7ff ff82 	bl	80029fa <LL_RCC_PLL_GetMainSource>
 8002af6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3e>
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d14c      	bne.n	8002b9e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d149      	bne.n	8002b9e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b0a:	f7ff fe17 	bl	800273c <LL_RCC_MSI_IsReady>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_OscConfig+0x54>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e35e      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002b24:	f7ff fe2f 	bl	8002786 <LL_RCC_MSI_GetRange>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	429c      	cmp	r4, r3
 8002b2c:	d914      	bls.n	8002b58 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fd44 	bl	80035c0 <RCC_SetFlashLatencyFromMSIRange>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e34d      	b.n	80031de <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fe09 	bl	800275e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fe2d 	bl	80027b0 <LL_RCC_MSI_SetCalibTrimming>
 8002b56:	e013      	b.n	8002b80 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fdfe 	bl	800275e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fe22 	bl	80027b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fd25 	bl	80035c0 <RCC_SetFlashLatencyFromMSIRange>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e32e      	b.n	80031de <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b80:	f000 fcde 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4aa5      	ldr	r2, [pc, #660]	; (8002e1c <HAL_RCC_OscConfig+0x350>)
 8002b88:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b8a:	4ba5      	ldr	r3, [pc, #660]	; (8002e20 <HAL_RCC_OscConfig+0x354>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fffa 	bl	8001b88 <HAL_InitTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d039      	beq.n	8002c0e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e31f      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01e      	beq.n	8002be4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ba6:	f7ff fdab 	bl	8002700 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002baa:	f7ff f83b 	bl	8001c24 <HAL_GetTick>
 8002bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb2:	f7ff f837 	bl	8001c24 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e30c      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002bc4:	f7ff fdba 	bl	800273c <LL_RCC_MSI_IsReady>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f1      	beq.n	8002bb2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fdc3 	bl	800275e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fde7 	bl	80027b0 <LL_RCC_MSI_SetCalibTrimming>
 8002be2:	e015      	b.n	8002c10 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002be4:	f7ff fd9b 	bl	800271e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be8:	f7ff f81c 	bl	8001c24 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf0:	f7ff f818 	bl	8001c24 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e2ed      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c02:	f7ff fd9b 	bl	800273c <LL_RCC_MSI_IsReady>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f1      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x124>
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d04e      	beq.n	8002cba <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1c:	f7ff fdf1 	bl	8002802 <LL_RCC_GetSysClkSource>
 8002c20:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c22:	f7ff feea 	bl	80029fa <LL_RCC_PLL_GetMainSource>
 8002c26:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x16e>
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d10d      	bne.n	8002c50 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d10a      	bne.n	8002c50 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3a:	f7ff fc01 	bl	8002440 <LL_RCC_HSE_IsReady>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d039      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1ec>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d135      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e2c6      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x194>
 8002c5a:	f7ff fbd3 	bl	8002404 <LL_RCC_HSE_Enable>
 8002c5e:	e001      	b.n	8002c64 <HAL_RCC_OscConfig+0x198>
 8002c60:	f7ff fbdf 	bl	8002422 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe ffda 	bl	8001c24 <HAL_GetTick>
 8002c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe ffd6 	bl	8001c24 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e2ab      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c86:	f7ff fbdb 	bl	8002440 <LL_RCC_HSE_IsReady>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f1      	beq.n	8002c74 <HAL_RCC_OscConfig+0x1a8>
 8002c90:	e013      	b.n	8002cba <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe ffc7 	bl	8001c24 <HAL_GetTick>
 8002c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9a:	f7fe ffc3 	bl	8001c24 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b64      	cmp	r3, #100	; 0x64
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e298      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002cac:	f7ff fbc8 	bl	8002440 <LL_RCC_HSE_IsReady>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f1      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1ce>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d051      	beq.n	8002d6a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc6:	f7ff fd9c 	bl	8002802 <LL_RCC_GetSysClkSource>
 8002cca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ccc:	f7ff fe95 	bl	80029fa <LL_RCC_PLL_GetMainSource>
 8002cd0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x218>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d113      	bne.n	8002d06 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d110      	bne.n	8002d06 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce4:	f7ff fbdc 	bl	80024a0 <LL_RCC_HSI_IsReady>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x22e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e271      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fbe0 	bl	80024c4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d04:	e031      	b.n	8002d6a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0e:	f7ff fba9 	bl	8002464 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe ff87 	bl	8001c24 <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe ff83 	bl	8001c24 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e258      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d2c:	f7ff fbb8 	bl	80024a0 <LL_RCC_HSI_IsReady>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f1      	beq.n	8002d1a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fbc2 	bl	80024c4 <LL_RCC_HSI_SetCalibTrimming>
 8002d40:	e013      	b.n	8002d6a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d42:	f7ff fb9e 	bl	8002482 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe ff6d 	bl	8001c24 <HAL_GetTick>
 8002d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe ff69 	bl	8001c24 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e23e      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d60:	f7ff fb9e 	bl	80024a0 <LL_RCC_HSI_IsReady>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f1      	bne.n	8002d4e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80a4 	beq.w	8002ecc <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d077      	beq.n	8002e7c <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d04b      	beq.n	8002e30 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002d98:	f7ff fc55 	bl	8002646 <LL_RCC_LSI1_IsReady>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d113      	bne.n	8002dca <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002da2:	f7ff fc2e 	bl	8002602 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002da6:	f7fe ff3d 	bl	8001c24 <HAL_GetTick>
 8002daa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002dae:	f7fe ff39 	bl	8001c24 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e20e      	b.n	80031de <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002dc0:	f7ff fc41 	bl	8002646 <LL_RCC_LSI1_IsReady>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f1      	beq.n	8002dae <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002dca:	f7ff fc4e 	bl	800266a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe ff29 	bl	8001c24 <HAL_GetTick>
 8002dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002dd6:	f7fe ff25 	bl	8001c24 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e1fa      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002de8:	f7ff fc61 	bl	80026ae <LL_RCC_LSI2_IsReady>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f1      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fc6b 	bl	80026d2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002dfc:	f7ff fc12 	bl	8002624 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe ff10 	bl	8001c24 <HAL_GetTick>
 8002e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002e06:	e00d      	b.n	8002e24 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e08:	f7fe ff0c 	bl	8001c24 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d906      	bls.n	8002e24 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1e1      	b.n	80031de <HAL_RCC_OscConfig+0x712>
 8002e1a:	bf00      	nop
 8002e1c:	20000004 	.word	0x20000004
 8002e20:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002e24:	f7ff fc0f 	bl	8002646 <LL_RCC_LSI1_IsReady>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ec      	bne.n	8002e08 <HAL_RCC_OscConfig+0x33c>
 8002e2e:	e04d      	b.n	8002ecc <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002e30:	f7ff fbe7 	bl	8002602 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fef6 	bl	8001c24 <HAL_GetTick>
 8002e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e3c:	f7fe fef2 	bl	8001c24 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1c7      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002e4e:	f7ff fbfa 	bl	8002646 <LL_RCC_LSI1_IsReady>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f1      	beq.n	8002e3c <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002e58:	f7ff fc18 	bl	800268c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e5e:	f7fe fee1 	bl	8001c24 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e1b6      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002e70:	f7ff fc1d 	bl	80026ae <LL_RCC_LSI2_IsReady>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f1      	bne.n	8002e5e <HAL_RCC_OscConfig+0x392>
 8002e7a:	e027      	b.n	8002ecc <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002e7c:	f7ff fc06 	bl	800268c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fed0 	bl	8001c24 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e88:	f7fe fecc 	bl	8001c24 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1a1      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002e9a:	f7ff fc08 	bl	80026ae <LL_RCC_LSI2_IsReady>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f1      	bne.n	8002e88 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002ea4:	f7ff fbbe 	bl	8002624 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe febc 	bl	8001c24 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002eb0:	f7fe feb8 	bl	8001c24 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e18d      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002ec2:	f7ff fbc0 	bl	8002646 <LL_RCC_LSI1_IsReady>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f1      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x3e4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d05b      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed8:	4ba7      	ldr	r3, [pc, #668]	; (8003178 <HAL_RCC_OscConfig+0x6ac>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d114      	bne.n	8002f0e <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ee4:	f7ff fa5e 	bl	80023a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee8:	f7fe fe9c 	bl	8001c24 <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef0:	f7fe fe98 	bl	8001c24 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e16d      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f02:	4b9d      	ldr	r3, [pc, #628]	; (8003178 <HAL_RCC_OscConfig+0x6ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <HAL_RCC_OscConfig+0x450>
 8002f16:	f7ff fb1e 	bl	8002556 <LL_RCC_LSE_Enable>
 8002f1a:	e00c      	b.n	8002f36 <HAL_RCC_OscConfig+0x46a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d104      	bne.n	8002f2e <HAL_RCC_OscConfig+0x462>
 8002f24:	f7ff fb39 	bl	800259a <LL_RCC_LSE_EnableBypass>
 8002f28:	f7ff fb15 	bl	8002556 <LL_RCC_LSE_Enable>
 8002f2c:	e003      	b.n	8002f36 <HAL_RCC_OscConfig+0x46a>
 8002f2e:	f7ff fb23 	bl	8002578 <LL_RCC_LSE_Disable>
 8002f32:	f7ff fb43 	bl	80025bc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d014      	beq.n	8002f68 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fe71 	bl	8001c24 <HAL_GetTick>
 8002f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe fe6d 	bl	8001c24 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e140      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f5c:	f7ff fb3f 	bl	80025de <LL_RCC_LSE_IsReady>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ef      	beq.n	8002f46 <HAL_RCC_OscConfig+0x47a>
 8002f66:	e013      	b.n	8002f90 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe fe5c 	bl	8001c24 <HAL_GetTick>
 8002f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fe fe58 	bl	8001c24 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e12b      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f86:	f7ff fb2a 	bl	80025de <LL_RCC_LSE_IsReady>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ef      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d014      	beq.n	8002fce <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa4:	f7ff faa3 	bl	80024ee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fe3c 	bl	8001c24 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb0:	f7fe fe38 	bl	8001c24 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e10d      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002fc2:	f7ff fab6 	bl	8002532 <LL_RCC_HSI48_IsReady>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f1      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4e4>
 8002fcc:	e013      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fce:	f7ff fa9f 	bl	8002510 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fe27 	bl	8001c24 <HAL_GetTick>
 8002fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fda:	f7fe fe23 	bl	8001c24 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0f8      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002fec:	f7ff faa1 	bl	8002532 <LL_RCC_HSI48_IsReady>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f1      	bne.n	8002fda <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80ee 	beq.w	80031dc <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003000:	f7ff fbff 	bl	8002802 <LL_RCC_GetSysClkSource>
 8003004:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	2b02      	cmp	r3, #2
 8003014:	f040 80b4 	bne.w	8003180 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0203 	and.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	429a      	cmp	r2, r3
 8003024:	d123      	bne.n	800306e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d11c      	bne.n	800306e <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d114      	bne.n	800306e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d10d      	bne.n	800306e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d05d      	beq.n	800312a <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b0c      	cmp	r3, #12
 8003072:	d058      	beq.n	8003126 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0ab      	b.n	80031de <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003086:	f7ff fc72 	bl	800296e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800308a:	f7fe fdcb 	bl	8001c24 <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003092:	f7fe fdc7 	bl	8001c24 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e09c      	b.n	80031de <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ef      	bne.n	8003092 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	4b30      	ldr	r3, [pc, #192]	; (800317c <HAL_RCC_OscConfig+0x6b0>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ca:	0212      	lsls	r2, r2, #8
 80030cc:	4311      	orrs	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030d8:	4311      	orrs	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030de:	430a      	orrs	r2, r1
 80030e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030e8:	f7ff fc32 	bl	8002950 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fa:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030fc:	f7fe fd92 	bl	8001c24 <HAL_GetTick>
 8003100:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe fd8e 	bl	8001c24 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e063      	b.n	80031de <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ef      	beq.n	8003104 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003124:	e05a      	b.n	80031dc <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e059      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d151      	bne.n	80031dc <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003138:	f7ff fc0a 	bl	8002950 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800314c:	f7fe fd6a 	bl	8001c24 <HAL_GetTick>
 8003150:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fd66 	bl	8001c24 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e03b      	b.n	80031de <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ef      	beq.n	8003154 <HAL_RCC_OscConfig+0x688>
 8003174:	e032      	b.n	80031dc <HAL_RCC_OscConfig+0x710>
 8003176:	bf00      	nop
 8003178:	58000400 	.word	0x58000400
 800317c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b0c      	cmp	r3, #12
 8003184:	d028      	beq.n	80031d8 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	f7ff fbf2 	bl	800296e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800319a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80031a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe fd39 	bl	8001c24 <HAL_GetTick>
 80031b2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fd35 	bl	8001c24 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ef      	bne.n	80031b6 <HAL_RCC_OscConfig+0x6ea>
 80031d6:	e001      	b.n	80031dc <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3734      	adds	r7, #52	; 0x34
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd90      	pop	{r4, r7, pc}
 80031e6:	bf00      	nop

080031e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e12d      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031fc:	4b98      	ldr	r3, [pc, #608]	; (8003460 <HAL_RCC_ClockConfig+0x278>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d91b      	bls.n	8003242 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b95      	ldr	r3, [pc, #596]	; (8003460 <HAL_RCC_ClockConfig+0x278>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 0207 	bic.w	r2, r3, #7
 8003212:	4993      	ldr	r1, [pc, #588]	; (8003460 <HAL_RCC_ClockConfig+0x278>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800321a:	f7fe fd03 	bl	8001c24 <HAL_GetTick>
 800321e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003220:	e008      	b.n	8003234 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003222:	f7fe fcff 	bl	8001c24 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e111      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003234:	4b8a      	ldr	r3, [pc, #552]	; (8003460 <HAL_RCC_ClockConfig+0x278>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d1ef      	bne.n	8003222 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fae1 	bl	800281a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003258:	f7fe fce4 	bl	8001c24 <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003260:	f7fe fce0 	bl	8001c24 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0f2      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003272:	f7ff fbce 	bl	8002a12 <LL_RCC_IsActiveFlag_HPRE>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f1      	beq.n	8003260 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d016      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fad8 	bl	8002842 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003292:	f7fe fcc7 	bl	8001c24 <HAL_GetTick>
 8003296:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800329a:	f7fe fcc3 	bl	8001c24 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0d5      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80032ac:	f7ff fbc3 	bl	8002a36 <LL_RCC_IsActiveFlag_C2HPRE>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f1      	beq.n	800329a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fad1 	bl	800286e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032cc:	f7fe fcaa 	bl	8001c24 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032d4:	f7fe fca6 	bl	8001c24 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0b8      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032e6:	f7ff fbb9 	bl	8002a5c <LL_RCC_IsActiveFlag_SHDHPRE>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f1      	beq.n	80032d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff facb 	bl	800289c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003306:	f7fe fc8d 	bl	8001c24 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800330e:	f7fe fc89 	bl	8001c24 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e09b      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003320:	f7ff fbaf 	bl	8002a82 <LL_RCC_IsActiveFlag_PPRE1>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f1      	beq.n	800330e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d017      	beq.n	8003366 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fac1 	bl	80028c4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003342:	f7fe fc6f 	bl	8001c24 <HAL_GetTick>
 8003346:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800334a:	f7fe fc6b 	bl	8001c24 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e07d      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800335c:	f7ff fba3 	bl	8002aa6 <LL_RCC_IsActiveFlag_PPRE2>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f1      	beq.n	800334a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d043      	beq.n	80033fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d106      	bne.n	8003388 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800337a:	f7ff f861 	bl	8002440 <LL_RCC_HSE_IsReady>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11e      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e067      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d106      	bne.n	800339e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003390:	f7ff fafc 	bl	800298c <LL_RCC_PLL_IsReady>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d113      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e05c      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80033a6:	f7ff f9c9 	bl	800273c <LL_RCC_MSI_IsReady>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d108      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e051      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80033b4:	f7ff f874 	bl	80024a0 <LL_RCC_HSI_IsReady>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e04a      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fa07 	bl	80027da <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fe fc2a 	bl	8001c24 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fe fc26 	bl	8001c24 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e036      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	f7ff fa0a 	bl	8002802 <LL_RCC_GetSysClkSource>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d1ec      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fa:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_ClockConfig+0x278>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d21b      	bcs.n	8003440 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003408:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_RCC_ClockConfig+0x278>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 0207 	bic.w	r2, r3, #7
 8003410:	4913      	ldr	r1, [pc, #76]	; (8003460 <HAL_RCC_ClockConfig+0x278>)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003418:	f7fe fc04 	bl	8001c24 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	e008      	b.n	8003432 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003420:	f7fe fc00 	bl	8001c24 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e012      	b.n	8003458 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_ClockConfig+0x278>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d1ef      	bne.n	8003420 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003440:	f000 f87e 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8003444:	4603      	mov	r3, r0
 8003446:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_RCC_ClockConfig+0x27c>)
 8003448:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800344a:	f7fe fbf7 	bl	8001c3c <HAL_GetTickPrio>
 800344e:	4603      	mov	r3, r0
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe fb99 	bl	8001b88 <HAL_InitTick>
 8003456:	4603      	mov	r3, r0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	58004000 	.word	0x58004000
 8003464:	20000004 	.word	0x20000004

08003468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	f7ff f9c8 	bl	8002802 <LL_RCC_GetSysClkSource>
 8003472:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800347a:	f7ff f984 	bl	8002786 <LL_RCC_MSI_GetRange>
 800347e:	4603      	mov	r3, r0
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e04b      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d102      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003496:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e045      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d10a      	bne.n	80034b8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034a2:	f7fe ff9d 	bl	80023e0 <LL_RCC_HSE_IsEnabledDiv2>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d102      	bne.n	80034b2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e03a      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_RCC_GetSysClockFreq+0xd4>)
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e037      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80034b8:	f7ff fa9f 	bl	80029fa <LL_RCC_PLL_GetMainSource>
 80034bc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d003      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x64>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x6a>
 80034ca:	e00d      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80034cc:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034ce:	60bb      	str	r3, [r7, #8]
        break;
 80034d0:	e015      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034d2:	f7fe ff85 	bl	80023e0 <LL_RCC_HSE_IsEnabledDiv2>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034de:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80034e0:	e00d      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <HAL_RCC_GetSysClockFreq+0xd4>)
 80034e4:	60bb      	str	r3, [r7, #8]
        break;
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80034e8:	f7ff f94d 	bl	8002786 <LL_RCC_MSI_GetRange>
 80034ec:	4603      	mov	r3, r0
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	4a0f      	ldr	r2, [pc, #60]	; (8003534 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	60bb      	str	r3, [r7, #8]
        break;
 80034fc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80034fe:	f7ff fa57 	bl	80029b0 <LL_RCC_PLL_GetN>
 8003502:	4602      	mov	r2, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	fb03 f402 	mul.w	r4, r3, r2
 800350a:	f7ff fa6a 	bl	80029e2 <LL_RCC_PLL_GetDivider>
 800350e:	4603      	mov	r3, r0
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	3301      	adds	r3, #1
 8003514:	fbb4 f4f3 	udiv	r4, r4, r3
 8003518:	f7ff fa57 	bl	80029ca <LL_RCC_PLL_GetR>
 800351c:	4603      	mov	r3, r0
 800351e:	0f5b      	lsrs	r3, r3, #29
 8003520:	3301      	adds	r3, #1
 8003522:	fbb4 f3f3 	udiv	r3, r4, r3
 8003526:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bd90      	pop	{r4, r7, pc}
 8003532:	bf00      	nop
 8003534:	08009454 	.word	0x08009454
 8003538:	00f42400 	.word	0x00f42400
 800353c:	01e84800 	.word	0x01e84800

08003540 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003540:	b598      	push	{r3, r4, r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003544:	f7ff ff90 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8003548:	4604      	mov	r4, r0
 800354a:	f7ff f9cf 	bl	80028ec <LL_RCC_GetAHBPrescaler>
 800354e:	4603      	mov	r3, r0
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	4a03      	ldr	r2, [pc, #12]	; (8003564 <HAL_RCC_GetHCLKFreq+0x24>)
 8003558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd98      	pop	{r3, r4, r7, pc}
 8003564:	080093f4 	.word	0x080093f4

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b598      	push	{r3, r4, r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800356c:	f7ff ffe8 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8003570:	4604      	mov	r4, r0
 8003572:	f7ff f9d5 	bl	8002920 <LL_RCC_GetAPB1Prescaler>
 8003576:	4603      	mov	r3, r0
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	4a04      	ldr	r2, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa24 f303 	lsr.w	r3, r4, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd98      	pop	{r3, r4, r7, pc}
 8003590:	08009434 	.word	0x08009434

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b598      	push	{r3, r4, r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003598:	f7ff ffd2 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 800359c:	4604      	mov	r4, r0
 800359e:	f7ff f9cb 	bl	8002938 <LL_RCC_GetAPB2Prescaler>
 80035a2:	4603      	mov	r3, r0
 80035a4:	0adb      	lsrs	r3, r3, #11
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd98      	pop	{r3, r4, r7, pc}
 80035bc:	08009434 	.word	0x08009434

080035c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2bb0      	cmp	r3, #176	; 0xb0
 80035cc:	d903      	bls.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e007      	b.n	80035e6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	4a11      	ldr	r2, [pc, #68]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80035e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80035e6:	f7ff f98d 	bl	8002904 <LL_RCC_GetAHB4Prescaler>
 80035ea:	4603      	mov	r3, r0
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80035f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	0c9c      	lsrs	r4, r3, #18
 800360a:	f7fe fedb 	bl	80023c4 <HAL_PWREx_GetVoltageRange>
 800360e:	4603      	mov	r3, r0
 8003610:	4619      	mov	r1, r3
 8003612:	4620      	mov	r0, r4
 8003614:	f000 f80c 	bl	8003630 <RCC_SetFlashLatency>
 8003618:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	bf00      	nop
 8003624:	08009454 	.word	0x08009454
 8003628:	080093f4 	.word	0x080093f4
 800362c:	431bde83 	.word	0x431bde83

08003630 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b093      	sub	sp, #76	; 0x4c
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800363a:	4b37      	ldr	r3, [pc, #220]	; (8003718 <RCC_SetFlashLatency+0xe8>)
 800363c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003646:	4a35      	ldr	r2, [pc, #212]	; (800371c <RCC_SetFlashLatency+0xec>)
 8003648:	f107 031c 	add.w	r3, r7, #28
 800364c:	ca07      	ldmia	r2, {r0, r1, r2}
 800364e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <RCC_SetFlashLatency+0xf0>)
 8003654:	f107 040c 	add.w	r4, r7, #12
 8003658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800365a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800365e:	2300      	movs	r3, #0
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003668:	d11a      	bne.n	80036a0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800366a:	2300      	movs	r3, #0
 800366c:	643b      	str	r3, [r7, #64]	; 0x40
 800366e:	e013      	b.n	8003698 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	3348      	adds	r3, #72	; 0x48
 8003676:	443b      	add	r3, r7
 8003678:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	429a      	cmp	r2, r3
 8003680:	d807      	bhi.n	8003692 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	3348      	adds	r3, #72	; 0x48
 8003688:	443b      	add	r3, r7
 800368a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800368e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003690:	e020      	b.n	80036d4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003694:	3301      	adds	r3, #1
 8003696:	643b      	str	r3, [r7, #64]	; 0x40
 8003698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369a:	2b03      	cmp	r3, #3
 800369c:	d9e8      	bls.n	8003670 <RCC_SetFlashLatency+0x40>
 800369e:	e019      	b.n	80036d4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a4:	e013      	b.n	80036ce <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80036a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	3348      	adds	r3, #72	; 0x48
 80036ac:	443b      	add	r3, r7
 80036ae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d807      	bhi.n	80036c8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	3348      	adds	r3, #72	; 0x48
 80036be:	443b      	add	r3, r7
 80036c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80036c6:	e005      	b.n	80036d4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	3301      	adds	r3, #1
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d9e8      	bls.n	80036a6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <RCC_SetFlashLatency+0xf4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 0207 	bic.w	r2, r3, #7
 80036dc:	4911      	ldr	r1, [pc, #68]	; (8003724 <RCC_SetFlashLatency+0xf4>)
 80036de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036e4:	f7fe fa9e 	bl	8001c24 <HAL_GetTick>
 80036e8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036ea:	e008      	b.n	80036fe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036ec:	f7fe fa9a 	bl	8001c24 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e007      	b.n	800370e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <RCC_SetFlashLatency+0xf4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003708:	429a      	cmp	r2, r3
 800370a:	d1ef      	bne.n	80036ec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	374c      	adds	r7, #76	; 0x4c
 8003712:	46bd      	mov	sp, r7
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	bf00      	nop
 8003718:	080093c8 	.word	0x080093c8
 800371c:	080093d8 	.word	0x080093d8
 8003720:	080093e4 	.word	0x080093e4
 8003724:	58004000 	.word	0x58004000

08003728 <LL_RCC_LSE_IsEnabled>:
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <LL_RCC_LSE_IsEnabled+0x18>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <LL_RCC_LSE_IsEnabled+0x1a>
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_RCC_LSE_IsReady>:
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d101      	bne.n	8003764 <LL_RCC_LSE_IsReady+0x18>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <LL_RCC_LSE_IsReady+0x1a>
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_RCC_MSI_EnablePLLMode>:
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6013      	str	r3, [r2, #0]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_RCC_SetRFWKPClockSource>:
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_RCC_SetSMPSClockSource>:
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f023 0203 	bic.w	r2, r3, #3
 80037cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <LL_RCC_SetSMPSPrescaler>:
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_RCC_SetUSARTClockSource>:
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_RCC_SetLPUARTClockSource>:
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800383e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800384a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_RCC_SetI2CClockSource>:
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800387a:	43db      	mvns	r3, r3
 800387c:	401a      	ands	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_RCC_SetLPTIMClockSource>:
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0c1b      	lsrs	r3, r3, #16
 80038b0:	041b      	lsls	r3, r3, #16
 80038b2:	43db      	mvns	r3, r3
 80038b4:	401a      	ands	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_RCC_SetSAIClockSource>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_RCC_SetRNGClockSource>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_RCC_SetCLK48ClockSource>:
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_RCC_SetUSBClockSource>:
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ffe3 	bl	8003928 <LL_RCC_SetCLK48ClockSource>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <LL_RCC_SetADCClockSource>:
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800397e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_RCC_SetRTCClockSource>:
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_RCC_GetRTCClockSource>:
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_RCC_ForceBackupDomainReset>:
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <LL_RCC_ReleaseBackupDomainReset>:
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <LL_RCC_PLLSAI1_Enable>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_RCC_PLLSAI1_Disable>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a50:	6013      	str	r3, [r2, #0]
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_RCC_PLLSAI1_IsReady>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a6e:	d101      	bne.n	8003a74 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d034      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aa4:	d021      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003aa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aaa:	d81b      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab0:	d01d      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003ab2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab6:	d815      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac0:	d110      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ad2:	e00d      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f94d 	bl	8003d78 <RCCEx_PLLSAI1_ConfigNP>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ae2:	e005      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	77fb      	strb	r3, [r7, #31]
        break;
 8003ae8:	e002      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af0:	7ffb      	ldrb	r3, [r7, #31]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fee8 	bl	80038d0 <LL_RCC_SetSAIClockSource>
 8003b00:	e001      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	7ffb      	ldrb	r3, [r7, #31]
 8003b04:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d046      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003b12:	f7ff ff56 	bl	80039c2 <LL_RCC_GetRTCClockSource>
 8003b16:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d03c      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003b22:	f7fe fc3f 	bl	80023a4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff30 	bl	8003996 <LL_RCC_SetRTCClockSource>
 8003b36:	e02e      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003b42:	f7ff ff4b 	bl	80039dc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003b46:	f7ff ff5a 	bl	80039fe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003b62:	f7ff fde1 	bl	8003728 <LL_RCC_LSE_IsEnabled>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d114      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b6c:	f7fe f85a 	bl	8001c24 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003b72:	e00b      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fe f856 	bl	8001c24 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d902      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	77fb      	strb	r3, [r7, #31]
              break;
 8003b8a:	e004      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003b8c:	f7ff fdde 	bl	800374c <LL_RCC_LSE_IsReady>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d1ee      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	77bb      	strb	r3, [r7, #30]
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7ffb      	ldrb	r3, [r7, #31]
 8003b9e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fe2a 	bl	800380a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fe35 	bl	8003836 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fe5d 	bl	800389c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fe52 	bl	800389c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fe2a 	bl	8003862 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fe1f 	bl	8003862 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d022      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fe8d 	bl	8003954 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c42:	d107      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c52:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f8e3 	bl	8003e2e <RCCEx_PLLSAI1_ConfigNQ>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003c6c:	7ffb      	ldrb	r3, [r7, #31]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02b      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c94:	d003      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fe2a 	bl	80038fc <LL_RCC_SetRNGClockSource>
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f7ff fe21 	bl	80038fc <LL_RCC_SetRNGClockSource>
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff fe34 	bl	8003928 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003cc8:	d107      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d022      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fe3d 	bl	800396a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f8e3 	bl	8003ee4 <RCCEx_PLLSAI1_ConfigNR>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003d22:	7ffb      	ldrb	r3, [r7, #31]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003d28:	7ffb      	ldrb	r3, [r7, #31]
 8003d2a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fd26 	bl	800378e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fd45 	bl	80037e2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fd2c 	bl	80037ba <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003d62:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003d70:	f7ff fcfe 	bl	8003770 <LL_RCC_MSI_EnablePLLMode>
}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003d84:	f7ff fe5b 	bl	8003a3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d88:	f7fd ff4c 	bl	8001c24 <HAL_GetTick>
 8003d8c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d8e:	e009      	b.n	8003da4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d90:	f7fd ff48 	bl	8001c24 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d902      	bls.n	8003da4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	73fb      	strb	r3, [r7, #15]
      break;
 8003da2:	e004      	b.n	8003dae <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003da4:	f7ff fe5a 	bl	8003a5c <LL_RCC_PLLSAI1_IsReady>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d137      	bne.n	8003e24 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dde:	4313      	orrs	r3, r2
 8003de0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003de2:	f7ff fe1d 	bl	8003a20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de6:	f7fd ff1d 	bl	8001c24 <HAL_GetTick>
 8003dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003dec:	e009      	b.n	8003e02 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dee:	f7fd ff19 	bl	8001c24 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d902      	bls.n	8003e02 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	73fb      	strb	r3, [r7, #15]
        break;
 8003e00:	e004      	b.n	8003e0c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e02:	f7ff fe2b 	bl	8003a5c <LL_RCC_PLLSAI1_IsReady>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d1f0      	bne.n	8003dee <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d108      	bne.n	8003e24 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e20:	4313      	orrs	r3, r2
 8003e22:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003e3a:	f7ff fe00 	bl	8003a3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e3e:	f7fd fef1 	bl	8001c24 <HAL_GetTick>
 8003e42:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e44:	e009      	b.n	8003e5a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e46:	f7fd feed 	bl	8001c24 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d902      	bls.n	8003e5a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e004      	b.n	8003e64 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e5a:	f7ff fdff 	bl	8003a5c <LL_RCC_PLLSAI1_IsReady>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d137      	bne.n	8003eda <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e94:	4313      	orrs	r3, r2
 8003e96:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e98:	f7ff fdc2 	bl	8003a20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fd fec2 	bl	8001c24 <HAL_GetTick>
 8003ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ea2:	e009      	b.n	8003eb8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ea4:	f7fd febe 	bl	8001c24 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d902      	bls.n	8003eb8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003eb6:	e004      	b.n	8003ec2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003eb8:	f7ff fdd0 	bl	8003a5c <LL_RCC_PLLSAI1_IsReady>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d1f0      	bne.n	8003ea4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d108      	bne.n	8003eda <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ef0:	f7ff fda5 	bl	8003a3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ef4:	f7fd fe96 	bl	8001c24 <HAL_GetTick>
 8003ef8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003efa:	e009      	b.n	8003f10 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003efc:	f7fd fe92 	bl	8001c24 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d902      	bls.n	8003f10 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f0e:	e004      	b.n	8003f1a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f10:	f7ff fda4 	bl	8003a5c <LL_RCC_PLLSAI1_IsReady>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d137      	bne.n	8003f90 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f34:	4313      	orrs	r3, r2
 8003f36:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003f4e:	f7ff fd67 	bl	8003a20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f52:	f7fd fe67 	bl	8001c24 <HAL_GetTick>
 8003f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f58:	e009      	b.n	8003f6e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f5a:	f7fd fe63 	bl	8001c24 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d902      	bls.n	8003f6e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f6c:	e004      	b.n	8003f78 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f6e:	f7ff fd75 	bl	8003a5c <LL_RCC_PLLSAI1_IsReady>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d1f0      	bne.n	8003f5a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e049      	b.n	8004040 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fd fb80 	bl	80016c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f000 ffc5 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e02e      	b.n	80040be <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a17      	ldr	r2, [pc, #92]	; (80040cc <HAL_TIM_Base_Start+0x84>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_Base_Start+0x34>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407a:	d115      	bne.n	80040a8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <HAL_TIM_Base_Start+0x88>)
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d015      	beq.n	80040ba <HAL_TIM_Base_Start+0x72>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d011      	beq.n	80040ba <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a6:	e008      	b.n	80040ba <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e000      	b.n	80040bc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	00010007 	.word	0x00010007

080040d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e049      	b.n	800417a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f841 	bl	8004182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 ff28 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_TIM_PWM_Start+0x24>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e03c      	b.n	8004236 <HAL_TIM_PWM_Start+0x9e>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d109      	bne.n	80041d6 <HAL_TIM_PWM_Start+0x3e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e02f      	b.n	8004236 <HAL_TIM_PWM_Start+0x9e>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d109      	bne.n	80041f0 <HAL_TIM_PWM_Start+0x58>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e022      	b.n	8004236 <HAL_TIM_PWM_Start+0x9e>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d109      	bne.n	800420a <HAL_TIM_PWM_Start+0x72>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e015      	b.n	8004236 <HAL_TIM_PWM_Start+0x9e>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b10      	cmp	r3, #16
 800420e:	d109      	bne.n	8004224 <HAL_TIM_PWM_Start+0x8c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e008      	b.n	8004236 <HAL_TIM_PWM_Start+0x9e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e079      	b.n	8004332 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Start+0xb6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800424c:	e023      	b.n	8004296 <HAL_TIM_PWM_Start+0xfe>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Start+0xc6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800425c:	e01b      	b.n	8004296 <HAL_TIM_PWM_Start+0xfe>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start+0xd6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800426c:	e013      	b.n	8004296 <HAL_TIM_PWM_Start+0xfe>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start+0xe6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800427c:	e00b      	b.n	8004296 <HAL_TIM_PWM_Start+0xfe>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b10      	cmp	r3, #16
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0xf6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800428c:	e003      	b.n	8004296 <HAL_TIM_PWM_Start+0xfe>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	6839      	ldr	r1, [r7, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 fae6 	bl	8005870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a24      	ldr	r2, [pc, #144]	; (800433c <HAL_TIM_PWM_Start+0x1a4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_TIM_PWM_Start+0x12a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a23      	ldr	r2, [pc, #140]	; (8004340 <HAL_TIM_PWM_Start+0x1a8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_TIM_PWM_Start+0x12a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a21      	ldr	r2, [pc, #132]	; (8004344 <HAL_TIM_PWM_Start+0x1ac>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_PWM_Start+0x12e>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_TIM_PWM_Start+0x130>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_TIM_PWM_Start+0x1a4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_TIM_PWM_Start+0x158>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ee:	d115      	bne.n	800431c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <HAL_TIM_PWM_Start+0x1b0>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d015      	beq.n	800432e <HAL_TIM_PWM_Start+0x196>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d011      	beq.n	800432e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	e008      	b.n	800432e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e000      	b.n	8004330 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40014400 	.word	0x40014400
 8004344:	40014800 	.word	0x40014800
 8004348:	00010007 	.word	0x00010007

0800434c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e049      	b.n	80043f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f841 	bl	80043fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f000 fdec 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <HAL_TIM_IC_Start+0x1a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e023      	b.n	8004472 <HAL_TIM_IC_Start+0x62>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d104      	bne.n	800443a <HAL_TIM_IC_Start+0x2a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004436:	b2db      	uxtb	r3, r3
 8004438:	e01b      	b.n	8004472 <HAL_TIM_IC_Start+0x62>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d104      	bne.n	800444a <HAL_TIM_IC_Start+0x3a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004446:	b2db      	uxtb	r3, r3
 8004448:	e013      	b.n	8004472 <HAL_TIM_IC_Start+0x62>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	d104      	bne.n	800445a <HAL_TIM_IC_Start+0x4a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e00b      	b.n	8004472 <HAL_TIM_IC_Start+0x62>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b10      	cmp	r3, #16
 800445e:	d104      	bne.n	800446a <HAL_TIM_IC_Start+0x5a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e003      	b.n	8004472 <HAL_TIM_IC_Start+0x62>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004470:	b2db      	uxtb	r3, r3
 8004472:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_TIM_IC_Start+0x74>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004480:	b2db      	uxtb	r3, r3
 8004482:	e013      	b.n	80044ac <HAL_TIM_IC_Start+0x9c>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b04      	cmp	r3, #4
 8004488:	d104      	bne.n	8004494 <HAL_TIM_IC_Start+0x84>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e00b      	b.n	80044ac <HAL_TIM_IC_Start+0x9c>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b08      	cmp	r3, #8
 8004498:	d104      	bne.n	80044a4 <HAL_TIM_IC_Start+0x94>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e003      	b.n	80044ac <HAL_TIM_IC_Start+0x9c>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d102      	bne.n	80044ba <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d001      	beq.n	80044be <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e079      	b.n	80045b2 <HAL_TIM_IC_Start+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_IC_Start+0xbe>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044cc:	e023      	b.n	8004516 <HAL_TIM_IC_Start+0x106>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d104      	bne.n	80044de <HAL_TIM_IC_Start+0xce>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044dc:	e01b      	b.n	8004516 <HAL_TIM_IC_Start+0x106>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_IC_Start+0xde>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ec:	e013      	b.n	8004516 <HAL_TIM_IC_Start+0x106>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b0c      	cmp	r3, #12
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_IC_Start+0xee>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044fc:	e00b      	b.n	8004516 <HAL_TIM_IC_Start+0x106>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b10      	cmp	r3, #16
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start+0xfe>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800450c:	e003      	b.n	8004516 <HAL_TIM_IC_Start+0x106>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_IC_Start+0x116>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	e013      	b.n	800454e <HAL_TIM_IC_Start+0x13e>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_IC_Start+0x126>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004534:	e00b      	b.n	800454e <HAL_TIM_IC_Start+0x13e>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_IC_Start+0x136>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004544:	e003      	b.n	800454e <HAL_TIM_IC_Start+0x13e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f001 f98a 	bl	8005870 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a16      	ldr	r2, [pc, #88]	; (80045bc <HAL_TIM_IC_Start+0x1ac>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIM_IC_Start+0x160>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d115      	bne.n	800459c <HAL_TIM_IC_Start+0x18c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <HAL_TIM_IC_Start+0x1b0>)
 8004578:	4013      	ands	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b06      	cmp	r3, #6
 8004580:	d015      	beq.n	80045ae <HAL_TIM_IC_Start+0x19e>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d011      	beq.n	80045ae <HAL_TIM_IC_Start+0x19e>
    {
      __HAL_TIM_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	e008      	b.n	80045ae <HAL_TIM_IC_Start+0x19e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e000      	b.n	80045b0 <HAL_TIM_IC_Start+0x1a0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	00010007 	.word	0x00010007

080045c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <HAL_TIM_IC_Start_IT+0x1a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e023      	b.n	8004626 <HAL_TIM_IC_Start_IT+0x62>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_IC_Start_IT+0x2a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e01b      	b.n	8004626 <HAL_TIM_IC_Start_IT+0x62>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_IC_Start_IT+0x3a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	e013      	b.n	8004626 <HAL_TIM_IC_Start_IT+0x62>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d104      	bne.n	800460e <HAL_TIM_IC_Start_IT+0x4a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460a:	b2db      	uxtb	r3, r3
 800460c:	e00b      	b.n	8004626 <HAL_TIM_IC_Start_IT+0x62>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b10      	cmp	r3, #16
 8004612:	d104      	bne.n	800461e <HAL_TIM_IC_Start_IT+0x5a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e003      	b.n	8004626 <HAL_TIM_IC_Start_IT+0x62>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004624:	b2db      	uxtb	r3, r3
 8004626:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <HAL_TIM_IC_Start_IT+0x74>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e013      	b.n	8004660 <HAL_TIM_IC_Start_IT+0x9c>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b04      	cmp	r3, #4
 800463c:	d104      	bne.n	8004648 <HAL_TIM_IC_Start_IT+0x84>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e00b      	b.n	8004660 <HAL_TIM_IC_Start_IT+0x9c>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b08      	cmp	r3, #8
 800464c:	d104      	bne.n	8004658 <HAL_TIM_IC_Start_IT+0x94>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e003      	b.n	8004660 <HAL_TIM_IC_Start_IT+0x9c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800465e:	b2db      	uxtb	r3, r3
 8004660:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d102      	bne.n	800466e <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004668:	7bbb      	ldrb	r3, [r7, #14]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d001      	beq.n	8004672 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0bf      	b.n	80047f2 <HAL_TIM_IC_Start_IT+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_TIM_IC_Start_IT+0xbe>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004680:	e023      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x106>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b04      	cmp	r3, #4
 8004686:	d104      	bne.n	8004692 <HAL_TIM_IC_Start_IT+0xce>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004690:	e01b      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x106>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_IC_Start_IT+0xde>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a0:	e013      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x106>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_IC_Start_IT+0xee>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x106>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_IC_Start_IT+0xfe>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c0:	e003      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x106>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <HAL_TIM_IC_Start_IT+0x116>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d8:	e013      	b.n	8004702 <HAL_TIM_IC_Start_IT+0x13e>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d104      	bne.n	80046ea <HAL_TIM_IC_Start_IT+0x126>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e8:	e00b      	b.n	8004702 <HAL_TIM_IC_Start_IT+0x13e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_IC_Start_IT+0x136>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046f8:	e003      	b.n	8004702 <HAL_TIM_IC_Start_IT+0x13e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b0c      	cmp	r3, #12
 8004706:	d841      	bhi.n	800478c <HAL_TIM_IC_Start_IT+0x1c8>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <HAL_TIM_IC_Start_IT+0x14c>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004745 	.word	0x08004745
 8004714:	0800478d 	.word	0x0800478d
 8004718:	0800478d 	.word	0x0800478d
 800471c:	0800478d 	.word	0x0800478d
 8004720:	08004757 	.word	0x08004757
 8004724:	0800478d 	.word	0x0800478d
 8004728:	0800478d 	.word	0x0800478d
 800472c:	0800478d 	.word	0x0800478d
 8004730:	08004769 	.word	0x08004769
 8004734:	0800478d 	.word	0x0800478d
 8004738:	0800478d 	.word	0x0800478d
 800473c:	0800478d 	.word	0x0800478d
 8004740:	0800477b 	.word	0x0800477b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0202 	orr.w	r2, r2, #2
 8004752:	60da      	str	r2, [r3, #12]
      break;
 8004754:	e01b      	b.n	800478e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0204 	orr.w	r2, r2, #4
 8004764:	60da      	str	r2, [r3, #12]
      break;
 8004766:	e012      	b.n	800478e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	60da      	str	r2, [r3, #12]
      break;
 8004778:	e009      	b.n	800478e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0210 	orr.w	r2, r2, #16
 8004788:	60da      	str	r2, [r3, #12]
      break;
 800478a:	e000      	b.n	800478e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800478c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2201      	movs	r2, #1
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f001 f86a 	bl	8005870 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a16      	ldr	r2, [pc, #88]	; (80047fc <HAL_TIM_IC_Start_IT+0x238>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_TIM_IC_Start_IT+0x1ec>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ae:	d115      	bne.n	80047dc <HAL_TIM_IC_Start_IT+0x218>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <HAL_TIM_IC_Start_IT+0x23c>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d015      	beq.n	80047ee <HAL_TIM_IC_Start_IT+0x22a>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d011      	beq.n	80047ee <HAL_TIM_IC_Start_IT+0x22a>
    {
      __HAL_TIM_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	e008      	b.n	80047ee <HAL_TIM_IC_Start_IT+0x22a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e000      	b.n	80047f0 <HAL_TIM_IC_Start_IT+0x22c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	00010007 	.word	0x00010007

08004804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d122      	bne.n	8004860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b02      	cmp	r3, #2
 8004826:	d11b      	bne.n	8004860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0202 	mvn.w	r2, #2
 8004830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fe46 	bl	80014d8 <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fb6c 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fb73 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b04      	cmp	r3, #4
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0204 	mvn.w	r2, #4
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fc fe1c 	bl	80014d8 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fb42 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fb49 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0208 	mvn.w	r2, #8
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2204      	movs	r2, #4
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc fdf2 	bl	80014d8 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fb18 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fb1f 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b10      	cmp	r3, #16
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b10      	cmp	r3, #16
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0210 	mvn.w	r2, #16
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2208      	movs	r2, #8
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc fdc8 	bl	80014d8 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 faee 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 faf5 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0201 	mvn.w	r2, #1
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fac8 	bl	8004f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d10e      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b80      	cmp	r3, #128	; 0x80
 80049a2:	d107      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 ffee 	bl	8005990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c2:	d10e      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 ffe1 	bl	80059a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d10e      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 faa3 	bl	8004f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d10e      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d107      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f06f 0220 	mvn.w	r2, #32
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 ffa1 	bl	800597c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_TIM_IC_ConfigChannel+0x1a>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e082      	b.n	8004b62 <HAL_TIM_IC_ConfigChannel+0x120>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11b      	bne.n	8004aa2 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f000 fd57 	bl	800552c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 020c 	bic.w	r2, r2, #12
 8004a8c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6999      	ldr	r1, [r3, #24]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	619a      	str	r2, [r3, #24]
 8004aa0:	e05a      	b.n	8004b58 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d11c      	bne.n	8004ae2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f000 fdb7 	bl	800562a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004aca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6999      	ldr	r1, [r3, #24]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	021a      	lsls	r2, r3, #8
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	619a      	str	r2, [r3, #24]
 8004ae0:	e03a      	b.n	8004b58 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f000 fe04 	bl	8005704 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 020c 	bic.w	r2, r2, #12
 8004b0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69d9      	ldr	r1, [r3, #28]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	61da      	str	r2, [r3, #28]
 8004b1e:	e01b      	b.n	8004b58 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f000 fe24 	bl	800577c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69d9      	ldr	r1, [r3, #28]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e0fd      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b14      	cmp	r3, #20
 8004b92:	f200 80f0 	bhi.w	8004d76 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004d77 	.word	0x08004d77
 8004ba4:	08004d77 	.word	0x08004d77
 8004ba8:	08004d77 	.word	0x08004d77
 8004bac:	08004c31 	.word	0x08004c31
 8004bb0:	08004d77 	.word	0x08004d77
 8004bb4:	08004d77 	.word	0x08004d77
 8004bb8:	08004d77 	.word	0x08004d77
 8004bbc:	08004c73 	.word	0x08004c73
 8004bc0:	08004d77 	.word	0x08004d77
 8004bc4:	08004d77 	.word	0x08004d77
 8004bc8:	08004d77 	.word	0x08004d77
 8004bcc:	08004cb3 	.word	0x08004cb3
 8004bd0:	08004d77 	.word	0x08004d77
 8004bd4:	08004d77 	.word	0x08004d77
 8004bd8:	08004d77 	.word	0x08004d77
 8004bdc:	08004cf5 	.word	0x08004cf5
 8004be0:	08004d77 	.word	0x08004d77
 8004be4:	08004d77 	.word	0x08004d77
 8004be8:	08004d77 	.word	0x08004d77
 8004bec:	08004d35 	.word	0x08004d35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fa1a 	bl	8005030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0204 	bic.w	r2, r2, #4
 8004c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6999      	ldr	r1, [r3, #24]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	619a      	str	r2, [r3, #24]
      break;
 8004c2e:	e0a3      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fa76 	bl	8005128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6999      	ldr	r1, [r3, #24]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	021a      	lsls	r2, r3, #8
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	619a      	str	r2, [r3, #24]
      break;
 8004c70:	e082      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 facf 	bl	800521c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0208 	orr.w	r2, r2, #8
 8004c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0204 	bic.w	r2, r2, #4
 8004c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69d9      	ldr	r1, [r3, #28]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	61da      	str	r2, [r3, #28]
      break;
 8004cb0:	e062      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fb27 	bl	800530c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69d9      	ldr	r1, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	021a      	lsls	r2, r3, #8
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	61da      	str	r2, [r3, #28]
      break;
 8004cf2:	e041      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fb64 	bl	80053c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0208 	orr.w	r2, r2, #8
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0204 	bic.w	r2, r2, #4
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d32:	e021      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fb9c 	bl	8005478 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	021a      	lsls	r2, r3, #8
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d74:	e000      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_ConfigClockSource+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0b5      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x184>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de0:	d03e      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xd4>
 8004de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de6:	f200 8087 	bhi.w	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	f000 8085 	beq.w	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	d87f      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d01a      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xa6>
 8004dfc:	2b70      	cmp	r3, #112	; 0x70
 8004dfe:	d87b      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d050      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e04:	2b60      	cmp	r3, #96	; 0x60
 8004e06:	d877      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b50      	cmp	r3, #80	; 0x50
 8004e0a:	d03c      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0xfa>
 8004e0c:	2b50      	cmp	r3, #80	; 0x50
 8004e0e:	d873      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d058      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x13a>
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d86f      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d064      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e1c:	2b30      	cmp	r3, #48	; 0x30
 8004e1e:	d86b      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d060      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d867      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d05c      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d05a      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e30:	e062      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6899      	ldr	r1, [r3, #8]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f000 fcf5 	bl	8005830 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	609a      	str	r2, [r3, #8]
      break;
 8004e5e:	e04e      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f000 fcde 	bl	8005830 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e82:	609a      	str	r2, [r3, #8]
      break;
 8004e84:	e03b      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f000 fb9a 	bl	80055cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2150      	movs	r1, #80	; 0x50
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fca9 	bl	80057f6 <TIM_ITRx_SetConfig>
      break;
 8004ea4:	e02b      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 fbf6 	bl	80056a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2160      	movs	r1, #96	; 0x60
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fc99 	bl	80057f6 <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e01b      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f000 fb7a 	bl	80055cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2140      	movs	r1, #64	; 0x40
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fc89 	bl	80057f6 <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e00b      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f000 fc80 	bl	80057f6 <TIM_ITRx_SetConfig>
        break;
 8004ef6:	e002      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004efc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <TIM_Base_SetConfig+0xbc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0x20>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d108      	bne.n	8004f9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a21      	ldr	r2, [pc, #132]	; (8005024 <TIM_Base_SetConfig+0xbc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0x52>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0x52>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <TIM_Base_SetConfig+0xc0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0x52>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	; (800502c <TIM_Base_SetConfig+0xc4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <TIM_Base_SetConfig+0xbc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <TIM_Base_SetConfig+0xa0>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0b      	ldr	r2, [pc, #44]	; (8005028 <TIM_Base_SetConfig+0xc0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0xa0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <TIM_Base_SetConfig+0xc4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d103      	bne.n	8005010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	615a      	str	r2, [r3, #20]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800

08005030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0201 	bic.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0302 	bic.w	r3, r3, #2
 800507c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a24      	ldr	r2, [pc, #144]	; (800511c <TIM_OC1_SetConfig+0xec>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_OC1_SetConfig+0x70>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a23      	ldr	r2, [pc, #140]	; (8005120 <TIM_OC1_SetConfig+0xf0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC1_SetConfig+0x70>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a22      	ldr	r2, [pc, #136]	; (8005124 <TIM_OC1_SetConfig+0xf4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10c      	bne.n	80050ba <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0308 	bic.w	r3, r3, #8
 80050a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a17      	ldr	r2, [pc, #92]	; (800511c <TIM_OC1_SetConfig+0xec>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <TIM_OC1_SetConfig+0xa2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a17      	ldr	r2, [pc, #92]	; (8005124 <TIM_OC1_SetConfig+0xf4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_OC1_SetConfig+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a14      	ldr	r2, [pc, #80]	; (8005120 <TIM_OC1_SetConfig+0xf0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d111      	bne.n	80050f6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40014800 	.word	0x40014800
 8005124:	40014400 	.word	0x40014400

08005128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f023 0210 	bic.w	r2, r3, #16
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0320 	bic.w	r3, r3, #32
 8005176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a22      	ldr	r2, [pc, #136]	; (8005210 <TIM_OC2_SetConfig+0xe8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10d      	bne.n	80051a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a19      	ldr	r2, [pc, #100]	; (8005210 <TIM_OC2_SetConfig+0xe8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d007      	beq.n	80051c0 <TIM_OC2_SetConfig+0x98>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a18      	ldr	r2, [pc, #96]	; (8005214 <TIM_OC2_SetConfig+0xec>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC2_SetConfig+0x98>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a17      	ldr	r2, [pc, #92]	; (8005218 <TIM_OC2_SetConfig+0xf0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d113      	bne.n	80051e8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800

0800521c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0303 	bic.w	r3, r3, #3
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a21      	ldr	r2, [pc, #132]	; (8005300 <TIM_OC3_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10d      	bne.n	800529a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <TIM_OC3_SetConfig+0xe4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_OC3_SetConfig+0x96>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a17      	ldr	r2, [pc, #92]	; (8005304 <TIM_OC3_SetConfig+0xe8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC3_SetConfig+0x96>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a16      	ldr	r2, [pc, #88]	; (8005308 <TIM_OC3_SetConfig+0xec>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d113      	bne.n	80052da <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	621a      	str	r2, [r3, #32]
}
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800

0800530c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800535a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a14      	ldr	r2, [pc, #80]	; (80053bc <TIM_OC4_SetConfig+0xb0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_OC4_SetConfig+0x74>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <TIM_OC4_SetConfig+0xb4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC4_SetConfig+0x74>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <TIM_OC4_SetConfig+0xb8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d109      	bne.n	8005394 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	019b      	lsls	r3, r3, #6
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40012c00 	.word	0x40012c00
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800

080053c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800540c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <TIM_OC5_SetConfig+0xa4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d007      	beq.n	8005432 <TIM_OC5_SetConfig+0x6a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a12      	ldr	r2, [pc, #72]	; (8005470 <TIM_OC5_SetConfig+0xa8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d003      	beq.n	8005432 <TIM_OC5_SetConfig+0x6a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a11      	ldr	r2, [pc, #68]	; (8005474 <TIM_OC5_SetConfig+0xac>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d109      	bne.n	8005446 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005438:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	621a      	str	r2, [r3, #32]
}
 8005460:	bf00      	nop
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	051b      	lsls	r3, r3, #20
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a14      	ldr	r2, [pc, #80]	; (8005520 <TIM_OC6_SetConfig+0xa8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_OC6_SetConfig+0x6c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a13      	ldr	r2, [pc, #76]	; (8005524 <TIM_OC6_SetConfig+0xac>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC6_SetConfig+0x6c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a12      	ldr	r2, [pc, #72]	; (8005528 <TIM_OC6_SetConfig+0xb0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d109      	bne.n	80054f8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800

0800552c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0201 	bic.w	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <TIM_TI1_SetConfig+0x9c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_TI1_SetConfig+0x36>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d101      	bne.n	8005566 <TIM_TI1_SetConfig+0x3a>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <TIM_TI1_SetConfig+0x3c>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <TIM_TI1_SetConfig+0x52>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	e003      	b.n	8005586 <TIM_TI1_SetConfig+0x5a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800558c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	b2db      	uxtb	r3, r3
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f023 030a 	bic.w	r3, r3, #10
 80055a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f003 030a 	and.w	r3, r3, #10
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40012c00 	.word	0x40012c00

080055cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 030a 	bic.w	r3, r3, #10
 8005608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800562a:	b480      	push	{r7}
 800562c:	b087      	sub	sp, #28
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f023 0210 	bic.w	r2, r3, #16
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005656:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	b29b      	uxth	r3, r3
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800567c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f023 0210 	bic.w	r2, r3, #16
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	031b      	lsls	r3, r3, #12
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	621a      	str	r2, [r3, #32]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f023 0303 	bic.w	r3, r3, #3
 8005730:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005740:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	b2db      	uxtb	r3, r3
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005754:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	031b      	lsls	r3, r3, #12
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80057ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	031b      	lsls	r3, r3, #12
 80057d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	f043 0307 	orr.w	r3, r3, #7
 800581c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	609a      	str	r2, [r3, #8]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	021a      	lsls	r2, r3, #8
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	431a      	orrs	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4313      	orrs	r3, r2
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	2201      	movs	r2, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1a      	ldr	r2, [r3, #32]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	43db      	mvns	r3, r3
 8005892:	401a      	ands	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1a      	ldr	r2, [r3, #32]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	fa01 f303 	lsl.w	r3, r1, r3
 80058a8:	431a      	orrs	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e04a      	b.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1f      	ldr	r2, [pc, #124]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d108      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005904:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a12      	ldr	r2, [pc, #72]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593c:	d10c      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	4313      	orrs	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40012c00 	.word	0x40012c00

0800597c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <LL_RCC_GetUSARTClockSource>:
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4013      	ands	r3, r2
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <LL_RCC_GetLPUARTClockSource>:
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80059e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4013      	ands	r3, r2
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e042      	b.n	8005a90 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fb feaf 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2224      	movs	r2, #36	; 0x24
 8005a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f8c2 	bl	8005bc4 <UART_SetConfig>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e022      	b.n	8005a90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fade 	bl	8006014 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fb65 	bl	8006158 <UART_CheckIdleState>
 8005a8e:	4603      	mov	r3, r0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	f040 8083 	bne.w	8005bba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_UART_Transmit+0x28>
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e07b      	b.n	8005bbc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_UART_Transmit+0x3a>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e074      	b.n	8005bbc <HAL_UART_Transmit+0x124>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aea:	f7fc f89b 	bl	8001c24 <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b08:	d108      	bne.n	8005b1c <HAL_UART_Transmit+0x84>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e003      	b.n	8005b24 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005b2c:	e02c      	b.n	8005b88 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2180      	movs	r1, #128	; 0x80
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fb58 	bl	80061ee <UART_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e039      	b.n	8005bbc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	3302      	adds	r3, #2
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e007      	b.n	8005b76 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	781a      	ldrb	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	3301      	adds	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1cc      	bne.n	8005b2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2140      	movs	r1, #64	; 0x40
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fb25 	bl	80061ee <UART_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e006      	b.n	8005bbc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e000      	b.n	8005bbc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005bba:	2302      	movs	r3, #2
  }
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc8:	b08c      	sub	sp, #48	; 0x30
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4baf      	ldr	r3, [pc, #700]	; (8005eb0 <UART_SetConfig+0x2ec>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4aa4      	ldr	r2, [pc, #656]	; (8005eb4 <UART_SetConfig+0x2f0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	f023 010f 	bic.w	r1, r3, #15
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a95      	ldr	r2, [pc, #596]	; (8005eb8 <UART_SetConfig+0x2f4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d125      	bne.n	8005cb4 <UART_SetConfig+0xf0>
 8005c68:	2003      	movs	r0, #3
 8005c6a:	f7ff fea5 	bl	80059b8 <LL_RCC_GetUSARTClockSource>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d81b      	bhi.n	8005cac <UART_SetConfig+0xe8>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0xb8>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005c9d 	.word	0x08005c9d
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c92:	e042      	b.n	8005d1a <UART_SetConfig+0x156>
 8005c94:	2302      	movs	r3, #2
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e03e      	b.n	8005d1a <UART_SetConfig+0x156>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e03a      	b.n	8005d1a <UART_SetConfig+0x156>
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005caa:	e036      	b.n	8005d1a <UART_SetConfig+0x156>
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb2:	e032      	b.n	8005d1a <UART_SetConfig+0x156>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a7e      	ldr	r2, [pc, #504]	; (8005eb4 <UART_SetConfig+0x2f0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d12a      	bne.n	8005d14 <UART_SetConfig+0x150>
 8005cbe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005cc2:	f7ff fe89 	bl	80059d8 <LL_RCC_GetLPUARTClockSource>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ccc:	d01a      	beq.n	8005d04 <UART_SetConfig+0x140>
 8005cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cd2:	d81b      	bhi.n	8005d0c <UART_SetConfig+0x148>
 8005cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd8:	d00c      	beq.n	8005cf4 <UART_SetConfig+0x130>
 8005cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cde:	d815      	bhi.n	8005d0c <UART_SetConfig+0x148>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <UART_SetConfig+0x128>
 8005ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce8:	d008      	beq.n	8005cfc <UART_SetConfig+0x138>
 8005cea:	e00f      	b.n	8005d0c <UART_SetConfig+0x148>
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	e012      	b.n	8005d1a <UART_SetConfig+0x156>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e00e      	b.n	8005d1a <UART_SetConfig+0x156>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d02:	e00a      	b.n	8005d1a <UART_SetConfig+0x156>
 8005d04:	2308      	movs	r3, #8
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0a:	e006      	b.n	8005d1a <UART_SetConfig+0x156>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d12:	e002      	b.n	8005d1a <UART_SetConfig+0x156>
 8005d14:	2310      	movs	r3, #16
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a65      	ldr	r2, [pc, #404]	; (8005eb4 <UART_SetConfig+0x2f0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	f040 8097 	bne.w	8005e54 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d823      	bhi.n	8005d76 <UART_SetConfig+0x1b2>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0x170>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d77 	.word	0x08005d77
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d77 	.word	0x08005d77
 8005d44:	08005d67 	.word	0x08005d67
 8005d48:	08005d77 	.word	0x08005d77
 8005d4c:	08005d77 	.word	0x08005d77
 8005d50:	08005d77 	.word	0x08005d77
 8005d54:	08005d6f 	.word	0x08005d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d58:	f7fd fc06 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d5e:	e010      	b.n	8005d82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d60:	4b56      	ldr	r3, [pc, #344]	; (8005ebc <UART_SetConfig+0x2f8>)
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d64:	e00d      	b.n	8005d82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d66:	f7fd fb7f 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d6c:	e009      	b.n	8005d82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d74:	e005      	b.n	8005d82 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 812b 	beq.w	8005fe0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	4a4c      	ldr	r2, [pc, #304]	; (8005ec0 <UART_SetConfig+0x2fc>)
 8005d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	4413      	add	r3, r2
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d305      	bcc.n	8005dba <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d903      	bls.n	8005dc2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dc0:	e10e      	b.n	8005fe0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	60fa      	str	r2, [r7, #12]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	4a3c      	ldr	r2, [pc, #240]	; (8005ec0 <UART_SetConfig+0x2fc>)
 8005dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	603b      	str	r3, [r7, #0]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005de0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005de4:	f7fa ff08 	bl	8000bf8 <__aeabi_uldivmod>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4610      	mov	r0, r2
 8005dee:	4619      	mov	r1, r3
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	020b      	lsls	r3, r1, #8
 8005dfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dfe:	0202      	lsls	r2, r0, #8
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	6849      	ldr	r1, [r1, #4]
 8005e04:	0849      	lsrs	r1, r1, #1
 8005e06:	2000      	movs	r0, #0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	eb12 0804 	adds.w	r8, r2, r4
 8005e10:	eb43 0905 	adc.w	r9, r3, r5
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	469a      	mov	sl, r3
 8005e1c:	4693      	mov	fp, r2
 8005e1e:	4652      	mov	r2, sl
 8005e20:	465b      	mov	r3, fp
 8005e22:	4640      	mov	r0, r8
 8005e24:	4649      	mov	r1, r9
 8005e26:	f7fa fee7 	bl	8000bf8 <__aeabi_uldivmod>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4613      	mov	r3, r2
 8005e30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e38:	d308      	bcc.n	8005e4c <UART_SetConfig+0x288>
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e40:	d204      	bcs.n	8005e4c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a3a      	ldr	r2, [r7, #32]
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	e0c9      	b.n	8005fe0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e52:	e0c5      	b.n	8005fe0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5c:	d16e      	bne.n	8005f3c <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e62:	3b01      	subs	r3, #1
 8005e64:	2b07      	cmp	r3, #7
 8005e66:	d82d      	bhi.n	8005ec4 <UART_SetConfig+0x300>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x2ac>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005ec5 	.word	0x08005ec5
 8005e7c:	08005e9f 	.word	0x08005e9f
 8005e80:	08005ec5 	.word	0x08005ec5
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005ec5 	.word	0x08005ec5
 8005e8c:	08005ea7 	.word	0x08005ea7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e90:	f7fd fb80 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8005e94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e96:	e01b      	b.n	8005ed0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <UART_SetConfig+0x2f8>)
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e9c:	e018      	b.n	8005ed0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9e:	f7fd fae3 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8005ea2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ea4:	e014      	b.n	8005ed0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005eac:	e010      	b.n	8005ed0 <UART_SetConfig+0x30c>
 8005eae:	bf00      	nop
 8005eb0:	cfff69f3 	.word	0xcfff69f3
 8005eb4:	40008000 	.word	0x40008000
 8005eb8:	40013800 	.word	0x40013800
 8005ebc:	00f42400 	.word	0x00f42400
 8005ec0:	08009494 	.word	0x08009494
      default:
        pclk = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8084 	beq.w	8005fe0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	4a4b      	ldr	r2, [pc, #300]	; (800600c <UART_SetConfig+0x448>)
 8005ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eea:	005a      	lsls	r2, r3, #1
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	441a      	add	r2, r3
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b0f      	cmp	r3, #15
 8005f04:	d916      	bls.n	8005f34 <UART_SetConfig+0x370>
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0c:	d212      	bcs.n	8005f34 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f023 030f 	bic.w	r3, r3, #15
 8005f16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	085b      	lsrs	r3, r3, #1
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	8bfb      	ldrh	r3, [r7, #30]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	8bfa      	ldrh	r2, [r7, #30]
 8005f30:	60da      	str	r2, [r3, #12]
 8005f32:	e055      	b.n	8005fe0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f3a:	e051      	b.n	8005fe0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f40:	3b01      	subs	r3, #1
 8005f42:	2b07      	cmp	r3, #7
 8005f44:	d821      	bhi.n	8005f8a <UART_SetConfig+0x3c6>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <UART_SetConfig+0x388>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f8b 	.word	0x08005f8b
 8005f58:	08005f7b 	.word	0x08005f7b
 8005f5c:	08005f8b 	.word	0x08005f8b
 8005f60:	08005f8b 	.word	0x08005f8b
 8005f64:	08005f8b 	.word	0x08005f8b
 8005f68:	08005f83 	.word	0x08005f83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7fd fb12 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8005f70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f72:	e010      	b.n	8005f96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f74:	4b26      	ldr	r3, [pc, #152]	; (8006010 <UART_SetConfig+0x44c>)
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f78:	e00d      	b.n	8005f96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7a:	f7fd fa75 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8005f7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f80:	e009      	b.n	8005f96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f88:	e005      	b.n	8005f96 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f94:	bf00      	nop
    }

    if (pclk != 0U)
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d021      	beq.n	8005fe0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	4a1a      	ldr	r2, [pc, #104]	; (800600c <UART_SetConfig+0x448>)
 8005fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	441a      	add	r2, r3
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	2b0f      	cmp	r3, #15
 8005fc6:	d908      	bls.n	8005fda <UART_SetConfig+0x416>
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fce:	d204      	bcs.n	8005fda <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a3a      	ldr	r2, [r7, #32]
 8005fd6:	60da      	str	r2, [r3, #12]
 8005fd8:	e002      	b.n	8005fe0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ffc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006000:	4618      	mov	r0, r3
 8006002:	3730      	adds	r7, #48	; 0x30
 8006004:	46bd      	mov	sp, r7
 8006006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800600a:	bf00      	nop
 800600c:	08009494 	.word	0x08009494
 8006010:	00f42400 	.word	0x00f42400

08006014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01a      	beq.n	800612a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006112:	d10a      	bne.n	800612a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]
  }
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af02      	add	r7, sp, #8
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006168:	f7fb fd5c 	bl	8001c24 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b08      	cmp	r3, #8
 800617a:	d10e      	bne.n	800619a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800617c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f82f 	bl	80061ee <UART_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e025      	b.n	80061e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d10e      	bne.n	80061c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f819 	bl	80061ee <UART_WaitOnFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e00f      	b.n	80061e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	4613      	mov	r3, r2
 80061fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fe:	e062      	b.n	80062c6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006206:	d05e      	beq.n	80062c6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006208:	f7fb fd0c 	bl	8001c24 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	429a      	cmp	r2, r3
 8006216:	d302      	bcc.n	800621e <UART_WaitOnFlagUntilTimeout+0x30>
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d11d      	bne.n	800625a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800622c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e045      	b.n	80062e6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d02e      	beq.n	80062c6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006276:	d126      	bne.n	80062c6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006280:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006290:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e00f      	b.n	80062e6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4013      	ands	r3, r2
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	bf0c      	ite	eq
 80062d6:	2301      	moveq	r3, #1
 80062d8:	2300      	movne	r3, #0
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d08d      	beq.n	8006200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_UARTEx_DisableFifoMode+0x16>
 8006300:	2302      	movs	r3, #2
 8006302:	e027      	b.n	8006354 <HAL_UARTEx_DisableFifoMode+0x66>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2224      	movs	r2, #36	; 0x24
 8006310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006374:	2302      	movs	r3, #2
 8006376:	e02d      	b.n	80063d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	; 0x24
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f84f 	bl	8006458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e02d      	b.n	8006450 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2224      	movs	r2, #36	; 0x24
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0201 	bic.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f811 	bl	8006458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006464:	2b00      	cmp	r3, #0
 8006466:	d108      	bne.n	800647a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006478:	e031      	b.n	80064de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800647a:	2308      	movs	r3, #8
 800647c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800647e:	2308      	movs	r3, #8
 8006480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	0e5b      	lsrs	r3, r3, #25
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	0f5b      	lsrs	r3, r3, #29
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	7b3a      	ldrb	r2, [r7, #12]
 80064a6:	4911      	ldr	r1, [pc, #68]	; (80064ec <UARTEx_SetNbDataToProcess+0x94>)
 80064a8:	5c8a      	ldrb	r2, [r1, r2]
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064ae:	7b3a      	ldrb	r2, [r7, #12]
 80064b0:	490f      	ldr	r1, [pc, #60]	; (80064f0 <UARTEx_SetNbDataToProcess+0x98>)
 80064b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	7b7a      	ldrb	r2, [r7, #13]
 80064c4:	4909      	ldr	r1, [pc, #36]	; (80064ec <UARTEx_SetNbDataToProcess+0x94>)
 80064c6:	5c8a      	ldrb	r2, [r1, r2]
 80064c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064cc:	7b7a      	ldrb	r2, [r7, #13]
 80064ce:	4908      	ldr	r1, [pc, #32]	; (80064f0 <UARTEx_SetNbDataToProcess+0x98>)
 80064d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	080094ac 	.word	0x080094ac
 80064f0:	080094b4 	.word	0x080094b4

080064f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064fc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006500:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	b29b      	uxth	r3, r3
 800650e:	43db      	mvns	r3, r3
 8006510:	b29b      	uxth	r3, r3
 8006512:	4013      	ands	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800652a:	b084      	sub	sp, #16
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	f107 0014 	add.w	r0, r7, #20
 8006538:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	b004      	add	sp, #16
 800656a:	4770      	bx	lr

0800656c <__errno>:
 800656c:	4b01      	ldr	r3, [pc, #4]	; (8006574 <__errno+0x8>)
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000010 	.word	0x20000010

08006578 <__libc_init_array>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	4d0d      	ldr	r5, [pc, #52]	; (80065b0 <__libc_init_array+0x38>)
 800657c:	4c0d      	ldr	r4, [pc, #52]	; (80065b4 <__libc_init_array+0x3c>)
 800657e:	1b64      	subs	r4, r4, r5
 8006580:	10a4      	asrs	r4, r4, #2
 8006582:	2600      	movs	r6, #0
 8006584:	42a6      	cmp	r6, r4
 8006586:	d109      	bne.n	800659c <__libc_init_array+0x24>
 8006588:	4d0b      	ldr	r5, [pc, #44]	; (80065b8 <__libc_init_array+0x40>)
 800658a:	4c0c      	ldr	r4, [pc, #48]	; (80065bc <__libc_init_array+0x44>)
 800658c:	f002 ff04 	bl	8009398 <_init>
 8006590:	1b64      	subs	r4, r4, r5
 8006592:	10a4      	asrs	r4, r4, #2
 8006594:	2600      	movs	r6, #0
 8006596:	42a6      	cmp	r6, r4
 8006598:	d105      	bne.n	80065a6 <__libc_init_array+0x2e>
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a0:	4798      	blx	r3
 80065a2:	3601      	adds	r6, #1
 80065a4:	e7ee      	b.n	8006584 <__libc_init_array+0xc>
 80065a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065aa:	4798      	blx	r3
 80065ac:	3601      	adds	r6, #1
 80065ae:	e7f2      	b.n	8006596 <__libc_init_array+0x1e>
 80065b0:	0800989c 	.word	0x0800989c
 80065b4:	0800989c 	.word	0x0800989c
 80065b8:	0800989c 	.word	0x0800989c
 80065bc:	080098a0 	.word	0x080098a0

080065c0 <memset>:
 80065c0:	4402      	add	r2, r0
 80065c2:	4603      	mov	r3, r0
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d100      	bne.n	80065ca <memset+0xa>
 80065c8:	4770      	bx	lr
 80065ca:	f803 1b01 	strb.w	r1, [r3], #1
 80065ce:	e7f9      	b.n	80065c4 <memset+0x4>

080065d0 <__cvt>:
 80065d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	ec55 4b10 	vmov	r4, r5, d0
 80065d8:	2d00      	cmp	r5, #0
 80065da:	460e      	mov	r6, r1
 80065dc:	4619      	mov	r1, r3
 80065de:	462b      	mov	r3, r5
 80065e0:	bfbb      	ittet	lt
 80065e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065e6:	461d      	movlt	r5, r3
 80065e8:	2300      	movge	r3, #0
 80065ea:	232d      	movlt	r3, #45	; 0x2d
 80065ec:	700b      	strb	r3, [r1, #0]
 80065ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065f4:	4691      	mov	r9, r2
 80065f6:	f023 0820 	bic.w	r8, r3, #32
 80065fa:	bfbc      	itt	lt
 80065fc:	4622      	movlt	r2, r4
 80065fe:	4614      	movlt	r4, r2
 8006600:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006604:	d005      	beq.n	8006612 <__cvt+0x42>
 8006606:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800660a:	d100      	bne.n	800660e <__cvt+0x3e>
 800660c:	3601      	adds	r6, #1
 800660e:	2102      	movs	r1, #2
 8006610:	e000      	b.n	8006614 <__cvt+0x44>
 8006612:	2103      	movs	r1, #3
 8006614:	ab03      	add	r3, sp, #12
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	ab02      	add	r3, sp, #8
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	ec45 4b10 	vmov	d0, r4, r5
 8006620:	4653      	mov	r3, sl
 8006622:	4632      	mov	r2, r6
 8006624:	f000 fcec 	bl	8007000 <_dtoa_r>
 8006628:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800662c:	4607      	mov	r7, r0
 800662e:	d102      	bne.n	8006636 <__cvt+0x66>
 8006630:	f019 0f01 	tst.w	r9, #1
 8006634:	d022      	beq.n	800667c <__cvt+0xac>
 8006636:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800663a:	eb07 0906 	add.w	r9, r7, r6
 800663e:	d110      	bne.n	8006662 <__cvt+0x92>
 8006640:	783b      	ldrb	r3, [r7, #0]
 8006642:	2b30      	cmp	r3, #48	; 0x30
 8006644:	d10a      	bne.n	800665c <__cvt+0x8c>
 8006646:	2200      	movs	r2, #0
 8006648:	2300      	movs	r3, #0
 800664a:	4620      	mov	r0, r4
 800664c:	4629      	mov	r1, r5
 800664e:	f7fa fa13 	bl	8000a78 <__aeabi_dcmpeq>
 8006652:	b918      	cbnz	r0, 800665c <__cvt+0x8c>
 8006654:	f1c6 0601 	rsb	r6, r6, #1
 8006658:	f8ca 6000 	str.w	r6, [sl]
 800665c:	f8da 3000 	ldr.w	r3, [sl]
 8006660:	4499      	add	r9, r3
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7fa fa05 	bl	8000a78 <__aeabi_dcmpeq>
 800666e:	b108      	cbz	r0, 8006674 <__cvt+0xa4>
 8006670:	f8cd 900c 	str.w	r9, [sp, #12]
 8006674:	2230      	movs	r2, #48	; 0x30
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	454b      	cmp	r3, r9
 800667a:	d307      	bcc.n	800668c <__cvt+0xbc>
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006680:	1bdb      	subs	r3, r3, r7
 8006682:	4638      	mov	r0, r7
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	b004      	add	sp, #16
 8006688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668c:	1c59      	adds	r1, r3, #1
 800668e:	9103      	str	r1, [sp, #12]
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e7f0      	b.n	8006676 <__cvt+0xa6>

08006694 <__exponent>:
 8006694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006696:	4603      	mov	r3, r0
 8006698:	2900      	cmp	r1, #0
 800669a:	bfb8      	it	lt
 800669c:	4249      	neglt	r1, r1
 800669e:	f803 2b02 	strb.w	r2, [r3], #2
 80066a2:	bfb4      	ite	lt
 80066a4:	222d      	movlt	r2, #45	; 0x2d
 80066a6:	222b      	movge	r2, #43	; 0x2b
 80066a8:	2909      	cmp	r1, #9
 80066aa:	7042      	strb	r2, [r0, #1]
 80066ac:	dd2a      	ble.n	8006704 <__exponent+0x70>
 80066ae:	f10d 0407 	add.w	r4, sp, #7
 80066b2:	46a4      	mov	ip, r4
 80066b4:	270a      	movs	r7, #10
 80066b6:	46a6      	mov	lr, r4
 80066b8:	460a      	mov	r2, r1
 80066ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80066be:	fb07 1516 	mls	r5, r7, r6, r1
 80066c2:	3530      	adds	r5, #48	; 0x30
 80066c4:	2a63      	cmp	r2, #99	; 0x63
 80066c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80066ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066ce:	4631      	mov	r1, r6
 80066d0:	dcf1      	bgt.n	80066b6 <__exponent+0x22>
 80066d2:	3130      	adds	r1, #48	; 0x30
 80066d4:	f1ae 0502 	sub.w	r5, lr, #2
 80066d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066dc:	1c44      	adds	r4, r0, #1
 80066de:	4629      	mov	r1, r5
 80066e0:	4561      	cmp	r1, ip
 80066e2:	d30a      	bcc.n	80066fa <__exponent+0x66>
 80066e4:	f10d 0209 	add.w	r2, sp, #9
 80066e8:	eba2 020e 	sub.w	r2, r2, lr
 80066ec:	4565      	cmp	r5, ip
 80066ee:	bf88      	it	hi
 80066f0:	2200      	movhi	r2, #0
 80066f2:	4413      	add	r3, r2
 80066f4:	1a18      	subs	r0, r3, r0
 80066f6:	b003      	add	sp, #12
 80066f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006702:	e7ed      	b.n	80066e0 <__exponent+0x4c>
 8006704:	2330      	movs	r3, #48	; 0x30
 8006706:	3130      	adds	r1, #48	; 0x30
 8006708:	7083      	strb	r3, [r0, #2]
 800670a:	70c1      	strb	r1, [r0, #3]
 800670c:	1d03      	adds	r3, r0, #4
 800670e:	e7f1      	b.n	80066f4 <__exponent+0x60>

08006710 <_printf_float>:
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	ed2d 8b02 	vpush	{d8}
 8006718:	b08d      	sub	sp, #52	; 0x34
 800671a:	460c      	mov	r4, r1
 800671c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006720:	4616      	mov	r6, r2
 8006722:	461f      	mov	r7, r3
 8006724:	4605      	mov	r5, r0
 8006726:	f001 fa59 	bl	8007bdc <_localeconv_r>
 800672a:	f8d0 a000 	ldr.w	sl, [r0]
 800672e:	4650      	mov	r0, sl
 8006730:	f7f9 fd26 	bl	8000180 <strlen>
 8006734:	2300      	movs	r3, #0
 8006736:	930a      	str	r3, [sp, #40]	; 0x28
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	9305      	str	r3, [sp, #20]
 800673c:	f8d8 3000 	ldr.w	r3, [r8]
 8006740:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006744:	3307      	adds	r3, #7
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	f103 0208 	add.w	r2, r3, #8
 800674e:	f8c8 2000 	str.w	r2, [r8]
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800675a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800675e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006762:	9307      	str	r3, [sp, #28]
 8006764:	f8cd 8018 	str.w	r8, [sp, #24]
 8006768:	ee08 0a10 	vmov	s16, r0
 800676c:	4b9f      	ldr	r3, [pc, #636]	; (80069ec <_printf_float+0x2dc>)
 800676e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	f7fa f9b1 	bl	8000adc <__aeabi_dcmpun>
 800677a:	bb88      	cbnz	r0, 80067e0 <_printf_float+0xd0>
 800677c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006780:	4b9a      	ldr	r3, [pc, #616]	; (80069ec <_printf_float+0x2dc>)
 8006782:	f04f 32ff 	mov.w	r2, #4294967295
 8006786:	f7fa f98b 	bl	8000aa0 <__aeabi_dcmple>
 800678a:	bb48      	cbnz	r0, 80067e0 <_printf_float+0xd0>
 800678c:	2200      	movs	r2, #0
 800678e:	2300      	movs	r3, #0
 8006790:	4640      	mov	r0, r8
 8006792:	4649      	mov	r1, r9
 8006794:	f7fa f97a 	bl	8000a8c <__aeabi_dcmplt>
 8006798:	b110      	cbz	r0, 80067a0 <_printf_float+0x90>
 800679a:	232d      	movs	r3, #45	; 0x2d
 800679c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a0:	4b93      	ldr	r3, [pc, #588]	; (80069f0 <_printf_float+0x2e0>)
 80067a2:	4894      	ldr	r0, [pc, #592]	; (80069f4 <_printf_float+0x2e4>)
 80067a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067a8:	bf94      	ite	ls
 80067aa:	4698      	movls	r8, r3
 80067ac:	4680      	movhi	r8, r0
 80067ae:	2303      	movs	r3, #3
 80067b0:	6123      	str	r3, [r4, #16]
 80067b2:	9b05      	ldr	r3, [sp, #20]
 80067b4:	f023 0204 	bic.w	r2, r3, #4
 80067b8:	6022      	str	r2, [r4, #0]
 80067ba:	f04f 0900 	mov.w	r9, #0
 80067be:	9700      	str	r7, [sp, #0]
 80067c0:	4633      	mov	r3, r6
 80067c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 f9d8 	bl	8006b7c <_printf_common>
 80067cc:	3001      	adds	r0, #1
 80067ce:	f040 8090 	bne.w	80068f2 <_printf_float+0x1e2>
 80067d2:	f04f 30ff 	mov.w	r0, #4294967295
 80067d6:	b00d      	add	sp, #52	; 0x34
 80067d8:	ecbd 8b02 	vpop	{d8}
 80067dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e0:	4642      	mov	r2, r8
 80067e2:	464b      	mov	r3, r9
 80067e4:	4640      	mov	r0, r8
 80067e6:	4649      	mov	r1, r9
 80067e8:	f7fa f978 	bl	8000adc <__aeabi_dcmpun>
 80067ec:	b140      	cbz	r0, 8006800 <_printf_float+0xf0>
 80067ee:	464b      	mov	r3, r9
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bfbc      	itt	lt
 80067f4:	232d      	movlt	r3, #45	; 0x2d
 80067f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067fa:	487f      	ldr	r0, [pc, #508]	; (80069f8 <_printf_float+0x2e8>)
 80067fc:	4b7f      	ldr	r3, [pc, #508]	; (80069fc <_printf_float+0x2ec>)
 80067fe:	e7d1      	b.n	80067a4 <_printf_float+0x94>
 8006800:	6863      	ldr	r3, [r4, #4]
 8006802:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006806:	9206      	str	r2, [sp, #24]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	d13f      	bne.n	800688c <_printf_float+0x17c>
 800680c:	2306      	movs	r3, #6
 800680e:	6063      	str	r3, [r4, #4]
 8006810:	9b05      	ldr	r3, [sp, #20]
 8006812:	6861      	ldr	r1, [r4, #4]
 8006814:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006818:	2300      	movs	r3, #0
 800681a:	9303      	str	r3, [sp, #12]
 800681c:	ab0a      	add	r3, sp, #40	; 0x28
 800681e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006822:	ab09      	add	r3, sp, #36	; 0x24
 8006824:	ec49 8b10 	vmov	d0, r8, r9
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	6022      	str	r2, [r4, #0]
 800682c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006830:	4628      	mov	r0, r5
 8006832:	f7ff fecd 	bl	80065d0 <__cvt>
 8006836:	9b06      	ldr	r3, [sp, #24]
 8006838:	9909      	ldr	r1, [sp, #36]	; 0x24
 800683a:	2b47      	cmp	r3, #71	; 0x47
 800683c:	4680      	mov	r8, r0
 800683e:	d108      	bne.n	8006852 <_printf_float+0x142>
 8006840:	1cc8      	adds	r0, r1, #3
 8006842:	db02      	blt.n	800684a <_printf_float+0x13a>
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	4299      	cmp	r1, r3
 8006848:	dd41      	ble.n	80068ce <_printf_float+0x1be>
 800684a:	f1ab 0b02 	sub.w	fp, fp, #2
 800684e:	fa5f fb8b 	uxtb.w	fp, fp
 8006852:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006856:	d820      	bhi.n	800689a <_printf_float+0x18a>
 8006858:	3901      	subs	r1, #1
 800685a:	465a      	mov	r2, fp
 800685c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006860:	9109      	str	r1, [sp, #36]	; 0x24
 8006862:	f7ff ff17 	bl	8006694 <__exponent>
 8006866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006868:	1813      	adds	r3, r2, r0
 800686a:	2a01      	cmp	r2, #1
 800686c:	4681      	mov	r9, r0
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	dc02      	bgt.n	8006878 <_printf_float+0x168>
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	07d2      	lsls	r2, r2, #31
 8006876:	d501      	bpl.n	800687c <_printf_float+0x16c>
 8006878:	3301      	adds	r3, #1
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006880:	2b00      	cmp	r3, #0
 8006882:	d09c      	beq.n	80067be <_printf_float+0xae>
 8006884:	232d      	movs	r3, #45	; 0x2d
 8006886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800688a:	e798      	b.n	80067be <_printf_float+0xae>
 800688c:	9a06      	ldr	r2, [sp, #24]
 800688e:	2a47      	cmp	r2, #71	; 0x47
 8006890:	d1be      	bne.n	8006810 <_printf_float+0x100>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1bc      	bne.n	8006810 <_printf_float+0x100>
 8006896:	2301      	movs	r3, #1
 8006898:	e7b9      	b.n	800680e <_printf_float+0xfe>
 800689a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800689e:	d118      	bne.n	80068d2 <_printf_float+0x1c2>
 80068a0:	2900      	cmp	r1, #0
 80068a2:	6863      	ldr	r3, [r4, #4]
 80068a4:	dd0b      	ble.n	80068be <_printf_float+0x1ae>
 80068a6:	6121      	str	r1, [r4, #16]
 80068a8:	b913      	cbnz	r3, 80068b0 <_printf_float+0x1a0>
 80068aa:	6822      	ldr	r2, [r4, #0]
 80068ac:	07d0      	lsls	r0, r2, #31
 80068ae:	d502      	bpl.n	80068b6 <_printf_float+0x1a6>
 80068b0:	3301      	adds	r3, #1
 80068b2:	440b      	add	r3, r1
 80068b4:	6123      	str	r3, [r4, #16]
 80068b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80068b8:	f04f 0900 	mov.w	r9, #0
 80068bc:	e7de      	b.n	800687c <_printf_float+0x16c>
 80068be:	b913      	cbnz	r3, 80068c6 <_printf_float+0x1b6>
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	07d2      	lsls	r2, r2, #31
 80068c4:	d501      	bpl.n	80068ca <_printf_float+0x1ba>
 80068c6:	3302      	adds	r3, #2
 80068c8:	e7f4      	b.n	80068b4 <_printf_float+0x1a4>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e7f2      	b.n	80068b4 <_printf_float+0x1a4>
 80068ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d4:	4299      	cmp	r1, r3
 80068d6:	db05      	blt.n	80068e4 <_printf_float+0x1d4>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	6121      	str	r1, [r4, #16]
 80068dc:	07d8      	lsls	r0, r3, #31
 80068de:	d5ea      	bpl.n	80068b6 <_printf_float+0x1a6>
 80068e0:	1c4b      	adds	r3, r1, #1
 80068e2:	e7e7      	b.n	80068b4 <_printf_float+0x1a4>
 80068e4:	2900      	cmp	r1, #0
 80068e6:	bfd4      	ite	le
 80068e8:	f1c1 0202 	rsble	r2, r1, #2
 80068ec:	2201      	movgt	r2, #1
 80068ee:	4413      	add	r3, r2
 80068f0:	e7e0      	b.n	80068b4 <_printf_float+0x1a4>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	055a      	lsls	r2, r3, #21
 80068f6:	d407      	bmi.n	8006908 <_printf_float+0x1f8>
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	4642      	mov	r2, r8
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	d12c      	bne.n	8006960 <_printf_float+0x250>
 8006906:	e764      	b.n	80067d2 <_printf_float+0xc2>
 8006908:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800690c:	f240 80e0 	bls.w	8006ad0 <_printf_float+0x3c0>
 8006910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006914:	2200      	movs	r2, #0
 8006916:	2300      	movs	r3, #0
 8006918:	f7fa f8ae 	bl	8000a78 <__aeabi_dcmpeq>
 800691c:	2800      	cmp	r0, #0
 800691e:	d034      	beq.n	800698a <_printf_float+0x27a>
 8006920:	4a37      	ldr	r2, [pc, #220]	; (8006a00 <_printf_float+0x2f0>)
 8006922:	2301      	movs	r3, #1
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f af51 	beq.w	80067d2 <_printf_float+0xc2>
 8006930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006934:	429a      	cmp	r2, r3
 8006936:	db02      	blt.n	800693e <_printf_float+0x22e>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07d8      	lsls	r0, r3, #31
 800693c:	d510      	bpl.n	8006960 <_printf_float+0x250>
 800693e:	ee18 3a10 	vmov	r3, s16
 8006942:	4652      	mov	r2, sl
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f af41 	beq.w	80067d2 <_printf_float+0xc2>
 8006950:	f04f 0800 	mov.w	r8, #0
 8006954:	f104 091a 	add.w	r9, r4, #26
 8006958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695a:	3b01      	subs	r3, #1
 800695c:	4543      	cmp	r3, r8
 800695e:	dc09      	bgt.n	8006974 <_printf_float+0x264>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	079b      	lsls	r3, r3, #30
 8006964:	f100 8105 	bmi.w	8006b72 <_printf_float+0x462>
 8006968:	68e0      	ldr	r0, [r4, #12]
 800696a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696c:	4298      	cmp	r0, r3
 800696e:	bfb8      	it	lt
 8006970:	4618      	movlt	r0, r3
 8006972:	e730      	b.n	80067d6 <_printf_float+0xc6>
 8006974:	2301      	movs	r3, #1
 8006976:	464a      	mov	r2, r9
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f af27 	beq.w	80067d2 <_printf_float+0xc2>
 8006984:	f108 0801 	add.w	r8, r8, #1
 8006988:	e7e6      	b.n	8006958 <_printf_float+0x248>
 800698a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	dc39      	bgt.n	8006a04 <_printf_float+0x2f4>
 8006990:	4a1b      	ldr	r2, [pc, #108]	; (8006a00 <_printf_float+0x2f0>)
 8006992:	2301      	movs	r3, #1
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	f43f af19 	beq.w	80067d2 <_printf_float+0xc2>
 80069a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069a4:	4313      	orrs	r3, r2
 80069a6:	d102      	bne.n	80069ae <_printf_float+0x29e>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	07d9      	lsls	r1, r3, #31
 80069ac:	d5d8      	bpl.n	8006960 <_printf_float+0x250>
 80069ae:	ee18 3a10 	vmov	r3, s16
 80069b2:	4652      	mov	r2, sl
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	f43f af09 	beq.w	80067d2 <_printf_float+0xc2>
 80069c0:	f04f 0900 	mov.w	r9, #0
 80069c4:	f104 0a1a 	add.w	sl, r4, #26
 80069c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ca:	425b      	negs	r3, r3
 80069cc:	454b      	cmp	r3, r9
 80069ce:	dc01      	bgt.n	80069d4 <_printf_float+0x2c4>
 80069d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d2:	e792      	b.n	80068fa <_printf_float+0x1ea>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4652      	mov	r2, sl
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f aef7 	beq.w	80067d2 <_printf_float+0xc2>
 80069e4:	f109 0901 	add.w	r9, r9, #1
 80069e8:	e7ee      	b.n	80069c8 <_printf_float+0x2b8>
 80069ea:	bf00      	nop
 80069ec:	7fefffff 	.word	0x7fefffff
 80069f0:	080094c0 	.word	0x080094c0
 80069f4:	080094c4 	.word	0x080094c4
 80069f8:	080094cc 	.word	0x080094cc
 80069fc:	080094c8 	.word	0x080094c8
 8006a00:	080094d0 	.word	0x080094d0
 8006a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	bfa8      	it	ge
 8006a0c:	461a      	movge	r2, r3
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	4691      	mov	r9, r2
 8006a12:	dc37      	bgt.n	8006a84 <_printf_float+0x374>
 8006a14:	f04f 0b00 	mov.w	fp, #0
 8006a18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a1c:	f104 021a 	add.w	r2, r4, #26
 8006a20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a22:	9305      	str	r3, [sp, #20]
 8006a24:	eba3 0309 	sub.w	r3, r3, r9
 8006a28:	455b      	cmp	r3, fp
 8006a2a:	dc33      	bgt.n	8006a94 <_printf_float+0x384>
 8006a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a30:	429a      	cmp	r2, r3
 8006a32:	db3b      	blt.n	8006aac <_printf_float+0x39c>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	07da      	lsls	r2, r3, #31
 8006a38:	d438      	bmi.n	8006aac <_printf_float+0x39c>
 8006a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3c:	9a05      	ldr	r2, [sp, #20]
 8006a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a40:	1a9a      	subs	r2, r3, r2
 8006a42:	eba3 0901 	sub.w	r9, r3, r1
 8006a46:	4591      	cmp	r9, r2
 8006a48:	bfa8      	it	ge
 8006a4a:	4691      	movge	r9, r2
 8006a4c:	f1b9 0f00 	cmp.w	r9, #0
 8006a50:	dc35      	bgt.n	8006abe <_printf_float+0x3ae>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a5a:	f104 0a1a 	add.w	sl, r4, #26
 8006a5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	eba3 0309 	sub.w	r3, r3, r9
 8006a68:	4543      	cmp	r3, r8
 8006a6a:	f77f af79 	ble.w	8006960 <_printf_float+0x250>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4652      	mov	r2, sl
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f aeaa 	beq.w	80067d2 <_printf_float+0xc2>
 8006a7e:	f108 0801 	add.w	r8, r8, #1
 8006a82:	e7ec      	b.n	8006a5e <_printf_float+0x34e>
 8006a84:	4613      	mov	r3, r2
 8006a86:	4631      	mov	r1, r6
 8006a88:	4642      	mov	r2, r8
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d1c0      	bne.n	8006a14 <_printf_float+0x304>
 8006a92:	e69e      	b.n	80067d2 <_printf_float+0xc2>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	9205      	str	r2, [sp, #20]
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f43f ae97 	beq.w	80067d2 <_printf_float+0xc2>
 8006aa4:	9a05      	ldr	r2, [sp, #20]
 8006aa6:	f10b 0b01 	add.w	fp, fp, #1
 8006aaa:	e7b9      	b.n	8006a20 <_printf_float+0x310>
 8006aac:	ee18 3a10 	vmov	r3, s16
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d1be      	bne.n	8006a3a <_printf_float+0x32a>
 8006abc:	e689      	b.n	80067d2 <_printf_float+0xc2>
 8006abe:	9a05      	ldr	r2, [sp, #20]
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	4442      	add	r2, r8
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	d1c1      	bne.n	8006a52 <_printf_float+0x342>
 8006ace:	e680      	b.n	80067d2 <_printf_float+0xc2>
 8006ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ad2:	2a01      	cmp	r2, #1
 8006ad4:	dc01      	bgt.n	8006ada <_printf_float+0x3ca>
 8006ad6:	07db      	lsls	r3, r3, #31
 8006ad8:	d538      	bpl.n	8006b4c <_printf_float+0x43c>
 8006ada:	2301      	movs	r3, #1
 8006adc:	4642      	mov	r2, r8
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f43f ae74 	beq.w	80067d2 <_printf_float+0xc2>
 8006aea:	ee18 3a10 	vmov	r3, s16
 8006aee:	4652      	mov	r2, sl
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f ae6b 	beq.w	80067d2 <_printf_float+0xc2>
 8006afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b00:	2200      	movs	r2, #0
 8006b02:	2300      	movs	r3, #0
 8006b04:	f7f9 ffb8 	bl	8000a78 <__aeabi_dcmpeq>
 8006b08:	b9d8      	cbnz	r0, 8006b42 <_printf_float+0x432>
 8006b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0c:	f108 0201 	add.w	r2, r8, #1
 8006b10:	3b01      	subs	r3, #1
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d10e      	bne.n	8006b3a <_printf_float+0x42a>
 8006b1c:	e659      	b.n	80067d2 <_printf_float+0xc2>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4652      	mov	r2, sl
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b8      	blx	r7
 8006b28:	3001      	adds	r0, #1
 8006b2a:	f43f ae52 	beq.w	80067d2 <_printf_float+0xc2>
 8006b2e:	f108 0801 	add.w	r8, r8, #1
 8006b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b34:	3b01      	subs	r3, #1
 8006b36:	4543      	cmp	r3, r8
 8006b38:	dcf1      	bgt.n	8006b1e <_printf_float+0x40e>
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b40:	e6dc      	b.n	80068fc <_printf_float+0x1ec>
 8006b42:	f04f 0800 	mov.w	r8, #0
 8006b46:	f104 0a1a 	add.w	sl, r4, #26
 8006b4a:	e7f2      	b.n	8006b32 <_printf_float+0x422>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	4642      	mov	r2, r8
 8006b50:	e7df      	b.n	8006b12 <_printf_float+0x402>
 8006b52:	2301      	movs	r3, #1
 8006b54:	464a      	mov	r2, r9
 8006b56:	4631      	mov	r1, r6
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	f43f ae38 	beq.w	80067d2 <_printf_float+0xc2>
 8006b62:	f108 0801 	add.w	r8, r8, #1
 8006b66:	68e3      	ldr	r3, [r4, #12]
 8006b68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b6a:	1a5b      	subs	r3, r3, r1
 8006b6c:	4543      	cmp	r3, r8
 8006b6e:	dcf0      	bgt.n	8006b52 <_printf_float+0x442>
 8006b70:	e6fa      	b.n	8006968 <_printf_float+0x258>
 8006b72:	f04f 0800 	mov.w	r8, #0
 8006b76:	f104 0919 	add.w	r9, r4, #25
 8006b7a:	e7f4      	b.n	8006b66 <_printf_float+0x456>

08006b7c <_printf_common>:
 8006b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b80:	4616      	mov	r6, r2
 8006b82:	4699      	mov	r9, r3
 8006b84:	688a      	ldr	r2, [r1, #8]
 8006b86:	690b      	ldr	r3, [r1, #16]
 8006b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	bfb8      	it	lt
 8006b90:	4613      	movlt	r3, r2
 8006b92:	6033      	str	r3, [r6, #0]
 8006b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b98:	4607      	mov	r7, r0
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	b10a      	cbz	r2, 8006ba2 <_printf_common+0x26>
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	6033      	str	r3, [r6, #0]
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	0699      	lsls	r1, r3, #26
 8006ba6:	bf42      	ittt	mi
 8006ba8:	6833      	ldrmi	r3, [r6, #0]
 8006baa:	3302      	addmi	r3, #2
 8006bac:	6033      	strmi	r3, [r6, #0]
 8006bae:	6825      	ldr	r5, [r4, #0]
 8006bb0:	f015 0506 	ands.w	r5, r5, #6
 8006bb4:	d106      	bne.n	8006bc4 <_printf_common+0x48>
 8006bb6:	f104 0a19 	add.w	sl, r4, #25
 8006bba:	68e3      	ldr	r3, [r4, #12]
 8006bbc:	6832      	ldr	r2, [r6, #0]
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	42ab      	cmp	r3, r5
 8006bc2:	dc26      	bgt.n	8006c12 <_printf_common+0x96>
 8006bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bc8:	1e13      	subs	r3, r2, #0
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	bf18      	it	ne
 8006bce:	2301      	movne	r3, #1
 8006bd0:	0692      	lsls	r2, r2, #26
 8006bd2:	d42b      	bmi.n	8006c2c <_printf_common+0xb0>
 8006bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bd8:	4649      	mov	r1, r9
 8006bda:	4638      	mov	r0, r7
 8006bdc:	47c0      	blx	r8
 8006bde:	3001      	adds	r0, #1
 8006be0:	d01e      	beq.n	8006c20 <_printf_common+0xa4>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	68e5      	ldr	r5, [r4, #12]
 8006be6:	6832      	ldr	r2, [r6, #0]
 8006be8:	f003 0306 	and.w	r3, r3, #6
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	bf08      	it	eq
 8006bf0:	1aad      	subeq	r5, r5, r2
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	6922      	ldr	r2, [r4, #16]
 8006bf6:	bf0c      	ite	eq
 8006bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bfc:	2500      	movne	r5, #0
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	bfc4      	itt	gt
 8006c02:	1a9b      	subgt	r3, r3, r2
 8006c04:	18ed      	addgt	r5, r5, r3
 8006c06:	2600      	movs	r6, #0
 8006c08:	341a      	adds	r4, #26
 8006c0a:	42b5      	cmp	r5, r6
 8006c0c:	d11a      	bne.n	8006c44 <_printf_common+0xc8>
 8006c0e:	2000      	movs	r0, #0
 8006c10:	e008      	b.n	8006c24 <_printf_common+0xa8>
 8006c12:	2301      	movs	r3, #1
 8006c14:	4652      	mov	r2, sl
 8006c16:	4649      	mov	r1, r9
 8006c18:	4638      	mov	r0, r7
 8006c1a:	47c0      	blx	r8
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d103      	bne.n	8006c28 <_printf_common+0xac>
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c28:	3501      	adds	r5, #1
 8006c2a:	e7c6      	b.n	8006bba <_printf_common+0x3e>
 8006c2c:	18e1      	adds	r1, r4, r3
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	2030      	movs	r0, #48	; 0x30
 8006c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c36:	4422      	add	r2, r4
 8006c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c40:	3302      	adds	r3, #2
 8006c42:	e7c7      	b.n	8006bd4 <_printf_common+0x58>
 8006c44:	2301      	movs	r3, #1
 8006c46:	4622      	mov	r2, r4
 8006c48:	4649      	mov	r1, r9
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	47c0      	blx	r8
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d0e6      	beq.n	8006c20 <_printf_common+0xa4>
 8006c52:	3601      	adds	r6, #1
 8006c54:	e7d9      	b.n	8006c0a <_printf_common+0x8e>
	...

08006c58 <_printf_i>:
 8006c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c5c:	7e0f      	ldrb	r7, [r1, #24]
 8006c5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c60:	2f78      	cmp	r7, #120	; 0x78
 8006c62:	4691      	mov	r9, r2
 8006c64:	4680      	mov	r8, r0
 8006c66:	460c      	mov	r4, r1
 8006c68:	469a      	mov	sl, r3
 8006c6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c6e:	d807      	bhi.n	8006c80 <_printf_i+0x28>
 8006c70:	2f62      	cmp	r7, #98	; 0x62
 8006c72:	d80a      	bhi.n	8006c8a <_printf_i+0x32>
 8006c74:	2f00      	cmp	r7, #0
 8006c76:	f000 80d8 	beq.w	8006e2a <_printf_i+0x1d2>
 8006c7a:	2f58      	cmp	r7, #88	; 0x58
 8006c7c:	f000 80a3 	beq.w	8006dc6 <_printf_i+0x16e>
 8006c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c88:	e03a      	b.n	8006d00 <_printf_i+0xa8>
 8006c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c8e:	2b15      	cmp	r3, #21
 8006c90:	d8f6      	bhi.n	8006c80 <_printf_i+0x28>
 8006c92:	a101      	add	r1, pc, #4	; (adr r1, 8006c98 <_printf_i+0x40>)
 8006c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c98:	08006cf1 	.word	0x08006cf1
 8006c9c:	08006d05 	.word	0x08006d05
 8006ca0:	08006c81 	.word	0x08006c81
 8006ca4:	08006c81 	.word	0x08006c81
 8006ca8:	08006c81 	.word	0x08006c81
 8006cac:	08006c81 	.word	0x08006c81
 8006cb0:	08006d05 	.word	0x08006d05
 8006cb4:	08006c81 	.word	0x08006c81
 8006cb8:	08006c81 	.word	0x08006c81
 8006cbc:	08006c81 	.word	0x08006c81
 8006cc0:	08006c81 	.word	0x08006c81
 8006cc4:	08006e11 	.word	0x08006e11
 8006cc8:	08006d35 	.word	0x08006d35
 8006ccc:	08006df3 	.word	0x08006df3
 8006cd0:	08006c81 	.word	0x08006c81
 8006cd4:	08006c81 	.word	0x08006c81
 8006cd8:	08006e33 	.word	0x08006e33
 8006cdc:	08006c81 	.word	0x08006c81
 8006ce0:	08006d35 	.word	0x08006d35
 8006ce4:	08006c81 	.word	0x08006c81
 8006ce8:	08006c81 	.word	0x08006c81
 8006cec:	08006dfb 	.word	0x08006dfb
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	1d1a      	adds	r2, r3, #4
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	602a      	str	r2, [r5, #0]
 8006cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0a3      	b.n	8006e4c <_printf_i+0x1f4>
 8006d04:	6820      	ldr	r0, [r4, #0]
 8006d06:	6829      	ldr	r1, [r5, #0]
 8006d08:	0606      	lsls	r6, r0, #24
 8006d0a:	f101 0304 	add.w	r3, r1, #4
 8006d0e:	d50a      	bpl.n	8006d26 <_printf_i+0xce>
 8006d10:	680e      	ldr	r6, [r1, #0]
 8006d12:	602b      	str	r3, [r5, #0]
 8006d14:	2e00      	cmp	r6, #0
 8006d16:	da03      	bge.n	8006d20 <_printf_i+0xc8>
 8006d18:	232d      	movs	r3, #45	; 0x2d
 8006d1a:	4276      	negs	r6, r6
 8006d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d20:	485e      	ldr	r0, [pc, #376]	; (8006e9c <_printf_i+0x244>)
 8006d22:	230a      	movs	r3, #10
 8006d24:	e019      	b.n	8006d5a <_printf_i+0x102>
 8006d26:	680e      	ldr	r6, [r1, #0]
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d2e:	bf18      	it	ne
 8006d30:	b236      	sxthne	r6, r6
 8006d32:	e7ef      	b.n	8006d14 <_printf_i+0xbc>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	6820      	ldr	r0, [r4, #0]
 8006d38:	1d19      	adds	r1, r3, #4
 8006d3a:	6029      	str	r1, [r5, #0]
 8006d3c:	0601      	lsls	r1, r0, #24
 8006d3e:	d501      	bpl.n	8006d44 <_printf_i+0xec>
 8006d40:	681e      	ldr	r6, [r3, #0]
 8006d42:	e002      	b.n	8006d4a <_printf_i+0xf2>
 8006d44:	0646      	lsls	r6, r0, #25
 8006d46:	d5fb      	bpl.n	8006d40 <_printf_i+0xe8>
 8006d48:	881e      	ldrh	r6, [r3, #0]
 8006d4a:	4854      	ldr	r0, [pc, #336]	; (8006e9c <_printf_i+0x244>)
 8006d4c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d4e:	bf0c      	ite	eq
 8006d50:	2308      	moveq	r3, #8
 8006d52:	230a      	movne	r3, #10
 8006d54:	2100      	movs	r1, #0
 8006d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d5a:	6865      	ldr	r5, [r4, #4]
 8006d5c:	60a5      	str	r5, [r4, #8]
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	bfa2      	ittt	ge
 8006d62:	6821      	ldrge	r1, [r4, #0]
 8006d64:	f021 0104 	bicge.w	r1, r1, #4
 8006d68:	6021      	strge	r1, [r4, #0]
 8006d6a:	b90e      	cbnz	r6, 8006d70 <_printf_i+0x118>
 8006d6c:	2d00      	cmp	r5, #0
 8006d6e:	d04d      	beq.n	8006e0c <_printf_i+0x1b4>
 8006d70:	4615      	mov	r5, r2
 8006d72:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d76:	fb03 6711 	mls	r7, r3, r1, r6
 8006d7a:	5dc7      	ldrb	r7, [r0, r7]
 8006d7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d80:	4637      	mov	r7, r6
 8006d82:	42bb      	cmp	r3, r7
 8006d84:	460e      	mov	r6, r1
 8006d86:	d9f4      	bls.n	8006d72 <_printf_i+0x11a>
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d10b      	bne.n	8006da4 <_printf_i+0x14c>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	07de      	lsls	r6, r3, #31
 8006d90:	d508      	bpl.n	8006da4 <_printf_i+0x14c>
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	6861      	ldr	r1, [r4, #4]
 8006d96:	4299      	cmp	r1, r3
 8006d98:	bfde      	ittt	le
 8006d9a:	2330      	movle	r3, #48	; 0x30
 8006d9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006da0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006da4:	1b52      	subs	r2, r2, r5
 8006da6:	6122      	str	r2, [r4, #16]
 8006da8:	f8cd a000 	str.w	sl, [sp]
 8006dac:	464b      	mov	r3, r9
 8006dae:	aa03      	add	r2, sp, #12
 8006db0:	4621      	mov	r1, r4
 8006db2:	4640      	mov	r0, r8
 8006db4:	f7ff fee2 	bl	8006b7c <_printf_common>
 8006db8:	3001      	adds	r0, #1
 8006dba:	d14c      	bne.n	8006e56 <_printf_i+0x1fe>
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	b004      	add	sp, #16
 8006dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc6:	4835      	ldr	r0, [pc, #212]	; (8006e9c <_printf_i+0x244>)
 8006dc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dcc:	6829      	ldr	r1, [r5, #0]
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dd4:	6029      	str	r1, [r5, #0]
 8006dd6:	061d      	lsls	r5, r3, #24
 8006dd8:	d514      	bpl.n	8006e04 <_printf_i+0x1ac>
 8006dda:	07df      	lsls	r7, r3, #31
 8006ddc:	bf44      	itt	mi
 8006dde:	f043 0320 	orrmi.w	r3, r3, #32
 8006de2:	6023      	strmi	r3, [r4, #0]
 8006de4:	b91e      	cbnz	r6, 8006dee <_printf_i+0x196>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	f023 0320 	bic.w	r3, r3, #32
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	2310      	movs	r3, #16
 8006df0:	e7b0      	b.n	8006d54 <_printf_i+0xfc>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	f043 0320 	orr.w	r3, r3, #32
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	2378      	movs	r3, #120	; 0x78
 8006dfc:	4828      	ldr	r0, [pc, #160]	; (8006ea0 <_printf_i+0x248>)
 8006dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e02:	e7e3      	b.n	8006dcc <_printf_i+0x174>
 8006e04:	0659      	lsls	r1, r3, #25
 8006e06:	bf48      	it	mi
 8006e08:	b2b6      	uxthmi	r6, r6
 8006e0a:	e7e6      	b.n	8006dda <_printf_i+0x182>
 8006e0c:	4615      	mov	r5, r2
 8006e0e:	e7bb      	b.n	8006d88 <_printf_i+0x130>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	6826      	ldr	r6, [r4, #0]
 8006e14:	6961      	ldr	r1, [r4, #20]
 8006e16:	1d18      	adds	r0, r3, #4
 8006e18:	6028      	str	r0, [r5, #0]
 8006e1a:	0635      	lsls	r5, r6, #24
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	d501      	bpl.n	8006e24 <_printf_i+0x1cc>
 8006e20:	6019      	str	r1, [r3, #0]
 8006e22:	e002      	b.n	8006e2a <_printf_i+0x1d2>
 8006e24:	0670      	lsls	r0, r6, #25
 8006e26:	d5fb      	bpl.n	8006e20 <_printf_i+0x1c8>
 8006e28:	8019      	strh	r1, [r3, #0]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	6123      	str	r3, [r4, #16]
 8006e2e:	4615      	mov	r5, r2
 8006e30:	e7ba      	b.n	8006da8 <_printf_i+0x150>
 8006e32:	682b      	ldr	r3, [r5, #0]
 8006e34:	1d1a      	adds	r2, r3, #4
 8006e36:	602a      	str	r2, [r5, #0]
 8006e38:	681d      	ldr	r5, [r3, #0]
 8006e3a:	6862      	ldr	r2, [r4, #4]
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f7f9 f9a6 	bl	8000190 <memchr>
 8006e44:	b108      	cbz	r0, 8006e4a <_printf_i+0x1f2>
 8006e46:	1b40      	subs	r0, r0, r5
 8006e48:	6060      	str	r0, [r4, #4]
 8006e4a:	6863      	ldr	r3, [r4, #4]
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e54:	e7a8      	b.n	8006da8 <_printf_i+0x150>
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	462a      	mov	r2, r5
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	47d0      	blx	sl
 8006e60:	3001      	adds	r0, #1
 8006e62:	d0ab      	beq.n	8006dbc <_printf_i+0x164>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	079b      	lsls	r3, r3, #30
 8006e68:	d413      	bmi.n	8006e92 <_printf_i+0x23a>
 8006e6a:	68e0      	ldr	r0, [r4, #12]
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	4298      	cmp	r0, r3
 8006e70:	bfb8      	it	lt
 8006e72:	4618      	movlt	r0, r3
 8006e74:	e7a4      	b.n	8006dc0 <_printf_i+0x168>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4632      	mov	r2, r6
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	47d0      	blx	sl
 8006e80:	3001      	adds	r0, #1
 8006e82:	d09b      	beq.n	8006dbc <_printf_i+0x164>
 8006e84:	3501      	adds	r5, #1
 8006e86:	68e3      	ldr	r3, [r4, #12]
 8006e88:	9903      	ldr	r1, [sp, #12]
 8006e8a:	1a5b      	subs	r3, r3, r1
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	dcf2      	bgt.n	8006e76 <_printf_i+0x21e>
 8006e90:	e7eb      	b.n	8006e6a <_printf_i+0x212>
 8006e92:	2500      	movs	r5, #0
 8006e94:	f104 0619 	add.w	r6, r4, #25
 8006e98:	e7f5      	b.n	8006e86 <_printf_i+0x22e>
 8006e9a:	bf00      	nop
 8006e9c:	080094d2 	.word	0x080094d2
 8006ea0:	080094e3 	.word	0x080094e3

08006ea4 <siprintf>:
 8006ea4:	b40e      	push	{r1, r2, r3}
 8006ea6:	b500      	push	{lr}
 8006ea8:	b09c      	sub	sp, #112	; 0x70
 8006eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8006eac:	9002      	str	r0, [sp, #8]
 8006eae:	9006      	str	r0, [sp, #24]
 8006eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eb4:	4809      	ldr	r0, [pc, #36]	; (8006edc <siprintf+0x38>)
 8006eb6:	9107      	str	r1, [sp, #28]
 8006eb8:	9104      	str	r1, [sp, #16]
 8006eba:	4909      	ldr	r1, [pc, #36]	; (8006ee0 <siprintf+0x3c>)
 8006ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec0:	9105      	str	r1, [sp, #20]
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	a902      	add	r1, sp, #8
 8006ec8:	f001 fb78 	bl	80085bc <_svfiprintf_r>
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	b01c      	add	sp, #112	; 0x70
 8006ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed8:	b003      	add	sp, #12
 8006eda:	4770      	bx	lr
 8006edc:	20000010 	.word	0x20000010
 8006ee0:	ffff0208 	.word	0xffff0208

08006ee4 <quorem>:
 8006ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	6903      	ldr	r3, [r0, #16]
 8006eea:	690c      	ldr	r4, [r1, #16]
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	4607      	mov	r7, r0
 8006ef0:	f2c0 8081 	blt.w	8006ff6 <quorem+0x112>
 8006ef4:	3c01      	subs	r4, #1
 8006ef6:	f101 0814 	add.w	r8, r1, #20
 8006efa:	f100 0514 	add.w	r5, r0, #20
 8006efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f1c:	d331      	bcc.n	8006f82 <quorem+0x9e>
 8006f1e:	f04f 0e00 	mov.w	lr, #0
 8006f22:	4640      	mov	r0, r8
 8006f24:	46ac      	mov	ip, r5
 8006f26:	46f2      	mov	sl, lr
 8006f28:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f2c:	b293      	uxth	r3, r2
 8006f2e:	fb06 e303 	mla	r3, r6, r3, lr
 8006f32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	ebaa 0303 	sub.w	r3, sl, r3
 8006f3c:	f8dc a000 	ldr.w	sl, [ip]
 8006f40:	0c12      	lsrs	r2, r2, #16
 8006f42:	fa13 f38a 	uxtah	r3, r3, sl
 8006f46:	fb06 e202 	mla	r2, r6, r2, lr
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	9b00      	ldr	r3, [sp, #0]
 8006f4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f52:	b292      	uxth	r2, r2
 8006f54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f60:	4581      	cmp	r9, r0
 8006f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f66:	f84c 3b04 	str.w	r3, [ip], #4
 8006f6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f6e:	d2db      	bcs.n	8006f28 <quorem+0x44>
 8006f70:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f74:	b92b      	cbnz	r3, 8006f82 <quorem+0x9e>
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	3b04      	subs	r3, #4
 8006f7a:	429d      	cmp	r5, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	d32e      	bcc.n	8006fde <quorem+0xfa>
 8006f80:	613c      	str	r4, [r7, #16]
 8006f82:	4638      	mov	r0, r7
 8006f84:	f001 f8c6 	bl	8008114 <__mcmp>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	db24      	blt.n	8006fd6 <quorem+0xf2>
 8006f8c:	3601      	adds	r6, #1
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f04f 0c00 	mov.w	ip, #0
 8006f94:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f98:	f8d0 e000 	ldr.w	lr, [r0]
 8006f9c:	b293      	uxth	r3, r2
 8006f9e:	ebac 0303 	sub.w	r3, ip, r3
 8006fa2:	0c12      	lsrs	r2, r2, #16
 8006fa4:	fa13 f38e 	uxtah	r3, r3, lr
 8006fa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb6:	45c1      	cmp	r9, r8
 8006fb8:	f840 3b04 	str.w	r3, [r0], #4
 8006fbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fc0:	d2e8      	bcs.n	8006f94 <quorem+0xb0>
 8006fc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fca:	b922      	cbnz	r2, 8006fd6 <quorem+0xf2>
 8006fcc:	3b04      	subs	r3, #4
 8006fce:	429d      	cmp	r5, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	d30a      	bcc.n	8006fea <quorem+0x106>
 8006fd4:	613c      	str	r4, [r7, #16]
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	b003      	add	sp, #12
 8006fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	d1cc      	bne.n	8006f80 <quorem+0x9c>
 8006fe6:	3c01      	subs	r4, #1
 8006fe8:	e7c7      	b.n	8006f7a <quorem+0x96>
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	3b04      	subs	r3, #4
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	d1f0      	bne.n	8006fd4 <quorem+0xf0>
 8006ff2:	3c01      	subs	r4, #1
 8006ff4:	e7eb      	b.n	8006fce <quorem+0xea>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e7ee      	b.n	8006fd8 <quorem+0xf4>
 8006ffa:	0000      	movs	r0, r0
 8006ffc:	0000      	movs	r0, r0
	...

08007000 <_dtoa_r>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	ed2d 8b04 	vpush	{d8-d9}
 8007008:	ec57 6b10 	vmov	r6, r7, d0
 800700c:	b093      	sub	sp, #76	; 0x4c
 800700e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007010:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007014:	9106      	str	r1, [sp, #24]
 8007016:	ee10 aa10 	vmov	sl, s0
 800701a:	4604      	mov	r4, r0
 800701c:	9209      	str	r2, [sp, #36]	; 0x24
 800701e:	930c      	str	r3, [sp, #48]	; 0x30
 8007020:	46bb      	mov	fp, r7
 8007022:	b975      	cbnz	r5, 8007042 <_dtoa_r+0x42>
 8007024:	2010      	movs	r0, #16
 8007026:	f000 fddd 	bl	8007be4 <malloc>
 800702a:	4602      	mov	r2, r0
 800702c:	6260      	str	r0, [r4, #36]	; 0x24
 800702e:	b920      	cbnz	r0, 800703a <_dtoa_r+0x3a>
 8007030:	4ba7      	ldr	r3, [pc, #668]	; (80072d0 <_dtoa_r+0x2d0>)
 8007032:	21ea      	movs	r1, #234	; 0xea
 8007034:	48a7      	ldr	r0, [pc, #668]	; (80072d4 <_dtoa_r+0x2d4>)
 8007036:	f001 fbd1 	bl	80087dc <__assert_func>
 800703a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800703e:	6005      	str	r5, [r0, #0]
 8007040:	60c5      	str	r5, [r0, #12]
 8007042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007044:	6819      	ldr	r1, [r3, #0]
 8007046:	b151      	cbz	r1, 800705e <_dtoa_r+0x5e>
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	604a      	str	r2, [r1, #4]
 800704c:	2301      	movs	r3, #1
 800704e:	4093      	lsls	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fe1c 	bl	8007c90 <_Bfree>
 8007058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	1e3b      	subs	r3, r7, #0
 8007060:	bfaa      	itet	ge
 8007062:	2300      	movge	r3, #0
 8007064:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007068:	f8c8 3000 	strge.w	r3, [r8]
 800706c:	4b9a      	ldr	r3, [pc, #616]	; (80072d8 <_dtoa_r+0x2d8>)
 800706e:	bfbc      	itt	lt
 8007070:	2201      	movlt	r2, #1
 8007072:	f8c8 2000 	strlt.w	r2, [r8]
 8007076:	ea33 030b 	bics.w	r3, r3, fp
 800707a:	d11b      	bne.n	80070b4 <_dtoa_r+0xb4>
 800707c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800707e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007088:	4333      	orrs	r3, r6
 800708a:	f000 8592 	beq.w	8007bb2 <_dtoa_r+0xbb2>
 800708e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007090:	b963      	cbnz	r3, 80070ac <_dtoa_r+0xac>
 8007092:	4b92      	ldr	r3, [pc, #584]	; (80072dc <_dtoa_r+0x2dc>)
 8007094:	e022      	b.n	80070dc <_dtoa_r+0xdc>
 8007096:	4b92      	ldr	r3, [pc, #584]	; (80072e0 <_dtoa_r+0x2e0>)
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	3308      	adds	r3, #8
 800709c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	9801      	ldr	r0, [sp, #4]
 80070a2:	b013      	add	sp, #76	; 0x4c
 80070a4:	ecbd 8b04 	vpop	{d8-d9}
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	4b8b      	ldr	r3, [pc, #556]	; (80072dc <_dtoa_r+0x2dc>)
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	3303      	adds	r3, #3
 80070b2:	e7f3      	b.n	800709c <_dtoa_r+0x9c>
 80070b4:	2200      	movs	r2, #0
 80070b6:	2300      	movs	r3, #0
 80070b8:	4650      	mov	r0, sl
 80070ba:	4659      	mov	r1, fp
 80070bc:	f7f9 fcdc 	bl	8000a78 <__aeabi_dcmpeq>
 80070c0:	ec4b ab19 	vmov	d9, sl, fp
 80070c4:	4680      	mov	r8, r0
 80070c6:	b158      	cbz	r0, 80070e0 <_dtoa_r+0xe0>
 80070c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070ca:	2301      	movs	r3, #1
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 856b 	beq.w	8007bac <_dtoa_r+0xbac>
 80070d6:	4883      	ldr	r0, [pc, #524]	; (80072e4 <_dtoa_r+0x2e4>)
 80070d8:	6018      	str	r0, [r3, #0]
 80070da:	1e43      	subs	r3, r0, #1
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	e7df      	b.n	80070a0 <_dtoa_r+0xa0>
 80070e0:	ec4b ab10 	vmov	d0, sl, fp
 80070e4:	aa10      	add	r2, sp, #64	; 0x40
 80070e6:	a911      	add	r1, sp, #68	; 0x44
 80070e8:	4620      	mov	r0, r4
 80070ea:	f001 f8b9 	bl	8008260 <__d2b>
 80070ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80070f2:	ee08 0a10 	vmov	s16, r0
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	f000 8084 	beq.w	8007204 <_dtoa_r+0x204>
 80070fc:	ee19 3a90 	vmov	r3, s19
 8007100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007104:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007108:	4656      	mov	r6, sl
 800710a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800710e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007112:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007116:	4b74      	ldr	r3, [pc, #464]	; (80072e8 <_dtoa_r+0x2e8>)
 8007118:	2200      	movs	r2, #0
 800711a:	4630      	mov	r0, r6
 800711c:	4639      	mov	r1, r7
 800711e:	f7f9 f88b 	bl	8000238 <__aeabi_dsub>
 8007122:	a365      	add	r3, pc, #404	; (adr r3, 80072b8 <_dtoa_r+0x2b8>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f7f9 fa3e 	bl	80005a8 <__aeabi_dmul>
 800712c:	a364      	add	r3, pc, #400	; (adr r3, 80072c0 <_dtoa_r+0x2c0>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f883 	bl	800023c <__adddf3>
 8007136:	4606      	mov	r6, r0
 8007138:	4628      	mov	r0, r5
 800713a:	460f      	mov	r7, r1
 800713c:	f7f9 f9ca 	bl	80004d4 <__aeabi_i2d>
 8007140:	a361      	add	r3, pc, #388	; (adr r3, 80072c8 <_dtoa_r+0x2c8>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 fa2f 	bl	80005a8 <__aeabi_dmul>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4630      	mov	r0, r6
 8007150:	4639      	mov	r1, r7
 8007152:	f7f9 f873 	bl	800023c <__adddf3>
 8007156:	4606      	mov	r6, r0
 8007158:	460f      	mov	r7, r1
 800715a:	f7f9 fcd5 	bl	8000b08 <__aeabi_d2iz>
 800715e:	2200      	movs	r2, #0
 8007160:	9000      	str	r0, [sp, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fc90 	bl	8000a8c <__aeabi_dcmplt>
 800716c:	b150      	cbz	r0, 8007184 <_dtoa_r+0x184>
 800716e:	9800      	ldr	r0, [sp, #0]
 8007170:	f7f9 f9b0 	bl	80004d4 <__aeabi_i2d>
 8007174:	4632      	mov	r2, r6
 8007176:	463b      	mov	r3, r7
 8007178:	f7f9 fc7e 	bl	8000a78 <__aeabi_dcmpeq>
 800717c:	b910      	cbnz	r0, 8007184 <_dtoa_r+0x184>
 800717e:	9b00      	ldr	r3, [sp, #0]
 8007180:	3b01      	subs	r3, #1
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	2b16      	cmp	r3, #22
 8007188:	d85a      	bhi.n	8007240 <_dtoa_r+0x240>
 800718a:	9a00      	ldr	r2, [sp, #0]
 800718c:	4b57      	ldr	r3, [pc, #348]	; (80072ec <_dtoa_r+0x2ec>)
 800718e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	ec51 0b19 	vmov	r0, r1, d9
 800719a:	f7f9 fc77 	bl	8000a8c <__aeabi_dcmplt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d050      	beq.n	8007244 <_dtoa_r+0x244>
 80071a2:	9b00      	ldr	r3, [sp, #0]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071ae:	1b5d      	subs	r5, r3, r5
 80071b0:	1e6b      	subs	r3, r5, #1
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	bf45      	ittet	mi
 80071b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80071ba:	9304      	strmi	r3, [sp, #16]
 80071bc:	2300      	movpl	r3, #0
 80071be:	2300      	movmi	r3, #0
 80071c0:	bf4c      	ite	mi
 80071c2:	9305      	strmi	r3, [sp, #20]
 80071c4:	9304      	strpl	r3, [sp, #16]
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	db3d      	blt.n	8007248 <_dtoa_r+0x248>
 80071cc:	9b05      	ldr	r3, [sp, #20]
 80071ce:	9a00      	ldr	r2, [sp, #0]
 80071d0:	920a      	str	r2, [sp, #40]	; 0x28
 80071d2:	4413      	add	r3, r2
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	2b09      	cmp	r3, #9
 80071de:	f200 8089 	bhi.w	80072f4 <_dtoa_r+0x2f4>
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	bfc4      	itt	gt
 80071e6:	3b04      	subgt	r3, #4
 80071e8:	9306      	strgt	r3, [sp, #24]
 80071ea:	9b06      	ldr	r3, [sp, #24]
 80071ec:	f1a3 0302 	sub.w	r3, r3, #2
 80071f0:	bfcc      	ite	gt
 80071f2:	2500      	movgt	r5, #0
 80071f4:	2501      	movle	r5, #1
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	f200 8087 	bhi.w	800730a <_dtoa_r+0x30a>
 80071fc:	e8df f003 	tbb	[pc, r3]
 8007200:	59383a2d 	.word	0x59383a2d
 8007204:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007208:	441d      	add	r5, r3
 800720a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800720e:	2b20      	cmp	r3, #32
 8007210:	bfc1      	itttt	gt
 8007212:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007216:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800721a:	fa0b f303 	lslgt.w	r3, fp, r3
 800721e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007222:	bfda      	itte	le
 8007224:	f1c3 0320 	rsble	r3, r3, #32
 8007228:	fa06 f003 	lslle.w	r0, r6, r3
 800722c:	4318      	orrgt	r0, r3
 800722e:	f7f9 f941 	bl	80004b4 <__aeabi_ui2d>
 8007232:	2301      	movs	r3, #1
 8007234:	4606      	mov	r6, r0
 8007236:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800723a:	3d01      	subs	r5, #1
 800723c:	930e      	str	r3, [sp, #56]	; 0x38
 800723e:	e76a      	b.n	8007116 <_dtoa_r+0x116>
 8007240:	2301      	movs	r3, #1
 8007242:	e7b2      	b.n	80071aa <_dtoa_r+0x1aa>
 8007244:	900b      	str	r0, [sp, #44]	; 0x2c
 8007246:	e7b1      	b.n	80071ac <_dtoa_r+0x1ac>
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	9a00      	ldr	r2, [sp, #0]
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	4253      	negs	r3, r2
 8007252:	9307      	str	r3, [sp, #28]
 8007254:	2300      	movs	r3, #0
 8007256:	930a      	str	r3, [sp, #40]	; 0x28
 8007258:	e7bf      	b.n	80071da <_dtoa_r+0x1da>
 800725a:	2300      	movs	r3, #0
 800725c:	9308      	str	r3, [sp, #32]
 800725e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	dc55      	bgt.n	8007310 <_dtoa_r+0x310>
 8007264:	2301      	movs	r3, #1
 8007266:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800726a:	461a      	mov	r2, r3
 800726c:	9209      	str	r2, [sp, #36]	; 0x24
 800726e:	e00c      	b.n	800728a <_dtoa_r+0x28a>
 8007270:	2301      	movs	r3, #1
 8007272:	e7f3      	b.n	800725c <_dtoa_r+0x25c>
 8007274:	2300      	movs	r3, #0
 8007276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007278:	9308      	str	r3, [sp, #32]
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	4413      	add	r3, r2
 800727e:	9302      	str	r3, [sp, #8]
 8007280:	3301      	adds	r3, #1
 8007282:	2b01      	cmp	r3, #1
 8007284:	9303      	str	r3, [sp, #12]
 8007286:	bfb8      	it	lt
 8007288:	2301      	movlt	r3, #1
 800728a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800728c:	2200      	movs	r2, #0
 800728e:	6042      	str	r2, [r0, #4]
 8007290:	2204      	movs	r2, #4
 8007292:	f102 0614 	add.w	r6, r2, #20
 8007296:	429e      	cmp	r6, r3
 8007298:	6841      	ldr	r1, [r0, #4]
 800729a:	d93d      	bls.n	8007318 <_dtoa_r+0x318>
 800729c:	4620      	mov	r0, r4
 800729e:	f000 fcb7 	bl	8007c10 <_Balloc>
 80072a2:	9001      	str	r0, [sp, #4]
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d13b      	bne.n	8007320 <_dtoa_r+0x320>
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <_dtoa_r+0x2f0>)
 80072aa:	4602      	mov	r2, r0
 80072ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072b0:	e6c0      	b.n	8007034 <_dtoa_r+0x34>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e7df      	b.n	8007276 <_dtoa_r+0x276>
 80072b6:	bf00      	nop
 80072b8:	636f4361 	.word	0x636f4361
 80072bc:	3fd287a7 	.word	0x3fd287a7
 80072c0:	8b60c8b3 	.word	0x8b60c8b3
 80072c4:	3fc68a28 	.word	0x3fc68a28
 80072c8:	509f79fb 	.word	0x509f79fb
 80072cc:	3fd34413 	.word	0x3fd34413
 80072d0:	08009501 	.word	0x08009501
 80072d4:	08009518 	.word	0x08009518
 80072d8:	7ff00000 	.word	0x7ff00000
 80072dc:	080094fd 	.word	0x080094fd
 80072e0:	080094f4 	.word	0x080094f4
 80072e4:	080094d1 	.word	0x080094d1
 80072e8:	3ff80000 	.word	0x3ff80000
 80072ec:	08009608 	.word	0x08009608
 80072f0:	08009573 	.word	0x08009573
 80072f4:	2501      	movs	r5, #1
 80072f6:	2300      	movs	r3, #0
 80072f8:	9306      	str	r3, [sp, #24]
 80072fa:	9508      	str	r5, [sp, #32]
 80072fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007300:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	2312      	movs	r3, #18
 8007308:	e7b0      	b.n	800726c <_dtoa_r+0x26c>
 800730a:	2301      	movs	r3, #1
 800730c:	9308      	str	r3, [sp, #32]
 800730e:	e7f5      	b.n	80072fc <_dtoa_r+0x2fc>
 8007310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007312:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007316:	e7b8      	b.n	800728a <_dtoa_r+0x28a>
 8007318:	3101      	adds	r1, #1
 800731a:	6041      	str	r1, [r0, #4]
 800731c:	0052      	lsls	r2, r2, #1
 800731e:	e7b8      	b.n	8007292 <_dtoa_r+0x292>
 8007320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007322:	9a01      	ldr	r2, [sp, #4]
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	2b0e      	cmp	r3, #14
 800732a:	f200 809d 	bhi.w	8007468 <_dtoa_r+0x468>
 800732e:	2d00      	cmp	r5, #0
 8007330:	f000 809a 	beq.w	8007468 <_dtoa_r+0x468>
 8007334:	9b00      	ldr	r3, [sp, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd32      	ble.n	80073a0 <_dtoa_r+0x3a0>
 800733a:	4ab7      	ldr	r2, [pc, #732]	; (8007618 <_dtoa_r+0x618>)
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007344:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	05d8      	lsls	r0, r3, #23
 800734c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007350:	d516      	bpl.n	8007380 <_dtoa_r+0x380>
 8007352:	4bb2      	ldr	r3, [pc, #712]	; (800761c <_dtoa_r+0x61c>)
 8007354:	ec51 0b19 	vmov	r0, r1, d9
 8007358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800735c:	f7f9 fa4e 	bl	80007fc <__aeabi_ddiv>
 8007360:	f007 070f 	and.w	r7, r7, #15
 8007364:	4682      	mov	sl, r0
 8007366:	468b      	mov	fp, r1
 8007368:	2503      	movs	r5, #3
 800736a:	4eac      	ldr	r6, [pc, #688]	; (800761c <_dtoa_r+0x61c>)
 800736c:	b957      	cbnz	r7, 8007384 <_dtoa_r+0x384>
 800736e:	4642      	mov	r2, r8
 8007370:	464b      	mov	r3, r9
 8007372:	4650      	mov	r0, sl
 8007374:	4659      	mov	r1, fp
 8007376:	f7f9 fa41 	bl	80007fc <__aeabi_ddiv>
 800737a:	4682      	mov	sl, r0
 800737c:	468b      	mov	fp, r1
 800737e:	e028      	b.n	80073d2 <_dtoa_r+0x3d2>
 8007380:	2502      	movs	r5, #2
 8007382:	e7f2      	b.n	800736a <_dtoa_r+0x36a>
 8007384:	07f9      	lsls	r1, r7, #31
 8007386:	d508      	bpl.n	800739a <_dtoa_r+0x39a>
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007390:	f7f9 f90a 	bl	80005a8 <__aeabi_dmul>
 8007394:	3501      	adds	r5, #1
 8007396:	4680      	mov	r8, r0
 8007398:	4689      	mov	r9, r1
 800739a:	107f      	asrs	r7, r7, #1
 800739c:	3608      	adds	r6, #8
 800739e:	e7e5      	b.n	800736c <_dtoa_r+0x36c>
 80073a0:	f000 809b 	beq.w	80074da <_dtoa_r+0x4da>
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	4f9d      	ldr	r7, [pc, #628]	; (800761c <_dtoa_r+0x61c>)
 80073a8:	425e      	negs	r6, r3
 80073aa:	4b9b      	ldr	r3, [pc, #620]	; (8007618 <_dtoa_r+0x618>)
 80073ac:	f006 020f 	and.w	r2, r6, #15
 80073b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	ec51 0b19 	vmov	r0, r1, d9
 80073bc:	f7f9 f8f4 	bl	80005a8 <__aeabi_dmul>
 80073c0:	1136      	asrs	r6, r6, #4
 80073c2:	4682      	mov	sl, r0
 80073c4:	468b      	mov	fp, r1
 80073c6:	2300      	movs	r3, #0
 80073c8:	2502      	movs	r5, #2
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d17a      	bne.n	80074c4 <_dtoa_r+0x4c4>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1d3      	bne.n	800737a <_dtoa_r+0x37a>
 80073d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8082 	beq.w	80074de <_dtoa_r+0x4de>
 80073da:	4b91      	ldr	r3, [pc, #580]	; (8007620 <_dtoa_r+0x620>)
 80073dc:	2200      	movs	r2, #0
 80073de:	4650      	mov	r0, sl
 80073e0:	4659      	mov	r1, fp
 80073e2:	f7f9 fb53 	bl	8000a8c <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d079      	beq.n	80074de <_dtoa_r+0x4de>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d076      	beq.n	80074de <_dtoa_r+0x4de>
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd36      	ble.n	8007464 <_dtoa_r+0x464>
 80073f6:	9b00      	ldr	r3, [sp, #0]
 80073f8:	4650      	mov	r0, sl
 80073fa:	4659      	mov	r1, fp
 80073fc:	1e5f      	subs	r7, r3, #1
 80073fe:	2200      	movs	r2, #0
 8007400:	4b88      	ldr	r3, [pc, #544]	; (8007624 <_dtoa_r+0x624>)
 8007402:	f7f9 f8d1 	bl	80005a8 <__aeabi_dmul>
 8007406:	9e02      	ldr	r6, [sp, #8]
 8007408:	4682      	mov	sl, r0
 800740a:	468b      	mov	fp, r1
 800740c:	3501      	adds	r5, #1
 800740e:	4628      	mov	r0, r5
 8007410:	f7f9 f860 	bl	80004d4 <__aeabi_i2d>
 8007414:	4652      	mov	r2, sl
 8007416:	465b      	mov	r3, fp
 8007418:	f7f9 f8c6 	bl	80005a8 <__aeabi_dmul>
 800741c:	4b82      	ldr	r3, [pc, #520]	; (8007628 <_dtoa_r+0x628>)
 800741e:	2200      	movs	r2, #0
 8007420:	f7f8 ff0c 	bl	800023c <__adddf3>
 8007424:	46d0      	mov	r8, sl
 8007426:	46d9      	mov	r9, fp
 8007428:	4682      	mov	sl, r0
 800742a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800742e:	2e00      	cmp	r6, #0
 8007430:	d158      	bne.n	80074e4 <_dtoa_r+0x4e4>
 8007432:	4b7e      	ldr	r3, [pc, #504]	; (800762c <_dtoa_r+0x62c>)
 8007434:	2200      	movs	r2, #0
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f8 fefd 	bl	8000238 <__aeabi_dsub>
 800743e:	4652      	mov	r2, sl
 8007440:	465b      	mov	r3, fp
 8007442:	4680      	mov	r8, r0
 8007444:	4689      	mov	r9, r1
 8007446:	f7f9 fb3f 	bl	8000ac8 <__aeabi_dcmpgt>
 800744a:	2800      	cmp	r0, #0
 800744c:	f040 8295 	bne.w	800797a <_dtoa_r+0x97a>
 8007450:	4652      	mov	r2, sl
 8007452:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f9 fb17 	bl	8000a8c <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	f040 8289 	bne.w	8007976 <_dtoa_r+0x976>
 8007464:	ec5b ab19 	vmov	sl, fp, d9
 8007468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800746a:	2b00      	cmp	r3, #0
 800746c:	f2c0 8148 	blt.w	8007700 <_dtoa_r+0x700>
 8007470:	9a00      	ldr	r2, [sp, #0]
 8007472:	2a0e      	cmp	r2, #14
 8007474:	f300 8144 	bgt.w	8007700 <_dtoa_r+0x700>
 8007478:	4b67      	ldr	r3, [pc, #412]	; (8007618 <_dtoa_r+0x618>)
 800747a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800747e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	f280 80d5 	bge.w	8007634 <_dtoa_r+0x634>
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f300 80d1 	bgt.w	8007634 <_dtoa_r+0x634>
 8007492:	f040 826f 	bne.w	8007974 <_dtoa_r+0x974>
 8007496:	4b65      	ldr	r3, [pc, #404]	; (800762c <_dtoa_r+0x62c>)
 8007498:	2200      	movs	r2, #0
 800749a:	4640      	mov	r0, r8
 800749c:	4649      	mov	r1, r9
 800749e:	f7f9 f883 	bl	80005a8 <__aeabi_dmul>
 80074a2:	4652      	mov	r2, sl
 80074a4:	465b      	mov	r3, fp
 80074a6:	f7f9 fb05 	bl	8000ab4 <__aeabi_dcmpge>
 80074aa:	9e03      	ldr	r6, [sp, #12]
 80074ac:	4637      	mov	r7, r6
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f040 8245 	bne.w	800793e <_dtoa_r+0x93e>
 80074b4:	9d01      	ldr	r5, [sp, #4]
 80074b6:	2331      	movs	r3, #49	; 0x31
 80074b8:	f805 3b01 	strb.w	r3, [r5], #1
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	e240      	b.n	8007946 <_dtoa_r+0x946>
 80074c4:	07f2      	lsls	r2, r6, #31
 80074c6:	d505      	bpl.n	80074d4 <_dtoa_r+0x4d4>
 80074c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074cc:	f7f9 f86c 	bl	80005a8 <__aeabi_dmul>
 80074d0:	3501      	adds	r5, #1
 80074d2:	2301      	movs	r3, #1
 80074d4:	1076      	asrs	r6, r6, #1
 80074d6:	3708      	adds	r7, #8
 80074d8:	e777      	b.n	80073ca <_dtoa_r+0x3ca>
 80074da:	2502      	movs	r5, #2
 80074dc:	e779      	b.n	80073d2 <_dtoa_r+0x3d2>
 80074de:	9f00      	ldr	r7, [sp, #0]
 80074e0:	9e03      	ldr	r6, [sp, #12]
 80074e2:	e794      	b.n	800740e <_dtoa_r+0x40e>
 80074e4:	9901      	ldr	r1, [sp, #4]
 80074e6:	4b4c      	ldr	r3, [pc, #304]	; (8007618 <_dtoa_r+0x618>)
 80074e8:	4431      	add	r1, r6
 80074ea:	910d      	str	r1, [sp, #52]	; 0x34
 80074ec:	9908      	ldr	r1, [sp, #32]
 80074ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d043      	beq.n	8007582 <_dtoa_r+0x582>
 80074fa:	494d      	ldr	r1, [pc, #308]	; (8007630 <_dtoa_r+0x630>)
 80074fc:	2000      	movs	r0, #0
 80074fe:	f7f9 f97d 	bl	80007fc <__aeabi_ddiv>
 8007502:	4652      	mov	r2, sl
 8007504:	465b      	mov	r3, fp
 8007506:	f7f8 fe97 	bl	8000238 <__aeabi_dsub>
 800750a:	9d01      	ldr	r5, [sp, #4]
 800750c:	4682      	mov	sl, r0
 800750e:	468b      	mov	fp, r1
 8007510:	4649      	mov	r1, r9
 8007512:	4640      	mov	r0, r8
 8007514:	f7f9 faf8 	bl	8000b08 <__aeabi_d2iz>
 8007518:	4606      	mov	r6, r0
 800751a:	f7f8 ffdb 	bl	80004d4 <__aeabi_i2d>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f8 fe87 	bl	8000238 <__aeabi_dsub>
 800752a:	3630      	adds	r6, #48	; 0x30
 800752c:	f805 6b01 	strb.w	r6, [r5], #1
 8007530:	4652      	mov	r2, sl
 8007532:	465b      	mov	r3, fp
 8007534:	4680      	mov	r8, r0
 8007536:	4689      	mov	r9, r1
 8007538:	f7f9 faa8 	bl	8000a8c <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	d163      	bne.n	8007608 <_dtoa_r+0x608>
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	4936      	ldr	r1, [pc, #216]	; (8007620 <_dtoa_r+0x620>)
 8007546:	2000      	movs	r0, #0
 8007548:	f7f8 fe76 	bl	8000238 <__aeabi_dsub>
 800754c:	4652      	mov	r2, sl
 800754e:	465b      	mov	r3, fp
 8007550:	f7f9 fa9c 	bl	8000a8c <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	f040 80b5 	bne.w	80076c4 <_dtoa_r+0x6c4>
 800755a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800755c:	429d      	cmp	r5, r3
 800755e:	d081      	beq.n	8007464 <_dtoa_r+0x464>
 8007560:	4b30      	ldr	r3, [pc, #192]	; (8007624 <_dtoa_r+0x624>)
 8007562:	2200      	movs	r2, #0
 8007564:	4650      	mov	r0, sl
 8007566:	4659      	mov	r1, fp
 8007568:	f7f9 f81e 	bl	80005a8 <__aeabi_dmul>
 800756c:	4b2d      	ldr	r3, [pc, #180]	; (8007624 <_dtoa_r+0x624>)
 800756e:	4682      	mov	sl, r0
 8007570:	468b      	mov	fp, r1
 8007572:	4640      	mov	r0, r8
 8007574:	4649      	mov	r1, r9
 8007576:	2200      	movs	r2, #0
 8007578:	f7f9 f816 	bl	80005a8 <__aeabi_dmul>
 800757c:	4680      	mov	r8, r0
 800757e:	4689      	mov	r9, r1
 8007580:	e7c6      	b.n	8007510 <_dtoa_r+0x510>
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	f7f9 f80f 	bl	80005a8 <__aeabi_dmul>
 800758a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800758c:	9d01      	ldr	r5, [sp, #4]
 800758e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007590:	4682      	mov	sl, r0
 8007592:	468b      	mov	fp, r1
 8007594:	4649      	mov	r1, r9
 8007596:	4640      	mov	r0, r8
 8007598:	f7f9 fab6 	bl	8000b08 <__aeabi_d2iz>
 800759c:	4606      	mov	r6, r0
 800759e:	f7f8 ff99 	bl	80004d4 <__aeabi_i2d>
 80075a2:	3630      	adds	r6, #48	; 0x30
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f8 fe44 	bl	8000238 <__aeabi_dsub>
 80075b0:	f805 6b01 	strb.w	r6, [r5], #1
 80075b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b6:	429d      	cmp	r5, r3
 80075b8:	4680      	mov	r8, r0
 80075ba:	4689      	mov	r9, r1
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	d124      	bne.n	800760c <_dtoa_r+0x60c>
 80075c2:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <_dtoa_r+0x630>)
 80075c4:	4650      	mov	r0, sl
 80075c6:	4659      	mov	r1, fp
 80075c8:	f7f8 fe38 	bl	800023c <__adddf3>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4640      	mov	r0, r8
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7f9 fa78 	bl	8000ac8 <__aeabi_dcmpgt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d173      	bne.n	80076c4 <_dtoa_r+0x6c4>
 80075dc:	4652      	mov	r2, sl
 80075de:	465b      	mov	r3, fp
 80075e0:	4913      	ldr	r1, [pc, #76]	; (8007630 <_dtoa_r+0x630>)
 80075e2:	2000      	movs	r0, #0
 80075e4:	f7f8 fe28 	bl	8000238 <__aeabi_dsub>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7f9 fa4c 	bl	8000a8c <__aeabi_dcmplt>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	f43f af35 	beq.w	8007464 <_dtoa_r+0x464>
 80075fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075fc:	1e6b      	subs	r3, r5, #1
 80075fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007600:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007604:	2b30      	cmp	r3, #48	; 0x30
 8007606:	d0f8      	beq.n	80075fa <_dtoa_r+0x5fa>
 8007608:	9700      	str	r7, [sp, #0]
 800760a:	e049      	b.n	80076a0 <_dtoa_r+0x6a0>
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <_dtoa_r+0x624>)
 800760e:	f7f8 ffcb 	bl	80005a8 <__aeabi_dmul>
 8007612:	4680      	mov	r8, r0
 8007614:	4689      	mov	r9, r1
 8007616:	e7bd      	b.n	8007594 <_dtoa_r+0x594>
 8007618:	08009608 	.word	0x08009608
 800761c:	080095e0 	.word	0x080095e0
 8007620:	3ff00000 	.word	0x3ff00000
 8007624:	40240000 	.word	0x40240000
 8007628:	401c0000 	.word	0x401c0000
 800762c:	40140000 	.word	0x40140000
 8007630:	3fe00000 	.word	0x3fe00000
 8007634:	9d01      	ldr	r5, [sp, #4]
 8007636:	4656      	mov	r6, sl
 8007638:	465f      	mov	r7, fp
 800763a:	4642      	mov	r2, r8
 800763c:	464b      	mov	r3, r9
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 f8db 	bl	80007fc <__aeabi_ddiv>
 8007646:	f7f9 fa5f 	bl	8000b08 <__aeabi_d2iz>
 800764a:	4682      	mov	sl, r0
 800764c:	f7f8 ff42 	bl	80004d4 <__aeabi_i2d>
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	f7f8 ffa8 	bl	80005a8 <__aeabi_dmul>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007664:	f7f8 fde8 	bl	8000238 <__aeabi_dsub>
 8007668:	f805 6b01 	strb.w	r6, [r5], #1
 800766c:	9e01      	ldr	r6, [sp, #4]
 800766e:	9f03      	ldr	r7, [sp, #12]
 8007670:	1bae      	subs	r6, r5, r6
 8007672:	42b7      	cmp	r7, r6
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	d135      	bne.n	80076e6 <_dtoa_r+0x6e6>
 800767a:	f7f8 fddf 	bl	800023c <__adddf3>
 800767e:	4642      	mov	r2, r8
 8007680:	464b      	mov	r3, r9
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	f7f9 fa1f 	bl	8000ac8 <__aeabi_dcmpgt>
 800768a:	b9d0      	cbnz	r0, 80076c2 <_dtoa_r+0x6c2>
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f9 f9f0 	bl	8000a78 <__aeabi_dcmpeq>
 8007698:	b110      	cbz	r0, 80076a0 <_dtoa_r+0x6a0>
 800769a:	f01a 0f01 	tst.w	sl, #1
 800769e:	d110      	bne.n	80076c2 <_dtoa_r+0x6c2>
 80076a0:	4620      	mov	r0, r4
 80076a2:	ee18 1a10 	vmov	r1, s16
 80076a6:	f000 faf3 	bl	8007c90 <_Bfree>
 80076aa:	2300      	movs	r3, #0
 80076ac:	9800      	ldr	r0, [sp, #0]
 80076ae:	702b      	strb	r3, [r5, #0]
 80076b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b2:	3001      	adds	r0, #1
 80076b4:	6018      	str	r0, [r3, #0]
 80076b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f43f acf1 	beq.w	80070a0 <_dtoa_r+0xa0>
 80076be:	601d      	str	r5, [r3, #0]
 80076c0:	e4ee      	b.n	80070a0 <_dtoa_r+0xa0>
 80076c2:	9f00      	ldr	r7, [sp, #0]
 80076c4:	462b      	mov	r3, r5
 80076c6:	461d      	mov	r5, r3
 80076c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076cc:	2a39      	cmp	r2, #57	; 0x39
 80076ce:	d106      	bne.n	80076de <_dtoa_r+0x6de>
 80076d0:	9a01      	ldr	r2, [sp, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d1f7      	bne.n	80076c6 <_dtoa_r+0x6c6>
 80076d6:	9901      	ldr	r1, [sp, #4]
 80076d8:	2230      	movs	r2, #48	; 0x30
 80076da:	3701      	adds	r7, #1
 80076dc:	700a      	strb	r2, [r1, #0]
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	3201      	adds	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e790      	b.n	8007608 <_dtoa_r+0x608>
 80076e6:	4ba6      	ldr	r3, [pc, #664]	; (8007980 <_dtoa_r+0x980>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	f7f8 ff5d 	bl	80005a8 <__aeabi_dmul>
 80076ee:	2200      	movs	r2, #0
 80076f0:	2300      	movs	r3, #0
 80076f2:	4606      	mov	r6, r0
 80076f4:	460f      	mov	r7, r1
 80076f6:	f7f9 f9bf 	bl	8000a78 <__aeabi_dcmpeq>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d09d      	beq.n	800763a <_dtoa_r+0x63a>
 80076fe:	e7cf      	b.n	80076a0 <_dtoa_r+0x6a0>
 8007700:	9a08      	ldr	r2, [sp, #32]
 8007702:	2a00      	cmp	r2, #0
 8007704:	f000 80d7 	beq.w	80078b6 <_dtoa_r+0x8b6>
 8007708:	9a06      	ldr	r2, [sp, #24]
 800770a:	2a01      	cmp	r2, #1
 800770c:	f300 80ba 	bgt.w	8007884 <_dtoa_r+0x884>
 8007710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007712:	2a00      	cmp	r2, #0
 8007714:	f000 80b2 	beq.w	800787c <_dtoa_r+0x87c>
 8007718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800771c:	9e07      	ldr	r6, [sp, #28]
 800771e:	9d04      	ldr	r5, [sp, #16]
 8007720:	9a04      	ldr	r2, [sp, #16]
 8007722:	441a      	add	r2, r3
 8007724:	9204      	str	r2, [sp, #16]
 8007726:	9a05      	ldr	r2, [sp, #20]
 8007728:	2101      	movs	r1, #1
 800772a:	441a      	add	r2, r3
 800772c:	4620      	mov	r0, r4
 800772e:	9205      	str	r2, [sp, #20]
 8007730:	f000 fb66 	bl	8007e00 <__i2b>
 8007734:	4607      	mov	r7, r0
 8007736:	2d00      	cmp	r5, #0
 8007738:	dd0c      	ble.n	8007754 <_dtoa_r+0x754>
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	dd09      	ble.n	8007754 <_dtoa_r+0x754>
 8007740:	42ab      	cmp	r3, r5
 8007742:	9a04      	ldr	r2, [sp, #16]
 8007744:	bfa8      	it	ge
 8007746:	462b      	movge	r3, r5
 8007748:	1ad2      	subs	r2, r2, r3
 800774a:	9204      	str	r2, [sp, #16]
 800774c:	9a05      	ldr	r2, [sp, #20]
 800774e:	1aed      	subs	r5, r5, r3
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	9305      	str	r3, [sp, #20]
 8007754:	9b07      	ldr	r3, [sp, #28]
 8007756:	b31b      	cbz	r3, 80077a0 <_dtoa_r+0x7a0>
 8007758:	9b08      	ldr	r3, [sp, #32]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80af 	beq.w	80078be <_dtoa_r+0x8be>
 8007760:	2e00      	cmp	r6, #0
 8007762:	dd13      	ble.n	800778c <_dtoa_r+0x78c>
 8007764:	4639      	mov	r1, r7
 8007766:	4632      	mov	r2, r6
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fc09 	bl	8007f80 <__pow5mult>
 800776e:	ee18 2a10 	vmov	r2, s16
 8007772:	4601      	mov	r1, r0
 8007774:	4607      	mov	r7, r0
 8007776:	4620      	mov	r0, r4
 8007778:	f000 fb58 	bl	8007e2c <__multiply>
 800777c:	ee18 1a10 	vmov	r1, s16
 8007780:	4680      	mov	r8, r0
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fa84 	bl	8007c90 <_Bfree>
 8007788:	ee08 8a10 	vmov	s16, r8
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	1b9a      	subs	r2, r3, r6
 8007790:	d006      	beq.n	80077a0 <_dtoa_r+0x7a0>
 8007792:	ee18 1a10 	vmov	r1, s16
 8007796:	4620      	mov	r0, r4
 8007798:	f000 fbf2 	bl	8007f80 <__pow5mult>
 800779c:	ee08 0a10 	vmov	s16, r0
 80077a0:	2101      	movs	r1, #1
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fb2c 	bl	8007e00 <__i2b>
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	4606      	mov	r6, r0
 80077ae:	f340 8088 	ble.w	80078c2 <_dtoa_r+0x8c2>
 80077b2:	461a      	mov	r2, r3
 80077b4:	4601      	mov	r1, r0
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 fbe2 	bl	8007f80 <__pow5mult>
 80077bc:	9b06      	ldr	r3, [sp, #24]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	4606      	mov	r6, r0
 80077c2:	f340 8081 	ble.w	80078c8 <_dtoa_r+0x8c8>
 80077c6:	f04f 0800 	mov.w	r8, #0
 80077ca:	6933      	ldr	r3, [r6, #16]
 80077cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077d0:	6918      	ldr	r0, [r3, #16]
 80077d2:	f000 fac5 	bl	8007d60 <__hi0bits>
 80077d6:	f1c0 0020 	rsb	r0, r0, #32
 80077da:	9b05      	ldr	r3, [sp, #20]
 80077dc:	4418      	add	r0, r3
 80077de:	f010 001f 	ands.w	r0, r0, #31
 80077e2:	f000 8092 	beq.w	800790a <_dtoa_r+0x90a>
 80077e6:	f1c0 0320 	rsb	r3, r0, #32
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	f340 808a 	ble.w	8007904 <_dtoa_r+0x904>
 80077f0:	f1c0 001c 	rsb	r0, r0, #28
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	4403      	add	r3, r0
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	9b05      	ldr	r3, [sp, #20]
 80077fc:	4403      	add	r3, r0
 80077fe:	4405      	add	r5, r0
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd07      	ble.n	8007818 <_dtoa_r+0x818>
 8007808:	ee18 1a10 	vmov	r1, s16
 800780c:	461a      	mov	r2, r3
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fc10 	bl	8008034 <__lshift>
 8007814:	ee08 0a10 	vmov	s16, r0
 8007818:	9b05      	ldr	r3, [sp, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dd05      	ble.n	800782a <_dtoa_r+0x82a>
 800781e:	4631      	mov	r1, r6
 8007820:	461a      	mov	r2, r3
 8007822:	4620      	mov	r0, r4
 8007824:	f000 fc06 	bl	8008034 <__lshift>
 8007828:	4606      	mov	r6, r0
 800782a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d06e      	beq.n	800790e <_dtoa_r+0x90e>
 8007830:	ee18 0a10 	vmov	r0, s16
 8007834:	4631      	mov	r1, r6
 8007836:	f000 fc6d 	bl	8008114 <__mcmp>
 800783a:	2800      	cmp	r0, #0
 800783c:	da67      	bge.n	800790e <_dtoa_r+0x90e>
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	3b01      	subs	r3, #1
 8007842:	ee18 1a10 	vmov	r1, s16
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	220a      	movs	r2, #10
 800784a:	2300      	movs	r3, #0
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fa41 	bl	8007cd4 <__multadd>
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	ee08 0a10 	vmov	s16, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 81b1 	beq.w	8007bc0 <_dtoa_r+0xbc0>
 800785e:	2300      	movs	r3, #0
 8007860:	4639      	mov	r1, r7
 8007862:	220a      	movs	r2, #10
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fa35 	bl	8007cd4 <__multadd>
 800786a:	9b02      	ldr	r3, [sp, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	4607      	mov	r7, r0
 8007870:	f300 808e 	bgt.w	8007990 <_dtoa_r+0x990>
 8007874:	9b06      	ldr	r3, [sp, #24]
 8007876:	2b02      	cmp	r3, #2
 8007878:	dc51      	bgt.n	800791e <_dtoa_r+0x91e>
 800787a:	e089      	b.n	8007990 <_dtoa_r+0x990>
 800787c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800787e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007882:	e74b      	b.n	800771c <_dtoa_r+0x71c>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	1e5e      	subs	r6, r3, #1
 8007888:	9b07      	ldr	r3, [sp, #28]
 800788a:	42b3      	cmp	r3, r6
 800788c:	bfbf      	itttt	lt
 800788e:	9b07      	ldrlt	r3, [sp, #28]
 8007890:	9607      	strlt	r6, [sp, #28]
 8007892:	1af2      	sublt	r2, r6, r3
 8007894:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007896:	bfb6      	itet	lt
 8007898:	189b      	addlt	r3, r3, r2
 800789a:	1b9e      	subge	r6, r3, r6
 800789c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	bfb8      	it	lt
 80078a2:	2600      	movlt	r6, #0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bfb7      	itett	lt
 80078a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078b0:	1a9d      	sublt	r5, r3, r2
 80078b2:	2300      	movlt	r3, #0
 80078b4:	e734      	b.n	8007720 <_dtoa_r+0x720>
 80078b6:	9e07      	ldr	r6, [sp, #28]
 80078b8:	9d04      	ldr	r5, [sp, #16]
 80078ba:	9f08      	ldr	r7, [sp, #32]
 80078bc:	e73b      	b.n	8007736 <_dtoa_r+0x736>
 80078be:	9a07      	ldr	r2, [sp, #28]
 80078c0:	e767      	b.n	8007792 <_dtoa_r+0x792>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	dc18      	bgt.n	80078fa <_dtoa_r+0x8fa>
 80078c8:	f1ba 0f00 	cmp.w	sl, #0
 80078cc:	d115      	bne.n	80078fa <_dtoa_r+0x8fa>
 80078ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078d2:	b993      	cbnz	r3, 80078fa <_dtoa_r+0x8fa>
 80078d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078d8:	0d1b      	lsrs	r3, r3, #20
 80078da:	051b      	lsls	r3, r3, #20
 80078dc:	b183      	cbz	r3, 8007900 <_dtoa_r+0x900>
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	3301      	adds	r3, #1
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	9b05      	ldr	r3, [sp, #20]
 80078e6:	3301      	adds	r3, #1
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	f04f 0801 	mov.w	r8, #1
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f af6a 	bne.w	80077ca <_dtoa_r+0x7ca>
 80078f6:	2001      	movs	r0, #1
 80078f8:	e76f      	b.n	80077da <_dtoa_r+0x7da>
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	e7f6      	b.n	80078ee <_dtoa_r+0x8ee>
 8007900:	4698      	mov	r8, r3
 8007902:	e7f4      	b.n	80078ee <_dtoa_r+0x8ee>
 8007904:	f43f af7d 	beq.w	8007802 <_dtoa_r+0x802>
 8007908:	4618      	mov	r0, r3
 800790a:	301c      	adds	r0, #28
 800790c:	e772      	b.n	80077f4 <_dtoa_r+0x7f4>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	dc37      	bgt.n	8007984 <_dtoa_r+0x984>
 8007914:	9b06      	ldr	r3, [sp, #24]
 8007916:	2b02      	cmp	r3, #2
 8007918:	dd34      	ble.n	8007984 <_dtoa_r+0x984>
 800791a:	9b03      	ldr	r3, [sp, #12]
 800791c:	9302      	str	r3, [sp, #8]
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	b96b      	cbnz	r3, 800793e <_dtoa_r+0x93e>
 8007922:	4631      	mov	r1, r6
 8007924:	2205      	movs	r2, #5
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f9d4 	bl	8007cd4 <__multadd>
 800792c:	4601      	mov	r1, r0
 800792e:	4606      	mov	r6, r0
 8007930:	ee18 0a10 	vmov	r0, s16
 8007934:	f000 fbee 	bl	8008114 <__mcmp>
 8007938:	2800      	cmp	r0, #0
 800793a:	f73f adbb 	bgt.w	80074b4 <_dtoa_r+0x4b4>
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	9d01      	ldr	r5, [sp, #4]
 8007942:	43db      	mvns	r3, r3
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	4631      	mov	r1, r6
 800794c:	4620      	mov	r0, r4
 800794e:	f000 f99f 	bl	8007c90 <_Bfree>
 8007952:	2f00      	cmp	r7, #0
 8007954:	f43f aea4 	beq.w	80076a0 <_dtoa_r+0x6a0>
 8007958:	f1b8 0f00 	cmp.w	r8, #0
 800795c:	d005      	beq.n	800796a <_dtoa_r+0x96a>
 800795e:	45b8      	cmp	r8, r7
 8007960:	d003      	beq.n	800796a <_dtoa_r+0x96a>
 8007962:	4641      	mov	r1, r8
 8007964:	4620      	mov	r0, r4
 8007966:	f000 f993 	bl	8007c90 <_Bfree>
 800796a:	4639      	mov	r1, r7
 800796c:	4620      	mov	r0, r4
 800796e:	f000 f98f 	bl	8007c90 <_Bfree>
 8007972:	e695      	b.n	80076a0 <_dtoa_r+0x6a0>
 8007974:	2600      	movs	r6, #0
 8007976:	4637      	mov	r7, r6
 8007978:	e7e1      	b.n	800793e <_dtoa_r+0x93e>
 800797a:	9700      	str	r7, [sp, #0]
 800797c:	4637      	mov	r7, r6
 800797e:	e599      	b.n	80074b4 <_dtoa_r+0x4b4>
 8007980:	40240000 	.word	0x40240000
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 80ca 	beq.w	8007b20 <_dtoa_r+0xb20>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	9302      	str	r3, [sp, #8]
 8007990:	2d00      	cmp	r5, #0
 8007992:	dd05      	ble.n	80079a0 <_dtoa_r+0x9a0>
 8007994:	4639      	mov	r1, r7
 8007996:	462a      	mov	r2, r5
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fb4b 	bl	8008034 <__lshift>
 800799e:	4607      	mov	r7, r0
 80079a0:	f1b8 0f00 	cmp.w	r8, #0
 80079a4:	d05b      	beq.n	8007a5e <_dtoa_r+0xa5e>
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 f931 	bl	8007c10 <_Balloc>
 80079ae:	4605      	mov	r5, r0
 80079b0:	b928      	cbnz	r0, 80079be <_dtoa_r+0x9be>
 80079b2:	4b87      	ldr	r3, [pc, #540]	; (8007bd0 <_dtoa_r+0xbd0>)
 80079b4:	4602      	mov	r2, r0
 80079b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079ba:	f7ff bb3b 	b.w	8007034 <_dtoa_r+0x34>
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	3202      	adds	r2, #2
 80079c2:	0092      	lsls	r2, r2, #2
 80079c4:	f107 010c 	add.w	r1, r7, #12
 80079c8:	300c      	adds	r0, #12
 80079ca:	f000 f913 	bl	8007bf4 <memcpy>
 80079ce:	2201      	movs	r2, #1
 80079d0:	4629      	mov	r1, r5
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fb2e 	bl	8008034 <__lshift>
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	f103 0901 	add.w	r9, r3, #1
 80079de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	f00a 0301 	and.w	r3, sl, #1
 80079ea:	46b8      	mov	r8, r7
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	4607      	mov	r7, r0
 80079f0:	4631      	mov	r1, r6
 80079f2:	ee18 0a10 	vmov	r0, s16
 80079f6:	f7ff fa75 	bl	8006ee4 <quorem>
 80079fa:	4641      	mov	r1, r8
 80079fc:	9002      	str	r0, [sp, #8]
 80079fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a02:	ee18 0a10 	vmov	r0, s16
 8007a06:	f000 fb85 	bl	8008114 <__mcmp>
 8007a0a:	463a      	mov	r2, r7
 8007a0c:	9003      	str	r0, [sp, #12]
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 fb9b 	bl	800814c <__mdiff>
 8007a16:	68c2      	ldr	r2, [r0, #12]
 8007a18:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	bb02      	cbnz	r2, 8007a62 <_dtoa_r+0xa62>
 8007a20:	4601      	mov	r1, r0
 8007a22:	ee18 0a10 	vmov	r0, s16
 8007a26:	f000 fb75 	bl	8008114 <__mcmp>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4620      	mov	r0, r4
 8007a30:	9207      	str	r2, [sp, #28]
 8007a32:	f000 f92d 	bl	8007c90 <_Bfree>
 8007a36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a3a:	ea43 0102 	orr.w	r1, r3, r2
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	430b      	orrs	r3, r1
 8007a42:	464d      	mov	r5, r9
 8007a44:	d10f      	bne.n	8007a66 <_dtoa_r+0xa66>
 8007a46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a4a:	d02a      	beq.n	8007aa2 <_dtoa_r+0xaa2>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd02      	ble.n	8007a58 <_dtoa_r+0xa58>
 8007a52:	9b02      	ldr	r3, [sp, #8]
 8007a54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a58:	f88b a000 	strb.w	sl, [fp]
 8007a5c:	e775      	b.n	800794a <_dtoa_r+0x94a>
 8007a5e:	4638      	mov	r0, r7
 8007a60:	e7ba      	b.n	80079d8 <_dtoa_r+0x9d8>
 8007a62:	2201      	movs	r2, #1
 8007a64:	e7e2      	b.n	8007a2c <_dtoa_r+0xa2c>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	db04      	blt.n	8007a76 <_dtoa_r+0xa76>
 8007a6c:	9906      	ldr	r1, [sp, #24]
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	9904      	ldr	r1, [sp, #16]
 8007a72:	430b      	orrs	r3, r1
 8007a74:	d122      	bne.n	8007abc <_dtoa_r+0xabc>
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	ddee      	ble.n	8007a58 <_dtoa_r+0xa58>
 8007a7a:	ee18 1a10 	vmov	r1, s16
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fad7 	bl	8008034 <__lshift>
 8007a86:	4631      	mov	r1, r6
 8007a88:	ee08 0a10 	vmov	s16, r0
 8007a8c:	f000 fb42 	bl	8008114 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	dc03      	bgt.n	8007a9c <_dtoa_r+0xa9c>
 8007a94:	d1e0      	bne.n	8007a58 <_dtoa_r+0xa58>
 8007a96:	f01a 0f01 	tst.w	sl, #1
 8007a9a:	d0dd      	beq.n	8007a58 <_dtoa_r+0xa58>
 8007a9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aa0:	d1d7      	bne.n	8007a52 <_dtoa_r+0xa52>
 8007aa2:	2339      	movs	r3, #57	; 0x39
 8007aa4:	f88b 3000 	strb.w	r3, [fp]
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	461d      	mov	r5, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ab2:	2a39      	cmp	r2, #57	; 0x39
 8007ab4:	d071      	beq.n	8007b9a <_dtoa_r+0xb9a>
 8007ab6:	3201      	adds	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e746      	b.n	800794a <_dtoa_r+0x94a>
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	dd07      	ble.n	8007ad0 <_dtoa_r+0xad0>
 8007ac0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ac4:	d0ed      	beq.n	8007aa2 <_dtoa_r+0xaa2>
 8007ac6:	f10a 0301 	add.w	r3, sl, #1
 8007aca:	f88b 3000 	strb.w	r3, [fp]
 8007ace:	e73c      	b.n	800794a <_dtoa_r+0x94a>
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ad6:	4599      	cmp	r9, r3
 8007ad8:	d047      	beq.n	8007b6a <_dtoa_r+0xb6a>
 8007ada:	ee18 1a10 	vmov	r1, s16
 8007ade:	2300      	movs	r3, #0
 8007ae0:	220a      	movs	r2, #10
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f8f6 	bl	8007cd4 <__multadd>
 8007ae8:	45b8      	cmp	r8, r7
 8007aea:	ee08 0a10 	vmov	s16, r0
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	f04f 020a 	mov.w	r2, #10
 8007af6:	4641      	mov	r1, r8
 8007af8:	4620      	mov	r0, r4
 8007afa:	d106      	bne.n	8007b0a <_dtoa_r+0xb0a>
 8007afc:	f000 f8ea 	bl	8007cd4 <__multadd>
 8007b00:	4680      	mov	r8, r0
 8007b02:	4607      	mov	r7, r0
 8007b04:	f109 0901 	add.w	r9, r9, #1
 8007b08:	e772      	b.n	80079f0 <_dtoa_r+0x9f0>
 8007b0a:	f000 f8e3 	bl	8007cd4 <__multadd>
 8007b0e:	4639      	mov	r1, r7
 8007b10:	4680      	mov	r8, r0
 8007b12:	2300      	movs	r3, #0
 8007b14:	220a      	movs	r2, #10
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 f8dc 	bl	8007cd4 <__multadd>
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	e7f1      	b.n	8007b04 <_dtoa_r+0xb04>
 8007b20:	9b03      	ldr	r3, [sp, #12]
 8007b22:	9302      	str	r3, [sp, #8]
 8007b24:	9d01      	ldr	r5, [sp, #4]
 8007b26:	ee18 0a10 	vmov	r0, s16
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	f7ff f9da 	bl	8006ee4 <quorem>
 8007b30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	f805 ab01 	strb.w	sl, [r5], #1
 8007b3a:	1aea      	subs	r2, r5, r3
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	dd09      	ble.n	8007b56 <_dtoa_r+0xb56>
 8007b42:	ee18 1a10 	vmov	r1, s16
 8007b46:	2300      	movs	r3, #0
 8007b48:	220a      	movs	r2, #10
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 f8c2 	bl	8007cd4 <__multadd>
 8007b50:	ee08 0a10 	vmov	s16, r0
 8007b54:	e7e7      	b.n	8007b26 <_dtoa_r+0xb26>
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfc8      	it	gt
 8007b5c:	461d      	movgt	r5, r3
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	bfd8      	it	le
 8007b62:	2501      	movle	r5, #1
 8007b64:	441d      	add	r5, r3
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	ee18 1a10 	vmov	r1, s16
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fa5f 	bl	8008034 <__lshift>
 8007b76:	4631      	mov	r1, r6
 8007b78:	ee08 0a10 	vmov	s16, r0
 8007b7c:	f000 faca 	bl	8008114 <__mcmp>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	dc91      	bgt.n	8007aa8 <_dtoa_r+0xaa8>
 8007b84:	d102      	bne.n	8007b8c <_dtoa_r+0xb8c>
 8007b86:	f01a 0f01 	tst.w	sl, #1
 8007b8a:	d18d      	bne.n	8007aa8 <_dtoa_r+0xaa8>
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	461d      	mov	r5, r3
 8007b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b94:	2a30      	cmp	r2, #48	; 0x30
 8007b96:	d0fa      	beq.n	8007b8e <_dtoa_r+0xb8e>
 8007b98:	e6d7      	b.n	800794a <_dtoa_r+0x94a>
 8007b9a:	9a01      	ldr	r2, [sp, #4]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d184      	bne.n	8007aaa <_dtoa_r+0xaaa>
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	2331      	movs	r3, #49	; 0x31
 8007ba8:	7013      	strb	r3, [r2, #0]
 8007baa:	e6ce      	b.n	800794a <_dtoa_r+0x94a>
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <_dtoa_r+0xbd4>)
 8007bae:	f7ff ba95 	b.w	80070dc <_dtoa_r+0xdc>
 8007bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f47f aa6e 	bne.w	8007096 <_dtoa_r+0x96>
 8007bba:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <_dtoa_r+0xbd8>)
 8007bbc:	f7ff ba8e 	b.w	80070dc <_dtoa_r+0xdc>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dcae      	bgt.n	8007b24 <_dtoa_r+0xb24>
 8007bc6:	9b06      	ldr	r3, [sp, #24]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	f73f aea8 	bgt.w	800791e <_dtoa_r+0x91e>
 8007bce:	e7a9      	b.n	8007b24 <_dtoa_r+0xb24>
 8007bd0:	08009573 	.word	0x08009573
 8007bd4:	080094d0 	.word	0x080094d0
 8007bd8:	080094f4 	.word	0x080094f4

08007bdc <_localeconv_r>:
 8007bdc:	4800      	ldr	r0, [pc, #0]	; (8007be0 <_localeconv_r+0x4>)
 8007bde:	4770      	bx	lr
 8007be0:	20000164 	.word	0x20000164

08007be4 <malloc>:
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <malloc+0xc>)
 8007be6:	4601      	mov	r1, r0
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f000 bc17 	b.w	800841c <_malloc_r>
 8007bee:	bf00      	nop
 8007bf0:	20000010 	.word	0x20000010

08007bf4 <memcpy>:
 8007bf4:	440a      	add	r2, r1
 8007bf6:	4291      	cmp	r1, r2
 8007bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bfc:	d100      	bne.n	8007c00 <memcpy+0xc>
 8007bfe:	4770      	bx	lr
 8007c00:	b510      	push	{r4, lr}
 8007c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	d1f9      	bne.n	8007c02 <memcpy+0xe>
 8007c0e:	bd10      	pop	{r4, pc}

08007c10 <_Balloc>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c14:	4604      	mov	r4, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	b976      	cbnz	r6, 8007c38 <_Balloc+0x28>
 8007c1a:	2010      	movs	r0, #16
 8007c1c:	f7ff ffe2 	bl	8007be4 <malloc>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6260      	str	r0, [r4, #36]	; 0x24
 8007c24:	b920      	cbnz	r0, 8007c30 <_Balloc+0x20>
 8007c26:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <_Balloc+0x78>)
 8007c28:	4818      	ldr	r0, [pc, #96]	; (8007c8c <_Balloc+0x7c>)
 8007c2a:	2166      	movs	r1, #102	; 0x66
 8007c2c:	f000 fdd6 	bl	80087dc <__assert_func>
 8007c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c34:	6006      	str	r6, [r0, #0]
 8007c36:	60c6      	str	r6, [r0, #12]
 8007c38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c3a:	68f3      	ldr	r3, [r6, #12]
 8007c3c:	b183      	cbz	r3, 8007c60 <_Balloc+0x50>
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c46:	b9b8      	cbnz	r0, 8007c78 <_Balloc+0x68>
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c4e:	1d72      	adds	r2, r6, #5
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fb60 	bl	8008318 <_calloc_r>
 8007c58:	b160      	cbz	r0, 8007c74 <_Balloc+0x64>
 8007c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c5e:	e00e      	b.n	8007c7e <_Balloc+0x6e>
 8007c60:	2221      	movs	r2, #33	; 0x21
 8007c62:	2104      	movs	r1, #4
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fb57 	bl	8008318 <_calloc_r>
 8007c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c6c:	60f0      	str	r0, [r6, #12]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e4      	bne.n	8007c3e <_Balloc+0x2e>
 8007c74:	2000      	movs	r0, #0
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	6802      	ldr	r2, [r0, #0]
 8007c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c84:	e7f7      	b.n	8007c76 <_Balloc+0x66>
 8007c86:	bf00      	nop
 8007c88:	08009501 	.word	0x08009501
 8007c8c:	08009584 	.word	0x08009584

08007c90 <_Bfree>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b976      	cbnz	r6, 8007cb8 <_Bfree+0x28>
 8007c9a:	2010      	movs	r0, #16
 8007c9c:	f7ff ffa2 	bl	8007be4 <malloc>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ca4:	b920      	cbnz	r0, 8007cb0 <_Bfree+0x20>
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_Bfree+0x3c>)
 8007ca8:	4809      	ldr	r0, [pc, #36]	; (8007cd0 <_Bfree+0x40>)
 8007caa:	218a      	movs	r1, #138	; 0x8a
 8007cac:	f000 fd96 	bl	80087dc <__assert_func>
 8007cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cb4:	6006      	str	r6, [r0, #0]
 8007cb6:	60c6      	str	r6, [r0, #12]
 8007cb8:	b13c      	cbz	r4, 8007cca <_Bfree+0x3a>
 8007cba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cbc:	6862      	ldr	r2, [r4, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cc4:	6021      	str	r1, [r4, #0]
 8007cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	08009501 	.word	0x08009501
 8007cd0:	08009584 	.word	0x08009584

08007cd4 <__multadd>:
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	690d      	ldr	r5, [r1, #16]
 8007cda:	4607      	mov	r7, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	461e      	mov	r6, r3
 8007ce0:	f101 0c14 	add.w	ip, r1, #20
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8007cea:	b299      	uxth	r1, r3
 8007cec:	fb02 6101 	mla	r1, r2, r1, r6
 8007cf0:	0c1e      	lsrs	r6, r3, #16
 8007cf2:	0c0b      	lsrs	r3, r1, #16
 8007cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8007cf8:	b289      	uxth	r1, r1
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d00:	4285      	cmp	r5, r0
 8007d02:	f84c 1b04 	str.w	r1, [ip], #4
 8007d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d0a:	dcec      	bgt.n	8007ce6 <__multadd+0x12>
 8007d0c:	b30e      	cbz	r6, 8007d52 <__multadd+0x7e>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc19      	bgt.n	8007d48 <__multadd+0x74>
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	4638      	mov	r0, r7
 8007d18:	3101      	adds	r1, #1
 8007d1a:	f7ff ff79 	bl	8007c10 <_Balloc>
 8007d1e:	4680      	mov	r8, r0
 8007d20:	b928      	cbnz	r0, 8007d2e <__multadd+0x5a>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <__multadd+0x84>)
 8007d26:	480d      	ldr	r0, [pc, #52]	; (8007d5c <__multadd+0x88>)
 8007d28:	21b5      	movs	r1, #181	; 0xb5
 8007d2a:	f000 fd57 	bl	80087dc <__assert_func>
 8007d2e:	6922      	ldr	r2, [r4, #16]
 8007d30:	3202      	adds	r2, #2
 8007d32:	f104 010c 	add.w	r1, r4, #12
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	300c      	adds	r0, #12
 8007d3a:	f7ff ff5b 	bl	8007bf4 <memcpy>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ffa5 	bl	8007c90 <_Bfree>
 8007d46:	4644      	mov	r4, r8
 8007d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	615e      	str	r6, [r3, #20]
 8007d50:	6125      	str	r5, [r4, #16]
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	08009573 	.word	0x08009573
 8007d5c:	08009584 	.word	0x08009584

08007d60 <__hi0bits>:
 8007d60:	0c03      	lsrs	r3, r0, #16
 8007d62:	041b      	lsls	r3, r3, #16
 8007d64:	b9d3      	cbnz	r3, 8007d9c <__hi0bits+0x3c>
 8007d66:	0400      	lsls	r0, r0, #16
 8007d68:	2310      	movs	r3, #16
 8007d6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d6e:	bf04      	itt	eq
 8007d70:	0200      	lsleq	r0, r0, #8
 8007d72:	3308      	addeq	r3, #8
 8007d74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d78:	bf04      	itt	eq
 8007d7a:	0100      	lsleq	r0, r0, #4
 8007d7c:	3304      	addeq	r3, #4
 8007d7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d82:	bf04      	itt	eq
 8007d84:	0080      	lsleq	r0, r0, #2
 8007d86:	3302      	addeq	r3, #2
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	db05      	blt.n	8007d98 <__hi0bits+0x38>
 8007d8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d90:	f103 0301 	add.w	r3, r3, #1
 8007d94:	bf08      	it	eq
 8007d96:	2320      	moveq	r3, #32
 8007d98:	4618      	mov	r0, r3
 8007d9a:	4770      	bx	lr
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e7e4      	b.n	8007d6a <__hi0bits+0xa>

08007da0 <__lo0bits>:
 8007da0:	6803      	ldr	r3, [r0, #0]
 8007da2:	f013 0207 	ands.w	r2, r3, #7
 8007da6:	4601      	mov	r1, r0
 8007da8:	d00b      	beq.n	8007dc2 <__lo0bits+0x22>
 8007daa:	07da      	lsls	r2, r3, #31
 8007dac:	d423      	bmi.n	8007df6 <__lo0bits+0x56>
 8007dae:	0798      	lsls	r0, r3, #30
 8007db0:	bf49      	itett	mi
 8007db2:	085b      	lsrmi	r3, r3, #1
 8007db4:	089b      	lsrpl	r3, r3, #2
 8007db6:	2001      	movmi	r0, #1
 8007db8:	600b      	strmi	r3, [r1, #0]
 8007dba:	bf5c      	itt	pl
 8007dbc:	600b      	strpl	r3, [r1, #0]
 8007dbe:	2002      	movpl	r0, #2
 8007dc0:	4770      	bx	lr
 8007dc2:	b298      	uxth	r0, r3
 8007dc4:	b9a8      	cbnz	r0, 8007df2 <__lo0bits+0x52>
 8007dc6:	0c1b      	lsrs	r3, r3, #16
 8007dc8:	2010      	movs	r0, #16
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	b90a      	cbnz	r2, 8007dd2 <__lo0bits+0x32>
 8007dce:	3008      	adds	r0, #8
 8007dd0:	0a1b      	lsrs	r3, r3, #8
 8007dd2:	071a      	lsls	r2, r3, #28
 8007dd4:	bf04      	itt	eq
 8007dd6:	091b      	lsreq	r3, r3, #4
 8007dd8:	3004      	addeq	r0, #4
 8007dda:	079a      	lsls	r2, r3, #30
 8007ddc:	bf04      	itt	eq
 8007dde:	089b      	lsreq	r3, r3, #2
 8007de0:	3002      	addeq	r0, #2
 8007de2:	07da      	lsls	r2, r3, #31
 8007de4:	d403      	bmi.n	8007dee <__lo0bits+0x4e>
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	f100 0001 	add.w	r0, r0, #1
 8007dec:	d005      	beq.n	8007dfa <__lo0bits+0x5a>
 8007dee:	600b      	str	r3, [r1, #0]
 8007df0:	4770      	bx	lr
 8007df2:	4610      	mov	r0, r2
 8007df4:	e7e9      	b.n	8007dca <__lo0bits+0x2a>
 8007df6:	2000      	movs	r0, #0
 8007df8:	4770      	bx	lr
 8007dfa:	2020      	movs	r0, #32
 8007dfc:	4770      	bx	lr
	...

08007e00 <__i2b>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	460c      	mov	r4, r1
 8007e04:	2101      	movs	r1, #1
 8007e06:	f7ff ff03 	bl	8007c10 <_Balloc>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	b928      	cbnz	r0, 8007e1a <__i2b+0x1a>
 8007e0e:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <__i2b+0x24>)
 8007e10:	4805      	ldr	r0, [pc, #20]	; (8007e28 <__i2b+0x28>)
 8007e12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e16:	f000 fce1 	bl	80087dc <__assert_func>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	6144      	str	r4, [r0, #20]
 8007e1e:	6103      	str	r3, [r0, #16]
 8007e20:	bd10      	pop	{r4, pc}
 8007e22:	bf00      	nop
 8007e24:	08009573 	.word	0x08009573
 8007e28:	08009584 	.word	0x08009584

08007e2c <__multiply>:
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	4691      	mov	r9, r2
 8007e32:	690a      	ldr	r2, [r1, #16]
 8007e34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	bfb8      	it	lt
 8007e3c:	460b      	movlt	r3, r1
 8007e3e:	460c      	mov	r4, r1
 8007e40:	bfbc      	itt	lt
 8007e42:	464c      	movlt	r4, r9
 8007e44:	4699      	movlt	r9, r3
 8007e46:	6927      	ldr	r7, [r4, #16]
 8007e48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	6861      	ldr	r1, [r4, #4]
 8007e50:	eb07 060a 	add.w	r6, r7, sl
 8007e54:	42b3      	cmp	r3, r6
 8007e56:	b085      	sub	sp, #20
 8007e58:	bfb8      	it	lt
 8007e5a:	3101      	addlt	r1, #1
 8007e5c:	f7ff fed8 	bl	8007c10 <_Balloc>
 8007e60:	b930      	cbnz	r0, 8007e70 <__multiply+0x44>
 8007e62:	4602      	mov	r2, r0
 8007e64:	4b44      	ldr	r3, [pc, #272]	; (8007f78 <__multiply+0x14c>)
 8007e66:	4845      	ldr	r0, [pc, #276]	; (8007f7c <__multiply+0x150>)
 8007e68:	f240 115d 	movw	r1, #349	; 0x15d
 8007e6c:	f000 fcb6 	bl	80087dc <__assert_func>
 8007e70:	f100 0514 	add.w	r5, r0, #20
 8007e74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e78:	462b      	mov	r3, r5
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4543      	cmp	r3, r8
 8007e7e:	d321      	bcc.n	8007ec4 <__multiply+0x98>
 8007e80:	f104 0314 	add.w	r3, r4, #20
 8007e84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e88:	f109 0314 	add.w	r3, r9, #20
 8007e8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e90:	9202      	str	r2, [sp, #8]
 8007e92:	1b3a      	subs	r2, r7, r4
 8007e94:	3a15      	subs	r2, #21
 8007e96:	f022 0203 	bic.w	r2, r2, #3
 8007e9a:	3204      	adds	r2, #4
 8007e9c:	f104 0115 	add.w	r1, r4, #21
 8007ea0:	428f      	cmp	r7, r1
 8007ea2:	bf38      	it	cc
 8007ea4:	2204      	movcc	r2, #4
 8007ea6:	9201      	str	r2, [sp, #4]
 8007ea8:	9a02      	ldr	r2, [sp, #8]
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d80c      	bhi.n	8007eca <__multiply+0x9e>
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	dd03      	ble.n	8007ebc <__multiply+0x90>
 8007eb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d05a      	beq.n	8007f72 <__multiply+0x146>
 8007ebc:	6106      	str	r6, [r0, #16]
 8007ebe:	b005      	add	sp, #20
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	f843 2b04 	str.w	r2, [r3], #4
 8007ec8:	e7d8      	b.n	8007e7c <__multiply+0x50>
 8007eca:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ece:	f1ba 0f00 	cmp.w	sl, #0
 8007ed2:	d024      	beq.n	8007f1e <__multiply+0xf2>
 8007ed4:	f104 0e14 	add.w	lr, r4, #20
 8007ed8:	46a9      	mov	r9, r5
 8007eda:	f04f 0c00 	mov.w	ip, #0
 8007ede:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ee2:	f8d9 1000 	ldr.w	r1, [r9]
 8007ee6:	fa1f fb82 	uxth.w	fp, r2
 8007eea:	b289      	uxth	r1, r1
 8007eec:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ef0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ef8:	4461      	add	r1, ip
 8007efa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007efe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f06:	b289      	uxth	r1, r1
 8007f08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f0c:	4577      	cmp	r7, lr
 8007f0e:	f849 1b04 	str.w	r1, [r9], #4
 8007f12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f16:	d8e2      	bhi.n	8007ede <__multiply+0xb2>
 8007f18:	9a01      	ldr	r2, [sp, #4]
 8007f1a:	f845 c002 	str.w	ip, [r5, r2]
 8007f1e:	9a03      	ldr	r2, [sp, #12]
 8007f20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f24:	3304      	adds	r3, #4
 8007f26:	f1b9 0f00 	cmp.w	r9, #0
 8007f2a:	d020      	beq.n	8007f6e <__multiply+0x142>
 8007f2c:	6829      	ldr	r1, [r5, #0]
 8007f2e:	f104 0c14 	add.w	ip, r4, #20
 8007f32:	46ae      	mov	lr, r5
 8007f34:	f04f 0a00 	mov.w	sl, #0
 8007f38:	f8bc b000 	ldrh.w	fp, [ip]
 8007f3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f40:	fb09 220b 	mla	r2, r9, fp, r2
 8007f44:	4492      	add	sl, r2
 8007f46:	b289      	uxth	r1, r1
 8007f48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f4c:	f84e 1b04 	str.w	r1, [lr], #4
 8007f50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f54:	f8be 1000 	ldrh.w	r1, [lr]
 8007f58:	0c12      	lsrs	r2, r2, #16
 8007f5a:	fb09 1102 	mla	r1, r9, r2, r1
 8007f5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f62:	4567      	cmp	r7, ip
 8007f64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f68:	d8e6      	bhi.n	8007f38 <__multiply+0x10c>
 8007f6a:	9a01      	ldr	r2, [sp, #4]
 8007f6c:	50a9      	str	r1, [r5, r2]
 8007f6e:	3504      	adds	r5, #4
 8007f70:	e79a      	b.n	8007ea8 <__multiply+0x7c>
 8007f72:	3e01      	subs	r6, #1
 8007f74:	e79c      	b.n	8007eb0 <__multiply+0x84>
 8007f76:	bf00      	nop
 8007f78:	08009573 	.word	0x08009573
 8007f7c:	08009584 	.word	0x08009584

08007f80 <__pow5mult>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	4615      	mov	r5, r2
 8007f86:	f012 0203 	ands.w	r2, r2, #3
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
 8007f8e:	d007      	beq.n	8007fa0 <__pow5mult+0x20>
 8007f90:	4c25      	ldr	r4, [pc, #148]	; (8008028 <__pow5mult+0xa8>)
 8007f92:	3a01      	subs	r2, #1
 8007f94:	2300      	movs	r3, #0
 8007f96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f9a:	f7ff fe9b 	bl	8007cd4 <__multadd>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	10ad      	asrs	r5, r5, #2
 8007fa2:	d03d      	beq.n	8008020 <__pow5mult+0xa0>
 8007fa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fa6:	b97c      	cbnz	r4, 8007fc8 <__pow5mult+0x48>
 8007fa8:	2010      	movs	r0, #16
 8007faa:	f7ff fe1b 	bl	8007be4 <malloc>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fb2:	b928      	cbnz	r0, 8007fc0 <__pow5mult+0x40>
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	; (800802c <__pow5mult+0xac>)
 8007fb6:	481e      	ldr	r0, [pc, #120]	; (8008030 <__pow5mult+0xb0>)
 8007fb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fbc:	f000 fc0e 	bl	80087dc <__assert_func>
 8007fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fc4:	6004      	str	r4, [r0, #0]
 8007fc6:	60c4      	str	r4, [r0, #12]
 8007fc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fd0:	b94c      	cbnz	r4, 8007fe6 <__pow5mult+0x66>
 8007fd2:	f240 2171 	movw	r1, #625	; 0x271
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7ff ff12 	bl	8007e00 <__i2b>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	f04f 0900 	mov.w	r9, #0
 8007fea:	07eb      	lsls	r3, r5, #31
 8007fec:	d50a      	bpl.n	8008004 <__pow5mult+0x84>
 8007fee:	4639      	mov	r1, r7
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff ff1a 	bl	8007e2c <__multiply>
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	4680      	mov	r8, r0
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7ff fe47 	bl	8007c90 <_Bfree>
 8008002:	4647      	mov	r7, r8
 8008004:	106d      	asrs	r5, r5, #1
 8008006:	d00b      	beq.n	8008020 <__pow5mult+0xa0>
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	b938      	cbnz	r0, 800801c <__pow5mult+0x9c>
 800800c:	4622      	mov	r2, r4
 800800e:	4621      	mov	r1, r4
 8008010:	4630      	mov	r0, r6
 8008012:	f7ff ff0b 	bl	8007e2c <__multiply>
 8008016:	6020      	str	r0, [r4, #0]
 8008018:	f8c0 9000 	str.w	r9, [r0]
 800801c:	4604      	mov	r4, r0
 800801e:	e7e4      	b.n	8007fea <__pow5mult+0x6a>
 8008020:	4638      	mov	r0, r7
 8008022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008026:	bf00      	nop
 8008028:	080096d0 	.word	0x080096d0
 800802c:	08009501 	.word	0x08009501
 8008030:	08009584 	.word	0x08009584

08008034 <__lshift>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	6849      	ldr	r1, [r1, #4]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008042:	68a3      	ldr	r3, [r4, #8]
 8008044:	4607      	mov	r7, r0
 8008046:	4691      	mov	r9, r2
 8008048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800804c:	f108 0601 	add.w	r6, r8, #1
 8008050:	42b3      	cmp	r3, r6
 8008052:	db0b      	blt.n	800806c <__lshift+0x38>
 8008054:	4638      	mov	r0, r7
 8008056:	f7ff fddb 	bl	8007c10 <_Balloc>
 800805a:	4605      	mov	r5, r0
 800805c:	b948      	cbnz	r0, 8008072 <__lshift+0x3e>
 800805e:	4602      	mov	r2, r0
 8008060:	4b2a      	ldr	r3, [pc, #168]	; (800810c <__lshift+0xd8>)
 8008062:	482b      	ldr	r0, [pc, #172]	; (8008110 <__lshift+0xdc>)
 8008064:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008068:	f000 fbb8 	bl	80087dc <__assert_func>
 800806c:	3101      	adds	r1, #1
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	e7ee      	b.n	8008050 <__lshift+0x1c>
 8008072:	2300      	movs	r3, #0
 8008074:	f100 0114 	add.w	r1, r0, #20
 8008078:	f100 0210 	add.w	r2, r0, #16
 800807c:	4618      	mov	r0, r3
 800807e:	4553      	cmp	r3, sl
 8008080:	db37      	blt.n	80080f2 <__lshift+0xbe>
 8008082:	6920      	ldr	r0, [r4, #16]
 8008084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008088:	f104 0314 	add.w	r3, r4, #20
 800808c:	f019 091f 	ands.w	r9, r9, #31
 8008090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008094:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008098:	d02f      	beq.n	80080fa <__lshift+0xc6>
 800809a:	f1c9 0e20 	rsb	lr, r9, #32
 800809e:	468a      	mov	sl, r1
 80080a0:	f04f 0c00 	mov.w	ip, #0
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	fa02 f209 	lsl.w	r2, r2, r9
 80080aa:	ea42 020c 	orr.w	r2, r2, ip
 80080ae:	f84a 2b04 	str.w	r2, [sl], #4
 80080b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b6:	4298      	cmp	r0, r3
 80080b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080bc:	d8f2      	bhi.n	80080a4 <__lshift+0x70>
 80080be:	1b03      	subs	r3, r0, r4
 80080c0:	3b15      	subs	r3, #21
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	3304      	adds	r3, #4
 80080c8:	f104 0215 	add.w	r2, r4, #21
 80080cc:	4290      	cmp	r0, r2
 80080ce:	bf38      	it	cc
 80080d0:	2304      	movcc	r3, #4
 80080d2:	f841 c003 	str.w	ip, [r1, r3]
 80080d6:	f1bc 0f00 	cmp.w	ip, #0
 80080da:	d001      	beq.n	80080e0 <__lshift+0xac>
 80080dc:	f108 0602 	add.w	r6, r8, #2
 80080e0:	3e01      	subs	r6, #1
 80080e2:	4638      	mov	r0, r7
 80080e4:	612e      	str	r6, [r5, #16]
 80080e6:	4621      	mov	r1, r4
 80080e8:	f7ff fdd2 	bl	8007c90 <_Bfree>
 80080ec:	4628      	mov	r0, r5
 80080ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080f6:	3301      	adds	r3, #1
 80080f8:	e7c1      	b.n	800807e <__lshift+0x4a>
 80080fa:	3904      	subs	r1, #4
 80080fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008100:	f841 2f04 	str.w	r2, [r1, #4]!
 8008104:	4298      	cmp	r0, r3
 8008106:	d8f9      	bhi.n	80080fc <__lshift+0xc8>
 8008108:	e7ea      	b.n	80080e0 <__lshift+0xac>
 800810a:	bf00      	nop
 800810c:	08009573 	.word	0x08009573
 8008110:	08009584 	.word	0x08009584

08008114 <__mcmp>:
 8008114:	b530      	push	{r4, r5, lr}
 8008116:	6902      	ldr	r2, [r0, #16]
 8008118:	690c      	ldr	r4, [r1, #16]
 800811a:	1b12      	subs	r2, r2, r4
 800811c:	d10e      	bne.n	800813c <__mcmp+0x28>
 800811e:	f100 0314 	add.w	r3, r0, #20
 8008122:	3114      	adds	r1, #20
 8008124:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008128:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800812c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008130:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008134:	42a5      	cmp	r5, r4
 8008136:	d003      	beq.n	8008140 <__mcmp+0x2c>
 8008138:	d305      	bcc.n	8008146 <__mcmp+0x32>
 800813a:	2201      	movs	r2, #1
 800813c:	4610      	mov	r0, r2
 800813e:	bd30      	pop	{r4, r5, pc}
 8008140:	4283      	cmp	r3, r0
 8008142:	d3f3      	bcc.n	800812c <__mcmp+0x18>
 8008144:	e7fa      	b.n	800813c <__mcmp+0x28>
 8008146:	f04f 32ff 	mov.w	r2, #4294967295
 800814a:	e7f7      	b.n	800813c <__mcmp+0x28>

0800814c <__mdiff>:
 800814c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	460c      	mov	r4, r1
 8008152:	4606      	mov	r6, r0
 8008154:	4611      	mov	r1, r2
 8008156:	4620      	mov	r0, r4
 8008158:	4690      	mov	r8, r2
 800815a:	f7ff ffdb 	bl	8008114 <__mcmp>
 800815e:	1e05      	subs	r5, r0, #0
 8008160:	d110      	bne.n	8008184 <__mdiff+0x38>
 8008162:	4629      	mov	r1, r5
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff fd53 	bl	8007c10 <_Balloc>
 800816a:	b930      	cbnz	r0, 800817a <__mdiff+0x2e>
 800816c:	4b3a      	ldr	r3, [pc, #232]	; (8008258 <__mdiff+0x10c>)
 800816e:	4602      	mov	r2, r0
 8008170:	f240 2132 	movw	r1, #562	; 0x232
 8008174:	4839      	ldr	r0, [pc, #228]	; (800825c <__mdiff+0x110>)
 8008176:	f000 fb31 	bl	80087dc <__assert_func>
 800817a:	2301      	movs	r3, #1
 800817c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008184:	bfa4      	itt	ge
 8008186:	4643      	movge	r3, r8
 8008188:	46a0      	movge	r8, r4
 800818a:	4630      	mov	r0, r6
 800818c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008190:	bfa6      	itte	ge
 8008192:	461c      	movge	r4, r3
 8008194:	2500      	movge	r5, #0
 8008196:	2501      	movlt	r5, #1
 8008198:	f7ff fd3a 	bl	8007c10 <_Balloc>
 800819c:	b920      	cbnz	r0, 80081a8 <__mdiff+0x5c>
 800819e:	4b2e      	ldr	r3, [pc, #184]	; (8008258 <__mdiff+0x10c>)
 80081a0:	4602      	mov	r2, r0
 80081a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081a6:	e7e5      	b.n	8008174 <__mdiff+0x28>
 80081a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081ac:	6926      	ldr	r6, [r4, #16]
 80081ae:	60c5      	str	r5, [r0, #12]
 80081b0:	f104 0914 	add.w	r9, r4, #20
 80081b4:	f108 0514 	add.w	r5, r8, #20
 80081b8:	f100 0e14 	add.w	lr, r0, #20
 80081bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081c4:	f108 0210 	add.w	r2, r8, #16
 80081c8:	46f2      	mov	sl, lr
 80081ca:	2100      	movs	r1, #0
 80081cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80081d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081d4:	fa1f f883 	uxth.w	r8, r3
 80081d8:	fa11 f18b 	uxtah	r1, r1, fp
 80081dc:	0c1b      	lsrs	r3, r3, #16
 80081de:	eba1 0808 	sub.w	r8, r1, r8
 80081e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081ea:	fa1f f888 	uxth.w	r8, r8
 80081ee:	1419      	asrs	r1, r3, #16
 80081f0:	454e      	cmp	r6, r9
 80081f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081f6:	f84a 3b04 	str.w	r3, [sl], #4
 80081fa:	d8e7      	bhi.n	80081cc <__mdiff+0x80>
 80081fc:	1b33      	subs	r3, r6, r4
 80081fe:	3b15      	subs	r3, #21
 8008200:	f023 0303 	bic.w	r3, r3, #3
 8008204:	3304      	adds	r3, #4
 8008206:	3415      	adds	r4, #21
 8008208:	42a6      	cmp	r6, r4
 800820a:	bf38      	it	cc
 800820c:	2304      	movcc	r3, #4
 800820e:	441d      	add	r5, r3
 8008210:	4473      	add	r3, lr
 8008212:	469e      	mov	lr, r3
 8008214:	462e      	mov	r6, r5
 8008216:	4566      	cmp	r6, ip
 8008218:	d30e      	bcc.n	8008238 <__mdiff+0xec>
 800821a:	f10c 0203 	add.w	r2, ip, #3
 800821e:	1b52      	subs	r2, r2, r5
 8008220:	f022 0203 	bic.w	r2, r2, #3
 8008224:	3d03      	subs	r5, #3
 8008226:	45ac      	cmp	ip, r5
 8008228:	bf38      	it	cc
 800822a:	2200      	movcc	r2, #0
 800822c:	441a      	add	r2, r3
 800822e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008232:	b17b      	cbz	r3, 8008254 <__mdiff+0x108>
 8008234:	6107      	str	r7, [r0, #16]
 8008236:	e7a3      	b.n	8008180 <__mdiff+0x34>
 8008238:	f856 8b04 	ldr.w	r8, [r6], #4
 800823c:	fa11 f288 	uxtah	r2, r1, r8
 8008240:	1414      	asrs	r4, r2, #16
 8008242:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008246:	b292      	uxth	r2, r2
 8008248:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800824c:	f84e 2b04 	str.w	r2, [lr], #4
 8008250:	1421      	asrs	r1, r4, #16
 8008252:	e7e0      	b.n	8008216 <__mdiff+0xca>
 8008254:	3f01      	subs	r7, #1
 8008256:	e7ea      	b.n	800822e <__mdiff+0xe2>
 8008258:	08009573 	.word	0x08009573
 800825c:	08009584 	.word	0x08009584

08008260 <__d2b>:
 8008260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008264:	4689      	mov	r9, r1
 8008266:	2101      	movs	r1, #1
 8008268:	ec57 6b10 	vmov	r6, r7, d0
 800826c:	4690      	mov	r8, r2
 800826e:	f7ff fccf 	bl	8007c10 <_Balloc>
 8008272:	4604      	mov	r4, r0
 8008274:	b930      	cbnz	r0, 8008284 <__d2b+0x24>
 8008276:	4602      	mov	r2, r0
 8008278:	4b25      	ldr	r3, [pc, #148]	; (8008310 <__d2b+0xb0>)
 800827a:	4826      	ldr	r0, [pc, #152]	; (8008314 <__d2b+0xb4>)
 800827c:	f240 310a 	movw	r1, #778	; 0x30a
 8008280:	f000 faac 	bl	80087dc <__assert_func>
 8008284:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800828c:	bb35      	cbnz	r5, 80082dc <__d2b+0x7c>
 800828e:	2e00      	cmp	r6, #0
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	d028      	beq.n	80082e6 <__d2b+0x86>
 8008294:	4668      	mov	r0, sp
 8008296:	9600      	str	r6, [sp, #0]
 8008298:	f7ff fd82 	bl	8007da0 <__lo0bits>
 800829c:	9900      	ldr	r1, [sp, #0]
 800829e:	b300      	cbz	r0, 80082e2 <__d2b+0x82>
 80082a0:	9a01      	ldr	r2, [sp, #4]
 80082a2:	f1c0 0320 	rsb	r3, r0, #32
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	430b      	orrs	r3, r1
 80082ac:	40c2      	lsrs	r2, r0
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	9201      	str	r2, [sp, #4]
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	61a3      	str	r3, [r4, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bf14      	ite	ne
 80082ba:	2202      	movne	r2, #2
 80082bc:	2201      	moveq	r2, #1
 80082be:	6122      	str	r2, [r4, #16]
 80082c0:	b1d5      	cbz	r5, 80082f8 <__d2b+0x98>
 80082c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082c6:	4405      	add	r5, r0
 80082c8:	f8c9 5000 	str.w	r5, [r9]
 80082cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082d0:	f8c8 0000 	str.w	r0, [r8]
 80082d4:	4620      	mov	r0, r4
 80082d6:	b003      	add	sp, #12
 80082d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082e0:	e7d5      	b.n	800828e <__d2b+0x2e>
 80082e2:	6161      	str	r1, [r4, #20]
 80082e4:	e7e5      	b.n	80082b2 <__d2b+0x52>
 80082e6:	a801      	add	r0, sp, #4
 80082e8:	f7ff fd5a 	bl	8007da0 <__lo0bits>
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	6163      	str	r3, [r4, #20]
 80082f0:	2201      	movs	r2, #1
 80082f2:	6122      	str	r2, [r4, #16]
 80082f4:	3020      	adds	r0, #32
 80082f6:	e7e3      	b.n	80082c0 <__d2b+0x60>
 80082f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008300:	f8c9 0000 	str.w	r0, [r9]
 8008304:	6918      	ldr	r0, [r3, #16]
 8008306:	f7ff fd2b 	bl	8007d60 <__hi0bits>
 800830a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800830e:	e7df      	b.n	80082d0 <__d2b+0x70>
 8008310:	08009573 	.word	0x08009573
 8008314:	08009584 	.word	0x08009584

08008318 <_calloc_r>:
 8008318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831a:	fba1 2402 	umull	r2, r4, r1, r2
 800831e:	b94c      	cbnz	r4, 8008334 <_calloc_r+0x1c>
 8008320:	4611      	mov	r1, r2
 8008322:	9201      	str	r2, [sp, #4]
 8008324:	f000 f87a 	bl	800841c <_malloc_r>
 8008328:	9a01      	ldr	r2, [sp, #4]
 800832a:	4605      	mov	r5, r0
 800832c:	b930      	cbnz	r0, 800833c <_calloc_r+0x24>
 800832e:	4628      	mov	r0, r5
 8008330:	b003      	add	sp, #12
 8008332:	bd30      	pop	{r4, r5, pc}
 8008334:	220c      	movs	r2, #12
 8008336:	6002      	str	r2, [r0, #0]
 8008338:	2500      	movs	r5, #0
 800833a:	e7f8      	b.n	800832e <_calloc_r+0x16>
 800833c:	4621      	mov	r1, r4
 800833e:	f7fe f93f 	bl	80065c0 <memset>
 8008342:	e7f4      	b.n	800832e <_calloc_r+0x16>

08008344 <_free_r>:
 8008344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008346:	2900      	cmp	r1, #0
 8008348:	d044      	beq.n	80083d4 <_free_r+0x90>
 800834a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800834e:	9001      	str	r0, [sp, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f1a1 0404 	sub.w	r4, r1, #4
 8008356:	bfb8      	it	lt
 8008358:	18e4      	addlt	r4, r4, r3
 800835a:	f000 fa9b 	bl	8008894 <__malloc_lock>
 800835e:	4a1e      	ldr	r2, [pc, #120]	; (80083d8 <_free_r+0x94>)
 8008360:	9801      	ldr	r0, [sp, #4]
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	b933      	cbnz	r3, 8008374 <_free_r+0x30>
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	6014      	str	r4, [r2, #0]
 800836a:	b003      	add	sp, #12
 800836c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008370:	f000 ba96 	b.w	80088a0 <__malloc_unlock>
 8008374:	42a3      	cmp	r3, r4
 8008376:	d908      	bls.n	800838a <_free_r+0x46>
 8008378:	6825      	ldr	r5, [r4, #0]
 800837a:	1961      	adds	r1, r4, r5
 800837c:	428b      	cmp	r3, r1
 800837e:	bf01      	itttt	eq
 8008380:	6819      	ldreq	r1, [r3, #0]
 8008382:	685b      	ldreq	r3, [r3, #4]
 8008384:	1949      	addeq	r1, r1, r5
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	e7ed      	b.n	8008366 <_free_r+0x22>
 800838a:	461a      	mov	r2, r3
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	b10b      	cbz	r3, 8008394 <_free_r+0x50>
 8008390:	42a3      	cmp	r3, r4
 8008392:	d9fa      	bls.n	800838a <_free_r+0x46>
 8008394:	6811      	ldr	r1, [r2, #0]
 8008396:	1855      	adds	r5, r2, r1
 8008398:	42a5      	cmp	r5, r4
 800839a:	d10b      	bne.n	80083b4 <_free_r+0x70>
 800839c:	6824      	ldr	r4, [r4, #0]
 800839e:	4421      	add	r1, r4
 80083a0:	1854      	adds	r4, r2, r1
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	6011      	str	r1, [r2, #0]
 80083a6:	d1e0      	bne.n	800836a <_free_r+0x26>
 80083a8:	681c      	ldr	r4, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	6053      	str	r3, [r2, #4]
 80083ae:	4421      	add	r1, r4
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	e7da      	b.n	800836a <_free_r+0x26>
 80083b4:	d902      	bls.n	80083bc <_free_r+0x78>
 80083b6:	230c      	movs	r3, #12
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	e7d6      	b.n	800836a <_free_r+0x26>
 80083bc:	6825      	ldr	r5, [r4, #0]
 80083be:	1961      	adds	r1, r4, r5
 80083c0:	428b      	cmp	r3, r1
 80083c2:	bf04      	itt	eq
 80083c4:	6819      	ldreq	r1, [r3, #0]
 80083c6:	685b      	ldreq	r3, [r3, #4]
 80083c8:	6063      	str	r3, [r4, #4]
 80083ca:	bf04      	itt	eq
 80083cc:	1949      	addeq	r1, r1, r5
 80083ce:	6021      	streq	r1, [r4, #0]
 80083d0:	6054      	str	r4, [r2, #4]
 80083d2:	e7ca      	b.n	800836a <_free_r+0x26>
 80083d4:	b003      	add	sp, #12
 80083d6:	bd30      	pop	{r4, r5, pc}
 80083d8:	200005f4 	.word	0x200005f4

080083dc <sbrk_aligned>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4e0e      	ldr	r6, [pc, #56]	; (8008418 <sbrk_aligned+0x3c>)
 80083e0:	460c      	mov	r4, r1
 80083e2:	6831      	ldr	r1, [r6, #0]
 80083e4:	4605      	mov	r5, r0
 80083e6:	b911      	cbnz	r1, 80083ee <sbrk_aligned+0x12>
 80083e8:	f000 f9e8 	bl	80087bc <_sbrk_r>
 80083ec:	6030      	str	r0, [r6, #0]
 80083ee:	4621      	mov	r1, r4
 80083f0:	4628      	mov	r0, r5
 80083f2:	f000 f9e3 	bl	80087bc <_sbrk_r>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	d00a      	beq.n	8008410 <sbrk_aligned+0x34>
 80083fa:	1cc4      	adds	r4, r0, #3
 80083fc:	f024 0403 	bic.w	r4, r4, #3
 8008400:	42a0      	cmp	r0, r4
 8008402:	d007      	beq.n	8008414 <sbrk_aligned+0x38>
 8008404:	1a21      	subs	r1, r4, r0
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f9d8 	bl	80087bc <_sbrk_r>
 800840c:	3001      	adds	r0, #1
 800840e:	d101      	bne.n	8008414 <sbrk_aligned+0x38>
 8008410:	f04f 34ff 	mov.w	r4, #4294967295
 8008414:	4620      	mov	r0, r4
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	200005f8 	.word	0x200005f8

0800841c <_malloc_r>:
 800841c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008420:	1ccd      	adds	r5, r1, #3
 8008422:	f025 0503 	bic.w	r5, r5, #3
 8008426:	3508      	adds	r5, #8
 8008428:	2d0c      	cmp	r5, #12
 800842a:	bf38      	it	cc
 800842c:	250c      	movcc	r5, #12
 800842e:	2d00      	cmp	r5, #0
 8008430:	4607      	mov	r7, r0
 8008432:	db01      	blt.n	8008438 <_malloc_r+0x1c>
 8008434:	42a9      	cmp	r1, r5
 8008436:	d905      	bls.n	8008444 <_malloc_r+0x28>
 8008438:	230c      	movs	r3, #12
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	2600      	movs	r6, #0
 800843e:	4630      	mov	r0, r6
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	4e2e      	ldr	r6, [pc, #184]	; (8008500 <_malloc_r+0xe4>)
 8008446:	f000 fa25 	bl	8008894 <__malloc_lock>
 800844a:	6833      	ldr	r3, [r6, #0]
 800844c:	461c      	mov	r4, r3
 800844e:	bb34      	cbnz	r4, 800849e <_malloc_r+0x82>
 8008450:	4629      	mov	r1, r5
 8008452:	4638      	mov	r0, r7
 8008454:	f7ff ffc2 	bl	80083dc <sbrk_aligned>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	4604      	mov	r4, r0
 800845c:	d14d      	bne.n	80084fa <_malloc_r+0xde>
 800845e:	6834      	ldr	r4, [r6, #0]
 8008460:	4626      	mov	r6, r4
 8008462:	2e00      	cmp	r6, #0
 8008464:	d140      	bne.n	80084e8 <_malloc_r+0xcc>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	4631      	mov	r1, r6
 800846a:	4638      	mov	r0, r7
 800846c:	eb04 0803 	add.w	r8, r4, r3
 8008470:	f000 f9a4 	bl	80087bc <_sbrk_r>
 8008474:	4580      	cmp	r8, r0
 8008476:	d13a      	bne.n	80084ee <_malloc_r+0xd2>
 8008478:	6821      	ldr	r1, [r4, #0]
 800847a:	3503      	adds	r5, #3
 800847c:	1a6d      	subs	r5, r5, r1
 800847e:	f025 0503 	bic.w	r5, r5, #3
 8008482:	3508      	adds	r5, #8
 8008484:	2d0c      	cmp	r5, #12
 8008486:	bf38      	it	cc
 8008488:	250c      	movcc	r5, #12
 800848a:	4629      	mov	r1, r5
 800848c:	4638      	mov	r0, r7
 800848e:	f7ff ffa5 	bl	80083dc <sbrk_aligned>
 8008492:	3001      	adds	r0, #1
 8008494:	d02b      	beq.n	80084ee <_malloc_r+0xd2>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	442b      	add	r3, r5
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	e00e      	b.n	80084bc <_malloc_r+0xa0>
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	1b52      	subs	r2, r2, r5
 80084a2:	d41e      	bmi.n	80084e2 <_malloc_r+0xc6>
 80084a4:	2a0b      	cmp	r2, #11
 80084a6:	d916      	bls.n	80084d6 <_malloc_r+0xba>
 80084a8:	1961      	adds	r1, r4, r5
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	6025      	str	r5, [r4, #0]
 80084ae:	bf18      	it	ne
 80084b0:	6059      	strne	r1, [r3, #4]
 80084b2:	6863      	ldr	r3, [r4, #4]
 80084b4:	bf08      	it	eq
 80084b6:	6031      	streq	r1, [r6, #0]
 80084b8:	5162      	str	r2, [r4, r5]
 80084ba:	604b      	str	r3, [r1, #4]
 80084bc:	4638      	mov	r0, r7
 80084be:	f104 060b 	add.w	r6, r4, #11
 80084c2:	f000 f9ed 	bl	80088a0 <__malloc_unlock>
 80084c6:	f026 0607 	bic.w	r6, r6, #7
 80084ca:	1d23      	adds	r3, r4, #4
 80084cc:	1af2      	subs	r2, r6, r3
 80084ce:	d0b6      	beq.n	800843e <_malloc_r+0x22>
 80084d0:	1b9b      	subs	r3, r3, r6
 80084d2:	50a3      	str	r3, [r4, r2]
 80084d4:	e7b3      	b.n	800843e <_malloc_r+0x22>
 80084d6:	6862      	ldr	r2, [r4, #4]
 80084d8:	42a3      	cmp	r3, r4
 80084da:	bf0c      	ite	eq
 80084dc:	6032      	streq	r2, [r6, #0]
 80084de:	605a      	strne	r2, [r3, #4]
 80084e0:	e7ec      	b.n	80084bc <_malloc_r+0xa0>
 80084e2:	4623      	mov	r3, r4
 80084e4:	6864      	ldr	r4, [r4, #4]
 80084e6:	e7b2      	b.n	800844e <_malloc_r+0x32>
 80084e8:	4634      	mov	r4, r6
 80084ea:	6876      	ldr	r6, [r6, #4]
 80084ec:	e7b9      	b.n	8008462 <_malloc_r+0x46>
 80084ee:	230c      	movs	r3, #12
 80084f0:	603b      	str	r3, [r7, #0]
 80084f2:	4638      	mov	r0, r7
 80084f4:	f000 f9d4 	bl	80088a0 <__malloc_unlock>
 80084f8:	e7a1      	b.n	800843e <_malloc_r+0x22>
 80084fa:	6025      	str	r5, [r4, #0]
 80084fc:	e7de      	b.n	80084bc <_malloc_r+0xa0>
 80084fe:	bf00      	nop
 8008500:	200005f4 	.word	0x200005f4

08008504 <__ssputs_r>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	688e      	ldr	r6, [r1, #8]
 800850a:	429e      	cmp	r6, r3
 800850c:	4682      	mov	sl, r0
 800850e:	460c      	mov	r4, r1
 8008510:	4690      	mov	r8, r2
 8008512:	461f      	mov	r7, r3
 8008514:	d838      	bhi.n	8008588 <__ssputs_r+0x84>
 8008516:	898a      	ldrh	r2, [r1, #12]
 8008518:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800851c:	d032      	beq.n	8008584 <__ssputs_r+0x80>
 800851e:	6825      	ldr	r5, [r4, #0]
 8008520:	6909      	ldr	r1, [r1, #16]
 8008522:	eba5 0901 	sub.w	r9, r5, r1
 8008526:	6965      	ldr	r5, [r4, #20]
 8008528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800852c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008530:	3301      	adds	r3, #1
 8008532:	444b      	add	r3, r9
 8008534:	106d      	asrs	r5, r5, #1
 8008536:	429d      	cmp	r5, r3
 8008538:	bf38      	it	cc
 800853a:	461d      	movcc	r5, r3
 800853c:	0553      	lsls	r3, r2, #21
 800853e:	d531      	bpl.n	80085a4 <__ssputs_r+0xa0>
 8008540:	4629      	mov	r1, r5
 8008542:	f7ff ff6b 	bl	800841c <_malloc_r>
 8008546:	4606      	mov	r6, r0
 8008548:	b950      	cbnz	r0, 8008560 <__ssputs_r+0x5c>
 800854a:	230c      	movs	r3, #12
 800854c:	f8ca 3000 	str.w	r3, [sl]
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008556:	81a3      	strh	r3, [r4, #12]
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008560:	6921      	ldr	r1, [r4, #16]
 8008562:	464a      	mov	r2, r9
 8008564:	f7ff fb46 	bl	8007bf4 <memcpy>
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800856e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008572:	81a3      	strh	r3, [r4, #12]
 8008574:	6126      	str	r6, [r4, #16]
 8008576:	6165      	str	r5, [r4, #20]
 8008578:	444e      	add	r6, r9
 800857a:	eba5 0509 	sub.w	r5, r5, r9
 800857e:	6026      	str	r6, [r4, #0]
 8008580:	60a5      	str	r5, [r4, #8]
 8008582:	463e      	mov	r6, r7
 8008584:	42be      	cmp	r6, r7
 8008586:	d900      	bls.n	800858a <__ssputs_r+0x86>
 8008588:	463e      	mov	r6, r7
 800858a:	6820      	ldr	r0, [r4, #0]
 800858c:	4632      	mov	r2, r6
 800858e:	4641      	mov	r1, r8
 8008590:	f000 f966 	bl	8008860 <memmove>
 8008594:	68a3      	ldr	r3, [r4, #8]
 8008596:	1b9b      	subs	r3, r3, r6
 8008598:	60a3      	str	r3, [r4, #8]
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	4433      	add	r3, r6
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	2000      	movs	r0, #0
 80085a2:	e7db      	b.n	800855c <__ssputs_r+0x58>
 80085a4:	462a      	mov	r2, r5
 80085a6:	f000 f981 	bl	80088ac <_realloc_r>
 80085aa:	4606      	mov	r6, r0
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d1e1      	bne.n	8008574 <__ssputs_r+0x70>
 80085b0:	6921      	ldr	r1, [r4, #16]
 80085b2:	4650      	mov	r0, sl
 80085b4:	f7ff fec6 	bl	8008344 <_free_r>
 80085b8:	e7c7      	b.n	800854a <__ssputs_r+0x46>
	...

080085bc <_svfiprintf_r>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	4698      	mov	r8, r3
 80085c2:	898b      	ldrh	r3, [r1, #12]
 80085c4:	061b      	lsls	r3, r3, #24
 80085c6:	b09d      	sub	sp, #116	; 0x74
 80085c8:	4607      	mov	r7, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	4614      	mov	r4, r2
 80085ce:	d50e      	bpl.n	80085ee <_svfiprintf_r+0x32>
 80085d0:	690b      	ldr	r3, [r1, #16]
 80085d2:	b963      	cbnz	r3, 80085ee <_svfiprintf_r+0x32>
 80085d4:	2140      	movs	r1, #64	; 0x40
 80085d6:	f7ff ff21 	bl	800841c <_malloc_r>
 80085da:	6028      	str	r0, [r5, #0]
 80085dc:	6128      	str	r0, [r5, #16]
 80085de:	b920      	cbnz	r0, 80085ea <_svfiprintf_r+0x2e>
 80085e0:	230c      	movs	r3, #12
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	e0d1      	b.n	800878e <_svfiprintf_r+0x1d2>
 80085ea:	2340      	movs	r3, #64	; 0x40
 80085ec:	616b      	str	r3, [r5, #20]
 80085ee:	2300      	movs	r3, #0
 80085f0:	9309      	str	r3, [sp, #36]	; 0x24
 80085f2:	2320      	movs	r3, #32
 80085f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80085fc:	2330      	movs	r3, #48	; 0x30
 80085fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087a8 <_svfiprintf_r+0x1ec>
 8008602:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008606:	f04f 0901 	mov.w	r9, #1
 800860a:	4623      	mov	r3, r4
 800860c:	469a      	mov	sl, r3
 800860e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008612:	b10a      	cbz	r2, 8008618 <_svfiprintf_r+0x5c>
 8008614:	2a25      	cmp	r2, #37	; 0x25
 8008616:	d1f9      	bne.n	800860c <_svfiprintf_r+0x50>
 8008618:	ebba 0b04 	subs.w	fp, sl, r4
 800861c:	d00b      	beq.n	8008636 <_svfiprintf_r+0x7a>
 800861e:	465b      	mov	r3, fp
 8008620:	4622      	mov	r2, r4
 8008622:	4629      	mov	r1, r5
 8008624:	4638      	mov	r0, r7
 8008626:	f7ff ff6d 	bl	8008504 <__ssputs_r>
 800862a:	3001      	adds	r0, #1
 800862c:	f000 80aa 	beq.w	8008784 <_svfiprintf_r+0x1c8>
 8008630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008632:	445a      	add	r2, fp
 8008634:	9209      	str	r2, [sp, #36]	; 0x24
 8008636:	f89a 3000 	ldrb.w	r3, [sl]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 80a2 	beq.w	8008784 <_svfiprintf_r+0x1c8>
 8008640:	2300      	movs	r3, #0
 8008642:	f04f 32ff 	mov.w	r2, #4294967295
 8008646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800864a:	f10a 0a01 	add.w	sl, sl, #1
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	9307      	str	r3, [sp, #28]
 8008652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008656:	931a      	str	r3, [sp, #104]	; 0x68
 8008658:	4654      	mov	r4, sl
 800865a:	2205      	movs	r2, #5
 800865c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008660:	4851      	ldr	r0, [pc, #324]	; (80087a8 <_svfiprintf_r+0x1ec>)
 8008662:	f7f7 fd95 	bl	8000190 <memchr>
 8008666:	9a04      	ldr	r2, [sp, #16]
 8008668:	b9d8      	cbnz	r0, 80086a2 <_svfiprintf_r+0xe6>
 800866a:	06d0      	lsls	r0, r2, #27
 800866c:	bf44      	itt	mi
 800866e:	2320      	movmi	r3, #32
 8008670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008674:	0711      	lsls	r1, r2, #28
 8008676:	bf44      	itt	mi
 8008678:	232b      	movmi	r3, #43	; 0x2b
 800867a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800867e:	f89a 3000 	ldrb.w	r3, [sl]
 8008682:	2b2a      	cmp	r3, #42	; 0x2a
 8008684:	d015      	beq.n	80086b2 <_svfiprintf_r+0xf6>
 8008686:	9a07      	ldr	r2, [sp, #28]
 8008688:	4654      	mov	r4, sl
 800868a:	2000      	movs	r0, #0
 800868c:	f04f 0c0a 	mov.w	ip, #10
 8008690:	4621      	mov	r1, r4
 8008692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008696:	3b30      	subs	r3, #48	; 0x30
 8008698:	2b09      	cmp	r3, #9
 800869a:	d94e      	bls.n	800873a <_svfiprintf_r+0x17e>
 800869c:	b1b0      	cbz	r0, 80086cc <_svfiprintf_r+0x110>
 800869e:	9207      	str	r2, [sp, #28]
 80086a0:	e014      	b.n	80086cc <_svfiprintf_r+0x110>
 80086a2:	eba0 0308 	sub.w	r3, r0, r8
 80086a6:	fa09 f303 	lsl.w	r3, r9, r3
 80086aa:	4313      	orrs	r3, r2
 80086ac:	9304      	str	r3, [sp, #16]
 80086ae:	46a2      	mov	sl, r4
 80086b0:	e7d2      	b.n	8008658 <_svfiprintf_r+0x9c>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	1d19      	adds	r1, r3, #4
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	9103      	str	r1, [sp, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bfbb      	ittet	lt
 80086be:	425b      	neglt	r3, r3
 80086c0:	f042 0202 	orrlt.w	r2, r2, #2
 80086c4:	9307      	strge	r3, [sp, #28]
 80086c6:	9307      	strlt	r3, [sp, #28]
 80086c8:	bfb8      	it	lt
 80086ca:	9204      	strlt	r2, [sp, #16]
 80086cc:	7823      	ldrb	r3, [r4, #0]
 80086ce:	2b2e      	cmp	r3, #46	; 0x2e
 80086d0:	d10c      	bne.n	80086ec <_svfiprintf_r+0x130>
 80086d2:	7863      	ldrb	r3, [r4, #1]
 80086d4:	2b2a      	cmp	r3, #42	; 0x2a
 80086d6:	d135      	bne.n	8008744 <_svfiprintf_r+0x188>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	1d1a      	adds	r2, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	9203      	str	r2, [sp, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfb8      	it	lt
 80086e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80086e8:	3402      	adds	r4, #2
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087b8 <_svfiprintf_r+0x1fc>
 80086f0:	7821      	ldrb	r1, [r4, #0]
 80086f2:	2203      	movs	r2, #3
 80086f4:	4650      	mov	r0, sl
 80086f6:	f7f7 fd4b 	bl	8000190 <memchr>
 80086fa:	b140      	cbz	r0, 800870e <_svfiprintf_r+0x152>
 80086fc:	2340      	movs	r3, #64	; 0x40
 80086fe:	eba0 000a 	sub.w	r0, r0, sl
 8008702:	fa03 f000 	lsl.w	r0, r3, r0
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	4303      	orrs	r3, r0
 800870a:	3401      	adds	r4, #1
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008712:	4826      	ldr	r0, [pc, #152]	; (80087ac <_svfiprintf_r+0x1f0>)
 8008714:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008718:	2206      	movs	r2, #6
 800871a:	f7f7 fd39 	bl	8000190 <memchr>
 800871e:	2800      	cmp	r0, #0
 8008720:	d038      	beq.n	8008794 <_svfiprintf_r+0x1d8>
 8008722:	4b23      	ldr	r3, [pc, #140]	; (80087b0 <_svfiprintf_r+0x1f4>)
 8008724:	bb1b      	cbnz	r3, 800876e <_svfiprintf_r+0x1b2>
 8008726:	9b03      	ldr	r3, [sp, #12]
 8008728:	3307      	adds	r3, #7
 800872a:	f023 0307 	bic.w	r3, r3, #7
 800872e:	3308      	adds	r3, #8
 8008730:	9303      	str	r3, [sp, #12]
 8008732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008734:	4433      	add	r3, r6
 8008736:	9309      	str	r3, [sp, #36]	; 0x24
 8008738:	e767      	b.n	800860a <_svfiprintf_r+0x4e>
 800873a:	fb0c 3202 	mla	r2, ip, r2, r3
 800873e:	460c      	mov	r4, r1
 8008740:	2001      	movs	r0, #1
 8008742:	e7a5      	b.n	8008690 <_svfiprintf_r+0xd4>
 8008744:	2300      	movs	r3, #0
 8008746:	3401      	adds	r4, #1
 8008748:	9305      	str	r3, [sp, #20]
 800874a:	4619      	mov	r1, r3
 800874c:	f04f 0c0a 	mov.w	ip, #10
 8008750:	4620      	mov	r0, r4
 8008752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008756:	3a30      	subs	r2, #48	; 0x30
 8008758:	2a09      	cmp	r2, #9
 800875a:	d903      	bls.n	8008764 <_svfiprintf_r+0x1a8>
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0c5      	beq.n	80086ec <_svfiprintf_r+0x130>
 8008760:	9105      	str	r1, [sp, #20]
 8008762:	e7c3      	b.n	80086ec <_svfiprintf_r+0x130>
 8008764:	fb0c 2101 	mla	r1, ip, r1, r2
 8008768:	4604      	mov	r4, r0
 800876a:	2301      	movs	r3, #1
 800876c:	e7f0      	b.n	8008750 <_svfiprintf_r+0x194>
 800876e:	ab03      	add	r3, sp, #12
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	462a      	mov	r2, r5
 8008774:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <_svfiprintf_r+0x1f8>)
 8008776:	a904      	add	r1, sp, #16
 8008778:	4638      	mov	r0, r7
 800877a:	f7fd ffc9 	bl	8006710 <_printf_float>
 800877e:	1c42      	adds	r2, r0, #1
 8008780:	4606      	mov	r6, r0
 8008782:	d1d6      	bne.n	8008732 <_svfiprintf_r+0x176>
 8008784:	89ab      	ldrh	r3, [r5, #12]
 8008786:	065b      	lsls	r3, r3, #25
 8008788:	f53f af2c 	bmi.w	80085e4 <_svfiprintf_r+0x28>
 800878c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800878e:	b01d      	add	sp, #116	; 0x74
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	ab03      	add	r3, sp, #12
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	462a      	mov	r2, r5
 800879a:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <_svfiprintf_r+0x1f8>)
 800879c:	a904      	add	r1, sp, #16
 800879e:	4638      	mov	r0, r7
 80087a0:	f7fe fa5a 	bl	8006c58 <_printf_i>
 80087a4:	e7eb      	b.n	800877e <_svfiprintf_r+0x1c2>
 80087a6:	bf00      	nop
 80087a8:	080096dc 	.word	0x080096dc
 80087ac:	080096e6 	.word	0x080096e6
 80087b0:	08006711 	.word	0x08006711
 80087b4:	08008505 	.word	0x08008505
 80087b8:	080096e2 	.word	0x080096e2

080087bc <_sbrk_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d06      	ldr	r5, [pc, #24]	; (80087d8 <_sbrk_r+0x1c>)
 80087c0:	2300      	movs	r3, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	f7f9 f8fe 	bl	80019c8 <_sbrk>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_sbrk_r+0x1a>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_sbrk_r+0x1a>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	200005fc 	.word	0x200005fc

080087dc <__assert_func>:
 80087dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087de:	4614      	mov	r4, r2
 80087e0:	461a      	mov	r2, r3
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <__assert_func+0x2c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4605      	mov	r5, r0
 80087e8:	68d8      	ldr	r0, [r3, #12]
 80087ea:	b14c      	cbz	r4, 8008800 <__assert_func+0x24>
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <__assert_func+0x30>)
 80087ee:	9100      	str	r1, [sp, #0]
 80087f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087f4:	4906      	ldr	r1, [pc, #24]	; (8008810 <__assert_func+0x34>)
 80087f6:	462b      	mov	r3, r5
 80087f8:	f000 f80e 	bl	8008818 <fiprintf>
 80087fc:	f000 faac 	bl	8008d58 <abort>
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <__assert_func+0x38>)
 8008802:	461c      	mov	r4, r3
 8008804:	e7f3      	b.n	80087ee <__assert_func+0x12>
 8008806:	bf00      	nop
 8008808:	20000010 	.word	0x20000010
 800880c:	080096ed 	.word	0x080096ed
 8008810:	080096fa 	.word	0x080096fa
 8008814:	08009728 	.word	0x08009728

08008818 <fiprintf>:
 8008818:	b40e      	push	{r1, r2, r3}
 800881a:	b503      	push	{r0, r1, lr}
 800881c:	4601      	mov	r1, r0
 800881e:	ab03      	add	r3, sp, #12
 8008820:	4805      	ldr	r0, [pc, #20]	; (8008838 <fiprintf+0x20>)
 8008822:	f853 2b04 	ldr.w	r2, [r3], #4
 8008826:	6800      	ldr	r0, [r0, #0]
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	f000 f897 	bl	800895c <_vfiprintf_r>
 800882e:	b002      	add	sp, #8
 8008830:	f85d eb04 	ldr.w	lr, [sp], #4
 8008834:	b003      	add	sp, #12
 8008836:	4770      	bx	lr
 8008838:	20000010 	.word	0x20000010

0800883c <__ascii_mbtowc>:
 800883c:	b082      	sub	sp, #8
 800883e:	b901      	cbnz	r1, 8008842 <__ascii_mbtowc+0x6>
 8008840:	a901      	add	r1, sp, #4
 8008842:	b142      	cbz	r2, 8008856 <__ascii_mbtowc+0x1a>
 8008844:	b14b      	cbz	r3, 800885a <__ascii_mbtowc+0x1e>
 8008846:	7813      	ldrb	r3, [r2, #0]
 8008848:	600b      	str	r3, [r1, #0]
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	1e10      	subs	r0, r2, #0
 800884e:	bf18      	it	ne
 8008850:	2001      	movne	r0, #1
 8008852:	b002      	add	sp, #8
 8008854:	4770      	bx	lr
 8008856:	4610      	mov	r0, r2
 8008858:	e7fb      	b.n	8008852 <__ascii_mbtowc+0x16>
 800885a:	f06f 0001 	mvn.w	r0, #1
 800885e:	e7f8      	b.n	8008852 <__ascii_mbtowc+0x16>

08008860 <memmove>:
 8008860:	4288      	cmp	r0, r1
 8008862:	b510      	push	{r4, lr}
 8008864:	eb01 0402 	add.w	r4, r1, r2
 8008868:	d902      	bls.n	8008870 <memmove+0x10>
 800886a:	4284      	cmp	r4, r0
 800886c:	4623      	mov	r3, r4
 800886e:	d807      	bhi.n	8008880 <memmove+0x20>
 8008870:	1e43      	subs	r3, r0, #1
 8008872:	42a1      	cmp	r1, r4
 8008874:	d008      	beq.n	8008888 <memmove+0x28>
 8008876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800887e:	e7f8      	b.n	8008872 <memmove+0x12>
 8008880:	4402      	add	r2, r0
 8008882:	4601      	mov	r1, r0
 8008884:	428a      	cmp	r2, r1
 8008886:	d100      	bne.n	800888a <memmove+0x2a>
 8008888:	bd10      	pop	{r4, pc}
 800888a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800888e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008892:	e7f7      	b.n	8008884 <memmove+0x24>

08008894 <__malloc_lock>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__malloc_lock+0x8>)
 8008896:	f000 bc1f 	b.w	80090d8 <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20000600 	.word	0x20000600

080088a0 <__malloc_unlock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__malloc_unlock+0x8>)
 80088a2:	f000 bc1a 	b.w	80090da <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000600 	.word	0x20000600

080088ac <_realloc_r>:
 80088ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b0:	4680      	mov	r8, r0
 80088b2:	4614      	mov	r4, r2
 80088b4:	460e      	mov	r6, r1
 80088b6:	b921      	cbnz	r1, 80088c2 <_realloc_r+0x16>
 80088b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	4611      	mov	r1, r2
 80088be:	f7ff bdad 	b.w	800841c <_malloc_r>
 80088c2:	b92a      	cbnz	r2, 80088d0 <_realloc_r+0x24>
 80088c4:	f7ff fd3e 	bl	8008344 <_free_r>
 80088c8:	4625      	mov	r5, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	f000 fc6a 	bl	80091a8 <_malloc_usable_size_r>
 80088d4:	4284      	cmp	r4, r0
 80088d6:	4607      	mov	r7, r0
 80088d8:	d802      	bhi.n	80088e0 <_realloc_r+0x34>
 80088da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088de:	d812      	bhi.n	8008906 <_realloc_r+0x5a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7ff fd9a 	bl	800841c <_malloc_r>
 80088e8:	4605      	mov	r5, r0
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d0ed      	beq.n	80088ca <_realloc_r+0x1e>
 80088ee:	42bc      	cmp	r4, r7
 80088f0:	4622      	mov	r2, r4
 80088f2:	4631      	mov	r1, r6
 80088f4:	bf28      	it	cs
 80088f6:	463a      	movcs	r2, r7
 80088f8:	f7ff f97c 	bl	8007bf4 <memcpy>
 80088fc:	4631      	mov	r1, r6
 80088fe:	4640      	mov	r0, r8
 8008900:	f7ff fd20 	bl	8008344 <_free_r>
 8008904:	e7e1      	b.n	80088ca <_realloc_r+0x1e>
 8008906:	4635      	mov	r5, r6
 8008908:	e7df      	b.n	80088ca <_realloc_r+0x1e>

0800890a <__sfputc_r>:
 800890a:	6893      	ldr	r3, [r2, #8]
 800890c:	3b01      	subs	r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	b410      	push	{r4}
 8008912:	6093      	str	r3, [r2, #8]
 8008914:	da08      	bge.n	8008928 <__sfputc_r+0x1e>
 8008916:	6994      	ldr	r4, [r2, #24]
 8008918:	42a3      	cmp	r3, r4
 800891a:	db01      	blt.n	8008920 <__sfputc_r+0x16>
 800891c:	290a      	cmp	r1, #10
 800891e:	d103      	bne.n	8008928 <__sfputc_r+0x1e>
 8008920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008924:	f000 b94a 	b.w	8008bbc <__swbuf_r>
 8008928:	6813      	ldr	r3, [r2, #0]
 800892a:	1c58      	adds	r0, r3, #1
 800892c:	6010      	str	r0, [r2, #0]
 800892e:	7019      	strb	r1, [r3, #0]
 8008930:	4608      	mov	r0, r1
 8008932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008936:	4770      	bx	lr

08008938 <__sfputs_r>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	4606      	mov	r6, r0
 800893c:	460f      	mov	r7, r1
 800893e:	4614      	mov	r4, r2
 8008940:	18d5      	adds	r5, r2, r3
 8008942:	42ac      	cmp	r4, r5
 8008944:	d101      	bne.n	800894a <__sfputs_r+0x12>
 8008946:	2000      	movs	r0, #0
 8008948:	e007      	b.n	800895a <__sfputs_r+0x22>
 800894a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894e:	463a      	mov	r2, r7
 8008950:	4630      	mov	r0, r6
 8008952:	f7ff ffda 	bl	800890a <__sfputc_r>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	d1f3      	bne.n	8008942 <__sfputs_r+0xa>
 800895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800895c <_vfiprintf_r>:
 800895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	460d      	mov	r5, r1
 8008962:	b09d      	sub	sp, #116	; 0x74
 8008964:	4614      	mov	r4, r2
 8008966:	4698      	mov	r8, r3
 8008968:	4606      	mov	r6, r0
 800896a:	b118      	cbz	r0, 8008974 <_vfiprintf_r+0x18>
 800896c:	6983      	ldr	r3, [r0, #24]
 800896e:	b90b      	cbnz	r3, 8008974 <_vfiprintf_r+0x18>
 8008970:	f000 fb14 	bl	8008f9c <__sinit>
 8008974:	4b89      	ldr	r3, [pc, #548]	; (8008b9c <_vfiprintf_r+0x240>)
 8008976:	429d      	cmp	r5, r3
 8008978:	d11b      	bne.n	80089b2 <_vfiprintf_r+0x56>
 800897a:	6875      	ldr	r5, [r6, #4]
 800897c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800897e:	07d9      	lsls	r1, r3, #31
 8008980:	d405      	bmi.n	800898e <_vfiprintf_r+0x32>
 8008982:	89ab      	ldrh	r3, [r5, #12]
 8008984:	059a      	lsls	r2, r3, #22
 8008986:	d402      	bmi.n	800898e <_vfiprintf_r+0x32>
 8008988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800898a:	f000 fba5 	bl	80090d8 <__retarget_lock_acquire_recursive>
 800898e:	89ab      	ldrh	r3, [r5, #12]
 8008990:	071b      	lsls	r3, r3, #28
 8008992:	d501      	bpl.n	8008998 <_vfiprintf_r+0x3c>
 8008994:	692b      	ldr	r3, [r5, #16]
 8008996:	b9eb      	cbnz	r3, 80089d4 <_vfiprintf_r+0x78>
 8008998:	4629      	mov	r1, r5
 800899a:	4630      	mov	r0, r6
 800899c:	f000 f96e 	bl	8008c7c <__swsetup_r>
 80089a0:	b1c0      	cbz	r0, 80089d4 <_vfiprintf_r+0x78>
 80089a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a4:	07dc      	lsls	r4, r3, #31
 80089a6:	d50e      	bpl.n	80089c6 <_vfiprintf_r+0x6a>
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ac:	b01d      	add	sp, #116	; 0x74
 80089ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b2:	4b7b      	ldr	r3, [pc, #492]	; (8008ba0 <_vfiprintf_r+0x244>)
 80089b4:	429d      	cmp	r5, r3
 80089b6:	d101      	bne.n	80089bc <_vfiprintf_r+0x60>
 80089b8:	68b5      	ldr	r5, [r6, #8]
 80089ba:	e7df      	b.n	800897c <_vfiprintf_r+0x20>
 80089bc:	4b79      	ldr	r3, [pc, #484]	; (8008ba4 <_vfiprintf_r+0x248>)
 80089be:	429d      	cmp	r5, r3
 80089c0:	bf08      	it	eq
 80089c2:	68f5      	ldreq	r5, [r6, #12]
 80089c4:	e7da      	b.n	800897c <_vfiprintf_r+0x20>
 80089c6:	89ab      	ldrh	r3, [r5, #12]
 80089c8:	0598      	lsls	r0, r3, #22
 80089ca:	d4ed      	bmi.n	80089a8 <_vfiprintf_r+0x4c>
 80089cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ce:	f000 fb84 	bl	80090da <__retarget_lock_release_recursive>
 80089d2:	e7e9      	b.n	80089a8 <_vfiprintf_r+0x4c>
 80089d4:	2300      	movs	r3, #0
 80089d6:	9309      	str	r3, [sp, #36]	; 0x24
 80089d8:	2320      	movs	r3, #32
 80089da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089de:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e2:	2330      	movs	r3, #48	; 0x30
 80089e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ba8 <_vfiprintf_r+0x24c>
 80089e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ec:	f04f 0901 	mov.w	r9, #1
 80089f0:	4623      	mov	r3, r4
 80089f2:	469a      	mov	sl, r3
 80089f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f8:	b10a      	cbz	r2, 80089fe <_vfiprintf_r+0xa2>
 80089fa:	2a25      	cmp	r2, #37	; 0x25
 80089fc:	d1f9      	bne.n	80089f2 <_vfiprintf_r+0x96>
 80089fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008a02:	d00b      	beq.n	8008a1c <_vfiprintf_r+0xc0>
 8008a04:	465b      	mov	r3, fp
 8008a06:	4622      	mov	r2, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f7ff ff94 	bl	8008938 <__sfputs_r>
 8008a10:	3001      	adds	r0, #1
 8008a12:	f000 80aa 	beq.w	8008b6a <_vfiprintf_r+0x20e>
 8008a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a18:	445a      	add	r2, fp
 8008a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 80a2 	beq.w	8008b6a <_vfiprintf_r+0x20e>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a30:	f10a 0a01 	add.w	sl, sl, #1
 8008a34:	9304      	str	r3, [sp, #16]
 8008a36:	9307      	str	r3, [sp, #28]
 8008a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a3e:	4654      	mov	r4, sl
 8008a40:	2205      	movs	r2, #5
 8008a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a46:	4858      	ldr	r0, [pc, #352]	; (8008ba8 <_vfiprintf_r+0x24c>)
 8008a48:	f7f7 fba2 	bl	8000190 <memchr>
 8008a4c:	9a04      	ldr	r2, [sp, #16]
 8008a4e:	b9d8      	cbnz	r0, 8008a88 <_vfiprintf_r+0x12c>
 8008a50:	06d1      	lsls	r1, r2, #27
 8008a52:	bf44      	itt	mi
 8008a54:	2320      	movmi	r3, #32
 8008a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a5a:	0713      	lsls	r3, r2, #28
 8008a5c:	bf44      	itt	mi
 8008a5e:	232b      	movmi	r3, #43	; 0x2b
 8008a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a64:	f89a 3000 	ldrb.w	r3, [sl]
 8008a68:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6a:	d015      	beq.n	8008a98 <_vfiprintf_r+0x13c>
 8008a6c:	9a07      	ldr	r2, [sp, #28]
 8008a6e:	4654      	mov	r4, sl
 8008a70:	2000      	movs	r0, #0
 8008a72:	f04f 0c0a 	mov.w	ip, #10
 8008a76:	4621      	mov	r1, r4
 8008a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a7c:	3b30      	subs	r3, #48	; 0x30
 8008a7e:	2b09      	cmp	r3, #9
 8008a80:	d94e      	bls.n	8008b20 <_vfiprintf_r+0x1c4>
 8008a82:	b1b0      	cbz	r0, 8008ab2 <_vfiprintf_r+0x156>
 8008a84:	9207      	str	r2, [sp, #28]
 8008a86:	e014      	b.n	8008ab2 <_vfiprintf_r+0x156>
 8008a88:	eba0 0308 	sub.w	r3, r0, r8
 8008a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a90:	4313      	orrs	r3, r2
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	46a2      	mov	sl, r4
 8008a96:	e7d2      	b.n	8008a3e <_vfiprintf_r+0xe2>
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	1d19      	adds	r1, r3, #4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	9103      	str	r1, [sp, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bfbb      	ittet	lt
 8008aa4:	425b      	neglt	r3, r3
 8008aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8008aaa:	9307      	strge	r3, [sp, #28]
 8008aac:	9307      	strlt	r3, [sp, #28]
 8008aae:	bfb8      	it	lt
 8008ab0:	9204      	strlt	r2, [sp, #16]
 8008ab2:	7823      	ldrb	r3, [r4, #0]
 8008ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ab6:	d10c      	bne.n	8008ad2 <_vfiprintf_r+0x176>
 8008ab8:	7863      	ldrb	r3, [r4, #1]
 8008aba:	2b2a      	cmp	r3, #42	; 0x2a
 8008abc:	d135      	bne.n	8008b2a <_vfiprintf_r+0x1ce>
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	9203      	str	r2, [sp, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	bfb8      	it	lt
 8008aca:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ace:	3402      	adds	r4, #2
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bb8 <_vfiprintf_r+0x25c>
 8008ad6:	7821      	ldrb	r1, [r4, #0]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	4650      	mov	r0, sl
 8008adc:	f7f7 fb58 	bl	8000190 <memchr>
 8008ae0:	b140      	cbz	r0, 8008af4 <_vfiprintf_r+0x198>
 8008ae2:	2340      	movs	r3, #64	; 0x40
 8008ae4:	eba0 000a 	sub.w	r0, r0, sl
 8008ae8:	fa03 f000 	lsl.w	r0, r3, r0
 8008aec:	9b04      	ldr	r3, [sp, #16]
 8008aee:	4303      	orrs	r3, r0
 8008af0:	3401      	adds	r4, #1
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af8:	482c      	ldr	r0, [pc, #176]	; (8008bac <_vfiprintf_r+0x250>)
 8008afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008afe:	2206      	movs	r2, #6
 8008b00:	f7f7 fb46 	bl	8000190 <memchr>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d03f      	beq.n	8008b88 <_vfiprintf_r+0x22c>
 8008b08:	4b29      	ldr	r3, [pc, #164]	; (8008bb0 <_vfiprintf_r+0x254>)
 8008b0a:	bb1b      	cbnz	r3, 8008b54 <_vfiprintf_r+0x1f8>
 8008b0c:	9b03      	ldr	r3, [sp, #12]
 8008b0e:	3307      	adds	r3, #7
 8008b10:	f023 0307 	bic.w	r3, r3, #7
 8008b14:	3308      	adds	r3, #8
 8008b16:	9303      	str	r3, [sp, #12]
 8008b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1a:	443b      	add	r3, r7
 8008b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1e:	e767      	b.n	80089f0 <_vfiprintf_r+0x94>
 8008b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b24:	460c      	mov	r4, r1
 8008b26:	2001      	movs	r0, #1
 8008b28:	e7a5      	b.n	8008a76 <_vfiprintf_r+0x11a>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	3401      	adds	r4, #1
 8008b2e:	9305      	str	r3, [sp, #20]
 8008b30:	4619      	mov	r1, r3
 8008b32:	f04f 0c0a 	mov.w	ip, #10
 8008b36:	4620      	mov	r0, r4
 8008b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b3c:	3a30      	subs	r2, #48	; 0x30
 8008b3e:	2a09      	cmp	r2, #9
 8008b40:	d903      	bls.n	8008b4a <_vfiprintf_r+0x1ee>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0c5      	beq.n	8008ad2 <_vfiprintf_r+0x176>
 8008b46:	9105      	str	r1, [sp, #20]
 8008b48:	e7c3      	b.n	8008ad2 <_vfiprintf_r+0x176>
 8008b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b4e:	4604      	mov	r4, r0
 8008b50:	2301      	movs	r3, #1
 8008b52:	e7f0      	b.n	8008b36 <_vfiprintf_r+0x1da>
 8008b54:	ab03      	add	r3, sp, #12
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	462a      	mov	r2, r5
 8008b5a:	4b16      	ldr	r3, [pc, #88]	; (8008bb4 <_vfiprintf_r+0x258>)
 8008b5c:	a904      	add	r1, sp, #16
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7fd fdd6 	bl	8006710 <_printf_float>
 8008b64:	4607      	mov	r7, r0
 8008b66:	1c78      	adds	r0, r7, #1
 8008b68:	d1d6      	bne.n	8008b18 <_vfiprintf_r+0x1bc>
 8008b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b6c:	07d9      	lsls	r1, r3, #31
 8008b6e:	d405      	bmi.n	8008b7c <_vfiprintf_r+0x220>
 8008b70:	89ab      	ldrh	r3, [r5, #12]
 8008b72:	059a      	lsls	r2, r3, #22
 8008b74:	d402      	bmi.n	8008b7c <_vfiprintf_r+0x220>
 8008b76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b78:	f000 faaf 	bl	80090da <__retarget_lock_release_recursive>
 8008b7c:	89ab      	ldrh	r3, [r5, #12]
 8008b7e:	065b      	lsls	r3, r3, #25
 8008b80:	f53f af12 	bmi.w	80089a8 <_vfiprintf_r+0x4c>
 8008b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b86:	e711      	b.n	80089ac <_vfiprintf_r+0x50>
 8008b88:	ab03      	add	r3, sp, #12
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	462a      	mov	r2, r5
 8008b8e:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <_vfiprintf_r+0x258>)
 8008b90:	a904      	add	r1, sp, #16
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7fe f860 	bl	8006c58 <_printf_i>
 8008b98:	e7e4      	b.n	8008b64 <_vfiprintf_r+0x208>
 8008b9a:	bf00      	nop
 8008b9c:	08009854 	.word	0x08009854
 8008ba0:	08009874 	.word	0x08009874
 8008ba4:	08009834 	.word	0x08009834
 8008ba8:	080096dc 	.word	0x080096dc
 8008bac:	080096e6 	.word	0x080096e6
 8008bb0:	08006711 	.word	0x08006711
 8008bb4:	08008939 	.word	0x08008939
 8008bb8:	080096e2 	.word	0x080096e2

08008bbc <__swbuf_r>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	460e      	mov	r6, r1
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	b118      	cbz	r0, 8008bce <__swbuf_r+0x12>
 8008bc6:	6983      	ldr	r3, [r0, #24]
 8008bc8:	b90b      	cbnz	r3, 8008bce <__swbuf_r+0x12>
 8008bca:	f000 f9e7 	bl	8008f9c <__sinit>
 8008bce:	4b21      	ldr	r3, [pc, #132]	; (8008c54 <__swbuf_r+0x98>)
 8008bd0:	429c      	cmp	r4, r3
 8008bd2:	d12b      	bne.n	8008c2c <__swbuf_r+0x70>
 8008bd4:	686c      	ldr	r4, [r5, #4]
 8008bd6:	69a3      	ldr	r3, [r4, #24]
 8008bd8:	60a3      	str	r3, [r4, #8]
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	071a      	lsls	r2, r3, #28
 8008bde:	d52f      	bpl.n	8008c40 <__swbuf_r+0x84>
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	b36b      	cbz	r3, 8008c40 <__swbuf_r+0x84>
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	6820      	ldr	r0, [r4, #0]
 8008be8:	1ac0      	subs	r0, r0, r3
 8008bea:	6963      	ldr	r3, [r4, #20]
 8008bec:	b2f6      	uxtb	r6, r6
 8008bee:	4283      	cmp	r3, r0
 8008bf0:	4637      	mov	r7, r6
 8008bf2:	dc04      	bgt.n	8008bfe <__swbuf_r+0x42>
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 f93c 	bl	8008e74 <_fflush_r>
 8008bfc:	bb30      	cbnz	r0, 8008c4c <__swbuf_r+0x90>
 8008bfe:	68a3      	ldr	r3, [r4, #8]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	60a3      	str	r3, [r4, #8]
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	6022      	str	r2, [r4, #0]
 8008c0a:	701e      	strb	r6, [r3, #0]
 8008c0c:	6963      	ldr	r3, [r4, #20]
 8008c0e:	3001      	adds	r0, #1
 8008c10:	4283      	cmp	r3, r0
 8008c12:	d004      	beq.n	8008c1e <__swbuf_r+0x62>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	07db      	lsls	r3, r3, #31
 8008c18:	d506      	bpl.n	8008c28 <__swbuf_r+0x6c>
 8008c1a:	2e0a      	cmp	r6, #10
 8008c1c:	d104      	bne.n	8008c28 <__swbuf_r+0x6c>
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4628      	mov	r0, r5
 8008c22:	f000 f927 	bl	8008e74 <_fflush_r>
 8008c26:	b988      	cbnz	r0, 8008c4c <__swbuf_r+0x90>
 8008c28:	4638      	mov	r0, r7
 8008c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <__swbuf_r+0x9c>)
 8008c2e:	429c      	cmp	r4, r3
 8008c30:	d101      	bne.n	8008c36 <__swbuf_r+0x7a>
 8008c32:	68ac      	ldr	r4, [r5, #8]
 8008c34:	e7cf      	b.n	8008bd6 <__swbuf_r+0x1a>
 8008c36:	4b09      	ldr	r3, [pc, #36]	; (8008c5c <__swbuf_r+0xa0>)
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	bf08      	it	eq
 8008c3c:	68ec      	ldreq	r4, [r5, #12]
 8008c3e:	e7ca      	b.n	8008bd6 <__swbuf_r+0x1a>
 8008c40:	4621      	mov	r1, r4
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 f81a 	bl	8008c7c <__swsetup_r>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d0cb      	beq.n	8008be4 <__swbuf_r+0x28>
 8008c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8008c50:	e7ea      	b.n	8008c28 <__swbuf_r+0x6c>
 8008c52:	bf00      	nop
 8008c54:	08009854 	.word	0x08009854
 8008c58:	08009874 	.word	0x08009874
 8008c5c:	08009834 	.word	0x08009834

08008c60 <__ascii_wctomb>:
 8008c60:	b149      	cbz	r1, 8008c76 <__ascii_wctomb+0x16>
 8008c62:	2aff      	cmp	r2, #255	; 0xff
 8008c64:	bf85      	ittet	hi
 8008c66:	238a      	movhi	r3, #138	; 0x8a
 8008c68:	6003      	strhi	r3, [r0, #0]
 8008c6a:	700a      	strbls	r2, [r1, #0]
 8008c6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c70:	bf98      	it	ls
 8008c72:	2001      	movls	r0, #1
 8008c74:	4770      	bx	lr
 8008c76:	4608      	mov	r0, r1
 8008c78:	4770      	bx	lr
	...

08008c7c <__swsetup_r>:
 8008c7c:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <__swsetup_r+0xcc>)
 8008c7e:	b570      	push	{r4, r5, r6, lr}
 8008c80:	681d      	ldr	r5, [r3, #0]
 8008c82:	4606      	mov	r6, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	b125      	cbz	r5, 8008c92 <__swsetup_r+0x16>
 8008c88:	69ab      	ldr	r3, [r5, #24]
 8008c8a:	b913      	cbnz	r3, 8008c92 <__swsetup_r+0x16>
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f000 f985 	bl	8008f9c <__sinit>
 8008c92:	4b2e      	ldr	r3, [pc, #184]	; (8008d4c <__swsetup_r+0xd0>)
 8008c94:	429c      	cmp	r4, r3
 8008c96:	d10f      	bne.n	8008cb8 <__swsetup_r+0x3c>
 8008c98:	686c      	ldr	r4, [r5, #4]
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ca0:	0719      	lsls	r1, r3, #28
 8008ca2:	d42c      	bmi.n	8008cfe <__swsetup_r+0x82>
 8008ca4:	06dd      	lsls	r5, r3, #27
 8008ca6:	d411      	bmi.n	8008ccc <__swsetup_r+0x50>
 8008ca8:	2309      	movs	r3, #9
 8008caa:	6033      	str	r3, [r6, #0]
 8008cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb6:	e03e      	b.n	8008d36 <__swsetup_r+0xba>
 8008cb8:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <__swsetup_r+0xd4>)
 8008cba:	429c      	cmp	r4, r3
 8008cbc:	d101      	bne.n	8008cc2 <__swsetup_r+0x46>
 8008cbe:	68ac      	ldr	r4, [r5, #8]
 8008cc0:	e7eb      	b.n	8008c9a <__swsetup_r+0x1e>
 8008cc2:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <__swsetup_r+0xd8>)
 8008cc4:	429c      	cmp	r4, r3
 8008cc6:	bf08      	it	eq
 8008cc8:	68ec      	ldreq	r4, [r5, #12]
 8008cca:	e7e6      	b.n	8008c9a <__swsetup_r+0x1e>
 8008ccc:	0758      	lsls	r0, r3, #29
 8008cce:	d512      	bpl.n	8008cf6 <__swsetup_r+0x7a>
 8008cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cd2:	b141      	cbz	r1, 8008ce6 <__swsetup_r+0x6a>
 8008cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cd8:	4299      	cmp	r1, r3
 8008cda:	d002      	beq.n	8008ce2 <__swsetup_r+0x66>
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7ff fb31 	bl	8008344 <_free_r>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	6063      	str	r3, [r4, #4]
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f043 0308 	orr.w	r3, r3, #8
 8008cfc:	81a3      	strh	r3, [r4, #12]
 8008cfe:	6923      	ldr	r3, [r4, #16]
 8008d00:	b94b      	cbnz	r3, 8008d16 <__swsetup_r+0x9a>
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d0c:	d003      	beq.n	8008d16 <__swsetup_r+0x9a>
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 fa09 	bl	8009128 <__smakebuf_r>
 8008d16:	89a0      	ldrh	r0, [r4, #12]
 8008d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d1c:	f010 0301 	ands.w	r3, r0, #1
 8008d20:	d00a      	beq.n	8008d38 <__swsetup_r+0xbc>
 8008d22:	2300      	movs	r3, #0
 8008d24:	60a3      	str	r3, [r4, #8]
 8008d26:	6963      	ldr	r3, [r4, #20]
 8008d28:	425b      	negs	r3, r3
 8008d2a:	61a3      	str	r3, [r4, #24]
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	b943      	cbnz	r3, 8008d42 <__swsetup_r+0xc6>
 8008d30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d34:	d1ba      	bne.n	8008cac <__swsetup_r+0x30>
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	0781      	lsls	r1, r0, #30
 8008d3a:	bf58      	it	pl
 8008d3c:	6963      	ldrpl	r3, [r4, #20]
 8008d3e:	60a3      	str	r3, [r4, #8]
 8008d40:	e7f4      	b.n	8008d2c <__swsetup_r+0xb0>
 8008d42:	2000      	movs	r0, #0
 8008d44:	e7f7      	b.n	8008d36 <__swsetup_r+0xba>
 8008d46:	bf00      	nop
 8008d48:	20000010 	.word	0x20000010
 8008d4c:	08009854 	.word	0x08009854
 8008d50:	08009874 	.word	0x08009874
 8008d54:	08009834 	.word	0x08009834

08008d58 <abort>:
 8008d58:	b508      	push	{r3, lr}
 8008d5a:	2006      	movs	r0, #6
 8008d5c:	f000 fa54 	bl	8009208 <raise>
 8008d60:	2001      	movs	r0, #1
 8008d62:	f7f8 fdb9 	bl	80018d8 <_exit>
	...

08008d68 <__sflush_r>:
 8008d68:	898a      	ldrh	r2, [r1, #12]
 8008d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6e:	4605      	mov	r5, r0
 8008d70:	0710      	lsls	r0, r2, #28
 8008d72:	460c      	mov	r4, r1
 8008d74:	d458      	bmi.n	8008e28 <__sflush_r+0xc0>
 8008d76:	684b      	ldr	r3, [r1, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dc05      	bgt.n	8008d88 <__sflush_r+0x20>
 8008d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dc02      	bgt.n	8008d88 <__sflush_r+0x20>
 8008d82:	2000      	movs	r0, #0
 8008d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	d0f9      	beq.n	8008d82 <__sflush_r+0x1a>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d94:	682f      	ldr	r7, [r5, #0]
 8008d96:	602b      	str	r3, [r5, #0]
 8008d98:	d032      	beq.n	8008e00 <__sflush_r+0x98>
 8008d9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	075a      	lsls	r2, r3, #29
 8008da0:	d505      	bpl.n	8008dae <__sflush_r+0x46>
 8008da2:	6863      	ldr	r3, [r4, #4]
 8008da4:	1ac0      	subs	r0, r0, r3
 8008da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008da8:	b10b      	cbz	r3, 8008dae <__sflush_r+0x46>
 8008daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dac:	1ac0      	subs	r0, r0, r3
 8008dae:	2300      	movs	r3, #0
 8008db0:	4602      	mov	r2, r0
 8008db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008db4:	6a21      	ldr	r1, [r4, #32]
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b0      	blx	r6
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	d106      	bne.n	8008dce <__sflush_r+0x66>
 8008dc0:	6829      	ldr	r1, [r5, #0]
 8008dc2:	291d      	cmp	r1, #29
 8008dc4:	d82c      	bhi.n	8008e20 <__sflush_r+0xb8>
 8008dc6:	4a2a      	ldr	r2, [pc, #168]	; (8008e70 <__sflush_r+0x108>)
 8008dc8:	40ca      	lsrs	r2, r1
 8008dca:	07d6      	lsls	r6, r2, #31
 8008dcc:	d528      	bpl.n	8008e20 <__sflush_r+0xb8>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	6062      	str	r2, [r4, #4]
 8008dd2:	04d9      	lsls	r1, r3, #19
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	6022      	str	r2, [r4, #0]
 8008dd8:	d504      	bpl.n	8008de4 <__sflush_r+0x7c>
 8008dda:	1c42      	adds	r2, r0, #1
 8008ddc:	d101      	bne.n	8008de2 <__sflush_r+0x7a>
 8008dde:	682b      	ldr	r3, [r5, #0]
 8008de0:	b903      	cbnz	r3, 8008de4 <__sflush_r+0x7c>
 8008de2:	6560      	str	r0, [r4, #84]	; 0x54
 8008de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008de6:	602f      	str	r7, [r5, #0]
 8008de8:	2900      	cmp	r1, #0
 8008dea:	d0ca      	beq.n	8008d82 <__sflush_r+0x1a>
 8008dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df0:	4299      	cmp	r1, r3
 8008df2:	d002      	beq.n	8008dfa <__sflush_r+0x92>
 8008df4:	4628      	mov	r0, r5
 8008df6:	f7ff faa5 	bl	8008344 <_free_r>
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8008dfe:	e7c1      	b.n	8008d84 <__sflush_r+0x1c>
 8008e00:	6a21      	ldr	r1, [r4, #32]
 8008e02:	2301      	movs	r3, #1
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b0      	blx	r6
 8008e08:	1c41      	adds	r1, r0, #1
 8008e0a:	d1c7      	bne.n	8008d9c <__sflush_r+0x34>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0c4      	beq.n	8008d9c <__sflush_r+0x34>
 8008e12:	2b1d      	cmp	r3, #29
 8008e14:	d001      	beq.n	8008e1a <__sflush_r+0xb2>
 8008e16:	2b16      	cmp	r3, #22
 8008e18:	d101      	bne.n	8008e1e <__sflush_r+0xb6>
 8008e1a:	602f      	str	r7, [r5, #0]
 8008e1c:	e7b1      	b.n	8008d82 <__sflush_r+0x1a>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	e7ad      	b.n	8008d84 <__sflush_r+0x1c>
 8008e28:	690f      	ldr	r7, [r1, #16]
 8008e2a:	2f00      	cmp	r7, #0
 8008e2c:	d0a9      	beq.n	8008d82 <__sflush_r+0x1a>
 8008e2e:	0793      	lsls	r3, r2, #30
 8008e30:	680e      	ldr	r6, [r1, #0]
 8008e32:	bf08      	it	eq
 8008e34:	694b      	ldreq	r3, [r1, #20]
 8008e36:	600f      	str	r7, [r1, #0]
 8008e38:	bf18      	it	ne
 8008e3a:	2300      	movne	r3, #0
 8008e3c:	eba6 0807 	sub.w	r8, r6, r7
 8008e40:	608b      	str	r3, [r1, #8]
 8008e42:	f1b8 0f00 	cmp.w	r8, #0
 8008e46:	dd9c      	ble.n	8008d82 <__sflush_r+0x1a>
 8008e48:	6a21      	ldr	r1, [r4, #32]
 8008e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e4c:	4643      	mov	r3, r8
 8008e4e:	463a      	mov	r2, r7
 8008e50:	4628      	mov	r0, r5
 8008e52:	47b0      	blx	r6
 8008e54:	2800      	cmp	r0, #0
 8008e56:	dc06      	bgt.n	8008e66 <__sflush_r+0xfe>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	e78e      	b.n	8008d84 <__sflush_r+0x1c>
 8008e66:	4407      	add	r7, r0
 8008e68:	eba8 0800 	sub.w	r8, r8, r0
 8008e6c:	e7e9      	b.n	8008e42 <__sflush_r+0xda>
 8008e6e:	bf00      	nop
 8008e70:	20400001 	.word	0x20400001

08008e74 <_fflush_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	690b      	ldr	r3, [r1, #16]
 8008e78:	4605      	mov	r5, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	b913      	cbnz	r3, 8008e84 <_fflush_r+0x10>
 8008e7e:	2500      	movs	r5, #0
 8008e80:	4628      	mov	r0, r5
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	b118      	cbz	r0, 8008e8e <_fflush_r+0x1a>
 8008e86:	6983      	ldr	r3, [r0, #24]
 8008e88:	b90b      	cbnz	r3, 8008e8e <_fflush_r+0x1a>
 8008e8a:	f000 f887 	bl	8008f9c <__sinit>
 8008e8e:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <_fflush_r+0x6c>)
 8008e90:	429c      	cmp	r4, r3
 8008e92:	d11b      	bne.n	8008ecc <_fflush_r+0x58>
 8008e94:	686c      	ldr	r4, [r5, #4]
 8008e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0ef      	beq.n	8008e7e <_fflush_r+0xa>
 8008e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ea0:	07d0      	lsls	r0, r2, #31
 8008ea2:	d404      	bmi.n	8008eae <_fflush_r+0x3a>
 8008ea4:	0599      	lsls	r1, r3, #22
 8008ea6:	d402      	bmi.n	8008eae <_fflush_r+0x3a>
 8008ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eaa:	f000 f915 	bl	80090d8 <__retarget_lock_acquire_recursive>
 8008eae:	4628      	mov	r0, r5
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	f7ff ff59 	bl	8008d68 <__sflush_r>
 8008eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eb8:	07da      	lsls	r2, r3, #31
 8008eba:	4605      	mov	r5, r0
 8008ebc:	d4e0      	bmi.n	8008e80 <_fflush_r+0xc>
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	059b      	lsls	r3, r3, #22
 8008ec2:	d4dd      	bmi.n	8008e80 <_fflush_r+0xc>
 8008ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ec6:	f000 f908 	bl	80090da <__retarget_lock_release_recursive>
 8008eca:	e7d9      	b.n	8008e80 <_fflush_r+0xc>
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <_fflush_r+0x70>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d101      	bne.n	8008ed6 <_fflush_r+0x62>
 8008ed2:	68ac      	ldr	r4, [r5, #8]
 8008ed4:	e7df      	b.n	8008e96 <_fflush_r+0x22>
 8008ed6:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <_fflush_r+0x74>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	bf08      	it	eq
 8008edc:	68ec      	ldreq	r4, [r5, #12]
 8008ede:	e7da      	b.n	8008e96 <_fflush_r+0x22>
 8008ee0:	08009854 	.word	0x08009854
 8008ee4:	08009874 	.word	0x08009874
 8008ee8:	08009834 	.word	0x08009834

08008eec <std>:
 8008eec:	2300      	movs	r3, #0
 8008eee:	b510      	push	{r4, lr}
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008efa:	6083      	str	r3, [r0, #8]
 8008efc:	8181      	strh	r1, [r0, #12]
 8008efe:	6643      	str	r3, [r0, #100]	; 0x64
 8008f00:	81c2      	strh	r2, [r0, #14]
 8008f02:	6183      	str	r3, [r0, #24]
 8008f04:	4619      	mov	r1, r3
 8008f06:	2208      	movs	r2, #8
 8008f08:	305c      	adds	r0, #92	; 0x5c
 8008f0a:	f7fd fb59 	bl	80065c0 <memset>
 8008f0e:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <std+0x38>)
 8008f10:	6263      	str	r3, [r4, #36]	; 0x24
 8008f12:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <std+0x3c>)
 8008f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f16:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <std+0x40>)
 8008f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <std+0x44>)
 8008f1c:	6224      	str	r4, [r4, #32]
 8008f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	bf00      	nop
 8008f24:	08009241 	.word	0x08009241
 8008f28:	08009263 	.word	0x08009263
 8008f2c:	0800929b 	.word	0x0800929b
 8008f30:	080092bf 	.word	0x080092bf

08008f34 <_cleanup_r>:
 8008f34:	4901      	ldr	r1, [pc, #4]	; (8008f3c <_cleanup_r+0x8>)
 8008f36:	f000 b8af 	b.w	8009098 <_fwalk_reent>
 8008f3a:	bf00      	nop
 8008f3c:	08008e75 	.word	0x08008e75

08008f40 <__sfmoreglue>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	2268      	movs	r2, #104	; 0x68
 8008f44:	1e4d      	subs	r5, r1, #1
 8008f46:	4355      	muls	r5, r2
 8008f48:	460e      	mov	r6, r1
 8008f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f4e:	f7ff fa65 	bl	800841c <_malloc_r>
 8008f52:	4604      	mov	r4, r0
 8008f54:	b140      	cbz	r0, 8008f68 <__sfmoreglue+0x28>
 8008f56:	2100      	movs	r1, #0
 8008f58:	e9c0 1600 	strd	r1, r6, [r0]
 8008f5c:	300c      	adds	r0, #12
 8008f5e:	60a0      	str	r0, [r4, #8]
 8008f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f64:	f7fd fb2c 	bl	80065c0 <memset>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}

08008f6c <__sfp_lock_acquire>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	; (8008f74 <__sfp_lock_acquire+0x8>)
 8008f6e:	f000 b8b3 	b.w	80090d8 <__retarget_lock_acquire_recursive>
 8008f72:	bf00      	nop
 8008f74:	20000601 	.word	0x20000601

08008f78 <__sfp_lock_release>:
 8008f78:	4801      	ldr	r0, [pc, #4]	; (8008f80 <__sfp_lock_release+0x8>)
 8008f7a:	f000 b8ae 	b.w	80090da <__retarget_lock_release_recursive>
 8008f7e:	bf00      	nop
 8008f80:	20000601 	.word	0x20000601

08008f84 <__sinit_lock_acquire>:
 8008f84:	4801      	ldr	r0, [pc, #4]	; (8008f8c <__sinit_lock_acquire+0x8>)
 8008f86:	f000 b8a7 	b.w	80090d8 <__retarget_lock_acquire_recursive>
 8008f8a:	bf00      	nop
 8008f8c:	20000602 	.word	0x20000602

08008f90 <__sinit_lock_release>:
 8008f90:	4801      	ldr	r0, [pc, #4]	; (8008f98 <__sinit_lock_release+0x8>)
 8008f92:	f000 b8a2 	b.w	80090da <__retarget_lock_release_recursive>
 8008f96:	bf00      	nop
 8008f98:	20000602 	.word	0x20000602

08008f9c <__sinit>:
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	f7ff fff0 	bl	8008f84 <__sinit_lock_acquire>
 8008fa4:	69a3      	ldr	r3, [r4, #24]
 8008fa6:	b11b      	cbz	r3, 8008fb0 <__sinit+0x14>
 8008fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fac:	f7ff bff0 	b.w	8008f90 <__sinit_lock_release>
 8008fb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8008fb6:	4b13      	ldr	r3, [pc, #76]	; (8009004 <__sinit+0x68>)
 8008fb8:	4a13      	ldr	r2, [pc, #76]	; (8009008 <__sinit+0x6c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fbe:	42a3      	cmp	r3, r4
 8008fc0:	bf04      	itt	eq
 8008fc2:	2301      	moveq	r3, #1
 8008fc4:	61a3      	streq	r3, [r4, #24]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 f820 	bl	800900c <__sfp>
 8008fcc:	6060      	str	r0, [r4, #4]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 f81c 	bl	800900c <__sfp>
 8008fd4:	60a0      	str	r0, [r4, #8]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 f818 	bl	800900c <__sfp>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	60e0      	str	r0, [r4, #12]
 8008fe0:	2104      	movs	r1, #4
 8008fe2:	6860      	ldr	r0, [r4, #4]
 8008fe4:	f7ff ff82 	bl	8008eec <std>
 8008fe8:	68a0      	ldr	r0, [r4, #8]
 8008fea:	2201      	movs	r2, #1
 8008fec:	2109      	movs	r1, #9
 8008fee:	f7ff ff7d 	bl	8008eec <std>
 8008ff2:	68e0      	ldr	r0, [r4, #12]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	2112      	movs	r1, #18
 8008ff8:	f7ff ff78 	bl	8008eec <std>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	61a3      	str	r3, [r4, #24]
 8009000:	e7d2      	b.n	8008fa8 <__sinit+0xc>
 8009002:	bf00      	nop
 8009004:	080094bc 	.word	0x080094bc
 8009008:	08008f35 	.word	0x08008f35

0800900c <__sfp>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	4607      	mov	r7, r0
 8009010:	f7ff ffac 	bl	8008f6c <__sfp_lock_acquire>
 8009014:	4b1e      	ldr	r3, [pc, #120]	; (8009090 <__sfp+0x84>)
 8009016:	681e      	ldr	r6, [r3, #0]
 8009018:	69b3      	ldr	r3, [r6, #24]
 800901a:	b913      	cbnz	r3, 8009022 <__sfp+0x16>
 800901c:	4630      	mov	r0, r6
 800901e:	f7ff ffbd 	bl	8008f9c <__sinit>
 8009022:	3648      	adds	r6, #72	; 0x48
 8009024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009028:	3b01      	subs	r3, #1
 800902a:	d503      	bpl.n	8009034 <__sfp+0x28>
 800902c:	6833      	ldr	r3, [r6, #0]
 800902e:	b30b      	cbz	r3, 8009074 <__sfp+0x68>
 8009030:	6836      	ldr	r6, [r6, #0]
 8009032:	e7f7      	b.n	8009024 <__sfp+0x18>
 8009034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009038:	b9d5      	cbnz	r5, 8009070 <__sfp+0x64>
 800903a:	4b16      	ldr	r3, [pc, #88]	; (8009094 <__sfp+0x88>)
 800903c:	60e3      	str	r3, [r4, #12]
 800903e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009042:	6665      	str	r5, [r4, #100]	; 0x64
 8009044:	f000 f847 	bl	80090d6 <__retarget_lock_init_recursive>
 8009048:	f7ff ff96 	bl	8008f78 <__sfp_lock_release>
 800904c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009054:	6025      	str	r5, [r4, #0]
 8009056:	61a5      	str	r5, [r4, #24]
 8009058:	2208      	movs	r2, #8
 800905a:	4629      	mov	r1, r5
 800905c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009060:	f7fd faae 	bl	80065c0 <memset>
 8009064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800906c:	4620      	mov	r0, r4
 800906e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009070:	3468      	adds	r4, #104	; 0x68
 8009072:	e7d9      	b.n	8009028 <__sfp+0x1c>
 8009074:	2104      	movs	r1, #4
 8009076:	4638      	mov	r0, r7
 8009078:	f7ff ff62 	bl	8008f40 <__sfmoreglue>
 800907c:	4604      	mov	r4, r0
 800907e:	6030      	str	r0, [r6, #0]
 8009080:	2800      	cmp	r0, #0
 8009082:	d1d5      	bne.n	8009030 <__sfp+0x24>
 8009084:	f7ff ff78 	bl	8008f78 <__sfp_lock_release>
 8009088:	230c      	movs	r3, #12
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	e7ee      	b.n	800906c <__sfp+0x60>
 800908e:	bf00      	nop
 8009090:	080094bc 	.word	0x080094bc
 8009094:	ffff0001 	.word	0xffff0001

08009098 <_fwalk_reent>:
 8009098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800909c:	4606      	mov	r6, r0
 800909e:	4688      	mov	r8, r1
 80090a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090a4:	2700      	movs	r7, #0
 80090a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090aa:	f1b9 0901 	subs.w	r9, r9, #1
 80090ae:	d505      	bpl.n	80090bc <_fwalk_reent+0x24>
 80090b0:	6824      	ldr	r4, [r4, #0]
 80090b2:	2c00      	cmp	r4, #0
 80090b4:	d1f7      	bne.n	80090a6 <_fwalk_reent+0xe>
 80090b6:	4638      	mov	r0, r7
 80090b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090bc:	89ab      	ldrh	r3, [r5, #12]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d907      	bls.n	80090d2 <_fwalk_reent+0x3a>
 80090c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090c6:	3301      	adds	r3, #1
 80090c8:	d003      	beq.n	80090d2 <_fwalk_reent+0x3a>
 80090ca:	4629      	mov	r1, r5
 80090cc:	4630      	mov	r0, r6
 80090ce:	47c0      	blx	r8
 80090d0:	4307      	orrs	r7, r0
 80090d2:	3568      	adds	r5, #104	; 0x68
 80090d4:	e7e9      	b.n	80090aa <_fwalk_reent+0x12>

080090d6 <__retarget_lock_init_recursive>:
 80090d6:	4770      	bx	lr

080090d8 <__retarget_lock_acquire_recursive>:
 80090d8:	4770      	bx	lr

080090da <__retarget_lock_release_recursive>:
 80090da:	4770      	bx	lr

080090dc <__swhatbuf_r>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	460e      	mov	r6, r1
 80090e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e4:	2900      	cmp	r1, #0
 80090e6:	b096      	sub	sp, #88	; 0x58
 80090e8:	4614      	mov	r4, r2
 80090ea:	461d      	mov	r5, r3
 80090ec:	da08      	bge.n	8009100 <__swhatbuf_r+0x24>
 80090ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	602a      	str	r2, [r5, #0]
 80090f6:	061a      	lsls	r2, r3, #24
 80090f8:	d410      	bmi.n	800911c <__swhatbuf_r+0x40>
 80090fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090fe:	e00e      	b.n	800911e <__swhatbuf_r+0x42>
 8009100:	466a      	mov	r2, sp
 8009102:	f000 f903 	bl	800930c <_fstat_r>
 8009106:	2800      	cmp	r0, #0
 8009108:	dbf1      	blt.n	80090ee <__swhatbuf_r+0x12>
 800910a:	9a01      	ldr	r2, [sp, #4]
 800910c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009114:	425a      	negs	r2, r3
 8009116:	415a      	adcs	r2, r3
 8009118:	602a      	str	r2, [r5, #0]
 800911a:	e7ee      	b.n	80090fa <__swhatbuf_r+0x1e>
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	2000      	movs	r0, #0
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	b016      	add	sp, #88	; 0x58
 8009124:	bd70      	pop	{r4, r5, r6, pc}
	...

08009128 <__smakebuf_r>:
 8009128:	898b      	ldrh	r3, [r1, #12]
 800912a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800912c:	079d      	lsls	r5, r3, #30
 800912e:	4606      	mov	r6, r0
 8009130:	460c      	mov	r4, r1
 8009132:	d507      	bpl.n	8009144 <__smakebuf_r+0x1c>
 8009134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	2301      	movs	r3, #1
 800913e:	6163      	str	r3, [r4, #20]
 8009140:	b002      	add	sp, #8
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	ab01      	add	r3, sp, #4
 8009146:	466a      	mov	r2, sp
 8009148:	f7ff ffc8 	bl	80090dc <__swhatbuf_r>
 800914c:	9900      	ldr	r1, [sp, #0]
 800914e:	4605      	mov	r5, r0
 8009150:	4630      	mov	r0, r6
 8009152:	f7ff f963 	bl	800841c <_malloc_r>
 8009156:	b948      	cbnz	r0, 800916c <__smakebuf_r+0x44>
 8009158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d4ef      	bmi.n	8009140 <__smakebuf_r+0x18>
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	f043 0302 	orr.w	r3, r3, #2
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	e7e3      	b.n	8009134 <__smakebuf_r+0xc>
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <__smakebuf_r+0x7c>)
 800916e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	9b00      	ldr	r3, [sp, #0]
 800917c:	6163      	str	r3, [r4, #20]
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	6120      	str	r0, [r4, #16]
 8009182:	b15b      	cbz	r3, 800919c <__smakebuf_r+0x74>
 8009184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009188:	4630      	mov	r0, r6
 800918a:	f000 f8d1 	bl	8009330 <_isatty_r>
 800918e:	b128      	cbz	r0, 800919c <__smakebuf_r+0x74>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	89a0      	ldrh	r0, [r4, #12]
 800919e:	4305      	orrs	r5, r0
 80091a0:	81a5      	strh	r5, [r4, #12]
 80091a2:	e7cd      	b.n	8009140 <__smakebuf_r+0x18>
 80091a4:	08008f35 	.word	0x08008f35

080091a8 <_malloc_usable_size_r>:
 80091a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ac:	1f18      	subs	r0, r3, #4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	bfbc      	itt	lt
 80091b2:	580b      	ldrlt	r3, [r1, r0]
 80091b4:	18c0      	addlt	r0, r0, r3
 80091b6:	4770      	bx	lr

080091b8 <_raise_r>:
 80091b8:	291f      	cmp	r1, #31
 80091ba:	b538      	push	{r3, r4, r5, lr}
 80091bc:	4604      	mov	r4, r0
 80091be:	460d      	mov	r5, r1
 80091c0:	d904      	bls.n	80091cc <_raise_r+0x14>
 80091c2:	2316      	movs	r3, #22
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091ce:	b112      	cbz	r2, 80091d6 <_raise_r+0x1e>
 80091d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091d4:	b94b      	cbnz	r3, 80091ea <_raise_r+0x32>
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 f830 	bl	800923c <_getpid_r>
 80091dc:	462a      	mov	r2, r5
 80091de:	4601      	mov	r1, r0
 80091e0:	4620      	mov	r0, r4
 80091e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e6:	f000 b817 	b.w	8009218 <_kill_r>
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d00a      	beq.n	8009204 <_raise_r+0x4c>
 80091ee:	1c59      	adds	r1, r3, #1
 80091f0:	d103      	bne.n	80091fa <_raise_r+0x42>
 80091f2:	2316      	movs	r3, #22
 80091f4:	6003      	str	r3, [r0, #0]
 80091f6:	2001      	movs	r0, #1
 80091f8:	e7e7      	b.n	80091ca <_raise_r+0x12>
 80091fa:	2400      	movs	r4, #0
 80091fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009200:	4628      	mov	r0, r5
 8009202:	4798      	blx	r3
 8009204:	2000      	movs	r0, #0
 8009206:	e7e0      	b.n	80091ca <_raise_r+0x12>

08009208 <raise>:
 8009208:	4b02      	ldr	r3, [pc, #8]	; (8009214 <raise+0xc>)
 800920a:	4601      	mov	r1, r0
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	f7ff bfd3 	b.w	80091b8 <_raise_r>
 8009212:	bf00      	nop
 8009214:	20000010 	.word	0x20000010

08009218 <_kill_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d07      	ldr	r5, [pc, #28]	; (8009238 <_kill_r+0x20>)
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	4611      	mov	r1, r2
 8009224:	602b      	str	r3, [r5, #0]
 8009226:	f7f8 fb47 	bl	80018b8 <_kill>
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	d102      	bne.n	8009234 <_kill_r+0x1c>
 800922e:	682b      	ldr	r3, [r5, #0]
 8009230:	b103      	cbz	r3, 8009234 <_kill_r+0x1c>
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	200005fc 	.word	0x200005fc

0800923c <_getpid_r>:
 800923c:	f7f8 bb34 	b.w	80018a8 <_getpid>

08009240 <__sread>:
 8009240:	b510      	push	{r4, lr}
 8009242:	460c      	mov	r4, r1
 8009244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009248:	f000 f894 	bl	8009374 <_read_r>
 800924c:	2800      	cmp	r0, #0
 800924e:	bfab      	itete	ge
 8009250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009252:	89a3      	ldrhlt	r3, [r4, #12]
 8009254:	181b      	addge	r3, r3, r0
 8009256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800925a:	bfac      	ite	ge
 800925c:	6563      	strge	r3, [r4, #84]	; 0x54
 800925e:	81a3      	strhlt	r3, [r4, #12]
 8009260:	bd10      	pop	{r4, pc}

08009262 <__swrite>:
 8009262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009266:	461f      	mov	r7, r3
 8009268:	898b      	ldrh	r3, [r1, #12]
 800926a:	05db      	lsls	r3, r3, #23
 800926c:	4605      	mov	r5, r0
 800926e:	460c      	mov	r4, r1
 8009270:	4616      	mov	r6, r2
 8009272:	d505      	bpl.n	8009280 <__swrite+0x1e>
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	2302      	movs	r3, #2
 800927a:	2200      	movs	r2, #0
 800927c:	f000 f868 	bl	8009350 <_lseek_r>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	4632      	mov	r2, r6
 800928e:	463b      	mov	r3, r7
 8009290:	4628      	mov	r0, r5
 8009292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	f000 b817 	b.w	80092c8 <_write_r>

0800929a <__sseek>:
 800929a:	b510      	push	{r4, lr}
 800929c:	460c      	mov	r4, r1
 800929e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a2:	f000 f855 	bl	8009350 <_lseek_r>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	bf15      	itete	ne
 80092ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80092ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092b6:	81a3      	strheq	r3, [r4, #12]
 80092b8:	bf18      	it	ne
 80092ba:	81a3      	strhne	r3, [r4, #12]
 80092bc:	bd10      	pop	{r4, pc}

080092be <__sclose>:
 80092be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c2:	f000 b813 	b.w	80092ec <_close_r>
	...

080092c8 <_write_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d07      	ldr	r5, [pc, #28]	; (80092e8 <_write_r+0x20>)
 80092cc:	4604      	mov	r4, r0
 80092ce:	4608      	mov	r0, r1
 80092d0:	4611      	mov	r1, r2
 80092d2:	2200      	movs	r2, #0
 80092d4:	602a      	str	r2, [r5, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	f7f8 fb25 	bl	8001926 <_write>
 80092dc:	1c43      	adds	r3, r0, #1
 80092de:	d102      	bne.n	80092e6 <_write_r+0x1e>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	b103      	cbz	r3, 80092e6 <_write_r+0x1e>
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	bd38      	pop	{r3, r4, r5, pc}
 80092e8:	200005fc 	.word	0x200005fc

080092ec <_close_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	; (8009308 <_close_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f8 fb31 	bl	800195e <_close>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_close_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_close_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	200005fc 	.word	0x200005fc

0800930c <_fstat_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d07      	ldr	r5, [pc, #28]	; (800932c <_fstat_r+0x20>)
 8009310:	2300      	movs	r3, #0
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	f7f8 fb2c 	bl	8001976 <_fstat>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d102      	bne.n	8009328 <_fstat_r+0x1c>
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	b103      	cbz	r3, 8009328 <_fstat_r+0x1c>
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	bf00      	nop
 800932c:	200005fc 	.word	0x200005fc

08009330 <_isatty_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	; (800934c <_isatty_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f8 fb2b 	bl	8001996 <_isatty>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_isatty_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_isatty_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	200005fc 	.word	0x200005fc

08009350 <_lseek_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	; (8009370 <_lseek_r+0x20>)
 8009354:	4604      	mov	r4, r0
 8009356:	4608      	mov	r0, r1
 8009358:	4611      	mov	r1, r2
 800935a:	2200      	movs	r2, #0
 800935c:	602a      	str	r2, [r5, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	f7f8 fb24 	bl	80019ac <_lseek>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_lseek_r+0x1e>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_lseek_r+0x1e>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	200005fc 	.word	0x200005fc

08009374 <_read_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d07      	ldr	r5, [pc, #28]	; (8009394 <_read_r+0x20>)
 8009378:	4604      	mov	r4, r0
 800937a:	4608      	mov	r0, r1
 800937c:	4611      	mov	r1, r2
 800937e:	2200      	movs	r2, #0
 8009380:	602a      	str	r2, [r5, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	f7f8 fab2 	bl	80018ec <_read>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d102      	bne.n	8009392 <_read_r+0x1e>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b103      	cbz	r3, 8009392 <_read_r+0x1e>
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	200005fc 	.word	0x200005fc

08009398 <_init>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr

080093a4 <_fini>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr
