
STM_ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080060e4  080060e4  000160e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  080060e8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000428  20000010  080060f4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000438  080060f4  00020438  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019e21  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f14  00000000  00000000  00039e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019d8  00000000  00000000  0003cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018d0  00000000  00000000  0003e750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023684  00000000  00000000  00040020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000184d9  00000000  00000000  000636a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e34c6  00000000  00000000  0007bb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0015f043  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f40  00000000  00000000  0015f098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08005fcc 	.word	0x08005fcc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08005fcc 	.word	0x08005fcc

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b96e 	b.w	8000cb0 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468c      	mov	ip, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f040 8083 	bne.w	8000b02 <__udivmoddi4+0x116>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4617      	mov	r7, r2
 8000a00:	d947      	bls.n	8000a92 <__udivmoddi4+0xa6>
 8000a02:	fab2 f282 	clz	r2, r2
 8000a06:	b142      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a08:	f1c2 0020 	rsb	r0, r2, #32
 8000a0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a10:	4091      	lsls	r1, r2
 8000a12:	4097      	lsls	r7, r2
 8000a14:	ea40 0c01 	orr.w	ip, r0, r1
 8000a18:	4094      	lsls	r4, r2
 8000a1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a1e:	0c23      	lsrs	r3, r4, #16
 8000a20:	fbbc f6f8 	udiv	r6, ip, r8
 8000a24:	fa1f fe87 	uxth.w	lr, r7
 8000a28:	fb08 c116 	mls	r1, r8, r6, ip
 8000a2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a30:	fb06 f10e 	mul.w	r1, r6, lr
 8000a34:	4299      	cmp	r1, r3
 8000a36:	d909      	bls.n	8000a4c <__udivmoddi4+0x60>
 8000a38:	18fb      	adds	r3, r7, r3
 8000a3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3e:	f080 8119 	bcs.w	8000c74 <__udivmoddi4+0x288>
 8000a42:	4299      	cmp	r1, r3
 8000a44:	f240 8116 	bls.w	8000c74 <__udivmoddi4+0x288>
 8000a48:	3e02      	subs	r6, #2
 8000a4a:	443b      	add	r3, r7
 8000a4c:	1a5b      	subs	r3, r3, r1
 8000a4e:	b2a4      	uxth	r4, r4
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3310 	mls	r3, r8, r0, r3
 8000a58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a60:	45a6      	cmp	lr, r4
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x8c>
 8000a64:	193c      	adds	r4, r7, r4
 8000a66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a6a:	f080 8105 	bcs.w	8000c78 <__udivmoddi4+0x28c>
 8000a6e:	45a6      	cmp	lr, r4
 8000a70:	f240 8102 	bls.w	8000c78 <__udivmoddi4+0x28c>
 8000a74:	3802      	subs	r0, #2
 8000a76:	443c      	add	r4, r7
 8000a78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7c:	eba4 040e 	sub.w	r4, r4, lr
 8000a80:	2600      	movs	r6, #0
 8000a82:	b11d      	cbz	r5, 8000a8c <__udivmoddi4+0xa0>
 8000a84:	40d4      	lsrs	r4, r2
 8000a86:	2300      	movs	r3, #0
 8000a88:	e9c5 4300 	strd	r4, r3, [r5]
 8000a8c:	4631      	mov	r1, r6
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	b902      	cbnz	r2, 8000a96 <__udivmoddi4+0xaa>
 8000a94:	deff      	udf	#255	; 0xff
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d150      	bne.n	8000b40 <__udivmoddi4+0x154>
 8000a9e:	1bcb      	subs	r3, r1, r7
 8000aa0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa4:	fa1f f887 	uxth.w	r8, r7
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aae:	0c21      	lsrs	r1, r4, #16
 8000ab0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab8:	fb08 f30c 	mul.w	r3, r8, ip
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0xe4>
 8000ac0:	1879      	adds	r1, r7, r1
 8000ac2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0xe2>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	f200 80e9 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000ace:	4684      	mov	ip, r0
 8000ad0:	1ac9      	subs	r1, r1, r3
 8000ad2:	b2a3      	uxth	r3, r4
 8000ad4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000adc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ae0:	fb08 f800 	mul.w	r8, r8, r0
 8000ae4:	45a0      	cmp	r8, r4
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x10c>
 8000ae8:	193c      	adds	r4, r7, r4
 8000aea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x10a>
 8000af0:	45a0      	cmp	r8, r4
 8000af2:	f200 80d9 	bhi.w	8000ca8 <__udivmoddi4+0x2bc>
 8000af6:	4618      	mov	r0, r3
 8000af8:	eba4 0408 	sub.w	r4, r4, r8
 8000afc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b00:	e7bf      	b.n	8000a82 <__udivmoddi4+0x96>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x12e>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	f000 80b1 	beq.w	8000c6e <__udivmoddi4+0x282>
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b12:	4630      	mov	r0, r6
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f683 	clz	r6, r3
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d14a      	bne.n	8000bb8 <__udivmoddi4+0x1cc>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0x140>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80b8 	bhi.w	8000c9c <__udivmoddi4+0x2b0>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	468c      	mov	ip, r1
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d0a8      	beq.n	8000a8c <__udivmoddi4+0xa0>
 8000b3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b3e:	e7a5      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000b40:	f1c2 0320 	rsb	r3, r2, #32
 8000b44:	fa20 f603 	lsr.w	r6, r0, r3
 8000b48:	4097      	lsls	r7, r2
 8000b4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b52:	40d9      	lsrs	r1, r3
 8000b54:	4330      	orrs	r0, r6
 8000b56:	0c03      	lsrs	r3, r0, #16
 8000b58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b5c:	fa1f f887 	uxth.w	r8, r7
 8000b60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb06 f108 	mul.w	r1, r6, r8
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x19c>
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b7a:	f080 808d 	bcs.w	8000c98 <__udivmoddi4+0x2ac>
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	f240 808a 	bls.w	8000c98 <__udivmoddi4+0x2ac>
 8000b84:	3e02      	subs	r6, #2
 8000b86:	443b      	add	r3, r7
 8000b88:	1a5b      	subs	r3, r3, r1
 8000b8a:	b281      	uxth	r1, r0
 8000b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b98:	fb00 f308 	mul.w	r3, r0, r8
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x1c4>
 8000ba0:	1879      	adds	r1, r7, r1
 8000ba2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ba6:	d273      	bcs.n	8000c90 <__udivmoddi4+0x2a4>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	d971      	bls.n	8000c90 <__udivmoddi4+0x2a4>
 8000bac:	3802      	subs	r0, #2
 8000bae:	4439      	add	r1, r7
 8000bb0:	1acb      	subs	r3, r1, r3
 8000bb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bb6:	e778      	b.n	8000aaa <__udivmoddi4+0xbe>
 8000bb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000bc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bc4:	431c      	orrs	r4, r3
 8000bc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bca:	fa01 f306 	lsl.w	r3, r1, r6
 8000bce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bd6:	431f      	orrs	r7, r3
 8000bd8:	0c3b      	lsrs	r3, r7, #16
 8000bda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bde:	fa1f f884 	uxth.w	r8, r4
 8000be2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000be6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bea:	fb09 fa08 	mul.w	sl, r9, r8
 8000bee:	458a      	cmp	sl, r1
 8000bf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000bf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x220>
 8000bfa:	1861      	adds	r1, r4, r1
 8000bfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c00:	d248      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c02:	458a      	cmp	sl, r1
 8000c04:	d946      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4421      	add	r1, r4
 8000c0c:	eba1 010a 	sub.w	r1, r1, sl
 8000c10:	b2bf      	uxth	r7, r7
 8000c12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c1e:	fb00 f808 	mul.w	r8, r0, r8
 8000c22:	45b8      	cmp	r8, r7
 8000c24:	d907      	bls.n	8000c36 <__udivmoddi4+0x24a>
 8000c26:	19e7      	adds	r7, r4, r7
 8000c28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2c:	d22e      	bcs.n	8000c8c <__udivmoddi4+0x2a0>
 8000c2e:	45b8      	cmp	r8, r7
 8000c30:	d92c      	bls.n	8000c8c <__udivmoddi4+0x2a0>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4427      	add	r7, r4
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	eba7 0708 	sub.w	r7, r7, r8
 8000c3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c42:	454f      	cmp	r7, r9
 8000c44:	46c6      	mov	lr, r8
 8000c46:	4649      	mov	r1, r9
 8000c48:	d31a      	bcc.n	8000c80 <__udivmoddi4+0x294>
 8000c4a:	d017      	beq.n	8000c7c <__udivmoddi4+0x290>
 8000c4c:	b15d      	cbz	r5, 8000c66 <__udivmoddi4+0x27a>
 8000c4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c52:	eb67 0701 	sbc.w	r7, r7, r1
 8000c56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c5a:	40f2      	lsrs	r2, r6
 8000c5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c60:	40f7      	lsrs	r7, r6
 8000c62:	e9c5 2700 	strd	r2, r7, [r5]
 8000c66:	2600      	movs	r6, #0
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	462e      	mov	r6, r5
 8000c70:	4628      	mov	r0, r5
 8000c72:	e70b      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000c74:	4606      	mov	r6, r0
 8000c76:	e6e9      	b.n	8000a4c <__udivmoddi4+0x60>
 8000c78:	4618      	mov	r0, r3
 8000c7a:	e6fd      	b.n	8000a78 <__udivmoddi4+0x8c>
 8000c7c:	4543      	cmp	r3, r8
 8000c7e:	d2e5      	bcs.n	8000c4c <__udivmoddi4+0x260>
 8000c80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c84:	eb69 0104 	sbc.w	r1, r9, r4
 8000c88:	3801      	subs	r0, #1
 8000c8a:	e7df      	b.n	8000c4c <__udivmoddi4+0x260>
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	e7d2      	b.n	8000c36 <__udivmoddi4+0x24a>
 8000c90:	4660      	mov	r0, ip
 8000c92:	e78d      	b.n	8000bb0 <__udivmoddi4+0x1c4>
 8000c94:	4681      	mov	r9, r0
 8000c96:	e7b9      	b.n	8000c0c <__udivmoddi4+0x220>
 8000c98:	4666      	mov	r6, ip
 8000c9a:	e775      	b.n	8000b88 <__udivmoddi4+0x19c>
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	e74a      	b.n	8000b36 <__udivmoddi4+0x14a>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	4439      	add	r1, r7
 8000ca6:	e713      	b.n	8000ad0 <__udivmoddi4+0xe4>
 8000ca8:	3802      	subs	r0, #2
 8000caa:	443c      	add	r4, r7
 8000cac:	e724      	b.n	8000af8 <__udivmoddi4+0x10c>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <Average>:

static dist buffor[NUMBER_OF_SAMPLES] = {0};


static dist Average(dist *tab, int N)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
    dist avg = 0;
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < N; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	e00e      	b.n	8000ce8 <Average+0x34>
    {
        avg += tab[i];
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	edd3 7a00 	vldr	s15, [r3]
 8000cd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cde:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < N; i++)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbec      	blt.n	8000cca <Average+0x16>
    }

    return (avg/(dist)N);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d02:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d06:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <Average_Distance>:


dist Average_Distance(const dist distance)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (sample_counter < NUMBER_OF_SAMPLES)
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <Average_Distance+0x58>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b09      	cmp	r3, #9
 8000d24:	d80d      	bhi.n	8000d42 <Average_Distance+0x2e>
	{
		buffor[sample_counter] = distance;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <Average_Distance+0x58>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <Average_Distance+0x5c>)
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	601a      	str	r2, [r3, #0]
		sample_counter++;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <Average_Distance+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <Average_Distance+0x58>)
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e00b      	b.n	8000d5a <Average_Distance+0x46>
	}
	else
	{
		avg_distance = Average(buffor, NUMBER_OF_SAMPLES);
 8000d42:	210a      	movs	r1, #10
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <Average_Distance+0x5c>)
 8000d46:	f7ff ffb5 	bl	8000cb4 <Average>
 8000d4a:	eef0 7a40 	vmov.f32	s15, s0
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <Average_Distance+0x60>)
 8000d50:	edc3 7a00 	vstr	s15, [r3]
		sample_counter = 0;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <Average_Distance+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	}
	return avg_distance;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <Average_Distance+0x60>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	ee07 3a90 	vmov	s15, r3
}
 8000d62:	eeb0 0a67 	vmov.f32	s0, s15
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000002c 	.word	0x2000002c
 8000d70:	20000034 	.word	0x20000034
 8000d74:	20000030 	.word	0x20000030

08000d78 <Reset_Counter>:


void Reset_Counter(Meas_distance_T *struct_counter)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	struct_counter->debounce_counter = 0;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	805a      	strh	r2, [r3, #2]
	struct_counter->invalid_msg = false;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da8:	f023 0218 	bic.w	r2, r3, #24
 8000dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de8:	68fb      	ldr	r3, [r7, #12]
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfc:	f000 fc5e 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e00:	f000 f836 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e04:	f000 f9fa 	bl	80011fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e08:	f000 f982 	bl	8001110 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000e0c:	f000 f9ce 	bl	80011ac <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000e10:	f000 f8d4 	bl	8000fbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Start Timer for HC-SR04 module */
  HAL_TIM_Base_Start(&htim2);
 8000e14:	4814      	ldr	r0, [pc, #80]	; (8000e68 <main+0x70>)
 8000e16:	f002 fed3 	bl	8003bc0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, HCSR04_PWM_CHANNEL);
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	4812      	ldr	r0, [pc, #72]	; (8000e68 <main+0x70>)
 8000e1e:	f002 ff77 	bl	8003d10 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim2, HCSR04_START_CHANNEL);
 8000e22:	2100      	movs	r1, #0
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <main+0x70>)
 8000e26:	f003 f8af 	bl	8003f88 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, HCSR04_STOP_CHANNEL);
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	480e      	ldr	r0, [pc, #56]	; (8000e68 <main+0x70>)
 8000e2e:	f003 f985 	bl	800413c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((Meas_distance.debounce_counter < DEBOUNCE_CYCLES) && (Meas_distance.invalid_msg == false))
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <main+0x74>)
 8000e34:	885b      	ldrh	r3, [r3, #2]
 8000e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <main+0x62>
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <main+0x74>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	f083 0301 	eor.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <main+0x62>
	  {
		  Meas_distance.debounce_counter++;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <main+0x74>)
 8000e4e:	885b      	ldrh	r3, [r3, #2]
 8000e50:	3301      	adds	r3, #1
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <main+0x74>)
 8000e56:	805a      	strh	r2, [r3, #2]
 8000e58:	e005      	b.n	8000e66 <main+0x6e>
	  }
	  else
	  {
		  Meas_distance.invalid_msg = true;
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <main+0x74>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
		  Meas_distance.debounce_counter = 0;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <main+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	805a      	strh	r2, [r3, #2]
	  if ((Meas_distance.debounce_counter < DEBOUNCE_CYCLES) && (Meas_distance.invalid_msg == false))
 8000e66:	e7e4      	b.n	8000e32 <main+0x3a>
 8000e68:	200000f4 	.word	0x200000f4
 8000e6c:	2000005c 	.word	0x2000005c

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ae      	sub	sp, #184	; 0xb8
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e7a:	2248      	movs	r2, #72	; 0x48
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f005 f89c 	bl	8005fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2250      	movs	r2, #80	; 0x50
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f005 f88c 	bl	8005fbc <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eb2:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ec8:	f001 f826 	bl	8001f18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff ff63 	bl	8000d98 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed2:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <SystemClock_Config+0x148>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eda:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <SystemClock_Config+0x148>)
 8000edc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <SystemClock_Config+0x148>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000eee:	2327      	movs	r3, #39	; 0x27
 8000ef0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f14:	2360      	movs	r3, #96	; 0x60
 8000f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fb8b 	bl	8002640 <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f30:	f000 f9f2 	bl	8001318 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f34:	236f      	movs	r3, #111	; 0x6f
 8000f36:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f54:	2101      	movs	r1, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fefe 	bl	8002d58 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f62:	f000 f9d9 	bl	8001318 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000f66:	f242 1301 	movw	r3, #8449	; 0x2101
 8000f6a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000f6c:	2318      	movs	r3, #24
 8000f6e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000f7c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f80:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f86:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f92:	2300      	movs	r3, #0
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fb2b 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000fa8:	f000 f9b6 	bl	8001318 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fac:	f002 fc9a 	bl	80038e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fb0:	bf00      	nop
 8000fb2:	37b8      	adds	r7, #184	; 0xb8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58000400 	.word	0x58000400

08000fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b092      	sub	sp, #72	; 0x48
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ffc:	4b43      	ldr	r3, [pc, #268]	; (800110c <MX_TIM2_Init+0x150>)
 8000ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001002:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001004:	4b41      	ldr	r3, [pc, #260]	; (800110c <MX_TIM2_Init+0x150>)
 8001006:	2220      	movs	r2, #32
 8001008:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b40      	ldr	r3, [pc, #256]	; (800110c <MX_TIM2_Init+0x150>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8001010:	4b3e      	ldr	r3, [pc, #248]	; (800110c <MX_TIM2_Init+0x150>)
 8001012:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001016:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b3c      	ldr	r3, [pc, #240]	; (800110c <MX_TIM2_Init+0x150>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b3b      	ldr	r3, [pc, #236]	; (800110c <MX_TIM2_Init+0x150>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001024:	4839      	ldr	r0, [pc, #228]	; (800110c <MX_TIM2_Init+0x150>)
 8001026:	f002 fd74 	bl	8003b12 <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001030:	f000 f972 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800103e:	4619      	mov	r1, r3
 8001040:	4832      	ldr	r0, [pc, #200]	; (800110c <MX_TIM2_Init+0x150>)
 8001042:	f003 fc5f 	bl	8004904 <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800104c:	f000 f964 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001050:	482e      	ldr	r0, [pc, #184]	; (800110c <MX_TIM2_Init+0x150>)
 8001052:	f002 ff37 	bl	8003ec4 <HAL_TIM_IC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800105c:	f000 f95c 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001060:	482a      	ldr	r0, [pc, #168]	; (800110c <MX_TIM2_Init+0x150>)
 8001062:	f002 fdf3 	bl	8003c4c <HAL_TIM_PWM_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800106c:	f000 f954 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107c:	4619      	mov	r1, r3
 800107e:	4823      	ldr	r0, [pc, #140]	; (800110c <MX_TIM2_Init+0x150>)
 8001080:	f004 f9d8 	bl	8005434 <HAL_TIMEx_MasterConfigSynchronization>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800108a:	f000 f945 	bl	8001318 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4819      	ldr	r0, [pc, #100]	; (800110c <MX_TIM2_Init+0x150>)
 80010a8:	f003 fa87 	bl	80045ba <HAL_TIM_IC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80010b2:	f000 f931 	bl	8001318 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	2204      	movs	r2, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <MX_TIM2_Init+0x150>)
 80010c8:	f003 fa77 	bl	80045ba <HAL_TIM_IC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80010d2:	f000 f921 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d6:	2360      	movs	r3, #96	; 0x60
 80010d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 11;
 80010da:	230b      	movs	r3, #11
 80010dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2208      	movs	r2, #8
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_TIM2_Init+0x150>)
 80010ee:	f003 faf9 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM2_Init+0x140>
  {
    Error_Handler();
 80010f8:	f000 f90e 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM2_Init+0x150>)
 80010fe:	f000 f996 	bl	800142e <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3748      	adds	r7, #72	; 0x48
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000f4 	.word	0x200000f4

08001110 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001116:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <MX_USART1_UART_Init+0x98>)
 8001118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001128:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001138:	220c      	movs	r2, #12
 800113a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 800115c:	f004 fa08 	bl	8005570 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001166:	f000 f8d7 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 800116e:	f004 fdfb 	bl	8005d68 <HAL_UARTEx_SetTxFifoThreshold>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001178:	f000 f8ce 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117c:	2100      	movs	r1, #0
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001180:	f004 fe30 	bl	8005de4 <HAL_UARTEx_SetRxFifoThreshold>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800118a:	f000 f8c5 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART1_UART_Init+0x94>)
 8001190:	f004 fdb1 	bl	8005cf6 <HAL_UARTEx_DisableFifoMode>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800119a:	f000 f8bd 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000064 	.word	0x20000064
 80011a8:	40013800 	.word	0x40013800

080011ac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011b2:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <MX_USB_PCD_Init+0x4c>)
 80011b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011b8:	2208      	movs	r2, #8
 80011ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011be:	2202      	movs	r2, #2
 80011c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_USB_PCD_Init+0x48>)
 80011e2:	f000 fd89 	bl	8001cf8 <HAL_PCD_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80011ec:	f000 f894 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000140 	.word	0x20000140
 80011f8:	40006800 	.word	0x40006800

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	2004      	movs	r0, #4
 8001212:	f7ff fdd7 	bl	8000dc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fdd4 	bl	8000dc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff fdd1 	bl	8000dc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	2008      	movs	r0, #8
 8001224:	f7ff fdce 	bl	8000dc4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2123      	movs	r1, #35	; 0x23
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_GPIO_Init+0x84>)
 800122e:	f000 fd4b 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001232:	2310      	movs	r3, #16
 8001234:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <MX_GPIO_Init+0x88>)
 8001244:	f000 fbd0 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001248:	2323      	movs	r3, #35	; 0x23
 800124a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_GPIO_Init+0x84>)
 800125e:	f000 fbc3 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001262:	2303      	movs	r3, #3
 8001264:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_GPIO_Init+0x8c>)
 8001274:	f000 fbb8 	bl	80019e8 <HAL_GPIO_Init>

}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	48000400 	.word	0x48000400
 8001284:	48000800 	.word	0x48000800
 8001288:	48000c00 	.word	0x48000c00
 800128c:	00000000 	.word	0x00000000

08001290 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a0:	d12e      	bne.n	8001300 <HAL_TIM_IC_CaptureCallback+0x70>
  {
    uint16_t time = (uint16_t)((uint16_t)__HAL_TIM_GetCompare(&htim2, HCSR04_STOP_CHANNEL) - (uint16_t)__HAL_TIM_GetCompare(&htim2, HCSR04_START_CHANNEL));
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x80>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x80>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	81fb      	strh	r3, [r7, #14]
    Meas_distance.distance = Average_Distance((dist)time /(2.0 * SOUND_SPEED));
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c0:	ee17 0a90 	vmov	r0, s15
 80012c4:	f7ff f8c0 	bl	8000448 <__aeabi_f2d>
 80012c8:	a30f      	add	r3, pc, #60	; (adr r3, 8001308 <HAL_TIM_IC_CaptureCallback+0x78>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff fa3d 	bl	800074c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fb1f 	bl	800091c <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	ee00 3a10 	vmov	s0, r3
 80012e4:	f7ff fd16 	bl	8000d14 <Average_Distance>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x84>)
 80012ee:	edc3 7a01 	vstr	s15, [r3, #4]
    Reset_Counter(&Meas_distance);
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <HAL_TIM_IC_CaptureCallback+0x84>)
 80012f4:	f7ff fd40 	bl	8000d78 <Reset_Counter>
    HAL_TIM_IC_Start_IT(&htim2, HCSR04_STOP_CHANNEL);
 80012f8:	2104      	movs	r1, #4
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <HAL_TIM_IC_CaptureCallback+0x80>)
 80012fc:	f002 ff1e 	bl	800413c <HAL_TIM_IC_Start_IT>
  }
}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	d70a3d71 	.word	0xd70a3d71
 800130c:	405130a3 	.word	0x405130a3
 8001310:	200000f4 	.word	0x200000f4
 8001314:	2000005c 	.word	0x2000005c

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>

08001322 <LL_AHB2_GRP1_EnableClock>:
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4313      	orrs	r3, r2
 8001338:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4013      	ands	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4313      	orrs	r3, r2
 800136a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4313      	orrs	r3, r2
 800139c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b088      	sub	sp, #32
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e6:	d11e      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff ffb3 	bl	8001354 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff ff97 	bl	8001322 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f000 fae9 	bl	80019e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	201c      	movs	r0, #28
 800141c:	f000 faaf 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001420:	201c      	movs	r0, #28
 8001422:	f000 fac6 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b088      	sub	sp, #32
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144e:	d113      	bne.n	8001478 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff ff66 	bl	8001322 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 8001456:	2304      	movs	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001466:	2301      	movs	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f000 fab8 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_UART_MspInit+0x58>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d116      	bne.n	80014d0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014a6:	f7ff ff6e 	bl	8001386 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7ff ff39 	bl	8001322 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014b0:	23c0      	movs	r3, #192	; 0xc0
 80014b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c0:	2307      	movs	r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <HAL_UART_MspInit+0x5c>)
 80014cc:	f000 fa8c 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40013800 	.word	0x40013800
 80014dc:	48000400 	.word	0x48000400

080014e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_PCD_MspInit+0x5c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d118      	bne.n	8001534 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2001      	movs	r0, #1
 8001504:	f7ff ff0d 	bl	8001322 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001508:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800150c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800151a:	230a      	movs	r3, #10
 800151c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f000 fa5e 	bl	80019e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800152c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001530:	f7ff ff10 	bl	8001354 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40006800 	.word	0x40006800

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f000 f8f0 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM2_IRQHandler+0x10>)
 800159a:	f002 feef 	bl	800437c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000f4 	.word	0x200000f4

080015a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <SystemInit+0x98>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <SystemInit+0x98>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80015d4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80015d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <SystemInit+0x9c>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f2:	f023 0305 	bic.w	r3, r3, #5
 80015f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <SystemInit+0xa0>)
 8001614:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <SystemInit+0xa0>)
 800161c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00
 8001644:	faf6fefb 	.word	0xfaf6fefb
 8001648:	22041000 	.word	0x22041000

0800164c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800164c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001650:	3304      	adds	r3, #4

08001652 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001652:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001654:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001656:	d3f9      	bcc.n	800164c <CopyDataInit>
  bx lr
 8001658:	4770      	bx	lr

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800165a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800165c:	3004      	adds	r0, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800165e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>
  bx lr
 8001662:	4770      	bx	lr

08001664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001666:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001668:	f7ff ff9e 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <LoopForever+0x8>)
 800166e:	490c      	ldr	r1, [pc, #48]	; (80016a0 <LoopForever+0xc>)
 8001670:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <LoopForever+0x10>)
 8001672:	2300      	movs	r3, #0
 8001674:	f7ff ffed 	bl	8001652 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001678:	480b      	ldr	r0, [pc, #44]	; (80016a8 <LoopForever+0x14>)
 800167a:	490c      	ldr	r1, [pc, #48]	; (80016ac <LoopForever+0x18>)
 800167c:	2300      	movs	r3, #0
 800167e:	f7ff ffee 	bl	800165e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <LoopForever+0x1c>)
 8001684:	490b      	ldr	r1, [pc, #44]	; (80016b4 <LoopForever+0x20>)
 8001686:	2300      	movs	r3, #0
 8001688:	f7ff ffe9 	bl	800165e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800168c:	f004 fc72 	bl	8005f74 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001690:	f7ff fbb2 	bl	8000df8 <main>

08001694 <LoopForever>:

LoopForever:
  b LoopForever
 8001694:	e7fe      	b.n	8001694 <LoopForever>
 8001696:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001698:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800169c:	20000004 	.word	0x20000004
 80016a0:	20000010 	.word	0x20000010
 80016a4:	080060e8 	.word	0x080060e8
  INIT_BSS _sbss, _ebss
 80016a8:	20000010 	.word	0x20000010
 80016ac:	20000438 	.word	0x20000438
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016b0:	20030000 	.word	0x20030000
 80016b4:	20030000 	.word	0x20030000

080016b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_Init+0x3c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <HAL_Init+0x3c>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d2:	2003      	movs	r0, #3
 80016d4:	f000 f948 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 f80f 	bl	80016fc <HAL_InitTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	e001      	b.n	80016ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ea:	f7ff fe65 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ee:	79fb      	ldrb	r3, [r7, #7]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	58004000 	.word	0x58004000

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_InitTick+0x6c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d024      	beq.n	800175a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001710:	f001 fcce 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_InitTick+0x6c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001720:	fbb3 f3f1 	udiv	r3, r3, r1
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f950 	bl	80019ce <HAL_SYSTICK_Config>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10f      	bne.n	8001754 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	d809      	bhi.n	800174e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173a:	2200      	movs	r2, #0
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	f04f 30ff 	mov.w	r0, #4294967295
 8001742:	f000 f91c 	bl	800197e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_InitTick+0x70>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e007      	b.n	800175e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e004      	b.n	800175e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e001      	b.n	800175e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000000c 	.word	0x2000000c
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000000c 	.word	0x2000000c
 8001794:	20000434 	.word	0x20000434

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000434 	.word	0x20000434

080017b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTickPrio+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f7ff ff8e 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff29 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff40 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff90 	bl	80018bc <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5f 	bl	8001868 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff33 	bl	800182c <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa4 	bl	8001924 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e14c      	b.n	8001c92 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 813e 	beq.w	8001c8c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d00b      	beq.n	8001a30 <HAL_GPIO_Init+0x48>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a24:	2b11      	cmp	r3, #17
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b12      	cmp	r3, #18
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 0201 	and.w	r2, r3, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0xea>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d123      	bne.n	8001b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	6939      	ldr	r1, [r7, #16]
 8001b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0203 	and.w	r2, r3, #3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8098 	beq.w	8001c8c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5c:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_GPIO_Init+0x2c8>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b86:	d019      	beq.n	8001bbc <HAL_GPIO_Init+0x1d4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <HAL_GPIO_Init+0x2cc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_GPIO_Init+0x1d0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00d      	beq.n	8001bb4 <HAL_GPIO_Init+0x1cc>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_GPIO_Init+0x2d4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d007      	beq.n	8001bb0 <HAL_GPIO_Init+0x1c8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a47      	ldr	r2, [pc, #284]	; (8001cc0 <HAL_GPIO_Init+0x2d8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_GPIO_Init+0x1c4>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	e008      	b.n	8001bbe <HAL_GPIO_Init+0x1d6>
 8001bac:	2307      	movs	r3, #7
 8001bae:	e006      	b.n	8001bbe <HAL_GPIO_Init+0x1d6>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e004      	b.n	8001bbe <HAL_GPIO_Init+0x1d6>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x1d6>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_GPIO_Init+0x1d6>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bce:	4938      	ldr	r1, [pc, #224]	; (8001cb0 <HAL_GPIO_Init+0x2c8>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c02:	4a30      	ldr	r2, [pc, #192]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c30:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c86:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f aeab 	bne.w	80019f8 <HAL_GPIO_Init+0x10>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	48000800 	.word	0x48000800
 8001cbc:	48000c00 	.word	0x48000c00
 8001cc0:	48001000 	.word	0x48001000
 8001cc4:	58000800 	.word	0x58000800

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af06      	add	r7, sp, #24
 8001cfe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0d7      	b.n	8001eba <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fbde 	bl	80014e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 f8e3 	bl	8005efc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e04c      	b.n	8001dd6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	b298      	uxth	r0, r3
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	3336      	adds	r3, #54	; 0x36
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3303      	adds	r3, #3
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	3338      	adds	r3, #56	; 0x38
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	440b      	add	r3, r1
 8001db6:	333c      	adds	r3, #60	; 0x3c
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	3340      	adds	r3, #64	; 0x40
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d3ad      	bcc.n	8001d3c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e044      	b.n	8001e70 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	440b      	add	r3, r1
 8001df4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3b5      	bcc.n	8001de6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	687e      	ldr	r6, [r7, #4]
 8001e82:	466d      	mov	r5, sp
 8001e84:	f106 0410 	add.w	r4, r6, #16
 8001e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	602b      	str	r3, [r5, #0]
 8001e90:	1d33      	adds	r3, r6, #4
 8001e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e94:	6838      	ldr	r0, [r7, #0]
 8001e96:	f004 f84c 	bl	8005f32 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d102      	bne.n	8001eb8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f805 	bl	8001ec2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	58000400 	.word	0x58000400

08001f38 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	58000400 	.word	0x58000400

08001f54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f66:	d101      	bne.n	8001f6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_RCC_HSE_Enable>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_RCC_HSE_Disable>:
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_RCC_HSE_IsReady>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fc6:	d101      	bne.n	8001fcc <LL_RCC_HSE_IsReady+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_RCC_HSE_IsReady+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_RCC_HSI_Enable>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <LL_RCC_HSI_Disable>:
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002008:	6013      	str	r3, [r2, #0]
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_RCC_HSI_IsReady>:
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002026:	d101      	bne.n	800202c <LL_RCC_HSI_IsReady+0x18>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_RCC_HSI_IsReady+0x1a>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	061b      	lsls	r3, r3, #24
 800204e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_RCC_HSI48_Enable>:
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_RCC_HSI48_Disable>:
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_RCC_HSI48_IsReady>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d101      	bne.n	80020be <LL_RCC_HSI48_IsReady+0x18>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <LL_RCC_HSI48_IsReady+0x1a>
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_RCC_LSE_Enable>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_RCC_LSE_Disable>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_RCC_LSE_EnableBypass>:
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_RCC_LSE_DisableBypass>:
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b02      	cmp	r3, #2
 8002164:	d101      	bne.n	800216a <LL_RCC_LSE_IsReady+0x18>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_RCC_LSE_IsReady+0x1a>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d101      	bne.n	80021d2 <LL_RCC_LSI1_IsReady+0x18>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_RCC_LSI1_IsReady+0x1a>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d101      	bne.n	800223a <LL_RCC_LSI2_IsReady+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_RCC_LSI2_IsReady+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800224e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002256:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d101      	bne.n	80022c6 <LL_RCC_MSI_IsReady+0x16>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_RCC_MSI_IsReady+0x18>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80022da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2bb0      	cmp	r3, #176	; 0xb0
 8002310:	d901      	bls.n	8002316 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002312:	23b0      	movs	r3, #176	; 0xb0
 8002314:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002316:	687b      	ldr	r3, [r7, #4]
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800232c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 0203 	bic.w	r2, r3, #3
 8002360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023f2:	f023 020f 	bic.w	r2, r3, #15
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f4:	6013      	str	r3, [r2, #0]
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002512:	d101      	bne.n	8002518 <LL_RCC_PLL_IsReady+0x18>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <LL_RCC_PLL_IsReady+0x1a>
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d101      	bne.n	800259e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025be:	d101      	bne.n	80025c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d101      	bne.n	80025ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002608:	d101      	bne.n	800260e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800262c:	d101      	bne.n	8002632 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b08d      	sub	sp, #52	; 0x34
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e37e      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8092 	beq.w	8002784 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002660:	f7ff fe89 	bl	8002376 <LL_RCC_GetSysClkSource>
 8002664:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002666:	f7ff ff82 	bl	800256e <LL_RCC_PLL_GetMainSource>
 800266a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x3e>
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d14c      	bne.n	8002712 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	2b01      	cmp	r3, #1
 800267c:	d149      	bne.n	8002712 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267e:	f7ff fe17 	bl	80022b0 <LL_RCC_MSI_IsReady>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x54>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e35d      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002698:	f7ff fe2f 	bl	80022fa <LL_RCC_MSI_GetRange>
 800269c:	4603      	mov	r3, r0
 800269e:	429c      	cmp	r4, r3
 80026a0:	d914      	bls.n	80026cc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fd42 	bl	8003130 <RCC_SetFlashLatencyFromMSIRange>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e34c      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fe09 	bl	80022d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fe2d 	bl	8002324 <LL_RCC_MSI_SetCalibTrimming>
 80026ca:	e013      	b.n	80026f4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fdfe 	bl	80022d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fe22 	bl	8002324 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fd23 	bl	8003130 <RCC_SetFlashLatencyFromMSIRange>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e32d      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026f4:	f000 fcdc 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4ab3      	ldr	r2, [pc, #716]	; (80029c8 <HAL_RCC_OscConfig+0x388>)
 80026fc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026fe:	4bb3      	ldr	r3, [pc, #716]	; (80029cc <HAL_RCC_OscConfig+0x38c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fffa 	bl	80016fc <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d039      	beq.n	8002782 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e31e      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01e      	beq.n	8002758 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800271a:	f7ff fdab 	bl	8002274 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800271e:	f7ff f83b 	bl	8001798 <HAL_GetTick>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002726:	f7ff f837 	bl	8001798 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e30b      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002738:	f7ff fdba 	bl	80022b0 <LL_RCC_MSI_IsReady>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f1      	beq.n	8002726 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fdc3 	bl	80022d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fde7 	bl	8002324 <LL_RCC_MSI_SetCalibTrimming>
 8002756:	e015      	b.n	8002784 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002758:	f7ff fd9b 	bl	8002292 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800275c:	f7ff f81c 	bl	8001798 <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002764:	f7ff f818 	bl	8001798 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e2ec      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002776:	f7ff fd9b 	bl	80022b0 <LL_RCC_MSI_IsReady>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f1      	bne.n	8002764 <HAL_RCC_OscConfig+0x124>
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002782:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d04e      	beq.n	800282e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002790:	f7ff fdf1 	bl	8002376 <LL_RCC_GetSysClkSource>
 8002794:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002796:	f7ff feea 	bl	800256e <LL_RCC_PLL_GetMainSource>
 800279a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x16e>
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	d10d      	bne.n	80027c4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d10a      	bne.n	80027c4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ae:	f7ff fc01 	bl	8001fb4 <LL_RCC_HSE_IsReady>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d039      	beq.n	800282c <HAL_RCC_OscConfig+0x1ec>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d135      	bne.n	800282c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e2c5      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0x194>
 80027ce:	f7ff fbd3 	bl	8001f78 <LL_RCC_HSE_Enable>
 80027d2:	e001      	b.n	80027d8 <HAL_RCC_OscConfig+0x198>
 80027d4:	f7ff fbdf 	bl	8001f96 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d012      	beq.n	8002806 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe ffda 	bl	8001798 <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe ffd6 	bl	8001798 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e2aa      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80027fa:	f7ff fbdb 	bl	8001fb4 <LL_RCC_HSE_IsReady>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f1      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1a8>
 8002804:	e013      	b.n	800282e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe ffc7 	bl	8001798 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280e:	f7fe ffc3 	bl	8001798 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e297      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002820:	f7ff fbc8 	bl	8001fb4 <LL_RCC_HSE_IsReady>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f1      	bne.n	800280e <HAL_RCC_OscConfig+0x1ce>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d051      	beq.n	80028de <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283a:	f7ff fd9c 	bl	8002376 <LL_RCC_GetSysClkSource>
 800283e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002840:	f7ff fe95 	bl	800256e <LL_RCC_PLL_GetMainSource>
 8002844:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x218>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d113      	bne.n	800287a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d110      	bne.n	800287a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002858:	f7ff fbdc 	bl	8002014 <LL_RCC_HSI_IsReady>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_RCC_OscConfig+0x22e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e270      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fbe0 	bl	8002038 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002878:	e031      	b.n	80028de <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d019      	beq.n	80028b6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002882:	f7ff fba9 	bl	8001fd8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe ff87 	bl	8001798 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe ff83 	bl	8001798 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e257      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028a0:	f7ff fbb8 	bl	8002014 <LL_RCC_HSI_IsReady>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f1      	beq.n	800288e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fbc2 	bl	8002038 <LL_RCC_HSI_SetCalibTrimming>
 80028b4:	e013      	b.n	80028de <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	f7ff fb9e 	bl	8001ff6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe ff6d 	bl	8001798 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe ff69 	bl	8001798 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e23d      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80028d4:	f7ff fb9e 	bl	8002014 <LL_RCC_HSI_IsReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f1      	bne.n	80028c2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80a3 	beq.w	8002a3e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d076      	beq.n	80029ee <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d046      	beq.n	800299a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800290c:	f7ff fc55 	bl	80021ba <LL_RCC_LSI1_IsReady>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d113      	bne.n	800293e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002916:	f7ff fc2e 	bl	8002176 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800291a:	f7fe ff3d 	bl	8001798 <HAL_GetTick>
 800291e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002922:	f7fe ff39 	bl	8001798 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e20d      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002934:	f7ff fc41 	bl	80021ba <LL_RCC_LSI1_IsReady>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f1      	beq.n	8002922 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800293e:	f7ff fc4e 	bl	80021de <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fe ff29 	bl	8001798 <HAL_GetTick>
 8002946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800294a:	f7fe ff25 	bl	8001798 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e1f9      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800295c:	f7ff fc61 	bl	8002222 <LL_RCC_LSI2_IsReady>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f1      	beq.n	800294a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fc6b 	bl	8002246 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002970:	f7ff fc12 	bl	8002198 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe ff10 	bl	8001798 <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800297c:	f7fe ff0c 	bl	8001798 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1e0      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800298e:	f7ff fc14 	bl	80021ba <LL_RCC_LSI1_IsReady>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f1      	bne.n	800297c <HAL_RCC_OscConfig+0x33c>
 8002998:	e051      	b.n	8002a3e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800299a:	f7ff fbec 	bl	8002176 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fefb 	bl	8001798 <HAL_GetTick>
 80029a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029a6:	f7fe fef7 	bl	8001798 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1cb      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029b8:	f7ff fbff 	bl	80021ba <LL_RCC_LSI1_IsReady>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f1      	beq.n	80029a6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80029c2:	f7ff fc1d 	bl	8002200 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029c6:	e00c      	b.n	80029e2 <HAL_RCC_OscConfig+0x3a2>
 80029c8:	20000004 	.word	0x20000004
 80029cc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029d0:	f7fe fee2 	bl	8001798 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1b6      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029e2:	f7ff fc1e 	bl	8002222 <LL_RCC_LSI2_IsReady>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f1      	bne.n	80029d0 <HAL_RCC_OscConfig+0x390>
 80029ec:	e027      	b.n	8002a3e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80029ee:	f7ff fc07 	bl	8002200 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fed1 	bl	8001798 <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029fa:	f7fe fecd 	bl	8001798 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e1a1      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a0c:	f7ff fc09 	bl	8002222 <LL_RCC_LSI2_IsReady>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f1      	bne.n	80029fa <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002a16:	f7ff fbbf 	bl	8002198 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe febd 	bl	8001798 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a22:	f7fe feb9 	bl	8001798 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e18d      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a34:	f7ff fbc1 	bl	80021ba <LL_RCC_LSI1_IsReady>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d05b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4a:	4bb5      	ldr	r3, [pc, #724]	; (8002d20 <HAL_RCC_OscConfig+0x6e0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d114      	bne.n	8002a80 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a56:	f7ff fa5f 	bl	8001f18 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fe9d 	bl	8001798 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fe fe99 	bl	8001798 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e16d      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a74:	4baa      	ldr	r3, [pc, #680]	; (8002d20 <HAL_RCC_OscConfig+0x6e0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0x44e>
 8002a88:	f7ff fb1f 	bl	80020ca <LL_RCC_LSE_Enable>
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x468>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d104      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x460>
 8002a96:	f7ff fb3a 	bl	800210e <LL_RCC_LSE_EnableBypass>
 8002a9a:	f7ff fb16 	bl	80020ca <LL_RCC_LSE_Enable>
 8002a9e:	e003      	b.n	8002aa8 <HAL_RCC_OscConfig+0x468>
 8002aa0:	f7ff fb24 	bl	80020ec <LL_RCC_LSE_Disable>
 8002aa4:	f7ff fb44 	bl	8002130 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d014      	beq.n	8002ada <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fe72 	bl	8001798 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fe6e 	bl	8001798 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e140      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ace:	f7ff fb40 	bl	8002152 <LL_RCC_LSE_IsReady>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ef      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x478>
 8002ad8:	e013      	b.n	8002b02 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe fe5d 	bl	8001798 <HAL_GetTick>
 8002ade:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fe59 	bl	8001798 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e12b      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002af8:	f7ff fb2b 	bl	8002152 <LL_RCC_LSE_IsReady>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b16:	f7ff faa4 	bl	8002062 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fe3d 	bl	8001798 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b22:	f7fe fe39 	bl	8001798 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e10d      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b34:	f7ff fab7 	bl	80020a6 <LL_RCC_HSI48_IsReady>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f1      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
 8002b3e:	e013      	b.n	8002b68 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b40:	f7ff faa0 	bl	8002084 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fe fe28 	bl	8001798 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4c:	f7fe fe24 	bl	8001798 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0f8      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b5e:	f7ff faa2 	bl	80020a6 <LL_RCC_HSI48_IsReady>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f1      	bne.n	8002b4c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80ee 	beq.w	8002d4e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b72:	f7ff fc00 	bl	8002376 <LL_RCC_GetSysClkSource>
 8002b76:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	f040 80af 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0203 	and.w	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d123      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d11c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d114      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d10d      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d05d      	beq.n	8002c9c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d058      	beq.n	8002c98 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0ab      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bf8:	f7ff fc73 	bl	80024e2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bfc:	f7fe fdcc 	bl	8001798 <HAL_GetTick>
 8002c00:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fdc8 	bl	8001798 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e09c      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ef      	bne.n	8002c04 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_RCC_OscConfig+0x6e4>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c36:	4311      	orrs	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c3c:	0212      	lsls	r2, r2, #8
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c44:	4311      	orrs	r1, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c50:	430a      	orrs	r2, r1
 8002c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c5a:	f7ff fc33 	bl	80024c4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c6e:	f7fe fd93 	bl	8001798 <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7fe fd8f 	bl	8001798 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e063      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ef      	beq.n	8002c76 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c96:	e05a      	b.n	8002d4e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e059      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d151      	bne.n	8002d4e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002caa:	f7ff fc0b 	bl	80024c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cbe:	f7fe fd6b 	bl	8001798 <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe fd67 	bl	8001798 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e03b      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ef      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x686>
 8002ce6:	e032      	b.n	8002d4e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d02d      	beq.n	8002d4a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	f7ff fbf8 	bl	80024e2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfc:	f023 0303 	bic.w	r3, r3, #3
 8002d00:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe fd3f 	bl	8001798 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1c:	e00d      	b.n	8002d3a <HAL_RCC_OscConfig+0x6fa>
 8002d1e:	bf00      	nop
 8002d20:	58000400 	.word	0x58000400
 8002d24:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe fd36 	bl	8001798 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ef      	bne.n	8002d28 <HAL_RCC_OscConfig+0x6e8>
 8002d48:	e001      	b.n	8002d4e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3734      	adds	r7, #52	; 0x34
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd90      	pop	{r4, r7, pc}

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e12d      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b98      	ldr	r3, [pc, #608]	; (8002fd0 <HAL_RCC_ClockConfig+0x278>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d91b      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b95      	ldr	r3, [pc, #596]	; (8002fd0 <HAL_RCC_ClockConfig+0x278>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0207 	bic.w	r2, r3, #7
 8002d82:	4993      	ldr	r1, [pc, #588]	; (8002fd0 <HAL_RCC_ClockConfig+0x278>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d8a:	f7fe fd05 	bl	8001798 <HAL_GetTick>
 8002d8e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d92:	f7fe fd01 	bl	8001798 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e111      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da4:	4b8a      	ldr	r3, [pc, #552]	; (8002fd0 <HAL_RCC_ClockConfig+0x278>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d1ef      	bne.n	8002d92 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fae3 	bl	800238e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fce6 	bl	8001798 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dd0:	f7fe fce2 	bl	8001798 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0f2      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002de2:	f7ff fbd0 	bl	8002586 <LL_RCC_IsActiveFlag_HPRE>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f1      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d016      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fada 	bl	80023b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e02:	f7fe fcc9 	bl	8001798 <HAL_GetTick>
 8002e06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e0a:	f7fe fcc5 	bl	8001798 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0d5      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e1c:	f7ff fbc5 	bl	80025aa <LL_RCC_IsActiveFlag_C2HPRE>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f1      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fad3 	bl	80023e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fcac 	bl	8001798 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e44:	f7fe fca8 	bl	8001798 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0b8      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e56:	f7ff fbbb 	bl	80025d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f1      	beq.n	8002e44 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d016      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff facd 	bl	8002410 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e76:	f7fe fc8f 	bl	8001798 <HAL_GetTick>
 8002e7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e7e:	f7fe fc8b 	bl	8001798 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e09b      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e90:	f7ff fbb1 	bl	80025f6 <LL_RCC_IsActiveFlag_PPRE1>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f1      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d017      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fac3 	bl	8002438 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eb2:	f7fe fc71 	bl	8001798 <HAL_GetTick>
 8002eb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eba:	f7fe fc6d 	bl	8001798 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e07d      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ecc:	f7ff fba5 	bl	800261a <LL_RCC_IsActiveFlag_PPRE2>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f1      	beq.n	8002eba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d043      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002eea:	f7ff f863 	bl	8001fb4 <LL_RCC_HSE_IsReady>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d11e      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e067      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f00:	f7ff fafe 	bl	8002500 <LL_RCC_PLL_IsReady>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d113      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e05c      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f16:	f7ff f9cb 	bl	80022b0 <LL_RCC_MSI_IsReady>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d108      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e051      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f24:	f7ff f876 	bl	8002014 <LL_RCC_HSI_IsReady>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e04a      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fa09 	bl	800234e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3c:	f7fe fc2c 	bl	8001798 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fe fc28 	bl	8001798 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e036      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	f7ff fa0c 	bl	8002376 <LL_RCC_GetSysClkSource>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d1ec      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_ClockConfig+0x278>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d21b      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_RCC_ClockConfig+0x278>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 0207 	bic.w	r2, r3, #7
 8002f80:	4913      	ldr	r1, [pc, #76]	; (8002fd0 <HAL_RCC_ClockConfig+0x278>)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f88:	f7fe fc06 	bl	8001798 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f90:	f7fe fc02 	bl	8001798 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e012      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_ClockConfig+0x278>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1ef      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fb0:	f000 f87e 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <HAL_RCC_ClockConfig+0x27c>)
 8002fb8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002fba:	f7fe fbf9 	bl	80017b0 <HAL_GetTickPrio>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fb9b 	bl	80016fc <HAL_InitTick>
 8002fc6:	4603      	mov	r3, r0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	58004000 	.word	0x58004000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fde:	f7ff f9ca 	bl	8002376 <LL_RCC_GetSysClkSource>
 8002fe2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002fea:	f7ff f986 	bl	80022fa <LL_RCC_MSI_GetRange>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e04b      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d102      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e045      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b08      	cmp	r3, #8
 8003010:	d10a      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003012:	f7fe ff9f 	bl	8001f54 <LL_RCC_HSE_IsEnabledDiv2>
 8003016:	4603      	mov	r3, r0
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e03a      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e037      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003028:	f7ff faa1 	bl	800256e <LL_RCC_PLL_GetMainSource>
 800302c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d003      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x64>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x6a>
 800303a:	e00d      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800303c:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800303e:	60bb      	str	r3, [r7, #8]
        break;
 8003040:	e015      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003042:	f7fe ff87 	bl	8001f54 <LL_RCC_HSE_IsEnabledDiv2>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d102      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800304c:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800304e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003050:	e00d      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003054:	60bb      	str	r3, [r7, #8]
        break;
 8003056:	e00a      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003058:	f7ff f94f 	bl	80022fa <LL_RCC_MSI_GetRange>
 800305c:	4603      	mov	r3, r0
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306a:	60bb      	str	r3, [r7, #8]
        break;
 800306c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800306e:	f7ff fa59 	bl	8002524 <LL_RCC_PLL_GetN>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	fb03 f402 	mul.w	r4, r3, r2
 800307a:	f7ff fa6c 	bl	8002556 <LL_RCC_PLL_GetDivider>
 800307e:	4603      	mov	r3, r0
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	3301      	adds	r3, #1
 8003084:	fbb4 f4f3 	udiv	r4, r4, r3
 8003088:	f7ff fa59 	bl	800253e <LL_RCC_PLL_GetR>
 800308c:	4603      	mov	r3, r0
 800308e:	0f5b      	lsrs	r3, r3, #29
 8003090:	3301      	adds	r3, #1
 8003092:	fbb4 f3f3 	udiv	r3, r4, r3
 8003096:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003098:	68fb      	ldr	r3, [r7, #12]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd90      	pop	{r4, r7, pc}
 80030a2:	bf00      	nop
 80030a4:	08006070 	.word	0x08006070
 80030a8:	00f42400 	.word	0x00f42400
 80030ac:	01e84800 	.word	0x01e84800

080030b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b0:	b598      	push	{r3, r4, r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030b4:	f7ff ff90 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80030b8:	4604      	mov	r4, r0
 80030ba:	f7ff f9d1 	bl	8002460 <LL_RCC_GetAHBPrescaler>
 80030be:	4603      	mov	r3, r0
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	4a03      	ldr	r2, [pc, #12]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80030c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd98      	pop	{r3, r4, r7, pc}
 80030d4:	08006010 	.word	0x08006010

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b598      	push	{r3, r4, r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030dc:	f7ff ffe8 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 80030e0:	4604      	mov	r4, r0
 80030e2:	f7ff f9d7 	bl	8002494 <LL_RCC_GetAPB1Prescaler>
 80030e6:	4603      	mov	r3, r0
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd98      	pop	{r3, r4, r7, pc}
 8003100:	08006050 	.word	0x08006050

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b598      	push	{r3, r4, r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003108:	f7ff ffd2 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 800310c:	4604      	mov	r4, r0
 800310e:	f7ff f9cd 	bl	80024ac <LL_RCC_GetAPB2Prescaler>
 8003112:	4603      	mov	r3, r0
 8003114:	0adb      	lsrs	r3, r3, #11
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	4a04      	ldr	r2, [pc, #16]	; (800312c <HAL_RCC_GetPCLK2Freq+0x28>)
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd98      	pop	{r3, r4, r7, pc}
 800312c:	08006050 	.word	0x08006050

08003130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2bb0      	cmp	r3, #176	; 0xb0
 800313c:	d903      	bls.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e007      	b.n	8003156 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4a11      	ldr	r2, [pc, #68]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003154:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003156:	f7ff f98f 	bl	8002478 <LL_RCC_GetAHB4Prescaler>
 800315a:	4603      	mov	r3, r0
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	0c9c      	lsrs	r4, r3, #18
 800317a:	f7fe fedd 	bl	8001f38 <HAL_PWREx_GetVoltageRange>
 800317e:	4603      	mov	r3, r0
 8003180:	4619      	mov	r1, r3
 8003182:	4620      	mov	r0, r4
 8003184:	f000 f80c 	bl	80031a0 <RCC_SetFlashLatency>
 8003188:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bd90      	pop	{r4, r7, pc}
 8003192:	bf00      	nop
 8003194:	08006070 	.word	0x08006070
 8003198:	08006010 	.word	0x08006010
 800319c:	431bde83 	.word	0x431bde83

080031a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b093      	sub	sp, #76	; 0x4c
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <RCC_SetFlashLatency+0xf0>)
 80031ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80031b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80031b6:	4a37      	ldr	r2, [pc, #220]	; (8003294 <RCC_SetFlashLatency+0xf4>)
 80031b8:	f107 031c 	add.w	r3, r7, #28
 80031bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80031be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80031c2:	4b35      	ldr	r3, [pc, #212]	; (8003298 <RCC_SetFlashLatency+0xf8>)
 80031c4:	f107 040c 	add.w	r4, r7, #12
 80031c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031ce:	2300      	movs	r3, #0
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d8:	d11c      	bne.n	8003214 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031da:	2300      	movs	r3, #0
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
 80031de:	e015      	b.n	800320c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031e8:	4413      	add	r3, r2
 80031ea:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d808      	bhi.n	8003206 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031fc:	4413      	add	r3, r2
 80031fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003202:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003204:	e022      	b.n	800324c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003208:	3301      	adds	r3, #1
 800320a:	643b      	str	r3, [r7, #64]	; 0x40
 800320c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320e:	2b03      	cmp	r3, #3
 8003210:	d9e6      	bls.n	80031e0 <RCC_SetFlashLatency+0x40>
 8003212:	e01b      	b.n	800324c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003214:	2300      	movs	r3, #0
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003218:	e015      	b.n	8003246 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003222:	4413      	add	r3, r2
 8003224:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d808      	bhi.n	8003240 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003236:	4413      	add	r3, r2
 8003238:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800323c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800323e:	e005      	b.n	800324c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003242:	3301      	adds	r3, #1
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	2b02      	cmp	r3, #2
 800324a:	d9e6      	bls.n	800321a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <RCC_SetFlashLatency+0xfc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 0207 	bic.w	r2, r3, #7
 8003254:	4911      	ldr	r1, [pc, #68]	; (800329c <RCC_SetFlashLatency+0xfc>)
 8003256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800325c:	f7fe fa9c 	bl	8001798 <HAL_GetTick>
 8003260:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003262:	e008      	b.n	8003276 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003264:	f7fe fa98 	bl	8001798 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e007      	b.n	8003286 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <RCC_SetFlashLatency+0xfc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003280:	429a      	cmp	r2, r3
 8003282:	d1ef      	bne.n	8003264 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	374c      	adds	r7, #76	; 0x4c
 800328a:	46bd      	mov	sp, r7
 800328c:	bd90      	pop	{r4, r7, pc}
 800328e:	bf00      	nop
 8003290:	08005fe4 	.word	0x08005fe4
 8003294:	08005ff4 	.word	0x08005ff4
 8003298:	08006000 	.word	0x08006000
 800329c:	58004000 	.word	0x58004000

080032a0 <LL_RCC_LSE_IsEnabled>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <LL_RCC_LSE_IsEnabled+0x18>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <LL_RCC_LSE_IsEnabled+0x1a>
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_RCC_LSE_IsReady>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d101      	bne.n	80032dc <LL_RCC_LSE_IsReady+0x18>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_RCC_LSE_IsReady+0x1a>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_RCC_MSI_EnablePLLMode>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_RCC_SetRFWKPClockSource>:
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800331a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_RCC_SetSMPSClockSource>:
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f023 0203 	bic.w	r2, r3, #3
 8003344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4313      	orrs	r3, r2
 800334c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_RCC_SetSMPSPrescaler>:
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800336c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4313      	orrs	r3, r2
 8003374:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_RCC_SetUSARTClockSource>:
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <LL_RCC_SetLPUARTClockSource>:
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_RCC_SetI2CClockSource>:
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033f2:	43db      	mvns	r3, r3
 80033f4:	401a      	ands	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_RCC_SetLPTIMClockSource>:
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	43db      	mvns	r3, r3
 800342c:	401a      	ands	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_RCC_SetSAIClockSource>:
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800345c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_RCC_SetRNGClockSource>:
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_RCC_SetCLK48ClockSource>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_RCC_SetUSBClockSource>:
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ffe3 	bl	80034a0 <LL_RCC_SetCLK48ClockSource>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <LL_RCC_SetADCClockSource>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <LL_RCC_SetRTCClockSource>:
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_RCC_GetRTCClockSource>:
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_RCC_ForceBackupDomainReset>:
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_RCC_PLLSAI1_Enable>:
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035aa:	6013      	str	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_RCC_PLLSAI1_Disable>:
{
 80035b6:	b480      	push	{r7}
 80035b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035c8:	6013      	str	r3, [r2, #0]
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_RCC_PLLSAI1_IsReady>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e6:	d101      	bne.n	80035ec <LL_RCC_PLLSAI1_IsReady+0x18>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <LL_RCC_PLLSAI1_IsReady+0x1a>
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003600:	2300      	movs	r3, #0
 8003602:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003604:	2300      	movs	r3, #0
 8003606:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d034      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800361c:	d021      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800361e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003622:	d81b      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003628:	d01d      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800362a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800362e:	d815      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003638:	d110      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800364a:	e00d      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f94d 	bl	80038f0 <RCCEx_PLLSAI1_ConfigNP>
 8003656:	4603      	mov	r3, r0
 8003658:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800365a:	e005      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	77fb      	strb	r3, [r7, #31]
        break;
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003668:	7ffb      	ldrb	r3, [r7, #31]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fee8 	bl	8003448 <LL_RCC_SetSAIClockSource>
 8003678:	e001      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	d046      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800368a:	f7ff ff56 	bl	800353a <LL_RCC_GetRTCClockSource>
 800368e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	429a      	cmp	r2, r3
 8003698:	d03c      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800369a:	f7fe fc3d 	bl	8001f18 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff30 	bl	800350e <LL_RCC_SetRTCClockSource>
 80036ae:	e02e      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80036ba:	f7ff ff4b 	bl	8003554 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80036be:	f7ff ff5a 	bl	8003576 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80036d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80036da:	f7ff fde1 	bl	80032a0 <LL_RCC_LSE_IsEnabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d114      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036e4:	f7fe f858 	bl	8001798 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80036ea:	e00b      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe f854 	bl	8001798 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d902      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	77fb      	strb	r3, [r7, #31]
              break;
 8003702:	e004      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003704:	f7ff fdde 	bl	80032c4 <LL_RCC_LSE_IsReady>
 8003708:	4603      	mov	r3, r0
 800370a:	2b01      	cmp	r3, #1
 800370c:	d1ee      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800370e:	7ffb      	ldrb	r3, [r7, #31]
 8003710:	77bb      	strb	r3, [r7, #30]
 8003712:	e001      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003714:	7ffb      	ldrb	r3, [r7, #31]
 8003716:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fe2a 	bl	8003382 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fe35 	bl	80033ae <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fe5d 	bl	8003414 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fe52 	bl	8003414 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fe2a 	bl	80033da <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fe1f 	bl	80033da <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d022      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fe8d 	bl	80034cc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ba:	d107      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ca:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d4:	d10b      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3304      	adds	r3, #4
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f8e3 	bl	80039a6 <RCCEx_PLLSAI1_ConfigNQ>
 80037e0:	4603      	mov	r3, r0
 80037e2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80037e4:	7ffb      	ldrb	r3, [r7, #31]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d02b      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d008      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380c:	d003      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fe2a 	bl	8003474 <LL_RCC_SetRNGClockSource>
 8003820:	e00a      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	2000      	movs	r0, #0
 800382e:	f7ff fe21 	bl	8003474 <LL_RCC_SetRNGClockSource>
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff fe34 	bl	80034a0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003840:	d107      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003850:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385a:	2b00      	cmp	r3, #0
 800385c:	d022      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fe3d 	bl	80034e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003870:	d107      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388a:	d10b      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f8e3 	bl	8003a5c <RCCEx_PLLSAI1_ConfigNR>
 8003896:	4603      	mov	r3, r0
 8003898:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800389a:	7ffb      	ldrb	r3, [r7, #31]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80038a0:	7ffb      	ldrb	r3, [r7, #31]
 80038a2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fd26 	bl	8003306 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fd45 	bl	800335a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fd2c 	bl	8003332 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80038da:	7fbb      	ldrb	r3, [r7, #30]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80038e8:	f7ff fcfe 	bl	80032e8 <LL_RCC_MSI_EnablePLLMode>
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80038fc:	f7ff fe5b 	bl	80035b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003900:	f7fd ff4a 	bl	8001798 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003906:	e009      	b.n	800391c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003908:	f7fd ff46 	bl	8001798 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	73fb      	strb	r3, [r7, #15]
      break;
 800391a:	e004      	b.n	8003926 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800391c:	f7ff fe5a 	bl	80035d4 <LL_RCC_PLLSAI1_IsReady>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d137      	bne.n	800399c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003940:	4313      	orrs	r3, r2
 8003942:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003956:	4313      	orrs	r3, r2
 8003958:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800395a:	f7ff fe1d 	bl	8003598 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395e:	f7fd ff1b 	bl	8001798 <HAL_GetTick>
 8003962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003964:	e009      	b.n	800397a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003966:	f7fd ff17 	bl	8001798 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d902      	bls.n	800397a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	73fb      	strb	r3, [r7, #15]
        break;
 8003978:	e004      	b.n	8003984 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800397a:	f7ff fe2b 	bl	80035d4 <LL_RCC_PLLSAI1_IsReady>
 800397e:	4603      	mov	r3, r0
 8003980:	2b01      	cmp	r3, #1
 8003982:	d1f0      	bne.n	8003966 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003998:	4313      	orrs	r3, r2
 800399a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039b2:	f7ff fe00 	bl	80035b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039b6:	f7fd feef 	bl	8001798 <HAL_GetTick>
 80039ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039bc:	e009      	b.n	80039d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039be:	f7fd feeb 	bl	8001798 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d902      	bls.n	80039d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	e004      	b.n	80039dc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039d2:	f7ff fdff 	bl	80035d4 <LL_RCC_PLLSAI1_IsReady>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d137      	bne.n	8003a52 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f6:	4313      	orrs	r3, r2
 80039f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a10:	f7ff fdc2 	bl	8003598 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fd fec0 	bl	8001798 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a1a:	e009      	b.n	8003a30 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a1c:	f7fd febc 	bl	8001798 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a2e:	e004      	b.n	8003a3a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a30:	f7ff fdd0 	bl	80035d4 <LL_RCC_PLLSAI1_IsReady>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d1f0      	bne.n	8003a1c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a68:	f7ff fda5 	bl	80035b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a6c:	f7fd fe94 	bl	8001798 <HAL_GetTick>
 8003a70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a72:	e009      	b.n	8003a88 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a74:	f7fd fe90 	bl	8001798 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d902      	bls.n	8003a88 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	73fb      	strb	r3, [r7, #15]
      break;
 8003a86:	e004      	b.n	8003a92 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a88:	f7ff fda4 	bl	80035d4 <LL_RCC_PLLSAI1_IsReady>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d137      	bne.n	8003b08 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aac:	4313      	orrs	r3, r2
 8003aae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ac6:	f7ff fd67 	bl	8003598 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aca:	f7fd fe65 	bl	8001798 <HAL_GetTick>
 8003ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ad0:	e009      	b.n	8003ae6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad2:	f7fd fe61 	bl	8001798 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d902      	bls.n	8003ae6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	73fb      	strb	r3, [r7, #15]
        break;
 8003ae4:	e004      	b.n	8003af0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ae6:	f7ff fd75 	bl	80035d4 <LL_RCC_PLLSAI1_IsReady>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d1f0      	bne.n	8003ad2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e049      	b.n	8003bb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fd fc44 	bl	80013c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f000 ffc5 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e02e      	b.n	8003c36 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_TIM_Base_Start+0x84>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_TIM_Base_Start+0x34>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d115      	bne.n	8003c20 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_TIM_Base_Start+0x88>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d015      	beq.n	8003c32 <HAL_TIM_Base_Start+0x72>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0c:	d011      	beq.n	8003c32 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1e:	e008      	b.n	8003c32 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e000      	b.n	8003c34 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	00010007 	.word	0x00010007

08003c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e049      	b.n	8003cf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f841 	bl	8003cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f000 ff28 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x24>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e03c      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d109      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x3e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	e02f      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d109      	bne.n	8003d68 <HAL_TIM_PWM_Start+0x58>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e022      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d109      	bne.n	8003d82 <HAL_TIM_PWM_Start+0x72>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e015      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d109      	bne.n	8003d9c <HAL_TIM_PWM_Start+0x8c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e008      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e079      	b.n	8003eaa <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0xb6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc4:	e023      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0xc6>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd4:	e01b      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_PWM_Start+0xd6>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de4:	e013      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_PWM_Start+0xe6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df4:	e00b      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_PWM_Start+0xf6>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e04:	e003      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fae6 	bl	80053e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <HAL_TIM_PWM_Start+0x1a4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x12a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <HAL_TIM_PWM_Start+0x1a8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x12a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <HAL_TIM_PWM_Start+0x1ac>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x12e>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_TIM_PWM_Start+0x130>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <HAL_TIM_PWM_Start+0x1a4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <HAL_TIM_PWM_Start+0x158>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d115      	bne.n	8003e94 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <HAL_TIM_PWM_Start+0x1b0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d015      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x196>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d011      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e92:	e008      	b.n	8003ea6 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e000      	b.n	8003ea8 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800
 8003ec0:	00010007 	.word	0x00010007

08003ec4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e049      	b.n	8003f6a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f841 	bl	8003f72 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 fdec 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_IC_Start+0x1a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	e023      	b.n	8003fea <HAL_TIM_IC_Start+0x62>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_IC_Start+0x2a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e01b      	b.n	8003fea <HAL_TIM_IC_Start+0x62>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_IC_Start+0x3a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e013      	b.n	8003fea <HAL_TIM_IC_Start+0x62>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_IC_Start+0x4a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e00b      	b.n	8003fea <HAL_TIM_IC_Start+0x62>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_IC_Start+0x5a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e003      	b.n	8003fea <HAL_TIM_IC_Start+0x62>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_TIM_IC_Start+0x74>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e013      	b.n	8004024 <HAL_TIM_IC_Start+0x9c>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d104      	bne.n	800400c <HAL_TIM_IC_Start+0x84>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e00b      	b.n	8004024 <HAL_TIM_IC_Start+0x9c>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b08      	cmp	r3, #8
 8004010:	d104      	bne.n	800401c <HAL_TIM_IC_Start+0x94>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e003      	b.n	8004024 <HAL_TIM_IC_Start+0x9c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004022:	b2db      	uxtb	r3, r3
 8004024:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d102      	bne.n	8004032 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800402c:	7bbb      	ldrb	r3, [r7, #14]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d001      	beq.n	8004036 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e079      	b.n	800412a <HAL_TIM_IC_Start+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <HAL_TIM_IC_Start+0xbe>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004044:	e023      	b.n	800408e <HAL_TIM_IC_Start+0x106>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d104      	bne.n	8004056 <HAL_TIM_IC_Start+0xce>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004054:	e01b      	b.n	800408e <HAL_TIM_IC_Start+0x106>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d104      	bne.n	8004066 <HAL_TIM_IC_Start+0xde>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004064:	e013      	b.n	800408e <HAL_TIM_IC_Start+0x106>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b0c      	cmp	r3, #12
 800406a:	d104      	bne.n	8004076 <HAL_TIM_IC_Start+0xee>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004074:	e00b      	b.n	800408e <HAL_TIM_IC_Start+0x106>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b10      	cmp	r3, #16
 800407a:	d104      	bne.n	8004086 <HAL_TIM_IC_Start+0xfe>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004084:	e003      	b.n	800408e <HAL_TIM_IC_Start+0x106>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <HAL_TIM_IC_Start+0x116>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409c:	e013      	b.n	80040c6 <HAL_TIM_IC_Start+0x13e>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_IC_Start+0x126>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ac:	e00b      	b.n	80040c6 <HAL_TIM_IC_Start+0x13e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d104      	bne.n	80040be <HAL_TIM_IC_Start+0x136>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040bc:	e003      	b.n	80040c6 <HAL_TIM_IC_Start+0x13e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f98a 	bl	80053e8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a16      	ldr	r2, [pc, #88]	; (8004134 <HAL_TIM_IC_Start+0x1ac>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIM_IC_Start+0x160>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e6:	d115      	bne.n	8004114 <HAL_TIM_IC_Start+0x18c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_TIM_IC_Start+0x1b0>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b06      	cmp	r3, #6
 80040f8:	d015      	beq.n	8004126 <HAL_TIM_IC_Start+0x19e>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d011      	beq.n	8004126 <HAL_TIM_IC_Start+0x19e>
    {
      __HAL_TIM_ENABLE(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004112:	e008      	b.n	8004126 <HAL_TIM_IC_Start+0x19e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e000      	b.n	8004128 <HAL_TIM_IC_Start+0x1a0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40012c00 	.word	0x40012c00
 8004138:	00010007 	.word	0x00010007

0800413c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <HAL_TIM_IC_Start_IT+0x1a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e023      	b.n	800419e <HAL_TIM_IC_Start_IT+0x62>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d104      	bne.n	8004166 <HAL_TIM_IC_Start_IT+0x2a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e01b      	b.n	800419e <HAL_TIM_IC_Start_IT+0x62>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d104      	bne.n	8004176 <HAL_TIM_IC_Start_IT+0x3a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e013      	b.n	800419e <HAL_TIM_IC_Start_IT+0x62>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d104      	bne.n	8004186 <HAL_TIM_IC_Start_IT+0x4a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e00b      	b.n	800419e <HAL_TIM_IC_Start_IT+0x62>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b10      	cmp	r3, #16
 800418a:	d104      	bne.n	8004196 <HAL_TIM_IC_Start_IT+0x5a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004192:	b2db      	uxtb	r3, r3
 8004194:	e003      	b.n	800419e <HAL_TIM_IC_Start_IT+0x62>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800419c:	b2db      	uxtb	r3, r3
 800419e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <HAL_TIM_IC_Start_IT+0x74>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e013      	b.n	80041d8 <HAL_TIM_IC_Start_IT+0x9c>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d104      	bne.n	80041c0 <HAL_TIM_IC_Start_IT+0x84>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e00b      	b.n	80041d8 <HAL_TIM_IC_Start_IT+0x9c>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d104      	bne.n	80041d0 <HAL_TIM_IC_Start_IT+0x94>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e003      	b.n	80041d8 <HAL_TIM_IC_Start_IT+0x9c>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041e0:	7bbb      	ldrb	r3, [r7, #14]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d001      	beq.n	80041ea <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0bf      	b.n	800436a <HAL_TIM_IC_Start_IT+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <HAL_TIM_IC_Start_IT+0xbe>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f8:	e023      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x106>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d104      	bne.n	800420a <HAL_TIM_IC_Start_IT+0xce>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004208:	e01b      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x106>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d104      	bne.n	800421a <HAL_TIM_IC_Start_IT+0xde>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004218:	e013      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x106>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b0c      	cmp	r3, #12
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0xee>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004228:	e00b      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x106>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0xfe>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004238:	e003      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x106>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <HAL_TIM_IC_Start_IT+0x116>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	e013      	b.n	800427a <HAL_TIM_IC_Start_IT+0x13e>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d104      	bne.n	8004262 <HAL_TIM_IC_Start_IT+0x126>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004260:	e00b      	b.n	800427a <HAL_TIM_IC_Start_IT+0x13e>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d104      	bne.n	8004272 <HAL_TIM_IC_Start_IT+0x136>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004270:	e003      	b.n	800427a <HAL_TIM_IC_Start_IT+0x13e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d841      	bhi.n	8004304 <HAL_TIM_IC_Start_IT+0x1c8>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <HAL_TIM_IC_Start_IT+0x14c>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	080042bd 	.word	0x080042bd
 800428c:	08004305 	.word	0x08004305
 8004290:	08004305 	.word	0x08004305
 8004294:	08004305 	.word	0x08004305
 8004298:	080042cf 	.word	0x080042cf
 800429c:	08004305 	.word	0x08004305
 80042a0:	08004305 	.word	0x08004305
 80042a4:	08004305 	.word	0x08004305
 80042a8:	080042e1 	.word	0x080042e1
 80042ac:	08004305 	.word	0x08004305
 80042b0:	08004305 	.word	0x08004305
 80042b4:	08004305 	.word	0x08004305
 80042b8:	080042f3 	.word	0x080042f3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0202 	orr.w	r2, r2, #2
 80042ca:	60da      	str	r2, [r3, #12]
      break;
 80042cc:	e01b      	b.n	8004306 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0204 	orr.w	r2, r2, #4
 80042dc:	60da      	str	r2, [r3, #12]
      break;
 80042de:	e012      	b.n	8004306 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0208 	orr.w	r2, r2, #8
 80042ee:	60da      	str	r2, [r3, #12]
      break;
 80042f0:	e009      	b.n	8004306 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0210 	orr.w	r2, r2, #16
 8004300:	60da      	str	r2, [r3, #12]
      break;
 8004302:	e000      	b.n	8004306 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8004304:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2201      	movs	r2, #1
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f86a 	bl	80053e8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a16      	ldr	r2, [pc, #88]	; (8004374 <HAL_TIM_IC_Start_IT+0x238>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIM_IC_Start_IT+0x1ec>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d115      	bne.n	8004354 <HAL_TIM_IC_Start_IT+0x218>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_TIM_IC_Start_IT+0x23c>)
 8004330:	4013      	ands	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b06      	cmp	r3, #6
 8004338:	d015      	beq.n	8004366 <HAL_TIM_IC_Start_IT+0x22a>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d011      	beq.n	8004366 <HAL_TIM_IC_Start_IT+0x22a>
    {
      __HAL_TIM_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	e008      	b.n	8004366 <HAL_TIM_IC_Start_IT+0x22a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e000      	b.n	8004368 <HAL_TIM_IC_Start_IT+0x22c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00
 8004378:	00010007 	.word	0x00010007

0800437c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b02      	cmp	r3, #2
 8004390:	d122      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0202 	mvn.w	r2, #2
 80043a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc ff66 	bl	8001290 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fb6c 	bl	8004aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fb73 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d122      	bne.n	800442c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d11b      	bne.n	800442c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0204 	mvn.w	r2, #4
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc ff3c 	bl	8001290 <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fb42 	bl	8004aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fb49 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b08      	cmp	r3, #8
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b08      	cmp	r3, #8
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0208 	mvn.w	r2, #8
 8004450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2204      	movs	r2, #4
 8004456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc ff12 	bl	8001290 <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fb18 	bl	8004aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fb1f 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b10      	cmp	r3, #16
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b10      	cmp	r3, #16
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0210 	mvn.w	r2, #16
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2208      	movs	r2, #8
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fc fee8 	bl	8001290 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 faee 	bl	8004aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 faf5 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0201 	mvn.w	r2, #1
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fac8 	bl	8004a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d10e      	bne.n	800452c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004518:	2b80      	cmp	r3, #128	; 0x80
 800451a:	d107      	bne.n	800452c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 ffee 	bl	8005508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453a:	d10e      	bne.n	800455a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d107      	bne.n	800455a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 ffe1 	bl	800551c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d10e      	bne.n	8004586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d107      	bne.n	8004586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 faa3 	bl	8004acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b20      	cmp	r3, #32
 8004592:	d10e      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0220 	mvn.w	r2, #32
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 ffa1 	bl	80054f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e082      	b.n	80046da <HAL_TIM_IC_ConfigChannel+0x120>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d11b      	bne.n	800461a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f000 fd57 	bl	80050a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 020c 	bic.w	r2, r2, #12
 8004604:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6999      	ldr	r1, [r3, #24]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	619a      	str	r2, [r3, #24]
 8004618:	e05a      	b.n	80046d0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11c      	bne.n	800465a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6819      	ldr	r1, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f000 fdb7 	bl	80051a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004642:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	021a      	lsls	r2, r3, #8
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	619a      	str	r2, [r3, #24]
 8004658:	e03a      	b.n	80046d0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d11b      	bne.n	8004698 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6819      	ldr	r1, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f000 fe04 	bl	800527c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 020c 	bic.w	r2, r2, #12
 8004682:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69d9      	ldr	r1, [r3, #28]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	61da      	str	r2, [r3, #28]
 8004696:	e01b      	b.n	80046d0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f000 fe24 	bl	80052f4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69d9      	ldr	r1, [r3, #28]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	021a      	lsls	r2, r3, #8
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e0fd      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x216>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b14      	cmp	r3, #20
 800470a:	f200 80f0 	bhi.w	80048ee <HAL_TIM_PWM_ConfigChannel+0x20a>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	08004769 	.word	0x08004769
 8004718:	080048ef 	.word	0x080048ef
 800471c:	080048ef 	.word	0x080048ef
 8004720:	080048ef 	.word	0x080048ef
 8004724:	080047a9 	.word	0x080047a9
 8004728:	080048ef 	.word	0x080048ef
 800472c:	080048ef 	.word	0x080048ef
 8004730:	080048ef 	.word	0x080048ef
 8004734:	080047eb 	.word	0x080047eb
 8004738:	080048ef 	.word	0x080048ef
 800473c:	080048ef 	.word	0x080048ef
 8004740:	080048ef 	.word	0x080048ef
 8004744:	0800482b 	.word	0x0800482b
 8004748:	080048ef 	.word	0x080048ef
 800474c:	080048ef 	.word	0x080048ef
 8004750:	080048ef 	.word	0x080048ef
 8004754:	0800486d 	.word	0x0800486d
 8004758:	080048ef 	.word	0x080048ef
 800475c:	080048ef 	.word	0x080048ef
 8004760:	080048ef 	.word	0x080048ef
 8004764:	080048ad 	.word	0x080048ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa1a 	bl	8004ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0208 	orr.w	r2, r2, #8
 8004782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0204 	bic.w	r2, r2, #4
 8004792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6999      	ldr	r1, [r3, #24]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	619a      	str	r2, [r3, #24]
      break;
 80047a6:	e0a3      	b.n	80048f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fa76 	bl	8004ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6999      	ldr	r1, [r3, #24]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	021a      	lsls	r2, r3, #8
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	619a      	str	r2, [r3, #24]
      break;
 80047e8:	e082      	b.n	80048f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 facf 	bl	8004d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0208 	orr.w	r2, r2, #8
 8004804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0204 	bic.w	r2, r2, #4
 8004814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69d9      	ldr	r1, [r3, #28]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	61da      	str	r2, [r3, #28]
      break;
 8004828:	e062      	b.n	80048f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fb27 	bl	8004e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69d9      	ldr	r1, [r3, #28]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	021a      	lsls	r2, r3, #8
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	61da      	str	r2, [r3, #28]
      break;
 800486a:	e041      	b.n	80048f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fb64 	bl	8004f40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0208 	orr.w	r2, r2, #8
 8004886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0204 	bic.w	r2, r2, #4
 8004896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048aa:	e021      	b.n	80048f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb9c 	bl	8004ff0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	021a      	lsls	r2, r3, #8
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048ec:	e000      	b.n	80048f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80048ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop

08004904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIM_ConfigClockSource+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e0b5      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x184>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800493a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800493e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004946:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004958:	d03e      	beq.n	80049d8 <HAL_TIM_ConfigClockSource+0xd4>
 800495a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495e:	f200 8087 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	f000 8085 	beq.w	8004a74 <HAL_TIM_ConfigClockSource+0x170>
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496e:	d87f      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b70      	cmp	r3, #112	; 0x70
 8004972:	d01a      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0xa6>
 8004974:	2b70      	cmp	r3, #112	; 0x70
 8004976:	d87b      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d050      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x11a>
 800497c:	2b60      	cmp	r3, #96	; 0x60
 800497e:	d877      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b50      	cmp	r3, #80	; 0x50
 8004982:	d03c      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0xfa>
 8004984:	2b50      	cmp	r3, #80	; 0x50
 8004986:	d873      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d058      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x13a>
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d86f      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	d064      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x15a>
 8004994:	2b30      	cmp	r3, #48	; 0x30
 8004996:	d86b      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d060      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x15a>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d867      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05c      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x15a>
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d05a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049a8:	e062      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f000 fcf5 	bl	80053a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	609a      	str	r2, [r3, #8]
      break;
 80049d6:	e04e      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6899      	ldr	r1, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f000 fcde 	bl	80053a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049fa:	609a      	str	r2, [r3, #8]
      break;
 80049fc:	e03b      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6859      	ldr	r1, [r3, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f000 fb9a 	bl	8005144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2150      	movs	r1, #80	; 0x50
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fca9 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004a1c:	e02b      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f000 fbf6 	bl	800521c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2160      	movs	r1, #96	; 0x60
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fc99 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004a3c:	e01b      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 fb7a 	bl	8005144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2140      	movs	r1, #64	; 0x40
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fc89 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e00b      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f000 fc80 	bl	800536e <TIM_ITRx_SetConfig>
        break;
 8004a6e:	e002      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004a70:	bf00      	nop
 8004a72:	e000      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004a74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a2a      	ldr	r2, [pc, #168]	; (8004b9c <TIM_Base_SetConfig+0xbc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_Base_SetConfig+0x20>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afe:	d108      	bne.n	8004b12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <TIM_Base_SetConfig+0xbc>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00b      	beq.n	8004b32 <TIM_Base_SetConfig+0x52>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d007      	beq.n	8004b32 <TIM_Base_SetConfig+0x52>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <TIM_Base_SetConfig+0xc0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_Base_SetConfig+0x52>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <TIM_Base_SetConfig+0xc4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d108      	bne.n	8004b44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <TIM_Base_SetConfig+0xbc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0xa0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <TIM_Base_SetConfig+0xc0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0xa0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ba4 <TIM_Base_SetConfig+0xc4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d103      	bne.n	8004b88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	615a      	str	r2, [r3, #20]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800

08004ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0201 	bic.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f023 0302 	bic.w	r3, r3, #2
 8004bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <TIM_OC1_SetConfig+0xec>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d007      	beq.n	8004c18 <TIM_OC1_SetConfig+0x70>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <TIM_OC1_SetConfig+0xf0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_OC1_SetConfig+0x70>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <TIM_OC1_SetConfig+0xf4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10c      	bne.n	8004c32 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0308 	bic.w	r3, r3, #8
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 0304 	bic.w	r3, r3, #4
 8004c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <TIM_OC1_SetConfig+0xec>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d007      	beq.n	8004c4a <TIM_OC1_SetConfig+0xa2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <TIM_OC1_SetConfig+0xf4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d003      	beq.n	8004c4a <TIM_OC1_SetConfig+0xa2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <TIM_OC1_SetConfig+0xf0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d111      	bne.n	8004c6e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40014800 	.word	0x40014800
 8004c9c:	40014400 	.word	0x40014400

08004ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0210 	bic.w	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0320 	bic.w	r3, r3, #32
 8004cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a22      	ldr	r2, [pc, #136]	; (8004d88 <TIM_OC2_SetConfig+0xe8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10d      	bne.n	8004d20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <TIM_OC2_SetConfig+0xe8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_OC2_SetConfig+0x98>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <TIM_OC2_SetConfig+0xec>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC2_SetConfig+0x98>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <TIM_OC2_SetConfig+0xf0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d113      	bne.n	8004d60 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800

08004d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <TIM_OC3_SetConfig+0xe4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10d      	bne.n	8004e12 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <TIM_OC3_SetConfig+0xe4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_OC3_SetConfig+0x96>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <TIM_OC3_SetConfig+0xe8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_OC3_SetConfig+0x96>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <TIM_OC3_SetConfig+0xec>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d113      	bne.n	8004e52 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <TIM_OC4_SetConfig+0xb0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_OC4_SetConfig+0x74>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <TIM_OC4_SetConfig+0xb4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_OC4_SetConfig+0x74>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <TIM_OC4_SetConfig+0xb8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d109      	bne.n	8004f0c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	019b      	lsls	r3, r3, #6
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800

08004f40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <TIM_OC5_SetConfig+0xa4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d007      	beq.n	8004faa <TIM_OC5_SetConfig+0x6a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a12      	ldr	r2, [pc, #72]	; (8004fe8 <TIM_OC5_SetConfig+0xa8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d003      	beq.n	8004faa <TIM_OC5_SetConfig+0x6a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <TIM_OC5_SetConfig+0xac>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d109      	bne.n	8004fbe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	621a      	str	r2, [r3, #32]
}
 8004fd8:	bf00      	nop
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	051b      	lsls	r3, r3, #20
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a14      	ldr	r2, [pc, #80]	; (8005098 <TIM_OC6_SetConfig+0xa8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_OC6_SetConfig+0x6c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a13      	ldr	r2, [pc, #76]	; (800509c <TIM_OC6_SetConfig+0xac>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC6_SetConfig+0x6c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <TIM_OC6_SetConfig+0xb0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d109      	bne.n	8005070 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	029b      	lsls	r3, r3, #10
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800

080050a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <TIM_TI1_SetConfig+0x9c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_TI1_SetConfig+0x36>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d101      	bne.n	80050de <TIM_TI1_SetConfig+0x3a>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <TIM_TI1_SetConfig+0x3c>
 80050de:	2300      	movs	r3, #0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <TIM_TI1_SetConfig+0x52>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e003      	b.n	80050fe <TIM_TI1_SetConfig+0x5a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	b2db      	uxtb	r3, r3
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f023 030a 	bic.w	r3, r3, #10
 8005118:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f003 030a 	and.w	r3, r3, #10
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00

08005144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f023 0201 	bic.w	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800516e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f023 030a 	bic.w	r3, r3, #10
 8005180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b087      	sub	sp, #28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f023 0210 	bic.w	r2, r3, #16
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	031b      	lsls	r3, r3, #12
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f023 0210 	bic.w	r2, r3, #16
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	031b      	lsls	r3, r3, #12
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	621a      	str	r2, [r3, #32]
}
 8005270:	bf00      	nop
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0303 	bic.w	r3, r3, #3
 80052a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80052cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	621a      	str	r2, [r3, #32]
}
 80052e8:	bf00      	nop
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005320:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005332:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	031b      	lsls	r3, r3, #12
 8005338:	b29b      	uxth	r3, r3
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005346:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	031b      	lsls	r3, r3, #12
 800534c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	f043 0307 	orr.w	r3, r3, #7
 8005394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]
}
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	021a      	lsls	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	609a      	str	r2, [r3, #8]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2201      	movs	r2, #1
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	43db      	mvns	r3, r3
 800540a:	401a      	ands	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1a      	ldr	r2, [r3, #32]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005448:	2302      	movs	r3, #2
 800544a:	e04a      	b.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800547c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a12      	ldr	r2, [pc, #72]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d10c      	bne.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00

080054f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_RCC_GetUSARTClockSource>:
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4013      	ands	r3, r2
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <LL_RCC_GetLPUARTClockSource>:
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4013      	ands	r3, r2
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e042      	b.n	8005608 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fb ff73 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2224      	movs	r2, #36	; 0x24
 800559e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f82c 	bl	8005610 <UART_SetConfig>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e022      	b.n	8005608 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa26 	bl	8005a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 faad 	bl	8005b60 <UART_CheckIdleState>
 8005606:	4603      	mov	r3, r0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005610:	b5b0      	push	{r4, r5, r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	4313      	orrs	r3, r2
 8005632:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4ba3      	ldr	r3, [pc, #652]	; (80058c8 <UART_SetConfig+0x2b8>)
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	69f9      	ldr	r1, [r7, #28]
 8005644:	430b      	orrs	r3, r1
 8005646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a98      	ldr	r2, [pc, #608]	; (80058cc <UART_SetConfig+0x2bc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	4313      	orrs	r3, r2
 8005676:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005682:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	69f9      	ldr	r1, [r7, #28]
 800568c:	430b      	orrs	r3, r1
 800568e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	f023 010f 	bic.w	r1, r3, #15
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a89      	ldr	r2, [pc, #548]	; (80058d0 <UART_SetConfig+0x2c0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d120      	bne.n	80056f2 <UART_SetConfig+0xe2>
 80056b0:	2003      	movs	r0, #3
 80056b2:	f7ff ff3d 	bl	8005530 <LL_RCC_GetUSARTClockSource>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d817      	bhi.n	80056ec <UART_SetConfig+0xdc>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0xb4>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056e1 	.word	0x080056e1
 80056cc:	080056db 	.word	0x080056db
 80056d0:	080056e7 	.word	0x080056e7
 80056d4:	2301      	movs	r3, #1
 80056d6:	76fb      	strb	r3, [r7, #27]
 80056d8:	e038      	b.n	800574c <UART_SetConfig+0x13c>
 80056da:	2302      	movs	r3, #2
 80056dc:	76fb      	strb	r3, [r7, #27]
 80056de:	e035      	b.n	800574c <UART_SetConfig+0x13c>
 80056e0:	2304      	movs	r3, #4
 80056e2:	76fb      	strb	r3, [r7, #27]
 80056e4:	e032      	b.n	800574c <UART_SetConfig+0x13c>
 80056e6:	2308      	movs	r3, #8
 80056e8:	76fb      	strb	r3, [r7, #27]
 80056ea:	e02f      	b.n	800574c <UART_SetConfig+0x13c>
 80056ec:	2310      	movs	r3, #16
 80056ee:	76fb      	strb	r3, [r7, #27]
 80056f0:	e02c      	b.n	800574c <UART_SetConfig+0x13c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a75      	ldr	r2, [pc, #468]	; (80058cc <UART_SetConfig+0x2bc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d125      	bne.n	8005748 <UART_SetConfig+0x138>
 80056fc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005700:	f7ff ff26 	bl	8005550 <LL_RCC_GetLPUARTClockSource>
 8005704:	4603      	mov	r3, r0
 8005706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800570a:	d017      	beq.n	800573c <UART_SetConfig+0x12c>
 800570c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005710:	d817      	bhi.n	8005742 <UART_SetConfig+0x132>
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005716:	d00b      	beq.n	8005730 <UART_SetConfig+0x120>
 8005718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571c:	d811      	bhi.n	8005742 <UART_SetConfig+0x132>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <UART_SetConfig+0x11a>
 8005722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005726:	d006      	beq.n	8005736 <UART_SetConfig+0x126>
 8005728:	e00b      	b.n	8005742 <UART_SetConfig+0x132>
 800572a:	2300      	movs	r3, #0
 800572c:	76fb      	strb	r3, [r7, #27]
 800572e:	e00d      	b.n	800574c <UART_SetConfig+0x13c>
 8005730:	2302      	movs	r3, #2
 8005732:	76fb      	strb	r3, [r7, #27]
 8005734:	e00a      	b.n	800574c <UART_SetConfig+0x13c>
 8005736:	2304      	movs	r3, #4
 8005738:	76fb      	strb	r3, [r7, #27]
 800573a:	e007      	b.n	800574c <UART_SetConfig+0x13c>
 800573c:	2308      	movs	r3, #8
 800573e:	76fb      	strb	r3, [r7, #27]
 8005740:	e004      	b.n	800574c <UART_SetConfig+0x13c>
 8005742:	2310      	movs	r3, #16
 8005744:	76fb      	strb	r3, [r7, #27]
 8005746:	e001      	b.n	800574c <UART_SetConfig+0x13c>
 8005748:	2310      	movs	r3, #16
 800574a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a5e      	ldr	r2, [pc, #376]	; (80058cc <UART_SetConfig+0x2bc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	f040 808b 	bne.w	800586e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005758:	7efb      	ldrb	r3, [r7, #27]
 800575a:	2b08      	cmp	r3, #8
 800575c:	d823      	bhi.n	80057a6 <UART_SetConfig+0x196>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <UART_SetConfig+0x154>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005789 	.word	0x08005789
 8005768:	080057a7 	.word	0x080057a7
 800576c:	08005791 	.word	0x08005791
 8005770:	080057a7 	.word	0x080057a7
 8005774:	08005797 	.word	0x08005797
 8005778:	080057a7 	.word	0x080057a7
 800577c:	080057a7 	.word	0x080057a7
 8005780:	080057a7 	.word	0x080057a7
 8005784:	0800579f 	.word	0x0800579f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fd fca6 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 800578c:	6178      	str	r0, [r7, #20]
        break;
 800578e:	e00f      	b.n	80057b0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005790:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <UART_SetConfig+0x2c4>)
 8005792:	617b      	str	r3, [r7, #20]
        break;
 8005794:	e00c      	b.n	80057b0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005796:	f7fd fc1f 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 800579a:	6178      	str	r0, [r7, #20]
        break;
 800579c:	e008      	b.n	80057b0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a2:	617b      	str	r3, [r7, #20]
        break;
 80057a4:	e004      	b.n	80057b0 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	76bb      	strb	r3, [r7, #26]
        break;
 80057ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 811a 	beq.w	80059ec <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	4a46      	ldr	r2, [pc, #280]	; (80058d8 <UART_SetConfig+0x2c8>)
 80057be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c2:	461a      	mov	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ca:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4413      	add	r3, r2
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d305      	bcc.n	80057e8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d902      	bls.n	80057ee <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	76bb      	strb	r3, [r7, #26]
 80057ec:	e0fe      	b.n	80059ec <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	4a37      	ldr	r2, [pc, #220]	; (80058d8 <UART_SetConfig+0x2c8>)
 80057fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005800:	b29a      	uxth	r2, r3
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	f7fb f8d9 	bl	80009bc <__aeabi_uldivmod>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	020b      	lsls	r3, r1, #8
 800581c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005820:	0202      	lsls	r2, r0, #8
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	6849      	ldr	r1, [r1, #4]
 8005826:	0849      	lsrs	r1, r1, #1
 8005828:	4608      	mov	r0, r1
 800582a:	f04f 0100 	mov.w	r1, #0
 800582e:	1814      	adds	r4, r2, r0
 8005830:	eb43 0501 	adc.w	r5, r3, r1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	461a      	mov	r2, r3
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	4620      	mov	r0, r4
 8005840:	4629      	mov	r1, r5
 8005842:	f7fb f8bb 	bl	80009bc <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4613      	mov	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005854:	d308      	bcc.n	8005868 <UART_SetConfig+0x258>
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585c:	d204      	bcs.n	8005868 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	e0c1      	b.n	80059ec <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	76bb      	strb	r3, [r7, #26]
 800586c:	e0be      	b.n	80059ec <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005876:	d16a      	bne.n	800594e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005878:	7efb      	ldrb	r3, [r7, #27]
 800587a:	3b01      	subs	r3, #1
 800587c:	2b07      	cmp	r3, #7
 800587e:	d82d      	bhi.n	80058dc <UART_SetConfig+0x2cc>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0x278>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058a9 	.word	0x080058a9
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058b7 	.word	0x080058b7
 8005898:	080058dd 	.word	0x080058dd
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058bf 	.word	0x080058bf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fd fc2c 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 80058ac:	6178      	str	r0, [r7, #20]
        break;
 80058ae:	e01a      	b.n	80058e6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b0:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <UART_SetConfig+0x2c4>)
 80058b2:	617b      	str	r3, [r7, #20]
        break;
 80058b4:	e017      	b.n	80058e6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b6:	f7fd fb8f 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80058ba:	6178      	str	r0, [r7, #20]
        break;
 80058bc:	e013      	b.n	80058e6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c2:	617b      	str	r3, [r7, #20]
        break;
 80058c4:	e00f      	b.n	80058e6 <UART_SetConfig+0x2d6>
 80058c6:	bf00      	nop
 80058c8:	cfff69f3 	.word	0xcfff69f3
 80058cc:	40008000 	.word	0x40008000
 80058d0:	40013800 	.word	0x40013800
 80058d4:	00f42400 	.word	0x00f42400
 80058d8:	080060b0 	.word	0x080060b0
      default:
        pclk = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	76bb      	strb	r3, [r7, #26]
        break;
 80058e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d07f      	beq.n	80059ec <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	4a48      	ldr	r2, [pc, #288]	; (8005a14 <UART_SetConfig+0x404>)
 80058f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058f6:	461a      	mov	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80058fe:	005a      	lsls	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	441a      	add	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	b29b      	uxth	r3, r3
 8005912:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b0f      	cmp	r3, #15
 8005918:	d916      	bls.n	8005948 <UART_SetConfig+0x338>
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005920:	d212      	bcs.n	8005948 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	b29b      	uxth	r3, r3
 8005926:	f023 030f 	bic.w	r3, r3, #15
 800592a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	b29a      	uxth	r2, r3
 8005938:	89fb      	ldrh	r3, [r7, #14]
 800593a:	4313      	orrs	r3, r2
 800593c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	89fa      	ldrh	r2, [r7, #14]
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	e051      	b.n	80059ec <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	76bb      	strb	r3, [r7, #26]
 800594c:	e04e      	b.n	80059ec <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800594e:	7efb      	ldrb	r3, [r7, #27]
 8005950:	3b01      	subs	r3, #1
 8005952:	2b07      	cmp	r3, #7
 8005954:	d821      	bhi.n	800599a <UART_SetConfig+0x38a>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0x34c>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	0800597d 	.word	0x0800597d
 8005960:	08005985 	.word	0x08005985
 8005964:	0800599b 	.word	0x0800599b
 8005968:	0800598b 	.word	0x0800598b
 800596c:	0800599b 	.word	0x0800599b
 8005970:	0800599b 	.word	0x0800599b
 8005974:	0800599b 	.word	0x0800599b
 8005978:	08005993 	.word	0x08005993
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800597c:	f7fd fbc2 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8005980:	6178      	str	r0, [r7, #20]
        break;
 8005982:	e00f      	b.n	80059a4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005984:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <UART_SetConfig+0x408>)
 8005986:	617b      	str	r3, [r7, #20]
        break;
 8005988:	e00c      	b.n	80059a4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598a:	f7fd fb25 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 800598e:	6178      	str	r0, [r7, #20]
        break;
 8005990:	e008      	b.n	80059a4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	617b      	str	r3, [r7, #20]
        break;
 8005998:	e004      	b.n	80059a4 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	76bb      	strb	r3, [r7, #26]
        break;
 80059a2:	bf00      	nop
    }

    if (pclk != 0U)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d020      	beq.n	80059ec <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	4a19      	ldr	r2, [pc, #100]	; (8005a14 <UART_SetConfig+0x404>)
 80059b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b4:	461a      	mov	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	441a      	add	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b0f      	cmp	r3, #15
 80059d4:	d908      	bls.n	80059e8 <UART_SetConfig+0x3d8>
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d204      	bcs.n	80059e8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	60da      	str	r2, [r3, #12]
 80059e6:	e001      	b.n	80059ec <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a08:	7ebb      	ldrb	r3, [r7, #26]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bdb0      	pop	{r4, r5, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	080060b0 	.word	0x080060b0
 8005a18:	00f42400 	.word	0x00f42400

08005a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01a      	beq.n	8005b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b1a:	d10a      	bne.n	8005b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b70:	f7fb fe12 	bl	8001798 <HAL_GetTick>
 8005b74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d10e      	bne.n	8005ba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f82f 	bl	8005bf6 <UART_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e025      	b.n	8005bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d10e      	bne.n	8005bce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f819 	bl	8005bf6 <UART_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e00f      	b.n	8005bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	603b      	str	r3, [r7, #0]
 8005c02:	4613      	mov	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c06:	e062      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d05e      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c10:	f7fb fdc2 	bl	8001798 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d302      	bcc.n	8005c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11d      	bne.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e045      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d02e      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7e:	d126      	bne.n	8005cce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c98:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e00f      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	bf0c      	ite	eq
 8005cde:	2301      	moveq	r3, #1
 8005ce0:	2300      	movne	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d08d      	beq.n	8005c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_UARTEx_DisableFifoMode+0x16>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e027      	b.n	8005d5c <HAL_UARTEx_DisableFifoMode+0x66>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2224      	movs	r2, #36	; 0x24
 8005d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e02d      	b.n	8005ddc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2224      	movs	r2, #36	; 0x24
 8005d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f84f 	bl	8005e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e02d      	b.n	8005e58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2224      	movs	r2, #36	; 0x24
 8005e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f811 	bl	8005e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d108      	bne.n	8005e82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e80:	e031      	b.n	8005ee6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e82:	2308      	movs	r3, #8
 8005e84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e86:	2308      	movs	r3, #8
 8005e88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	0e5b      	lsrs	r3, r3, #25
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	0f5b      	lsrs	r3, r3, #29
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eaa:	7bbb      	ldrb	r3, [r7, #14]
 8005eac:	7b3a      	ldrb	r2, [r7, #12]
 8005eae:	4911      	ldr	r1, [pc, #68]	; (8005ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8005eb0:	5c8a      	ldrb	r2, [r1, r2]
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005eb6:	7b3a      	ldrb	r2, [r7, #12]
 8005eb8:	490f      	ldr	r1, [pc, #60]	; (8005ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8005eba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ebc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	7b7a      	ldrb	r2, [r7, #13]
 8005ecc:	4909      	ldr	r1, [pc, #36]	; (8005ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8005ece:	5c8a      	ldrb	r2, [r1, r2]
 8005ed0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ed4:	7b7a      	ldrb	r2, [r7, #13]
 8005ed6:	4908      	ldr	r1, [pc, #32]	; (8005ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8005ed8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eda:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	080060c8 	.word	0x080060c8
 8005ef8:	080060d0 	.word	0x080060d0

08005efc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f04:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005f08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	43db      	mvns	r3, r3
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f32:	b084      	sub	sp, #16
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	f107 0014 	add.w	r0, r7, #20
 8005f40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	b004      	add	sp, #16
 8005f72:	4770      	bx	lr

08005f74 <__libc_init_array>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	4d0d      	ldr	r5, [pc, #52]	; (8005fac <__libc_init_array+0x38>)
 8005f78:	4c0d      	ldr	r4, [pc, #52]	; (8005fb0 <__libc_init_array+0x3c>)
 8005f7a:	1b64      	subs	r4, r4, r5
 8005f7c:	10a4      	asrs	r4, r4, #2
 8005f7e:	2600      	movs	r6, #0
 8005f80:	42a6      	cmp	r6, r4
 8005f82:	d109      	bne.n	8005f98 <__libc_init_array+0x24>
 8005f84:	4d0b      	ldr	r5, [pc, #44]	; (8005fb4 <__libc_init_array+0x40>)
 8005f86:	4c0c      	ldr	r4, [pc, #48]	; (8005fb8 <__libc_init_array+0x44>)
 8005f88:	f000 f820 	bl	8005fcc <_init>
 8005f8c:	1b64      	subs	r4, r4, r5
 8005f8e:	10a4      	asrs	r4, r4, #2
 8005f90:	2600      	movs	r6, #0
 8005f92:	42a6      	cmp	r6, r4
 8005f94:	d105      	bne.n	8005fa2 <__libc_init_array+0x2e>
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9c:	4798      	blx	r3
 8005f9e:	3601      	adds	r6, #1
 8005fa0:	e7ee      	b.n	8005f80 <__libc_init_array+0xc>
 8005fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa6:	4798      	blx	r3
 8005fa8:	3601      	adds	r6, #1
 8005faa:	e7f2      	b.n	8005f92 <__libc_init_array+0x1e>
 8005fac:	080060e0 	.word	0x080060e0
 8005fb0:	080060e0 	.word	0x080060e0
 8005fb4:	080060e0 	.word	0x080060e0
 8005fb8:	080060e4 	.word	0x080060e4

08005fbc <memset>:
 8005fbc:	4402      	add	r2, r0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memset+0xa>
 8005fc4:	4770      	bx	lr
 8005fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fca:	e7f9      	b.n	8005fc0 <memset+0x4>

08005fcc <_init>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr

08005fd8 <_fini>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr
